- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Meeting the Yocto Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduces you to the **Yocto Project**. The main concepts of the
    project discussed here are constantly used throughout the book. In addition, we
    will briefly discuss the history of the Yocto Project, OpenEmbedded, Poky, BitBake,
    metadata, and versioning schema. So, fasten your seat belt, and welcome aboard!
  prefs: []
  type: TYPE_NORMAL
- en: What is the Yocto Project?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Yocto Project is a Linux Foundation workgroup and is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The Yocto Project is an open source collaboration project that helps developers
    create custom Linux-based systems that are designed for embedded products regardless
    of the product’s hardware architecture. Yocto Project provides a flexible toolset
    and a development environment that allows embedded device developers across the
    world to collaborate through shared technologies, software stacks, configurations,
    and best practices used to create these tailored Linux images.
  prefs: []
  type: TYPE_NORMAL
- en: Thousands of developers worldwide have discovered that Yocto Project provides
    advantages in both systems and applications development, archival and management
    benefits, and customizations used for speed, footprint, and memory utilization.
    The project is a standard when it comes to delivering embedded software stacks.
    The project allows software customizations and build interchange for multiple
    hardware platforms as well as software stacks that can be maintained and scaled.
  prefs: []
  type: TYPE_NORMAL
- en: '- Yocto Project Overview and Concepts Manual'
  prefs: []
  type: TYPE_NORMAL
- en: The Yocto Project is an open source collaboration project. It supplies templates,
    tools, and methods to help us create custom Linux-based systems for embedded products,
    regardless of the hardware architecture. It can generate tailored Linux distributions
    based on the `glibc` and `musl` C standard libraries and the **Real-Time Operating
    System** (**RTOS**) toolchains for bare-metal development, as done by the Zephyr
    Project.
  prefs: []
  type: TYPE_NORMAL
- en: Being managed by a Linux Foundation member, the project stays independent of
    the member organizations, which participate in many ways and supply resources
    to the project.
  prefs: []
  type: TYPE_NORMAL
- en: It was founded in 2010 as a collaboration of many hardware manufacturers, open
    source operating systems, vendors, and electronics companies to reduce duplication
    of work and supply resources and information catering to new and experienced users.
    Among these resources is OpenEmbedded Core, the core system component provided
    by the OpenEmbedded project.
  prefs: []
  type: TYPE_NORMAL
- en: The Yocto Project aggregates several companies, communities, projects, and tools
    with the same purpose – to build Linux-based embedded products. These stakeholders
    are in the same boat, driven by their community needs to work together.
  prefs: []
  type: TYPE_NORMAL
- en: Delineating the Yocto Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To ease our understanding of the duties and outcomes of the Yocto Project, we
    can use the analogy of a computing machine. The input is a set of data that describes
    what we want, that is, our specification. As an output, we have the desired Linux-based
    embedded product.
  prefs: []
  type: TYPE_NORMAL
- en: The output is composed of the pieces of the operating system. It encompasses
    the Linux kernel, bootloader, and the root filesystem (`rootfs`) bundled and organized
    to work together.
  prefs: []
  type: TYPE_NORMAL
- en: The Yocto Project’s tools are present in all intermediary steps to produce the
    resultant `rootfs` bundle and other deliverables. The previously built software
    components are reused across builds – applications, libraries, or any software
    component.
  prefs: []
  type: TYPE_NORMAL
- en: When reuse is not possible, the software components are built in the correct
    order and with the desired configuration, including fetching the required source
    code from their respective repositories, such as The Linux Kernel Archives ([www.kernel.org](http://www.kernel.org)),
    GitHub, BitBucket, and GitLab.
  prefs: []
  type: TYPE_NORMAL
- en: The Yocto Project’s tools prepare its build environment, utilities, and toolchains,
    reducing the host software dependency. The utilities, versions, and configuration
    options are independent of the host Linux distribution, minimizing the number
    of host utilities to rely on while producing the same result. A subtle but essential
    implication benefit is the considerable increase in determinism, reduced build
    host dependencies, but increased first-time builds.
  prefs: []
  type: TYPE_NORMAL
- en: BitBake and OpenEmbedded Core are under the OpenEmbedded project umbrella, while
    some projects, such as Poky, are under the Yocto Project umbrella. They are all
    complementary and play specific roles in the system. We will understand exactly
    how they work together in this chapter and throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: The alliance of the OpenEmbedded project and the Yocto Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OpenEmbedded project was created around January 2003 when some core developers
    from the **OpenZaurus** project started to work with the new build system. Since
    its beginning, the OpenEmbedded build system has been a task scheduler inspired
    and based on the **Gentoo Portage** package system named BitBake. As a result,
    the project quickly grew its software collection and the supported machine list.
  prefs: []
  type: TYPE_NORMAL
- en: Due to chaotic and uncoordinated development, it was challenging to use OpenEmbedded
    in products that demand a more stable and polished code base, which is how Poky
    distribution was born. Poky started as a subset of the OpenEmbedded build system,
    and had a more polished and stable code base across a limited set of architectures.
    Additionally, its reduced size allowed Poky to develop highlighting technologies,
    such as IDE plugins and **Quick Emulator** (**QEMU**) integration, which are still
    in use.
  prefs: []
  type: TYPE_NORMAL
- en: The Yocto Project and OpenEmbedded project consolidated their efforts on a core
    build system called OpenEmbedded Core. It uses the best of both Poky and OpenEmbedded,
    emphasizing the increased use of additional components, metadata, and subsets.
    Around November 2010, the Linux Foundation announced that the Yocto Project would
    continue this work under a Linux Foundation-sponsored project.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Poky
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Poky is the default Yocto Project reference distribution, which uses OpenEmbedded
    build system technology. It is composed of a collection of tools, configuration
    files, and recipe data (known as metadata). It is platform-independent and performs
    cross-compiling using the BitBake tool, OpenEmbedded Core, and a default set of
    metadata, as shown in the following figure. In addition, it provides the mechanism
    to build and combine thousands of distributed open source projects to form a fully
    customizable, complete, and coherent Linux software stack.
  prefs: []
  type: TYPE_NORMAL
- en: Poky’s main objective is to provide all the features an embedded developer needs.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Poky main components](img/B19361_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – Poky main components
  prefs: []
  type: TYPE_NORMAL
- en: BitBake
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: BitBake is a task scheduler and execution system that parses Python and Shell
    Script code. The code that is parsed generates and runs tasks, which are a set
    of steps ordered per the code’s dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: BitBake evaluates all available metadata, managing dynamic variable expansion,
    dependencies, and code generation. In addition, it keeps track of all tasks to
    ensure their completion, maximizing the use of processing resources to reduce
    build time and predictability. The development of BitBake happens in the [https://lists.openembedded.org/g/bitbake-devel](https://lists.openembedded.org/g/bitbake-devel)
    mailing list, and the source code is in the `bitbake` subdirectory of Poky.
  prefs: []
  type: TYPE_NORMAL
- en: OpenEmbedded Core
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The OpenEmbedded Core metadata collection provides the engine of the Poky build
    system. It provides the core features and aims to be generic and as lean as possible.
    It supports seven different processor architectures (ARM, ARM64, x86, x86-64,
    PowerPC, PowerPC 64, MIPS, MIPS64, RISC-V32, and RISC-V 64), only supporting platforms
    to be emulated by QEMU.
  prefs: []
  type: TYPE_NORMAL
- en: The development is centralized in the [https://lists.openembedded.org/g/openembedded-core](https://lists.openembedded.org/g/openembedded-core)
    ([mailto:openembedded-core@lists.openembedded.org](mailto:openembedded-core@lists.openembedded.org))
    mailing list and houses its metadata inside the `meta` subdirectory of Poky.
  prefs: []
  type: TYPE_NORMAL
- en: Metadata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The metadata includes recipes and configuration files. It is composed of a
    mix of Python and Shell Script text files, providing a tremendously flexible tool.
    Poky uses this to extend OpenEmbedded Core and includes two different layers,
    which are other metadata subsets, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`meta-poky`: This layer provides the default and supported distribution policies,
    visual branding, and metadata tracking information (maintainers, upstream status,
    and so on). This is to serve as a curated template that could be used by distribution
    builders to seed their custom distribution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`meta-yocto-bsp`: This provides the **Board Support Package** (**BSP**) used
    as the reference hardware for the Yocto Project development and **Quality Assurance**
    (**QA**) process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B19361_09.xhtml#_idTextAnchor115), *Developing with Yocto Project*,
    explores the metadata in more detail and serves as a reference when we write our
    recipes.'
  prefs: []
  type: TYPE_NORMAL
- en: The Yocto Project releases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Yocto Project has a release every six months, in April and October. This
    release cycle ensures continuous development flow while providing points of increased
    testing and focus on stability. A release becomes a **Stable** or a **Long-Term
    Support** (**LTS**) release whenever a release is ready.
  prefs: []
  type: TYPE_NORMAL
- en: The support period differs significantly between the stable and LTS releases.
    The support for the stable release is for 7 months, offering 1 month of overlapped
    support for every stable release. The LTS release has a minimal support period
    of 2 years, optionally extended. After the official support period ends, it moves
    to **Community** support and finally reaches **End Of** **Life** (**EOL**).
  prefs: []
  type: TYPE_NORMAL
- en: When the official release support period ends, a release can be Community support
    if a community member steps in to become the community maintainer. Finally, a
    release turns EOL when there is no change in the source code by 2 months, or the
    community maintainer is no longer an active member.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the two release cycles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Stable or LTS release cycles](img/B19361_01_Table_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – Stable or LTS release cycles
  prefs: []
  type: TYPE_NORMAL
- en: '*Table 1.1* provides the Yocto Project version, codename, release date, and
    current support level, which can be seen as follows. The updated table is available
    at [https://wiki.yoctoproject.org/wiki/Releases](https://wiki.yoctoproject.org/wiki/Releases):'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Codename** | **Version** | **Release Date** | **Support Level** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Mickledore | 4.2 | April 2023 | Future (until October 2023) |'
  prefs: []
  type: TYPE_TB
- en: '| Langdale | 4.1 | October 2022 | Stable (until May 2023) |'
  prefs: []
  type: TYPE_TB
- en: '| Kirkstone | 4.0 | May 2022 | LTS (minimum April 2024) |'
  prefs: []
  type: TYPE_TB
- en: '| Honister | 3.4 | October 2021 | EOL |'
  prefs: []
  type: TYPE_TB
- en: '| Hardknott | 3.3 | April 2021 | EOL |'
  prefs: []
  type: TYPE_TB
- en: '| Gatesgarth | 3.2 | Oct 2020 | EOL |'
  prefs: []
  type: TYPE_TB
- en: '| Dunfell | 3.1 | April 2020 | LTS (until April 2024) |'
  prefs: []
  type: TYPE_TB
- en: '| Zeus | 3.0 | October 2019 | EOL |'
  prefs: []
  type: TYPE_TB
- en: '| Warrior | 2.7 | April 2019 | EOL |'
  prefs: []
  type: TYPE_TB
- en: '| Thud | 2.6 | Nov 2018 | EOL |'
  prefs: []
  type: TYPE_TB
- en: '| Sumo | 2.5 | April 2018 | EOL |'
  prefs: []
  type: TYPE_TB
- en: '| Rocko | 2.4 | Oct 2017 | EOL |'
  prefs: []
  type: TYPE_TB
- en: '| Pyro | 2.3 | May 2017 | EOL |'
  prefs: []
  type: TYPE_TB
- en: '| Morty | 2.2 | Nov 2016 | EOL |'
  prefs: []
  type: TYPE_TB
- en: '| Krogoth | 2.1 | Apr 2016 | EOL |'
  prefs: []
  type: TYPE_TB
- en: '| Jethro | 2.0 | Nov 2015 | EOL |'
  prefs: []
  type: TYPE_TB
- en: '| Fido | 1.8 | Apr 2015 | EOL |'
  prefs: []
  type: TYPE_TB
- en: '| Dizzy | 1.7 | Oct 2014 | EOL |'
  prefs: []
  type: TYPE_TB
- en: '| Daisy | 1.6 | Apr 2014 | EOL |'
  prefs: []
  type: TYPE_TB
- en: '| Dora | 1.5 | Oct 2013 | EOL |'
  prefs: []
  type: TYPE_TB
- en: '| Dylan | 1.4 | Apr 2013 | EOL |'
  prefs: []
  type: TYPE_TB
- en: '| Danny | 1.3 | Oct 2012 | EOL |'
  prefs: []
  type: TYPE_TB
- en: '| Denzil | 1.2 | Apr 2012 | EOL |'
  prefs: []
  type: TYPE_TB
- en: '| Edison | 1.1 | Oct 2011 | EOL |'
  prefs: []
  type: TYPE_TB
- en: '| Bernard | 1.0 | Apr 2011 | EOL |'
  prefs: []
  type: TYPE_TB
- en: '| Laverne | 0.9 | Oct 2010 | EOL |'
  prefs: []
  type: TYPE_TB
- en: Table 1.1 – List of Yocto Project versions
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter provided an overview of how the OpenEmbedded project is related
    to the Yocto Project, the components that form Poky, and how the project began.
    The next chapter will introduce the Poky workflow with steps to download, configure,
    and prepare the Poky build environment and how to have the first image built and
    running using QEMU.
  prefs: []
  type: TYPE_NORMAL
