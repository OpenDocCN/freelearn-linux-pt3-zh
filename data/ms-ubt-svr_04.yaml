- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Navigating and Essential Commands
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航和基本命令
- en: 'At this point in our journey, we’ve already covered a lot of ground—we’ve learned
    how to deploy an Ubuntu server, how to manage users, and most recently, how to
    manage software packages. Before we go too far, we should take a moment to learn
    some important concepts and commands that will allow us to build more of the foundational
    knowledge that will serve us well for the remainder of the book and beyond. These
    foundational concepts include core Linux commands for navigating the shell, the
    Linux filesystem layout, viewing the contents of files, and even checking on log
    files. Specifically, this discussion will include:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们旅程的这个阶段，我们已经覆盖了许多内容——我们学会了如何部署 Ubuntu 服务器，如何管理用户，最近还学会了如何管理软件包。在继续之前，我们应该花点时间学习一些重要的概念和命令，这些内容将帮助我们建立更多的基础知识，这些知识将对本书的后续部分乃至更远的未来有所帮助。这些基础概念包括用于浏览
    shell、Linux 文件系统结构、查看文件内容甚至查看日志文件的核心 Linux 命令。具体来说，本讨论将包括：
- en: Learning essential Linux commands
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习基本的 Linux 命令
- en: Understanding the Linux filesystem layout
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Linux 文件系统结构
- en: Viewing the contents of files
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看文件内容
- en: Viewing application log files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看应用程序日志文件
- en: Let’s take some time to learn some essential Linux commands that will help strengthen
    our command-line skills.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花点时间学习一些基本的 Linux 命令，这些命令将帮助我们增强命令行技能。
- en: Learning essential Linux commands
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习基本的 Linux 命令
- en: Building a solid competency on the command line is essential and effectively
    gives any system administrator or engineer superpowers. Our new abilities won’t
    allow us to leap tall buildings in a single bound but will definitely enable us
    to execute terminal commands as if we’re command-line ninjas. While we won’t completely
    master the art of using the command line in this section (that can only come with
    years and experience), we will definitely become more confident.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行上建立坚实的能力至关重要，这将有效地赋予任何系统管理员或工程师超能力。我们的新能力虽然无法让我们一跃而过高楼，但绝对能让我们像命令行忍者一样执行终端命令。虽然我们在这一部分不能完全掌握使用命令行的艺术（那只能通过多年的经验积累），但我们一定会变得更加自信。
- en: First, let’s talk about moving from one place to another within the Linux filesystem.
    Specifically, by “Linux filesystem,” I’m referring to the default structure of
    the various folders (also referred to as “directories”) contained within your
    Ubuntu installation. The Linux filesystem contains many important directories,
    each with its own designated purpose, which we’ll talk about in more detail later
    in this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们来谈谈如何在 Linux 文件系统中从一个位置移动到另一个位置。具体来说，所谓“Linux 文件系统”指的是你在 Ubuntu 安装中默认的各种文件夹（也称为“目录”）的结构。Linux
    文件系统包含许多重要的目录，每个目录都有其指定的用途，我们将在本章后续部分详细讨论这些目录。
- en: 'Before we can explore that further, we’ll need to learn how to navigate from
    one directory to another. The first command we’ll cover in this section relative
    to navigating the filesystem will clarify the directory you’re currently working
    from. For that, we have the `pwd` command. This stands for **print working directory**
    and shows you where you currently are in the filesystem. If you run it, you may
    see output such as this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进一步探索之前，我们需要先学习如何从一个目录切换到另一个目录。我们将在本节中介绍的第一个与浏览文件系统相关的命令将帮助你明确当前所在的目录。为此，我们有
    `pwd` 命令。它代表 **print working directory**，用于显示你当前所在的文件系统位置。如果你运行它，你可能会看到如下输出：
- en: '![](img/B18425_04_01.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_04_01.png)'
- en: 'Figure 4.1: Viewing the current working directory'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1：查看当前工作目录
- en: In this example, when I ran `pwd`, the output informed me that my current working
    directory is `/home/jay`. This is known as your home directory and, by default,
    every user has one (as we discussed in *Chapter 2*, *Managing Users and Permissions*).
    This is where all the files for your user account will reside by default. Sure,
    you can create files anywhere you’d like, even outside your home directory if
    you have permission to do so or you use `sudo`. But just because you *can* doesn’t
    mean you *should*. As you’ll learn in this chapter, the Linux filesystem has a
    designated place for just about everything. But your home directory, located at
    `/home/<username>`, is yours. You own it, you control it—it’s your home on the
    server. In the early 2000s, Linux installations with a graphical user interface
    even depicted your home directory with an icon of a house.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，当我运行`pwd`时，输出告诉我当前工作目录是`/home/jay`。这个目录就是你的家目录，默认情况下，每个用户都有一个（正如我们在*第2章*，*管理用户与权限*中讨论的）。默认情况下，所有与你的用户账户相关的文件都会存储在这里。当然，你可以在任何你想要的位置创建文件，即使是在家目录之外，如果你有权限或者使用`sudo`。但是，仅仅因为你*可以*这样做，并不意味着你*应该*。正如你将在本章中学到的那样，Linux文件系统几乎为所有内容都有一个指定的位置。但你的家目录，位于`/home/<用户名>`，是属于你的。你拥有它，你控制它——它是你在服务器上的家。在2000年代初期，带图形用户界面的Linux安装系统甚至通过一个房子图标来表示你的家目录。
- en: 'Typically, files that you create in your home directory will have permission
    strings similar to this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你在家目录中创建的文件，其权限字符串大致如下：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We’ve discussed permissions and gone over how to read a permission string in
    *Chapter 2*, *Managing Users and Permissions*, but you can see that by default,
    files you create in your home directory are owned by your user, your group, and
    are readable by all three categories (user, group, and other).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了权限，并且在*第2章*，*管理用户与权限*中讲解了如何读取权限字符串，但你可以看到，默认情况下，你在家目录中创建的文件由你自己、你的用户组拥有，并且可以被三类用户（用户、组、其他）读取。
- en: 'To change our current directory and navigate to another, we can use the `cd`
    command along with a path we’d like to move to:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改当前目录并导航到另一个目录，我们可以使用`cd`命令并指定目标路径：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, I haven’t gone over the file and directory layout yet, so I just randomly
    picked the `/etc` directory. The forward slash at the beginning designates the
    beginning of the filesystem. More on that later. Now, we’re in the `/etc` directory,
    and our command prompt has even changed as well:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我还没有查看文件和目录布局，所以我随便选择了`/etc`目录。前面的斜杠表示文件系统的开始。稍后会详细讲解。现在，我们在`/etc`目录中，并且我们的命令提示符也发生了变化：
- en: '![](img/B18425_04_02.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_04_02.png)'
- en: 'Figure 4.2: Command prompt and pwd command after changing a directory'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2：切换目录后，命令提示符和pwd命令的输出
- en: 'As you could probably guess, the `cd` command stands for *change directory*,
    and it’s how you move your working directory from one to another while navigating
    around. You can use the following command, for example, to return back to the
    home directory:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能猜到的，`cd`命令代表*切换目录*，它用于在导航时将当前工作目录从一个目录切换到另一个目录。例如，你可以使用以下命令返回家目录：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In fact, there are several ways to return home, a few of which are demonstrated
    in the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，有多种方法可以返回家目录，以下截图展示了其中几种方法：
- en: '![](img/B18425_04_03.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_04_03.png)'
- en: 'Figure 4.3: Other ways of navigating to the home directory'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3：其他进入家目录的方法
- en: The first command, `cd -`, doesn’t actually have anything to do with your home
    directory specifically. It’s a neat trick to return you to whatever directory
    you were in most recently. For me, the `cd –` command took me to the previous
    directory I was in, which just so happened to be `/home/jay`. The second command,
    `cd /home/jay`, took me directly to my home directory since I called out the entire
    path. The last command, `cd ~`, also took me to my home directory. This is because
    `~` is shorthand for the full path to your home directory, so you don’t really
    ever have to type out the entire path to `/home/<user>`. You can just refer to
    that path simply as `~`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令，`cd -`，其实并不专门与家目录有关。它是一个巧妙的技巧，可以让你返回到你最近所在的目录。对我来说，`cd -`命令把我带回到我之前所在的目录，而那个目录恰好是`/home/jay`。第二个命令，`cd
    /home/jay`，直接把我带到了家目录，因为我指定了完整路径。最后一个命令，`cd ~`，也把我带到了家目录。这是因为`~`是家目录路径的简写，因此你不需要每次都输入完整路径`/home/<user>`，只需使用`~`来代替。
- en: 'Another essential command is `ls`. The `ls` command lists the contents of the
    current working directory. We probably don’t have any content in our home directory
    yet. But if we navigate to `/etc` by running `cd /etc`, as we did earlier, and
    then execute `ls`, we’ll see that the `/etc` directory has a number of files in
    it. Go ahead and try it yourself and see:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个基本命令是`ls`。`ls`命令列出当前工作目录的内容。我们可能还没有在主目录中存放任何内容。但是，如果我们通过执行`cd /etc`（就像之前做的那样）导航到`/etc`，然后执行`ls`，我们会看到`/etc`目录中有许多文件。试试看吧：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We didn’t actually have to change our working directory to `/etc` just to list
    the contents. We could’ve just executed the following command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们并不需要改变工作目录到`/etc`来列出内容。我们可以直接执行以下命令：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Even better, we can run:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的是，我们可以运行：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This gives us the contents in a long list, which I think is much easier to understand.
    It will show each directory or file entry on its own line, along with the permission
    string. But, you probably already remember `ls` as well as `ls -l` from back in
    *Chapter 2*, *Managing Users and Permissions*, so I won’t go into too much more
    detail here. The `-l` portion of the `ls` command in that example is known as
    an **argument**. I’m not referring to an argument such as the ever-ensuing debate
    in the Linux community over which command-line text editor is the best between
    Vim and Emacs (it’s clearly Vim). Instead, I’m referring to the concept of an
    argument in shell commands that allow you to override the defaults, or feed options
    to the command in some way, such as in this example, where we format the output
    of `ls` to be in a long list.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将以长列表的形式显示内容，我认为这样更容易理解。它会将每个目录或文件条目显示在单独的一行上，并附上权限字符串。但你可能已经记得`ls`和`ls -l`，这两者在*第二章*，*用户与权限管理*中提到过，所以我在这里不再详细说明。那例子中`ls`命令的`-l`部分被称为**参数**。我并不是指Linux社区中关于哪个命令行文本编辑器最好（无疑是Vim）的永无休止的辩论，而是指在Shell命令中，参数可以让你覆盖默认设置，或者以某种方式为命令提供选项，就像在这个例子中，我们将`ls`的输出格式化为长列表。
- en: 'The `rm` command is another one that we touched on in *Chapter 2*, *Managing
    Users and Permissions*, when we were discussing manually removing the home directory
    of a user that was removed from the system. So, at this point, you’re probably
    well aware of that command and what it does (it removes files and directories).
    It’s a potentially dangerous command, as you could use it to accidentally remove
    something that you shouldn’t have. In that chapter, we used the following command
    to remove the home directory of user `dscully`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`rm`命令是我们在*第二章*，*用户与权限管理*中提到的另一个命令，当时我们讨论了手动删除已从系统中移除的用户的主目录。因此，到现在为止，你可能已经很熟悉这个命令及其功能（它用于删除文件和目录）。这是一个潜在危险的命令，因为你可能会不小心删除不该删除的内容。在那一章中，我们使用了以下命令来删除用户`dscully`的主目录：'
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see, we’re using the `-r` argument to alter the behavior of the `rm`
    command, which, by default, doesn’t remove directories but only files. The `-r`
    argument instructs `rm` to remove everything recursively, even if it’s a directory.
    The `-r` argument will also remove subdirectories of the path as well, so you’ll
    definitely want to be careful with this command. As I’ve mentioned earlier in
    the book, if you use `sudo` with `rm`, you can hypothetically delete your entire
    Ubuntu installation!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们使用`-r`参数来改变`rm`命令的行为，默认情况下，`rm`不会删除目录，只会删除文件。`-r`参数指示`rm`递归地删除一切，甚至是目录。`-r`参数还会删除路径中的子目录，因此你在使用此命令时一定要小心。正如我在书中早些时候提到的，如果你与`rm`一起使用`sudo`，你甚至有可能删除整个Ubuntu系统！
- en: Another option offered by `rm` is the `-f` argument, which is short for *force*,
    and it tells `rm` not to prompt before removing things. This argument won’t be
    needed as often, and use cases for it are outside the scope of this chapter. But
    keep in mind that it exists, should you need it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`rm`提供的另一个选项是`-f`参数，代表*force*（强制），它告诉`rm`在删除前不要进行确认提示。这个参数不常用，它的使用案例超出了本章的范围。但请记住它的存在，万一需要的话。'
- en: 'Another foundational command that’s good to know is `touch`, which actually
    serves two purposes. First, assuming you have permission to do so in your current
    working directory, the `touch` command will create an empty file if it doesn’t
    already exist. Second, the `touch` command will update the modification time of
    a file or directory if it does already exist:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个值得了解的基础命令是`touch`，它实际上有两个用途。首先，假设你在当前工作目录中有权限，`touch`命令将创建一个空文件（如果文件尚不存在的话）。其次，`touch`命令将更新文件或目录的修改时间（如果它已经存在的话）：
- en: '![](img/B18425_04_04.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_04_04.png)'
- en: 'Figure 4.4: Experimenting with the touch command'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.4：使用`touch`命令进行实验
- en: 'To illustrate this, in the related screenshot, I ran several commands. First,
    I ran the following command to create an empty file:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一点，在相关的截图中，我运行了几个命令。首先，我运行了以下命令来创建一个空文件：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: That file didn’t exist before, so when I ran `ls -l` afterward, it showed the
    newly created file with a size of 0 bytes. Next, I ran the `touch testfile.txt`
    command again a minute later, and you can see in the screenshot that the modification
    time went from `15:12` to `15:13`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 之前那个文件并不存在，所以当我之后运行`ls -l`时，它显示了新创建的文件，大小为0字节。接下来，我在一分钟后再次运行了`touch testfile.txt`命令，你可以在截图中看到，修改时间从`15:12`变成了`15:13`。
- en: When it comes to viewing the contents of a file, we’ll get to that later on
    in this chapter. And there are definitely more commands that we’ll need to learn
    to build the basis of our foundation. But for now, let’s take a break from the
    foundational concepts to understand the Linux filesystem layout better, which
    is pretty much mandatory for some of the commands we’ll learn later.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 关于查看文件内容，我们将在本章稍后讨论。我们肯定还需要学习更多的命令，以建立我们的基础。但现在，让我们暂时从基础概念中休息一下，来更好地理解Linux文件系统布局，这对我们稍后将要学习的一些命令来说是必不可少的。
- en: Understanding the Linux filesystem layout
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Linux文件系统布局
- en: As I mentioned earlier, every directory in a Linux installation has a designated
    purpose. It isn’t a hard rule that you have to follow, more of a strong recommendation
    for where certain things are supposed to go.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前提到的，Linux安装中的每个目录都有一个指定的用途。这不是硬性规则，而是关于某些内容应该放置位置的强烈推荐。
- en: You can certainly go against the recommendations; ultimately, you have full
    control over your installation. But, if you make it a habit to place files in
    strange locations, you may annoy your colleagues. In this section, we’ll go over
    the most common directories and talk about their purpose.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你当然可以不遵循这些推荐；最终，你对你的安装拥有完全的控制权。但是，如果你习惯将文件放在奇怪的地方，可能会惹恼你的同事。在这一节中，我们将介绍最常见的目录并讨论它们的用途。
- en: The term *filesystem* itself can be somewhat confusing in the Linux world because
    it can refer to two different things—the default directory structure, as well
    as the actual filesystem we choose when formatting a volume such as a hard drive
    or flash drive (ext4, XFS, and so on). Specific to this section, we’re going to
    take a quick look at the Linux filesystem in the context of the default directory
    structure.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux世界中，*文件系统*一词本身可能会让人感到困惑，因为它可以指代两个不同的事物——默认的目录结构，以及在格式化磁盘如硬盘或闪存驱动器时选择的实际文件系统（如ext4、XFS等）。在本节中，我们将快速了解Linux文件系统，重点关注默认的目录结构。
- en: In Linux (Ubuntu uses the Linux kernel and related utilities, so therefore it
    is a *distribution* of Linux), the filesystem begins with a single forward slash,
    `/`. This is considered the beginning of the filesystem, and directories and sub-directories
    branch out from there. For example, consider the `/home` directory. This directory
    exists at the root level of the filesystem, which you can see from the fact that
    it begins with a forward slash. The home directory on my system is `/home/jay`,
    which means that it’s the `jay` directory, which is inside the `home` directory,
    and that directory is at the beginning of the filesystem.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中（Ubuntu使用Linux内核和相关工具，因此它是Linux的一个*发行版*），文件系统从一个单独的斜杠`/`开始。这被认为是文件系统的起点，目录和子目录从这里分支出来。例如，考虑`/home`目录。这个目录存在于文件系统的根级别，你可以通过它以斜杠开始来看到这一点。我的系统上的主目录是`/home/jay`，这意味着它是`home`目录中的`jay`目录，而这个目录位于文件系统的起始位置。
- en: This is confusing at first but becomes very logical once you become accustomed
    to it. If you’re familiar with Microsoft Windows, then you can technically think
    of `/` as the `C:` drive. It’s actually a bit more complex than that, but if we
    forego some of the quirks, that comparison works. To really bring this home, use
    the `ls` command against several directories on your server. If you execute `ls
    /`, you will see all of the directories at the root of the filesystem.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 起初可能会感到困惑，但一旦习惯了，就会变得非常合乎逻辑。如果您熟悉 Microsoft Windows，那么您可以将 `/` 技术上视为 `C:` 驱动器。实际上比这复杂一些，但如果我们忽略一些怪癖，这个比较是成立的。为了更好地理解这一点，请在服务器上对几个目录执行
    `ls` 命令。如果您执行 `ls /`，您将看到文件系统根目录下的所有目录。
- en: 'You’ll see the `home` directory among the results, among many others. For those
    of you who prefer a more visual representation, the following screenshot shows
    an example filesystem:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在结果中您会看到 `home` 目录，以及许多其他目录。对于那些更喜欢视觉表现的人，以下截图展示了一个文件系统示例：
- en: '![Diagram  Description automatically generated](img/B18425_04_05.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![自动生成的图表描述](img/B18425_04_05.png)'
- en: 'Figure 4.5: Diagram of a portion of a typical Linux filesystem'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5：典型 Linux 文件系统部分的图表
- en: As you can see, the Linux filesystem resembles a tree, with a main branch that
    extends outward and directories branch out from one another. This default directory
    structure is part of the **Filesystem Hierarchy Standard** (**FHS**), which is
    a set of guidelines that defines how the directory structure is laid out. This
    specification defines the names of the directories, where they are located, and
    what they are for. Distributions will sometimes go against some of the definitions
    here, but for the most part, follow it fairly closely. This is why you may see
    a very similar (if not the same) directory structure on distributions of Linux
    other than Ubuntu.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，Linux 文件系统类似于一棵树，有一个主干向外延伸，目录之间相互分支。这个默认的目录结构是 **文件系统层次结构标准**（**FHS**）的一部分，它是一组指南，定义了目录结构的布局方式。该规范定义了目录的名称、位置以及用途。发行版有时会违反这里的一些定义，但大部分时间还是遵循得比较严格的。这就是为什么您可能会在
    Ubuntu 以外的 Linux 发行版上看到非常相似（如果不是完全相同）的目录结构。
- en: So, why is this important? As I mentioned, each directory generally has a purpose.
    There are some debates about the default layout from time to time, and some changes
    are made every now and then. But in regard to Linux, the filesystem layout tends
    to change less frequently than other things do.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这为何重要呢？正如我所提到的，每个目录通常都有其用途。关于默认布局有时会有一些争议，并且偶尔会有一些更改。但就 Linux 而言，文件系统布局的更改频率通常低于其他方面。
- en: A full walkthrough of the FHS would be astronomical, but I have included a link
    to this specification at the end of the chapter should you decide to read more
    about it. There are some directories you definitely should know, however. Here
    are some of the more important ones.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: FHS 的完整详细解释将非常庞大，但在本章末尾我包含了该规范的链接，如果您决定进一步了解它，可以查阅。然而，有一些目录确实是您必须了解的。以下是一些比较重要的。
- en: '| **Directory** | **Purpose** |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| **目录** | **用途** |'
- en: '| `/` | The beginning of the filesystem; all directories are underneath this
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `/` | 文件系统的开始；所有目录都位于其下 |'
- en: '| `/etc` | System-wide application configuration |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `/etc` | 系统范围的应用配置 |'
- en: '| `/home` | User home directories |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `/home` | 用户主目录 |'
- en: '| `/root` | The home directory for root (root doesn’t have a directory under
    /home) |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `/root` | root 用户的主目录（root 用户在 /home 下没有目录） |'
- en: '| `/media` | For removable media, such as flash drives |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `/media` | 可移动媒体，如闪存驱动器 |'
- en: '| `/mnt` | For volumes that are intended to stay mounted for a while |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `/mnt` | 长时间挂载的卷 |'
- en: '| `/opt` | Additional software packages (some programs are installed here,
    not as common) |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `/opt` | 额外的软件包（某些程序安装在这里，不太常见） |'
- en: '| `/bin` | Essential user binaries (ls, cp, and so on) |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `/bin` | 用户必需的二进制文件（如 ls、cp 等） |'
- en: '| `/proc` | Virtual filesystem for OS-level components |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `/proc` | 用于操作系统级组件的虚拟文件系统 |'
- en: '| `/usr/bin` | A majority of user commands |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `/usr/bin` | 大多数用户命令 |'
- en: '| `/usr/lib` | Libraries |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `/usr/lib` | 库文件 |'
- en: '| `/var/log` | Log files |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `/var/log` | 日志文件 |'
- en: The `/etc` directory deserves some additional discussion, as you’ll no doubt
    be working with it a lot. This directory, as mentioned in the preceding table,
    holds configuration files for applications that are intended to be respected system-wide.
    For example, if you’re running the OpenSSH daemon on your server, you’re listening
    for connections via port 22 by default. (Don’t worry, we’ll discuss these individual
    concepts in further chapters.) The configuration file for the OpenSSH server is
    located in the `/etc/ssh` directory. Since OpenSSH is a service that runs on the
    system as a background process, its configuration is stored in the `sshd_config`
    file inside that directory. If you remove the package responsible for providing
    OpenSSH, the configuration is retained in that file (removing packages doesn’t
    also remove config files by default), so if you go to reinstall OpenSSH later,
    you’ll have the same configuration the next time. If we want to wipe out the configuration
    while uninstalling a package, we can use the `--purge` option with the `apt remove`
    command to do so, as we saw in *Chapter 3*, *Managing Software Packages*.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`/etc`目录值得额外讨论，因为你肯定会频繁地使用它。正如前表所述，这个目录包含了应用程序的配置文件，这些配置文件是系统范围内需要被遵守的。例如，如果你在服务器上运行OpenSSH守护进程，默认情况下你会监听22号端口的连接。（别担心，我们会在后续章节中进一步讨论这些具体概念。）OpenSSH服务器的配置文件位于`/etc/ssh`目录中。由于OpenSSH是一个作为后台进程在系统上运行的服务，它的配置文件存储在该目录中的`sshd_config`文件内。如果你删除了提供OpenSSH的包，配置文件仍然会保留（默认情况下，删除包并不会删除配置文件），所以如果你稍后重新安装OpenSSH，下次会有相同的配置。如果我们希望在卸载软件包时同时删除配置文件，可以使用`apt
    remove`命令的`--purge`选项，正如我们在*第3章*《管理软件包》中所看到的那样。'
- en: Other directories of importance will be discussed as we progress through the
    topics in this book. Don’t worry if some of this doesn’t make sense right now;
    it will come with time. The main point here is that there are many directories,
    each having its own purpose. If you want to know the purpose of a particular directory,
    consult the FHS. If you’re curious where you should place something on a server,
    also consult the FHS. But again, don’t worry too much about doing research outside
    of this book, as we’ll cover the necessary topics as we go along.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中会随着主题的推进讨论其他重要的目录。如果现在某些内容让你感到困惑，不用担心；随着时间的推移，你会理解的。这里的关键点是，系统中有很多目录，每个目录都有其特定的用途。如果你想了解某个特定目录的用途，可以查阅FHS。如果你想知道应该在服务器上放置某些文件的位置，同样也可以查阅FHS。但再强调一次，不必过于担心去查阅本书以外的资料，因为我们会在后续章节中覆盖所有必要的内容。
- en: We now have a better understanding of the default filesystem layout and the
    purpose of some common directories. In the next section, we’ll explore how we
    can view the contents of files stored in those directories.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对默认的文件系统布局和一些常见目录的用途有了更好的理解。在下一节中，我们将探索如何查看存储在这些目录中的文件内容。
- en: Viewing the contents of files
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看文件内容
- en: The Linux filesystem contains many directories and files. In the case of files,
    we need to learn how to read and manipulate them to round out our knowledge. We’ll
    cover more topics surrounding file management in the next chapter. For now, we
    can benefit by taking a look at how to view the content of existing files.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Linux文件系统包含许多目录和文件。对于文件，我们需要学习如何读取和操作它们，以完善我们的知识。我们将在下一章中覆盖更多关于文件管理的话题。现在，我们可以通过查看如何查看现有文件的内容来获得一些帮助。
- en: 'We can print the contents of a file to the screen with the `cat` command, along
    with a filename as an argument. The following command, for example, can be used
    to view the contents of `testfile.txt` in our current working directory, which
    we created earlier in the chapter when we discussed the `touch` command. Sure,
    this exercise is rather pointless since that file is empty, but it offers a good
    first example:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`cat`命令将文件内容打印到屏幕上，并提供文件名作为参数。例如，以下命令可以用来查看当前工作目录中`testfile.txt`的内容，这是我们在本章讨论`touch`命令时创建的文件。虽然这个练习有些无意义，因为该文件为空，但它提供了一个很好的初步示例：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'There’s no output, since again, the file is empty. So, let’s instead take a
    look at a more practical example. Here’s a file we can use `cat` against that
    actually does have content inside:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 由于文件为空，因此没有输出。那么，让我们看一个更实际的例子。以下是一个我们可以用`cat`命令查看的文件，它实际上包含了内容：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output of this command is as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出如下所示：
- en: '![](img/B18425_04_06.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_04_06.png)'
- en: 'Figure 4.6: Viewing the contents of /etc/os-release'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.6：查看/etc/os-release的内容
- en: 'The `/etc/os-release` file is one that exists on many distributions. It’s a
    special file that gives you some information about the distribution of Linux that’s
    currently installed. If you were to connect to a Linux server and wanted to know
    which distribution it was running, viewing the contents of this file is one way
    to find out. You can also view some of the same info in abbreviated form via the
    following command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`/etc/os-release`文件是许多发行版中都存在的一个文件。它是一个特殊的文件，提供有关当前安装的Linux发行版的一些信息。如果你连接到一台Linux服务器并想知道它运行的是哪个发行版，查看该文件的内容是一种了解方法。你也可以通过以下命令查看以简化形式呈现的一些相同信息：'
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'That command also works on various distributions, but I prefer the `/etc/os-release`
    file because it contains more information. Regardless, the entire point of this
    exercise is to demonstrate that the `cat` command allows you to view the contents
    of a file. More or less, there are other commands that also let you do the same
    thing. And I mean that literally—you can also try viewing the contents of `/etc/os-release`
    with `more` or `less`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令在各种发行版上都能工作，但我更喜欢使用`/etc/os-release`文件，因为它包含更多的信息。无论如何，这个练习的核心目的是演示`cat`命令允许你查看文件内容。差不多，还有其他命令也能实现同样的功能。我的意思是，你也可以尝试用`more`或`less`查看`/etc/os-release`的内容：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `more` command allows you to more easily view larger files, so the benefit
    won’t be as immediately apparent with a file as short as `/etc/os-release`. If
    you use `more` to view a longer file, it will stop the output when it fills the
    screen, and allow you to press *Enter* to advance to the next line.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`more`命令使你更容易查看较大的文件，因此对于像`/etc/os-release`这样较短的文件，其优势不会立即显现。如果你使用`more`查看一个较长的文件，它将在填满屏幕后停止输出，并允许你按*Enter*键继续查看下一行。'
- en: The `less` command allows you to do the same thing, but also allows you to not
    only use your arrow keys in addition to *Enter* to view more output; it also allows
    you to advance forward or backward as well. So essentially, the `less` command
    gives you more features than the `more` command does.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`less`命令允许你做相同的事情，但它还允许你使用箭头键以及*Enter*键查看更多输出；它还允许你向前或向后滚动。因此，本质上，`less`命令比`more`命令提供了更多功能。'
- en: In addition, we also have the `grep` command at our disposal. It’s not typically
    used to simply view the contents of a file, but it’s definitely a great command
    to know that can help you view specifically what you want to view, rather than
    the entire file.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以使用`grep`命令。它通常不用于仅仅查看文件内容，但它绝对是一个值得了解的好命令，能够帮助你查看你特别想要查看的部分，而不是整个文件。
- en: 'If you chose to install the OpenSSH server when you first installed Ubuntu
    Server, you should have the config file for it in your installation, and you can
    view the contents of that file with `cat` as we normally would:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在首次安装Ubuntu Server时选择安装了OpenSSH服务器，你应该在安装中包含了它的配置文件，并且可以像平常一样使用`cat`命令查看该文件的内容：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Of course, that’s going to dump the contents of that file onto our screen,
    and the file is many more lines than what the typical monitor is able to display
    all at once. We might be interested in a particular line or word, so we’ll need
    to be able to narrow down the file to what we actually care about. We’ll talk
    about the OpenSSH server in more detail in *Chapter 10*, *Connecting to Networks*,
    so don’t worry about what this configuration file means yet. Let’s just say, hypothetically,
    we’re only interested in the port that OpenSSH is listening on. We can use the
    `grep` command to try and print only the lines of the `/etc/ssh/sshd_config` file
    that pertain to that specific configuration:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这将把该文件的内容打印到屏幕上，而文件的内容远远超过典型显示器一次性能够显示的内容。我们可能对某一特定行或单词感兴趣，因此需要能够将文件缩小到我们实际关心的部分。我们将在*第10章*《连接网络》中更详细地讨论OpenSSH服务器，所以目前不用担心这个配置文件的意义。假设我们只关心OpenSSH监听的端口，我们可以使用`grep`命令来打印出`/etc/ssh/sshd_config`文件中与此特定配置相关的行：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This command will produce the following output:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将输出以下内容：
- en: '![](img/B18425_04_07.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_04_07.png)'
- en: 'Figure 4.7: Viewing the contents of the /etc/ssh/sshd_config file with grep
    to find lines containing “Port”'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.7：使用grep查看/etc/ssh/sshd_config文件的内容，以查找包含“Port”的行
- en: Essentially, what we’re doing is instructing `grep` to print only the lines
    of the `/etc/ssh/sshd_config` file that contain the string `Port`. In the screenshot,
    a single line contained a match for that string, so it displayed. That output
    is certainly better than scrolling through the 123 lines of text in the file,
    when we’re only interested in lines pertaining to the port.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，我们所做的是指示`grep`仅打印出`/etc/ssh/sshd_config`文件中包含`Port`字符串的行。在截图中，只有一行包含了该字符串的匹配，因此显示出来。相比于在文件的123行文本中滚动查找，看到这个输出无疑更有效，尤其是当我们只关心与端口相关的行时。
- en: By default, `grep` is case-sensitive. This means that if we were to use `grep`
    to find lines matching “port” (with a lowercase P), we would get no output at
    all. We can simply add the `-i` argument to make the search case-insensitive.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`grep`是区分大小写的。这意味着，如果我们使用`grep`查找“port”（小写的 P）匹配的行，我们将完全得不到任何输出。我们可以简单地添加`-i`参数来使搜索不区分大小写。
- en: 'It’s very common to see the `grep` command paired with another command, such
    as `cat`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 将`grep`命令与其他命令（例如`cat`）搭配使用是非常常见的：
- en: '[PRE14]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: That’s a perfectly valid command and will do the same thing. However, it’s fairly
    redundant. We’ll get into the concept of redirecting output in the next chapter,
    but essentially this command takes the output of the `cat` command and redirects
    it as input to the `grep` command. Using `cat` to first print out the file and
    then have `grep` grab the contents of that file and search it for a string is
    a two-step process where only one step is required. But again, it’s still a valid
    command.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个完全有效的命令，并且会做相同的事情。然而，它有些冗余。我们将在下一章介绍输出重定向的概念，但本质上，这个命令将`cat`命令的输出重定向作为`grep`命令的输入。使用`cat`先打印出文件，然后让`grep`抓取该文件的内容并搜索字符串，这是一个两步过程，而实际上只需要一步。但话说回来，它仍然是一个有效的命令。
- en: To this day, I’ll personally use the `cat` command with `grep` to do the same
    thing out of habit, as this was how all new Linux users were taught back when
    I started. You’ll even see me do this in my YouTube videos—old habits are hard
    to break!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 直到今天，我仍然习惯性地使用`cat`命令配合`grep`来做同样的事情，因为这就是我刚开始使用 Linux 时，所有新用户被教导的方法。你甚至会在我的
    YouTube 视频中看到我这么做——老习惯很难改掉！
- en: Log files are a great source of information about what’s going on in the background
    of your server, and are especially useful for troubleshooting. We’ll now transition
    into a discussion on viewing these files and some relevant commands pertaining
    to logging.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 日志文件是了解服务器后台发生情况的宝贵信息来源，特别是在故障排除时非常有用。接下来我们将转入关于如何查看这些文件以及与日志相关的命令的讨论。
- en: Viewing application log files
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看应用程序日志文件
- en: In the last section of this chapter, let’s explore log files a bit, as they
    bring several concepts that we’ve discussed full circle. We went through an overview
    of the default directory layout, practiced viewing files, and we learned how to
    search files for strings. We’ll discuss log files in greater detail later on in
    the book, but we can use all of these concepts to take an initial look at viewing
    log files now.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后一节，我们来稍微探讨一下日志文件，因为它们包含了我们已经讨论过的一些概念，形成了一个完整的循环。我们回顾了默认目录结构，练习了查看文件，并学习了如何搜索文件中的字符串。稍后我们会更详细地讨论日志文件，但现在我们可以利用这些概念初步了解如何查看日志文件。
- en: If you recall, during the discussion of the Linux filesystem layout earlier
    in this chapter, there was a table showing some of the most common directories
    that exist. Among the items in that table, I called out the `/var/log` directory.
    While logging is transitioning to a different style (more on that in *Chapter
    22*, *Troubleshooting Ubuntu Servers*), we’ll have a series of logs in the `/var/log`
    directory. Go ahead and use the `ls` command yourself, and you’ll see there are
    quite a few files there. While I won’t go through all of them in this chapter,
    let’s take a look at `/var/log/syslog`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得，在本章前面讨论 Linux 文件系统布局时，我们展示了一张表格，列出了其中一些最常见的目录。在那张表格中的项目中，我提到了`/var/log`目录。尽管日志记录方式正在过渡到另一种风格（更多内容会在*第22章*，《Ubuntu服务器故障排除》中讲到），但我们在`/var/log`目录中会有一系列日志文件。自己运行一下`ls`命令，你会看到那里面有相当多的文件。虽然我不会在本章中详细讲解它们，但让我们来看一下`/var/log/syslog`。
- en: 'The content of this file is going to have quite a few lines. This is the system
    log, which is used to view informational messages about what’s going on in the
    background as Ubuntu runs on your server, and will show warnings and errors as
    well. If you run into a problem where something isn’t working quite right, you
    may see output in the system log that will provide you with some sort of error
    you can look up in a search engine so you can try and find a resolution. For example,
    you can use `grep` to view any lines that contain the search term *Network* if
    you’re having issues with your connection:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件的内容将包含相当多的行。这是系统日志，用于查看关于Ubuntu在你的服务器上运行时的背景信息消息，并且还会显示警告和错误。如果你遇到某个功能不正常的情况，你可能会在系统日志中看到一些输出，提供某种错误信息，你可以通过搜索引擎查找并尝试找到解决方法。例如，如果你的连接出现问题，你可以使用`grep`查看包含搜索词*Network*的行：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: That’s just a hypothetical example, but it may show lines that are relevant.
    Adjust your search term to whatever you’re interested in finding.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个假设的示例，但它可能显示相关的行。根据你的需求调整搜索词，以便找到你想要的信息。
- en: 'This is also a good time to introduce you to the `head` and `tail` commands.
    These commands will show the first ten or last ten lines of a file, respectively.
    This is useful for the `/var/log/syslog` file because again, that file is quite
    large, and you may only be interested in certain lines. You can also adjust the
    number of lines the `head` and `tail` commands show with the `-n` option with
    a desired number of lines. For example, to view the last `100` lines of a file:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在也是介绍`head`和`tail`命令的好时机。这些命令分别显示文件的前十行或最后十行。这对`/var/log/syslog`文件很有用，因为该文件非常大，你可能只对某些行感兴趣。你还可以使用`-n`选项调整`head`和`tail`命令显示的行数，指定你想要的行数。例如，要查看文件的最后`100`行：
- en: '[PRE16]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Perhaps even more useful is the `-f` option:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 也许更有用的是`-f`选项：
- en: '[PRE17]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This allows you to follow (watch) a file in (almost) real time. With the `-f`
    option, the terminal will continue to display new lines in this file as they’re
    appended, so you can monitor the log file as someone attempts to reproduce a problem,
    for example. You can press *Ctrl* + *c* on your keyboard to break out of the follow
    mode and return back to the command prompt.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得你能够在（几乎）实时中跟踪（查看）文件。使用`-f`选项时，终端会继续显示文件中新添加的行，因此你可以监控日志文件，举个例子，当某人尝试重现问题时。你可以按下键盘上的*Ctrl*
    + *c*来退出跟踪模式并返回到命令提示符。
- en: Of course, there are many more foundational commands and concepts that we can
    go over, but I think that this is enough for now. In the next chapter, we’ll expand
    on this further. But for now, I recommend you practice all of the concepts in
    this chapter until you’re familiar with them before we go on.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，还有更多我们可以讲解的基础命令和概念，但我认为现在这些已经足够了。在下一章中，我们将进一步扩展这些内容。但现在，我建议你先练习这一章中的所有概念，直到你熟悉它们为止，再继续前进。
- en: Summary
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: There are more Linux commands than you’ll ever be able to memorize. Most of
    us just memorize our favorite commands and variations of commands, and you’ll
    develop your own menu of these commands as you learn and expand your knowledge.
    In this chapter, we covered many of the foundational commands that are, for the
    most part, essential. Commands such as `grep`, `cat`, `cd`, `ls`, and others were
    explored this time around. The next chapter is essentially a continuation of this
    one, but I wanted to split the foundational concepts into two chapters rather
    than one enormous one.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Linux命令比你能记住的要多。我们大多数人只记住我们喜欢的命令和命令的变体，随着学习和知识的扩展，你将会形成自己的命令菜单。在这一章中，我们介绍了许多基础命令，大部分是必需的。我们探讨了如`grep`、`cat`、`cd`、`ls`等命令。下一章本质上是这一章的延续，但我想将基础概念分为两章，而不是一章巨大的篇幅。
- en: In the next chapter, we’ll expand our foundational knowledge with a deeper look
    at file management, including editing files, input/output streams, and symbolic
    links, and we’ll even reveal the secret to life itself. Well, maybe not the latter,
    but the next chapter will still be great. See you there!
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过更深入的文件管理知识来扩展我们的基础知识，包括编辑文件、输入/输出流和符号链接，甚至会揭示生活的秘密。嗯，也许不是最后一个，但下一章仍然会很精彩。到时见！
- en: Relevant video
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关视频
- en: 'Linux Crash Course – Navigating the Linux Filesystem (LearnLinuxTV): [https://linux.video/lcc-navigating](https://linux.video/lcc-navigating)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux速成课程 – 浏览Linux文件系统（LearnLinuxTV）：[https://linux.video/lcc-navigating](https://linux.video/lcc-navigating)
- en: Further reading
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Filesystem Hierarchy Standard: [https://learnlinux.link/fhs-doc](https://learnlinux.link/fhs-doc)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件系统层次结构标准： [https://learnlinux.link/fhs-doc](https://learnlinux.link/fhs-doc)
- en: 'UsingTheTerminal: [https://learnlinux.link/using-term](https://learnlinux.link/using-term)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用终端： [https://learnlinux.link/using-term](https://learnlinux.link/using-term)
- en: Join our community on Discord
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们的社区 Discord 空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/LWaZ0](https://packt.link/LWaZ0)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/LWaZ0](https://packt.link/LWaZ0)'
- en: '![](img/QR_Code50046724-1955875156.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code50046724-1955875156.png)'
