- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Filesystem Mount and Manipulation Commands
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件系统挂载和操作命令
- en: The Linux filesystem mount and manipulation commands are a set of essential
    tools that allow Linux system administrators to manage and manipulate filesystems
    and storage devices. These commands provide a flexible and efficient way to mount
    and unmount filesystems, manage disk partitions, and perform various file manipulation
    tasks. They are widely used in Linux environments due to their versatility, reliability,
    and ease of use. One of the key reasons why such commands are highly valued by
    system administrators is their ability to manage filesystems and storage devices.
    These commands enable administrators to mount different types of filesystems,
    such as `ext4`, `NTFS`, or `NFS`, making data accessible and usable within the
    Linux system. They also provide options for managing network filesystems, allowing
    administrators to connect and access remote filesystems over a network. Another
    important aspect of these tools is their role in disk partition management. With
    them, administrators can create, resize, and delete disk partitions, ensuring
    efficient allocation of disk space and organizing data according to specific requirements.
    The ability to manipulate partitions is crucial for tasks such as setting up multi-boot
    systems, creating dedicated storage areas, or managing disk space for virtual
    machines.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 文件系统挂载和操作命令是一组重要工具，允许 Linux 系统管理员管理和操作文件系统及存储设备。这些命令提供了一种灵活高效的方式来挂载和卸载文件系统，管理磁盘分区，并执行各种文件操作任务。由于其多功能性、可靠性和易用性，这些命令在
    Linux 环境中被广泛使用。系统管理员高度重视这些命令的一个关键原因是它们能够管理文件系统和存储设备。这些命令使管理员能够挂载不同类型的文件系统，如 `ext4`、`NTFS`
    或 `NFS`，使数据在 Linux 系统中可访问和可用。它们还提供了管理网络文件系统的选项，允许管理员通过网络连接和访问远程文件系统。另一个这些工具的重要方面是它们在磁盘分区管理中的作用。通过这些工具，管理员可以创建、调整大小和删除磁盘分区，从而确保磁盘空间的高效分配，并根据特定要求组织数据。能够操作分区对设置多重启动系统、创建专用存储区域或为虚拟机管理磁盘空间等任务至关重要。
- en: These commands offer an added range of file manipulation capabilities, such
    as navigating and exploring the filesystem, searching for files, manipulating
    file permissions and ownership, as well as performing tasks such as copying, moving,
    and deleting files. This flexibility allows for efficient file management and
    maintenance operations, ensuring data organization, integrity, and security within
    the Linux system.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令提供了额外的文件操作功能，例如导航和浏览文件系统、搜索文件、操作文件权限和所有权，以及执行复制、移动和删除文件等任务。这种灵活性使得文件管理和维护操作更加高效，确保
    Linux 系统内数据的组织、完整性和安全性。
- en: In this chapter, we will explore some of the most important commands in this
    category. These commands play a vital role in managing filesystems, allowing for
    the mounting and unmounting of devices, and enabling efficient data access and
    storage. System administrators heavily rely on these commands to establish connections
    between devices and the filesystem, exercise control over mounted resources, and
    carry out various file operations.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨这一类别中一些最重要的命令。这些命令在管理文件系统中起着至关重要的作用，允许挂载和卸载设备，并使数据访问和存储更加高效。系统管理员在建立设备与文件系统之间的连接、控制已挂载资源并执行各种文件操作时，严重依赖这些命令。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: Linux mount commands
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 挂载命令
- en: The mount command
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: mount 命令
- en: The umount command
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: umount 命令
- en: The fuser command
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: fuser 命令
- en: File manipulation using cat, grep, and more
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 cat、grep 等进行文件操作
- en: Linux mount commands
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux 挂载命令
- en: Mounting in Linux refers to the process of connecting a filesystem to a specific
    directory in the directory tree hierarchy, allowing the operating system and its
    users to access the contents of that filesystem. The `mount` command plays a crucial
    role in this process by associating a device or a remote network share with a
    mount point, which is a directory where the filesystem becomes accessible. By
    using the `mount` command, Linux system administrators can dynamically attach
    various types of filesystems, including local disks, network shares, virtual filesystems,
    and removable storage devices, to specific mount points in the filesystem hierarchy.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中，挂载是指将文件系统连接到目录树结构中的特定目录，使操作系统及其用户能够访问该文件系统的内容。`mount`命令在这个过程中发挥着至关重要的作用，通过将设备或远程网络共享与挂载点（即文件系统变得可访问的目录）关联起来。通过使用`mount`命令，Linux系统管理员可以动态地将各种类型的文件系统（包括本地磁盘、网络共享、虚拟文件系统和可移动存储设备）附加到文件系统层次结构中的特定挂载点。
- en: The Linux `mount` commands are vital tools in Linux for connecting filesystems
    to specific mount points, allowing administrators to effectively utilize storage
    resources and provide seamless access to data. Through the `mount` command, Linux
    system administrators can configure and manage various filesystem types, set mounting
    options, and integrate additional storage devices. Mounting is essential for organizing
    data, facilitating system boot processes, and expanding storage capacity, making
    it a fundamental aspect of Linux filesystem management.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Linux的`mount`命令是Linux中连接文件系统到特定挂载点的关键工具，允许管理员有效地利用存储资源并提供无缝的数据访问。通过`mount`命令，Linux系统管理员可以配置和管理各种文件系统类型，设置挂载选项，并集成额外的存储设备。挂载对于组织数据、促进系统启动过程以及扩展存储容量至关重要，是Linux文件系统管理的基本组成部分。
- en: The mount command
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挂载命令
- en: The `mount` command in Linux is a powerful tool that’s used to connect and integrate
    filesystems into the directory tree structure of the operating system. By using
    the `mount` command, administrators can effectively extend the available storage
    capacity, manage data across different devices, and ensure seamless data access
    for users. One of the key reasons for the importance of the `mount` command is
    its ability to provide flexibility and scalability in storage management. With
    the `mount` command, administrators can easily add new storage devices or network
    shares to the system, making them accessible to users without disrupting the existing
    filesystem. This allows for efficient allocation and utilization of storage resources,
    ensuring that data is stored in an organized and accessible manner.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中，`mount`命令是一个强大的工具，用于将文件系统连接并集成到操作系统的目录树结构中。通过使用`mount`命令，管理员可以有效地扩展可用的存储容量，管理不同设备上的数据，并确保用户能够无缝访问数据。`mount`命令的重要性之一是它提供了存储管理的灵活性和可扩展性。通过`mount`命令，管理员可以轻松地将新的存储设备或网络共享添加到系统中，使其对用户可用，而不会干扰现有的文件系统。这使得存储资源的分配和利用更加高效，确保数据以有序和可访问的方式存储。
- en: The `mount` command also plays a crucial role in system boot processes. During
    boot, the root filesystem, which contains the essential operating system files,
    is mounted using the `mount` command. This operation requires superuser (`sudo`)
    privileges. Mounting the root filesystem ensures that the system can access and
    load the necessary files to successfully start up. Without the `mount` command,
    the operating system would not be able to locate and access the root filesystem,
    leading to boot failures and an unusable system.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`mount`命令在系统启动过程中也起着至关重要的作用。在启动时，包含操作系统必要文件的根文件系统是通过`mount`命令挂载的。这一操作需要超级用户（`sudo`）权限。挂载根文件系统确保系统能够访问并加载必要的文件，以成功启动。如果没有`mount`命令，操作系统将无法定位和访问根文件系统，导致启动失败，系统无法使用。'
- en: 'Let’s see a scenario where the `mount` command is utilized:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个使用`mount`命令的场景：
- en: '**Mounting NFS shares**: The following screenshot shows the code for mounting
    NFS shares:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**挂载 NFS 共享**：以下截图显示了挂载 NFS 共享的代码：'
- en: '![Figure 6.1 – Mounting NFS shares](img/B18212_06_1.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1 – 挂载 NFS 共享](img/B18212_06_1.jpg)'
- en: Figure 6.1 – Mounting NFS shares
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 挂载 NFS 共享
- en: 'We will break down the command for more clarity:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐步解析命令以便更清楚：
- en: '`10.10.XXX.XX`. This IP address indicates the network location of the NFS server
    that hosts the shared directory.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`10.10.XXX.XX`。这个IP地址表示托管共享目录的NFS服务器的网络位置。'
- en: '`/var` is specified as the exported share name. This refers to the specific
    directory or filesystem on the NFS server that is being made available for sharing
    over the network.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/var`被指定为导出的共享名称。这指的是在NFS服务器上被共享到网络的特定目录或文件系统。'
- en: '`/mnt/Keno`. This directory serves as the access point on the local system
    where the NFS share will be integrated.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/mnt/Keno`。这个目录作为本地系统上的访问点，NFS共享将被集成到此处。'
- en: Lastly, the `ls -la /mnt/Keno` command is used to list the contents of the `/mnt/Keno`
    directory in a detailed and comprehensive format.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，`ls -la /mnt/Keno`命令用于以详细和全面的格式列出`/mnt/Keno`目录的内容。
- en: By executing `ls -la /mnt/Keno`, you will see a detailed listing of all the
    files and directories present in the `/mnt/Keno` directory, including hidden files.
    The output will include information such as the file/directory permissions, ownership,
    size, modification date, and name.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行`ls -la /mnt/Keno`，你将看到`/mnt/Keno`目录中所有文件和目录的详细列表，包括隐藏文件。输出将包括文件/目录权限、所有权、大小、修改日期和名称等信息。
- en: '**Mounting second storage device and partition**: The following screenshot
    shows the code for mounting the second storage device and partition:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**挂载第二个存储设备和分区**：以下截图显示了挂载第二个存储设备和分区的代码：'
- en: '![Figure 6.2 – Mounting the second storage device and partition 1](img/B18212_06_2.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2 – 挂载第二个存储设备和分区 1](img/B18212_06_2.jpg)'
- en: Figure 6.2 – Mounting the second storage device and partition 1
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – 挂载第二个存储设备和分区 1
- en: 'Let’s break down the command for more clarity:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解命令以更清晰地理解：
- en: 'This first command creates two directories, `/mnt/sdb` and `/mnt/sdb1`, using
    the `mkdir` command. The `mkdir` command is used to make directories in the specified
    locations. In this case, it creates two directories under the `/mnt` directory:
    `/mnt/sdb` and `/mnt/sdb1`. These directories will serve as mount points for the
    corresponding devices.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个命令使用`mkdir`命令创建了两个目录，`/mnt/sdb`和`/mnt/sdb1`。`mkdir`命令用于在指定位置创建目录。在这个例子中，它在`/mnt`目录下创建了两个目录：`/mnt/sdb`和`/mnt/sdb1`。这些目录将作为对应设备的挂载点。
- en: The second command attempts to mount the `/dev/sdb` device to the mount point,
    `/mnt/sdb`, using the `mount` command. The `mount` command is used to attach a
    filesystem to the directory hierarchy. In this case, it is trying to mount the
    `/dev/sdb` device (which represents the entire disk) to the mount point, `/mnt/sdb`.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个命令尝试使用`mount`命令将`/dev/sdb`设备挂载到挂载点`/mnt/sdb`。`mount`命令用于将文件系统附加到目录结构中。在这种情况下，它试图将`/dev/sdb`设备（表示整个磁盘）挂载到挂载点`/mnt/sdb`。
- en: The third command mounts the `/dev/sdb1` device (which represents a specific
    partition on the disk) to the mount point, `/mnt/sdb1`, using the `mount` command.
    This command successfully mounts the specified partition to the corresponding
    mount point.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个命令使用`mount`命令将`/dev/sdb1`设备（代表磁盘上的特定分区）挂载到挂载点`/mnt/sdb1`。这个命令成功地将指定的分区挂载到相应的挂载点。
- en: Finally, the fourth command lists information about all available block devices
    in a tree-like format. It provides an overview of the block devices present in
    the system, including their names, sizes, and partition information. Running this
    command after the previous steps allows you to see the details of the mounted
    devices (`sdb` and its partition, `sdb1`, in this case) and any other connected
    storage devices.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，第四个命令以树状格式列出所有可用的块设备信息。它提供了系统中块设备的概览，包括它们的名称、大小和分区信息。在执行完之前的步骤后，运行这个命令可以查看已挂载设备（在本例中为`sdb`及其分区`sdb1`）和其他连接的存储设备的详细信息。
- en: 'The `mount` command without any arguments displays all currently mounted filesystems.
    To check whether`sdb1` is mounted, you can search for its entry in the output.
    You can do this by using the *Ctrl* + *F* shortcut, which opens a search pop-up
    window on your terminal. Type `sdb1` in the search field to quickly locate the
    relevant information. This allows you to easily find out whether `sdb1` is mounted
    and retrieve its associated details. If `sdb1` is mounted, you will see its mount
    point and other relevant information listed:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`mount`命令没有任何参数时，显示所有当前已挂载的文件系统。要检查`sdb1`是否已挂载，可以在输出中查找其条目。你可以使用*Ctrl* + *F*快捷键打开终端中的搜索弹窗，输入`sdb1`以快速定位相关信息。这允许你轻松地查明`sdb1`是否已挂载，并获取其关联的详细信息。如果`sdb1`已挂载，你将看到它的挂载点和其他相关信息：'
- en: '![Figure 6.3 – Mounting the second storage device and partition 2](img/B18212_06_3.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – 安装第二个存储设备和分区 2](img/B18212_06_3.jpg)'
- en: Figure 6.3 – Mounting the second storage device and partition 2
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 安装第二个存储设备和分区 2
- en: '`/``etc/mtab` `/etc/mtab` file, which contains a list of currently mounted
    filesystems. Look for a line in the output that corresponds to `sdb1`. The line
    will include the device path (`/dev/sdb1`), the mount point, and other information:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/mtab` 文件包含当前挂载的文件系统列表。查找输出中与`sdb1`对应的行。该行将包含设备路径（`/dev/sdb1`）、挂载点和其他信息：'
- en: '![Figure 6.4 – Checking the /etc/mtab file](img/B18212_06_04_(Merged).jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4 – 检查 `/etc/mtab` 文件](img/B18212_06_04_(Merged).jpg)'
- en: Figure 6.4 – Checking the /etc/mtab file
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – 检查 `/etc/mtab` 文件
- en: By checking either the `mount` command output or the `/etc/mtab` file, you can
    determine whether `sdb1` is currently mounted and find its associated mount point.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检查`mount`命令的输出或`/etc/mtab`文件，你可以确定`sdb1`是否已被挂载，并找到其对应的挂载点。
- en: The umount command
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: umount命令
- en: The `umount` command in Linux is used to unmount or detach a mounted filesystem
    from the directory tree. It allows system administrators to safely remove mounted
    devices or network shares, ensuring that all pending read and write operations
    are completed and any cached data is properly flushed before the filesystem is
    unmounted. This command is essential for maintaining the integrity of the filesystem
    and preventing data corruption. One of the primary reasons for using the `umount`
    command is to safely disconnect storage devices or network shares from the system.
    When a filesystem is mounted, it establishes a connection between the device or
    network share and a directory in the filesystem hierarchy. Unmounting the filesystem
    ensures that any ongoing read or write operations are completed, preventing data
    loss or corruption. It also releases system resources associated with the mounted
    filesystem, freeing up memory and improving system performance.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 中，`umount`命令用于卸载或从目录树中分离已挂载的文件系统。它允许系统管理员安全地移除已挂载的设备或网络共享，确保所有待处理的读写操作完成，并在卸载文件系统之前，正确地刷新所有缓存数据。此命令对于维护文件系统的完整性和防止数据损坏至关重要。使用`umount`命令的主要原因之一是安全地断开存储设备或网络共享与系统的连接。当文件系统被挂载时，它在设备或网络共享与文件系统层次结构中的目录之间建立了连接。卸载文件系统可确保任何正在进行的读写操作完成，从而防止数据丢失或损坏。它还会释放与已挂载文件系统相关的系统资源，释放内存并提升系统性能。
- en: It’s important to note that directories mounted with this command are not permanent.
    They will be unmounted automatically after a system reboot. If you want to make
    the mount points permanent and have the filesystems mounted automatically at boot,
    you need to update the `/etc/fstab` (filesystems table) configuration file with
    the appropriate entries. This ensures that the mount points are reliable and persist
    across reboots.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，通过此命令挂载的目录并非永久性挂载。系统重启后，它们将自动卸载。如果你希望将挂载点设为永久，并在启动时自动挂载文件系统，你需要更新`/etc/fstab`（文件系统表）配置文件，添加相应的条目。这样可以确保挂载点在重启后依然有效，并且可以持续存在。
- en: The `umount` command in Linux is crucial for managing removable media, such
    as USB drives or external hard disks. Before physically disconnecting the device
    from the system, it is necessary to unmount it using the `umount` command. This
    ensures that all data is written to the device, preventing data loss or filesystem
    inconsistencies. Additionally, the `umount` command is used to detach network
    shares, such as NFS or Samba mounts, allowing users to disconnect from remote
    filesystems securely.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 中，`umount`命令对管理可移动媒体（如 USB 驱动器或外部硬盘）至关重要。在物理断开设备与系统的连接之前，必须使用`umount`命令卸载它。这确保了所有数据都已写入设备，防止数据丢失或文件系统不一致。此外，`umount`命令还用于分离网络共享，如
    NFS 或 Samba 挂载，使用户能够安全地断开远程文件系统。
- en: It’s important to note that `umount` typically requires superuser privileges,
    so you may need to use `sudo` to execute it. Executing the `umount` command is
    of utmost importance for safely detaching mounted filesystems in Linux. It ensures
    data integrity, releases system resources, and facilitates the proper removal
    of storage devices or network shares. By using the `umount` command, system administrators
    can effectively manage filesystem connections and maintain the stability and reliability
    of the overall system.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，`umount`命令通常需要超级用户权限，因此你可能需要使用`sudo`来执行它。执行`umount`命令对于安全卸载Linux中的挂载文件系统至关重要。它确保数据完整性、释放系统资源，并促进存储设备或网络共享的正确移除。通过使用`umount`命令，系统管理员可以有效地管理文件系统连接，保持整体系统的稳定性和可靠性。
- en: 'Let’s look at some scenarios where the `umount` command was utilized:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些使用`umount`命令的场景：
- en: '**Unmounting** **a partition**.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**卸载** **一个分区**。'
- en: 'Unmounting a partition ensures that any pending read or write operations are
    completed, and it allows you to safely disconnect or perform maintenance on the
    storage device without the risk of data corruption:'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 卸载分区确保所有待处理的读写操作完成，并且允许你安全地断开或对存储设备进行维护，避免数据损坏的风险：
- en: '![Figure 6.5 – Unmounting a partition](img/B18212_06_5.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.5 – 卸载一个分区](img/B18212_06_5.jpg)'
- en: Figure 6.5 – Unmounting a partition
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – 卸载一个分区
- en: After executing these commands, the system will unmount the specified partition
    from their respective mount points. You can verify the unmounting by using the
    `mount` command or checking the output of the `df` command to confirm that the
    devices are no longer listed as being mounted at the specified locations.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 执行这些命令后，系统将从各自的挂载点卸载指定的分区。你可以通过使用`mount`命令或检查`df`命令的输出，确认设备不再列为挂载在指定位置。
- en: '**Unmounting** **multiple filesystems**:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**卸载** **多个文件系统**：'
- en: '![Figure 6.6 – Unmounting multiple filesystems](img/B18212_06_6.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.6 – 卸载多个文件系统](img/B18212_06_6.jpg)'
- en: Figure 6.6 – Unmounting multiple filesystems
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6 – 卸载多个文件系统
- en: This command unmounts multiple filesystems simultaneously. In this example,
    it unmounts the USB drives mounted at `/mnt/usb1` and `/mnt/usb2`, as well as
    the NFS share mounted at `/mnt/nfs`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令同时卸载多个文件系统。在此示例中，它卸载了挂载在`/mnt/usb1`和`/mnt/usb2`的USB驱动器，以及挂载在`/mnt/nfs`的NFS共享。
- en: The fuser command
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`fuser`命令'
- en: The `fuser` command in Linux is a powerful tool that’s used to identify processes
    that are currently accessing or using specified files, directories, or sockets.
    It provides information about which processes have active file handles or network
    connections to a given file or directory. The command is primarily used to investigate
    and troubleshoot issues related to resource utilization, file locking, and unresponsive
    processes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Linux中的`fuser`命令是一个强大的工具，用于识别当前正在访问或使用指定文件、目录或套接字的进程。它提供了有关哪些进程持有活动文件句柄或与给定文件或目录的网络连接的信息。该命令主要用于调查和解决与资源使用、文件锁定和无响应进程相关的问题。
- en: Please note that the `fuser` command typically requires superuser privileges,
    so you may need to use `sudo` to execute it. The importance of the `fuser` command
    lies in its ability to help system administrators identify and resolve conflicts
    related to file access. By running the command with appropriate options and specifying
    the target file or directory, administrators can obtain a list of **process IDs**
    (**PIDs**) that have a file or directory open.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`fuser`命令通常需要超级用户权限，因此你可能需要使用`sudo`来执行它。`fuser`命令的重要性在于它帮助系统管理员识别和解决与文件访问相关的冲突。通过使用适当的选项运行该命令并指定目标文件或目录，管理员可以获取到一个**进程ID**（**PIDs**）列表，这些进程正打开某个文件或目录。
- en: This information can be valuable in scenarios where a file is locked, preventing
    other processes from accessing or modifying it. By identifying the process responsible
    for the lock, administrators can take appropriate actions, such as terminating
    or restarting the process, to release the file lock and restore normal operations.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息在文件被锁定的场景中非常有价值，这会阻止其他进程访问或修改该文件。通过识别负责锁定的进程，管理员可以采取适当的措施，如终止或重启进程，以释放文件锁并恢复正常操作。
- en: The significance of the `fuser` command lies in its role in maintaining the
    integrity of the filesystem. It ensures that resources tied to a device are properly
    released before undertaking any maintenance tasks. This is crucial because attempting
    to unmount or detach a device that is still in use can lead to unexpected errors
    and data inconsistencies. By identifying which processes are using specific files,
    directories, or sockets, administrators can address resource contention issues,
    troubleshoot file access conflicts, and ensure the smooth operation of the system.
    Furthermore, the `fuser` command aids in releasing file locks and facilitating
    safe resource management. It allows administrators to proactively address any
    potential conflicts or dependencies before making changes to the filesystem. By
    preventing processes from holding exclusive access to files or directories, the
    `fuser` command ensures that other operations can be performed seamlessly. Ultimately,
    the `fuser` command enhances system stability, minimizes the risk of data loss,
    and contributes to the overall efficiency of managing filesystems and storage
    devices.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`fuser` 命令的重要性在于其在维护文件系统完整性中的角色。它确保在执行任何维护任务之前，设备绑定的资源得到正确释放。这一点非常关键，因为试图卸载或分离仍在使用中的设备可能导致意外错误和数据不一致性。通过识别哪些进程正在使用特定文件、目录或套接字，管理员可以解决资源争用问题，排查文件访问冲突，并确保系统的平稳运行。此外，`fuser`
    命令帮助释放文件锁并促进安全资源管理。它允许管理员在对文件系统进行更改之前，积极解决任何潜在的冲突或依赖关系。通过防止进程独占访问文件或目录，`fuser`
    命令确保其他操作能够无缝执行。最终，`fuser` 命令增强了系统稳定性，最小化了数据丢失的风险，并有助于管理文件系统和存储设备的整体效率。'
- en: 'Let’s explore some scenario-based examples demonstrating the usage of the `fuser`
    command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探讨一些基于场景的示例，展示了使用 `fuser` 命令的用法：
- en: '**Checking for any processes that are currently accessing files** **or directories**:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查当前正在访问文件或目录的进程**：'
- en: '![Figure 6.7 – Checking for any processes that are currently accessing files
    or directories](img/B18212_06_7.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.7 – 检查当前正在访问文件或目录的进程](img/B18212_06_7.jpg)'
- en: Figure 6.7 – Checking for any processes that are currently accessing files or
    directories
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – 检查当前正在访问文件或目录的进程
- en: 'Here’s what each part of the command does:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是命令的各个部分的功能：
- en: '`fuser` is the actual command that is being executed'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fuser` 是正在执行的实际命令'
- en: '`-v` is an option that stands for **verbose** and provides more detailed information
    about the processes accessing the directory'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-v` 是一个选项，代表**详细模式**，提供关于访问目录的进程的更详细信息。'
- en: '`/home/instructor` is the path to the directory that is being checked'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/home/instructor` 是要检查的目录的路径。'
- en: When you run this command, it will display a list of processes, along with their
    PIDs that are currently using files or directories within the specified directory.
    The verbose output will include additional details such as the user, the type
    of access (read, write, or both), and the access time.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这个命令时，它会显示一个进程列表，以及它们的PID，这些进程目前正在使用指定目录内的文件或目录。详细输出将包括额外的信息，如用户、访问类型（读、写或两者）和访问时间。
- en: '**Checking for processes using a specific file in your** **current directory**:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查当前目录中使用特定文件的进程**：'
- en: '![Figure 6.8 – Checking for processes using a specific file in your current
    directory](img/B18212_06_8.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.8 – 检查当前目录中使用特定文件的进程](img/B18212_06_8.jpg)'
- en: Figure 6.8 – Checking for processes using a specific file in your current directory
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – 检查当前目录中使用特定文件的进程
- en: 'Here’s what each part of the command does:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是命令的各个部分的功能：
- en: '`fuser` is the actual command that is being executed'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fuser` 是正在执行的实际命令。'
- en: '`.` represents the current directory'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.` 表示当前目录'
- en: When you run this command, it will display a list of processes, along with their
    PIDs that are currently using files or directories within the current directory.
    This includes any subdirectories and files within the current directory.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这个命令时，它会显示一个进程列表，以及它们的PID，这些进程目前正在使用当前目录内的文件或目录。这包括当前目录内的任何子目录和文件。
- en: The output also shows that the process has a PID of `12102`. This means that
    the process can be identified by the operating system using this unique identifier
    and the `c` character in the PID output means that the process has the file open
    for reading and writing.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 输出还显示该进程的PID为`12102`。这意味着操作系统可以使用这个唯一的标识符来识别该进程，而PID输出中的`c`字符表示该进程已打开文件进行读写。
- en: 'The `fuser` command will list the following types of access in the `ACCESS`
    column:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`fuser`命令将在`ACCESS`列中列出以下类型的访问：'
- en: '`C`: Open for reading and writing'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C`：可读写'
- en: '`R`: Open for reading only'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`R`：仅可读'
- en: '`W`: Open for writing only'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`W`：仅供写入'
- en: '`U`: Open by a process that is no longer running'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`U`：由已不再运行的进程打开'
- en: '`4330`. The `-n` option specifies the network protocol.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`4330`。`-n`选项指定了网络协议。'
- en: '![Figure 6.9 – Determining processes using a network socket](img/B18212_06_9.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.9 – 确定使用网络套接字的进程](img/B18212_06_9.jpg)'
- en: Figure 6.9 – Determining processes using a network socket
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9 – 确定使用网络套接字的进程
- en: 'Here’s a breakdown of the command and its components:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是命令及其组成部分的详细说明：
- en: '`fuser` is the command itself, which stands for **file user**. It is used to
    identify processes that are using files or network sockets.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fuser`是命令本身，代表**文件用户**。它用于识别正在使用文件或网络套接字的进程。'
- en: '`-n tcp` is an option that specifies the type of network protocol to search
    for. In this case, it is set to `tcp`, indicating that we are interested in TCP
    connections.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-n tcp`是一个指定要搜索的网络协议类型的选项。在这种情况下，它设置为`tcp`，表示我们关心的是TCP连接。'
- en: '`4330` is the specific TCP port number that we want to check for.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`4330`是我们要检查的特定TCP端口号。'
- en: When you run this command, it will provide information about the processes that
    are currently using TCP port `4330`. It will display the PIDs of the processes,
    along with additional details, such as the user who owns the process and the command
    associated with it.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行此命令时，它将提供有关当前正在使用TCP端口`4330`的进程的信息。它将显示进程的PID，以及其他详细信息，如拥有该进程的用户和与之关联的命令。
- en: File manipulation using cat, grep, and more
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`cat`、`grep`等命令进行文件操作
- en: Using commands such as `cat` and `grep` is a fundamental aspect of working with
    files in Linux and other Unix-like systems. These commands provide powerful and
    versatile tools for managing and extracting information from files. They are essential
    for system administrators, developers, and anyone who works with text files regularly.
    One of the main reasons for the importance of file manipulation commands is their
    ability to efficiently process and manipulate large amounts of data. Commands
    such as `cat`, which stands for `grep`, which is used for searching and pattern
    matching within files. `grep` enables users to search for specific text patterns,
    extract relevant information, and filter out unnecessary data. This is invaluable
    for analyzing log files, extracting specific lines of code from source files,
    or searching for specific error messages within a file. Its versatility and efficiency
    make it an indispensable tool for various tasks, such as data analysis, system
    troubleshooting, and log file parsing.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用像`cat`和`grep`这样的命令是Linux及其他类Unix系统中处理文件的基础。这些命令提供了强大且多功能的工具，用于管理和提取文件中的信息。它们对于系统管理员、开发者以及任何定期处理文本文件的人来说都是必不可少的。文件操作命令的重要性之一是它们能够高效地处理和操作大量数据。像`cat`、`grep`这样的命令是用于在文件中进行搜索和模式匹配的。`grep`允许用户搜索特定的文本模式，提取相关信息并过滤掉不必要的数据。这对于分析日志文件、从源文件中提取特定的代码行，或者在文件中搜索特定的错误消息非常有价值。其多功能性和高效性使它成为各种任务的不可或缺的工具，如数据分析、系统故障排除和日志文件解析。
- en: 'In addition to `cat` and `grep`, there are numerous other file manipulation
    commands available in Linux, each serving a specific purpose. For example, commands
    such as `sed` and `awk` provide advanced text processing capabilities, allowing
    users to perform complex operations such as search and replace, pattern-based
    editing, and field extraction. These commands empower users to automate repetitive
    tasks, transform data, and manipulate files in a precise and controlled manner.
    The ability to efficiently manipulate files using these commands enhances productivity,
    enables effective data analysis, and facilitates automation in various system
    administration and development tasks. Let’s explore how system administrators
    can leverage these powerful tools in their day-to-day tasks:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`cat`和`grep`之外，Linux中还有许多其他文件操作命令，每个命令都有特定的用途。例如，像`sed`和`awk`这样的命令提供了高级的文本处理功能，使用户能够执行诸如搜索和替换、基于模式的编辑以及字段提取等复杂操作。这些命令使用户能够自动化重复任务、转换数据并精确控制文件操作。高效地使用这些命令进行文件操作可以提高生产力，支持有效的数据分析，并促进系统管理和开发任务的自动化。让我们来看看系统管理员如何在日常任务中利用这些强大的工具：
- en: 'Extracting lines containing a specific pattern using `cat` and `grep`:'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`cat`和`grep`提取包含特定模式的行：
- en: '![Figure 6.10 – Extracting lines containing a specific pattern using cat and
    grep](img/B18212_06_10.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.10 – 使用cat和grep提取包含特定模式的行](img/B18212_06_10.jpg)'
- en: Figure 6.10 – Extracting lines containing a specific pattern using cat and grep
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.10 – 使用cat和grep提取包含特定模式的行
- en: The `cat output.txt | grep "pattern"` command is used to display lines from
    the `output.txt` file that match the specified pattern. Here, `cat output.txt`
    is used to display the contents of `output.txt`, and the output is piped (`|`)
    to the `grep` command. The `grep` command searches for lines containing the specified
    pattern and displays only those lines. To use `grep`, you can simply run a command
    such as `grep "search_term" your_file`, where `search_term` is the text or pattern
    you want to search for, and `your_file` is the file in which you want to perform
    the search.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`cat output.txt | grep "pattern"`命令用于显示`output.txt`文件中与指定模式匹配的行。这里，`cat output.txt`用于显示`output.txt`的内容，输出通过管道（`|`）传递给`grep`命令。`grep`命令搜索包含指定模式的行，并只显示这些行。要使用`grep`，你只需运行类似`grep
    "search_term" your_file`的命令，其中`search_term`是你要搜索的文本或模式，`your_file`是你要搜索的文件。'
- en: 'Replacing text in a file using `sed`:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`sed`替换文件中的文本：
- en: '![Figure 6.11 – Replacing text in a file using sed](img/B18212_06_11.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.11 – 使用sed替换文件中的文本](img/B18212_06_11.jpg)'
- en: Figure 6.11 – Replacing text in a file using sed
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.11 – 使用sed替换文件中的文本
- en: The `sed -i 's/pattern/mad_max/g' output.txt` command is used to replace occurrences
    of the specified pattern with `mad_max` in the `output.txt` file and modify the
    file in place.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`sed -i ''s/pattern/mad_max/g'' output.txt`命令用于替换`output.txt`文件中指定模式的所有出现，并就地修改文件。'
- en: 'Here’s a breakdown of the command:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是命令的详细说明：
- en: '`sed`: The command for the stream editor, used for text manipulation.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sed`：流编辑器命令，用于文本操作。'
- en: '`-i`: Specifies the “in-place” editing mode, which means the changes will be
    made directly to the `output.txt` file.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-i`：指定“就地”编辑模式，这意味着更改将直接应用于`output.txt`文件。'
- en: '`''s/pattern/mad_max/g''`: This is the substitution command in the form of
    `''s/old_text/new_text/g''`. It tells `sed` to search for occurrences of the pattern
    and replace them with `mad_max`. The `g` flag is used to perform the replacement
    globally on each matching line, not just the first occurrence.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''s/pattern/mad_max/g''`：这是一个替换命令，格式为`''s/old_text/new_text/g''`。它告诉`sed`搜索指定的模式并将其替换为`mad_max`。`g`标志用于在每个匹配行上进行全局替换，而不仅仅是替换第一次出现的匹配项。'
- en: Lastly, the `cat output.txt | grep "mad_max"` command is used to search for
    lines in the `output.txt` file that contain `mad_max`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`cat output.txt | grep "mad_max"`命令用于搜索`output.txt`文件中包含`mad_max`的行。
- en: Using `awk` to filter lines based on a condition.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`awk`根据条件过滤行。
- en: 'This command uses `awk` to filter the lines in the file (`output2.txt`) based
    on the condition that the first column is greater than 10\. Only the lines satisfying
    the condition are displayed:'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该命令使用`awk`根据条件过滤文件（`output2.txt`）中的行，条件是第一列的值大于10。只有满足条件的行会被显示：
- en: '![Figure 6.12 – awk – filtering lines based on a condition](img/B18212_06_12.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.12 – awk – 基于条件过滤行](img/B18212_06_12.jpg)'
- en: Figure 6.12 – awk – filtering lines based on a condition
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12 – awk – 基于条件过滤行
- en: 'The `awk ''$1 > 10'' output2.txt` command is used to filter and print lines
    from a file where the value in the first column is greater than 10\. Here’s an
    explanation of each part of the command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '`awk`: The command-line tool for text processing and pattern scanning in Linux.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''$1 > 10''`: The pattern or condition to be matched in the input file. In
    this case, it checks whether the value in the first column (denoted by `$1`) is
    greater than 10.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output2.txt`: The name of the file from which the command reads the input.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you run this command, `awk` reads the contents of `output2.txt` and evaluates
    the given pattern for each line. If the value in the first column of a line is
    greater than 10, that line is printed to the output.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let’s say `file.txt` contains the following lines:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.13 – awk example 1](img/B18212_06_13.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
- en: Figure 6.13 – awk example 1
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the `awk ''$1 > 10'' file.txt` command will output the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.14 – awk example 2](img/B18212_06_14.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
- en: Figure 6.14 – awk example 2
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: It filters out the lines where the value in the first column is not greater
    than 10 and prints only the lines that satisfy the condition.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'Counting the occurrence of a specific word in a file using `cat`, `grep`, and
    `wc` (**word count**):'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 6.15 – Counting the occurrence of a specific word in a file using
    cat, grep, and wc](img/B18212_06_15.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
- en: Figure 6.15 – Counting the occurrence of a specific word in a file using cat,
    grep, and wc
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'This command counts the number of occurrences of the exact word, `disproperty`,
    in the `output2.txt` file. The output is displayed as a single line count. Here’s
    the breakdown of the command:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: In the first command, `cat output2.txt | grep -w "disproperty" | wc -l`, the
    `output2.txt` file is passed to the `cat` command, which reads and displays the
    content of the file. The output is then piped (`|`) to the `grep` command with
    the `-w` flag, which searches for the exact word, `disproperty`, in the input.
    The result is then piped again to the `wc -l` command, which counts the number
    of lines (`-l`). The output of this command is `1`, indicating that `disproperty`
    appears once in the file.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the second command, `cat output2.txt | grep -w "mad_max" | wc -l`, the same
    process is followed. The `output2.txt` file is read by `cat`, and the output is
    piped to `grep -w "mad_max"` to search for the exact word, `mad_max`. The result
    is then piped to `wc -l` to count the number of lines. In this case, the output
    is `2`, indicating that `mad_max` appears twice in the file.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These examples showcase the versatility and power of the `cat`, `grep`, `sed`,
    and `awk` commands in performing various file manipulation tasks, such as filtering
    lines, replacing text, extracting fields, and counting occurrences.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Overall, file manipulation commands such as `cat`, `grep`, `sed`, and `awk`
    play a crucial role in managing and extracting information from files in Linux.
    They provide powerful and efficient tools for working with text-based data, allowing
    users to concatenate, search for, filter, and transform files with ease. Their
    importance lies in their ability to handle large amounts of data, facilitate efficient
    data analysis, and automate repetitive tasks. By mastering these commands, users
    gain valuable skills for effectively working with files, enabling them to accomplish
    tasks more efficiently and improve their overall productivity in a Linux environment.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, Linux mount and manipulation commands are vital tools for managing
    filesystems, mounting and unmounting devices, and manipulating files in Linux.
    These commands empower system administrators to establish connections between
    devices and the filesystem, control access to mounted resources, and perform diverse
    file operations. By skillfully utilizing these commands, system administrators
    can optimize data access and storage, enforce robust security measures, and uphold
    the integrity of the filesystem. Overall, Linux mount and manipulation commands
    are indispensable in ensuring efficient system administration, safeguarding data,
    and maintaining a secure and well-organized Linux environment.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter focused on Linux mount and manipulation commands, which are essential
    tools for managing filesystems, mounting and unmounting devices, and manipulating
    files in Linux. This chapter began by highlighting the significance of these commands
    in establishing connections between devices and the filesystem, controlling access
    to mounted resources, and performing various file operations. The `mount` command
    takes center stage as it enables administrators to mount filesystems and devices
    to specific mount points, ensuring efficient data access and storage. The `umount`
    command was introduced as its counterpart, allowing for the safe unmounting of
    filesystems and detaching storage devices. The `fuser` command proves invaluable
    in scenarios where it is necessary to check for active processes accessing files
    or directories before unmounting or detaching devices, safeguarding against potential
    data loss or corruption. Additionally, this chapter explored the usage of the
    `cat`, `grep`, `sed`, and `awk` commands for file manipulation, including searching
    for patterns, replacing text, and extracting specific data. These commands provide
    versatile ways to manipulate and analyze files efficiently. Overall, Linux mount
    and manipulation commands offer administrators the means to manage filesystems,
    control access, troubleshoot conflicts, and ensure the integrity and security
    of the Linux environment.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming chapter, which is dedicated to file content and conversion commands,
    we will delve into a diverse range of potent tools that empower system administrators
    to effectively handle and modify file content within a Linux environment. This
    chapter, which is a part of our comprehensive series on frequently used commands,
    will extensively cover a selection of indispensable commands that are widely employed
    for seamless file content management and proficient file format conversions.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将专门介绍文件内容和转换命令，深入探讨一系列强大的工具，这些工具使系统管理员能够在Linux环境中有效地处理和修改文件内容。本章作为我们常用命令系列的一部分，将广泛覆盖一系列不可或缺的命令，这些命令在无缝的文件内容管理和高效的文件格式转换中得到广泛应用。
- en: Part 3:Frequently Used Commands – Part 2
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三部分：常用命令 - 第二部分
- en: In *Part 3*, we concentrate on commonly used Linux commands for file analysis,
    conversion, activation, monitoring, troubleshooting, network management, and so
    on. This section simplifies practical command usage for various tasks.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第三部分*，我们专注于常用的Linux命令，用于文件分析、转换、激活、监控、故障排除、网络管理等。本节简化了各种任务的实际命令使用。
- en: 'This section contains the following chapters:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含以下章节：
- en: '[*Chapter 7*](B18212_07.xhtml#_idTextAnchor084), *File Content and Conversion*'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第七章*](B18212_07.xhtml#_idTextAnchor084)，*文件内容与转换*'
- en: '[*Chapter 8*](B18212_08.xhtml#_idTextAnchor094), *Linux SWAP*'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第八章*](B18212_08.xhtml#_idTextAnchor094)，*Linux SWAP*'
- en: '[*Chapter 9*](B18212_09.xhtml#_idTextAnchor100), *Monitoring and Debugging*'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第九章*](B18212_09.xhtml#_idTextAnchor100)，*监控与调试*'
- en: '[*Chapter 10*](B18212_10.xhtml#_idTextAnchor118), *Linux IPTABLES and Networking*'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第十章*](B18212_10.xhtml#_idTextAnchor118)，*Linux IPTABLES 与网络管理*'
- en: '[*Chapter 11*](B18212_11.xhtml#_idTextAnchor127), *File Transfer, Downloading,
    and Log Management*'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第十一章*](B18212_11.xhtml#_idTextAnchor127)，*文件传输、下载与日志管理*'
