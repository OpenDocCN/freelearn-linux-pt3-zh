- en: 17\. Using NFS to Share CentOS 8 Files with Remote Systems
  prefs: []
  type: TYPE_NORMAL
- en: CentOS 8 provides two mechanisms for sharing files and folders with other systems
    on a network. One approach is to use technology called Samba. Samba is based on
    Microsoft Windows Folder Sharing and allows Linux systems to make folders accessible
    to Windows systems, and also to access Windows based folder shares from Linux.
    This approach can also be used to share folders between other Linux and UNIX based
    systems as long as they too have Samba support installed and configured. This
    is by far the most popular approach to sharing folders in heterogeneous network
    environments. The topic of folder sharing using Samba is covered in [“Sharing
    Files between CentOS 8 and Windows Systems with Samba”](../Text/Samba_File_Sharing.xhtml#_idTextAnchor232).
  prefs: []
  type: TYPE_NORMAL
- en: Another option, which is targeted specifically at sharing folders between Linux
    and UNIX based systems, uses technology called Network File System (NFS). NFS
    allows the file system on one Linux computer to be accessed over a network connection
    by another Linux or UNIX system. NFS was originally developed by Sun Microsystems
    (now part of Oracle Corporation) in the 1980s and remains the standard mechanism
    for sharing of remote Linux/UNIX file systems to this day.
  prefs: []
  type: TYPE_NORMAL
- en: NFS is very different to the Windows SMB resource sharing technology used by
    Samba. In this chapter we will be looking at network based sharing of folders
    between CentOS 8 and other UNIX/Linux based systems using NFS.
  prefs: []
  type: TYPE_NORMAL
- en: 17.1 Ensuring NFS Services are running on CentOS 8
  prefs: []
  type: TYPE_NORMAL
- en: The first task is to verify that the NFS services are installed and running
    on your CentOS 8 system. This can be achieved either from the command-line, or
    using the Cockpit interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Behind the scenes, NFS makes use of Remote Procedure Calls (RPC) to share filesystems
    over a network between different computers in the form of the rpcbind service.
    Begin by installing both rpcbind and the NFS service by running the following
    command from a terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf install rpcbind nfs-utils
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, configure these services so that they automatically start at boot time:'
  prefs: []
  type: TYPE_NORMAL
- en: systemctl enable rpcbind
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: systemctl enable nfs-server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the services have been enabled, start them as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: systemctl start rpcbind
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: systemctl start nfs-server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 17.2 Configuring the CentOS 8 Firewall to Allow NFS Traffic
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, the firewall needs to be configured to allow NFS traffic. To achieve
    this, run the following firewall-cmd commands where <zone> is replaced by the
    appropriate zone for your firewall and system configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: firewall-cmd --zone=<zone> --permanent --add-service=mountd
  prefs: []
  type: TYPE_NORMAL
- en: firewall-cmd --zone=<zone> --permanent --add-service=nfs
  prefs: []
  type: TYPE_NORMAL
- en: firewall-cmd --zone=<zone> --permanent --add-service=rpc-bind
  prefs: []
  type: TYPE_NORMAL
- en: firewall-cmd --reload
  prefs: []
  type: TYPE_NORMAL
- en: 17.3 Specifying the Folders to be Shared
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that NFS is running and the firewall has been configured, we need to specify
    which parts of the CentOS 8 file system may be accessed by remote Linux or UNIX
    systems. These settings can be declared in the /etc/exports file, which will need
    to be modified to export the directories for remote access via NFS. The syntax
    for an export line in this file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: <export> <host1>(<options>) <host2>(<options>)...
  prefs: []
  type: TYPE_NORMAL
- en: 'In the above line, <export> is replaced by the directory to be exported, <host1>
    is the name or IP address of the system to which access is being granted and <options>
    represents the restrictions that are to be imposed on that access (read only,
    read write etc). Multiple host and options entries may be placed on the same line
    if required. For example, the following line grants read only permission to the
    /datafiles directory to a host with the IP address of 192.168.2.38:'
  prefs: []
  type: TYPE_NORMAL
- en: /datafiles 192.168.2.38(ro)
  prefs: []
  type: TYPE_NORMAL
- en: 'The use of wildcards is permitted in order to apply an export to multiple hosts.
    For example, the following line permits read write access to /home/demo to all
    external hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: /home/demo *(rw)
  prefs: []
  type: TYPE_NORMAL
- en: 'A full list of options supported by the exports file may be found by reading
    the exports man page:'
  prefs: []
  type: TYPE_NORMAL
- en: man exports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the purposes of this chapter, we will configure the /etc/exports file as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: /tmp *(rw,sync)
  prefs: []
  type: TYPE_NORMAL
- en: /vol1 192.168.2.21(ro,sync)
  prefs: []
  type: TYPE_NORMAL
- en: 'Once configured, the table of exported file systems maintained by the NFS server
    needs to be updated with the latest /etc/exports settings using the exportfs command
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: exportfs -a
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is also possible to view the current share settings from the command-line
    using the exportfs tool:'
  prefs: []
  type: TYPE_NORMAL
- en: exportfs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The above command will generate the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: /tmp <world>
  prefs: []
  type: TYPE_NORMAL
- en: /vol1 192.168.2.21
  prefs: []
  type: TYPE_NORMAL
- en: 17.4 Accessing Shared CentOS 8 Folders
  prefs: []
  type: TYPE_NORMAL
- en: 'The shared folders may be accessed from a client system by mounting them manually
    from the command-line. Before attempting to mount a remote NFS folder, the nfs-utils
    package should first be installed on the client system:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf install nfs-utils
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To mount a remote folder from the command-line, open a terminal window and
    create a folder where you would like the remote folder to be mounted:'
  prefs: []
  type: TYPE_NORMAL
- en: mkdir /home/demo/tmp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next enter the command to mount the remote folder using either the IP address
    or hostname of the remote NFS server, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: mount -t nfs 192.168.1.115:/tmp /home/demo/tmp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The remote /tmp folder will then be mounted on the local system. Once mounted,
    the /home/demo/tmp folder will contain the remote folder and all its contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Options may also be specified when mounting a remote NFS filesystem. The following
    command, for example, mounts the same folder, but configures it to be read-only:'
  prefs: []
  type: TYPE_NORMAL
- en: mount -t nfs -o ro 192.168.1.115:/tmp /home/demo/tmp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 17.5 Mounting an NFS Filesystem on System Startup
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to configure a CentOS 8 system to automatically mount a
    remote file system each time the system starts up by editing the /etc/fstab file.
    When loaded into an editor, it will likely resemble the following:'
  prefs: []
  type: TYPE_NORMAL
- en: /dev/mapper/cl-root / xfs defaults 0 0
  prefs: []
  type: TYPE_NORMAL
- en: UUID=c2c3b49a-e1a1-4004 /boot xfs defaults 0 0
  prefs: []
  type: TYPE_NORMAL
- en: /dev/mapper/cl-home /home xfs defaults 0 0
  prefs: []
  type: TYPE_NORMAL
- en: /dev/mapper/cl-swap swap swap defaults 0 0
  prefs: []
  type: TYPE_NORMAL
- en: 'To mount, for example, a folder with the path /tmp which resides on a system
    with the IP address 192.168.1.115 in the local folder with the path /home/demo/tmp
    (note that this folder must already exist) add the following line to the /etc/fstab
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.1.115:/tmp /home/demo/tmp nfs rw 0 0
  prefs: []
  type: TYPE_NORMAL
- en: Next time the system reboots the /tmp folder located on the remote system will
    be mounted on the local /home/demo/tmp mount point. All the files in the remote
    folder can then be accessed as if they reside on the local hard disk drive.
  prefs: []
  type: TYPE_NORMAL
- en: 17.6 Unmounting an NFS Mount Point
  prefs: []
  type: TYPE_NORMAL
- en: 'Once a remote file system is mounted using NFS it can be unmounted using the
    umount command with the local mount point as the command-line argument. The following
    command, for example, will unmount our example filesystem mount point:'
  prefs: []
  type: TYPE_NORMAL
- en: umount /home/demo/tmp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 17.7 Accessing NFS Filesystems in Cockpit
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to mounting a remote NFS file system on a client using the command-line,
    it is also possible to perform mount operations from within the Cockpit web interface.
    Assuming that Cockpit has been installed and configured on the client system,
    log into the Cockpit interface from within a web browser and select the Storage
    option from the left-hand navigation panel. If the Storage option is not listed,
    the cockpit-storaged package will need to be installed and the cockpit service
    restarted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf install cockpit-storaged
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: systemctl restart cockpit.socket
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the Cockpit service has restarted, log back into the Cockpit interface
    at which point the Storage option should now be visible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once selected, the main storage page will include a section listing any currently
    mounted NFS file systems as illustrated in [Figure 17-1](../Text/NFS_File_Sharing.xhtml#_idTextAnchor229):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/rhel_8_cockpit_nfs_mounts.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17-1
  prefs: []
  type: TYPE_NORMAL
- en: 'To mount a remote filesystem, click on the ‘+’ button highlighted above and
    enter information about the remote NFS server and file system share together with
    the local mount point and any necessary options into the resulting dialog before
    clicking on the Add button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/rhel_8_cockpit_nfs_mount_dialog.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17-2
  prefs: []
  type: TYPE_NORMAL
- en: 'To modify, unmount or remove an NFS filesystem share, select the corresponding
    mount in the NFS Mounts list ([Figure 17-1](../Text/NFS_File_Sharing.xhtml#_idTextAnchor229)
    above) to display the page shown in [Figure 17-3](../Text/NFS_File_Sharing.xhtml#_idTextAnchor230)
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/rhel_8_cockpit_nfs_mount_modify.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17-3
  prefs: []
  type: TYPE_NORMAL
- en: Within this screen perform tasks such as changing the server or mount points
    or unmounting the file system. The Remove option unmounts the file system and
    deletes the entry from the /etc/fstab file so that it does not re-mount next time
    the system reboots.
  prefs: []
  type: TYPE_NORMAL
- en: 17.8 Summary
  prefs: []
  type: TYPE_NORMAL
- en: The Network File System (NFS) is a client/server-based system, originally developed
    by Sun Microsystems, which provides a way for Linux and Unix systems to share
    filesystems over a network. NFS allows a client system to access and (subject
    to permissions) modify files located on a remote server as though those files
    are stored on a local filesystem. This chapter has provided an overview of NFS
    and outlined the options available for configuring both client and server systems
    using the command-line or the Cockpit web interface.
  prefs: []
  type: TYPE_NORMAL
