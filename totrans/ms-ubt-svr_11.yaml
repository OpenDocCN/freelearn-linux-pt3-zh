- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Setting Up Network Services
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置网络服务
- en: In *Chapter 10*, *Connecting to Networks*, we went over some important foundational
    topics related to networking. We saw how to set the hostname, manage network interfaces,
    configure connections, and more. In this chapter, we’ll revisit networking, specifically
    to set up the resources that will serve as the foundation of our network. The
    majority of this chapter will focus on setting up the DHCP and DNS servers, which
    are very important components of any network. In addition, we’ll even take a look
    at setting up a server to act as an internet gateway for the rest of our network.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第10章*，*连接到网络*中，我们讨论了与网络相关的一些重要基础知识。我们了解了如何设置主机名、管理网络接口、配置连接等内容。在本章中，我们将再次讨论网络，特别是设置将作为网络基础的资源。本章的主要内容将集中在设置DHCP和DNS服务器上，这两个组件在任何网络中都是非常重要的。此外，我们还将探讨如何设置一个服务器作为我们网络的互联网网关。
- en: 'Along the way, we’ll cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，我们将讨论以下主题：
- en: Planning your IP address scheme
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规划你的IP地址方案
- en: Serving IP addresses with `isc-dhcp-server`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`isc-dhcp-server`提供IP地址
- en: Setting up DNS with `bind`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`bind`设置DNS
- en: Setting up an internet gateway
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置互联网网关
- en: As a Linux administrator, you may or may not be tasked with designing the entire
    network layout of your organization; often there will be an already-existing network
    to manage. In the next section, we’ll discuss creating such a layout, even if
    only to understand what goes into such a plan.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Linux管理员，你可能会被要求设计整个组织的网络布局，也可能不会；通常会有一个已经存在的网络需要管理。在下一节中，我们将讨论如何创建这样的布局，即使仅仅是为了理解这种计划包含了什么内容。
- en: Planning your IP address scheme
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划你的IP地址方案
- en: Designing the overall layout of your network is an incredibly important process
    that sets the stage for success or failure later on. This design must take into
    consideration the needs of the organization, the need for efficient methods of
    communication, and the segregation of network services to ensure that your servers
    can only communicate with the resources that they are supposed to. As a Linux
    administrator that manages a fleet of Ubuntu servers, it’s not always the case
    that you’ll even have a say in the network layout at all. It’s quite common that
    you “inherit” a network designed by a previous administrator, or your job is siloed
    such that you only manage the servers and someone else is responsible for the
    network.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 设计你网络的整体布局是一个非常重要的过程，它为以后的成功或失败奠定了基础。这个设计必须考虑到组织的需求、高效的通信方式，以及网络服务的隔离，以确保你的服务器只能与它们应该访问的资源通信。作为一名管理Ubuntu服务器的Linux管理员，并非总是你能够参与网络布局的设计。你很可能“继承”了前任管理员设计的网络，或者你的工作被分隔开，你只负责管理服务器，网络则由其他人负责。
- en: Since this is primarily a book that focuses on teaching you how to manage Ubuntu
    servers, we aren’t going to cover all of the things that a network administrator
    would need to know, but there’s a bit of overlap between the two roles. As a Linux
    administrator, you may or may not be tasked with the designing of your network,
    but at a minimum, you do need to understand the overall layout and how your servers
    will fit within it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书主要是教你如何管理Ubuntu服务器，我们不会涵盖网络管理员需要了解的所有内容，但这两个角色之间有一些重叠。作为Linux管理员，你可能会负责设计网络，也可能不会，但至少，你需要了解网络的整体布局，以及你的服务器如何融入其中。
- en: In this section, we’ll discuss the most important part of a network layout—the
    IP address scheme. Planning the IP scheme is an important task that sets the foundation
    for many other things. Even if it’s not up to you to design this layout, knowing
    the finer details of an existing layout can help you better understand how servers
    you maintain might communicate with other devices. Planning your IP layout involves
    estimating how many devices will need to connect to your network and being able
    to support them. In addition, a good plan will account for potential growth and
    allow expansion as well. The main thing that factors into this is the size of
    your user base. Perhaps you are working in a small office with only a handful
    of people, or a large corporation with thousands of users and hundreds of virtual
    machines. Even if your organization is only a small office, I always recommend
    making the assumption that your company will explode in popularity someday and
    designing your network to have the growth potential to accommodate that.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分中，我们将讨论网络布局中最重要的部分——IP 地址规划。规划 IP 地址方案是一项重要的任务，它为许多其他工作奠定基础。即使这项布局设计不由你来完成，了解现有布局的细节也能帮助你更好地理解你所维护的服务器如何与其他设备进行通信。规划你的
    IP 布局需要估算有多少设备将需要连接到网络，并确保能够支持它们。此外，一个好的规划还需要考虑潜在的增长，并允许未来扩展。影响这一点的主要因素是用户基础的规模。也许你正在一个只有少数几个人的小办公室工作，或者你所在的是一个拥有数千个用户和数百台虚拟机的大公司。即使你的组织只是一个小型办公室，我总是建议假设公司未来某天会爆炸式增长，并设计你的网络以具备应对这一增长的潜力。
- en: Typically, most off-the-shelf routers and network equipment come with an integrated
    **Dynamic Host Control Protocol** (**DHCP**) server, with a default class C (`/24`)
    network. Essentially, this means that if you do not perform any configuration
    at all, you’re limited to 254 addresses. For a small office, this may seem like
    plenty. After all, if you don’t even have 254 employees at your company, that
    number may seem like overkill. As I mentioned before, potential growth is always
    something to keep in mind. But even if we remove that from the equation, IP addresses
    are used up quicker than you’d think nowadays—even when it comes to internal addressing.
    Average users may consume three IP addresses each, and sometimes more.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，大多数现成的路由器和网络设备都配备集成的**动态主机配置协议**（**DHCP**）服务器，并默认使用类 C（`/24`）网络。实质上，这意味着如果你完全不做任何配置，你的地址数量将被限制为
    254 个。对于一个小型办公室来说，这看起来可能已经足够了。毕竟，如果你的公司连 254 个员工都没有，这个数字看起来可能有些过剩。正如我之前提到的，潜在的增长始终是需要考虑的因素。但即使不考虑这一点，IP
    地址的消耗速度比你想象的要快——即使是内部地址也不例外。普通用户可能每人就消耗三个 IP 地址，有时甚至更多。
- en: For example, perhaps a user not only has a laptop (which itself can have both
    a wired and wireless interface, both consuming an IP address), but perhaps they
    also have a mobile phone (which likely features Wi-Fi), and a **Voice over IP**
    (**VoIP**) phone (there goes another address). If that user somehow manages to
    convince their supervisor that they also need a desktop computer as well as their
    laptop, there will be a total of five IP addresses for that one user. Suddenly,
    254 addresses don’t seem like all that many.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设某个用户不仅有一台笔记本电脑（笔记本可能同时有有线和无线接口，每个都占用一个 IP 地址），或许他还拥有一部手机（通常配有 Wi-Fi），以及一部**基于
    IP 的语音**（**VoIP**）电话（这又占用一个地址）。如果这个用户成功说服上司让他同时拥有台式电脑和笔记本电脑，那么这个用户将会拥有五个 IP 地址。突然间，254
    个地址似乎就不那么多了。
- en: Perhaps a really good real-world example of the number of available IP addresses
    potentially being a problem is a small restaurant in a busy city that offers free
    Wi-Fi to its customers. The person designing the guest network for their customers
    may assume that a `/24` network is more than enough if they only have one hundred
    customers or so each day. While that logic may seem sound, consider that if the
    restaurant is next to a busy street, people that have Wi-Fi enabled on their phone
    may snag an address as they pass by, and if the DHCP addresses are configured
    to expire in 24 hours, then there will often be no available IP addresses for
    actual customers most of the time. If you’ve ever attempted to connect to a restaurant
    Wi-Fi network and found yourself unable to access the internet after connecting,
    this could be a real-world example of a pain point of not designing a network
    layout effectively.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常好的现实世界示例，说明可用IP地址数量可能成为问题的情况，是一家位于繁忙城市的小餐馆为顾客提供免费Wi-Fi。为顾客设计访客网络的人可能会认为，如果每天只有大约一百个顾客，`/24`网络就足够了。虽然这个逻辑看起来是合理的，但考虑到如果餐馆位于繁忙街道旁，开着Wi-Fi的手机经过时可能会抢到一个地址，而且如果DHCP地址配置为24小时过期，那么大部分时间餐馆实际顾客将没有可用的IP地址。如果你曾尝试连接餐馆的Wi-Fi网络，连接后却无法上网，这可能就是未有效设计网络布局的一个现实痛点。
- en: The obvious answer to this problem is splitting up your network into **subnets**.
    Although I won’t go into the details of how to subnet your network (which would
    be beyond the scope of this book), I mention it here because it’s definitely something
    you should take into consideration. In the next section, I’ll explain how to set
    up your own DHCP server with a single network. However, if you need to expand
    your address space, you can easily do so by updating your DHCP configuration.
    When coming up with an IP address layout, always assume the worst and plan ahead.
    While it may be a simple task to expand your DHCP server, planning a new IP scheme
    rollout is very time-consuming, and to be honest, annoying.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的明显方法是将网络划分为**子网**。虽然我不会深入讲解如何将网络进行子网划分（这超出了本书的范围），但在这里提到它是因为它确实是你应该考虑的内容。在下一节中，我将解释如何在单一网络上设置自己的DHCP服务器。但是，如果你需要扩展地址空间，可以通过更新DHCP配置轻松完成。在制定IP地址布局时，始终假设最坏的情况并提前规划。虽然扩展DHCP服务器可能是一个简单的任务，但规划新的IP方案部署是非常耗时的，老实说，也很麻烦。
- en: 'When I set up a new network, I like to divide the address space into several
    categories. First, I’ll usually set aside a group of IP addresses specifically
    for DHCP. These addresses will get assigned to clients as they connect, and I’ll
    usually have them expire and need to be renewed in about one day. Then, I’ll set
    aside a block of IP addresses for network appliances, another block for servers,
    and so on. In the case of a typical `/24`, I might decide on a scheme such as
    the following (assuming it’s a small office with no growth planned):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当我设置一个新网络时，我喜欢将地址空间分成几个类别。首先，我通常会专门为DHCP预留一组IP地址。这些地址将在客户端连接时分配，通常它们会过期并需要在大约一天后续约。然后，我会为网络设备预留一块IP地址，为服务器预留另一块IP地址，以此类推。在一个典型的`/24`网络中，我可能会决定采用如下方案（假设这是一个没有计划增长的小型办公室）：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Since I mentioned it’s a good idea to plan for future growth, the `/24` would
    be potentially constrained and wouldn’t accommodate much growth. I chose that
    scheme to keep everything in this chapter simple for the sake of easy explanation.
    But in a real company network, you may want to consider a larger number of IP
    addresses than what the above would give you.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我提到过计划未来的增长是个好主意，`/24`网络可能会受到限制，无法支持太多的增长。我选择这个方案是为了让本章内容保持简单，便于讲解。但在真实的公司网络中，你可能需要考虑比上述方案提供的更多的IP地址。
- en: How do you get more IP addresses? Take a look at the number after the network
    address, which is `/24` on the first line. With that number, we’re configuring
    how large the IP address space is, which essentially correlates to how many IP
    addresses we have available. That number is known as a **CIDR** notation, which
    stands for **Classless Inter-Domain Routing**. Similar to a subnet mask, changing
    that number results in a different number of IP addresses. For example, if you
    change the `/24` portion of the network to `/22`, you instantly have 1,022 possible
    addresses to work with, rather than 254\. If you lower it again to `/20`, the
    number jumps to 4,094\. For now, don’t worry too much about this. You can focus
    on remembering that the higher the number, the fewer IP addresses you have. It
    can go up to `/32`, which only gives you one IP address. If you’d like to experiment
    further with subnetting, we’ve provided a subnet calculator in the *Further reading*
    section.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如何获得更多的IP地址？看看网络地址后面的数字，在第一行中是`/24`。这个数字配置了IP地址空间的大小，本质上决定了我们有多少可用的IP地址。这个数字被称为**CIDR**表示法，代表**无类域间路由**。类似于子网掩码，改变这个数字会导致不同数量的IP地址。例如，如果你将网络中的`/24`改为`/22`，你将立即拥有1,022个可用地址，而不是254个。如果再将它降低到`/20`，数量会增加到4,094个。现在，你不必过于担心这些。你可以集中精力记住，数字越大，IP地址就越少。它可以一直增加到`/32`，这时你只会得到一个IP地址。如果你想进一步实验子网划分，我们在*进一步阅读*部分提供了一个子网计算器。
- en: 'The following is a list of common CIDR values and their impact on the number
    of available IP addresses:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是常见的CIDR值及其对可用IP地址数量的影响：
- en: '| **CIDR** | **Total Usable IP Addresses** |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| **CIDR** | **总可用IP地址** |'
- en: '| `/32` | `1` |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `/32` | `1` |'
- en: '| `/24` | `254` |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `/24` | `254` |'
- en: '| `/16` | `65,534` |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `/16` | `65,534` |'
- en: '| `/8` | `16,777,214` |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `/8` | `16,777,214` |'
- en: Of course, no single IP address scheme is right for everyone. The scheme I provided
    earlier is simply a hypothetical example, so you shouldn’t copy mine and use it
    on your network unless it matches your needs. I’ll use this scheme for the remainder
    of this chapter, since it works fine as an example. To explain my sample rollout,
    we start off with a 24-bit network, `192.168.1.0/24`. The address `192.168.1.0`
    refers to the network itself, and that IP address is not assignable to clients.
    The first usable IP address in this subnet will be `192.168.1.1`. The last IP
    address in this block (`192.168.1.255`) is not assignable either, since that is
    known as the **broadcast address**. Anything that’s sent to the broadcast address
    is effectively sent to every IP in the block, so we can’t really use it for anything
    but broadcasts. In summary, keep in mind that an IP address ending in `.0` can’t
    be used, and neither can an IP address that ends in `.255`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，没有一个IP地址方案适合所有人。我之前提供的方案只是一个假设的例子，所以除非它符合你的需求，否则不应将我的方案复制并应用到你的网络中。在本章剩余部分，我将使用这个方案，因为它作为示例是有效的。为了说明我的示例实施方案，我们从一个24位网络开始，`192.168.1.0/24`。地址`192.168.1.0`指的是网络本身，这个IP地址不能分配给客户端。该子网中第一个可用的IP地址是`192.168.1.1`。这个块中的最后一个IP地址（`192.168.1.255`）也不能分配，因为它被称为**广播地址**。发送到广播地址的任何信息实际上会发送到该块中的每个IP地址，因此我们不能将其用于任何用途，除非是广播。总结来说，请记住，结尾为`.0`的IP地址无法使用，结尾为`.255`的IP地址也是如此。
- en: Technically, you *can* assign IP addresses ending in `.0` or `.255`, depending
    on the CIDR value. However, since those ending values are most often used to refer
    to the network itself and the broadcast address respectively, some applications
    and pieces of hardware may not accept these values so for all intents and purposes,
    you should consider those ending values as unassignable.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，你*可以*分配以`.0`或`.255`结尾的IP地址，具体取决于CIDR值。然而，由于这些结尾值通常用于表示网络本身和广播地址，因此一些应用程序和硬件可能不接受这些值。因此，实际上你应该将这些结尾值视为不可分配的。
- en: Going back to the example IP layout mentioned earlier in this section, I set
    aside a group of IP addresses starting with `192.168.1.1` through `192.168.1.10`
    for use by network appliances. Typical devices that would fit into this category
    would be managed switches, routers, wireless access points, and so on. These devices
    typically have an integrated web console for remote management, so it would be
    best to have a static IP address assignment. That way, I’ll have an IP address
    available that I can use to access these devices. I like to set up network appliances
    as the first devices so that they all get the lowest numbers when it comes to
    the last number of each IP address. This is just personal preference.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 回到本节之前提到的示例IP布局，我为网络设备预留了一组IP地址，范围是`192.168.1.1`到`192.168.1.10`。符合这一类别的典型设备包括受管交换机、路由器、无线接入点等。这些设备通常具有集成的Web控制台用于远程管理，因此最好为它们分配静态IP地址。这样，我就可以使用这些IP地址访问这些设备。我喜欢将网络设备设置为第一个分配静态IP地址的设备，以便它们在每个IP地址的最后一个数字上获得最小的号码。这只是个人偏好。
- en: Next in the example layout, we define IP addresses `192.168.1.11` through `192.168.1.99`
    for servers. This may seem like quite a few addresses for servers, and it is.
    However, with the rise of virtualization and how simple it has become to spin
    up a server, this block could get used up faster than you’d think. Feel free to
    adjust accordingly.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例布局中，我们为服务器定义了IP地址`192.168.1.11`到`192.168.1.99`。这看起来像是为服务器分配了不少地址，确实如此。然而，随着虚拟化技术的兴起以及部署服务器变得如此简单，这个地址范围可能会比你预想的更快用完。可以根据需要进行调整。
- en: Now we have our DHCP pool, which consists of addresses `192.168.1.101` through
    `192.168.1.240`. These IP addresses are assignable to any devices that connect
    to our network. Typically, I like to have these assignments expire in one day
    to prevent one-off devices from claiming and holding onto an IP address for too
    long, which can lead to devices fighting over a DHCP lease. In this situation,
    you’d have to clear your DHCP leases to reset everything, and I find that to be
    too much of a hassle. When we get to the section on setting up a DHCP server,
    I’ll show you how to set the expiration time.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了DHCP地址池，它包含了`192.168.1.101`到`192.168.1.240`的地址。这些IP地址可以分配给任何连接到我们网络的设备。通常，我喜欢将这些分配设置为一天后过期，以防止某些临时设备占用IP地址过长时间，这可能导致设备之间争夺DHCP租约。在这种情况下，你需要清除DHCP租约来重置所有内容，而我觉得这样做太麻烦了。当我们进入设置DHCP服务器的部分时，我会向你展示如何设置过期时间。
- en: Finally, we have addresses `192.168.1.241` through `192.168.1.254` for the purposes
    of DHCP reservations. I generally refer to reserved DHCP addresses as *static
    leases*, but both terms mean the same thing. These addresses will be assigned
    by DHCP, but each device with a static lease will be given the same IP address
    each time. You don’t have to separate these into their own pool, since DHCP will
    not assign the same address twice. It may still be a good idea to separate them
    though, if only to be able to tell from looking at an IP address that it’s a static
    lease, due to it being within a particular hypothetical block. Static leases are
    good for devices that aren’t necessarily a server but still need a predictable
    IP address.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们为DHCP预留地址定义了`192.168.1.241`到`192.168.1.254`的地址范围。我通常将预留的DHCP地址称为*静态租约*，但这两个术语的含义是相同的。这些地址将由DHCP分配，但每个拥有静态租约的设备每次都会获得相同的IP地址。你不需要将这些地址单独放入一个池中，因为DHCP不会分配相同的地址两次。不过，将它们分开还是一个好主意，至少可以通过查看IP地址来辨别它是静态租约，因为它属于某个假设的地址范围。静态租约适用于那些不一定是服务器但仍然需要可预测IP地址的设备。
- en: An example of this may be an administrator’s desktop PC. Perhaps they want to
    be able to connect to the office via VPN and be able to easily find their computer
    on the network and connect to it. If the IP was dynamically assigned instead of
    statically assigned, it would be harder for them to find it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子可能是管理员的桌面PC。也许他们希望能够通过VPN连接到办公室，并且能够轻松地在网络上找到自己的电脑并进行连接。如果IP是动态分配的，而不是静态分配的，他们就很难找到自己的设备。
- en: After you carve up your IP addresses, the next thing is to make sure that they’re
    accurately documented. If you don’t focus on documentation now while designing
    services, you will definitely regret it later. You can consider setting up a private
    wiki server, for example.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在划分完IP地址后，接下来的任务是确保它们得到准确的文档记录。如果你在设计服务时没有专注于文档记录，后期肯定会后悔。你可以考虑设置一个私人Wiki服务器，例如。
- en: 'Another method is creating a spreadsheet to keep track of your static IP assignments.
    This is acceptable if you don’t have a better solution; it doesn’t have to be
    anything fancy. Among the usual components, such as the device info and IP address,
    I also include the MAC address of each device on the spreadsheet, which will come
    in handy when we set up our DHCP server in the next section:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是创建一个电子表格来跟踪静态IP分配。如果你没有更好的解决方案，这也是可以接受的；不需要太复杂。在通常的组件中，如设备信息和IP地址，我还会在电子表格中包括每个设备的MAC地址，这在我们设置DHCP服务器的下一节中将非常有用：
- en: '![Table  Description automatically generated](img/B18425_11_01.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![表格 描述自动生成](img/B18425_11_01.png)'
- en: 'Figure 11.1: An example IP address layout spreadsheet'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1：一个示例IP地址布局电子表格
- en: As you can see from my example layout, our number of available addresses is
    rather limited with a 24-bit network. However, this layout will serve as an example
    we can follow that’s good enough for the remainder of the chapter. At this point,
    just think about the factors that are important to your organization, and ensure
    that any networks you create are scalable and accommodate your needs.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从我的示例布局中可以看出，使用24位网络时可用地址的数量相当有限。然而，这个布局足以作为我们后续章节的示例。此时，只需考虑对你所在组织来说重要的因素，并确保你创建的任何网络都具有可扩展性，能够满足你的需求。
- en: Now that we have an IP layout (if we didn’t have one already), we can take a
    look at setting up a DHCP server, which will be the service that will ultimately
    be assigning these IPs.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了IP布局（如果之前没有的话），我们可以开始设置DHCP服务器，这将是最终分配这些IP的服务。
- en: Setting up a DHCP server for serving IP addresses
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置DHCP服务器以提供IP地址
- en: Most network appliances you purchase nowadays often come with their own DHCP
    server and allow you to configure it via a web console. Often, this is totally
    fine and meets your needs. In my experience though, network appliances you purchase
    can be very hit and miss. Some of them are great, while others are not so impressive.
    One of the main problems is that manufacturers will often stop supporting the
    hardware prematurely, exposing your network to unpatched vulnerabilities. It’s
    important to always purchase network hardware that’s as future-proof as possible.
    Or, you can set up your own router with the features that you need. Although the
    burden of management is placed on you, this gives you ultimate flexibility. Ubuntu
    servers make great DHCP servers, and rolling your own server is actually easier
    than it sounds. And that’s exactly what we’re going to work through in this section.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在购买的大多数网络设备通常会自带DHCP服务器，并允许你通过Web控制台进行配置。通常，这样完全没问题，能够满足你的需求。然而，根据我的经验，你购买的网络设备可能存在不稳定的情况。有些设备很棒，但有些则不那么令人印象深刻。一个主要的问题是，制造商通常会提前停止对硬件的支持，这会让你的网络暴露于未修补的漏洞之中。因此，始终购买尽可能具有未来适应性的网络硬件是非常重要的。或者，你可以自己设置路由器，配置所需的功能。虽然管理负担会落在你身上，但这能给你提供最大的灵活性。Ubuntu服务器是很好的DHCP服务器，自己搭建服务器其实比看起来要简单。接下来，我们将在本节中详细讨论这一过程。
- en: First, the server that serves DHCP will definitely need a static IP address.
    This means you’ll need to configure Netplan with a static IP assignment. A static
    lease won’t work here, since the DHCP server can’t assign an IP address to itself.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，提供DHCP服务的服务器必须具备静态IP地址。这意味着你需要使用Netplan来配置静态IP分配。静态租约在这里不起作用，因为DHCP服务器无法为自己分配IP地址。
- en: Also, the IP address that you designate for your server’s static IP must be
    in the same network as the addresses that you plan to serve. Otherwise, the service
    will fail to start even after we configure it.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，分配给服务器的静态IP地址必须与计划提供的地址处于同一网络内。否则，即使我们配置了服务，它也无法启动。
- en: If you have yet to set a static IP address, *Chapter 10*, *Connecting to Networks*,
    has a section that will walk you through the process.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有设置静态IP地址，*第10章*，*连接网络*，有一节内容会带你完成这个过程。
- en: 'Once you assign a static IP address, the next step is to install the `isc-dhcp-server`
    package:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你分配了静态IP地址，下一步就是安装`isc-dhcp-server`软件包：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Check the status of the daemon after installing the `isc-dhcp-server` package,
    using the following command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完`isc-dhcp-server`软件包后，使用以下命令检查守护进程的状态：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You’ll likely notice that it failed:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到它失败了：
- en: '![](img/B18425_11_02.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_11_02.png)'
- en: 'Figure 11.2: isc-dhcp-server failing by default'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2：默认情况下`isc-dhcp-server`失败
- en: If it did fail to start, there’s no need to be concerned. Ubuntu, by default,
    starts most of the services that are installed via packages. Sometimes, a service
    needs to be configured before it can run. In the case of the `isc-dhcp-server`,
    it needs a valid configuration in order to start, but we have yet to configure
    anything. We need to configure the `isc-dhcp-server` service for it to be useful,
    so let’s stop the service for now.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启动失败，不必担心。Ubuntu 默认会启动大多数通过软件包安装的服务。有时，某些服务需要先配置才能运行。在 `isc-dhcp-server` 的情况下，它需要一个有效的配置才能启动，但我们还没有进行任何配置。我们需要配置
    `isc-dhcp-server` 服务使其能正常工作，所以现在先停止该服务。
- en: 'We can start it as soon as we’ve finished adding our configuration:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成了配置的添加，就可以开始了：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Configuring an IPv6 network isn’t something we’ll be getting into, but the
    DHCP server package we’ve just installed also comes with an IPv6 equivalent. Let’s
    stop and disable this service, since we won’t be using it:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 配置 IPv6 网络不是我们要讨论的内容，但我们刚安装的 DHCP 服务器软件包也包括了一个 IPv6 对应版本。让我们停止并禁用这个服务，因为我们不会使用它：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now that you’ve installed the `isc-dhcp-server` package, you’ll have a default
    configuration file for it at `/etc/dhcp/dhcpd.conf`. This file will contain some
    default configuration, with some example settings that are commented out. Feel
    free to take a look at this file to get an idea of some of the settings you can
    configure. We’ll create our own `dhcpd.conf` file from scratch. So when you’re
    done looking at it, move the existing file with a new name so we can refer to
    it later if we ever need to:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经安装了 `isc-dhcp-server` 软件包，它会在 `/etc/dhcp/dhcpd.conf` 目录下为你提供一个默认的配置文件。这个文件包含一些默认配置，其中有一些示例设置被注释掉了。你可以查看这个文件，了解一些你可以配置的设置。我们将从头开始创建自己的
    `dhcpd.conf` 文件。所以，当你查看完后，将现有文件重命名，以便以后如果需要参考它时可以找到：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we’re ready to create our own `dhcpd.conf` file. Open `/etc/dhcp/dhcpd.conf`
    in your preferred text editor. Since the file no longer exists (we moved it),
    we should start with an empty file. Here’s an example `dhcpd.conf` file that I
    will explain so that you understand how it works:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备创建自己的 `dhcpd.conf` 文件。用你喜欢的文本编辑器打开 `/etc/dhcp/dhcpd.conf`。由于文件已经不存在（我们已将其移动），我们应该从一个空文件开始。这是一个示例
    `dhcpd.conf` 文件，我会逐一解释它的工作原理，帮助你理解它是如何运作的：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As always, change the values I’ve used to those that match your network. I’ll
    explain each line so that you’ll understand how it affects the configuration of
    your DHCP server.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，将我使用的值更改为与你的网络相匹配的值。我会解释每一行，这样你就能理解它如何影响你的 DHCP 服务器配置。
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When a device connects to your network and requests an IP address, the expiration
    of the lease will be set to the number of seconds in `default-lease-time` if the
    device doesn’t explicitly ask for a longer lease time. Here, I’m setting that
    to `43200` seconds, which is equivalent to half a day. This basically means that
    the device will need to renew its IP address every `43200` seconds unless it asks
    for a longer duration.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当设备连接到你的网络并请求一个 IP 地址时，如果设备没有明确要求更长的租期，租期到期时间将设置为 `default-lease-time` 中的秒数。在这里，我将其设置为
    `43200` 秒，相当于半天。这基本上意味着设备每隔 `43200` 秒就需要续租其 IP 地址，除非它请求更长的租期。
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: While the previous setting dictated the default lease time for devices that
    don’t ask for a specific lease time, `max-lease-time` is the most that the device
    is allowed to have. In this case, I set this to one day (`86400` seconds). Therefore,
    no device that receives an IP address from this DHCP server is allowed to hold
    onto its lease for longer than this without first renewing it.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前面的设置规定了设备在没有请求特定租期时的默认租期，`max-lease-time` 是设备可以拥有的最大租期。在这种情况下，我将其设置为一天（`86400`秒）。因此，从这个
    DHCP 服务器获取 IP 地址的设备不能在没有先续租的情况下，持有其租期超过这个时间。
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: With this setting, we’re informing clients that their subnet mask should be
    set to `255.255.255.0`, which is for a default 24-bit network. If you plan to
    subnet your network, you’ll put in a different value here. `255.255.255.0` is
    fine if all you need is a 24-bit network.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个设置，我们通知客户端，它们的子网掩码应该设置为`255.255.255.0`，这是一个默认的24位网络。如果你打算对网络进行子网划分，你需要在这里填写不同的值。如果你只需要一个24位的网络，`255.255.255.0`是没问题的。
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: With this setting, we’re telling the client to use `192.168.1.255` as the broadcast
    address, which is the last address in the subnet and cannot be assigned to a host.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个设置，我们告诉客户端使用 `192.168.1.255` 作为广播地址，这是子网中的最后一个地址，不能分配给主机。
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, we’re setting the domain names of all hosts that connect to the server
    to include `local.lan`. The domain name is added to the end of the hostname. For
    example, if a workstation with a hostname of `muffin` receives an IP address from
    our DHCP server, it will be referred to as `muffin.local.lan`. Feel free to change
    this to the domain name of your organization, or you can leave it as is if you
    don’t have one.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们设置了所有连接到服务器的主机的域名为 `local.lan`。域名将添加到主机名的末尾。例如，如果一个主机名为 `muffin` 的工作站从我们的
    DHCP 服务器获取了一个 IP 地址，它将被称为 `muffin.local.lan`。如果你有自己的组织域名，可以将其更改为相应的域名，或者如果没有域名，也可以保持原样。
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With the `authoritative` setting (the opposite is `not authoritative`), we’re
    declaring our DHCP server as authoritative to our network. Unless you are planning
    to have multiple DHCP servers, the `authoritative;` option should be included
    in your `config` file. We won’t use the `not authoritative;` option as it’s beyond
    the scope of this chapter.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `authoritative` 设置（与 `not authoritative` 相对），我们将 DHCP 服务器声明为网络的权威服务器。除非你打算有多个
    DHCP 服务器，否则在你的 `config` 文件中应该包括 `authoritative;` 选项。我们不会使用 `not authoritative;`
    选项，因为它超出了本章的范围。
- en: 'Now, we get to the most important part of our configuration file for DHCP.
    The following block details the specific information that will be provided to
    clients:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们进入了 DHCP 配置文件中最重要的部分。以下代码块详细说明了将提供给客户端的具体信息：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This block is probably self-explanatory, but we’re basically declaring our pool
    of addresses for the `192.168.1.0` network. We’re declaring a range of IPs from
    `192.168.1.100` through `192.168.1.240` to be available for clients. Now when
    our DHCP server provides an address to clients, it will choose one from this pool.
    For the address pool (`range`), feel free to expand it or shrink it accordingly.
    For example, you might need more addresses than the 140 that are allowed in my
    sample range, so you may change it to something like `192.168.1.50` through `192.168.1.250`.
    Feel free to experiment.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码块可能不言自明，但我们基本上是在声明 `192.168.1.0` 网络的地址池。我们声明了一个从 `192.168.1.100` 到 `192.168.1.240`
    的 IP 地址范围可以供客户端使用。现在，当我们的 DHCP 服务器为客户端分配地址时，它将从这个池中选择一个地址。对于地址池（`range`），你可以根据需要进行扩展或缩小。例如，你可能需要比我示例范围中允许的
    140 个地址更多的地址，因此你可以将其更改为类似 `192.168.1.50` 到 `192.168.1.250` 的范围。可以自由尝试。
- en: We’re also providing a default gateway (`option routers`) and DNS server (`option
    domain-name-servers`) of `192.168.1.1`. This is assuming that your router and
    local DNS server are both listed at that address, so make sure that you change
    it accordingly. Otherwise, anyone who receives a DHCP lease from your server will
    not be able to connect to anything.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还提供了默认网关（`option routers`）和 DNS 服务器（`option domain-name-servers`）为 `192.168.1.1`。这是假设你的路由器和本地
    DNS 服务器都列在该地址上，所以请确保根据需要进行更改。否则，任何从你的服务器获取 DHCP 租约的设备将无法连接到任何东西。
- en: 'Now we have our configuration file in place, but the DHCP server will likely
    still not start until we declare an interface for it to listen for requests on.
    You can do that by editing the `/etc/default/isc-dhcp-server` file, where you’ll
    see a line toward the bottom similar to the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了配置文件，但 DHCP 服务器可能仍然不会启动，直到我们声明一个接口来监听请求。你可以通过编辑 `/etc/default/isc-dhcp-server`
    文件来做到这一点，在文件底部你会看到类似以下的行：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Simply type the name of the interface within the quotes:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在引号中键入接口的名称：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In case you forgot, the command to list the details of the interfaces on your
    server is `ip addr show`, or the shortened version, `ip a`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你忘记了，列出服务器上接口详细信息的命令是 `ip addr show`，或者它的简写版本 `ip a`。
- en: 'Now that we have our DHCP server configured, we should be able to start it:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了 DHCP 服务器，我们应该能够启动它：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, double-check that there were no errors by running the following command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，运行以下命令检查没有错误：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The daemon should report that it’s `active (running)`, similar to what’s shown
    in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 守护进程应该报告它是 `active (running)`，类似于以下截图所示：
- en: '![](img/B18425_11_03.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_11_03.png)'
- en: 'Figure 11.3: Checking the status of the isc-dhcp-server process after a successful
    start'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3：成功启动后检查 isc-dhcp-server 进程的状态
- en: 'Assuming all went well, your DHCP server should be running. When an IP lease
    is assigned to a client, it will be recorded in the `/var/lib/dhcp/dhcpd.leases`
    file. While your DHCP server runs, it will also record information to your server’s
    system log, located at `/var/log/syslog`. To see your DHCP server function in
    all its glory, you can follow the log as it gets written to with the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一切顺利，你的 DHCP 服务器应该正在运行。当 IP 租约分配给客户端时，它会记录在 `/var/lib/dhcp/dhcpd.leases` 文件中。当你的
    DHCP 服务器运行时，它还会将信息记录到服务器的系统日志中，该日志位于 `/var/log/syslog`。要查看你的 DHCP 服务器的完整功能，你可以通过以下命令查看日志的实时写入：
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We’ve discussed the `-f` flag of the `tail` command earlier in the book. This
    option is indispensable, and it’s something you’ll likely use quite often as a
    server administrator. With the `-f` option, you’ll watch the log as it gets written
    to, rather than needing to refresh it manually. You can press *Ctrl + c* to break
    out of the file.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在书中之前讨论过 `tail` 命令的 `-f` 标志。这个选项是必不可少的，作为服务器管理员，你可能会经常使用它。使用 `-f` 选项时，你可以实时查看日志的写入内容，而不需要手动刷新它。你可以按
    *Ctrl + c* 来中断文件查看。
- en: 'While your DHCP server runs, you’ll see notices appear within the `syslog`
    file whenever a DHCP request was received and when a lease is offered to a client.
    A typical DHCP request will appear in the log similar to the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的 DHCP 服务器运行时，每当收到 DHCP 请求或租约提供给客户端时，你会看到通知出现在 `syslog` 文件中。一个典型的 DHCP 请求日志类似于以下内容：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Active and previous DHCP leases are stored in the `/var/lib/dhcp/dhcpd.leases`
    file, and a typical lease entry in that file would look similar to the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 活跃和之前的 DHCP 租约会存储在 `/var/lib/dhcp/dhcpd.leases` 文件中，该文件中的一个典型租约条目看起来类似于以下内容：
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: When a new device is added to your network and receives an IP address from your
    new DHCP server, you should see the lease information populate that file. This
    file can be incredibly helpful, because whenever you connect a new device, you
    won’t have to interrogate the device itself to find out what its IP address is.
    You can just check the `/var/lib/dhcp/dhcpd.leases` file. If the device advertises
    its hostname, you’ll see it within its lease entry. A good example of how this
    can be useful is connecting a Raspberry Pi to your network. Once you plug it in
    and turn it on, you’ll see its IP address in the `dhcpcd.leases` file, and then
    you can connect to it via SSH with the IP without having to plug a monitor into
    it to find out which IP it was given. Similarly, you can view the temporary IP
    address of a new network appliance that you plug in so that you can connect to
    it and configure it.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个新设备连接到你的网络并从新的 DHCP 服务器获取 IP 地址时，你应该会看到租约信息出现在该文件中。这个文件非常有用，因为每当你连接一个新设备时，你不需要直接询问设备本身来找出它的
    IP 地址。你只需查看 `/var/lib/dhcp/dhcpd.leases` 文件。如果设备公开了它的主机名，你会在它的租约条目中看到该信息。一个典型的使用场景是将
    Raspberry Pi 连接到你的网络。插上电源并启动后，你可以在 `dhcpcd.leases` 文件中看到它的 IP 地址，然后通过 SSH 使用该
    IP 地址连接，而无需连接显示器查看它获得了哪个 IP 地址。同样，你也可以查看你插入的新的网络设备的临时 IP 地址，从而能够连接并进行配置。
- en: If you have any trouble setting up the `isc-dhcp-server` daemon, double-check
    that you have set all the correct and matching values within your static IP assignment,
    as well as within your `/etc/dhcp/dhcpd.conf` file. For example, your server must
    be within the same network as the IPs you’re assigning to clients. As long as
    everything matches, you should be fine and it should start properly.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在设置 `isc-dhcp-server` 守护进程时遇到任何问题，请仔细检查你是否在静态 IP 分配和 `/etc/dhcp/dhcpd.conf`
    文件中设置了所有正确匹配的值。例如，你的服务器必须与分配给客户端的 IP 地址处于同一网络中。只要一切匹配，你应该没问题，服务也应该能够正常启动。
- en: Next, let’s take a look at another important service within a network—DNS.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们来看看网络中的另一个重要服务——DNS。
- en: Adding a DNS server
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加 DNS 服务器
- en: I’m sure most of you are familiar with the purpose of a **Domain Name System**
    (**DNS**) server. Its simplest definition is that it’s a service that’s responsible
    for matching an IP address to a domain or hostname. When you’re connected to the
    internet, name-to-IP matching happens constantly as you browse. After all, it’s
    much easier to connect to [https://www.google.com/](https://www.google.com/) using
    its domain name than it is to remember its IP address.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信你们大多数人都熟悉 **域名系统** (**DNS**) 服务器的作用。最简单的定义是，它是一项负责将 IP 地址与域名或主机名匹配的服务。当你连接到互联网时，浏览时会不断发生域名到
    IP 地址的匹配。毕竟，使用域名连接到 [https://www.google.com/](https://www.google.com/) 比记住其 IP
    地址要容易得多。
- en: When you connect to the internet, your workstation or server will connect to
    an external DNS server in order to figure out the IP addresses for the websites
    you attempt to visit.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当你连接到互联网时，你的工作站或服务器将连接到外部 DNS 服务器，以便找出你尝试访问的网站的 IP 地址。
- en: It’s also very common to run a local DNS server internally in your organization.
    The benefit is that you’ll be able to resolve your local hostnames as well, something
    that an external DNS server would know nothing about. For example, if you have
    an intranet site that you intend to make available to your co-workers, it would
    be easier to give everyone a local domain that they can access than it would be
    to make everyone memorize its IP address. With a local DNS server, you would create
    what is known as a **zone file**, which would contain information regarding the
    hosts and IP addresses in use within your network so that local devices would
    be able to resolve them. In the event that your local DNS server is unable to
    fulfill your request (such as a request for an external website), the server would
    pass the request along to an external DNS server, which would then carry out the
    request.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的组织内部运行本地 DNS 服务器也非常常见。其好处是你可以解析本地主机名，而外部 DNS 服务器则无法知道这些内容。例如，如果你有一个内部网网站，打算让同事们访问，给每个人提供一个本地域名让他们访问要比让大家记住它的
    IP 地址更加容易。使用本地 DNS 服务器，你将创建一个被称为 **区域文件** 的文件，该文件包含网络内正在使用的主机和 IP 地址的信息，这样本地设备就可以解析它们。如果本地
    DNS 服务器无法处理你的请求（例如请求访问外部网站），服务器会将请求转发到外部 DNS 服务器，然后外部 DNS 服务器将执行该请求。
- en: While DNS is an extensive topic that can take a while to master, a basic understanding
    is really all you need in order to make use of a custom DNS server within your
    network. In this section, I’ll show you how to set up your very own DNS server
    to allow your devices to resolve local hostnames, which should greatly enhance
    your network.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 DNS 是一个广泛的话题，可能需要一些时间才能掌握，但基本的理解就足以让你在网络中使用自定义的 DNS 服务器。在本节中，我将向你展示如何设置你自己的
    DNS 服务器，使你的设备能够解析本地主机名，从而大大提升你的网络效率。
- en: Setting up external DNS with bind
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 BIND 设置外部 DNS
- en: 'To set up your very own DNS server, we’ll first need to install the **Berkeley
    Internet Name Daemon** (**BIND**) package on our server:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要搭建你自己的 DNS 服务器，我们首先需要在服务器上安装 **伯克利互联网名称守护进程**（**BIND**）包：
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now, we should have the `bind9` service running on our server, though it’s not
    actually configured to do much at this point. The most basic function of `bind`
    is to act as what’s called a **Caching Name Server**, which means that the server
    doesn’t actually match any names itself. Instead, it caches responses from an
    external server – which can actually increase the performance of your network
    in some cases. We’ll configure `bind` with actual hosts later, but setting up
    a caching name server is a good way to get started.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该已经在服务器上运行了 `bind9` 服务，尽管它此时还没有实际配置做什么。`bind` 最基本的功能是充当 **缓存名称服务器**，这意味着该服务器本身并不会匹配任何名称。相反，它会缓存来自外部服务器的响应——在某些情况下，这实际上可以提高你网络的性能。我们稍后会为
    `bind` 配置实际的主机，但设置一个缓存名称服务器是开始的好方法。
- en: To do so, open the `/etc/bind/named.conf.options` file in your favorite text
    editor.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，打开 `/etc/bind/named.conf.options` 文件，使用你喜欢的文本编辑器。
- en: 'Within the file, you should see a block of text that looks similar to the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件中，你应该看到一段类似于以下内容的文本：
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Uncomment these lines. The *forward slashes* are comment marks as far as this
    configuration file is concerned, so remove them. Then, we can add a few external
    DNS server IP addresses. For these, you can use the IP addresses for your **Internet
    Service Provider** (**ISP**)’s DNS servers, or you could simply use Google’s DNS
    servers (`8.8.8.8` and `8.8.4.4`) instead:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 取消注释这些行。对于这个配置文件来说，*斜杠*是注释符号，所以去掉它们。然后，我们可以添加几个外部 DNS 服务器的 IP 地址。你可以使用 **互联网服务提供商**（**ISP**）的
    DNS 服务器 IP 地址，或者你也可以直接使用 Google 的 DNS 服务器（`8.8.8.8` 和 `8.8.4.4`）：
- en: '[PRE23]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'After you save the file, restart the `bind9` service:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件后，重启 `bind9` 服务：
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To be sure that everything is running smoothly, check the status of the service:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保一切正常运行，请检查服务的状态：
- en: '[PRE25]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'It should report that it’s `active (running)`. As long as you’ve entered everything
    correctly, you should now have a working DNS server. Of course, we haven’t added
    any DNS names for it to resolve, but we’ll get to that. Now, all you should need
    to do is configure other devices on your network to use your new DNS server. The
    easiest way to do this is to reconfigure the `isc-dhcp-server` service we set
    up in the previous section. Remember the section that designates a pool of addresses
    from the server to the clients? It also contained a section to declare the DNS
    server your clients will use as well. Here’s that section again, with the relevant
    line in bold:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该报告`active (running)`。只要您输入了所有内容，现在应该有一个工作中的DNS服务器。当然，我们还没有添加任何DNS名称来解析，但我们会做到这一点。现在，您只需要配置网络上的其他设备以使用您的新DNS服务器。这样做的最简单方法是重新配置我们在上一节中设置的`isc-dhcp-server`服务。记住指定服务器向客户端分配地址池的部分吗？它还包含一个声明客户端将使用的DNS服务器的部分。以下是该部分，关键行用粗体标出：
- en: '[PRE26]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: To configure the devices on your network to use your new DNS server, all you
    should need to do is change the configuration `option domain-name-servers 192.168.1.1;`
    to point to the IP address of the new DNS server that we’re in the process of
    setting up. When clients request a DHCP lease (or attempt to renew an existing
    lease), they will be configured with the new DNS server automatically.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置网络上的设备使用您的新DNS服务器，您只需更改配置`option domain-name-servers 192.168.1.1;`以指向正在设置的新DNS服务器的IP地址。当客户端请求DHCP租约（或尝试更新现有租约）时，它们将自动配置为使用新的DNS服务器。
- en: With the caching name server we just set up, hosts that utilize it will check
    it first for any hostnames they attempt to look up. If they look up a website
    or host that is not within your local network, their requests will be forwarded
    to the forwarding addresses you configured for `bind`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 刚刚设置的缓存名称服务器将会首先为使用它的主机检查他们尝试查找的任何主机名。如果他们查找的网站或主机不在您的本地网络中，他们的请求将被转发到您为`bind`配置的转发地址。
- en: In my example, I used Google’s DNS servers, so if you used my configuration,
    your hosts will first check your local server and then check Google’s servers
    when resolving external names. Depending on your network hardware and configuration,
    you might even see a slight performance boost. This is because the DNS server
    you just set up is caching any lookups done against it. For example, if a client
    looks up [https://www.packtpub.com](https://www.packtpub.com) in a web browser,
    your DNS server will forward the request along since that site doesn’t exist locally
    and it will also remember the result. The next time a client within your network
    looks up that site, the response will be much quicker because your DNS server
    cached it.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的示例中，我使用了Google的DNS服务器，因此如果您使用我的配置，您的主机将首先检查您的本地服务器，然后在解析外部名称时检查Google的服务器。根据您的网络硬件和配置，您甚至可能会看到轻微的性能提升。这是因为您刚刚设置的DNS服务器正在缓存针对它的任何查找。例如，如果客户端在Web浏览器中查找[https://www.packtpub.com](https://www.packtpub.com)，您的DNS服务器将转发该请求，因为该站点在本地不存在，它还会记住结果。下次您的网络内部的客户端查找该站点时，响应将更快，因为您的DNS服务器已将其缓存。
- en: 'To see this yourself, execute the following command twice on a node (device)
    that is utilizing your new DNS server:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要自行查看，请在使用您的新DNS服务器的节点（设备）上两次执行以下命令：
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If `dig` isn’t available in your installation, you can install it as part of
    the `dnsutils` package:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的安装中没有`dig`，可以将其作为`dnsutils`软件包的一部分安装：
- en: '[PRE28]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the response, look for a line toward the end that gives you your query time.
    It will look similar to the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应中，查找末尾附近给出查询时间的行。它看起来类似于以下内容：
- en: '[PRE29]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'When you run it again, the query time should be much lower:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行时，查询时间应该更低：
- en: '[PRE30]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This is your caching name server in action! Even though we haven’t even set
    up any zone files to resolve your internal servers, your DNS server is already
    adding value to your network. You just laid the groundwork we’ll use for the rest
    of our configuration.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的缓存名称服务器在起作用！即使我们还没有设置任何区域文件来解析您的内部服务器，您的DNS服务器已经为您的网络增添了价值。您刚刚为我们后续的配置奠定了基础。
- en: Setting up internal DNS and adding hosts
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置内部DNS并添加主机
- en: 'Now, let’s add some hosts to our DNS server so we can start fully utilizing
    it. The configuration file for `bind` is located at `/etc/bind/named.conf`. In
    addition to some commented lines, it will have the following three lines of configuration
    within it:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们向DNS服务器添加一些主机，以便我们可以开始充分利用它。`bind`的配置文件位于`/etc/bind/named.conf`。除了一些已注释的行外，它还包含以下三行配置：
- en: '[PRE31]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'As you can see, the default `bind` configuration is split among several configuration
    files. Here, it includes three others: `named.conf.options`, `named.conf.local`,
    and `named.conf.default-zones` (the first of which we already took care of editing).
    In order to resolve local names, we need to create a **zone file**, which is essentially
    a text file that includes some configuration, a list of hosts, and their IP addresses.
    In order to do this, we need to tell `bind` where to find the zone file we’re
    about to create. Within `/etc/bind/named.conf.local`, we need to add a block of
    code like the following to the end of the file:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，默认的`bind`配置分为几个配置文件。在这里，它包括另外三个：`named.conf.options`、`named.conf.local`和`named.conf.default-zones`（我们已经编辑过其中的第一个）。为了解析本地名称，我们需要创建一个**区文件**，这本质上是一个包含一些配置、主机列表及其IP地址的文本文件。为了做到这一点，我们需要告诉`bind`在哪里找到我们即将创建的区文件。在`/etc/bind/named.conf.local`中，我们需要在文件末尾添加像以下的代码块：
- en: '[PRE32]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Notice that the zone is named `local.lan`, which is the same name I gave our
    domain in our DHCP server configuration. It’s best to keep everything consistent
    when we can. If you use a different domain name than the one I used in my example,
    make sure that it matches here as well. Within the block, we’re creating a `master`
    zone file and informing `bind` that it can find a file named `net.local.lan`,
    stored in the `/etc/bind` directory. This should be the only change we’ll need
    to make to the `named.conf.local` file; we’ll only create a single zone file (for
    the purpose of this section). Once you save this file, you’ll need to create the
    `/etc/bind/net.local.lan` file. So, go ahead and open that file in a text editor.
    Since we haven’t created it yet, it should be blank. Here’s an example of this
    zone file, completely filled out with some sample configuration:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到区域被命名为`local.lan`，这与我们在DHCP服务器配置中为我们的域指定的名称相同。在可能的情况下保持一致是最好的。如果您使用的域名与我在示例中使用的不同，请确保它在这里也匹配。在这个区块中，我们正在创建一个`master`区文件，并告知`bind`它可以在`/etc/bind`目录中找到一个名为`net.local.lan`的文件。这应该是我们需要对`named.conf.local`文件做的唯一更改；我们只会创建一个区文件（在本节中）。保存此文件后，您需要创建`/etc/bind/net.local.lan`文件。因此，请打开文本编辑器中的该文件。因为我们还没有创建它，所以它应该是空的。以下是这个区文件的示例，完全填写了一些样例配置：
- en: '[PRE33]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Feel free to edit this file to match your configuration. You can edit the list
    of hosts at the end of the file to match your hosts within your network, as the
    ones I included are merely examples. You should also ensure that the file matches
    the IP scheme for your network. Next, I’ll go over each line in order to give
    you a deeper understanding of what each line of this configuration file is responsible
    for:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 随意编辑此文件以匹配您的配置。您可以编辑文件末尾的主机列表，以匹配您网络中的主机，因为我包含的只是示例。您还应确保该文件与您网络的IP方案匹配。接下来，我将逐行介绍每行以帮助您更深入理解此配置文件中每行的责任：
- en: '[PRE34]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The **Time to Live** (**TTL**) determines how long a record may be cached within
    a DNS server. If you recall from earlier, where we practiced with the `dig` command,
    you saw that the second time you queried a domain with `dig`, the query time was
    less than the first time you ran the command. This is because your DNS server
    cached the result, but it won’t hold onto it forever. At some point, the lookup
    will expire. The next time you look up that same domain after the cached result
    has expired, your server will go out and fetch the result from the DNS server
    again. In my examples, I used Google’s DNS servers. That means at some point,
    your server will query those servers again once the record times out.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**生存时间**（**TTL**）确定记录在DNS服务器中可以被缓存的时间长度。如果您回忆一下之前我们用`dig`命令练习时，您会看到第二次查询同一域名时，查询时间比第一次运行命令时少。这是因为您的DNS服务器缓存了结果，但它不会永远保留它。在某个时刻，查找将会过期。在缓存的结果过期后再次查找同一域名时，您的服务器将会再次从DNS服务器获取结果。在我的示例中，我使用了Google的DNS服务器。这意味着在某个时候，您的服务器将会在记录过期后再次向这些服务器查询。'
- en: 'With the **Start of Authority** (**SOA**) line, we’re establishing that our
    DNS server is authoritative over the `local.lan` domain:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**授权开始**（**SOA**）行，我们确定我们的DNS服务器对`local.lan`域具有权威性：
- en: '[PRE35]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: We also set `hostmaster@local.lan` as the email address of the responsible party
    for this server, but we enter it here in a different format for `bind` (`hostmaster.local.lan`).
    This is obviously a fake address, but for the purposes of an internal DNS server,
    its validity is of no concern.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将`hostmaster@local.lan`设置为该服务器的责任方的电子邮件地址，但我们在这里以不同的格式输入它，以便`bind`使用（`hostmaster.local.lan`）。显然这是一个虚假的地址，但对于内部DNS服务器来说，它的有效性并不重要。
- en: 'Of all the lines of configuration within a zone file, `serial` is by far the
    one that will frustrate us the most:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在区域文件的所有配置行中，`serial`绝对是最让我们头疼的：
- en: '[PRE36]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This is because it’s not enough to simply update the zone file any time we make
    a change to it (change an IP address, add or remove a host, and so on); we also
    need to remember to increase the serial number by at least one. If we don’t, `bind`
    won’t be aware that we’ve made any changes, as it will look at the serial number
    before the rest of the file.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为仅仅在我们对区域文件做任何更改时（更改IP地址、添加或删除主机等），更新区域文件是不够的；我们还需要记得至少递增一次序列号。如果我们不这样做，`bind`不会知道我们做了任何更改，因为它会首先查看序列号，然后再检查文件的其他部分。
- en: The problem with this is that you and I are both human, and we’re prone to forgetting
    things. I’ve forgotten to update `serial` many times and have become frustrated
    when the DNS server refused to resolve new hosts that were recently added. Once
    I remembered that I didn’t increment the serial number, the issue was resolved
    after I did. Therefore, it’s very important for you to remember that any time
    you make a change to any zone file, you’ll need to also increment the serial number.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的问题是你我都是人类，容易忘记事情。我多次忘记更新`serial`，并且当DNS服务器拒绝解析最近添加的新主机时，我感到非常沮丧。一旦我记得是因为没有递增序列号，问题就解决了。因此，你必须记住，每当你对任何区域文件进行更改时，都需要递增序列号。
- en: The format doesn’t really matter; I used `202208161`, which is simply the year,
    two-digit month, two-digit day, and an extra number to cover us if we make more
    than one change in a day (which can sometimes happen). As long as you increment
    the serial number by one every time you modify your zone file, you’ll be in good
    shape—regardless of what format you use. However, the sample format I gave here
    is actually quite common in the field.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 格式并不重要；我使用的是`202208161`，这只是年份、两位数的月份、两位数的日期，再加上一个额外的数字，以防我们在一天内做多次更改（这种情况有时会发生）。只要你每次修改区域文件时递增一次序列号，不管使用什么格式，你都会处于一个不错的状态。不过，我在这里给出的样本格式在业界其实非常常见。
- en: 'These values control how often secondary DNS servers will be instructed to
    check in for updates:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这些值控制着辅助DNS服务器多久会被指示检查更新：
- en: '[PRE37]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'With the example refresh value, we’re instructing any secondary DNS servers
    to check in every eight hours to see whether or not the zone records were updated.
    The `retry` field dictates how long the secondary will wait to check in, in case
    there was an error doing so the last time. The last two options in this section,
    `expire` and `minimum`, set the minimum and maximum age of the zone file, respectively.
    As I mentioned though, a full discussion of DNS with `bind` could constitute an
    entire book on its own. For now, I would just use these values until you have
    a reason to need to experiment. Here, we identify the name server itself:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 使用示例中的刷新值，我们指示任何辅助DNS服务器每八小时检查一次，看看是否更新了区域记录。`retry`字段规定了辅助服务器在发生错误时，应该等待多久再进行检查。该部分的最后两个选项，`expire`和`minimum`分别设置了区域文件的最小和最大寿命。正如我之前提到的，关于DNS与`bind`的全面讨论足以成书。现在，我建议你先使用这些值，直到你有理由进行更多的实验。在这里，我们标识了名称服务器本身：
- en: '[PRE38]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In my case, the server is called `hermes` and it’s located at `192.168.1.1`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下，服务器叫做`hermes`，位于`192.168.1.1`。
- en: 'Next, in our file, we’ll have several host entries to allow our resources to
    be resolved on our network by name:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在我们的文件中，我们会有几个主机条目，以便通过名称在网络上解析我们的资源：
- en: '[PRE39]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In that example, I have three hosts: `fileserv`, `mailserv`, and `web01`. In
    the example, these are all address records, which means that any time our server
    is asked to resolve one of these names, it will respond with the corresponding
    IP address. If our DNS server is set as a machine’s primary DNS server, it will
    respond with `192.168.1.3` when asked for `fileserv` and `192.168.1.7` when asked
    for `web01`.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我有三个主机：`fileserv`、`mailserv` 和 `web01`。在这个例子中，这些都是地址记录，意味着每当我们的服务器被请求解析这些名称时，它将返回相应的IP地址。如果我们的DNS服务器被设置为某台机器的主要DNS服务器，询问`fileserv`时，它将返回`192.168.1.3`，而询问`web01`时，它将返回`192.168.1.7`。
- en: 'The entry for `mail` is special as it is not an address record, but instead
    a **Canonical Name** (**CNAME**) record. In this case, it just points back to
    `mailserv`. Essentially, that’s what a CNAME record does: it creates a pointer
    to another resource. In this case, if someone tries to access a server named `mail`,
    we redirect them to the actual server `mailserv`. Notice that on the CNAME record,
    we’re not inputting an IP address, but instead the hostname of the resource it’s
    linked to.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`mail`条目是特殊的，因为它不是一个地址记录，而是一个**规范名称**（**CNAME**）记录。在这种情况下，它只是指向`mailserv`。本质上，CNAME记录的作用就是：它创建一个指向另一个资源的指针。在这种情况下，如果有人尝试访问名为`mail`的服务器，我们会将他们重定向到实际的`mailserv`服务器。请注意，在CNAME记录中，我们不是输入一个IP地址，而是输入它所链接资源的主机名。'
- en: In addition, you should also notice that I added the DNS server itself (`hermes`)
    to the file as well. You can see it on the second line above. I’ve found that
    if you don’t do this, the DNS server may complain and refuse to load the file.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还应该注意到我将DNS服务器本身（`hermes`）也添加到了文件中。你可以在上面的第二行看到它。我发现如果你不这样做，DNS服务器可能会抱怨并拒绝加载该文件。
- en: 'Now that we have a zone file in place, we should be able to start using it.
    First, we’ll need to restart the `bind9` service:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了区域文件，我们应该能够开始使用它。首先，我们需要重新启动`bind9`服务：
- en: '[PRE40]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'After the command finishes, check to see if there are any errors:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 命令执行完成后，检查是否有任何错误：
- en: '[PRE41]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You should see that the service state is `active (running)`, and in addition,
    you should see a line telling you that the serial number for your zone file was
    loaded. If you see that the service is not running and/or your zone file was not
    loaded, you should see specific information in the output while checking the status
    that should point you in the right direction. If not, you can also check the system
    log for clues regarding `bind` as well:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到服务状态为`active (running)`，此外，你还应该看到一行提示你区域文件的序列号已经加载。如果你看到服务未运行和/或区域文件未加载，检查状态时的输出应该会提供一些具体的信息，帮助你找到正确的方向。如果没有，你也可以查看系统日志，查找与`bind`相关的线索：
- en: '[PRE42]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The most common mistakes I’ve seen typically result from not being consistent
    within the file. For example, if you’re using a different IP scheme (such as `10.10.10.0/24`),
    you’ll want to make sure you didn’t forget to replace any of my example IP addresses
    with the proper scheme. Assuming that everything went smoothly, you should be
    able to point devices on your network to use this new DNS server. Make sure you
    test not only pinging devices local to your network but outside resources as well,
    such as websites. If the DNS server is working properly, it should resolve your
    local names, and then forward your requests to your external DNS servers (the
    two we set as forwarders) if it doesn’t find what you’re looking for locally.
    In addition, you’ll also want to make sure that port `53` (UDP) is open in your
    network’s firewall, which is the port that DNS uses. It’s extremely rare that
    this would be an issue, but I have seen it happen.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我见过的最常见的错误通常是因为文件中没有保持一致。例如，如果你使用的是不同的IP方案（如`10.10.10.0/24`），你需要确保没有忘记将我示例中的IP地址替换为适当的方案。如果一切顺利，你应该能够将网络中的设备指向使用这个新的DNS服务器。确保你不仅测试网络内设备的ping通情况，还要测试外部资源，比如网站。如果DNS服务器正常工作，它应该能够解析你本地的名称，然后如果它没有在本地找到所需的内容，它将把请求转发到外部DNS服务器（我们设置为转发器的两个服务器）。此外，你还需要确保网络防火墙中的`53`端口（UDP）是开放的，因为这是DNS使用的端口。这个问题极为罕见，但我确实见过它发生。
- en: 'To further test our DNS server, we can use the `dig` command, as we did before
    while we were experimenting with caching. Try `dig` against a local server on
    your LAN, as well as a DNS address that’s not located on your LAN (change the
    first domain to an actual domain on your LAN):'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步测试我们的 DNS 服务器，我们可以使用 `dig` 命令，正如我们在实验缓存时所做的那样。尝试对你本地局域网的服务器进行 `dig` 测试，以及对不在你局域网内的
    DNS 地址进行测试（将第一个域名更改为你局域网中的实际域名）：
- en: '[PRE43]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'You should see a response similar to the following:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到类似以下的响应：
- en: '[PRE44]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'What you’re looking for here is for both local resources and external websites
    to be resolvable now. You’ll probably notice that the DNS server used in the output
    will most likely show up as a localhost address, as it did in my output, and not
    the address of the DNS server we just set up. Actually, you can ignore this. Most
    distributions of Linux nowadays use local resolvers, which essentially cache DNS
    lookup results on your local computer. Your computer is still using the DNS server
    we set up, but there’s just an additional layer in between your computer and the
    DNS server. You can verify this with the following command:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你在这里要找的是本地资源和外部网站现在都能被解析。你可能会注意到，输出中使用的 DNS 服务器很可能会显示为本地地址，就像我的输出一样，而不是我们刚刚设置的
    DNS 服务器的地址。实际上，你可以忽略这个问题。如今，大多数 Linux 发行版使用本地解析器，它实际上会将 DNS 查询结果缓存到你的本地计算机中。你的计算机仍然在使用我们设置的
    DNS 服务器，只是你的计算机和 DNS 服务器之间多了一个额外的层级。你可以通过以下命令验证这一点：
- en: '[PRE45]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The output will show you the IP address of the actual server that’s responding
    to your DNS lookups.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将显示实际响应 DNS 查询的服务器的 IP 地址。
- en: Next, let’s take a look at the process of setting up an internet gateway, which
    is an option to consider if you don’t already have a router or firewall on your
    network that acts as a device between your internet connection and your internal
    network.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们来看看设置互联网网关的过程。如果你的网络上没有路由器或防火墙作为你互联网连接和内网之间的设备，这将是一个值得考虑的选项。
- en: Setting up an internet gateway
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置互联网网关
- en: As long as we’re setting up network services, we may as well go all the way
    and set up a router to act as a **gateway** for our network. A gateway within
    a network is the device you go through to route from one network to another. In
    this context, the **internet gateway** will be the device that sits between your
    local network and the device that provides your internet connection (such as a
    cable modem). The gateway in a typical network is usually a commercial router
    or firewall, which often also provides DNS, DHCP, and routing services as well.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经在设置网络服务，那不妨继续设置一个路由器作为我们网络的**网关**。在网络中，网关是你用来从一个网络路由到另一个网络的设备。在这种情况下，**互联网网关**将是你本地网络和提供互联网连接的设备（例如有线调制解调器）之间的设备。一个典型网络中的网关通常是一个商业路由器或防火墙，它通常还会提供
    DNS、DHCP 和路由服务。
- en: If you already have such a device on your network providing these services,
    then there’s nothing for you to do. You can skip this section. But if you’d like
    to set up your own router, then feel free to proceed.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的网络中已经有这样一个设备提供这些服务，那么你无需做任何操作。你可以跳过这一部分。但如果你想自己设置一个路由器，请继续进行。
- en: If you’d like to proceed and set up a router, then the first order of business
    is to decide which device on your network will serve that purpose. Often, administrators
    will build DNS, DHCP, and routing services all into the same server, so you can
    even use the same device you’ve used earlier to work through the DNS and DHCP
    examples for our purposes in this section. In order for a device to function as
    a gateway, it should have at least two network interfaces, one to your ISP device
    (such as a cable modem) and another interface connected to a network switch that
    your other servers will connect to. The interface connected to your ISP device
    should use DHCP, so it will obtain an IP address directly from your ISP. This
    interface may need a static IP with details provided from the ISP, if relevant.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想继续设置一个路由器，那么首先要做的就是决定网络中哪个设备将承担这个任务。通常，管理员会将 DNS、DHCP 和路由服务集成到同一台服务器上，所以你甚至可以使用之前用于处理
    DNS 和 DHCP 示例的相同设备来完成本节的任务。为了使设备作为网关，它应该至少有两个网络接口，一个连接到你的 ISP 设备（例如有线调制解调器），另一个接口连接到你的网络交换机，其他服务器将连接到该交换机。连接到
    ISP 设备的接口应该使用 DHCP，因此它将直接从 ISP 获得 IP 地址。如果相关的话，这个接口可能需要一个由 ISP 提供的静态 IP 地址。
- en: Depending on what kind of internet connection you have, Linux itself can likely
    replace whatever device your internet modem connects to. A good example of this
    is a cable modem that your office or home router may utilize. In this case, the
    modem provides your internet connection, and then your router allows other devices
    on your network to access it. In some cases, your modem and router may even be
    the same device. Therefore, depending on the hardware you have, this method of
    setting up your networking may or may not be efficient. But if you do have the
    hardware available, you’ll be able to manage the entire networking stack with
    Ubuntu Server quite easily.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你拥有的互联网连接类型，Linux本身可能可以替代你的互联网调制解调器所连接的任何设备。一个很好的例子是你办公室或家庭路由器可能使用的有线调制解调器。在这种情况下，调制解调器提供互联网连接，然后路由器允许你网络上的其他设备访问它。在某些情况下，你的调制解调器和路由器甚至可能是同一个设备。因此，根据你拥有的硬件，这种网络设置方法可能会有效或无效。但如果你有合适的硬件，你将能够轻松使用Ubuntu
    Server管理整个网络堆栈。
- en: Why might you want to create your own internet gateway? One potential reason
    is that it’s often the case that security patches aren’t provided for commercial
    routers and firewall devices. New vulnerabilities are discovered all the time,
    and if your router or firewall is no longer supported by the manufacturer, it
    may allow outside threats into your network. By setting up an internet gateway
    with Ubuntu, you’ll benefit from the regular updates that Canonical provides.
    As long as you’re using a version of Ubuntu that’s still supported (such as an
    LTS release, as is the case with Ubuntu 22.04), you’ll benefit from a more secure
    platform. If nothing else, a physical server that we can install Ubuntu on will
    usually have a more powerful CPU than a commercial device would have, which would
    mean that CPU bottlenecks slowing down network performance would be less likely
    to happen.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么你可能想要创建自己的互联网网关？一个潜在的原因是，商业路由器和防火墙设备通常不会提供安全补丁。新的漏洞总是不断被发现，如果你的路由器或防火墙不再得到制造商的支持，它可能会让外部威胁进入你的网络。通过使用Ubuntu搭建互联网网关，你将受益于Canonical提供的定期更新。只要你使用的Ubuntu版本仍然受到支持（例如Ubuntu
    22.04的LTS版本），你将享受到一个更安全的平台。如果没有其他原因，我们可以在其上安装Ubuntu的物理服务器通常比商业设备拥有更强大的CPU，这意味着由于CPU瓶颈导致的网络性能下降不太可能发生。
- en: Thankfully, setting up an internet gateway is easy. In fact, we’ll only need
    to execute a single command to set up routing between interfaces, which is technically
    all that’s required in order to set up an internet gateway. But before we get
    into that, it’s also important to keep in mind that if you do set up an internet
    gateway, you’ll need to pay special attention to security. The device that sits
    between your network and your modem will be a constant attack target, just like
    any other gateway device would be. When it comes to commercial routers, they’re
    also attacked constantly.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，设置互联网网关非常简单。实际上，我们只需要执行一个命令来设置接口之间的路由，这在技术上就是设置互联网网关所需要的全部内容。但在开始之前，同样需要记住的是，如果你设置了互联网网关，你需要特别注意安全。位于你的网络和调制解调器之间的设备将会成为一个持续的攻击目标，就像其他任何网关设备一样。当谈到商业路由器时，它们也会持续受到攻击。
- en: However, in most cases, they’ll have some sort of default security or firewall
    built in. In all honesty, the security features built into common routing equipment
    are extremely poor and most of them are easy to hack when someone wants to badly
    enough. The point is that these devices have some sort of security to begin with
    (regardless of how good or bad), whereas a custom internet gateway of your own
    won’t have any security at all until you add it.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在大多数情况下，它们都会内建某种默认的安全性或防火墙。坦率地说，常见路由设备中内置的安全功能非常差，而且当有人想要破解时，它们中的大多数都很容易被攻破。关键是，这些设备一开始就有某种安全措施（不论好坏），而你自建的互联网网关在你添加安全措施之前根本没有任何安全性。
- en: When you set up an internet gateway, you’ll want to pay special attention to
    setting up the firewall, restricting access to SSH, using very strong passwords,
    keeping up to date on security patches, and installing an authentication monitor
    such as `fail2ban`. We’ll get into those topics in *Chapter 21*, *Securing Your
    Server*. The reason I bring this up now, though, is that if you do set up an internet
    gateway, you’ll probably want to take a detour and read that chapter right away,
    just to make sure that you secure it properly.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 当你设置一个互联网网关时，你需要特别注意设置防火墙，限制SSH访问，使用非常强的密码，保持安全补丁的更新，并安装认证监控工具，如`fail2ban`。我们将在*第21章*《保护你的服务器》中深入探讨这些主题。不过，我之所以现在提到这个，是因为如果你设置了互联网网关，你可能想绕道立刻阅读该章节，以确保正确地保护它。
- en: 'Anyway, let’s move on. A proper internet gateway, as I’ve mentioned, will have
    two Ethernet ports. On the first, you’ll plug in your cable modem or internet
    device, and you’ll connect a switch to the second. By default though, routing
    between these interfaces will be disabled, so traffic won’t be able to move from
    one Ethernet port to the other. To rectify this, use the following command:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，我们继续。正如我之前提到的，一个合适的互联网网关会有两个以太网端口。在第一个端口，你将插入你的电缆调制解调器或互联网设备，第二个端口连接到交换机。不过，默认情况下，这些接口之间的路由是禁用的，所以流量不能从一个以太网端口流动到另一个。要解决这个问题，请使用以下命令：
- en: '[PRE46]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'That’s actually it. With that single command, you’ve just made your server
    into a router. However, that change will not survive a reboot. To make it permanent,
    open the `/etc/sysctl.conf` file in your editor:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 其实就这样。通过这一条命令，你就将服务器变成了路由器。然而，这个更改不会在重启后生效。要使其永久生效，请在编辑器中打开`/etc/sysctl.conf`文件：
- en: '[PRE47]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Look for the following line:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 查找以下行：
- en: '[PRE48]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Uncomment the line by removing the hash symbol in front of it, and save the
    file. With that change made, your server will allow routing between interfaces
    even after a reboot. Of all the topics we’ve covered in this chapter, that one
    was probably the simplest. However, I must remind you again to definitely secure
    your server if it’s your frontend device to the internet, as computer security
    students always enjoy practicing on a real-life Linux server. With good security
    practices, you’ll help ensure that they’ll leave you alone, or at least have a
    harder time breaking in.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 通过去掉行前的哈希符号来取消注释该行，并保存文件。做了这个更改后，即使重启后，服务器也将允许接口之间的路由。在本章中，我们讨论的所有主题中，这个可能是最简单的。然而，我再次提醒你，如果你的服务器是面向互联网的前端设备，务必确保它的安全，因为计算机安全的学生总喜欢在现实生活中的Linux服务器上练习。通过良好的安全措施，你能确保他们不会轻易攻击你，或者至少让他们更加难以突破。
- en: From here, all you should need to do is attach a network switch to your other
    network interface, and then you can attach your other wired Ethernet devices and
    wireless access point to the switch. Now, Ubuntu Server is managing your entire
    network!
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，你只需要将网络交换机连接到另一个网络接口，然后你就可以将其他有线以太网设备和无线接入点连接到交换机。现在，Ubuntu Server已经在管理你的整个网络！
- en: Summary
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored additional networking topics. We started off with
    some notes on planning an IP address scheme for your network so that you could
    create groups for the different types of nodes, such as servers and network equipment,
    and plan a pool of addresses for DHCP. We also worked through the process of setting
    up a DHCP and DNS server, which gives us additional flexibility when configuring
    the services we run on our network, such as when defining a custom IP scheme for
    DHCP, as well as giving us the ability to resolve the hostnames of devices on
    our network by name. We closed off this chapter with a discussion on setting up
    an internet gateway to serve as our internet-facing router.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了额外的网络主题。我们从规划网络的IP地址方案开始，这样你就可以为不同类型的节点（如服务器和网络设备）创建分组，并为DHCP规划地址池。我们还处理了设置DHCP和DNS服务器的过程，这为我们在配置网络服务时提供了额外的灵活性，例如在为DHCP定义自定义IP方案时，以及通过名称解析网络中设备的主机名。我们以讨论设置互联网网关作为面向互联网的路由器结束了本章内容。
- en: In the next chapter, we’ll take a look at sharing and transferring files over
    the network. This will include covering NFS and Samba shares, as well as using
    `scp`, `rsync`, and `sshfs`. Stay tuned!
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将讨论如何通过网络共享和传输文件。这将包括涵盖NFS和Samba共享，以及使用`scp`、`rsync`和`sshfs`。敬请期待！
- en: Further reading
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '8 Steps to Understanding IP Subnetting: [https://learnlinux.link/8-ip-sub](https://learnlinux.link/8-ip-sub)'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 IP 子网划分的 8 个步骤：[https://learnlinux.link/8-ip-sub](https://learnlinux.link/8-ip-sub)
- en: 'IP Subnet Calculator: [https://learnlinux.link/s-calc](https://learnlinux.link/s-calc)'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP 子网计算器：[https://learnlinux.link/s-calc](https://learnlinux.link/s-calc)
- en: Join our community on Discord
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord 空间，与作者及其他读者进行讨论：
- en: '[https://packt.link/LWaZ0](https://packt.link/LWaZ0)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/LWaZ0](https://packt.link/LWaZ0)'
- en: '![](img/QR_Code50046724-1955875156.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code50046724-1955875156.png)'
