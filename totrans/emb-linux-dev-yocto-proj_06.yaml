- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Detailing the Temporary Build Directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will try to understand the contents of the temporary build
    directory after image generation and see how BitBake uses it in the baking process.
    In addition, we will learn how some of these directories can assist us by acting
    as a valuable source of information when things do not work as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Detailing the build directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The build directory is a central information and artifact source for every
    Poky user. Its main directories are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conf`: This contains the configuration files we use to control Poky and BitBake.
    We first used this directory in [*Chapter 2*](B19361_02.xhtml#_idTextAnchor031),
    *Baking Our Poky-Based System*. It stores configuration files, such as `build/conf/local.conf`
    and `build/conf/bblayers.conf`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`downloads`: This stores all the downloaded artifacts. It works as a download
    cache. We talked about it in detail in [*Chapter 5*](B19361_05.xhtml#_idTextAnchor077),
    *Grasping the* *BitBake Tool*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sstate-cache`: This contains the snapshots of the packaged data. It is a cache
    mainly used to speed up the future build process, as it is used as a cache for
    the building process. This folder is detailed in [*Chapter 7*](B19361_07.xhtml#_idTextAnchor097),
    *Assimilating* *Packaging Support*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tmp`: This is the temporary build directory and the main focus of this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructing the build directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we learned about Poky’s inputs and outputs in abstract
    high-level detail. We already know that BitBake uses metadata to generate different
    types of artifacts, including images. Besides the generated artifacts, BitBake
    creates other content during this process, which may be used in several ways,
    dependent on our goals.
  prefs: []
  type: TYPE_NORMAL
- en: 'BitBake performs several tasks and continuously modifies the build directory
    during the build process. Therefore, we can understand it better by following
    the usual BitBake execution flow, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`build/download` directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build/tmp/work` directory. When the source code is ready, the required modifications
    are applied (for example, applying necessary patches and checking out the correct
    Git revision).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`./configure`) and building (for example, `make`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`make install`) in a staging directory under `build/tmp/work/<...>/image`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build/tmp/work/<...>/recipe-sysroot` and `build/tmp/work/<...>/recipe-sysroot-native`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.rpm`, `.ipk`, `.deb`, or `.tar`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Quality Assurance (QA) checks**: When building a recipe, the build system
    performs various QA checks on the output to ensure that common issues are detected
    and reported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the temporary build directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding the temporary build directory (`build/tmp`) is critical. The temporary
    build directory is created just after the build starts, and it’s essential for
    helping us identify why something didn’t behave as expected.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows the contents of the `build/tmp` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Contents of build/tmp](img/Figure_6.1_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – Contents of build/tmp
  prefs: []
  type: TYPE_NORMAL
- en: 'The most critical directories found within it are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`deploy`: This contains the build products, such as images, binary packages,
    and SDK installers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sysroots-components`: This contains a representation of `recipes-sysroot`
    and `recipes-sysroot-native`, which allows BitBake to know where each component
    is installed. This is used to create recipe-specific `sysroots` during the build.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sysroots-uninative`: This includes `glibc` (a C library), which is used when
    native utilities are generated. This, in turn, improves the reuse of shared state
    artifacts across different host distributions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`work`: This contains the working source code, a task’s configuration, execution
    logs, and the contents of generated packages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`work-shared`: This is a `work` directory used for sharing the source code
    with multiple recipes. `work-shared` is only used by a subset of recipes, for
    example, `linux-yocto` and `gcc`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the work directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `build/tmp/work` directory is organized by architecture. For example, when
    working with the `qemux86-64` machine, we have the following four directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – The contents of the build/tmp/work directory](img/Figure_6.2_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – The contents of the `build/tmp/work` directory
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 6**.2* shows an example of possible directories under `build/tmp/work`
    for an `x86-64` host and a `qemux86-64` target. They are architecture- and machine-dependent,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`all-poky-linux`: This directory contains the working build directories for
    the architecture-agnostic packages. These are mostly scripts or interpreted language-based
    packages, for example, Perl scripts and Python scripts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`core2-64-poky-linux`: This directory contains the working build directories
    for the packages common to `x86-64`-based targets using the optimization tuned
    for `core2-64`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qemux86_64-poky-linux`: This directory contains the working build directories
    for packages specific to the `qemux86-64` machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x86_64-linux`: This directory holds the working build directories for the
    packages that are targeted to run on the build host machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This componentized structure is necessary to allow building system images and
    packages for multiple machines and architectures within one `build` directory
    without conflicts. The target machine we will use is `qemux86-64`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `build/tmp/work` directory is useful when checking for misbehavior or building
    failures. Its contents are organized in sub-directories following this pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – The pattern used in sub-directories of the build/tmp/work directory](img/Figure_6.3_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – The pattern used in sub-directories of the build/tmp/work directory
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the directories under the tree shown in *Figure 6**.3* are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<sources>`: This is extracted source code of the software to be built. The
    `WORKDIR` variable points to this directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image`: This contains the files installed by the recipe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package`: The extracted contents of output packages are stored here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`packages-split`: The contents of output packages, extracted and split into
    sub-directories, are stored here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`temp`: This stores BitBake’s task code and execution logs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: We can automatically remove the `work` directory after each recipe compilation
    cycle to reduce disk usage, adding `INHERIT += "rm_work"` in the `build/conf/local.conf`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The structure of the `work` directory is the same for all architectures. For
    every recipe, a directory with the recipe name is created. Taking the machine-specific
    `work` directory and using the `sysvinit-inittab` recipe as an example, we see
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Content of build/tmp/work/core2-64-poky-linux/pm-utils/1.4.1-r1/](img/Figure_6.4_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Content of build/tmp/work/core2-64-poky-linux/pm-utils/1.4.1-r1/
  prefs: []
  type: TYPE_NORMAL
- en: The `sysvinit-inittab` recipe is an excellent example, as it is machine-specific.
    This recipe contains the `inittab` file that defines the serial console to spawn
    the login process, which varies from machine to machine.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The build system uses the directories shown in the preceding figure that are
    not detailed here. Therefore, you should not need to work with them, except if
    you are working on build tool development.
  prefs: []
  type: TYPE_NORMAL
- en: The `work` directory is handy for debugging purposes; we cover this in [*Chapter
    10*](B19361_10.xhtml#_idTextAnchor129), *Debugging with the* *Yocto Project*.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the sysroot directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `sysroot` directory plays a critical role in the Yocto Project. It creates
    an individual and isolated environment for each recipe. This environment, set
    for each recipe, is essential to ensure reproducibility and avoid contamination
    with the host machine’s packages.
  prefs: []
  type: TYPE_NORMAL
- en: After we build the `procps` recipe, version `3.3.17`, we get two sets of `sysroot`
    directories – `recipes-sysroot` and `recipes-sysroot-native`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside each `sysroot` set, there is a sub-directory called `sysroot-provides`.
    This directory lists the packages installed on each respective `sysroot`. Following
    is the `recipe-sysroot` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Content of the recipe-sysroot directory under build/tmp/work
    for recipe procps](img/Figure_6.5_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Content of the recipe-sysroot directory under build/tmp/work for
    recipe procps
  prefs: []
  type: TYPE_NORMAL
- en: 'The `recipe-sysroot-native` directory includes the build dependencies used
    on the host system during the build process. It encompasses the compiler, linker,
    tools, and more. At the same time, the `recipe-sysroot` directory has the libraries
    and headers used in the target code. The following figure shows the `recipe-sysroot-native`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Content of the recipe-sysroot-native directory under build/tmp/work
    for recipe procps](img/Figure_6.6_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Content of the recipe-sysroot-native directory under build/tmp/work
    for recipe procps
  prefs: []
  type: TYPE_NORMAL
- en: When we see a missing header or a link failure, we must double-check whether
    our `sysroot` directory (target and host) contents are correct.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the contents of the temporary build directory after
    image generation. We saw how BitBake uses it during the baking process.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will better understand how packaging is done in Poky,
    how to use package feeds, the **Package Revision** (**PR**) service, and how they
    may help our product maintenance.
  prefs: []
  type: TYPE_NORMAL
