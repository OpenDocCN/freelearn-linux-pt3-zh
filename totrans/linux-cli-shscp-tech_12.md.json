["```\nfunction_name () {\n<commands>\n}\n```", "```\nfunction function_name {\n<commands>\n}\n```", "```\n#!/bin/bash\n# Hello World done by a function\nfunction HelloWorld {\n    echo Hello World!\n}\nHelloWorld_alternate () {\n    echo Hello World!\n}\n#now we call the functions\nHelloWorld\nHelloWorld_alternate\n```", "```\ndemo@cli1:~/scripting$ bash functions.sh \nHello World!\nHello World!\n```", "```\n#!/bin/bash\nfunction PrintHeader {\n    echo -----------------------\n    echo Header of some sort\n    echo -----------------------\n}\necho In order to show how this looks like\necho we are going to print a header\nPrintHeader\necho And once again\nPrintHeader\necho That was it.\ndemo@cli1:~/scripting$ bash function.sh \nIn order to show how this looks like\nwe are going to print a header\n-----------------------\nHeader of some sort\n-----------------------\nAnd once again\n-----------------------\nHeader of some sort\n-----------------------\nThat was it.\n```", "```\n#!/bin/bash\n#passing arguments to a function\nfunction output {\n     echo Parameters you passed are $1 and $2\n}\noutput First Second\n```", "```\ndemo@cli1:~/scripting$ bash functionarg.sh \nParameters you passed are First and Second\n```", "```\n#!/bin/bash\n#passing arguments to a function\nfunction output {\n    echo Parameters you passed are $1 and $2\n}\n#we are going to take input arguments of the script itself and #reverse them\noutput $2 $1\n```", "```\ndemo@cli1:~/scripting$ bash functionarg2.sh First Second\nParameters you passed are Second and First\n```", "```\n#!/bin/bash\n#passing arguments to a function\nfunction output {\n    echo Parameters you passed are $1 and $2\n}\n#we are going to ignore input parameters\noutput Hardcoded Variables\n```", "```\ndemo@cli1:~/scripting$ bash functionarg3sh First Second\nParameters you passed are Hardcoded and Variables\n```", "```\ndemo@cli1:~/scripting$ a=1\ndemo@cli1:~/scripting$ b=2\ndemo@cli1:~/scripting$ echo $a+$b\n1+2\ndemo@cli1:~/scripting$ echo $(($a+$b))\n3\n```", "```\n#!/bin/bash\n#Doing some maths\nfunction simplemath {\nadd=$(($1+$2))\necho $add is the result of addition\n}\n#we are going to take input arguments and pass them all the way\nsimplemath $1 $2\n```", "```\n#!/bin/bash\n# First we define global variable\n# Value of this variable should be visible in the entire script\nVAR1=\"Global variable\"\nFunction func {\n# Now we define local variable with the same name\n# as the global one. \nlocal VAR1=\"Local variable\"\n#we then output the value inside the function\necho Inside the function variable has the value of: $VAR1 \\\n}\necho In the main script before function is executed variable \\\nhas the value of: $VAR1\necho Now calling the function\nfunc\n# Value of the global variable shouldn't change\necho returned from function\necho In the main script after function is executed value is: \\\n$VAR1\n```", "```\ndemo@cli1:~/scripting$ bash funcglobal.sh\nIn the main script before function is executed variable has the value of: Global variable\nNow calling the function\nInside the function variable has the value of: Local variable\nreturned from function\nIn the main script after function is executed value is: Global variable\n```", "```\n#!/bin/bash\n# We are not defining the value for our variable in the global #block\nfunction func {\n# Now we define local variable that is not defined globally\n# as the global one. \nlocal VAR1=\"Local variable\"\n#we then output the value inside the function\necho Inside the function variable has the value of: $VAR1\n}\necho In the main script before function is executed undefined \\\nvariable has the value of: $VAR1\necho Now calling the function\nfunc\n# Value of the global variable shouldn't change\necho returned from function\necho In the main script after function is executed undefined \\\nvalue is actually: $VAR1 \n```", "```\ndemo@cli1:~/scripting$ bash funcglobal1.sh \nIn the main script before function is executed undefined variable has the value of:\nNow calling the function\nInside the function variable has the value of: Local variable\nreturned from function\nIn the main script after function is executed undefined value is actually:\n```", "```\n#!/bin/bash\n#Doing some string adding inside a function and returning #values\n#function takes two strings and returns them concatenated \nfunction concatenate {\nRESULT=$1$2\n}\n# calling the function with hardcoded strings\nconcatenate \"First \" \"and second\"\necho $RESULT\n```", "```\n#!/bin/bash\n#Doing some string adding inside a function and returning \\\nvalues\n#function takes two strings and returns them concatenated \nfunction concatenate {\nRESULT=$1$2\n}\nconcatenate \"First \" \"and second\"\n[ $? -eq 0 ] && echo $RESULT || echo Function did not finish!\n```", "```\n#!/bin/bash\n#simple adding of two numbers\n#function takes two numbers and returns result of addition\nfunction simpleadd {\n    local RESULT=$(($1+$2))\n    return $RESULT\n}\n#we are going to hardcode two numbers\nsimpleadd 4 5 \necho $?\n```", "```\n#!/bin/bash\n#exiting from a function before function finishes\nfunction never {\necho This function has two statements, one will never be \\\nprinted. \nexit\necho This is the message that will never print\n}\n#here we run the function\nnever\n```", "```\ndemo@cli1:~/scripting$ bash funcreturn3.sh \nThis function has two statements, one will never be printed.\n```", "```\n#!/bin/bash\n#first we are going to output some environment variables and #define a few of our own\necho Shell level before we include $SHLVL\necho PWD value before include $PWD\nTESTVAR='main'\necho Shell level after include $SHLVL\necho PWD value after include $PWD\necho Variable value after include $TESTVAR\n```", "```\ndemo@cli1:~/includes$ bash main.sh \nShell level before include 2\nPWD value before include /home/demo/includes\nShell level after include 2\nPWD value after include /home/demo/includes\nVariable value after include main\n```", "```\necho Inside included file Shell level is $SHLVL\necho Inside included PWD is $PWD\necho Before we changed it variable had a value of: $TESTVAR\nTESTVAR='AUX'\necho After we changed it variable has a value of: $TESTVAR\n```", "```\n#!/bin/bash\n#first we are going to output some environment variables and #define a few of our own\necho Shell level before we include $SHLVL\necho PWD value before include $PWD\nTESTVAR='main'\nsource auxscript.sh\necho Shell level after include $SHLVL\necho PWD value after include $PWD\necho Variable value after include $TESTVAR\n```", "```\ndemo@cli1:~/includes$ bash main.sh \nShell level before include 2\nPWD value before include /home/demo/includes\nInside included file Shell level is 2\nInside included PWD is /home/demo/includes\nBefore we changed it variable had a value of: main\nAfter we changed it variable has a value of: AUX\nShell level after include 2\nPWD value after include /home/demo/includes\nVariable value after include AUX\n```", "```\n#!/bin/bash\n#first we are going to output some environment variables and #define a few of our own\necho Shell level before include $SHLVL\necho PWD value before include $PWD\nTESTVAR='main'\nbash auxscript.sh\necho Shell level after include $SHLVL\necho PWD value after include $PWD\necho Variable value after include $TESTVAR\n```", "```\ndemo@cli1:~/includes$ bash mainexec.sh \nShell level before include 2\nPWD value before include /home/demo/includes\nInside included file Shell level is 3\nInside included PWD is /home/demo/includes\nBefore we changed it variable had a value of:\nAfter we changed it variable has a value of: AUX\nShell level after include 2\nPWD value after include /home/demo/includes\nVariable value after include main\n```", "```\n#!/bin/bash\n#shell script that automates common tasks\nfunction rsyn {\nrsync -avzh $1 $2 \n}\nfunction usage {\necho In order to use this script you can:\necho \"$0 copy <source> <destination> to copy files from source \\\nto destination\"\necho \"$0 newuser <name> to createuser with the username \\\n<username>\"\necho \"$0 group <username> <group> to add user to a group\"\necho \"$0 weather to check local weather\"\necho \"$0 weather <city> to check weather in some city on earth\"\necho \"$0 help for this help\"\n}\nif [ \"$1\" != \"\" ] \n            Then\n    case $1 in\n         help)\n            Usage\n            Exit\n            ;;\n        copy)\n                 if [ \"$2\" != \"\" && \"$3\" != \"\" ]\n                 then \n            rsyn $2 $3\n          fi\n            ;;\n\n              group)\n            if [ \"$2\" != \"\" && \"$3\" != \"\" ]\n                  then \n                       usermod -a -G $3 $2\n            fi\n                                        ;;\n              newuser) \n                  if [ \"$2\" != \"\" ]\n                  then\n                               useradd $2\n                          fi\n                          ;;\n               weather)\n                  if [ \"$2\" != \"\" ]\n                          then \n                                curl wttr.in/$2\n                          else \n                                curl wttr.in\n                  fi\n                  ;;\n               *)\n            echo \"ERROR: unknown parameter $1\\\"\"\n            usage\n            exit 1\n            ;;\n    esac\n                 else\n            Usage\nfi\n```"]