["```\nSet-Alias -Name processes -Value Get-Process\n```", "```\nGet-process |\nGet-member\n```", "```\n(Get-Process -id 4514).PrivilegedProcessorTime\n```", "```\nSet-Alias -Name processes -Value Get-Process\n(get-process -id (processes).id).privilegedprocessortime\n```", "```\n(Get-ChildItem -Path c:\\scratch\\ | Get-Member).TypeName | Select-Object -Unique\n```", "```\nGet-Help Select-Object\n```", "```\nGet-Process | Select-Object Name, Id\n```", "```\nGet-Process | Select-Object Name, Id | Get-Member\n```", "```\n1,2,3,4,5,6,7,8 | Select-Object -First 2 -skip 1\n```", "```\nGet-Process | Sort-Object -Property ws\n```", "```\nGet-Process | Sort-Object -Property WS -Descending\n```", "```\nGet-Process | Sort-Object -Property SI, WS -Descending\n```", "```\nGet-Process | Sort-Object CPU -Descending | Select-Object -First 5\n```", "```\nGet-Process | Where-Object -Property CPU -gt -Value 1\n```", "```\nGet-Process | where CPU -gt 1\n```", "```\nGet-Process | Where-Object ProcessName -eq pwsh\nGet-Process | Where-Object ProcessName -like pwsh\nGet-Process | Where-Object ProcessName -like *pwsh\nGet-Process | Where-Object ProcessName -like *wsh\nGet-Process | Where-Object ProcessName -contains pwsh\nGet-Process | Where-Object ProcessName -in \"pwsh\", \"bash\"\n```", "```\nGet-Process | Where-Object ProcessName -eq pwsh\n```", "```\nGet-Process | Where-Object -FilterScript {$PSItem.ProcessName -eq 'pwsh'}\n```", "```\nGet-Process | Where-Object -FilterScript {$PSItem.ProcessName -eq 'pwsh' -and $PSItem.CPU -gt 1}\n```", "```\nGet-Process | Where-Object -FilterScript {$PSItem.ProcessName -eq 'pwsh' -and CPU -gt 25}\n```", "```\nGet-Process | Where-Object -FilterScript {$PSItem.ProcessName -eq 'pwsh' -or 'bash'}\n```", "```\nGet-Process | Get-Member\n```", "```\nGet-Process | Where-Object -FilterScript {$_.ProcessName.Length -lt 5}\n```", "```\nGet-Process | Sort-Object -Property CPU -Descending | Where-Object CPU -gt 1\nGet-Process | Where-Object CPU -gt 1 | Sort-Object -Property CPU -Descending\n```", "```\nMeasure-Command {Get-Process | Sort-Object -Property CPU -Descending | Where-Object CPU -gt 1}\nMeasure-Command {Get-Process | Where-Object CPU -gt 1 | Sort-Object -Property CPU -Descending}\n```", "```\nGet-ChildItem myfiles | Foreach-Object -MemberName tostring\n```", "```\nGet-ChildItem myfiles | ForEach-Object -Process {$_.tostring()}\n```", "```\n('Powerhell').Insert(5, 'S')\n```", "```\n1..10 | Foreach-Object {Get-Random}\n```", "```\n1..10 | ForEach-Object {\n$_\nStart-sleep 1}\n```", "```\n1..10 | ForEach-Object -Parallel {\n$_\nStart-Sleep 1}\n```", "```\nGet-Process | Sort-Object -Property CPU\n```", "```\nGet-Help Sort-Object -Full\n```", "```\n-InputObject <System.Management.Automation.PSObject>\n        To sort objects, send them down the pipeline to `Sort-Object`. If you use the InputObject parameter to submit a collection of items, `Sort-Object` receives one object that represents the collection. Because one object cannot be sorted, `Sort-Object` returns the entire collection unchanged.\n        Required?                    false\n        Position?                    named\n        Default value                None\n        Accept pipeline input?       True (ByValue)\n        Accept wildcard characters?  false\n```", "```\n'myfiles' | Get-ChildItem\n```", "```\nGet-Random | Stop-Process\n```", "```\nNew-Object -TypeName PSObject -Property @{'Id' = (Get-Random)} | Stop-Process -WhatIf\n```", "```\nGet-Random | Stop-Process\n```", "```\nStop-Process -Id (Get-Random)\n```", "```\nTrace-Command -Name ParameterBinding -Expression {New-Object -TypeName PSObject -Property @{'Id' = (Get-Random)} | Stop-Process -WhatIf} -PSHost\n```", "```\n    'bobscomputer' | Stop-Computer -WhatIf\n    ```"]