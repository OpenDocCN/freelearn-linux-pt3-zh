- en: 20\. Using NFS on Ubuntu 23.04 to Share Files with Remote Systems
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu provides two mechanisms for sharing files and folders with other systems
    on a network. One approach is to use a technology called Samba. Samba is based
    on Microsoft Windows Folder Sharing and allows Linux systems to make folders accessible
    to Windows systems and access Windows-based folder shares from Linux. This approach
    can also be used to share folders between other Linux and UNIX-based systems if
    they have Samba support installed and configured. This is the most popular approach
    to sharing folders in heterogeneous network environments. Folder sharing using
    Samba is covered in [“Sharing Files between Ubuntu 23.04 and Windows with Samba”](Samba_File_Sharing.xhtml#_idTextAnchor340).
  prefs: []
  type: TYPE_NORMAL
- en: Another option, explicitly targeted at sharing folders between Linux and UNIX-based
    systems, uses Network File System (NFS). NFS allows the file system on one Linux
    computer to be accessed over a network connection by another Linux or UNIX system.
    NFS was originally developed by Sun Microsystems (now part of Oracle Corporation)
    in the 1980s and remains the standard mechanism for sharing remote Linux/UNIX
    file systems.
  prefs: []
  type: TYPE_NORMAL
- en: NFS is very different from the Windows SMB resource-sharing technology used
    by Samba. This chapter will look at the network-based sharing of folders between
    Ubuntu and other UNIX/Linux-based systems using NFS.
  prefs: []
  type: TYPE_NORMAL
- en: 20.1 Ensuring NFS Services are running on Ubuntu
  prefs: []
  type: TYPE_NORMAL
- en: The first task is to verify that the NFS services are installed and running
    on your Ubuntu system. This can be achieved from the command line or the Cockpit
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by installing the NFS service by running the following command from a
    terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: apt install nfs-kernel-server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, configure the service to automatically start at boot time:'
  prefs: []
  type: TYPE_NORMAL
- en: systemctl enable nfs-kernel-server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the service has been enabled, start it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: systemctl start nfs-kernel-server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 20.2 Configuring the Firewall to Allow NFS Traffic
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, the firewall needs to be configured to allow NFS traffic. If the Uncomplicated
    Firewall is enabled, run the following command to add a rule to allow NFS traffic:'
  prefs: []
  type: TYPE_NORMAL
- en: ufw allow nfs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If, on the other hand, you are using firewalld, run the following firewall-cmd
    commands where <zone> is replaced by the appropriate zone for your firewall and
    system configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: firewall-cmd --zone=<zone> --permanent --add-service=mountd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: firewall-cmd --zone=<zone> --permanent --add-service=nfs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: firewall-cmd --zone=<zone> --permanent --add-service=rpc-bind
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: firewall-cmd --reload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 20.3 Specifying the Folders to be Shared
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that NFS is running and the firewall has been configured, we need to specify
    which parts of the Ubuntu file system may be accessed by remote Linux or UNIX
    systems. These settings can be declared in the /etc/exports file, which must be
    modified to export the directories for remote access via NFS. The syntax for an
    export line in this file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: <export> <host1>(<options>) <host2>(<options>)...
  prefs: []
  type: TYPE_NORMAL
- en: 'In the above line, <export> is replaced by the directory to be exported, <host1>
    is the name or IP address of the system to which access is being granted, and
    <options> represents the restrictions that are to be imposed on that access (read-only,
    read-write, etc.). Multiple host and options entries may be placed on the same
    line if required. For example, the following line grants read-only permission
    to the /datafiles directory to a host with the IP address 192.168.2.38:'
  prefs: []
  type: TYPE_NORMAL
- en: /datafiles 192.168.2.38(ro,no_subtree_check)
  prefs: []
  type: TYPE_NORMAL
- en: 'The use of wildcards is permitted to apply an export to multiple hosts. For
    example, the following line permits read-write access to /home/demo to all external
    hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: /home/demo *(rw,no_subtree_check)
  prefs: []
  type: TYPE_NORMAL
- en: While most Linux distributions default to the recommended no_subtree_check setting,
    the Ubuntu implementation of NFS requires that either the no_subtree_check or
    subtree_check is included in all export directives.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this chapter, we will configure the /etc/exports file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: /tmp *(rw,sync,no_subtree_check)
  prefs: []
  type: TYPE_NORMAL
- en: /vol1 192.168.86.42(ro,sync,no_subtree_check)
  prefs: []
  type: TYPE_NORMAL
- en: 'Once configured, the table of exported file systems maintained by the NFS server
    needs to be updated with the latest /etc/exports settings using the exportfs command
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: exportfs -a
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is also possible to view the current share settings from the command line
    using the exportfs tool:'
  prefs: []
  type: TYPE_NORMAL
- en: exportfs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The above command will generate the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: /vol1 192.168.86.42
  prefs: []
  type: TYPE_NORMAL
- en: /tmp <world>
  prefs: []
  type: TYPE_NORMAL
- en: 20.4 Accessing Shared Folders
  prefs: []
  type: TYPE_NORMAL
- en: 'The shared folders may be accessed from a client system by mounting them manually
    from the command line. However, before attempting to mount a remote NFS folder,
    the nfs-common package must first be installed on the client system:'
  prefs: []
  type: TYPE_NORMAL
- en: apt install nfs-common
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To mount a remote folder from the command line, open a terminal window and
    create a directory where you would like the remote shared folder to be mounted:'
  prefs: []
  type: TYPE_NORMAL
- en: $ mkdir /home/demo/tmp
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, enter the command to mount the remote folder using either the IP address
    or hostname of the remote NFS server, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: $ sudo mount -t nfs 192.168.86.24:/tmp /home/demo/tmp
  prefs: []
  type: TYPE_NORMAL
- en: The remote /tmp folder will then be mounted on the local system. Once mounted,
    the /home/demo/tmp folder will contain the remote folder and all its contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Options may also be specified when mounting a remote NFS filesystem. The following
    command, for example, mounts the same folder but configures it to be read-only:'
  prefs: []
  type: TYPE_NORMAL
- en: $ sudo mount -t nfs -o ro 192.168.86.24:/tmp /home/demo/tmp
  prefs: []
  type: TYPE_NORMAL
- en: 20.5 Mounting an NFS Filesystem on System Startup
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to configure an Ubuntu system to automatically mount a
    remote file system each time it starts up by editing the /etc/fstab file. When
    loaded into an editor, it will likely resemble the following:'
  prefs: []
  type: TYPE_NORMAL
- en: /dev/disk/by-id/dm-uuid-LVM-Qv7p2RxcHOSG6RjnkgR21xkhaCQ9NC / ext4 defaults 0
    1
  prefs: []
  type: TYPE_NORMAL
- en: /boot was on /dev/nvme0n1p2 during curtin installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: /dev/disk/by-uuid/aa49b362-6c42-49a6-98ba-7a256a96b4b8 /boot ext4 defaults 0
    1
  prefs: []
  type: TYPE_NORMAL
- en: /boot/efi was on /dev/nvme0n1p1 during curtin installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: /dev/disk/by-uuid/576B-B5F5 /boot/efi vfat defaults 0 1
  prefs: []
  type: TYPE_NORMAL
- en: 'To mount, for example, a folder with the path /tmp, which resides on a system
    with the IP address 192.168.86.24 in the local folder with the path /home/demo/tmp
    (note that this folder must already exist), add the following line to the /etc/fstab
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.86.24:/tmp /home/demo/tmp nfs rw 0 0
  prefs: []
  type: TYPE_NORMAL
- en: Next time the system reboots, the /tmp folder on the remote system will be mounted
    on the local /home/demo/tmp mount point. All the files in the remote folder can
    then be accessed as if they reside on the local hard disk drive.
  prefs: []
  type: TYPE_NORMAL
- en: 20.6 Unmounting an NFS Mount Point
  prefs: []
  type: TYPE_NORMAL
- en: 'Once a remote file system is mounted using NFS, it can be unmounted using the
    umount command with the local mount point as the command-line argument. The following
    command, for example, will unmount our example filesystem mount point:'
  prefs: []
  type: TYPE_NORMAL
- en: $ sudo umount /home/demo/tmp
  prefs: []
  type: TYPE_NORMAL
- en: 20.7 Accessing NFS Filesystems in Cockpit
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to mounting a remote NFS file system on a client using the command
    line, it is also possible to perform mount operations from within the Cockpit
    web interface. Assuming that Cockpit has been installed and configured on the
    client system, log into the Cockpit interface from within a web browser and select
    the Storage option from the left-hand navigation panel. If the Storage option
    is not listed, the cockpit-storaged package will need to be installed:'
  prefs: []
  type: TYPE_NORMAL
- en: apt install cockpit-storaged
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: systemctl restart cockpit.socket
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the Cockpit service has restarted, log back into the Cockpit interface,
    at which point the Storage option should now be visible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once selected, the main storage page will include a section listing any currently
    mounted NFS file systems, as illustrated in [Figure 20-1](NFS_File_Sharing.xhtml#_idTextAnchor336):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/rhel_cockpit_nfs.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-1
  prefs: []
  type: TYPE_NORMAL
- en: 'To mount a remote filesystem, click on the ‘+’ button highlighted above and
    enter information about the remote NFS server and file system share together with
    the local mount point and any necessary options into the resulting dialog before
    clicking on the Add button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/rhel_cockpit_nfs_new.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-2
  prefs: []
  type: TYPE_NORMAL
- en: 'To modify, unmount or remove an NFS filesystem share, select the corresponding
    mount in the NFS Mounts list ([Figure 20-1](NFS_File_Sharing.xhtml#_idTextAnchor336)
    above) to display the page shown in [Figure 20-3](NFS_File_Sharing.xhtml#_idTextAnchor337)
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/rhel_cockpit_nfs_modify.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-3
  prefs: []
  type: TYPE_NORMAL
- en: Within this screen, perform tasks such as changing the server or mount points
    or unmounting the file system. For example, the Remove option unmounts the file
    system and deletes the entry from the /etc/fstab file so that it does not re-mount
    the next time the system reboots.
  prefs: []
  type: TYPE_NORMAL
- en: 20.8 Summary
  prefs: []
  type: TYPE_NORMAL
- en: The Network File System (NFS) is a client/server-based system, originally developed
    by Sun Microsystems, which provides a way for Linux and Unix systems to share
    filesystems over a network. NFS allows a client system to access and (subject
    to permissions) modify files located on a remote server as though those files
    are stored on a local filesystem. This chapter has provided an overview of NFS
    and outlined the options for configuring client and server systems using the command
    line or the Cockpit web interface.
  prefs: []
  type: TYPE_NORMAL
