["```\n(auditallow staff_sudo_t sysadm_t (process (transition)))\n```", "```\n    # yum install epel-release\n    # yum install ansible\n    ```", "```\n    # ssh-keygen\n    # scp ~/.ssh/id_rsa.pub rem1:/root/.ssh/authorized_keys\n    ```", "```\n    # ssh rem1 id\n    ```", "```\n    # cat /etc/ansible/hosts\n    rem1\n    ```", "```\n    all, reflecting all entries in /etc/ansible/hosts) to execute the tasks in the setup module. \n    ```", "```\n    packt_selinux/tasks/main.yml, which will host all the settings and definitions we want to apply when we assign the packt_selinux role to a system. The other directories are, for our brief introduction to Ansible, less relevant, but play an important role in making sufficiently modular roles.\n    ```", "```\n    ---\n    - name: Create /usr/share/selinux/custom directory\n       file:\n            path: /usr/share/selinux/custom\n            owner: root\n            group: root\n            mode: '0755'\n            state: directory\n    ```", "```\n    ---\n    - hosts: all \n      roles:\n            - packt_selinux\n    ```", "```\n    # ansible-playbook /etc/ansible/site.yml\n    ```", "```\n---\n- name: Create /usr/share/selinux/custom directory\n  file:\n        path: /usr/share/selinux/custom\n        owner: root\n        group: root\n        mode: '0755'\n        state: directory\n        setype: 'usr_t'\n        seuser: 'system_u'\n```", "```\n    - name: Upload test.cil file to /usr/share/selinux/custom\n      copy:\n            src: test.cil\n            dest: /usr/share/selinux/custom/test.cil\n            owner: root\n            group: root\n            mode: '0644'\n    ```", "```\n    - name: Check if test SELinux module is loaded\n      shell: /usr/sbin/semodule -l | grep -q ^test$\n      register: test_is_loaded\n      ignore_errors: True\n    ```", "```\n    - name: Load test.cil if not loaded yet\n      command: /usr/sbin/semodule -i /usr/share/selinux/custom/test.cil\n      when: test_is_loaded is failed\n    ```", "```\n    - name: Set SELinux to enforcing mode\n      selinux:\n              policy: targeted\n              state: enforcing\n    ```", "```\n    - name: Set httpd_builtin_scripting to true\n      seboolean:\n              name: httpd_builtin_scripting\n              state: yes\n    ```", "```\n    - name: Set the context for /srv/web\n      sefcontext:\n              target: '/srv/web(/.*)?'\n              setype: httpd_sys_content_t\n              state: present\n    ```", "```\n    - name: Set zoneminder_t as permissive domain\n      selinux_permissive:\n              name: zoneminder_t\n              permissive: true\n    ```", "```\n    - name: Map taylor's login to the unconfined_u user\n      selogin:\n              login: taylor\n              seuser: unconfined_u\n              state: present\n    ```", "```\n    - name: Set port 10122 to ssh_port_t\n      seport:\n              ports: 10122\n              proto: tcp\n              setype: ssh_port_t\n              state: present\n    ```", "```\n    # yum install https://repo.saltstack.com/py3/redhat/salt-py3-repo-latest.el8.noarch.rpm\n    ```", "```\n    master ~# yum install salt-master\n    remote ~# yum install salt-minion\n    ```", "```\n    remote ~# vim /etc/salt/minion\n    master: ppubssa3ed\n    ```", "```\n    master ~# systemctl start salt-master\n    remote ~# systemctl start salt-minion\n    ```", "```\n    master ~# salt-key -L\n    Accepted Keys:\n    Denied Keys:\n    Unaccepted Keys:\n    rem1.internal.genfic.local\n    Rejected Keys:\n    master ~# salt-key -a rem1.internal.genfic.local\n    The following keys are going to be accepted:\n    Unaccepted Keys:\n    rem1.internal.genfic.local\n    Proceed? [n/Y] y\n    Key for minion rem1.internal.genfic.local accepted.\n    ```", "```\n    master ~# salt '*' service.get_all\n    ```", "```\n    master ~# mkdir /srv/salt\n    master ~# vim /srv/salt/top.sls\n    base:\n      '*':\n        - packt_selinux\n    ```", "```\n    init.sls file is the main state file for this packt_selinux state. So, when SaltStack reads the top.sls file, it sees a reference to the packt_selinux state and then searches for the init.sls file inside this state.\n    ```", "```\n    master ~# salt '*' state.apply\n    ```", "```\n{%- set path = '/usr/share/selinux/custom/test.cil' %}\n{%- set context = 'system_u:object_r:usr_t:s0' %}\nset {{ path }} context:\n  cmd.run:\n    - name: chcon {{ context}} {{ path }}\n    - unless: test $(stat -c %C {{ path }}) == {{ context }}\npath and context) so that we do not need to iterate the path and context multiple times, and then use these variables in a cmd.run call.\n```", "```\nload test.cil:\n  selinux.module:\n    - name: test\n    - source: /usr/share/selinux/custom/test.cil\n    - install: True\n    - unless: \"semodule -l | grep -q ^test$\"\n```", "```\n    httpd_builtin_scription:\n      selinux.boolean:\n        - value: True\n    ```", "```\n    \"/srv/web(/.*)?\":\n      selinux.fcontext_policy_present:\n        - sel_type: httpd_sys_content_t\n    ```", "```\n    enforcing:\n      selinux.mode\n    ```", "```\n    tcp/10122:\n      selinux.port_policy_present:\n        - sel_type: ssh_port_t\n    ```", "```\n    # yum install https://yum.puppet.com/puppet6-release-el-8.noarch.rpm\n    master ~# yum install puppetserver pdk\n    remote ~# yum install puppet-agent\n    ```", "```\n    master ~# vim /etc/puppetlabs/puppet/puppet.conf\n    certname = ppubssa3ed.internal.genfic.local\n    server = ppubssa3ed.internal.genfic.local\n    environment = production\n    ```", "```\n    master ~# systemctl start puppetserver\n    ```", "```\n    remote ~# vim /etc/puppetlabs/puppet/puppet.conf\n    [main]\n    certname = rem1.internal.genfic.local\n    server = ppubssa3ed.internal.genfic.local\n    environment = production\n    runinterval = 1h\n    ```", "```\n    remote ~# systemctl start puppet\n    ```", "```\n    master ~# /opt/puppetlabs/bin/puppetserver ca list\n    Requested Certificates:\n      rem1.internal.genfic.local   (SHA256) ...\n    ```", "```\n    master ~# /opt/puppetlabs/bin/puppetserver ca sign --certname rem1.internal.genfic.local\n    Successfully signed certificate request for rem1.internal.genfic.local\n    ```", "```\n    remote ~# /opt/puppetlabs/bin/puppet agent --test\n    ```", "```\n    master ~# cd /etc/puppetlabs/code/modules\n    master ~# pdk new module packt_selinux --skip-interview\n    ```", "```\n    class packt_selinux {\n      file { \"/usr/share/selinux/custom\":\n        ensure => directory,\n        mode => \"0755\",\n      }\n    }\n    ```", "```\n    node 'rem1.internal.genfic.local' {\n      include packt_selinux\n    }\n    ```", "```\n    remote ~# puppet agent -t\n    ```", "```\nfile { 'selinux_custom_module_test':\n  path => \"/usr/share/selinux/custom/test.cil\",\n  ensure => file,\n  owner => \"root\",\n  group => \"root\",\n  source => \"puppet:///modules/packt_selinux/test.cil\",\n  require => File[\"/usr/share/selinux/custom\"],\n  seltype => \"usr_t\",\n}\n```", "```\nexec { '/usr/sbin/semodule -i /usr/share/selinux/custom/test.cil':\n  require => File['selinux_custom_module_test'],\n  unless => '/usr/sbin/semodule -l | grep -q ^test$',\n}\n```", "```\nmaster ~# /opt/puppetlabs/bin/puppet module install puppet-selinux\n```", "```\n    class { selinux:\n      mode => 'enforcing',\n      type => 'targeted',\n    }\n    ```", "```\n    selboolean { 'httpd_builtin_scripting':\n      value => off,\n    }\n    ```", "```\n    selinux::fcontext { '/srv/web(/.*)?':\n      seltype => 'httpd_sys_content_t',\n    }\n    ```", "```\n    selinux::fcontext::equivalence { '/srv/www':\n      ensure => 'present',\n      target => '/srv/web',\n    }\n    ```", "```\n    selinux::port { 'set_ssh_custom_port':\n      ensure => 'present',\n      seltype => 'ssh_port_t',\n      protocol => 'tcp',\n      port => 10122,\n    }\n    ```", "```\n    selinux::permissive { 'zoneminder_t':\n      ensure => 'present',\n    }\n    ```", "```\n    selmodule { 'vlock':\n      ensure => 'present',\n      selmoduledir => '/usr/share/selinux/custom',\n    }\n    ```", "```\nmaster ~# yum install chef-workstation-0.17.5-1.el7.x86_64.rpm\n```", "```\nmaster ~# yum install libX11-xcb libXcomposite libXcursor libXdamage nss gdk-pixbuf2 gtk3 libXScrnSaver alsa-lib git\n```", "```\nmaster ~$ chef -v\n```", "```\n    master ~# yum install chef-server-core-13.2.0-1.el7.x86_64.rpm\n    ```", "```\n    master ~# mkdir /var/opt/chef\n    ```", "```\n    master ~# chef-server-ctl reconfigure\n    ```", "```\n    master ~# chef-server-ctl user-create chefadmin Lisa McCarthy lisa@ppubssa3ed.internal.genfic.local pw4chef --filename /var/opt/chef/chefadmin.pem\n    ```", "```\n    master ~# chef-server-ctl org-create ppubssa3ed \"Packt Pub SSA 3rd Edition\" --association_user chefadmin --filename /var/opt/chef/ppubssa3ed-validator.pem\n    ```", "```\n    master ~$ mkdir chef\n    master ~$ cd chef\n    master ~$ git init\n    ```", "```\n    master ~$ git config --global user.email \"lisa@ppubssa3ed.internal.genfic.local\"\n    master ~$ git config --global user.name \"Lisa McCarthy\"\n    ```", "```\n    chefadmin.pem in our example) and adjust the configuration accordingly.\n    ```", "```\n    master ~$ knife ssl fetch\n    master ~$ knife ssl check\n    ```", "```\n    master ~$ git add -A\n    master ~$ git commit -m 'Chef configuration baseline'\n    ```", "```\n    metadata.rb and recipes/default.rb. The metadata.rb file contains information about the cookbook and, while it is not necessary for our example, it is sensible to edit and update this file immediately. Later, we will adjust this file to include dependency information toward other cookbooks.\n    ```", "```\n    master ~$ vim recipes/default.rb\n    directory '/usr/share/selinux/custom' do\n      owner 'root'\n      group 'root'\n      mode '0755'\n      action :create\n    end\n    ```", "```\n    master ~$ knife cookbook upload packt_selinux\n    ```", "```\n    master ~$ knife cookbook list\n    packt_selinux   0.1.0\n    ```", "```\n    master ~$ knife bootstrap rem1 --ssh-user root --node-name rem1\n    ```", "```\n    master ~$ knife node show rem1\n    ```", "```\n    chef-client binary executes either regularly (through a cron job or similar) or starts as a daemon.\n    ```", "```\n    chef-client should show how it found and applied the changes listed in the recipe.\n    ```", "```\nexecute 'set_selinux_custom_context' do\n  command '/usr/bin/chcon -t usr_t /usr/share/selinux/custom'\n  action :nothing\n  subscribes :run, 'directory[/usr/share/selinux/custom]', :immediately\nend\n```", "```\nmaster ~$ knife cookbook upload packt_selinux\n```", "```\ncookbook_file '/usr/share/selinux/custom/test.cil' do\n  source 'test.cil'\n  owner 'root'\n  group 'root'\n  mode '0755'\n  action :create\nend\nbash 'load_test_cil' do\n  code '/usr/sbin/semodule -i /usr/share/selinux/custom/test.cil'\n  not_if '/usr/sbin/semodule -l | grep -q ^test$'\n  only_if { ::File.exists?('/usr/share/selinux/custom/test.cil') }\nend\n```", "```\nmaster ~$ knife supermarket install selinux_policy\nmaster ~$ knife supermarket install selinux\nmaster ~$ knife cookbook upload selinux_policy\nmaster ~$ knife cookbook upload selinux\n```", "```\ndepends 'selinux_policy'\ndepends 'selinux'\n```", "```\n    selinux_state \"SELinux enforcing\" do\n      action :enforcing\n    end\n    ```", "```\n    selinux_policy_boolean 'httpd_builtin_scripting' do\n      value false\n    end\n    ```", "```\n    selinux_policy_port '10122' do\n      protocol 'tcp'\n      secontext 'ssh_port_t'\n    end\n    ```", "```\n    selinux_policy_fcontext '/srv/web(/.*)?' do\n      secontext 'httpd_sys_content_t'\n    end\n    ```", "```\n    selinux_policy_permissive 'zoneminder_t' do\n    end\n    ```"]