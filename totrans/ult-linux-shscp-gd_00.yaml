- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to *The Ultimate Linux Shell Scripting Guide!* This book, which is ideal
    for both Linux beginners and more advanced Linux administrators, will guide you
    through the shell script creation process. We’ll begin with basic command-line
    usage and will progress through more advanced concepts in every succeeding chapter.
    You’ll see how to build scripts that can help you automate repetitive administrative
    tasks, as well as many other cool things. We’ll primarily concentrate on `bash`
    scripting throughout most of the book. Later, we’ll show you how to make your
    scripts portable so that they can run on legacy Unix systems that can’t run `bash`.
    After chapters on shell script debugging and shell script security, we’ll wrap
    up with introductions to the Z Shell and PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is appropriate for anyone who needs to master the concepts of shell
    scripting. Linux beginners can benefit, because it can help them master the concepts
    that will be covered on the CompTIA Linux+/Linux Professional Institute exam.
    More advanced Linux administrators can benefit because it will show them the more
    advanced concepts that they need to build really useful, practical shell scripts.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Chapter 1*, *Getting Started with the Shell*, this chapter covers the basics
    of operating system shells that can be found on Linux and Unix-like systems. The
    reader will need to know these principles in order to understand principles that
    will be presented in later chapters.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 2*, *Interpreting Commands*, there are five things that an operating
    system shell will do for us. These include interpreting commands, setting variables,
    enabling pipelines, allowing input/output redirection, and allowing customization
    of the user’s working environment. In this chapter, we’ll look at how shells interpret
    a user’s commands.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 3*, *Understanding Variables and Pipelines*, in this chapter, we’ll
    look at the next two things that an operating system shell does for us, which
    is to allow us to set variables and use command pipelines. There’s not that much
    to say about either of these topics, which is why we’re combining them both into
    one chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 4*, *Understanding Input/Output Redirection*, in this chapter, we’ll
    look at how to send the text output of a command to somewhere other than the terminal,
    which is the default output device. We’ll then look at how to make a command bring
    in text from somewhere other than the keyboard, which is the default input device.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we’ll look at how to send error messages to somewhere other than the
    terminal.
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 5*, *Customizing the Environment*, in this chapter, we’ll look at
    the various configuration files for the various shell environments. We’ll look
    at how to customize these configuration files, and how to set certain environmental
    options from the command-line.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 6*, *Text Stream Filters – Part 1*, many times, an administrator will
    need to write a shell script that will retrieve text information from an external
    source, format it, and create a report. In this chapter, we’ll introduce the concept
    of text stream filters, which can help with this process. Also, knowing about
    these text stream filters can help you pass certain Linux certification exams,
    such as the LPI/Linux+ exam. We will then show you how to use several of these
    filters.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 7*, *Text Stream Filters – Part 2*, in this chapter, we’ll continue
    our exploration of text stream filters.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 8*, *Basic Shell Script Construction*, in this chapter, we’ll explain
    about the basic structure of a shell script, and will use some of the text stream
    filters from the previous chapters to create simple scripts. We’ll also look at
    some basic programming constructs that are common to all programming languages,
    and show you how to use them.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 9*, *Filtering Text with grep, sed, and Regular Expressions*, in this
    chapter, you’ll learn about the concept of regular expressions, and how to use
    them with grep and sed to filter or manipulate text. These techniques can not
    only help you find certain text, but can also help automate the creation of reports
    and the editing of multiple text files at once.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 10*, *Understanding Functions*, functions are an important part of
    every programming language, because they make it easy for a programmer to reuse
    a block of code in numerous programs, or in numerous places within one single
    program. The programmer can pass parameters to a function, have the function operate
    on those parameters, and pass back the results to the main program.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 11*, *Performing Mathematical Operations*, the various operating system
    shells all have means of performing mathematical operations either from the command-line,
    or from within a shell script. In this chapter, we’ll look at how to perform operations
    with both integer and floating point math.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 12*, *Automating Scripts with here Documents and expect*, although
    it’s easy to have a shell script pull data out of a separate text file, it’s sometimes
    handier to store the data within the shell script itself. We’ll do that using
    a “here” document. In this chapter, you’ll learn how to create and use “here”
    documents. You’ll also see how to automate certain scripts with the `expect` utility.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 13*, *Scripting with ImageMagick*, imageMagick is a text-mode program
    that is used to edit, manipulate, and view graphical image files. In this chapter,
    you’ll learn how to automate the processing of images by using ImageMagick commands
    within shell scripts.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 14*, *Using awk–Part 1*, this chapter covers `awk`, which is a tool
    that can extract specific text from text files, and automate the creation of reports
    and databases. Since awk is a full-blown programming language in its own right,
    we won’t be covering it in depth here. Instead, we’ll give you enough information
    so that you can create awk “one-liners” that can be used within shell scripts.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 15*, *Using awk–Part 2*, this is a continuation of the previous chapter,
    in which we’ll cover the more advanced concepts of scripting with awk.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 16*, *Creating User Interfaces with yad, dialog, and xdialog*, so
    far, we’ve only looked at shell scripts that run strictly from the command-line.
    And indeed, that’s how most people use them, and is what most people think about
    when they think about shell scripts. But, it’s also possible to create shell scripts
    that offer a user interface. In this chapter, we’ll use yad to create graphical
    user interfaces, and dialog to create ncurses-style interfaces.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 17*, *Using Shell Script Options with getopts*, often, an administrator
    will need to pass both arguments and options to a shell script. Passing arguments,
    the objects upon which a script will operate, is easy. To also pass options, which
    modify how the script will operate, requires another type of operator. In this
    chapter, you’ll learn how to use getopts to pass options to a script.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 18*, *Shell Scripting for Security Professionals*, in this chapter,
    you’ll learn how to either create shell scripts or search for existing shell scripts
    that can help security administrators perform their jobs. We’ll also look at how
    to modify or improve existing shell scripts to meet specific needs of security
    administrators.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 19*, *Shell Script Portability*, large organizations, such as large
    government agencies or large corporations, might have a diverse mix of Linux,
    Unix, and Unix-like machines. Sometimes, it’s handy to write shell scripts that
    can automatically detect the type of system on which they’re running, and run
    the appropriate code for each type of system. In this chapter, we’ll look at several
    methods for enhancing script portability.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 20*, *Shell Script Security*, scripting errors can cause a script
    to inadvertently cause the exposure of sensitive data, or to allow someone to
    perform unauthorized activities on a system. In this chapter, we’ll look at ways
    to help the reader write shell scripts that are as secure as they possibly can
    be.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 21*, *Debugging Shell Scripts*, shell scripts can have bugs, the same
    as with any other programming language. Sometimes, the bugs are easy to find,
    and sometimes they’re not. In this chapter, we’ll look at various methods that
    can help a busy administrator debug shell scripts that aren’t working properly.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 22*, *Introduction to Z Shell Scripting*, the Z Shell, or zsh, is
    an alternate shell that can be used in place of bash. It’s mainly used in the
    same manner as bash, but it also has enhancements that bash doesn’t have. In this
    chapter, we’ll look at these enhancements, and also at some scripting tricks that
    you can’t do with bash.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 23*, *Using PowerShell on Linux*, powerShell was created by Microsoft
    for use on Windows operating systems back in 2006\. In 2016, Microsoft announced
    that they had open-sourced PowerShell, and were making it available for Linux
    and macOS, as well as for Windows. In this chapter, we’ll look at how PowerShell
    can be beneficial for Linux administrators, how to install it, and how to use
    it.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the book begins with the very basics of Linux and Unix command-line usage,
    the reader really just needs to be comfortable with the idea of setting up VirtualBox
    and installing Linux, FreeBSD, and OpenIndiana virtual machines.
  prefs: []
  type: TYPE_NORMAL
- en: 'VirtualBox is a free download that you can get from here: https://www.virtualbox.org/'
  prefs: []
  type: TYPE_NORMAL
- en: To run VirtualBox, you’ll need a machine with a CPU that is capable of virtualization.
    Most modern CPUs have that capability, with the exception of certain Intel Core
    i3 and Core i5 models. (That’s because they lack the hardware acceleration that’s
    required for virtualization.) Also, you’ll have to ensure that virtualization
    is enabled in your computer’s BIOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the demos, we’ll be using Fedora, Debian, Ubuntu, FreeBSD, and OpenIndiana
    virtual machines. Here’s where you can download the installation images:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fedora: https://fedoraproject.org/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Debian: https://www.debian.org/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ubuntu: https://ubuntu.com/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'FreeBSD: https://www.freebsd.org/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OpenIndiana: https://openindiana.org/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In all cases, you’ll need to create a normal user account that has full sudo
    privileges. That happens automatically with Ubuntu and OpenIndiana during installation.
    With Debian and Fedora, that will happen automatically if you omit creating a
    root user password during installation.
  prefs: []
  type: TYPE_NORMAL
- en: For FreeBSD, things are a bit different. That’s because the FreeBSD installer
    will have you create a password for the root user, and `sudo` won’t be installed.
    So, here’s the procedure for installing FreeBSD.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you get to the installer section that has you create your own user account,
    you’ll see:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Login group is `your_username`. Invite `your_username` into other groups.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Respond by typing `wheel`, in order to add yourself to the `wheel` group.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: After the installation has completed, log into the root user account, using
    the password that you created during installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the `sudo` package by doing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure `sudo` so that members of the wheel group have full `sudo` privileges.
    Begin by entering the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Scroll down to where you see this line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the # and the leading blank space from in front of this line.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Save the file and exit.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Log out from the root user's account, and log back in with your own account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you need to perform an administrative command, you can now use `sudo`,
    as you would on any Linux distro.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll need to install `bash` on FreeBSD.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since bash doesn’t come installed on FreeBSD by default, you’ll need to install
    it yourself. Here’s the procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install bash with this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a symbolic line to the bash executable, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Download the example code files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The code bundle for the book is hosted on GitHub at https://github.com/PacktPublishing/The-Ultimate-Linux-Shell-Scripting-Guide.git.
    We also have other code bundles from our rich catalog of books and videos available
    at https://github.com/PacktPublishing/. Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://packt.link/gbp/9781835463574](https://packt.link/gbp/9781835463574).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    For example: “Add the new functions to the `/etc/bashrc` file.”'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see on
    the screen. For instance, words in menus or dialog boxes appear in the text like
    this. For example: “ First, let’s see how many processes are in either the **Running**
    state or the **Zombie** state.”'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: Email `feedback@packtpub.com` and mention the book’s
    title in the subject of your message. If you have questions about any aspect of
    this book, please email us at `questions@packtpub.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you reported this to us. Please visit http://www.packtpub.com/submit-errata,
    click **Submit Errata**, and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at `copyright@packtpub.com` with a
    link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit http://authors.packtpub.com.'
  prefs: []
  type: TYPE_NORMAL
- en: Leave a Review!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thank you for purchasing this book from Packt Publishing—we hope you enjoy it!
    Your feedback is invaluable and helps us improve and grow. Once you've completed
    reading it, please take a moment to leave an [Amazon review](https://packt.link/r/1835463576);
    it will only take a minute, but it makes a big difference for readers like you.
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code below to receive a free ebook of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/review.png)'
  prefs: []
  type: TYPE_IMG
- en: '[https://packt.link/NzOWQ](https://packt.link/NzOWQ)'
  prefs: []
  type: TYPE_NORMAL
- en: Download a free PDF copy of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for purchasing this book!
  prefs: []
  type: TYPE_NORMAL
- en: Do you like to read on the go but are unable to carry your print books everywhere?
  prefs: []
  type: TYPE_NORMAL
- en: Is your eBook purchase not compatible with the device of your choice?
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  prefs: []
  type: TYPE_NORMAL
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  prefs: []
  type: TYPE_NORMAL
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these simple steps to get the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Scan the QR code or visit the link below:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B21693_Free_PDF_QR.png)'
  prefs: []
  type: TYPE_IMG
- en: https://packt.link/free-ebook/9781835463574
  prefs: []
  type: TYPE_NORMAL
- en: Submit your proof of purchase.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it! We’ll send your free PDF and other benefits to your email directly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
