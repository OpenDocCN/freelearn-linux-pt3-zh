- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Hardware Discovery
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件发现
- en: Knowing how to find out what hardware an operating system runs on and what peripherals
    are attached is a necessary skill for all systems administrators – at the very
    least, every administrator needs to know how many CPU cores they have and how
    much memory there is to allocate resources to applications. In this chapter, we’ll
    learn how to retrieve and interpret information about CPUs, USB peripherals, and
    storage devices, using both the raw kernel interfaces and utilities to work with
    them. We will also cover tools specific to x86 machines with a SMBIOS/DMI interface.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 了解如何找出操作系统运行在哪些硬件上，以及有哪些外设连接，是所有系统管理员必须具备的技能——至少，每个管理员都需要知道有多少个CPU核心，以及可以分配给应用程序的内存有多少。在本章中，我们将学习如何使用原始内核接口和工具来检索并解释关于CPU、USB外设和存储设备的信息。我们还将介绍一些专门针对具有SMBIOS/DMI接口的x86机器的工具。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下内容：
- en: How to discover the number of CPUs, their model names, and features
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何发现CPU的数量、型号名称和特性
- en: How to discover PCI, USB, and SCSI peripherals
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何发现PCI、USB和SCSI外设
- en: How to use platform-specific tools to retrieve detailed hardware information
    from system firmware
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用特定平台的工具从系统固件中检索详细的硬件信息
- en: Discovering CPU model and features
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现CPU型号和特性
- en: The central processor is certainly one of the most important hardware components,
    and there are many reasons to find out detailed information about it. The CPU
    model name or number and frequency are the first things you would look at to find
    out the age and overall performance of a machine. However, there are more details
    that are often useful in practice. For example, the number of CPU cores is important
    to know if you run applications that support multiple worker threads or processes
    (such as `make -j2`). Trying to run more processes than there are CPUs may slow
    the application down because some of those processes end up waiting for an available
    CPU, so you may want to run fewer worker processes to avoid overloading the machine.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 中央处理器无疑是最重要的硬件组件之一，了解它的详细信息有很多原因。CPU的型号名称或编号和频率是你首先查看的内容，用来了解机器的使用年限和整体性能。然而，实际上还有更多的细节信息常常是有用的。例如，CPU核心的数量是很重要的，尤其是当你运行支持多个工作线程或进程的应用程序时（比如`make
    -j2`）。如果运行的进程数超过了CPU的数量，可能会导致应用程序变慢，因为一些进程最终需要等待可用的CPU。因此，你可能需要运行较少的工作进程，以避免过度加载机器。
- en: It’s also important to know whether your CPU supports specific acceleration
    technologies such as AES-NI or Intel QuickAssist. If they are available, some
    applications can perform much better if you enable support for those acceleration
    features.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 了解你的CPU是否支持特定的加速技术，如AES-NI或Intel QuickAssist也很重要。如果支持这些加速功能，启用后某些应用程序的性能可能会大幅提升。
- en: Feature discovery on different platforms
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不同平台上的特性发现
- en: One thing you should remember about CPU information discovery is that it’s largely
    a feature of the CPU itself rather than a feature of Linux. If a CPU has no way
    to report certain information, it may be difficult or even impossible to figure
    it out from the software.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要记住的一点是，关于CPU信息的发现，主要是CPU本身的特性，而不是Linux的功能。如果CPU无法报告某些信息，那么通过软件来查找这些信息可能会非常困难，甚至不可能。
- en: Many ARM and MIPS CPUs do not report their exact model names, so the only way
    to find them may be to just open the case and look at the chip.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 许多ARM和MIPS架构的CPU并不会报告它们的确切型号名称，因此唯一的办法可能就是打开机箱，查看芯片上的信息。
- en: For example, the popular Raspberry Pi 4 single-board computer uses an ARM Cortex
    A72 CPU, but it doesn’t tell you that.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，流行的树莓派4单板计算机使用的是ARM Cortex A72 CPU，但它并没有告诉你这一点。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We will focus on x86 CPUs made by AMD and Intel because they are still the most
    common CPUs outside of embedded system markets, and they have the most extensive
    feature-reporting functionality.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重点关注由AMD和Intel制造的x86架构CPU，因为它们仍然是嵌入式系统市场以外最常见的CPU，而且它们具有最广泛的特性报告功能。
- en: The /proc/cpuinfo file
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: /proc/cpuinfo 文件
- en: We discussed the `/proc` filesystem when we talked about process control in
    [*Chapter 4*](B18575_04.xhtml#_idTextAnchor059), *Processes and Process Control*.
    That filesystem is virtual – files under `/proc` aren’t present on any disk, and
    the kernel simply presents that information as if it were stored in files, according
    to the *everything is a file* principle of the Unix philosophy.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在[*第 4 章*](B18575_04.xhtml#_idTextAnchor059)《进程与进程控制》中讨论进程控制时，我们谈到了`/proc`文件系统。这个文件系统是虚拟的——`/proc`下的文件并不实际存在于磁盘上，内核只是根据Unix哲学中的“**一切皆文件**”原则，像存储在文件中一样呈现这些信息。
- en: Apart from information about running processes, the kernel also uses `/proc`
    for information about CPUs and memory. The file with CPU information is named
    `/proc/cpuinfo`, as we saw earlier.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 除了有关运行进程的信息外，内核还使用`/proc`来获取关于 CPU 和内存的信息。包含 CPU 信息的文件名为`/proc/cpuinfo`，正如我们之前所看到的。
- en: 'Now, let’s look at that file on an Intel machine:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下 Intel 机器上的那个文件：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Some information is obvious and needs no interpretation. The model is Intel
    Xeon L5630, its frequency is 2.13 GHz, and it has 12 kilobytes of cache. The reason
    why CPU vendor names are written in seemingly strange ways such as `GenuineIntel`
    and `AuthenticAMD` is that, internally, the vendor string is stored as three 32-bit
    values, which gives 12 bytes. Note how both `GenuineIntel` and `AuthenticAMD`
    are 12 characters long – they were chosen to fill all 12 bytes with printable
    ASCII characters to avoid issues with different interpretations of null bytes
    on different systems.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有些信息是显而易见的，不需要解释。型号是 Intel Xeon L5630，频率为 2.13 GHz，并且有 12 KB 的缓存。CPU 供应商名称看起来像`GenuineIntel`和`AuthenticAMD`，是因为内部供应商字符串是以三个
    32 位值存储的，共 12 字节。注意`GenuineIntel`和`AuthenticAMD`都恰好是 12 个字符——它们被选中填充这 12 字节，以避免不同系统上对空字节的不同解释问题。
- en: One field of note is `bogomips`. Its name hints at the **Million Instructions
    per Second** (**MIPS**) performance metric, but that value isn’t a useful indicator
    of overall performance. The Linux kernel uses it for internal calibration purposes,
    and you shouldn’t use it to compare the performance of different CPUs.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一个需要注意的字段是`bogomips`。它的名称暗示了**每秒百万条指令**（**MIPS**）的性能指标，但这个值并不是衡量整体性能的有用指标。Linux
    内核用它进行内部校准，你不应该用它来比较不同 CPU 的性能。
- en: The `flags` field has the highest information density and is the most difficult
    to interpret. A flag is simply a bit in the Flags register, and the meanings of
    those bits vary widely. Some of them aren’t even set in the hardware CPU, such
    as the hypervisor flag, which indicates that the system runs on a virtual machine
    (but its absence doesn’t mean anything, since not all hypervisors set it).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`flags`字段的信息密度最高，也是最难解读的。标志只是 Flags 寄存器中的一位，这些位的含义差异很大。有些标志甚至没有在硬件 CPU 中设置，例如，超管标志，它表示系统在虚拟机上运行（但其缺失并不意味着什么，因为并非所有超管都设置此标志）。'
- en: Many flags indicate whether a certain feature is present, although interpreting
    their nature and importance requires familiarity with the vendor’s terminology.
    For example, the Neon feature from the Raspberry Pi output is a set of **Single
    Instruction, Multiple Data** (**SIMD**) instructions for ARM CPUs, comparable
    with Intel’s SSE, which is often used in multimedia and scientific applications.
    When in doubt, consult the CPU vendor documentation.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 许多标志指示是否存在某个特性，虽然解读它们的性质和重要性需要熟悉供应商的术语。例如，来自 Raspberry Pi 输出的 Neon 特性是一组适用于
    ARM CPU 的**单指令多数据**（**SIMD**）指令，与 Intel 的 SSE 相当，常用于多媒体和科学应用。当不确定时，请查阅 CPU 供应商文档。
- en: Multi-processor systems
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多处理器系统
- en: Most CPUs on the market today include multiple CPU cores, and server mainboards
    often have multiple sockets. The `cpuinfo` file includes all information necessary
    to figure out the CPU socket and core layout, but there are caveats.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 市面上大多数 CPU 都包含多个 CPU 核心，而服务器主板通常有多个插槽。`cpuinfo`文件包含了确定 CPU 插槽和核心布局所需的所有信息，但也有一些注意事项。
- en: 'The field you should look at to determine the number of CPU sockets is `physical
    id`. Note that `physical id` values aren’t always consecutive, so you can’t just
    look at the maximum value and should consider all the values present. You can
    find unique IDs by piping the `cpuinfo` file through the `sort` and `uniq` commands:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该查看的字段以确定 CPU 插槽数量是`physical id`。注意，`physical id`值并不总是连续的，因此你不能仅仅查看最大值，而应该考虑所有存在的值。你可以通过将`cpuinfo`文件通过`sort`和`uniq`命令管道处理来查找唯一的
    ID：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In virtual machines running on x86 hardware, all CPUs that the hypervisor presents
    to them will show up as if they were in different physical sockets. For example,
    if you have a hypervisor host with a single quad-core CPU and create a virtual
    machine with two virtual CPUs, it will look like two single-core CPUs in different
    sockets.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行在x86硬件上的虚拟机中，所有超管程序呈现给它们的CPU都会显示得像是在不同的物理插槽中。例如，如果你有一台主机，配备单个四核CPU，并创建了一个有两个虚拟CPU的虚拟机，它会看起来像是两个单核CPU位于不同的插槽中。
- en: On many non-x86 architectures, such as ARM, all CPUs will look as if they are
    different physical CPUs, whether they are different chips or cores on the same
    chips.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多非x86架构上，如ARM，所有的CPU看起来都像是不同的物理CPU，无论它们是不同的芯片，还是同一芯片上的不同核心。
- en: On bare-metal x86 machines, you can find two `cpuinfo` entries with different
    physical IDs and examine them further to find out the number of cores in each
    socket.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在裸机x86机器上，你可以找到两个不同物理ID的`cpuinfo`条目，并进一步检查它们，以找出每个插槽中的核心数量。
- en: 'Consider this `cpuinfo` entry from a Linux system running on a laptop:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请考虑这台运行Linux系统的笔记本电脑的`cpuinfo`条目：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: From the `cpu cores` field, you can see that it’s a quad-core CPU.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从`cpu cores`字段中可以看出，它是一个四核CPU。
- en: 'Now, note that the entry has `processor: 7` in it, and the `siblings` field
    is set to `8`. It appears that the system has eight CPUs, even though it clearly
    has a single physical CPU chip (all entries have `physical id: 0`), and the reported
    number of cores in each entry is `4`.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意，条目中有`processor: 7`，并且`siblings`字段设置为`8`。看起来系统有八个CPU，即使它显然只有一个物理CPU芯片（所有条目都有`physical
    id: 0`），而每个条目中报告的核心数为`4`。'
- en: This is caused by *simultaneous multithreading* technologies such as AMD SMT
    and Intel Hyper-Threading. Those technologies allow a single CPU core to maintain
    the state of more than one execution thread, which can speed up certain applications.
    If every core supports two threads at once, to the operating system it looks as
    if the machine has twice as many CPU cores than it really does. For this reason,
    you can’t determine the number of physical cores just by looking at the highest
    `/proc/cpuinfo` entry number, so you need to examine it more closely.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由*同时多线程*技术（如AMD SMT和Intel超线程技术）引起的。这些技术允许单个CPU核心维持多个执行线程的状态，从而加速某些应用程序。如果每个核心同时支持两个线程，那么操作系统看起来就像机器的CPU核心数量是实际数量的两倍。因此，仅通过查看最高的`/proc/cpuinfo`条目编号，无法确定物理核心的数量，因此你需要更仔细地检查它。
- en: 'There is a utility named `nproc` in the GNU `coreutils` package whose purpose
    is to output the number of CPU cores in the system, and it can simplify your job
    if you need the number of CPUs – for example, to determine how many worker processes
    or threads of an application to spawn. However, it does not take simultaneous
    multithreading into account and prints the number of virtual cores if an SMT technology
    is enabled. If your application requires the number of physical cores, you should
    not rely on the output of `nproc` for that purpose. This is what the output of
    `nproc` would look like on that machine:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: GNU `coreutils`包中有一个名为`nproc`的工具，它的作用是输出系统中CPU核心的数量，如果你需要了解CPU的数量，它可以简化你的工作——例如，确定一个应用程序需要生成多少个工作进程或线程。然而，它没有考虑到同时多线程技术（SMT），并且如果启用了SMT技术，它会打印出虚拟核心的数量。如果你的应用程序需要物理核心的数量，不应依赖`nproc`的输出。以下是该机器上`nproc`输出的样子：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: High-level CPU discovery utilities
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级CPU发现工具
- en: As you can see, reading the `/proc/cpuinfo` file can be a tedious and tricky
    task. For this reason, people created utilities that aim to simplify it. The most
    popular tool in this category is `lscpu` from the `util-linux` package.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，读取`/proc/cpuinfo`文件可能是一项繁琐且复杂的任务。为此，人们创建了旨在简化这项任务的工具。该领域中最流行的工具是来自`util-linux`包的`lscpu`。
- en: 'If offers an easier-to-read output:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供了一个更易读的输出：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Another advantage is that you can get a machine-readable JSON output by running
    `lscpu --json` and analyzing it with scripts.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个优点是，你可以通过运行`lscpu --json`获得机器可读的JSON输出，并通过脚本分析它。
- en: Note, however, that `lscpu` doesn’t take the simultaneous multithreading issue
    into account (at least as of version 2.38) and will report twice as many CPUs
    if AMD SMT or Intel Hyper-Threading is enabled.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 但请注意，`lscpu`没有考虑同时多线程问题（至少在版本2.38中是这样），如果启用了AMD SMT或Intel超线程技术，它会报告两倍的CPU数量。
- en: As you can see, there is a lot of information about the CPUs that you can get
    either directly from the `/proc` filesystem or by using high-level utilities to
    simplify the process. However, you should always remember the nuances of interpretation,
    such as the issue of core numbers being inflated by simultaneous multithreading
    technologies.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，你可以直接从`/proc`文件系统获取关于CPU的许多信息，或者使用高层工具简化这个过程。然而，你应该始终记住一些解释的细微差别，比如核心数量可能被同时多线程技术膨胀的问题。
- en: Memory discovery
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存发现
- en: Discovering the amount of memory is often even more practically important than
    discovering CPU features. It is required to plan application deployment, choose
    the size of a swap partition, and estimate whether you need to install more memory
    already.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 发现内存的数量往往比发现CPU特性更为实际和重要。它是计划应用程序部署、选择交换分区大小以及估计是否需要安装更多内存时所必需的。
- en: However, the kernel interfaces for memory discovery are not as rich as those
    for discovering CPU features. For example, it is impossible to find out how many
    memory slots a system has, how many of them are used, and what the sizes of memory
    sticks installed in those slots using the kernel interface are alone. At least
    on some architectures, it is possible to obtain that information, but from the
    firmware rather than from the kernel, as we will see later in the *dmidecode*
    section.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，内核提供的内存发现接口并不像CPU特征发现接口那样丰富。例如，单独通过内核接口无法得知系统有多少内存插槽，有多少已被使用，以及安装在这些插槽中的内存条的大小。至少在某些架构上，可以通过固件而不是内核获得这些信息，正如我们稍后在*dmidecode*部分中看到的那样。
- en: Moreover, information from the kernel can be misleading for beginners who are
    unfamiliar with Linux kernel conventions. First, let us look at that information
    and then discuss how to interpret it.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，来自内核的信息可能会误导那些不熟悉Linux内核约定的初学者。首先，让我们看一下这些信息，然后讨论如何解读它们。
- en: First, we will look at the output of the `free` utility that comes from the
    `procps-ng` package. That utility has the `-m` option to show memory amounts in
    megabytes rather than in kibibytes, which is much easier to read.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将查看来自`procps-ng`包的`free`工具的输出。该工具有`-m`选项，可以以MB为单位显示内存量，而不是以KiB为单位，这样更容易阅读。
- en: '![Figure 5.1 – the free –m output](img/B18575_05_01.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – free –m 输出](img/B18575_05_01.jpg)'
- en: Figure 5.1 – the free –m output
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – free –m 输出
- en: On the surface, its output seems self-descriptive. The total amount of memory
    here is about 16 gigabytes. Of that amount, `13849` megabytes are used. However,
    the question of how the kernel uses memory is not trivial. Not all memory that
    is declared as used is used by user applications – the kernel also uses memory
    to cache data from disk to speed up input-output operations. The more memory the
    system has that is not currently used by any processes, the more memory will be
    used by Linux for caching. Whenever there is not enough completely unused memory
    to allocate to a process that requests it, the kernel will evict some cached data
    to free up space. For this reason, the amount of memory in the `used` column can
    be very high, even on a system that runs very few applications, which may create
    an impression that the system is running out of memory when, in fact, there is
    lots of memory available to applications. The amount of memory used for disk caching
    is in the `buff/cache` column, and the amount of memory available to applications
    is in the `available` column.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 表面上看，它的输出似乎是自描述的。这里的总内存量大约是16GB，其中`13849`MB已被使用。然而，内核如何使用内存并非简单的问题。并非所有声明为已使用的内存都被用户应用程序使用——内核也使用内存来缓存磁盘数据，以加速输入输出操作。系统中未被任何进程使用的内存越多，Linux用来缓存的内存就越多。当没有足够的完全未使用的内存分配给请求它的进程时，内核会驱逐一些缓存数据以释放空间。因此，即使系统运行的应用程序非常少，`used`列中显示的内存量也可能非常高，这可能给人一种系统内存不足的印象，实际上，应用程序仍有大量内存可用。用于磁盘缓存的内存量在`buff/cache`列中，而可供应用程序使用的内存量在`available`列中。
- en: Raw information about memory consumption is found in the `/proc/meminfo` file.
    The output of the `free` utility is a summary of information from that file.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 关于内存消耗的原始信息可以在`/proc/meminfo`文件中找到。`free`工具的输出是该文件信息的总结。
- en: Discovering PCI devices
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现PCI设备
- en: Many peripherals are attached to a PCI bus. These days, this usually means **PCI
    Express** (**PCI-e**) rather than older PCI or PCI-x buses, but from a software
    point of view, they are all PCI devices, whichever variant of that bus they are
    attached to.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 许多外设都连接到 PCI 总线。如今，这通常意味着 **PCI Express** (**PCI-e**) 而非更旧的 PCI 或 PCI-x 总线，但从软件的角度来看，它们都是
    PCI 设备，不论它们连接的是哪一种总线。
- en: The kernel exposes information about them in the `/sys/class/pci_bus` hierarchy,
    but reading those files by hand would be a very time-consuming task, unlike in
    `/proc/cpuinfo`, so in practice, people always use utilities for it. The most
    popular one is `lspci` from the `pciutils` package.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 内核通过 `/sys/class/pci_bus` 层次结构暴露这些信息，但手动读取这些文件将是一项非常耗时的工作，和 `/proc/cpuinfo`
    不同，因此实际上，人们总是使用工具来处理它。最流行的工具是来自 `pciutils` 包的 `lspci`。
- en: 'Here is a sample output:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例输出：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Full access to the PCI bus information is only available to the `root` user,
    so you should run `lspci` with `sudo`. PCI device classes are standardized, so
    that utility will not only tell you about device vendors and models but also their
    functions, such as an Ethernet controller or a SATA controller.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 完全访问 PCI 总线信息仅对 `root` 用户开放，因此你应该使用 `sudo` 来运行 `lspci`。PCI 设备类别是标准化的，所以该工具不仅会告诉你设备的厂商和型号，还会告诉你它们的功能，如以太网控制器或
    SATA 控制器。
- en: Some of those names may be slightly misleading – for example, a VGA-compatible
    controller may not have an actual VGA port; these days, it’s almost invariably
    DVI, HDMI, or Thunderbolt/DisplayPort.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些名称可能会有些误导——例如，一个兼容 VGA 的控制器可能没有实际的 VGA 端口；如今，它几乎总是 DVI、HDMI 或 Thunderbolt/DisplayPort。
- en: Discovering USB devices
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现 USB 设备
- en: 'To discover USB devices, there’s the `lsusb` utility from the `usbutils` package.
    That command does not require `root` privileges. Here’s what its output may look
    like:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要发现 USB 设备，可以使用来自 `usbutils` 包的 `lsusb` 工具。这个命令不需要 `root` 权限。以下是它的输出可能的样子：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Even though the USB bus specification also includes standardized device classes,
    `lsusb` does not show them by default. One reason for that behavior is that a
    single USB device may implement multiple functions. A smartphone, for example,
    can present itself as a mass storage device (similar to a USB stick) for generic
    file transfer and as a digital camera to retrieve pictures from it using **Picture
    Transfer** **Protocol** (**PTP**).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 USB 总线规范也包括标准化的设备类别，但 `lsusb` 默认并不会显示它们。这样做的一个原因是一个 USB 设备可能实现多个功能。例如，智能手机可以作为一个大容量存储设备（类似于
    USB 闪存盘）用于常规文件传输，也可以作为数字相机，通过 **图片传输协议** (**PTP**) 获取其中的照片。
- en: You can get detailed information about a device by running `lsusb` with additional
    options. In the previous example, running `lsusb -s 2 -v` would show you information
    about device `002` – a Kensington trackball.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行带有附加选项的 `lsusb` 来获取设备的详细信息。在之前的例子中，运行 `lsusb -s 2 -v` 会显示关于设备 `002`（一个
    Kensington 滚珠轨迹球）的信息。
- en: Note that if a device is shown in the output of `lsusb`, it doesn’t always mean
    that it’s attached to a USB port. Onboard devices may also be connected to the
    USB bus. In the previous example, the Bluetooth controller is an internal device
    in the laptop.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果设备出现在 `lsusb` 的输出中，并不总是意味着它连接到了 USB 端口。板载设备也可能连接到 USB 总线。在前面的例子中，蓝牙控制器是笔记本电脑中的一项内部设备。
- en: Discovering storage devices
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现存储设备
- en: 'Storage devices can be attached to different buses, so discovering them may
    be complicated. One useful command to discover everything that looks like a storage
    device is `lsblk` from the `util-linux` package (its name stands for list block
    devices):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 存储设备可以连接到不同的总线，因此发现它们可能比较复杂。一个有用的命令是来自 `util-linux` 包的 `lsblk`（其名称代表列出块设备），可以用来发现所有看起来像存储设备的设备：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'One caveat is that it will show virtual devices as well as physical ones. For
    example, if you mount an ISO image using a virtual loop device, it will show up
    as a storage device – because from the user’s point of view, it is indeed a storage
    device:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，它会显示虚拟设备以及物理设备。例如，如果你通过虚拟循环设备挂载一个 ISO 镜像，它将作为存储设备显示——因为从用户的角度来看，它确实是一个存储设备：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you try to discover physical devices, you may want to try the `lsscsi` command
    from the package that is also usually called `lsscsi`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想发现物理设备，可以尝试使用同样通常叫做 `lsscsi` 的包中的 `lsscsi` 命令：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: A confusing part is that the *protocol* of the original parallel SCSI bus found
    many new applications and remains widely used, even though its original hardware
    implementation was replaced by newer buses. There are many devices that will show
    up in the output of that utility, including SATA, **Serial-Attached SCSI** (**SAS**),
    and NVMe drives, as well as USB mass storage devices.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一个令人困惑的部分是，原始并行 SCSI 总线的*协议*发现了许多新应用，并且仍然被广泛使用，尽管其原始硬件实现已经被更新的总线所替代。该工具的输出中会显示许多设备，包括
    SATA、**串行连接 SCSI**（**SAS**）和 NVMe 驱动器，以及 USB 大容量存储设备。
- en: Conversely, paravirtual devices such as VirtIO drives in KVM and Xen virtual
    machines will not be included in the `lsscsi` output. All in all, you may need
    to rely on a combination of `lsusb`, `lsscsi`, and `lsblk` to get the full picture.
    A good thing is that none of those commands require `root` privileges. Another
    good thing about `lsblk` specifically is that you can run `lsblk --json` to get
    machine-readable output and load it in a script.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，像 KVM 和 Xen 虚拟机中的 VirtIO 驱动器这样的半虚拟设备将不会出现在 `lsscsi` 输出中。总的来说，您可能需要依赖 `lsusb`、`lsscsi`
    和 `lsblk` 的组合来获取完整的情况。一个优点是，这些命令都不需要 `root` 权限。关于 `lsblk` 的另一个好处是，您可以运行 `lsblk
    --json` 来获取机器可读的输出，并将其加载到脚本中。
- en: High-level discovery tools
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级发现工具
- en: As well as these tools, which are specific to a certain bus or device type,
    there are also tools that can help you discover all hardware present in a system.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些特定于某个总线或设备类型的工具外，还有一些工具可以帮助您发现系统中所有存在的硬件。
- en: dmidecode
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: dmidecode
- en: On x86 systems, you can use a program named `dmidecode` to retrieve and view
    information from the firmware (BIOS/UEFI) via the Desktop Management Interface
    (hence its name). That interface is also known as SMBIOS. Since it’s specific
    to the x86 PC firmware standards, it will not work on machines with other architectures
    such as ARM or MIPS, but on x86 laptops, workstations, and servers, it can help
    you discover information that cannot be obtained in any other way, such as the
    number of RAM slots.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在 x86 系统上，您可以使用名为 `dmidecode` 的程序通过桌面管理接口（因此得名）从固件（BIOS/UEFI）中检索和查看信息。该接口也称为
    SMBIOS。由于它是特定于 x86 PC 固件标准的，因此在其他架构的机器上（如 ARM 或 MIPS）无法使用，但在 x86 笔记本电脑、工作站和服务器上，它可以帮助您发现无法通过其他方式获得的信息，例如
    RAM 插槽的数量。
- en: 'One disadvantage is that you need `root` privileges to run it. Another thing
    to take note of is that it produces a lot of output. There is no way to reproduce
    a complete output in the book because it would take many pages, but for reference,
    here’s what the beginning of its output may look like (in this case, in a VMware
    virtual machine):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一个缺点是，您需要 `root` 权限才能运行它。另一个需要注意的事项是，它会产生大量输出。由于完整的输出内容太长，不可能在书中重现，但作为参考，下面是它的输出开头部分（在此案例中是在
    VMware 虚拟机中）：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see in this output, there are exact model names for the chassis and
    the mainboard. Unlike, for example, a USB, where the protocol itself includes
    features that allow devices themselves to report their names and capabilities
    to the host, there is no cross-platform way to query the mainboard name, but at
    least on most x86 machines, that information is available through the DMI interface.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在此输出中看到的，机箱和主板都有精确的型号名称。与例如 USB 这样的设备不同，USB 协议本身包含允许设备向主机报告其名称和功能的特性，而查询主板名称没有跨平台的方式，但至少在大多数
    x86 机器上，这些信息可以通过 DMI 接口获得。
- en: lshw
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: lshw
- en: Another tool that provides comprehensive hardware reporting is `lshw` (LiSt
    HardWare). Like `dmidecode`, it can use the DMI interface as its information source,
    but it tries to support more hardware platforms and their platform-specific hardware
    discovery interfaces.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个提供全面硬件报告的工具是 `lshw`（LiSt HardWare）。与 `dmidecode` 类似，它也可以使用 DMI 接口作为信息来源，但它尝试支持更多的硬件平台及其平台特定的硬件发现接口。
- en: One disadvantage is that none of the popular distributions install it by default,
    so you’ll always need to install it from the repositories by hand. It also requires
    `root` privileges to run, since it relies on the privileged access DMI.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一个缺点是，流行的发行版默认没有安装该工具，因此您需要手动从软件库中安装它。它还需要 `root` 权限才能运行，因为它依赖于特权访问 DMI。
- en: 'Here is a sample output from a virtual machine running in KVM on the DigitalOcean
    cloud platform. Its output is also very large, so we only include its beginning:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个在 DigitalOcean 云平台的 KVM 虚拟机中运行的样本输出。它的输出也非常大，因此我们只包括其开头部分：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, the output includes information that can only be retrieved from
    DMI (such as the mainboard model), together with information that we have seen
    in the outputs of `lsusb` and other utilities. In this sense, `lshw` can replace
    them if you want a detailed and complete overview of all installed hardware.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，输出包括一些只能从 DMI 获取的信息（例如主板型号），以及我们在 `lsusb` 和其他工具的输出中看到的信息。从这个意义上讲，如果你想要一个详细和完整的所有安装硬件概览，`lshw`
    可以替代它们。
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned that the Linux kernel can gather a lot of information
    about the system hardware and provide it to the user. In an emergency situation,
    it’s possible to retrieve all that information directly from the kernel, using
    the `/proc` and `/sys` filesystems and reading files such as `/proc/cpuinfo`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解到 Linux 内核可以收集有关系统硬件的大量信息并提供给用户。在紧急情况下，可以直接从内核中检索所有这些信息，方法是使用 `/proc`
    和 `/sys` 文件系统，并读取如 `/proc/cpuinfo` 等文件。
- en: However, high-level utilities such as `lscpu`, `lsscsi`, and `lsusb` can make
    it much easier to retrieve information and analyze it.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，高级工具如 `lscpu`、`lsscsi` 和 `lsusb` 可以使检索和分析信息变得更加容易。
- en: There are also platform-specific utilities, such as `dmidecode` for x86 PCs,
    that can help you retrieve even more detailed information that cannot be retrieved
    otherwise, such as the number of memory slots.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些平台特定的工具，例如用于 x86 PC 的 `dmidecode`，可以帮助你获取其他方法无法获取的更详细信息，例如内存插槽的数量。
- en: In the next chapter, we will learn about configuring basic system settings.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将学习如何配置基本系统设置。
- en: 'Part 2: Configuring and Modifying Linux Systems'
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 部分：配置和修改 Linux 系统
- en: The second part of the book is dedicated to managing individual Linux systems.
    Once you are comfortable interacting with the system, the next step is to learn
    how to configure it. In this part, you will learn how to configure basic settings
    such as the system hostname, how to create and manage users and groups, how to
    install additional software from package files or remote repositories, and how
    to set up and debug network connections and storage devices.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的第二部分专注于管理独立的 Linux 系统。一旦你熟悉了与系统的交互，下一步就是学习如何配置它。在本部分，你将学习如何配置基本设置，例如系统主机名，如何创建和管理用户和组，如何从软件包文件或远程仓库安装附加软件，以及如何设置和调试网络连接与存储设备。
- en: 'This part has the following chapters:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 6*](B18575_06.xhtml#_idTextAnchor109), *Basic System Settings*'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 6 章*](B18575_06.xhtml#_idTextAnchor109)，*基本系统设置*'
- en: '[*Chapter 7*](B18575_07.xhtml#_idTextAnchor118), *User and Group Management*'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 7 章*](B18575_07.xhtml#_idTextAnchor118)，*用户与组管理*'
- en: '[*Chapter 8*](B18575_08.xhtml#_idTextAnchor134), *Software Installation and
    Package Repositories*'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 8 章*](B18575_08.xhtml#_idTextAnchor134)，*软件安装与软件包仓库*'
- en: '[*Chapter 9*](B18575_09.xhtml#_idTextAnchor152), *Network Configuration and
    Troubleshooting*'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 9 章*](B18575_09.xhtml#_idTextAnchor152)，*网络配置与故障排除*'
- en: '[*Chapter 10*](B18575_10.xhtml#_idTextAnchor175), *Storage Management*'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 10 章*](B18575_10.xhtml#_idTextAnchor175)，*存储管理*'
