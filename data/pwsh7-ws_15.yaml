- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: PowerShell 7 and the Raspberry Pi
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PowerShell 7 和 Raspberry Pi
- en: 'This is one of the chapters I’ve looked forward to writing the most. I’ve got
    a house full of Raspberry Pis (and Arduinos, micro:bits, and ESP32s…). I use them
    to teach coding to school kids (and adults), as well as to run adblockers, media
    centers, wildlife cameras, and horticultural systems. I’ve got one with buttons
    that randomly selects episodes of my favorite radio shows and plays them (called
    the Shendomizer). Mostly, I program them with Python, but PowerShell is also an
    option. We can even install a stripped-down version of Windows 10 on them, but
    we won’t cover that in this book. Instead, we’ll look at how to install PowerShell
    7 and **Visual Studio** (**VS**) Code, how to connect remotely to a headless Pi
    over Wi-Fi using SSH with both PowerShell and VS Code, the default module for
    working with PowerShell on the Raspberry Pi, and finish up by creating a script
    to accomplish the first steps in physical computing: getting an LED to blink on
    and off.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我最期待写的章节之一。我家里有一堆 Raspberry Pi（还有 Arduino、micro:bit 和 ESP32 等）。我用它们来教孩子们（和成年人）编程，还用它们运行广告拦截器、媒体中心、野生动物监控摄像头和园艺系统。我有一个
    Raspberry Pi，配有按钮，能够随机选择我最喜欢的广播节目并播放（叫做 Shendomizer）。大多数时候，我用 Python 来编程，但 PowerShell
    也是一个选择。我们甚至可以在它们上安装简化版的 Windows 10，不过这本书不会讲到这个。相反，我们将讨论如何安装 PowerShell 7 和 **Visual
    Studio** (**VS**) Code，如何使用 PowerShell 和 VS Code 通过 SSH 远程连接到没有显示器的 Pi，以及 Raspberry
    Pi 上与 PowerShell 配合使用的默认模块，最后创建一个脚本，完成物理计算的第一步：让 LED 灯闪烁。
- en: 'The main topics we’ll cover in this chapter are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖的主要内容如下：
- en: Introduction to the Raspberry Pi
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raspberry Pi 简介
- en: Installing PowerShell and VS Code
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 PowerShell 和 VS Code
- en: Connecting remotely to the Pi
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程连接到 Pi
- en: Running PowerShell on Raspberry Pi OS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Raspberry Pi OS 上运行 PowerShell
- en: Simple physical computing
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单的物理计算
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, we will need a Raspberry Pi with a power supply, screen, keyboard
    and mouse, and the requisite cables. Some of this chapter has been written on
    the Pi 400, which is a handy version of the Pi that’s installed on a keyboard
    with everything we need except a monitor. Other parts have been written using
    a Raspberry Pi 3 single-board computer.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章内容，我们需要一台 Raspberry Pi、一个电源、屏幕、键盘和鼠标，以及所需的电缆。本章的部分内容是在 Pi 400 上编写的，Pi 400
    是一款将 Raspberry Pi 安装在键盘上的方便版本，除了显示器外，其他所需配件都已经包含。其他部分则是使用 Raspberry Pi 3 单板计算机编写的。
- en: Note that a Pi Zero or Pi Pico will not work. They use a different ARM chip
    version, so the architecture won’t work with .NET.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Pi Zero 或 Pi Pico 无法使用。它们使用不同版本的 ARM 芯片，因此架构无法与 .NET 配合使用。
- en: 'For simple automation, we’ll need the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于简单的自动化，我们需要以下设备：
- en: A breadboard
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个面包板
- en: An LED
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 LED
- en: A 300-400 Ohm resistor (but 250-500 will work)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 300-400 欧姆的电阻（但 250-500 欧姆的也可以）
- en: Two male-to-female jumper cables
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两根公对母跳线
- en: Introduction to the Raspberry Pi
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Raspberry Pi 简介
- en: The Raspberry Pi is a small, affordable, and versatile single-board computer
    developed by the Raspberry Pi Foundation in the UK. Its primary goal was to promote
    the teaching of basic computer science in schools and developing countries. However,
    its accessibility, low cost, and ease of use have made it incredibly popular among
    hobbyists, educators, and professionals for various applications, from learning
    programming to building complex projects.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi 是一款小型、价格实惠且多功能的单板计算机，由英国的 Raspberry Pi 基金会开发。它的主要目标是促进在学校和发展中国家教授基础计算机科学。然而，由于其可获得性、低成本和易用性，使其在爱好者、教育工作者和专业人士中非常流行，用途包括从学习编程到构建复杂的项目。
- en: It’s designed to be a blank slate, allowing users to understand the basics of
    hardware and software interactions. This computer is essentially a tiny, self-contained
    PC that can be used for many of the same tasks we might use a desktop or laptop
    PC for, such as browsing the internet, word processing, and playing games. Moreover,
    its **general-purpose input/output** (**GPIO**) pins enable it to interact with
    external hardware, making it ideal for electronics projects and **Internet of
    Things** (**IoT**) applications.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 它被设计成一个空白的起点，让用户理解硬件和软件之间的基本交互。这个计算机本质上是一个小型、自包含的 PC，可以用来完成许多与台式机或笔记本电脑类似的任务，比如浏览网页、文字处理和玩游戏。此外，它的
    **通用输入输出** (**GPIO**) 引脚使其能够与外部硬件互动，非常适合用于电子项目和 **物联网** (**IoT**) 应用。
- en: Over the years, several models of the Raspberry Pi have been released, each
    improving on its predecessor. The latest model is the Raspberry Pi 4 Model B.
    This model has a 64-bit quad-core ARM Cortex-A72 CPU, offering processing speeds
    of up to 1.5 GHz. It comes in variants that have 2 GB, 4 GB, or 8 GB of LPDDR4-3200
    SDRAM. For connectivity, it includes Gigabit Ethernet, Bluetooth 5.0, and dual-band
    Wi-Fi (2.4G Hz and 5.0 GHz). It also has two USB 3.0 ports, two USB 2.0 ports,
    two micro HDMI ports supporting up to 4K resolution, and a USB-C port for power.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，树莓派已经发布了多个型号，每个型号都对前一代进行了改进。最新的型号是树莓派 4 Model B。该型号配备了 64 位四核 ARM Cortex-A72
    CPU，处理速度可达 1.5 GHz。它有 2 GB、4 GB 或 8 GB 的 LPDDR4-3200 SDRAM 可选。为了连接，它支持千兆以太网、蓝牙
    5.0 和双频 Wi-Fi（2.4 GHz 和 5.0 GHz）。此外，它还配备了两个 USB 3.0 端口、两个 USB 2.0 端口、两个支持最高 4K
    分辨率的 micro HDMI 端口，以及一个用于电源的 USB-C 端口。
- en: The Raspberry Pi can run various **operating systems** (**OSs**), with Raspberry
    Pi OS (formerly Raspbian) being the most popular. This Debian-based OS is optimized
    for the Raspberry Pi hardware and comes pre-loaded with essential tools, programming
    languages, and applications. Users can also install different flavors of Linux
    and even a version of Windows 10 IoT Core. The OS can be installed by flashing
    an image to a MicroSD card.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派可以运行各种**操作系统**（**OS**），其中树莓派操作系统（以前称为 Raspbian）是最受欢迎的。这个基于 Debian 的操作系统针对树莓派硬件进行了优化，并预装了必要的工具、编程语言和应用程序。用户还可以安装不同版本的
    Linux，甚至是 Windows 10 IoT Core 版本。操作系统可以通过将镜像烧录到 MicroSD 卡来安装。
- en: For programming, Python is the most commonly used language due to its simplicity
    and power. However, the Raspberry Pi supports numerous other languages, such as
    JavaScript, PHP, C++, Java, and, most importantly for us, PowerShell 7\. Its versatility
    makes it a valuable tool for software development, especially in IoT and embedded
    systems.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程方面，Python 是最常用的语言，因为它简洁且功能强大。然而，树莓派支持众多其他语言，如 JavaScript、PHP、C++、Java，最重要的是，PowerShell
    7。它的多功能性使其成为软件开发中的一项有价值的工具，尤其是在物联网和嵌入式系统中。
- en: The Raspberry Pi’s range of use cases is vast. In education, it’s used to teach
    programming, computer science fundamentals, and even hardware design. Hobbyists
    use it for projects such as retro gaming consoles, media centers, and home automation
    systems. In professional settings, it serves as a cost-effective tool for prototyping,
    data collection, and automation. We can also use it for parallel computing; an
    example of this is the OctaPi project run by GCHQ in the UK. Some institutions
    even use it as a supercomputer; the Los Alamos National Laboratory built a 750-node
    high-performance computer out of Pis.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派的应用范围非常广泛。在教育领域，它被用来教授编程、计算机科学基础，甚至硬件设计。爱好者用它来制作复古游戏主机、媒体中心和智能家居系统。在专业领域，它作为一种经济实惠的工具，用于原型制作、数据收集和自动化。我们也可以用它进行并行计算；例如，英国
    GCHQ 运行的 OctaPi 项目就是一个例子。一些机构甚至将它用于超级计算机；洛斯阿拉莫斯国家实验室就用树莓派搭建了一个 750 节点的高性能计算机。
- en: 'The Raspberry Pi ecosystem has expanded over the years since its release in
    2012\. There are three separate series: the Pi, the Pi Zero, developed as a lightweight
    and even cheaper alternative that can be dedicated to a single project and left
    to run (I have several Pi Zero wildlife cameras running on rechargeable batteries),
    and the Pi Pico, an alternative to the popular Arduino single chipboard. PowerShell
    7 will only run on the full-fat Pi, not the Pi Zero or Pico. These smaller alternatives
    run on ARMv6 chip designs; .NET, and therefore PowerShell 7, requires an ARMv7
    or ARMv8 chip, as found in the Pi 2, 3, and 4\. This is partly because the ARMv6
    is lower-powered, but also because nobody wants to be designing for old hardware,
    do they?'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2012 年发布以来，树莓派生态系统不断扩展。树莓派有三种独立的系列：Pi 系列、Pi Zero 系列，后者作为轻量级且更便宜的替代品，适用于专门的项目，并可以持续运行（我有几台使用可充电电池运行的
    Pi Zero 野生动物相机），以及 Pi Pico 系列，作为流行的 Arduino 单板计算机的替代品。PowerShell 7 仅能在完整版本的 Pi
    上运行，不能在 Pi Zero 或 Pico 上运行。这些更小的替代品运行在 ARMv6 架构的芯片上；而 .NET，因此 PowerShell 7，需要
    ARMv7 或 ARMv8 架构的芯片，正如树莓派 2、3 和 4 所使用的那样。这部分是因为 ARMv6 功耗较低，但也因为没有人愿意为老旧硬件设计，不是吗？
- en: Right. Shall we get on and install PowerShell on a Pi?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们开始在 Pi 上安装 PowerShell 吧？
- en: Installing PowerShell 7 and VS Code
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 PowerShell 7 和 VS Code
- en: Raspberry Pi OS is a Linux distro based on Debian, the same as Ubuntu, so the
    Ubuntu instructions we followed in [*Chapter 14*](B17600_14.xhtml#_idTextAnchor280),
    *PowerShell 7 for Linux and macOS*, will work, but there’s an even easier way
    to do it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi OS 是基于 Debian 的 Linux 发行版，和 Ubuntu 一样，所以我们在 [*第 14 章*](B17600_14.xhtml#_idTextAnchor280)
    中跟随的 Ubuntu 指令，*PowerShell 7 for Linux 和 macOS*，也适用，但有一种更简单的方法。
- en: Installing PowerShell
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 PowerShell
- en: 'If we go to the *Community support for PowerShell on Linux* page at [https://learn.microsoft.com/en-us/powershell/scripting/install/community-support](https://learn.microsoft.com/en-us/powershell/scripting/install/community-support),
    we’ll find a very handy script that will install PowerShell for us, as shown in
    the following screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们访问 *PowerShell 在 Linux 上的社区支持* 页面 [https://learn.microsoft.com/en-us/powershell/scripting/install/community-support](https://learn.microsoft.com/en-us/powershell/scripting/install/community-support)，我们会找到一个非常方便的脚本，它将为我们安装
    PowerShell，如下截图所示：
- en: '![Figure 15.1 – The Raspberry Pi OS install script](img/B17600_15_1.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.1 – Raspberry Pi OS 安装脚本](img/B17600_15_1.jpg)'
- en: Figure 15.1 – The Raspberry Pi OS install script
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.1 – Raspberry Pi OS 安装脚本
- en: 'If we click the **Copy** button in the top-right corner of the script box,
    then we can simply open a terminal window on the Raspberry Pi and right-click
    to paste it into the terminal, as shown here:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击脚本框右上角的 **复制** 按钮，我们可以简单地在 Raspberry Pi 上打开终端窗口，右键粘贴到终端中，如下所示：
- en: '![Figure 15.2 – Installing PowerShell by pasting the script into the terminal](img/B17600_15_2.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.2 – 通过将脚本粘贴到终端安装 PowerShell](img/B17600_15_2.jpg)'
- en: Figure 15.2 – Installing PowerShell by pasting the script into the terminal
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.2 – 通过将脚本粘贴到终端安装 PowerShell
- en: Once we’ve pasted it, all we have to do is press *Enter* on the line highlighted
    in the preceding screenshot, at which point the script will work through, install,
    and then start PowerShell.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 粘贴完脚本后，我们只需按下前面截图中高亮显示的那一行上的 *Enter* 键，脚本就会运行，安装并启动 PowerShell。
- en: 'Of course, that may be prone to errors, so we might want to actually create
    a script, check that it’s right, and then execute it. To do this, from the terminal
    prompt, type the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这可能容易出错，所以我们可能希望实际创建一个脚本，检查它是否正确，然后执行它。为此，从终端提示符输入以下命令：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will open the nano text editor. Paste the script into nano, as shown here:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开 nano 文本编辑器。将脚本粘贴到 nano 中，如下所示：
- en: '![Figure 15.3 – Creating a PowerShell install script in nano](img/B17600_15_3.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.3 – 在 nano 中创建 PowerShell 安装脚本](img/B17600_15_3.jpg)'
- en: Figure 15.3 – Creating a PowerShell install script in nano
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.3 – 在 nano 中创建 PowerShell 安装脚本
- en: 'Check that you’ve pasted it correctly, and then save it by pressing *Ctrl*
    + *X*, typing *Y* when asked to save it, and then typing a suitable filename –
    I’ve called mine `installPosh.sh`. Once we’ve returned to the terminal prompt,
    we can run the script by typing the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 检查你是否已正确粘贴脚本，然后按 *Ctrl* + *X* 保存，系统提示时输入 *Y* 以保存文件，并为文件命名——我将我的命名为 `installPosh.sh`。返回到终端提示符后，我们可以通过输入以下命令来运行脚本：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Again, we’ll be taken straight to PowerShell. Now, let’s look at installing
    VS Code.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们将直接进入 PowerShell。现在，让我们来看看安装 VS Code。
- en: Installing VS Code
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 VS Code
- en: 'Getting VS Code onto our Pi is even easier. VS Code is included in the official
    repositories for Raspberry Pi OS, so we don’t need to manually download files
    or set up alternative repositories – we can just open the terminal and type the
    following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将 VS Code 安装到我们的 Pi 上更容易。VS Code 已包含在 Raspberry Pi OS 的官方软件库中，所以我们不需要手动下载文件或设置替代软件库——我们只需打开终端并输入以下命令：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once we’ve done this, after a few minutes, VS Code will appear on our machine
    alongside a lot of chatter:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，几分钟内，VS Code 将出现在我们的机器上，并伴随许多信息：
- en: '![Figure 15.4 – Installing and starting VS Code on the Raspberry Pi](img/B17600_15_4.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.4 – 在 Raspberry Pi 上安装并启动 VS Code](img/B17600_15_4.jpg)'
- en: Figure 15.4 – Installing and starting VS Code on the Raspberry Pi
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.4 – 在 Raspberry Pi 上安装并启动 VS Code
- en: We can either type `code` in the terminal, or we can find it in the **Programming**
    subsection of the applications menu by clicking on the raspberry icon in the top-left
    corner.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在终端中输入 `code`，或者通过点击左上角的树莓图标，进入 **编程** 子菜单，从应用程序菜单中找到它。
- en: 'Now, let’s look at the most common way I use the Raspberry Pi: remotely.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下我最常用的 Raspberry Pi 使用方式：远程连接。
- en: Connecting remotely to the Pi
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程连接到 Pi
- en: While it’s quite common to see the Raspberry Pi used as a PC in educational
    settings, it’s more likely that we’ll want to use it as a server of some sort,
    and therefore connect to it remotely, rather than set it up with its own monitor,
    mouse and keyboard. This is called **headless** mode, and it’s what we’re going
    to look at next.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在教育环境中，Raspberry Pi 被用作个人电脑是很常见的，但更有可能的是我们想把它作为某种服务器使用，因此我们会希望远程连接，而不是为其配置独立的显示器、鼠标和键盘。这被称为**无头**模式，接下来我们将讨论这个模式。
- en: Working with a headless Pi
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用无头模式的 Pi
- en: To use a headless Pi, we’ll need to set it up so that we have a way of connecting
    it to the network and accessing it remotely. We’re going to configure a new Pi
    (or just rebuild the old one) to access a wireless network, and we’re going to
    use SSH for access, which we saw in [*Chapter 14*](B17600_14.xhtml#_idTextAnchor280),
    *PowerShell 7 for Linux and macOS*. We can set up both of these things with the
    Raspberry Pi Imager tool on the Pi website at [https://www.raspberrypi.com/software/](https://www.raspberrypi.com/software/).
    Note that a lot of documentation on the internet suggests that we might want to
    create and edit a file called `wpa_supplicant.conf`. This is true for older versions
    of Raspberry Pi OS and Raspbian, but recent versions won’t use it.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用无头模式的 Pi，我们需要设置它，使其能够连接到网络并远程访问。我们将配置一个新的 Pi（或者重新构建旧的 Pi），使其能够访问无线网络，并使用
    SSH 进行访问，这在[*第 14 章*](B17600_14.xhtml#_idTextAnchor280)中已经提到过，*Linux 和 macOS 上的
    PowerShell 7*。我们可以通过 Raspberry Pi 网站上的 Raspberry Pi Imager 工具来设置这两项功能，网址是 [https://www.raspberrypi.com/software/](https://www.raspberrypi.com/software/)。需要注意的是，许多网上文档建议我们可能需要创建并编辑一个名为
    `wpa_supplicant.conf` 的文件。这对老版本的 Raspberry Pi OS 和 Raspbian 是适用的，但最新版本不会使用它。
- en: Download the appropriate version of the installer for the OS we are going to
    run it from – in my case, Windows – and install it.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 下载适合我们将要运行操作系统的安装程序版本——在我的情况下是 Windows——并进行安装。
- en: When we run it, we may experience an OpenGL error if we haven’t kept our graphics
    drivers up to date, so make sure that the latest drivers are installed.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行它时，如果没有保持图形驱动程序更新，可能会遇到 OpenGL 错误，因此请确保安装了最新的驱动程序。
- en: We will also need a microSD card ready to be imaged.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一张准备好进行镜像的 microSD 卡。
- en: 'When we open the imager tool, we’ll be asked what device we want to install
    on, what OS we want, and what storage we are going to use, as shown here:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们打开镜像工具时，会询问我们想安装在哪个设备上，想要什么操作系统，以及使用什么存储设备，如下所示：
- en: '![Figure 15.5 – The Raspberry Pi Imager tool](img/B17600_15_5.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.5 – Raspberry Pi Imager 工具](img/B17600_15_5.jpg)'
- en: Figure 15.5 – The Raspberry Pi Imager tool
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.5 – Raspberry Pi Imager 工具
- en: 'In my case, I’m installing on a Raspberry Pi 4, I want the latest 64-bit OS,
    and I would like the image to be written to the SDHC card in my laptop. When we
    click **NEXT**, we’ll be asked if we’d like to apply OS customization settings.
    Yes. Yes, we would. Click **Edit Settings**; we’ll see the **OS Customisation**
    dialog box open on the **GENERAL** tab, as shown here:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下，我正在安装在 Raspberry Pi 4 上，我想要最新的 64 位操作系统，并且我希望将镜像写入我笔记本电脑上的 SDHC 卡。当我们点击**下一步**时，会询问是否要应用操作系统定制设置。是的，我们要。点击**编辑设置**，我们将看到**操作系统定制**对话框打开在**常规**标签页上，如下所示：
- en: '![Figure 15.6 – Customizing our Raspberry Pi OS](img/B17600_15_6.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.6 – 定制我们的 Raspberry Pi 操作系统](img/B17600_15_6.jpg)'
- en: Figure 15.6 – Customizing our Raspberry Pi OS
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.6 – 定制我们的 Raspberry Pi 操作系统
- en: 'In the preceding screenshot, I have set my hostname, the username and password
    I want to use on the Pi, and, most importantly, I’ve configured the wireless LAN
    settings to automatically connect to the Wi-Fi network I want to use, `ShedWifi`,
    which is the Wi-Fi network in my shed. Now, we need to switch to the **SERVICES**
    tab to enable SSH. By default, when we click on **Enable SSH**, it will select
    **Use password authentication**. I’m sticking with that, but we could configure
    it to **Allow public-key authentication only**. If we click **Save**, we will
    be warned that all the data on our destination SDHC card will be overwritten and
    asked to confirm this. Once we do, after a few minutes, we’ll get a **Write Successful**
    popup telling us that we can remove the SDHC card. Let’s do just that – put it
    in the Pi and power it up. The **SERVICES** tab is shown in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我已设置了我的主机名、希望在 Pi 上使用的用户名和密码，最重要的是，我配置了无线局域网设置，使其能够自动连接到我想要使用的 Wi-Fi
    网络 `ShedWifi`，这是我小屋里的 Wi-Fi 网络。现在，我们需要切换到**SERVICES**选项卡以启用 SSH。默认情况下，当我们点击**启用
    SSH**时，它会选择**使用密码认证**。我将继续使用此设置，但我们也可以配置为**仅允许公钥认证**。如果我们点击**保存**，会收到警告，提醒我们目标
    SDHC 卡上的所有数据将被覆盖，并要求我们确认此操作。一旦确认，几分钟后，我们会收到一个**写入成功**的弹窗，告诉我们可以移除 SDHC 卡。让我们照做——将其插入
    Pi 并开机。**SERVICES**选项卡在以下截图中显示：
- en: '![Figure 15.7 – The Raspberry Pi Imager SERVICES tab](img/B17600_15_7.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.7 – Raspberry Pi Imager 的 SERVICES 选项卡](img/B17600_15_7.jpg)'
- en: Figure 15.7 – The Raspberry Pi Imager SERVICES tab
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.7 – Raspberry Pi Imager 的 SERVICES 选项卡
- en: 'Once the Pi has booted up, we should be able to see it on the network if our
    client is on the same subnet. To test this, in a PowerShell session on our client,
    type the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Pi 启动，我们应该能够在网络上看到它，前提是我们的客户端与 Pi 在同一个子网内。为了测试这一点，在客户端的 PowerShell 会话中，输入以下内容：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We should see the IPv6 and IPv4 addresses, as well as a lot of other information:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该能看到 IPv6 和 IPv4 地址，以及许多其他信息：
- en: '![Figure 15.8 – Confirming the presence of my Pi](img/B17600_15_8.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.8 – 确认我的 Pi 是否存在](img/B17600_15_8.jpg)'
- en: Figure 15.8 – Confirming the presence of my Pi
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.8 – 确认我的 Pi 是否存在
- en: As we can see, my Pi has got its IP addresses, as expected, and I can now connect
    to it.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我的 Pi 已经获得了它的 IP 地址，正如预期的那样，现在我可以连接到它。
- en: Let’s try it out.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试吧。
- en: Connecting to the Pi with PowerShell
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 PowerShell 连接到 Pi
- en: 'In the PowerShell session on the client, type the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端的 PowerShell 会话中，输入以下内容：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Alternatively, you can type the following if your usernames are different on
    the client and the host:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果客户端和主机上的用户名不同，你可以输入以下内容：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following screenshot shows what the process looks like:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了该过程的样子：
- en: '![Figure 15.9 – Using SSH to connect to the Pi](img/B17600_15_9.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.9 – 使用 SSH 连接到 Pi](img/B17600_15_9.jpg)'
- en: Figure 15.9 – Using SSH to connect to the Pi
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.9 – 使用 SSH 连接到 Pi
- en: On line 1, we started an SSH session to the Pi with the `ssh` `poshpi` command.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 1 行，我们使用 `ssh` `poshpi` 命令开始了一个 SSH 会话连接到 Pi。
- en: On line 2, we were prompted to agree to connect since the authenticity of the
    Pi can’t be determined. We’re probably OK to type `yes` here; note that typing
    `Y` on its own won’t work.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 2 行，我们被提示同意连接，因为无法验证 Pi 的真实性。我们大概可以在这里输入 `yes`；请注意，单独输入 `Y` 是无效的。
- en: On line 3, we’re asked to input the password for the user – in my case, this
    is `nickp`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 3 行，我们被要求输入用户的密码——在我的情况下，这是 `nickp`。
- en: On line 4, we’re presented with the bash prompt from the Pi – that is, `nickp@poshpi.local:~
    $`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 4 行，我们看到来自 Pi 的 bash 提示符——即 `nickp@poshpi.local:~ $`。
- en: 'Now, we need to install PowerShell. We can do that in the same way we did it
    earlier – that is, by copying the contents of the Microsoft script into the command
    line or creating a bash script with it in nano. Once it’s finished, we can start
    PowerShell with the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要安装 PowerShell。我们可以像之前那样安装——也就是通过将微软脚本的内容复制到命令行，或者在 nano 中创建一个 bash 脚本。安装完成后，我们可以使用以下命令启动
    PowerShell：
- en: '[PRE6]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Alternatively, we can create a **symbolic link** (**symlink**), like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们可以创建一个**符号链接**（**symlink**），像这样：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, all we need to type in the future is `pwsh`, like so:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，未来我们只需输入 `pwsh`，就像这样：
- en: '![Figure 15.10 – Setting up a symlink to run PowerShell](img/B17600_15_10.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.10 – 设置符号链接以运行 PowerShell](img/B17600_15_10.jpg)'
- en: Figure 15.10 – Setting up a symlink to run PowerShell
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.10 – 设置符号链接以运行 PowerShell
- en: On line 1, we created a symlink, while on line 2, we started PowerShell.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 1 行，我们创建了一个符号链接，在第 2 行，我们启动了 PowerShell。
- en: On line 3, we’re running PowerShell on Linux via the `PS /home/nickp>` prompt;
    we can call the `$PSVersionTable` variable to see what version of PowerShell we’re
    running.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 3 行，我们正在通过`PS /home/nickp>`提示符在 Linux 上运行 PowerShell；我们可以调用`$PSVersionTable`变量查看我们运行的
    PowerShell 版本。
- en: Finally, on line 4, we used *Ctrl* + *Break* to drop out of the SSH session
    and go back to the PowerShell session running on the Windows client – `PS C:\users\nickp>`
    – on line 5\. We can also use *Ctrl* + *D* to log out of the session.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在第 4 行，我们使用*Ctrl* + *Break*退出 SSH 会话并返回到在 Windows 客户端上运行的 PowerShell 会话——`PS
    C:\users\nickp>`——在第 5 行。我们还可以使用*Ctrl* + *D*注销会话。
- en: 'Great! Let’s look at another way to connect to our headless Pi: with VS Code.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！让我们来看另一种连接到无头 Pi 的方法：使用 VS Code。
- en: Connecting to the Pi with VS Code
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 VS Code 连接到 Pi
- en: 'This method will work with any machine we want to connect to with SSH, including
    Linux. We’re going to use a VS Code extension called `Remote-SSH` in the search
    bar, as shown here:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法适用于我们希望通过 SSH 连接的任何计算机，包括 Linux。我们将使用一个名为`Remote-SSH`的 VS Code 扩展，在搜索栏中输入，如下所示：
- en: '![Figure 15.11 – Installing the Remote – SSH extension](img/B17600_15_11.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.11 – 安装 Remote – SSH 扩展](img/B17600_15_11.jpg)'
- en: Figure 15.11 – Installing the Remote – SSH extension
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.11 – 安装 Remote – SSH 扩展
- en: Once you’ve found the extension, click on it, then click **Install** in the
    center pane, as shown in the preceding screenshot.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 找到扩展后，点击它，然后在中间窗格点击**安装**，如前面的截图所示。
- en: 'Once we’ve done this, we’ve have a desktop icon in the left-hand sidebar. We
    can click on that to open the **Remote Explorer** window and set up an SSH connection
    to the Pi. We’ll be asked to choose what sort of remote we want – a remote machine
    or a WSL target. We want a remote machine, so select that, and then click on **SSH**:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，我们将在左侧边栏中看到一个桌面图标。点击该图标可以打开**远程资源管理器**窗口并设置与 Pi 的 SSH 连接。我们将被要求选择远程类型——远程计算机或
    WSL 目标。我们选择远程计算机，所以选择它，然后点击**SSH**：
- en: '![Figure 15.12 – Selecting SSH](img/B17600_15_12.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.12 – 选择 SSH](img/B17600_15_12.jpg)'
- en: Figure 15.12 – Selecting SSH
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.12 – 选择 SSH
- en: 'Click on the `ssh <username>@<hostname>`. In my case, I typed the following
    and pressed *Enter*:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 点击`ssh <username>@<hostname>`。在我的情况下，我输入了以下内容并按下*Enter*：
- en: '[PRE8]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, we’ll be asked to choose an SSH config file to update. I’m updating my
    personal file, `C:\Users\nickp\.ssh\config`. Then, we’ll see a message box telling
    us **Host added!**. In the **REMOTE EXPLORER** area, click the refresh icon next
    to **REMOTES (TUNNELS/SSH)**, as highlighted in green in *Figure 15**.13*; we
    should see our new host appear in the **SSH** subsection with two icons next to
    it – one to open the host in the existing window, which is depicted with an arrow,
    and another to open in a new window, as highlighted in red. Click the *Connect
    in a New* *Window* icon:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将被要求选择一个 SSH 配置文件来更新。我正在更新我的个人文件，`C:\Users\nickp\.ssh\config`。然后，我们将看到一个消息框提示我们**主机已添加！**
    在**远程资源管理器**区域，点击**远程（隧道/SSH）**旁边的刷新图标，如*图 15.13*中绿色高亮显示的部分；我们应该会看到新主机出现在**SSH**子部分，旁边有两个图标——一个用箭头表示的是打开当前窗口中的主机，另一个用红色高亮显示的是在新窗口中打开。点击*新窗口中连接*图标：
- en: '![Figure 15.13 – Opening a connection to the Pi](img/B17600_15_13.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.13 – 打开与 Pi 的连接](img/B17600_15_13.jpg)'
- en: Figure 15.13 – Opening a connection to the Pi
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.13 – 打开与 Pi 的连接
- en: 'Next, we’ll be asked to select the platform of the remote host; it’s Linux.
    We’ll also need to enter the password. Once we’ve done that, we’ll need to wait
    a minute or two while everything gets set up and dismiss a message window or two.
    Finally, we’ll have a new window connected to our Pi; we know this because in
    the bottom-left corner is a box saying **SSH: <hostname>**. Everything we do in
    this window is happening on the Pi. Cool, eh? This means that instead of writing
    our scripts on our client and transferring them to the Pi, we can write them directly
    to the Pi from VS Code.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，我们将被要求选择远程主机的平台；选择 Linux。我们还需要输入密码。完成后，我们需要等待一两分钟来完成设置，并关闭一两个消息窗口。最后，我们将会看到一个新窗口连接到我们的
    Pi；我们知道这一点是因为在左下角会显示一个框，里面写着**SSH: <hostname>**。在这个窗口中做的所有操作都发生在 Pi 上。很酷吧？这意味着，我们不再需要在客户端上编写脚本并将其传输到
    Pi，而是可以直接从 VS Code 编写到 Pi。'
- en: So, that’s us ready to go. We can use PowerShell in the same way we’ve been
    doing throughout this book on the Pi, but that’s not really what I use the Raspberry
    Pi for. Next, we’ll look at how we can use PowerShell on the Pi.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，准备好了。我们可以像本书中展示的那样，在 Pi 上使用 PowerShell，但那并不是我使用 Raspberry Pi 的主要目的。接下来，我们将看看如何在
    Pi 上使用 PowerShell。
- en: Running PowerShell on Raspberry Pi OS
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Raspberry Pi OS 上运行 PowerShell
- en: 'The beauty of the Raspberry Pi is just how many ways you can connect it to
    the outside world, from joystick controllers to cameras to sensors to motors to…
    ooh… *everything*. In this chapter, we’re going to look at using GPIO pins to
    make an LED blink, but first, we need to learn how we can interact with the GPIO.
    There are two options, neither of them particularly well supported. The better
    option is to install a new OS: Windows 10 IoT Core. That would take a chapter
    or two in itself, and it doesn’t really address the topic of running PowerShell
    on Raspberry Pi OS. The other way is to use the PowerShell IoT module. This hasn’t
    been updated since about 2020 and doesn’t appear to work with later versions of
    the Pi 4B, but it works reasonably well on older ones, and we can live in hope
    that it will be updated at some point. I’m going to take advantage of a Pi 3B
    I’ve got in my drawer.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi 的魅力在于它能以多种方式与外部世界连接，从摇杆控制器到相机，再到传感器、马达，甚至……哦，*所有东西*。在这一章中，我们将学习如何使用
    GPIO 引脚让 LED 闪烁，但首先，我们需要了解如何与 GPIO 交互。这里有两个选项，都不太完善。更好的选择是安装一个新的操作系统：Windows 10
    IoT Core。这本身就需要一到两章的篇幅，而且并未真正解决在 Raspberry Pi OS 上运行 PowerShell 的问题。另一种方法是使用 PowerShell
    IoT 模块。自 2020 年以来，这个模块没有更新，似乎也不支持较新的 Pi 4B 版本，但它在旧版本上运行相当不错，我们只能希望它未来能得到更新。我打算利用我抽屉里的
    Pi 3B。
- en: Installing the IoT module
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 IoT 模块
- en: 'We’re working with hardware here, so we need to start PowerShell with root
    privileges by typing the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用硬件，因此需要以 root 权限启动 PowerShell，输入以下命令：
- en: '[PRE9]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once we’re in PowerShell, we can install the module as we usually do:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入 PowerShell，我们可以像往常一样安装模块：
- en: '[PRE10]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, we’ll probably want to clone the repository from GitHub so that we
    have access to the examples. We can do this with the following command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可能需要从 GitHub 克隆仓库，这样我们就可以访问示例了。我们可以通过以下命令实现：
- en: '[PRE11]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will install all the code in the GitHub repository into a new folder below
    our chosen folder:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把 GitHub 仓库中的所有代码安装到我们选择文件夹下的新文件夹中：
- en: '![Figure 15.14 – Installing the PowerShell IoT module and cloning the GitHub
    repository](img/B17600_15_14.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.14 – 安装 PowerShell IoT 模块并克隆 GitHub 仓库](img/B17600_15_14.jpg)'
- en: Figure 15.14 – Installing the PowerShell IoT module and cloning the GitHub repository
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.14 – 安装 PowerShell IoT 模块并克隆 GitHub 仓库
- en: This gives us access to all the example modules in the `Examples` folder. This
    includes some interesting tools that we can use with various sensors, such as
    the BME280 environmental sensor.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我们可以访问 `Examples` 文件夹中的所有示例模块。里面包括一些有趣的工具，我们可以用来配合各种传感器，比如 BME280 环境传感器。
- en: 'The next step is to import the module and check that it’s working:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是导入模块并检查它是否正常工作：
- en: '[PRE12]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And with a bit of luck, we’ll see something similar to the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运气好的话，我们会看到类似以下的内容：
- en: '![Figure 15.15 – Importing the module and checking the voltage on a given GPIO
    pin](img/B17600_15_15.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.15 – 导入模块并检查给定 GPIO 引脚的电压](img/B17600_15_15.jpg)'
- en: Figure 15.15 – Importing the module and checking the voltage on a given GPIO
    pin
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.15 – 导入模块并检查给定 GPIO 引脚的电压
- en: Shall we explore the cmdlets we get in this module?
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们是否要探索一下这个模块中的 cmdlet？
- en: Exploring the IoT module
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索 IoT 模块
- en: 'Inside the IoT module, there are six cmdlets for working with the three I/O
    interfaces on the Pi: simple GPIO, I2C, and **Synchronous Peripheral Interface**
    (**SPI**). Confusingly, all three interfaces use the GPIO pins. This can sometimes
    make it difficult to choose which pins we wish to use for what purpose:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IoT 模块中，有六个 cmdlet 用于操作 Pi 上的三种 I/O 接口：简单 GPIO、I2C 和 **同步外设接口** (**SPI**)。令人困惑的是，这三个接口都使用
    GPIO 引脚。这有时会使我们很难选择哪些引脚用于特定的目的：
- en: Simple GPIO reads or sets the voltage on a specific GPIO pin with a pair of
    cmdlets called `Get-GpioPin` and `Set-GpioPin`. We’ll be using this shortly.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单的 GPIO 读取或设置特定 GPIO 引脚的电压，使用一对名为 `Get-GpioPin` 和 `Set-GpioPin` 的 cmdlet。我们很快就会使用到这个。
- en: I2C uses the `Get-I2CRegister` and `Set-I2CRegister`, there is also a `Get-I2CDevice`
    cmdlet.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: I2C 使用 `Get-I2CRegister` 和 `Set-I2CRegister`，还有一个 `Get-I2CDevice` cmdlet。
- en: 'Finally, there is the SPI. This is quite complex, and we’re not going to cover
    it in this book. There is only one cmdlet: `Send-SPIData`.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后是 SPI。这相当复杂，我们在本书中不打算深入探讨。这里只有一个 cmdlet：`Send-SPIData`。
- en: 'Let’s take a closer look at the five cmdlets we’re going to use the most. The
    helpfiles for these cmdlets can be found in the `/home/<username>/PowerShell-IoT/docs/help/`
    folder, but let’s cover their basic uses here:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看我们最常使用的五个 cmdlet。这些 cmdlet 的帮助文件可以在 `/home/<username>/PowerShell-IoT/docs/help/`
    文件夹中找到，但我们在这里简单介绍它们的基本用法：
- en: '`Get-GpioPin`: This cmdlet gets the voltage from a specified GPIO pin. There
    are three parameters:'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Get-GpioPin`：此 cmdlet 获取指定 GPIO 引脚的电压。它有三个参数：'
- en: '`-Id`, which takes an Int32 value and specifies which GPIO pin we want to look
    at.'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-Id`，它接受一个 Int32 值，指定我们要查看的 GPIO 引脚。'
- en: '`-PullMode`, which may be set to `Off`, `PullDown`, or `PullUp`, and may be
    needed with some chipsets, but not the Pi. The default value is `Null`.'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-PullMode`，可以设置为 `Off`、`PullDown` 或 `PullUp`，某些芯片组可能需要此设置，但树莓派不需要。默认值为 `Null`。'
- en: A `-Raw` switch, which returns a value of `High` or `Low`.
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `-Raw` 开关，它返回 `High` 或 `Low` 的值。
- en: '`Set-GpioPin`: This cmdlet sets the voltage on a specified pin to `High` or
    `Low`. It has three parameters:'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Set-GpioPin`：此 cmdlet 将指定引脚的电压设置为 `High` 或 `Low`。它有三个参数：'
- en: '`-Id`, which takes an `Int32` value and specifies the pin.'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-Id`，它接受一个 `Int32` 值，指定引脚。'
- en: '`-Value`, which takes either `High` or `Low`.'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-Value`，它接受 `High` 或 `Low` 值。'
- en: '`-PassThru`, which, by default, results in the cmdlet returning nothing. If
    we want it to return a PowerShell object confirming that the value was set, then
    we can use this parameter.'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-PassThru`，默认情况下，该 cmdlet 不返回任何内容。如果我们希望它返回一个 PowerShell 对象，确认已设置该值，那么可以使用此参数。'
- en: '`Get-I2CDevice`: This cmdlet creates an I2C device object with a friendly name
    that we can then use with the `*-I2Cregister` cmdlets. It has two parameters:'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Get-I2CDevice`：此 cmdlet 创建一个 I2C 设备对象，并为其分配一个友好的名称，之后可以与 `*-I2Cregister` cmdlet
    一起使用。它有两个参数：'
- en: '`-Id`, which takes an `Int32` value and specifies the address of the device'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-Id`，它接受一个 `Int32` 值，并指定设备的地址'
- en: '`-FriendlyName`, which we use to assign a string to the device'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-FriendlyName`，用于为设备分配一个字符串'
- en: '`Get-I2Cregister`: This cmdlet gets the value held in a register on a particular
    device. There are four parameters:'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Get-I2Cregister`：此 cmdlet 获取特定设备上寄存器中的值。它有四个参数：'
- en: '`-Device`, which takes an I2C device object'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-Device`，它接受一个 I2C 设备对象'
- en: '`-Register`, which takes a `Uint16` value that specifies the register on the
    device we want to read'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-Register`，它接受一个 `Uint16` 值，指定我们要读取的设备上的寄存器'
- en: '`-Raw`, which returns the value stored in the register, rather than an `I2CdeviceRegisterData`
    object'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-Raw`，它返回寄存器中存储的值，而不是 `I2CdeviceRegisterData` 对象'
- en: '`-Bytecount`, which takes a byte value and specifies the number of bytes expected
    in the data'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-Bytecount`，它接受一个字节值，并指定数据中预期的字节数'
- en: '`Set-I2Cregister`: This cmdlet sets the register value on a device. There are
    four parameters:'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Set-I2Cregister`：此 cmdlet 设置设备上的寄存器值。它有四个参数：'
- en: '`-Device`, which takes an I2C device object.'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-Device`，它接受一个 I2C 设备对象。'
- en: '`-Register`, which takes a `Uint16` value that specifies the register on the
    device we want to set.'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-Register`，它接受一个 `Uint16` 值，指定我们要设置的设备上的寄存器。'
- en: '`-Data`, a value in bytes to be written to the register.'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-Data`，一个字节值，用于写入寄存器。'
- en: '`-PassThru`, which, by default, results in the cmdlet returning nothing. If
    we want it to return a PowerShell object confirming that the value was set, then
    we can use this parameter.'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-PassThru`，默认情况下，该 cmdlet 不返回任何内容。如果我们希望它返回一个 PowerShell 对象，确认已设置该值，那么可以使用此参数。'
- en: And that’s it. The best way to see how they work is to get on and play with
    them.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。最好的方法是亲自上手并尝试，看看它们如何工作。
- en: Simple physical computing
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单的物理计算
- en: 'Physical computing on the Raspberry Pi uses the GPIO pins on the right of the
    board, as shown here:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi 的物理计算使用的是板子右侧的 GPIO 引脚，如下所示：
- en: '![Figure 15.16 – The GPIO pins of the Raspberry Pi](img/B17600_15_16.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.16 – Raspberry Pi 的 GPIO 引脚](img/B17600_15_16.jpg)'
- en: Figure 15.16 – The GPIO pins of the Raspberry Pi
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.16 – Raspberry Pi 的 GPIO 引脚
- en: The important things to remember are that the ground pins are negative and the
    voltage pins, 3V3 and 5V, are positive and always on. While the GPIO pins may
    have secondary specialist purposes, they are the ones we can turn on and off –
    they will deliver a positive current.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的重要事项是，接地引脚为负，电压引脚 3V3 和 5V 为正且始终开启。虽然 GPIO 引脚可能有其他特殊用途，但它们是我们可以开关的引脚——它们会输出正电流。
- en: 'When we’re learning a new programming language, we start with the simplest
    possible program – *Hello World*:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们学习一种新的编程语言时，通常会从最简单的程序开始——*Hello World*：
- en: '[PRE13]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In Python, we can write the following:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，我们可以编写如下代码：
- en: '[PRE14]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Physical computing is slightly different – we write a program to make an LED
    blink on and off. It doesn’t seem to matter what the platform is; this is where
    we start. For instance, the program to get an Arduino to blink an LED is written
    in C and looks like this:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 物理计算稍微不同——我们编写一个程序让LED闪烁。平台似乎无关紧要，这就是我们开始的地方。例如，让Arduino闪烁LED的程序是用C语言写的，类似这样：
- en: '[PRE15]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`v``oid setup()` initializes the onboard LED as an output and runs once each
    time the Arduino is reset. The `void loop()` command sets up a loop that runs
    continuously while the Arduino is switched on (`void` just tells the Arduino not
    to produce an output). The `digitalwrite()` commands set the voltage to the output
    as `HIGH` (on) or `LOW` (off). This looks pretty similar on the Raspberry Pi in
    Python:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`v``oid setup()`初始化板载LED为输出，并在每次重置Arduino时运行一次。`void loop()`命令设置了一个在Arduino打开时持续运行的循环（`void`只是告诉Arduino不产生输出）。`digitalwrite()`命令将电压设置为`HIGH`（开）或`LOW`（关）。在树莓派上，这在Python中看起来也很相似：'
- en: '[PRE16]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let’s try it in PowerShell. First, we’ll need to set up our hardware according
    to the following diagram:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在PowerShell中试试。首先，我们需要根据以下示意图设置硬件：
- en: '![Figure 15.17 – How to set up the components](img/B17600_15_17.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图15.17 – 如何设置组件](img/B17600_15_17.jpg)'
- en: Figure 15.17 – How to set up the components
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.17 – 如何设置组件
- en: The LED will have two legs on it, one longer than the other. The longer leg
    needs to be connected to the positive side of the circuit, and the shorter leg
    needs to be on the negative or ground side. The current the Pi sends is too high
    for the LED, so we need to use a resistor of around 300-400 Ohms to drop it slightly.
    More than 1K Ohms will possibly stop the LED from lighting, and less than 200
    risks burning it out, if it’s cheap. The breadboard sockets are connected in columns
    of five, so the resistor spans two columns here.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: LED上会有两条腿，其中一条比另一条长。长腿需要连接到电路的正极，短腿需要连接到负极或接地端。树莓派输出的电流对LED来说太高，所以我们需要使用大约300-400欧姆的电阻来稍微降低电流。如果电阻大于1K欧姆，可能会导致LED不亮；如果小于200欧姆，电流过大可能会烧坏LED（如果LED比较便宜的话）。面包板插孔是按五列连接的，因此电阻会跨越两列。
- en: Now, we need to write some PowerShell code to turn the LED on and off. Let’s
    connect to the Pi using VS Code SSH remoting and open a new document. Call it
    `blink.ps1`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要编写一些PowerShell代码来控制LED的开关。让我们使用VS Code的SSH远程连接到树莓派，打开一个新文档，命名为`blink.ps1`。
- en: 'Let’s start by importing the IoT module:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先导入IoT模块：
- en: '[PRE17]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, we’re going to need a loop that always runs:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要一个始终运行的循环：
- en: '[PRE18]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this loop, we’re going to need to turn the LED on and off using `Set-GpioPin`.
    If you followed the preceding diagram, you should be using pin 17.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个循环中，我们需要使用`Set-GpioPin`来控制LED的开关。如果你遵循了前面的示意图，你应该使用17号引脚。
- en: 'We’ll also need to use `Start-Sleep` to wait between each command; otherwise,
    we’ll blow the LED up:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要使用`Start-Sleep`来在每个命令之间等待；否则我们可能会把LED烧坏：
- en: '[PRE19]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'I’ve added a couple of output lines here so that I can reasonably demonstrate
    this without using a YouTube link. Running it looks like this in VS Code:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里添加了几行输出代码，以便我能够在不使用YouTube链接的情况下合理展示。运行结果在VS Code中是这样的：
- en: '![Figure 15.18 – Blinkin’ LEDs](img/B17600_15_18.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图15.18 – 闪烁的LED](img/B17600_15_18.jpg)'
- en: Figure 15.18 – Blinkin’ LEDs
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.18 – 闪烁的LED
- en: As we can see, the LED’s state changes once a second; this will continue until
    the script is stopped manually. We can see how it compares to the programs we
    saw for the Arduino, in C, and the Python program.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，LED的状态每秒变化一次；直到手动停止脚本，它将继续变化。我们可以看到它与我们为Arduino编写的C程序和Python程序进行比较的方式。
- en: There’s also an example LED module in the `Examples` folder – it’s well worth
    taking a look to see how they’ve done it in there.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`Examples`文件夹中还有一个LED模块示例——非常值得看看，看看他们是如何做的。'
- en: That about wraps it up for this chapter. Let’s summarize what we’ve learned.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章差不多就到这里了。让我们总结一下我们学到的内容。
- en: Summary
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We started this chapter by taking a quick look at the Raspberry Pi, including
    what it does, what it was designed to do, and how people use it. We looked at
    the different series; the main B series single board computers, the Zero mini
    version, and the Pico single chip board. We learned that we can only install PowerShell
    on the B series since the architecture of the chip is wrong on the Zero and Pico
    series.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从快速了解树莓派开始，包括它的功能、设计用途以及人们如何使用它。我们看了不同的系列；主要的B系列单板计算机、Zero迷你版以及Pico单芯片板。我们了解到，由于Zero和Pico系列的芯片架构不匹配，我们只能在B系列上安装PowerShell。
- en: Next, we looked at different ways of installing PowerShell on the Pi using a
    script provided by Microsoft. Then, we saw how easy it is to install VS Code on
    the Pi since it is included in the official Raspberry Pi repositories.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们查看了使用 Microsoft 提供的脚本在 Pi 上安装 PowerShell 的不同方法。然后，我们发现安装 VS Code 在 Pi
    上是如此简单，因为它已包含在官方的 Raspberry Pi 仓库中。
- en: While there are Raspberry Pi models that are suitable as desktop PC replacements,
    most people will use the Raspberry Pi without a screen or mouse – that is, in
    headless mode. We looked at how to set up a Raspberry Pi in headless mode, and
    then how to connect to it from PowerShell with SSH, before going on to look at
    a convenient way to work directly on the Pi with VS Code.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有一些适合作为桌面 PC 替代品的 Raspberry Pi 型号，但大多数人将使用没有屏幕或鼠标的 Raspberry Pi —— 即在无头模式下。我们了解了如何在无头模式下设置
    Raspberry Pi，然后如何通过 PowerShell 使用 SSH 连接到它，接着再看了如何通过 VS Code 直接在 Pi 上方便地工作。
- en: 'Then, we discussed one of the most popular use cases for the Pi: physical computing.
    This is where we interact with sensors and objects in the physical world. We looked
    at the Microsoft module for interacting with the GPIO on the Raspberry Pi and
    finished up with a script that can be used to make an LED blink on and off.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们讨论了 Pi 最受欢迎的应用案例之一：物理计算。这是我们与物理世界中的传感器和物体进行交互的地方。我们查看了 Microsoft 模块，用于与
    Raspberry Pi 上的 GPIO 进行交互，并通过一个脚本来实现 LED 闪烁的功能。
- en: That’s it for the environments we’re going to look at. In the next and final
    chapter, we’re going to look at how we can access the .NET system that PowerShell
    is built on and look at what our next steps could be.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们将要查看的所有环境内容。在下一章也是最后一章中，我们将探讨如何访问 PowerShell 所依赖的 .NET 系统，并讨论接下来的步骤。
- en: Questions
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Why can’t we install PowerShell on the Raspberry Pi Zero or Pico?
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们不能在 Raspberry Pi Zero 或 Pico 上安装 PowerShell？
- en: Where is the SSH configuration stored for VS Code on a Windows machine?
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: VS Code 在 Windows 机器上的 SSH 配置存储在哪里？
- en: What is the PowerShell cmdlet for testing network connectivity to another device
    from the Raspberry Pi?
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于测试 Raspberry Pi 与另一台设备的网络连接的 PowerShell cmdlet 是什么？
- en: How do you create an SSH connection to a headless Pi from PowerShell?
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何从 PowerShell 创建到无头 Pi 的 SSH 连接？
- en: We’ve saved our install script as `Install.sh`. How do we run it?
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经将安装脚本保存为 `Install.sh`。我们该如何运行它？
- en: Why might we want to create a symlink to the `pwsh` executable?
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们可能要创建指向 `pwsh` 可执行文件的符号链接？
- en: How might we create a symlink to `pwsh`?
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何创建指向 `pwsh` 的符号链接？
- en: How would we get a value of `High` or `Low` from a GPIO pin?
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何从 GPIO 引脚获取 `High` 或 `Low` 的值？
- en: What sort of OS is Raspberry Pi OS?
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Raspberry Pi OS 是什么样的操作系统？
- en: Further reading
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'OctaPi cluster computer: [https://projects.Raspberrypi.org/en/projects/build-an-octapi](https://projects.Raspberrypi.org/en/projects/build-an-octapi)'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OctaPi 集群计算机：[https://projects.Raspberrypi.org/en/projects/build-an-octapi](https://projects.Raspberrypi.org/en/projects/build-an-octapi)
- en: 'Oracle’s 1050-node Pi supercomputer: [https://blogs.oracle.com/developers/post/building-the-worlds-largest-Raspberry-pi-cluster](https://blogs.oracle.com/developers/post/building-the-worlds-largest-Raspberry-pi-cluster)'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle 的 1050 节点 Pi 超级计算机：[https://blogs.oracle.com/developers/post/building-the-worlds-largest-Raspberry-pi-cluster](https://blogs.oracle.com/developers/post/building-the-worlds-largest-Raspberry-pi-cluster)
- en: 'Community support for PowerShell on Linux: [https://learn.microsoft.com/en-us/powershell/scripting/install/community-support](https://learn.microsoft.com/en-us/powershell/scripting/install/community-support)'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 上 PowerShell 的社区支持：[https://learn.microsoft.com/en-us/powershell/scripting/install/community-support](https://learn.microsoft.com/en-us/powershell/scripting/install/community-support)
- en: 'PowerShell on ARM processors: [https://learn.microsoft.com/en-us/powershell/scripting/install/powershell-on-arm](https://learn.microsoft.com/en-us/powershell/scripting/install/powershell-on-arm)'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ARM 处理器上的 PowerShell：[https://learn.microsoft.com/en-us/powershell/scripting/install/powershell-on-arm](https://learn.microsoft.com/en-us/powershell/scripting/install/powershell-on-arm)
- en: 'VS Code on the Pi: [https://code.visualstudio.com/docs/setup/raspberry-pi](https://code.visualstudio.com/docs/setup/raspberry-pi)'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Pi 上的 VS Code：[https://code.visualstudio.com/docs/setup/raspberry-pi](https://code.visualstudio.com/docs/setup/raspberry-pi)
- en: 'VS Code remote SSH: [https://code.visualstudio.com/docs/remote/ssh-tutorial](https://code.visualstudio.com/docs/remote/ssh-tutorial)'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VS Code 远程 SSH：[https://code.visualstudio.com/docs/remote/ssh-tutorial](https://code.visualstudio.com/docs/remote/ssh-tutorial)
- en: 'PowerShell IoT module on GitHub: [https://github.com/PowerShell/PowerShell-IoT](https://github.com/PowerShell/PowerShell-IoT)'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub 上的 PowerShell IoT 模块：[https://github.com/PowerShell/PowerShell-IoT](https://github.com/PowerShell/PowerShell-IoT)
- en: 'An overview of Windows for IoT: [https://learn.microsoft.com/en-us/windows/iot/product-family/windows-iot](https://learn.microsoft.com/en-us/windows/iot/product-family/windows-iot)'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows for IoT概述：[https://learn.microsoft.com/en-us/windows/iot/product-family/windows-iot](https://learn.microsoft.com/en-us/windows/iot/product-family/windows-iot)
- en: 'Windows 10 IoT Core on Raspberry Pi:'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 10 IoT Core在树莓派上的应用：
- en: '[https://cdn-learn.adafruit.com/downloads/pdf/getting-started-with-windows-iot-on-raspberry-pi.pdf](https://cdn-learn.adafruit.com/downloads/pdf/getting-started-with-windows-iot-on-raspberry-pi.pdf)'
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://cdn-learn.adafruit.com/downloads/pdf/getting-started-with-windows-iot-on-raspberry-pi.pdf](https://cdn-learn.adafruit.com/downloads/pdf/getting-started-with-windows-iot-on-raspberry-pi.pdf)'
- en: '[https://devblogs.microsoft.com/premier-developer/getting-started-with-windows-10-iot-core-raspberry-pi-3b/](https://devblogs.microsoft.com/premier-developer/getting-started-with-windows-10-iot-core-raspberry-pi-3b/)'
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://devblogs.microsoft.com/premier-developer/getting-started-with-windows-10-iot-core-raspberry-pi-3b/](https://devblogs.microsoft.com/premier-developer/getting-started-with-windows-10-iot-core-raspberry-pi-3b/)'
- en: 'Raspberry Pi Configuration documentation: [https://www.raspberrypi.com/documentation/computers/configuration.html](https://www.raspberrypi.com/documentation/computers/configuration.html)'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派配置文档：[https://www.raspberrypi.com/documentation/computers/configuration.html](https://www.raspberrypi.com/documentation/computers/configuration.html)
- en: 'I2C overview:'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: I2C概述：
- en: '[https://en.wikipedia.org/wiki/I%C2%B2C](https://en.wikipedia.org/wiki/I%C2%B2C)'
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/I%C2%B2C](https://en.wikipedia.org/wiki/I%C2%B2C)'
- en: '[https://learn.sparkfun.com/tutorials/i2c/all](https://learn.sparkfun.com/tutorials/i2c/all)'
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://learn.sparkfun.com/tutorials/i2c/all](https://learn.sparkfun.com/tutorials/i2c/all)'
- en: 'SPI overview: [https://learn.sparkfun.com/tutorials/serial-peripheral-interface-spi/all](https://learn.sparkfun.com/tutorials/serial-peripheral-interface-spi/all)'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SPI概述：[https://learn.sparkfun.com/tutorials/serial-peripheral-interface-spi/all](https://learn.sparkfun.com/tutorials/serial-peripheral-interface-spi/all)
