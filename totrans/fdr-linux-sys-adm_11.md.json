["```\n    [root@workstation ~]# dnf install policycoreutils-sandbox\n    ```", "```\n    [root@workstation ~]# setenforce 0\n    [root@workstation ~]# getenforce\n    Permissive\n    ```", "```\n    $ sandbox command runs its own *X server* (-X) and enables policy enforcement for network and browser usage (-t sandbox_net -t sandbox_web_t). Set up sandbox and run firefox in a *1280x1024 window* (-w 1280x1024 firefox):\n    ```", "```\n    $ ps auf | grep firefox\n    acallej+   30511  0.0  0.9 ...output omitted...\n    ```", "```\n    $ top -p 30511\n    ```", "```\n    $ sandbox -X -t sandbox_net -t sandbox_web_t -w 1280x1024 firefox\n    ```", "```\n$ -i /home/acallejas/findings.pdf).\nNote\nFor more information on the use of the **sandbox** command, refer to the **manual** by running **man sandbox**.\nThe SELinux sandbox is one of the most basic ways to isolate an application. Using this idea, it is now taken a step further using different frameworks or forms to package the applications to make them portable to different environments, easing their installation.\nLet’s look at the most common examples of sandbox applications: **AppImages** and **Flatpaks**.\nDiving deep into AppImage apps\nIntroduced in 2004 as **klik** by *Simon Peter* and renamed in 2011 as **PortableLinuxApp**, it was finally named in 2013 as we know it today: **AppImage**.\n**AppImage** is a universal portable distribution format, also known as *upstream packaging*.\nAppImages, as portable applications, do not need installation by the user. They also do not need administrator privileges to run. The user downloads the AppImage and assigns it execution permissions, and the application starts.\nFor a developer, creating AppImages is quite simple. An AppImage consists of a program package with dependency libraries and all the resources it needs during runtime.\nAppImages are unique binaries, following the basic principle of *one application =* *one file*.\nThe tools to generate an AppImage from an **AppDir**. They are aware of possible incompatibilities between distributions and try to avoid them.\nOnce the AppImage is built, it runs on all major desktop distributions.\nLet’s see how to run an AppImage as a user. Then, let’s walk through the development of an AppImage.\nRunning an AppImage\nAn AppImage is an image of the application.When you are running it, it mounts on the filesystem in the user space. Just give it *execution permissions* and double-click on it.\nAppImages do not have an *application store* from which to download them, but there is a place to find and download hundreds of applications, known as **AppImageHub** ([https://appimage.github.io/apps/](https://appimage.github.io/apps/)).\nFor example, to download the developer version of **Firefox Nightly** and test new features without installing it, follow the subsequent steps:\n\n1.  Open the Firefox browser and go to [https://appimage.github.io/apps/](https://appimage.github.io/apps/). Press the *Ctrl* + *F* key combination and search for the **firefox** string:\n\n![Figure 6.6 – Searching for the Firefox Nightly AppImage](img/B19121_06_6.jpg)\n\nFigure 6.6 – Searching for the Firefox Nightly AppImage\n\n1.  Click on the **Firefox_Nightly** link:\n\n![Figure 6.7 – Firefox_Nightly download window](img/B19121_06_7.jpg)\n\nFigure 6.7 – Firefox_Nightly download window\nScroll down and click on the **Download** button.\n\n1.  This button takes us to the GitHub repository where the AppImage resides. Click on the *latest version* to download it:\n\n![Figure 6.8 – Latest version in AppImage format](img/B19121_06_8.jpg)\n\nFigure 6.8 – Latest version in AppImage format\nWait for the download to finish.\n\n1.  Open a terminal and switch to the **Downloads** directory. Review the downloaded AppImage by running a long listing. Use the **ls** command:\n\n![Figure 6.9 – Checking the AppImage](img/B19121_06_9.jpg)\n\nFigure 6.9 – Checking the AppImage\n\n1.  Grant *execution permissions* to AppImage using the **chmod** command:\n\n    ```", "```\n\n     2.  Open the file browser and change parent directory to the **Downloads** directory. Right-click on the AppImage icon and click on **Properties**. Verify that the **Executable as program** switch button is enabled:\n\n![Figure 6.10 – AppImage properties](img/B19121_06_10.jpg)\n\nFigure 6.10 – AppImage properties\n\n1.  Close the **Properties** window by clicking on **X** in the upper-right corner.\n2.  Double-click on the AppImage icon. The Firefox Nightly window opens:\n\n![Figure 6.11 – Firefox Nightly on AppImage](img/B19121_06_11.jpg)\n\nFigure 6.11 – Firefox Nightly on AppImage\nWith these simple steps, the application runs without being installed. If we prefer, we could create a *launcher* and add it to the shortcuts of the taskbar.\nLet’s see now how to develop AppImages.\nDeveloping AppImages\nDeveloping AppImages is very simple. The **AppImage** project provides **AppImageKit**,  an implementation of the AppImage format focused on the *tiny runtime* of each one.\nNote\nAppImageKit is available to download at [https://github.com/AppImage/AppImageKit/releases/continuous](https://github.com/AppImage/AppImageKit/releases/continuous).\nThe core components of AppImageKit are as follows:\n\n*   **runtime**: The runtime provides an executable header for an AppImage. The runtime mounts the filesystem image to a temporary location. Such a filesystem image is called an *AppDir*. It then launches the payload application. Downloading it is not required.\n*   **Appimagetool**: This creates the AppImages by embedding the runtime and attaching the AppDir inside it. This tool comes as an AppImage.\n*   **AppRun**: This provides the entry point of the AppImage. The runtime executes this file inside the AppDir. It doesn’t need to be a regular file; it could be a symlink to the main binary.\n\nNote\nThe project adds and deprecates extra tools in the AppImageKit all the time, even those from third parties. So, keep an eye out for updates to the GitHub repository.\nTo create an AppImage, according to the project documentation, follow these steps:\n\n1.  Download **appimagetool** using the **wget** command:\n\n    ```", "```\n\n     2.  Add execution permissions with the **chmod** command:\n\n    ```", "```\n\n     3.  To create the AppDir, use a high-level tool such as **linuxdeployqt**. Assuming that the AppDir already has everything needed to run the application, run the **appimagetool** command to generate the AppImage:\n\n    ```", "```\n\nWith this simple procedure, the new AppImage is created and ready to distribute.\nNote\nFor more information on the use of AppImageKit, refer to the GitHub repository at [https://github.com/AppImage/AppImageKit](https://github.com/AppImage/AppImageKit).\nSo, now we know how to create and use AppImages, it’s time to look at the proposal drawn up by the Fedora Project itself. Let’s take a walk through the **flatpaks**.\nExamining Flatpak applications\n**First** is one of Fedora’s founding principles, so **Fedora Linux** is always on the *cutting edge*.\nFlatpak is a new distribution-independent format for packaging and distributing Linux desktop applications.\nThe main goals of Flatpak include the following:\n\n*   Create a single installation file that could be distributed to users of all distributions\n*   Run applications that are as isolated as possible from the rest of the system\n\nThe biggest benefit to users is the ability to run any application, regardless of the version of Fedora Linux they use.\nIts development name was `xdg-app` and it was renamed **Flatpak** in 2016 to reflect the fact that it became ready for wider use.\nFlatpak is a system for building, distributing, and running sandboxed desktop applications on Linux.\nFlatpak applications are installed through the `flatpak` command or through a GUI such as **GNOME Software** or **KDE Discover**.\n**Flatpak** introduces some basic concepts, such as the following:\n\n*   **Runtime**: A platform that provides the basic utilities needed for a Flatpak application to run.\n*   **BaseApp**: An integrated platform for frameworks such as *Electron*.\n*   **Flatpak bundle**: A specific export format for a single file. It contains one application. It is also known as *Flatpak runtime*.\n*   **Sandboxes**: Applications build and run in an isolated environment. Only the content of the sandbox can be accessed by the program. Access to other resources, such as processes other than the sandbox, is not possible.\n*   **Portals**: The mechanism through which applications interact with the host environment from within a sandbox. It provides interaction with data, files, and services without the need to add permissions to the sandbox.\n*   **Repositories**: Flatpak applications and runtimes get stored and published via repositories such as Git repositories, which in some cases are named *registries*.\n\nLet’s now look at the mechanisms for running Flatpak applications, and then we’ll walk a little bit through the development of Flatpak applications.\nUsing Flatpak applications\nFlatpak is installed by default on Fedora desktop variants.\nFlatpak applications are *fully integrated* into the operating system’s package manager. We can install them using the graphical interface or the command line.\nLet’s first look at the simplest form of installation using the GUI.\nUsing the GUI\nThe origin of installable applications might come as a package built on the OS, not sandboxed or built in a sandbox.\nFor the end user, there is no difference, but it is possible to find out the installation format of an application from the software manager. It is very simple. For example, let’s inspect the format that installed the Firefox browser and its installation options. Follow the subsequent steps:\n\n1.  As a *non-root user*, open the **Activities Overview** menu and click on **Software**:\n\n![Figure 6.12 – Activities Overview menu](img/6.12.jpg)\n\nFigure 6.12 – Activities Overview menu\n\n1.  Click on the *search* icon in the upper-left corner. In the search field, type **firefox** and press *Enter*:\n\n![Figure 6.13 – Search for the application](img/6.13.jpg)\n\nFigure 6.13 – Search for the application\nClick on the **Firefox** icon, shown as **Installed**.\n\n1.  Below the **Open** button, find the *installation source*. Click on the drop-down list:\n\n![Figure 6.14 – Firefox installation source](img/6.14.jpg)\n\nFigure 6.14 – Firefox installation source\nInstallation options for Firefox include the following:\n\n*   **FLATPAK**: From the official Fedora registry ([registry.fedoraproject.org](http://registry.fedoraproject.org)) as a Flatpak application\n*   **RPM**: From the official Fedora repositories ([fedoraproject.org](http://fedoraproject.org)) as RPM\n\nIn this case, it shows that Firefox was installed from the official Fedora repositories as a built RPM.\nSo, to install a Flatpak application with the software manager, just select the installation source.\nLet’s install a *digital painting editor* as an example. Follow the subsequent steps:\n\n1.  In the search field of the software manager, type **krita**:\n\n![Figure 6.15 – Search for the application](img/6.15.jpg)\n\nFigure 6.15 – Search for the application\nClick on the first result.\n\n1.  Verify the installation source as a Flatpak application. Below the **Install** button, click on the drop-down list:\n\n![Figure 6.16 – Verifying the installation source](img/6.16.jpg)\n\nFigure 6.16 – Verifying the installation source\nChoose **Flatpak** as the installation source.\n\n1.  Click the **Install** button. Wait until the installation is complete.\n2.  Click the **Open** button:\n\n![Figure 6.17 – Open the application](img/6.17.jpg)\n\nFigure 6.17 – Open the application\nThe application opens and is ready for use:\n![Figure 6.18 – Krita as a Flatpak application](img/B19121_06_18.jpg)\n\nFigure 6.18 – Krita as a Flatpak application\nAs mentioned earlier, the end user experiences no difference with applications built on `rpm`. Through the command line, it is possible to inspect the resources used and the isolation of the application from the system along with other options such as adding other repositories of Flatpak applications.\nLet’s now see how to use the command line to manage Flatpak applications.\nUsing the CLI\nAs mentioned in [*Chapter 1*](B19121_01_split_000.xhtml#_idTextAnchor014), the use of the command line expands the system administration capabilities. Let’s analyze the performance of the Flatpak application installed in the previous section. Follow the subsequent steps:\n\n1.  As a **root** user, open a terminal and use the **ps** command to search for the **xdg-dbus-proxy** and **krita** processes:\n\n    ```", "```\n\n     2.  Using the method of the first section of this chapter, track the performance of both processes. Use the **top** command:\n\n    ```", "```\n\n![Figure 6.19 – Flatpak application performance](img/B19121_06_19.jpg)\n\nFigure 6.19 – Flatpak application performance\nAs mentioned at the beginning of this section, `flatpak` comes installed by default in Fedora Linux. It is available as a command to build, install, and run applications and runtimes. It could operate at the local or wide level, as a `root` or *non-root* user.\nLet’s start to explore the capabilities of the `flatpak` command line.\n\n1.  Use the **flatpak** command to list the Flatpak applications installed:\n\n    ```", "```\n\n![Figure 6.20 – Listing Flatpak applications](img/B19121_06_20.jpg)\n\nFigure 6.20 – Listing Flatpak applications\n\n1.  To inspect the changes to Flatpak applications on the system, use the **flatpak** command with the **history** option:\n\n    ```", "```\n\n![Figure 6.21 – Flatpak history](img/B19121_06_21.jpg)\n\nFigure 6.21 – Flatpak history\nThese changes include installation, update, or removal, covering applications and runtimes.\n\n1.  To show the application details, use the **flatpak** command with the **info** option and the **Application ID** of the application:\n\n    ```", "```\n\n![Figure 6.22 – Flatpak application info](img/B19121_06_22.jpg)\n\nFigure 6.22 – Flatpak application info\n\n1.  To display the running applications, use the **flatpak** command with the **ps** option:\n\n    ```", "```\n\n![Figure 6.23 – Running Flatpak applications](img/B19121_06_23.jpg)\n\nFigure 6.23 – Running Flatpak applications\nObserve that the `root` user is not running any Flatpak applications.\nSwitch to the *non-root* user and run the same command:\n![Figure 6.24 – Running Flatpak applications](img/B19121_06_24.jpg)\n\nFigure 6.24 – Running Flatpak applications\nLet’s now see how we can add Flatpak applications from the command line. But before that, it is important to identify the installation source.\nAs mentioned before, Flatpak applications in Fedora Linux are set by default and point to the official registry of the distribution.\nThrough the command line, it’s possible to add other repositories as installation sources and install more Flatpak applications because they are not in the Fedora registry, the version is different, or just to have more installation sources.\nLet’s verify the general repository of Flatpak applications as an installation source. Follow the subsequent steps:\n\n1.  As a **root** user, open a terminal and use the **flatpak** command to list the repositories:\n\n    ```", "```\n\n![Figure 6.25 – Flatpak repositories](img/B19121_06_25.jpg)\n\nFigure 6.25 – Flatpak repositories\n\n1.  Add more columns to show the details of the repositories. Use the **–** **–****columns=name,title,url,homepage** parameter:\n\n![Figure 6.26 – Flatpak application repositories](img/B19121_06_26.jpg)\n\nFigure 6.26 – Flatpak application repositories\n\n1.  To list the applications available in a repository, use the **flatpak** command with the **remote-ls** option and the **Name** repository. To avoid *runtimes* and only list the applications, add the **–****app** parameter:\n\n    ```", "```\n\n![Figure 6.27 – Applications available on Flathub](img/B19121_06_27.jpg)\n\nFigure 6.27 – Applications available on Flathub\nIn *step 1*, *Figure 6**.25* shows that the `flathub` repository appears as *filtered*.\nNote\nThis is true for versions before Fedora Linux 38, where the Flathub filter was removed.\nThis is because the Fedora Linux configuration points to `Fedora Flatpaks`. `Fedora Flatpaks` is the remote Flatpak repository of the Fedora Project.\nThe difference is that Flathub makes applications and tools *as accessible as possible*, no matter what distribution they’re used in.\nOn the other hand, `Fedora Flatpaks` pushes RPMs from the Fedora Project and makes them accessible through Fedora Linux as Flatpak applications.\nTo have access to all the Flathub applications, let’s add the repository again without restrictions.\n\n1.  Add the **flathub** repository using the **flatpak** command with the **remote-add** option. Add the **--if-not-exists** parameter [to prevent *reg*](https://flathub)*istry overwriting* (the repository URL is [https://flathub.org/repo/flathub.flatpakrepo](https://flathub.org/repo/flathub.flatpakrepo)):\n\n    ```", "```\n\n![Figure 6.28 – Adding the Flathub repository](img/B19121_06_28.jpg)\n\nFigure 6.28 – Adding the Flathub repository\n\n1.  List the repositories again using the **flatpak** **remotes** command:\n\n    ```", "```\n\n![Figure 6.29 – Flatpak repositories](img/B19121_06_29.jpg)\n\nFigure 6.29 – Flatpak repositories\nNote that Flathub is no longer *filtered*. Let’s now see what Flatpak applications offer us.\n\n1.  List the applications available in the **flathub** repository. Use the **flatpak remote-ls flathub –****app** command:\n\n![Figure 6.30 – Flathub applications](img/B19121_06_30.jpg)\n\nFigure 6.30 – Flathub applications\nIf we get the number of applications, we find that it has increased:\n\n```", "```\n\n*   **2164**\n\nLet’s install an application.\n\n1.  Switch to a *non-root* user and search for the **Telegram Desktop** app. Use the **flatpak remote-ls flathub –app** command and filter the **Telegram** **Desktop** string:\n\n    ```", "```\n\n![Figure 6.31 – Searching for the Telegram Desktop Flatpak application](img/B19121_06_31.jpg)\n\nFigure 6.31 – Searching for the Telegram Desktop Flatpak application\nBefore installing it, let’s get the details of the Flatpak application.\n\n1.  Use the **flatpak remote-info** command with the **flathub** repository option and the **Application ID** from **Telegram Desktop**:\n\n    ```", "```\n\n![Figure 6.32 – Telegram Desktop info](img/B19121_06_32.jpg)\n\nFigure 6.32 – Telegram Desktop info\n\n1.  To install the application, use the **flatpak install** command with the **flathub** repository option and the **Telegram Desktop** **Application ID**:\n\n    ```", "```\n\n    Here’s the output:\n\n    ```", "```\n\n![Figure 6.33 – Telegram Desktop installation](img/B19121_06_33.jpg)\n\nFigure 6.33 – Telegram Desktop installation\n\n1.  Once installed, use the **flatpak run** command with the **Application ID** to run the application:\n\n    ```", "```\n\n![Figure 6.34 – Telegram Desktop Flatpak application](img/6.34.jpg)\n\nFigure 6.34 – Telegram Desktop Flatpak application\n\n1.  After installation, it is possible to find it in the **Activities** menu and/or add it to **Favorites** to display the icon in the top bar:\n\n![Figure 6.35 – Searching for Telegram Desktop in the Activities menu](img/6.35.jpg)\n\nFigure 6.35 – Searching for Telegram Desktop in the Activities menu\nBoth procedures, graphical and CLI, provide an intuitive way to use Flatpak applications, regardless of the distribution or version installed.\nNote\nFor more information on the use of Flatpak applications, [refer to th](https://docs)e *Using Flatpak* section of Flatpak’s documentation at [https://docs.flatpak.org/en/latest/using-flatpak.html](https://docs.flatpak.org/en/latest/using-flatpak.html).\nNow, let’s walk through the process of creating Flatpak applications.\nBuilding Flatpak applications\nBuilding Flatpak applications is relatively simple. As a prerequisite, you must install, as a `root` user, the `flatpak-builder` package, either as an RPM or Flatpak application:\n\n*   RP\n\n    # **dnf** **list flatpak-builder**\n\n*   Flatpak application\n\n    # **flatpak install** **flathub org.flatpak.Builder**\n\nAs an example, let’s create a Flatpak application based on a simple `bash` script. To create our Flatpak application, follow the subsequent steps:\n\n1.  Identify the runtime using the **flatpak remote-ls** command with the **-a** (*all*) parameter. To search both runtimes and applications in the **flathub** repository, filter the **freedesktop platform** string to find the latest version. As an optional filter, add a parameter to avoid **translations**:\n\n    ```", "```\n\n![Figure 6.36 – Identifying the runtime](img/B19121_06_36.jpg)\n\nFigure 6.36 – Identifying the runtime\nFrom the preceding figure, we can see that the last version is `22.08`. Next, we’ll search for the same version of the SDK.\n\n1.  Use the **flatpak remote-ls** command with the **-a** (*all*) parameter in the **flathub** repository. Filter the **freedesktop SDK** string and the **22.08** version:\n\n    ```", "```\n\n![Figure 6.37 – Searching the SDK](img/B19121_06_37.jpg)\n\nFigure 6.37 – Searching the SDK\n\n1.  Use the **flatpak install** command to install both:\n\n    ```", "```\n\n    *   Looking for matches…\n\n        ```", "```\n\n    ```", "```\n\n    Wait for the installation to finish:\n\n![Figure 6.38 – SDK installation](img/B19121_06_38.jpg)\n\nFigure 6.38 – SDK installation\n\n1.  Create a **bash** script. For example, as a *non-root* user, copy the following and save it as **script.sh**:\n\n    ```", "```\n\n     2.  Add the *manifest*. Each Flatpak application includes a file with basic build information known as the *manifest*. Create a file with the following and save it as **org.flatpak.script.yml** in the same directory as the **bash** script:\n\n    ```", "```\n\n     3.  Build the Flatpak application using the **flatpak-builder** command with the target directory and the *manifest*:\n\n    ```", "```\n\n![Figure 6.39 – Building the Flatpak application](img/B19121_06_39.jpg)\n\nFigure 6.39 – Building the Flatpak application\n\n1.  Install the Flatpak application using the **flatpak-builder** command. Add the **--user** option to install dependencies on the user’s local installation. With the **--force-clean** option, delete the previously created directory. This removes the contents of the directory and creates new build content:\n\n    ```", "```\n\n![Figure 6.40 – Installing the Flatpak application](img/B19121_06_40.jpg)\n\nFigure 6.40 – Installing the Flatpak application\n\n1.  Run the Flatpak application using the **flatpak** **run** command:\n\n    ```", "```\n\n![Figure 6.41 – Running the Flatpak application](img/B19121_06_41.jpg)\n\nFigure 6.41 – Running the Flatpak application\nThis way, we have a Flatpak application based on a simple script with all the necessary sandbox and isolation features.\nIn a more complex case, the *manifest* should include all the necessary dependencies and files, declared as *modules*.\nNote\nFor more information on the build of Flatpak applications, refer to the *Building* section of Flatpak’s documentation at [https://docs.flatpak.org/en/latest/building.html](https://docs.flatpak.org/en/latest/building.html).\nThis concludes our tour of sandbox applications. In the following chapters, we will discuss the installation options for different applications. Some should be installed via RPM and some others should be available as AppImages or Flatpak applications.\nSummary\nIn this chapter, we learned how sandbox applications work, from a very illustrative example using SELinux and Firefox, to portable application formats widely used today.\nWe explored AppImage apps, from how to run them to using the AppImageKit to generate AppImages.\nFinally, we took a deep look at Flatpak applications, a format that supports the Fedora Project and even maintains its own version of Fedora Flatpaks based on RPMs.\nWe also learned how to use the command line to extend the administration and use of sandboxed applications.\nIn the next chapter, we will take a walk through the most popular terminal-based text editors, plus look at some usage tricks and customizations.\nFurther reading\nTo learn more about the top[ics covered in this](https://flatpak.org/) chapter, you can visit the foll[owing links:](https://fedoramagazine.org/getting-started-flatpak/)\n\n*   [*Flatpak*: https://flatpak.org/](https://fedoramagazine.org/getting-started-flatpak/)\n*   [*Getting*](https://fedoramagazine.org/getting-started-flatpak/) *Started with* *Flatpak*: https://fedoram[agazine.org/getting-started-flatpak/](https://fedoramagazine.org/an-introduction-to-fedora-flatpaks/)\n*   [*An introduction to Fedora*](https://fedoramagazine.org/an-introduction-to-fedora-flatpaks/)*Flatpaks*: https://fedoramagazine.org/an-introductio[n-to-fedora-flatpaks/](https://fedoramagazine.org/comparison-of-fedora-flatpaks-and-flathub-remotes/)\n*   [*Comparison of Fedora Flatpaks and Flathub* *remotes*: http](https://fedoramagazine.org/comparison-of-fedora-flatpaks-and-flathub-remotes/)s://fedoramagazi[ne.org/comparison-of-fedora-flatpaks-and-flathub-remotes/](https://developer.fedoraproject.org/deployment/flatpak/flatpak-usage.html)\n*   [*Flatpak* *Usage*:](https://developer.fedoraproject.org/deployment/flatpak/flatpak-usage.html) https://de[veloper.fedoraproject.or](https://flathub.org/home)g/deployment/flatpak/flatpak-usage.html\n*   *Flathub*: https://flathub.org/home\n\n```"]