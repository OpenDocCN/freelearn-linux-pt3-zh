["```\n[mariadb]\nname = MariaDB\nbaseurl = http://yum.mariadb.org/{{ mariadb_version }}/centos7-amd64\ngpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB\ngpgcheck=1\n```", "```\n---\nmariadb_version: \"10.3\"\n```", "```\n---\n- name: Populate MariaDB yum template on target host\n  template:\n    src: templates/mariadb.repo.j2\n    dest: /etc/yum.repos.d/mariadb.repo\n    owner: root\n    group: root\n    mode: '0644'\n```", "```\n  register: mariadbtemplate\n```", "```\n- name: Clean out yum cache only if template was changed\n  shell: \"yum clean all\"\n  when: mariadbtemplate.changed\n```", "```\n- name: Install MariaDB packages\n  yum:\n    name:\n      - MariaDB-server\n      - galera\n      - MariaDB-client\n      - MariaDB-shared\n      - MariaDB-backup\n      - MariaDB-common\n    state: latest\n```", "```\n- name: Ensure mariadb-server service starts on boot and is started now\n  service:\n    name: mariadb\n    state: started\n    enabled: yes\n```", "```\n- name: Open firewall port for MariaDB server\n  firewalld:\n    service: mysql\n    permanent: yes\n    state: enabled\n    immediate: yes\n```", "```\n---\nmariadb_root_password: \"securepw\"\n```", "```\n---\n- name: Install the MariaDB Python module required by Ansible\n  yum:\n    name: MySQL-python\n    state: latest\n```", "```\n- name: Set the local root password\n  mysql_user:\n    user: root\n    password: \"{{ mariadb_root_password }}\"\n    host: \"localhost\"\n```", "```\n- name: Delete root MariaDB user for remote logins\n  mysql_user:\n    user: root\n    host: \"{{ ansible_fqdn }}\"\n    state: absent\n    login_user: root\n    login_password: \"{{ mariadb_root_password }}\"\n```", "```\n- name: Delete anonymous MariaDB user\n  mysql_user:\n    user: \"\"\n    host: \"{{ item }}\"\n    state: absent\n    login_user: root\n    login_password: \"{{ mariadb_root_password }}\"\n  loop:\n    - \"{{ ansible_fqdn }}\"\n    - localhost\n```", "```\n- name: Delete the test database\n  mysql_db:\n    db: test\n    state: absent\n    login_user: root\n    login_password: \"{{ mariadb_root_password }}\"\n```", "```\ndeb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main\n```", "```\n---\n- name: Populate PostgreSQL apt template on target host\n  template:\n    src: templates/pgdg.list.j2\n    dest: /etc/apt/sources.list.d/pgdg.list\n    owner: root\n    group: root\n    mode: '0644'\n```", "```\n- name: Add key for PostgreSQL packages\n  apt_key:\n    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc\n    state: present\n```", "```\n- name: Install PostgreSQL 11 packages\n  apt:\n    name:\n      - postgresql-11\n      - postgresql-client-11\n    state: latest\n    update_cache: yes\n```", "```\n- name: Ensure PostgreSQL service is installed and started at boot time\n  service:\n    name: postgresql\n    state: started\n    enabled: yes\n```", "```\n---\n- name: Install PostgreSQL Ansible support packages\n  apt:\n    name: python-psycopg2\n    state: latest\n```", "```\n- name: Create production database\n  postgresql_db:\n    name: production\n    state: present\n  become_user: postgres\n```", "```\n- name: Add produser account to database\n  postgresql_user:\n    db: production\n    name: produser\n    password: securepw\n    priv: ALL\n    state: present\n  become_user: postgres\n```", "```\n- name: Grant produser access to the production database over the local network\n  postgresql_pg_hba:\n    dest: /etc/postgresql/11/main/pg_hba.conf\n    contype: host\n    users: produser\n    source: 192.168.81.0/24\n    databases: production\n    method: md5\n```", "```\n- name: Ensure PostgreSQL is listening for remote connections\n  lineinfile:\n    dest: /etc/postgresql/11/main/postgresql.conf\n    regexp: '^listen_addresses ='\n    line: listen_addresses = '*'\n  notify: Restart PostgreSQL\n```", "```\n---\n- name: Restart PostgreSQL\n  service:\n    name: postgresql\n    state: restarted\n```", "```\n$ git clone https://github.com/datacharmer/test_db.git\n```", "```\n---\n- name: Copy sample database to server\n  copy:\n    src: \"{{ item }}\"\n    dest: /tmp/\n  loop:\n    - files/test_db/employees.sql\n    - files/test_db/load_departments.dump\n    - files/test_db/load_employees.dump\n    - files/test_db/load_dept_emp.dump\n    - files/test_db/load_dept_manager.dump\n    - files/test_db/load_titles.dump\n    - files/test_db/load_salaries1.dump\n    - files/test_db/load_salaries2.dump\n    - files/test_db/load_salaries3.dump\n    - files/test_db/show_elapsed.sql\n```", "```\n- name: Load sample data into database\n  shell: \"mysql -u root --password={{ mariadb_root_password }} < /tmp/employees.sql\"\n  args:\n    chdir: /tmp\n```", "```\n---\nmariadb_root_password: \"securepw\"\n```", "```\n- name: Check to see if the database exists\n  shell: \"mysqlshow -u root --password={{ mariadb_root_password }} employees\"\n  ignore_errors: true\n  register: dbexists\n\n- name: Load sample data into database\n  shell: \"mysql -u root --password={{ mariadb_root_password }} < /tmp/employees.sql\"\n  args:\n    chdir: /tmp\n  when: dbexists.rc != 0\n```", "```\n---\n- name: Check to see if the database exists\n  shell: \"mysqlshow -u root --password={{ mariadb_root_password }} employees\"\n  ignore_errors: true\n  register: dbexists\n```", "```\n- name: Import new database only if it doesn't already exist\n  block:\n\n  when: dbexists.rc != 0\n```", "```\n  - name: Copy sample database to server\n    copy:\n      src: \"{{ item }}\"\n      dest: /tmp/\n    loop:\n      - files/test_db/employees.sql\n      - files/test_db/load_departments.dump\n      - files/test_db/load_employees.dump\n      - files/test_db/load_dept_emp.dump\n      - files/test_db/load_dept_manager.dump\n      - files/test_db/load_titles.dump\n      - files/test_db/load_salaries1.dump\n      - files/test_db/load_salaries2.dump\n      - files/test_db/load_salaries3.dump\n      - files/test_db/show_elapsed.sql\n```", "```\n  - name: Add full paths to employees.sql as mysql_db won't know where to load them from otherwise\n    replace:\n      path: /tmp/employees.sql\n      regexp: '^source (.*)$'\n      replace: 'source /tmp/\\1'\n```", "```\n  - name: Load sample data into database\n    mysql_db:\n      name: all\n      state: import\n      target: /tmp/employees.sql\n      login_user: root\n      login_password: \"{{ mariadb_root_password }}\"\n```", "```\n---\n- name: Define a variable for the backup file name\n  set_fact:\n    db_filename: \"/tmp/{{ inventory_hostname }}-backup-{{ ansible_date_time.date }}.sql\"\n```", "```\n- name: Back up the database\n  shell: \"mysqldump -u root --password={{ mariadb_root_password }} --all-databases --single-transaction --lock-tables=false --quick > {{ db_filename }}\"\n```", "```\n- name: Copy the backed up data for archival\n  fetch:\n    src: \"{{ db_filename }}\"\n    dest: \"/backup\"\n```", "```\n- name: Back up the database\n  mysql_db:\n    state: dump\n    name: all\n    target: \"{{ db_filename }}\"\n    login_user: root\n    login_password: \"{{ mariadb_root_password }}\"\n```", "```\npostgres=# \\c AdventureWorks\nAdventureWorks=# vacuum full sales.creditcard;\n```", "```\n---\n- name: Perform a VACUUM on the sales.credit_card table\n  shell: psql -c \"VACUUM FULL sales.creditcard\" AdventureWorks\n  become: yes\n  become_user: postgres\n```", "```\n---\n- name: Perform a VACUUM on the sales.credit_card table\n  postgresql_query:\n    db: AdventureWorks\n    query: VACUUM sales.creditcard\n    autocommit: yes\n  become_user: postgres\n  become: yes\n```", "```\nINSERT INTO sales.creditcard ( creditcardid, cardtype, cardnumber, expmonth, expyear ) VALUES ( 0, 'Visa', '0000000000000000', '11', '2019' );\n```", "```\n---\n- name: Manually insert data into the creditcard table\n  postgresql_query:\n    db: AdventureWorks\n    query: INSERT INTO sales.creditcard ( creditcardid, cardtype, cardnumber, expmonth, expyear ) VALUES ( 0, 'Visa', '0000000000000000', '11', '2019' );\n  become_user: postgres\n  become: yes\n```"]