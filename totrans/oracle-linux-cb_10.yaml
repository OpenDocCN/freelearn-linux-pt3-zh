- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Revisiting Modules and AppStreams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to learn more about **modules** and **application
    streams** (**AppStreams**). We went over the new organization of repositories
    and the concept of modularity in [*Chapter 5*](B18349_05.xhtml#_idTextAnchor135),
    *Software Management with DNF*, but now we’re going to be tapping into the true
    power of AppStreams with the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Searching and listing AppStream modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing applications and development tools via AppStream
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using AppStreams to install different versions of software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing packages via AppStream
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The concept of AppStreams is new and was introduced in Oracle Linux 8\. With
    that being said, as long as you are running Oracle Linux 8, you will have all
    that’s needed to follow along in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Searching and listing AppStream modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First things first, let’s review the list of commands that pertain to modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '`disable`: Disable a module with all its streams'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enable`: Enable a module stream'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`info`: Print detailed information about a module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`install`: Install a module profile, including its packages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list`: List all module streams, profiles, and states'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`provides`: List modular packages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remove`: Remove installed module profiles and their packages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repoquery`: List packages belonging to a module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reset`: Reset a module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`switch-to`: Switch a module to a stream and *distrosync* RPM packages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update`: Update packages associated with an active stream'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'AppStreams are easy to use. To get started, it’s generally best to check for
    a list of available modules. This can be done by entering one simple command,
    `dnf module list`, into the Terminal/console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Output of dnf module list](img/B18349_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – Output of dnf module list
  prefs: []
  type: TYPE_NORMAL
- en: 'The output continues with a rather long list of modules, and at the end, you
    will see a keymap of what the different letters mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – Module keymap via hints](img/B18349_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – Module keymap via hints
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are several modules that immediately caught my eye: `container-tools`,
    `gimp`, `go-tools`, `inkscape`, `mariadb`, `mysql`, `nginx`, `nodejs`, `python`,
    and `php`. These are modules, but you will notice that each module has a stream,
    and each stream contains a profile. If we were to visualize this in a chart, it
    might look a bit like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Visualizing AppStreams](img/B18349_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – Visualizing AppStreams
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s say we want to get more information on a particular module. In this
    case, let’s take a look at `nodejs`. First, we’re going to want to specify `nodejs`
    when we ask for the list. We can do this by adding the name of the module after
    the `list` command, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4 – Output of dnf module list nodejs](img/B18349_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – Output of dnf module list nodejs
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of the list, you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: From this, we can see that stream `10` is labeled as default (`d`) for `nodejs`.
    What does this mean, exactly? Basically, if we were to run `dnf module install
    nodejs`, we would end up with the latest version of Node.js in stream 10 (and
    yes, stream `10` correlates to Node.js 10).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, the latest version of Node.js in the 10 series stream
    is **nodejs-1:10.24.0-1.module+el8.3.0+9671+154373c8.x86_64**.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can dig deeper and learn more about this specific AppStream by typing the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of that command will show every available release of Node.js within
    the 10 series stream. There are several but, for the sake of brevity, I have pasted
    the last two from the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.5 – Output of dnf module info nodejs:10](img/B18349_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – Output of dnf module info nodejs:10
  prefs: []
  type: TYPE_NORMAL
- en: The interesting thing here is that every stream within the 10 series is labeled
    `[d][a]` (default and active); that’s because the `Stream` entry is referring
    to the stream itself, and not any specific release within the stream.
  prefs: []
  type: TYPE_NORMAL
- en: Installing applications and development tools via AppStream
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the previous recipe, we’re familiar with how to search for and list applications
    in AppStreams; let’s now dive into installing applications and development tools
    via AppStream.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Building from the last recipe, in which we examined `nodejs`, let’s go ahead
    and install it. There’s more than one way to do this. You can enable the module
    and then use the standard `dnf install [package(s)]` command to install the packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use the standard `dnf` commands without specifying modules and
    the default module will get enabled as part of the transaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, the preferred way is to tap directly into the new set of `dnf module` commands
    and simply run `dnf module install [``module name(s)]`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.6 – Output of dnf module install nodejs](img/B18349_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6 – Output of dnf module install nodejs
  prefs: []
  type: TYPE_NORMAL
- en: 'What you get is the latest in the default AppStream (if nothing is enabled),
    but if for some reason you wanted an older version in the stream, you can select
    that by appending a colon and the version to the end of the command. For example,
    if I didn’t want the latest and, instead, wanted the version before it, I would
    type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.7 – Output of dnf module install nodejs:10:8030020210118191659](img/B18349_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.7 – Output of dnf module install nodejs:10:8030020210118191659
  prefs: []
  type: TYPE_NORMAL
- en: This would instruct DNF to install the releases of Node.js (and related artifacts)
    that correlate to the version specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another thing to notice is that, by default, only the `common` profile will
    be installed. We can specify a different profile (for example, the `development`
    profile), by appending a forward slash and a profile name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.8 – Output of dnf module install nodejs:10/development](img/B18349_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.8 – Output of dnf module install nodejs:10/development
  prefs: []
  type: TYPE_NORMAL
- en: 'You can even specify more than one profile, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.9 – Output of dnf module install nodejs:10/development nodejs:10/s2i](img/B18349_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.9 – Output of dnf module install nodejs:10/development nodejs:10/s2i
  prefs: []
  type: TYPE_NORMAL
- en: 'Or, if you wish to install all the profiles, simply use an asterisk to indicate
    a wildcard selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.10 – Output of dnf module install nodejs:10/*](img/B18349_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.10 – Output of dnf module install nodejs:10/*
  prefs: []
  type: TYPE_NORMAL
- en: Using AppStreams to install different versions of software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we’re going to expand on what we know about AppStreams, and instead of
    installing an application from the default module stream, we’re going to specify
    a different stream.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are multiple ways to do this: simply specifying the installation of a
    different stream will get the job done, or you can first manually enable a different
    version. My preference is to specify the version as I install it because, in that
    case, the AppStream will automatically enable that version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you already installed some version of an AppStream, it is best to remove
    the old one before resetting and installing a different version. This will be
    covered later.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.11 – Output of dnf module install nodejs:16](img/B18349_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.11 – Output of dnf module install nodejs:16
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll see from the printout that the module stream for `nodejs` 16 will be
    enabled. Now, if we list out the module stream for `nodejs`, we’ll see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.12 – Output of dnf module list nodejs](img/B18349_10_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.12 – Output of dnf module list nodejs
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, `10` is still the default, but `16` is enabled (`e`). AppStreams
    maintains a default stream to allow normal usage of `dnf` to function without
    requiring the user to know anything about AppStreams. Additionally, if we were
    to reset the module, it would revert back to the original settings – that is,
    it would make `10` the only default and enabled version, and version `16` would
    no longer be enabled. Furthermore, it’s important to note that only one stream
    can be enabled at a time. To recap, a default stream is inherently enabled when
    no other stream is enabled. If you enable a different stream, it is the only one
    that can be installed from, but it’s easy to reset and switch to another. To do
    so, simply do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see confirmation about the module being reset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, we are cleared to install a different version. Let’s go with
    Node.js 14 this time around:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see a confirmation about what the package manager plans to do:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.13 – Output of dnf module install nodejs:14](img/B18349_10_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.13 – Output of dnf module install nodejs:14
  prefs: []
  type: TYPE_NORMAL
- en: You may notice that you are downgrading. Just as you might suspect, if no module
    is installed, it will say `Installing`; if installing a number that is greater
    than the currently installed version, it will say `Upgrading`; and if installing
    a number that is less than the currently installed version, it will say `Downgrading`.
    Regardless of what the package manager says it is doing, you will be left with
    the version you requested – it’s as simple as that.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should be aware there is another way to switch to a different stream. Rather
    than using `remove`, `reset`, and then `install`, you can achieve this with one
    step by using `switch-to`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.14 – Output of dnf module switch-to nodejs:16](img/B18349_10_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.14 – Output of dnf module switch-to nodejs:16
  prefs: []
  type: TYPE_NORMAL
- en: This is the recommended method of changing stream versions because it accomplishes
    the change in just one step, and it provides a very clear printout of the action
    taking place. Its status is `Upgrading`, and it is going from `14 ->` `16`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: There is actually another way to switch modules on the fly. If you set `module_stream_switch`
    to `True` in `/etc/dnf/dnf.conf`, then you can install a different module without
    using the `switch-to` syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '**echo “module_stream_switch=True” >> /****etc/dnf/dnf.conf**'
  prefs: []
  type: TYPE_NORMAL
- en: What about Python?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you review the list of modules, you may notice that Python consists of multiple
    modules rather than a single module with multiple AppStreams:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.15 – Output of dnf module list python*](img/B18349_10_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.15 – Output of dnf module list python*
  prefs: []
  type: TYPE_NORMAL
- en: This seems weird at first, but consider that Python is an integral part of the
    Oracle Linux operating system and that each Oracle Linux release comes with a
    platform Python version. The specific platform Python version may differ for each
    Oracle Linux release, and the respective platform Python version will be supported
    for the full lifespan of that version of Oracle Linux. For Oracle Linux 7, the
    platform Python version is 2.7 and is always installed, and for Oracle Linux 8,
    the platform Python version is 3.6\. In other words, Python 2.7 is supported for
    the full lifespan of Oracle Linux 7, and Python 3.6 is supported for the full
    lifespan of Oracle Linux 8\. On Oracle Linux 8, the platform Python is exclusively
    intended for use by system utilities such as Yum and DNF. Python for general purpose
    is not installed by default on Oracle Linux 8, and so this is where AppStream
    modules come into play.
  prefs: []
  type: TYPE_NORMAL
- en: You can install multiple versions of Python on Oracle Linux 8 by specifying
    the module correlating to the desired version of Python. All of the Python modules
    can be installed and used simultaneously on the same machine, and you can specify
    which installation you wish to use by typing out the version – for example, `python3.6
    --version`, `python3.8 --version`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the `python3` command is always aliased to Python 3.6 if it is installed
    on the system, and that is because Python 3.6 is the platform Python version on
    Oracle Linux 8.
  prefs: []
  type: TYPE_NORMAL
- en: Removing packages via AppStream
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Removing packages via AppStream is straightforward. In general, all you need
    to do is instruct the package manager to remove instead of install. If the package
    manager finds a module that matches, it will proceed to remove the related packages.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Building off the examples in the previous recipe, let’s remove the Node.js
    module by running the `dnf module remove` `nodejs` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.16 – Output of dnf module remove nodejs](img/B18349_10_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.16 – Output of dnf module remove nodejs
  prefs: []
  type: TYPE_NORMAL
- en: 'From this message, you can see that NPM will be uninstalled, but that isn’t
    quite what you would expect considering that the Node.js module installed more
    than just NPM. If you want to remove everything related to the module, you’ll
    need to pass in the `--all` flag, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, you will see that all associated packages are queued for removal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.17 – Output of dnf module remove nodejs --all](img/B18349_10_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.17 – Output of dnf module remove nodejs --all
  prefs: []
  type: TYPE_NORMAL
- en: Now that’s more like it. Type `y` and press *Enter*, and the module will be
    removed.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, now that we’ve gone over the usage of AppStreams, you might be asking yourself,
    “*Didn’t we already have a similar capability with Software Collections?*” The
    answer is yes, but there is a big difference between Software Collections and
    AppStreams.
  prefs: []
  type: TYPE_NORMAL
- en: Where Software Collections provides Parallel Availability and Parallel Installability,
    AppStreams provides only Parallel Availability.
  prefs: []
  type: TYPE_NORMAL
- en: According to the Fedora docs, “*Parallel Availability means that more than one
    major release of a popular software project is available for installation.”* And
    *“Parallel Installability means that more than one major release of a software
    project can be installed on the* *same userspace.*”
  prefs: []
  type: TYPE_NORMAL
- en: Now you might be asking, “*Wait, so you’re telling me that AppStreams is not
    as good as what we had before?*” Well, not exactly. It turns out that Parallel
    Installability isn’t all it’s cracked up to be. Although it seems nice on the
    surface to have the ability to install multiple versions of software on the same
    system, in reality, it is plagued with complications of requiring users to know
    they need to do something extra in order to actually make use of the installed
    software and/or alternate version. For example, if you wanted to install multiple
    versions of Node.js, you would first need to enable the desired Software Collection
    for Node.js, and then you would also need to know where to look for and activate
    the specific version you want to use. In other words, you cannot simply use the
    alternate version of the software in the normal way because the packages would
    get installed in non-standard locations.
  prefs: []
  type: TYPE_NORMAL
- en: AppStreams solves this because it does not allow for Parallel Installability;
    instead, it provides the capability of Parallel Availability. In other words,
    you install one and only one package at a time, and you use it like you normally
    would. If you want a different version, well, you simply enable a different stream.
  prefs: []
  type: TYPE_NORMAL
- en: As a bonus, AppStreams is particularly useful when creating containers that
    are single-use by design. Having AppStreams means each container image is configured
    with the right version of the module, which is then globally available within
    the container. If you need multiple versions, just run multiple containers.
  prefs: []
  type: TYPE_NORMAL
- en: AppStreams makes it much easier to install different versions of software, and
    the best thing is, even if you know nothing about AppStreams, you can still use
    DNF the old-fashioned way and get your basic applications installed.
  prefs: []
  type: TYPE_NORMAL
