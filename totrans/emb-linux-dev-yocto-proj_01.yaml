- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Meeting the Yocto Project
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认识 Yocto 项目
- en: This chapter introduces you to the **Yocto Project**. The main concepts of the
    project discussed here are constantly used throughout the book. In addition, we
    will briefly discuss the history of the Yocto Project, OpenEmbedded, Poky, BitBake,
    metadata, and versioning schema. So, fasten your seat belt, and welcome aboard!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍 **Yocto 项目**。这里讨论的项目的主要概念在全书中都会不断使用。此外，我们还将简要讨论 Yocto 项目的历史、OpenEmbedded、Poky、BitBake、元数据和版本管理方案。所以，请系好安全带，欢迎登机！
- en: What is the Yocto Project?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Yocto 项目？
- en: 'The Yocto Project is a Linux Foundation workgroup and is defined as follows:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Yocto 项目是 Linux 基金会的一个工作组，定义如下：
- en: The Yocto Project is an open source collaboration project that helps developers
    create custom Linux-based systems that are designed for embedded products regardless
    of the product’s hardware architecture. Yocto Project provides a flexible toolset
    and a development environment that allows embedded device developers across the
    world to collaborate through shared technologies, software stacks, configurations,
    and best practices used to create these tailored Linux images.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Yocto 项目是一个开源协作项目，帮助开发人员创建专为嵌入式产品设计的定制 Linux 系统，无论产品的硬件架构如何。Yocto 项目提供了一个灵活的工具集和开发环境，允许全球的嵌入式设备开发人员通过共享的技术、软件堆栈、配置和最佳实践进行协作，从而创建这些定制的
    Linux 镜像。
- en: Thousands of developers worldwide have discovered that Yocto Project provides
    advantages in both systems and applications development, archival and management
    benefits, and customizations used for speed, footprint, and memory utilization.
    The project is a standard when it comes to delivering embedded software stacks.
    The project allows software customizations and build interchange for multiple
    hardware platforms as well as software stacks that can be maintained and scaled.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 全球成千上万的开发人员发现，Yocto 项目在系统和应用开发、存档与管理收益、以及在速度、占用空间和内存利用方面的定制化上提供了优势。该项目在交付嵌入式软件堆栈方面已经成为标准。该项目支持多种硬件平台的软件定制和构建交换，并且软件堆栈可以进行维护和扩展。
- en: '- Yocto Project Overview and Concepts Manual'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '- Yocto 项目概览与概念手册'
- en: The Yocto Project is an open source collaboration project. It supplies templates,
    tools, and methods to help us create custom Linux-based systems for embedded products,
    regardless of the hardware architecture. It can generate tailored Linux distributions
    based on the `glibc` and `musl` C standard libraries and the **Real-Time Operating
    System** (**RTOS**) toolchains for bare-metal development, as done by the Zephyr
    Project.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Yocto 项目是一个开源协作项目。它提供模板、工具和方法，帮助我们为嵌入式产品创建定制的基于 Linux 的系统，无论硬件架构如何。它可以基于 `glibc`
    和 `musl` C 标准库以及为裸机开发提供的 **实时操作系统** (**RTOS**) 工具链，生成定制的 Linux 发行版，正如 Zephyr 项目所做的那样。
- en: Being managed by a Linux Foundation member, the project stays independent of
    the member organizations, which participate in many ways and supply resources
    to the project.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Linux 基金会成员管理，该项目保持独立于成员组织，这些成员组织通过多种方式参与并为项目提供资源。
- en: It was founded in 2010 as a collaboration of many hardware manufacturers, open
    source operating systems, vendors, and electronics companies to reduce duplication
    of work and supply resources and information catering to new and experienced users.
    Among these resources is OpenEmbedded Core, the core system component provided
    by the OpenEmbedded project.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 它成立于 2010 年，由许多硬件制造商、开源操作系统供应商、电子公司共同合作，旨在减少工作重复，提供资源和信息，以满足新手和经验丰富用户的需求。其中的资源之一是
    OpenEmbedded Core，这是 OpenEmbedded 项目提供的核心系统组件。
- en: The Yocto Project aggregates several companies, communities, projects, and tools
    with the same purpose – to build Linux-based embedded products. These stakeholders
    are in the same boat, driven by their community needs to work together.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Yocto 项目聚集了多个公司、社区、项目和工具，目标一致——构建基于 Linux 的嵌入式产品。这些利益相关者同舟共济，由共同的社区需求驱动，共同协作。
- en: Delineating the Yocto Project
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 描述 Yocto 项目
- en: To ease our understanding of the duties and outcomes of the Yocto Project, we
    can use the analogy of a computing machine. The input is a set of data that describes
    what we want, that is, our specification. As an output, we have the desired Linux-based
    embedded product.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助我们理解 Yocto 项目的职责和成果，我们可以用计算机的类比来说明。输入是一组描述我们需求的数据，即我们的规格说明。作为输出，我们得到所需的基于
    Linux 的嵌入式产品。
- en: The output is composed of the pieces of the operating system. It encompasses
    the Linux kernel, bootloader, and the root filesystem (`rootfs`) bundled and organized
    to work together.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 输出由操作系统的各个部分组成，涵盖了 Linux 内核、引导加载程序和根文件系统（`rootfs`），这些组件被打包并组织在一起以便协同工作。
- en: The Yocto Project’s tools are present in all intermediary steps to produce the
    resultant `rootfs` bundle and other deliverables. The previously built software
    components are reused across builds – applications, libraries, or any software
    component.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Yocto 项目的工具在所有中间步骤中都参与到生成最终 `rootfs` 包和其他交付物的过程。先前构建的软件组件会在不同的构建中重用——无论是应用程序、库，还是任何软件组件。
- en: When reuse is not possible, the software components are built in the correct
    order and with the desired configuration, including fetching the required source
    code from their respective repositories, such as The Linux Kernel Archives ([www.kernel.org](http://www.kernel.org)),
    GitHub, BitBucket, and GitLab.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当无法进行重用时，软件组件会按照正确的顺序和所需的配置进行构建，包括从各自的代码库中提取所需的源代码，如 Linux 内核档案（[www.kernel.org](http://www.kernel.org)）、GitHub、BitBucket
    和 GitLab。
- en: The Yocto Project’s tools prepare its build environment, utilities, and toolchains,
    reducing the host software dependency. The utilities, versions, and configuration
    options are independent of the host Linux distribution, minimizing the number
    of host utilities to rely on while producing the same result. A subtle but essential
    implication benefit is the considerable increase in determinism, reduced build
    host dependencies, but increased first-time builds.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Yocto 项目的工具准备其构建环境、实用工具和工具链，减少了对主机软件的依赖。这些实用工具、版本和配置选项独立于主机 Linux 发行版，从而最小化了在生成相同结果时对主机工具的依赖。一个微妙但重要的好处是，确定性大大增强，减少了构建主机的依赖，但首次构建的时间增加。
- en: BitBake and OpenEmbedded Core are under the OpenEmbedded project umbrella, while
    some projects, such as Poky, are under the Yocto Project umbrella. They are all
    complementary and play specific roles in the system. We will understand exactly
    how they work together in this chapter and throughout this book.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake 和 OpenEmbedded Core 都在 OpenEmbedded 项目的框架下，而一些项目，如 Poky，则在 Yocto 项目的框架下。它们是互为补充的，在系统中扮演着各自特定的角色。我们将在本章以及全书中详细了解它们如何协同工作。
- en: The alliance of the OpenEmbedded project and the Yocto Project
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenEmbedded 项目与 Yocto 项目的联盟
- en: The OpenEmbedded project was created around January 2003 when some core developers
    from the **OpenZaurus** project started to work with the new build system. Since
    its beginning, the OpenEmbedded build system has been a task scheduler inspired
    and based on the **Gentoo Portage** package system named BitBake. As a result,
    the project quickly grew its software collection and the supported machine list.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: OpenEmbedded 项目大约在 2003 年 1 月成立，当时一些来自 **OpenZaurus** 项目的核心开发者开始使用新的构建系统。从一开始，OpenEmbedded
    构建系统便是一个受 **Gentoo Portage** 包管理系统启发并基于该系统的任务调度器，名为 BitBake。因此，该项目迅速扩展了其软件库和支持的机器列表。
- en: Due to chaotic and uncoordinated development, it was challenging to use OpenEmbedded
    in products that demand a more stable and polished code base, which is how Poky
    distribution was born. Poky started as a subset of the OpenEmbedded build system,
    and had a more polished and stable code base across a limited set of architectures.
    Additionally, its reduced size allowed Poky to develop highlighting technologies,
    such as IDE plugins and **Quick Emulator** (**QEMU**) integration, which are still
    in use.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于混乱和缺乏协调的开发，使用 OpenEmbedded 在需要更稳定和精致代码库的产品中变得具有挑战性，这就是 Poky 发行版诞生的原因。Poky
    起初是 OpenEmbedded 构建系统的一个子集，并且在有限的架构集上拥有更精致和稳定的代码库。此外，Poky 的体积较小，允许其开发出一些突出的技术，如
    IDE 插件和**快速仿真器**（**QEMU**）集成，这些技术至今仍在使用。
- en: The Yocto Project and OpenEmbedded project consolidated their efforts on a core
    build system called OpenEmbedded Core. It uses the best of both Poky and OpenEmbedded,
    emphasizing the increased use of additional components, metadata, and subsets.
    Around November 2010, the Linux Foundation announced that the Yocto Project would
    continue this work under a Linux Foundation-sponsored project.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Yocto 项目和 OpenEmbedded 项目整合了他们的工作，形成了一个核心构建系统，称为 OpenEmbedded Core。它融合了 Poky
    和 OpenEmbedded 的精华，强调更多地使用附加组件、元数据和子集。大约在 2010 年 11 月，Linux 基金会宣布 Yocto 项目将在一个由
    Linux 基金会资助的项目下继续这一工作。
- en: Understanding Poky
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 Poky
- en: Poky is the default Yocto Project reference distribution, which uses OpenEmbedded
    build system technology. It is composed of a collection of tools, configuration
    files, and recipe data (known as metadata). It is platform-independent and performs
    cross-compiling using the BitBake tool, OpenEmbedded Core, and a default set of
    metadata, as shown in the following figure. In addition, it provides the mechanism
    to build and combine thousands of distributed open source projects to form a fully
    customizable, complete, and coherent Linux software stack.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Poky 是默认的 Yocto 项目参考发行版，使用 OpenEmbedded 构建系统技术。它由工具、配置文件和配方数据（称为元数据）组成。它是平台独立的，并使用
    BitBake 工具、OpenEmbedded Core 以及一组默认的元数据进行交叉编译，如下图所示。此外，它提供了构建和组合成千上万个分布式开源项目的机制，以形成一个完全可定制、完整且一致的
    Linux 软件栈。
- en: Poky’s main objective is to provide all the features an embedded developer needs.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Poky 的主要目标是提供嵌入式开发者所需的所有功能。
- en: '![Figure 1.1 – Poky main components](img/B19361_01_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – Poky 主要组件](img/B19361_01_01.jpg)'
- en: Figure 1.1 – Poky main components
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – Poky 主要组件
- en: BitBake
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BitBake
- en: BitBake is a task scheduler and execution system that parses Python and Shell
    Script code. The code that is parsed generates and runs tasks, which are a set
    of steps ordered per the code’s dependencies.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake 是一个任务调度器和执行系统，解析 Python 和 Shell 脚本代码。解析后的代码生成并运行任务，这些任务是按代码的依赖关系排列的一系列步骤。
- en: BitBake evaluates all available metadata, managing dynamic variable expansion,
    dependencies, and code generation. In addition, it keeps track of all tasks to
    ensure their completion, maximizing the use of processing resources to reduce
    build time and predictability. The development of BitBake happens in the [https://lists.openembedded.org/g/bitbake-devel](https://lists.openembedded.org/g/bitbake-devel)
    mailing list, and the source code is in the `bitbake` subdirectory of Poky.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake 评估所有可用的元数据，管理动态变量展开、依赖关系和代码生成。此外，它跟踪所有任务以确保它们完成，最大化处理资源的利用率，从而减少构建时间并提高可预测性。BitBake
    的开发在 [https://lists.openembedded.org/g/bitbake-devel](https://lists.openembedded.org/g/bitbake-devel)
    邮件列表中进行，源代码位于 Poky 的 `bitbake` 子目录中。
- en: OpenEmbedded Core
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenEmbedded Core
- en: The OpenEmbedded Core metadata collection provides the engine of the Poky build
    system. It provides the core features and aims to be generic and as lean as possible.
    It supports seven different processor architectures (ARM, ARM64, x86, x86-64,
    PowerPC, PowerPC 64, MIPS, MIPS64, RISC-V32, and RISC-V 64), only supporting platforms
    to be emulated by QEMU.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: OpenEmbedded Core 元数据集合提供了 Poky 构建系统的引擎。它提供了核心功能，旨在尽可能地通用和精简。它支持七种不同的处理器架构（ARM、ARM64、x86、x86-64、PowerPC、PowerPC
    64、MIPS、MIPS64、RISC-V32 和 RISC-V 64），仅支持通过 QEMU 模拟的平台。
- en: The development is centralized in the [https://lists.openembedded.org/g/openembedded-core](https://lists.openembedded.org/g/openembedded-core)
    ([mailto:openembedded-core@lists.openembedded.org](mailto:openembedded-core@lists.openembedded.org))
    mailing list and houses its metadata inside the `meta` subdirectory of Poky.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 开发工作集中在 [https://lists.openembedded.org/g/openembedded-core](https://lists.openembedded.org/g/openembedded-core)
    （[mailto:openembedded-core@lists.openembedded.org](mailto:openembedded-core@lists.openembedded.org)）邮件列表中，并将其元数据存储在
    Poky 的 `meta` 子目录中。
- en: Metadata
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元数据
- en: 'The metadata includes recipes and configuration files. It is composed of a
    mix of Python and Shell Script text files, providing a tremendously flexible tool.
    Poky uses this to extend OpenEmbedded Core and includes two different layers,
    which are other metadata subsets, shown as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 该元数据包含配方和配置文件。它由 Python 和 Shell 脚本文本文件混合组成，提供了一个极其灵活的工具。Poky 使用它来扩展 OpenEmbedded
    Core，并包括两个不同的层次，它们是其他元数据子集，如下所示：
- en: '`meta-poky`: This layer provides the default and supported distribution policies,
    visual branding, and metadata tracking information (maintainers, upstream status,
    and so on). This is to serve as a curated template that could be used by distribution
    builders to seed their custom distribution.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`meta-poky`：此层提供默认和支持的发行版策略、视觉品牌和元数据跟踪信息（维护者、上游状态等）。这是作为一个精心策划的模板，可供发行版构建者用于创建他们自定义的发行版。'
- en: '`meta-yocto-bsp`: This provides the **Board Support Package** (**BSP**) used
    as the reference hardware for the Yocto Project development and **Quality Assurance**
    (**QA**) process.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`meta-yocto-bsp`：提供了作为 Yocto 项目开发的参考硬件使用的 **板级支持包** (**BSP**) 和 **质量保证** (**QA**)
    过程。'
- en: '[*Chapter 9*](B19361_09.xhtml#_idTextAnchor115), *Developing with Yocto Project*,
    explores the metadata in more detail and serves as a reference when we write our
    recipes.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第9章*](B19361_09.xhtml#_idTextAnchor115)，*与Yocto项目的开发*，更详细地探讨了元数据，并且当我们编写食谱时作为参考。'
- en: The Yocto Project releases
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Yocto项目发布
- en: The Yocto Project has a release every six months, in April and October. This
    release cycle ensures continuous development flow while providing points of increased
    testing and focus on stability. A release becomes a **Stable** or a **Long-Term
    Support** (**LTS**) release whenever a release is ready.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Yocto 项目每六个月发布一次，分别在4月和10月。这个发布周期确保了持续的开发流，同时在稳定性方面提供了更多的测试和重点关注。当一个版本准备好时，它会成为**稳定**版本或**长期支持**（**LTS**）版本。
- en: The support period differs significantly between the stable and LTS releases.
    The support for the stable release is for 7 months, offering 1 month of overlapped
    support for every stable release. The LTS release has a minimal support period
    of 2 years, optionally extended. After the official support period ends, it moves
    to **Community** support and finally reaches **End Of** **Life** (**EOL**).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 支持期在稳定版本和长期支持（LTS）版本之间有显著差异。稳定版本的支持期为7个月，每个稳定版本提供1个月的重叠支持。LTS版本的最短支持期为2年，并可选择延长。官方支持期结束后，转为**社区**支持，最终进入**生命周期结束**（**EOL**）。
- en: When the official release support period ends, a release can be Community support
    if a community member steps in to become the community maintainer. Finally, a
    release turns EOL when there is no change in the source code by 2 months, or the
    community maintainer is no longer an active member.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当官方发布支持期结束后，如果社区成员接手并成为社区维护者，发布版本可以转为社区支持。最终，当源代码在2个月内没有更改，或社区维护者不再是活跃成员时，版本将进入生命周期结束（EOL）阶段。
- en: 'The following diagram shows the two release cycles:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了两个发布周期：
- en: '![Figure 1.2 – Stable or LTS release cycles](img/B19361_01_Table_1.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2 – 稳定版本或LTS版本的发布周期](img/B19361_01_Table_1.jpg)'
- en: Figure 1.2 – Stable or LTS release cycles
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – 稳定版本或LTS版本的发布周期
- en: '*Table 1.1* provides the Yocto Project version, codename, release date, and
    current support level, which can be seen as follows. The updated table is available
    at [https://wiki.yoctoproject.org/wiki/Releases](https://wiki.yoctoproject.org/wiki/Releases):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*表1.1*提供了Yocto项目版本、代号、发布日期和当前支持级别，内容如下所示。更新后的表格可在[https://wiki.yoctoproject.org/wiki/Releases](https://wiki.yoctoproject.org/wiki/Releases)查看：'
- en: '| **Codename** | **Version** | **Release Date** | **Support Level** |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| **代号** | **版本** | **发布日期** | **支持级别** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Mickledore | 4.2 | April 2023 | Future (until October 2023) |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| Mickledore | 4.2 | 2023年4月 | 未来（直到2023年10月） |'
- en: '| Langdale | 4.1 | October 2022 | Stable (until May 2023) |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| Langdale | 4.1 | 2022年10月 | 稳定（直到2023年5月） |'
- en: '| Kirkstone | 4.0 | May 2022 | LTS (minimum April 2024) |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| Kirkstone | 4.0 | 2022年5月 | LTS（最短至2024年4月） |'
- en: '| Honister | 3.4 | October 2021 | EOL |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| Honister | 3.4 | 2021年10月 | 生命周期结束（EOL） |'
- en: '| Hardknott | 3.3 | April 2021 | EOL |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| Hardknott | 3.3 | 2021年4月 | 生命周期结束（EOL） |'
- en: '| Gatesgarth | 3.2 | Oct 2020 | EOL |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| Gatesgarth | 3.2 | 2020年10月 | 生命周期结束（EOL） |'
- en: '| Dunfell | 3.1 | April 2020 | LTS (until April 2024) |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| Dunfell | 3.1 | 2020年4月 | LTS（直到2024年4月） |'
- en: '| Zeus | 3.0 | October 2019 | EOL |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| Zeus | 3.0 | 2019年10月 | 生命周期结束（EOL） |'
- en: '| Warrior | 2.7 | April 2019 | EOL |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| Warrior | 2.7 | 2019年4月 | 生命周期结束（EOL） |'
- en: '| Thud | 2.6 | Nov 2018 | EOL |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| Thud | 2.6 | 2018年11月 | 生命周期结束（EOL） |'
- en: '| Sumo | 2.5 | April 2018 | EOL |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| Sumo | 2.5 | 2018年4月 | 生命周期结束（EOL） |'
- en: '| Rocko | 2.4 | Oct 2017 | EOL |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| Rocko | 2.4 | 2017年10月 | 生命周期结束（EOL） |'
- en: '| Pyro | 2.3 | May 2017 | EOL |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| Pyro | 2.3 | 2017年5月 | 生命周期结束（EOL） |'
- en: '| Morty | 2.2 | Nov 2016 | EOL |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| Morty | 2.2 | 2016年11月 | 生命周期结束（EOL） |'
- en: '| Krogoth | 2.1 | Apr 2016 | EOL |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| Krogoth | 2.1 | 2016年4月 | 生命周期结束（EOL） |'
- en: '| Jethro | 2.0 | Nov 2015 | EOL |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| Jethro | 2.0 | 2015年11月 | 生命周期结束（EOL） |'
- en: '| Fido | 1.8 | Apr 2015 | EOL |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| Fido | 1.8 | 2015年4月 | 生命周期结束（EOL） |'
- en: '| Dizzy | 1.7 | Oct 2014 | EOL |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| Dizzy | 1.7 | 2014年10月 | 生命周期结束（EOL） |'
- en: '| Daisy | 1.6 | Apr 2014 | EOL |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| Daisy | 1.6 | 2014年4月 | 生命周期结束（EOL） |'
- en: '| Dora | 1.5 | Oct 2013 | EOL |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| Dora | 1.5 | 2013年10月 | 生命周期结束（EOL） |'
- en: '| Dylan | 1.4 | Apr 2013 | EOL |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| Dylan | 1.4 | 2013年4月 | 生命周期结束（EOL） |'
- en: '| Danny | 1.3 | Oct 2012 | EOL |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| Danny | 1.3 | 2012年10月 | 生命周期结束（EOL） |'
- en: '| Denzil | 1.2 | Apr 2012 | EOL |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| Denzil | 1.2 | 2012年4月 | 生命周期结束（EOL） |'
- en: '| Edison | 1.1 | Oct 2011 | EOL |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| Edison | 1.1 | 2011年10月 | 生命周期结束（EOL） |'
- en: '| Bernard | 1.0 | Apr 2011 | EOL |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| Bernard | 1.0 | 2011年4月 | 生命周期结束（EOL） |'
- en: '| Laverne | 0.9 | Oct 2010 | EOL |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| Laverne | 0.9 | 2010年10月 | 生命周期结束（EOL） |'
- en: Table 1.1 – List of Yocto Project versions
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 表1.1 – Yocto项目版本列表
- en: Summary
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter provided an overview of how the OpenEmbedded project is related
    to the Yocto Project, the components that form Poky, and how the project began.
    The next chapter will introduce the Poky workflow with steps to download, configure,
    and prepare the Poky build environment and how to have the first image built and
    running using QEMU.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 本章概述了 OpenEmbedded 项目与 Yocto 项目之间的关系，构成 Poky 的组件以及该项目的起源。下一章将介绍 Poky 工作流，包括如何下载、配置和准备
    Poky 构建环境，以及如何使用 QEMU 构建并运行第一个镜像。
