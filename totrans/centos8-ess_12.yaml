- en: 14\. Configuring SSH Key-based Authentication on CentOS 8
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: When a CentOS 8 system is first installed, it is configured by default to allow
    remote command-line access via Secure Shell (SSH) connections. This provides password
    protected and encrypted access to the system for the root account and any other
    users added during the installation phase. This level of security is far from
    adequate and should be upgraded to SSH key-based authentication as soon as possible.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will outline the steps to increase the security of a CentOS 8 system
    by implementing key-based SSH authentication.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 14.1 An Overview of Secure Shell (SSH)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: SSH is designed to allow secure remote access to systems for the purposes of
    gaining shell access and transferring files and data. As will be covered in [“CentOS
    8 Remote Desktop Access with VNC”](../Text/Remote_Desktop_Access.xhtml#_idTextAnchor196),
    SSH can also be used to provide a secure tunnel through which remote access to
    the GNOME desktop can be achieved over a network connection.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: A basic SSH configuration consists of a client (used on the computer establishing
    the connection) and a server (running on the system to which the connection is
    to be established). A user might, for example, use an SSH client running on a
    Linux, Windows or macOS system to connect to the SSH server running on a CentOS
    8 system to gain access to a shell command-line prompt or to perform file transfers.
    All of the communications between client and server, including the password entered
    to gain access, are encrypted preventing outside parties from intercepting the
    data.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: The inherent weakness in a basic SSH implementation is that it depends entirely
    on the strength of the passwords assigned to the accounts on the system. If a
    malicious party is able to identify the password for an account (either through
    guess work, subterfuge or a brute force attack) the system becomes vulnerable.
    This weakness can be addressed by implementing SSH key-based authentication.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 14.2 SSH Key-based Authentication
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: SSH key-based authentication makes use of asymmetric public key encryption to
    add an extra layer of security to remote system access. The concept of public
    key encryption was devised in 1975 by Whitfield Diffie and Martin Hellman and
    is based on the concept of using a pair of keys, one private and one public.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: In a public key encryption system, the public key is used to encrypt data that
    can only be decrypted by the owner of the private key.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: In the case of SSH key-based authentication, the private key is held by the
    host on which the SSH client is located while the corresponding public key resides
    on the system on which the SSH server is running. It is important to protect the
    private key, since ownership of the key will allow anyone to log into the remote
    system. As an added layer of protection, therefore, the private key may also be
    encrypted and protected by a password which must be entered each time a connection
    is established to the server.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 14.3 Setting Up Key-based Authentication
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four steps to setting up key-based SSH authentication which can be
    summarized as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Generate the public and private keys.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Install the public key on the server.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Test authentication.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Disable password-based authentication on the server.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: The remainder of this chapter will outline these steps in greater detail for
    Linux, macOS and Windows-based client operating systems.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 14.4 SSH Key-based Authentication from Linux and macOS Clients
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step in setting up SSH key-based authentication is to generate the
    key pairs on the client system. If the client system is running Linux or macOS,
    this is achieved using the ssh-keygen utility:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: ssh-keygen
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This will result in output similar to the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Generating public/private rsa key pair.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter file in which to save the key (/home/<username>/.ssh/id_rsa):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Press the Enter key to accept the default location for the key files. This will
    place two files in the .ssh sub-directory of the current user’s home directory.
    The private key will be stored in a file named id_rsa while the public key will
    reside in the file named id_rsa.pub.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Next, ssh-keygen will prompt for a passphrase with which to protect the private
    key. If a passphrase is provided, the private key will be encrypted on the local
    disk and the passphrase required in order to gain access to the remote system.
    For better security, use of a passphrase is recommended.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter passphrase (empty for no passphrase):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the ssh-keygen tool will generate the following output indicating
    that the keys have been generated:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Your identification has been saved in /home/neil/.ssh/id_rsa.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Your public key has been saved in /home/neil/.ssh/id_rsa.pub.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'The key fingerprint is:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: SHA256:FOLGWEEGFIjWnCT5wtTOv5VK4hdimzWghZizUEMYbfo <username>@<hostname>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'The key’s randomart image is:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: +---[RSA 2048]----+
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '|.BB+=+*.. |'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '|o+B= * . . |'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '|===.. + . |'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '|*+ * . . |'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '|.++ o S |'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '|..E+ * o |'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '| o B * |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
- en: '| + + |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
- en: '| . |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
- en: +----[SHA256]-----+
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to install the public key onto the remote server system. This
    can be achieved using the ssh-copy-id utility as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: $ ssh-copy-id username@remote_hostname
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: $ ssh-copy-id neil@192.168.1.100
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/home/neil/.ssh/id_rsa.pub"'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter
    out any that are already installed'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted
    now it is to install the new keys'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'neil@192.168.1.100’s password:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: 'Number of key(s) added: 1'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'Now try logging into the machine, with: "ssh ‘neil@192.168.1.100’"'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: and check to make sure that only the key(s) you wanted were added.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the key is installed, test that the authentication works by attempting
    a remote login using the ssh client:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: $ ssh -l <username> <hostname>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 'If the private key is encrypted and protected with a passphrase, enter the
    phrase when prompted to complete the authentication and establish remote access
    to the CentOS 8 system:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果私钥经过加密并且有密码保护，请在提示时输入密码短语以完成身份验证并建立对 CentOS 8 系统的远程访问：
- en: 'Enter passphrase for key ‘/home/neil/.ssh/id_rsa’:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 输入密钥‘/home/neil/.ssh/id_rsa’的密码短语：
- en: 'Last login: Thu Feb 21 13:41:23 2019 from 192.168.1.101'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 上次登录：2019 年 2 月 21 日 13:41:23，从 192.168.1.101 登录
- en: '[neil@demosystem02 ~]$'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[neil@demosystem02 ~]$'
- en: Repeat these steps for any other accounts on the server for which remote access
    is required. If access is also required from other client systems, simply copy
    the id_rsa private key file to the .ssh sub-directory of your home folder of the
    other systems.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对服务器上需要远程访问的其他账户重复这些步骤。如果其他客户端系统也需要访问，只需将 id_rsa 私钥文件复制到其他系统的主文件夹中的 .ssh 子目录下即可。
- en: 'As currently configured, access to the remote system can still be achieved
    using the less secure password authentication. Once you have verified that key-based
    authentication works, log into the remote system, edit the /etc/ssh/ssh_config
    file and change the PasswordAuthentication setting to no:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如当前配置所示，仍可以使用较不安全的密码验证方式访问远程系统。确认密钥认证工作正常后，登录远程系统，编辑 /etc/ssh/ssh_config 文件并将
    PasswordAuthentication 设置为 no：
- en: PasswordAuthentication no
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: PasswordAuthentication no
- en: 'Save the file and restart the sshd service to implement the change:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并重启 sshd 服务以实施更改：
- en: systemctl restart sshd.service
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: systemctl restart sshd.service
- en: From this point on, it will only be possible to remotely access the system using
    SSH key-based authentication.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 从此以后，只有通过 SSH 密钥认证才能远程访问该系统。
- en: 14.5 Managing Multiple Keys
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 14.5 管理多个密钥
- en: 'It is not uncommon for multiple private keys to reside on a client system,
    each providing access to a different server. There are a number of options for
    selecting a specific key when establishing a connection. It is possible, for example,
    to specify the private key file to be used when launching the ssh client as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端系统上有多个私钥的情况并不罕见，每个私钥都能提供对不同服务器的访问权限。在建立连接时，选择特定密钥有多种方式。例如，可以在启动 ssh 客户端时指定要使用的私钥文件，如下所示：
- en: $ ssh -l neilsmyth -i ~/.ssh/id_work 35.194.18.119
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: $ ssh -l neilsmyth -i ~/.ssh/id_work 35.194.18.119
- en: 'Alternatively, the SSH client user configuration file may be used to associate
    key files with servers. The configuration file is named config, must reside in
    the .ssh directory of the user’s home directory and can be used to configure a
    wide range of options including the private key file, the default port to use
    when connecting, the default user name, and an abbreviated nickname via which
    to reference the server. The following example config file defines different key
    files for two servers and allows them to be referenced by the nicknames home and
    work. In the case of the work system, the file also specifies the user name to
    be used when authenticating:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，也可以使用 SSH 客户端的用户配置文件，将密钥文件与服务器关联。该配置文件名为 config，必须位于用户主目录下的 .ssh 目录中，可以用来配置包括私钥文件、连接时使用的默认端口、默认用户名以及用于引用服务器的简短别名等多种选项。以下示例配置文件为两台服务器定义了不同的密钥文件，并允许通过昵称
    home 和 work 来引用它们。在 work 系统的配置中，文件还指定了身份验证时使用的用户名：
- en: Host work
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Host work
- en: HostName 35.194.18.119
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: HostName 35.194.18.119
- en: IdentityFile ~/.ssh/id_work
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: IdentityFile ~/.ssh/id_work
- en: User neilsmyth
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: User neilsmyth
- en: Host home
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Host home
- en: HostName 192.168.0.21
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: HostName 192.168.0.21
- en: IdentityFile ~/.ssh/id_home
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: IdentityFile ~/.ssh/id_home
- en: 'Prior to setting up the configuration file, the user would have used the following
    command to connect to the work system:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置配置文件之前，用户曾使用以下命令连接到 work 系统：
- en: $ ssh -l neilsmyth -i ~/.ssh/id_work 35.194.18.119
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: $ ssh -l neilsmyth -i ~/.ssh/id_work 35.194.18.119
- en: 'Now, however, the command can be shortened as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，可以通过以下方式简化命令：
- en: $ ssh work
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: $ ssh work
- en: 'A full listing of configuration file options can be found by running the following
    command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行以下命令来查看完整的配置文件选项：
- en: $ man ssh_config
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: $ man ssh_config
- en: 14.6 SSH Key-based Authentication from Windows 10 Clients
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 14.6 从 Windows 10 客户端使用基于 SSH 的认证
- en: Recent releases of Windows 10 include a subset of the OpenSSH implementation
    that is used by most Linux and macOS systems as part of Windows PowerShell. This
    allows SSH key-based authentication to be set up from a Windows 10 client using
    similar steps to those outlined above for Linux and macOS.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'To open Windows PowerShell on a Windows 10 system press the Win+X keyboard
    combination and select it from the menu, or locate and select it from the Start
    menu. Once running, the PowerShell window will appear as shown in [Figure 14-1](../Text/SSH_Authentication.xhtml#_idTextAnchor188):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/windows_10_powwershell.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: Figure 14-1
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'If you already have a private key from another client system, simply copy the
    id_rsa file to a folder named .ssh on the Windows 10 system. Once the file is
    in place, test the authentication within the PowerShell window as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: $ ssh -l <username>@<hostname>
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: PS C:\Users\neil> ssh -l neil 192.168.1.101
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter passphrase for key ''C:\Users\neil/.ssh/id_rsa'':'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Enter the passphrase when prompted and complete the authentication process.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: If an existing private key does not yet exist, generate a new private and public
    key pair within the PowerShell window using the ssh-keygen utility using the same
    steps as those outlined for Linux and macOS. Once the keys have been generated,
    the keys will once again be located in the .ssh directory of the current user’s
    home folder, and the public key file id_rsa.pub will need to be installed on the
    remote CentOS 8 system. Unfortunately, Windows PowerShell does not include the
    ssh-copy-id utility, so this task will need to be performed manually.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the PowerShell window, change directory into the .ssh sub-directory
    and display the content of the public key id_rsa.pub file:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: PS C:\Users\neil> cd .ssh
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: PS C:\Users\neil\.ssh> type id_rsa.pub
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFgx1vzu59lll6/uQw7FbmKVsQ3fzLz9MW1fgo4sdsxXp81wCHNAlqcjx1Pgr9BJPXWUMInQOi7BQ5I+vc2xQ2AS0kMq3ZH9ybWuQe/U2GjueXZd0FKrEXrT55wM36Rm6Ii3roUCoGCzGR8mn95JvRB3VtCyDdzTWSi8JBpK5gV5oOxNTNPsewlLzouBlCT1qW3CKwEiIwu8S9MTL7m3nrcaNeLewTTHevvHw4QDwzFQ+B0PDg96fzsYoTXVhzyHSWyo6H0gqrft7aK+gILBtEIhWTkSVEMAzy1piKtCr1IYTmVK6engv0aoGtMUq6FnOeGp5FjvKkF4aQkh1QR28r
    neil@DESKTOP-S8P8D3N
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Highlight the content of the file and copy it using the Ctrl-C keyboard shortcut.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'Remaining within the PowerShell window, log into the remote system using password
    authentication:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: PS C:\Users\neil\.ssh> ssh -l <username> <hostname>
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'Once signed in, check if the .ssh sub-directory exists. If it does not, create
    it as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: $ mkdir .ssh
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Change directory into .ssh and check whether a file named authorized_keys already
    exists. If it does not, create it and paste the content of the public key file
    from the Windows 10 system into it.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'If the authorized_keys file already exists it most likely already contains
    other keys. If this is the case, edit the file and paste the new public key at
    the end of the file. The following file, for example, contains two keys:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzRWH27Xs8ZA5rIbZXKgxFY5XXauMv+6F5PljBLJ6j+9nkmykVe3GjZTp3oD+KMRbT2kTEPbDpFD67DNL0eiX2ZuEEiYsxZfGCRCPBGYmQttFRHEAFnlS1Jx/G4W5UNKvhAXWyMwDEKiWvqTVy6syB2Ritoak+D/Sc8nJflQ6dtw0jBs+S7Aim8TPfgpi4p5XJGruXNRScamk68NgnPfTL3vT726EuABCk6C934KARd+/AXa8/5rNOh4ETPstjBRfFJ0tpmsWWhhNEnwJRqS2LD0ug7E3yFI2qsNKGEzvAYUC8Up45MRP7liR3aMlCBil1tsy9R+IB7oMEycZAe/qj
    neil@localhost.localdomain
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFgx1vzu59lll6/uQw7FbmKVsQ3fzLz9MW1fgo4sdsxXp81wCHNAlqcjx1Pgr9BJPXWUMInQOi7BQ5I+vc2xQ2AS0kMq3ZH9ybWuQe/U2GjueXZd0FKrEXrT55wM36Rm6Ii3roUCoGCzGR8mn95JvRB3VtCyDdzTWSi8JBpK5gV5oOxNTNPsewlLzouBlCT1qW3CKwEiIwu8S9MTL7m3nrcaNeLewTTHevvHw4QDwzFQ+B0PDg96fzsYoTXVhzyHSWyo6H0gqrft7aK+gILBtEIhWTkSVEMAzy1piKtCr1IYTmVK6engv0aoGtMUq6FnOeGp5FjvKkF4aQkh1QR28r
    neil@DESKTOP-S8P8D3N
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the public key is installed on the server, test the authentication by
    logging in to the server from within the Windows 10 PowerShell window, for example:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: PS C:\Users\neil\.ssh> ssh -l neil 192.168.1.100
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter passphrase for key ''C:\Users\neil/.ssh/id_rsa'':'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: When key-based authentication has been set up for all the accounts and verified,
    disable password authentication on the CentOS 8 system as outlined at the end
    of the previous section.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 14.7 SSH Key-based Authentication using PuTTY
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows systems that do not have OpenSSH available, or as a more flexible
    alternative to using PowerShell, the PuTTY tool is a widely used alternative.
    The first step in using PuTTY is to download and install it on any Windows systems
    that need an SSH client. PuTTY is a free utility and can be downloaded using the
    following link:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html](https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Download the Windows installer executable that matches your Windows system (32-bit
    and 64-bit versions are available) then execute the installer to complete installation.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: If a private key already exists on another system, create the .ssh folder in
    the home folder of the current user and copy the private id_rsa key into it.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, the private key file needs to be converted to a PuTTY private key format
    file using the PuTTYgen tool. Locate this utility in the Windows Start menu and
    launch it:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/windows_puttygen_main.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
- en: Figure 14-2
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Once launched, click on the Load button located in the Actions section and navigate
    to the private key file previously copied to the .ssh folder (note that it may
    be necessary to change the file type filter to All Files (*.*)) in order for the
    key file to be visible. Once located, select the file and load it into PuttyGen.
    When prompted, enter the passphrase originally used to encrypt the file. Once
    the private key has been imported, save it as a PuTTY key file by clicking on
    the Save Private Key button. For consistency, save the key file to the .ssh folder
    but give it a different name to differentiate it from the original key file.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch PuTTY from the Start menu and enter the IP address or host name of the
    remote server into the main screen before selecting the Connection -> SSH -> Auth
    category in the left-hand panel as highlighted in [Figure 14-3](../Text/SSH_Authentication.xhtml#_idTextAnchor190):'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/windows_putty_ssh_auth.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
- en: Figure 14-3
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Browse button next to the Private key for authentication field
    and navigate to and select the previously saved PuTTY private key file. Optionally,
    scroll to the top of the left-hand panel, select the Session entry and enter a
    name for the session in the Saved Sessions field before clicking on the Save button.
    This will save the session configuration so that it can be used in future without
    having to re-enter the settings each time.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Finally, click on the Open button to establish the connection to the remote
    server, entering the user name and passphrase when prompted to do so to complete
    the authentication.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 14.8 Generating a Private Key with PuTTYgen
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: The previous section explored the use of existing private and public keys when
    working with PuTTY. If keys do not already exist, they can be created using the
    PuTTYgen tool which is included with the main PuTTY installation.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'To create new keys, launch PuttyGen and click on the Generate button highlighted
    in [Figure 14-4](../Text/SSH_Authentication.xhtml#_idTextAnchor192):'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/windows_puttygen_main1.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
- en: Figure 14-4
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Move the mouse pointer around to generate random data as instructed, then enter
    an optional passphrase with which to encrypt the private key. Once the keys have
    been generated, save the files to suitable locations using the Save public key
    and Save private key buttons. The private key can be used with PuTTY as outlined
    in the previous section. To install the public key on the remote server use the
    steps covered in the earlier section on using SSH within PowerShell on Windows
    10.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 14.9 Installing the Public Key for a Google Cloud Instance
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'If your CentOS 8 system is hosted by Google Cloud, for example as a Compute
    Engine instance, there are a number of different ways to gain SSH access to the
    server using key-based authentication. Perhaps the most straightforward is to
    add your public key to the metadata for your Google Cloud account. This will make
    the public key available for all Virtual Machine instances that you create within
    Google Cloud. To add the public key, log into the Google Cloud Platform console,
    select the Metadata option from the left-hand navigation panel as highlighted
    in [Figure 14-5](../Text/SSH_Authentication.xhtml#_idTextAnchor194) and select
    the SSH keys tab:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/google_cloud_ssh_key_list.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
- en: Figure 14-5
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: On the SSH Keys screen, click on the Edit button (also highlighted in [Figure
    14-5](../Text/SSH_Authentication.xhtml#_idTextAnchor194)) to edit the list of
    keys. Scroll down to the bottom of the current list and click on the + Add Item
    button. A new field will appear into which you will need to paste the entire public
    key as it appears in your id_rsa.pub file. Once the key has been entered, click
    on the Save button to add the key.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在SSH密钥屏幕上，点击编辑按钮（如[图14-5](../Text/SSH_Authentication.xhtml#_idTextAnchor194)中高亮显示的那样）以编辑密钥列表。向下滚动至当前列表的底部，点击+
    添加项目按钮。将会出现一个新的字段，你需要将整个公钥粘贴进去，该公钥应当与你id_rsa.pub文件中的内容一致。输入密钥后，点击保存按钮以添加密钥。
- en: 'The public key will now appear in the list of SSH Keys. Note that the key entry
    also includes the username which must be used when logging into any Google Cloud
    instances:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 公钥现在将出现在SSH密钥列表中。请注意，密钥条目中还包含了登录任何Google Cloud实例时必须使用的用户名：
- en: '![](img/google_cloud_ssh_key_added.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/google_cloud_ssh_key_added.png)'
- en: Figure 14-6
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-6
- en: With the public key added to the metadata it should be possible to access any
    virtual machine instance from any client on which the corresponding private key
    has been installed and on which the user has an account. In fact, behind the scenes,
    all Google Cloud has done to enable this is add the public key to the .ssh/authorized_keys
    file in the user’s home directory on any virtual machines on which the account
    exists.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在元数据中添加了公钥后，应该能够从任何安装了对应私钥且用户有账户的客户端访问任何虚拟机实例。实际上，Google Cloud所做的工作就是将公钥添加到用户在任何虚拟机上账户所在的.home目录中的.ssh/authorized_keys文件中。
- en: 14.10 Summary
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 14.10 小结
- en: It is important that any remote access to a CentOS 8 system be implemented in
    a way that provides a high level of security. By default, a CentOS 8 system allows
    SSH based access using password-based authentication. This leaves the system vulnerable
    to anyone who can either guess a password, or find out the password through other
    means. For this reason, the use of key-based authentication is recommended to
    protect system access. Key-based authentication uses the concept of public key
    encryption involving public and private keys. When implemented, users are only
    able to connect to a server if they are using a client which has a private key
    that matches a public key on the server. As an added layer of security, the private
    key may also be encrypted and password protected. Once key-based encryption has
    been implemented, the server system is then configured to disable support for
    the less secure password-based authentication.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 任何远程访问CentOS 8系统的方式都必须确保高度的安全性。默认情况下，CentOS 8系统允许使用基于密码的认证进行SSH访问，这使得系统容易受到任何能够猜测密码或通过其他方式获取密码的人的攻击。因此，建议使用基于密钥的认证来保护系统访问。基于密钥的认证使用公钥加密的概念，涉及公钥和私钥。当实现时，用户只能连接到服务器，如果他们使用的客户端拥有与服务器上的公钥匹配的私钥。作为额外的安全措施，私钥也可以被加密并设置密码保护。一旦实现了基于密钥的加密，服务器系统将配置为禁用对不太安全的基于密码的认证的支持。
- en: This chapter has provided an overview of SSH key-based authentication and outlined
    the steps involved in generating keys and configuring clients on macOS, Linux
    and Windows, in addition to the installation and management of public keys on
    a CentOS 8 server.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 本章概述了基于SSH密钥的认证，并概述了在macOS、Linux和Windows上生成密钥和配置客户端的步骤，此外还包括在CentOS 8服务器上安装和管理公钥的步骤。
