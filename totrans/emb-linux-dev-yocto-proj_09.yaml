- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Developing with the Yocto Project
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Yocto 项目进行开发
- en: So far in this book, we have used Poky as a build tool. In other words, we have
    used it as a tool to design and generate the image delivered to products.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本书中我们使用了Poky作为构建工具。换句话说，我们把它当作设计和生成交付产品镜像的工具。
- en: In this chapter, we will see how to set up a development environment for use
    inside the target and meet the **Standard SDK** and **Extensible SDK** tools,
    which can help us develop applications outside the target. For example, they allow
    us to cross-compile applications, recipes, and images.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何设置目标设备内部使用的开发环境，并了解**标准 SDK**和**可扩展 SDK**工具，这些工具可以帮助我们在目标设备外开发应用。例如，它们允许我们进行交叉编译应用、配方和镜像。
- en: What is a software development kit?
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是软件开发工具包？
- en: In embedded development, the toolchain is often composed of cross-platform tools
    or tools executed on one architecture, which then produces a binary for use in
    another architecture – for example, a GCC tool that runs on an x86-64-compatible
    machine and generates binaries for an ARM machine is a cross-compiler. When a
    tool and the resulting binaries rely on dependencies from the same host on which
    the tool runs, this is commonly called a native build. Build and target architectures
    may be the same, but it is cross-compilation if the target binary uses a staged
    root filesystem to find its dependencies.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在嵌入式开发中，工具链通常由跨平台工具组成，这些工具在一种架构上执行，然后生成用于另一种架构的二进制文件——例如，一个在 x86-64 兼容机器上运行并生成
    ARM 机器二进制文件的 GCC 工具就是一个交叉编译器。当一个工具和由该工具生成的二进制文件依赖于相同主机上的依赖项时，这通常被称为本地构建。构建和目标架构可能相同，但如果目标二进制文件使用分阶段的根文件系统来查找其依赖项，则这是交叉编译。
- en: 'A **software development kit** (**SDK**) is a set of tools and files to develop
    and debug applications. These tools include compilers, linkers, debuggers, external
    libraries, headers, and binaries, also called a toolchain. It may also include
    extra utilities and applications. We can have two types of SDK:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**软件开发工具包**（**SDK**）是一组用于开发和调试应用程序的工具和文件。这些工具包括编译器、链接器、调试器、外部库、头文件和二进制文件，也称为工具链。它可能还包括额外的实用工具和应用程序。我们可以有两种类型的
    SDK：'
- en: '**Cross-development SDKs**: These have the goal of being used in the development
    host to generate binaries for the target'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交叉开发 SDK**：这些 SDK 旨在用于开发主机，以为目标设备生成二进制文件'
- en: '**Native SDKs**: These aim to run on the target device'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地 SDK**：这些工具旨在运行在目标设备上'
- en: Generating a native SDK for on-device development
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为设备开发生成本地 SDK
- en: 'Some embedded devices are powerful enough to be used as a development environment.
    However, the resources needed for the build vary significantly from one library
    or application to another, so using the target as the building environment may
    not always be viable. The development image needs the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一些嵌入式设备的性能足以作为开发环境使用。然而，构建所需的资源因库或应用的不同而有显著差异，因此使用目标设备作为构建环境可能并不总是可行的。开发镜像需要以下内容：
- en: The header files and libraries
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 头文件和库
- en: The toolchain
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具链
- en: 'The following line adds these properties to an image:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行将这些属性添加到镜像中：
- en: '![Figure 9.1 – How to configure an image to include development artifacts](img/Figure_9.01_B19361.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图9.1 - 如何配置镜像以包含开发制品](img/Figure_9.01_B19361.jpg)'
- en: Figure 9.1 – How to configure an image to include development artifacts
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 - 如何配置镜像以包含开发制品
- en: '`IMAGE_FEATURES` in the preceding example extends the image functionality as
    follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 前述示例中的`IMAGE_FEATURES`扩展了镜像的功能，如下所示：
- en: '`dev-pkgs`: Installs development packages (headers and extra library links)
    for all packages installed in a given image'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dev-pkgs`: 为给定镜像中安装的所有包安装开发包（头文件和额外的库链接）'
- en: '`tools-sdk`: Installs the toolchain that runs on the device'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tools-sdk`: 安装在设备上运行的工具链'
- en: The `IMAGE_FEATURES` variable is described in more detail in [*Chapter 12*](B19361_12.xhtml#_idTextAnchor147),
    *Creating* *Custom Layers*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`IMAGE_FEATURES`变量在[*第12章*](B19361_12.xhtml#_idTextAnchor147)中有更详细的描述，*创建*
    *自定义层*。'
- en: Tip
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: If we want to modify only `build/conf/local.conf`, the variable we should use
    is `EXTRA_IMAGE_FEATURES`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只想修改`build/conf/local.conf`，应该使用的变量是`EXTRA_IMAGE_FEATURES`。
- en: The target can use this image during the application development cycle and share
    the image among all developers working on the same project. Each developer will
    have a copy, and the development team will use the same development environment
    consistently.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 目标设备可以在应用程序开发周期中使用此镜像，并且可以在所有开发人员之间共享此镜像。每个开发人员将拥有一个副本，开发团队将始终使用相同的开发环境。
- en: Understanding the types of cross-development SDKs
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解交叉开发SDK的类型
- en: 'The Yocto Project can generate two types of cross-development SDKs that aim
    to cover different needs. They are defined as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Yocto项目可以生成两种类型的交叉开发SDK，以满足不同的需求。它们的定义如下：
- en: '**Standard SDK**: This provides the artifacts for application development,
    be it for bootloader or Linux kernel development, or some other user space software'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准SDK**：提供用于应用程序开发的工件，无论是用于引导加载程序、Linux内核开发，还是其他用户空间软件'
- en: '`sysroot` directory, as well as recipe and application integration inside a
    Yocto Project-controlled environment'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sysroot`目录，以及在Yocto项目控制环境中集成的配方和应用程序'
- en: The Standard SDK includes a toolchain and debugging applications. Its goal is
    to allow users to generate binaries for use in the target. The Extensible SDK
    is more powerful and can build images and recipes. A notable difference between
    the two types of SDK is the presence of `devtool` in the Extensible SDK.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 标准SDK包括一个工具链和调试应用程序。其目标是允许用户生成用于目标设备的二进制文件。可扩展SDK更强大，可以构建镜像和配方。两种SDK之间的一个显著区别是可扩展SDK中包含`devtool`。
- en: '`devtool` is responsible for providing the additional features of the Extensible
    SDK. It is an interface for using BitBake and `recipetool`’s power. The `devtool`
    and `recipetool` commands are also available in the traditional Yocto Project
    environment.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`devtool`负责提供可扩展SDK的附加功能。它是用于使用BitBake和`recipetool`功能的接口。`devtool`和`recipetool`命令也可以在传统的Yocto项目环境中使用。'
- en: Using the Standard SDK
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用标准SDK
- en: 'Usually, an SDK has a set of libraries and applications it must provide, which
    is defined in an image tailored to the product. These are called image-based SDKs.
    For example, we can generate the Standard SDK for `core-image-full-cmdline` with
    the following command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，一个SDK必须提供一组库和应用程序，这些是针对产品量身定制的镜像中定义的。这些被称为基于镜像的SDK。例如，我们可以使用以下命令为`core-image-full-cmdline`生成标准SDK：
- en: '![Figure 9.2 – How to generate the Standard SDK for core-image-full-cmdline](img/Figure_9.02_B19361.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图9.2 – 如何为core-image-full-cmdline生成标准SDK](img/Figure_9.02_B19361.jpg)'
- en: Figure 9.2 – How to generate the Standard SDK for core-image-full-cmdline
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 – 如何为core-image-full-cmdline生成标准SDK
- en: 'Another option is to create a generic SDK with the toolchain and debugging
    tools. This generic SDK is called `meta-toolchain` and is used mainly for Linux
    kernel and bootloader development and their debugging processes. It may not be
    sufficient to build applications with complex dependencies. To create `meta-toolchain`,
    use the following command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是使用工具链和调试工具创建通用SDK。这个通用SDK称为`meta-toolchain`，主要用于Linux内核和引导加载程序的开发及其调试过程。它可能不足以构建具有复杂依赖关系的应用程序。要创建`meta-toolchain`，使用以下命令：
- en: '![Figure 9.3 – How to generate a generic SDK](img/Figure_9.03_B19361.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图9.3 – 如何生成通用SDK](img/Figure_9.03_B19361.jpg)'
- en: Figure 9.3 – How to generate a generic SDK
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3 – 如何生成通用SDK
- en: 'In both cases, the resulting SDK self-installer files are at `build/tmp/deploy/sdk/`.
    Considering we used the Standard SDK for `core-image-full-cmdline`, we can see
    the following resulting set of files:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，生成的SDK自安装文件位于`build/tmp/deploy/sdk/`。考虑到我们使用了标准SDK来构建`core-image-full-cmdline`，我们可以看到以下生成的文件集：
- en: '![Figure 9.4 – The resultant files after running bitbake core-image-full-cmdline
    -c populate_sdk](img/Figure_9.04_B19361.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图9.4 – 运行bitbake core-image-full-cmdline -c populate_sdk后的生成文件](img/Figure_9.04_B19361.jpg)'
- en: Figure 9.4 – The resultant files after running bitbake core-image-full-cmdline
    -c populate_sdk
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4 – 运行bitbake core-image-full-cmdline -c populate_sdk后的生成文件
- en: 'The next step after creating the Standard SDK is to install it, as the Standard
    SDK is wrapped in an installation script that can be executed in the same manner
    as any other script. The following sequence shows the Standard SDK installation
    process using the standard target directory:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 创建标准SDK后的下一步是安装它，因为标准SDK被打包在一个安装脚本中，可以像任何其他脚本一样执行。以下步骤展示了使用标准目标目录安装标准SDK的过程：
- en: '![Figure 9.5 – The Standard SDK installation process](img/Figure_9.05_B19361.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图9.5 – 标准SDK安装过程](img/Figure_9.05_B19361.jpg)'
- en: Figure 9.5 – The Standard SDK installation process
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.5 – 标准 SDK 安装过程
- en: The preceding Standard SDK illustrates how we can generate and install a Standard
    SDK. Still, it is not ideal to use a standard image that is not tailored to your
    current needs. Therefore, creating a custom image that fits our application needs
    is highly recommended. It is also recommended to base the Standard SDK on this
    custom image.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 上述标准 SDK 演示了如何生成和安装标准 SDK。然而，使用未经针对当前需求定制的标准镜像并不是理想选择。因此，强烈建议创建一个适合我们应用需求的自定义镜像。也建议基于此自定义镜像来构建标准
    SDK。
- en: 'The Standard SDK is generated to match the machine architecture we set using
    the `MACHINE` variable. To use the Standard SDK to build a custom application,
    for example, `hello-world.c`, we can use the following lines, targeting the x86-64
    architecture:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 标准 SDK 是根据我们使用 `MACHINE` 变量设置的机器架构生成的。要使用标准 SDK 构建自定义应用程序，例如 `hello-world.c`，我们可以使用以下命令，目标架构为
    x86-64：
- en: '![Figure 9.6 – The steps to build a C application using the Standard SDK](img/Figure_9.06_B19361.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.6 – 使用标准 SDK 构建 C 应用程序的步骤](img/Figure_9.06_B19361.jpg)'
- en: Figure 9.6 – The steps to build a C application using the Standard SDK
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.6 – 使用标准 SDK 构建 C 应用程序的步骤
- en: 'Another very commonly used project is the Linux kernel. When we want to build
    the Linux kernel source code, we can use the following sequence of commands:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常用项目是 Linux 内核。当我们想要构建 Linux 内核源代码时，可以使用以下命令顺序：
- en: "![Figure 9.7 – The steps to build the Linux \uFEFFkernel using the Standard\
    \ SDK](img/Figure_9.07_B19361.jpg)"
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.7 – 使用标准 SDK 构建 Linux 内核的步骤](img/Figure_9.07_B19361.jpg)'
- en: Figure 9.7 – The steps to build the Linux kernel using the Standard SDK
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.7 – 使用标准 SDK 构建 Linux 内核的步骤
- en: '`unset LDFLAGS` is required to avoid using GCC for linking, which is the Yocto
    Project-based Standard SDK’s default.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 必须使用 `unset LDFLAGS` 来避免使用 GCC 进行链接，这是基于 Yocto 项目的标准 SDK 默认的做法。
- en: Using the Extensible SDK
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用可扩展 SDK
- en: 'The Extensible SDK expands the functionalities of the Standard SDK. Some of
    the significant capabilities included are as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展 SDK 扩展了标准 SDK 的功能。包括的一些主要功能如下：
- en: Generate recipes
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成配方
- en: Build recipes
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建配方
- en: Build images
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建镜像
- en: Install packages in the internal toolchain
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在内部工具链中安装软件包
- en: Deploy packages to the target
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将软件包部署到目标
- en: Those additional features are provided by the `devtool` utility, which is also
    available in the standard Yocto Project environment.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这些额外功能是由 `devtool` 工具提供的，`devtool` 在标准 Yocto 项目环境中也可用。
- en: 'To generate the Extensible SDK, use the following command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 生成可扩展 SDK，请使用以下命令：
- en: '![Figure 9.8 – Command to generate the Extensible SDK](img/Figure_9.08_B19361.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.8 – 生成可扩展 SDK 的命令](img/Figure_9.08_B19361.jpg)'
- en: Figure 9.8 – Command to generate the Extensible SDK
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.8 – 生成可扩展 SDK 的命令
- en: 'The resulting files are in `build/tmp/deploy/sdk/`. Considering we used the
    Extensible SDK for `core-image-full-cmdline`, we see the following set of files:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的文件位于 `build/tmp/deploy/sdk/` 中。考虑到我们使用可扩展 SDK 进行 `core-image-full-cmdline`
    构建，我们可以看到以下文件集：
- en: '![Figure 9.9 – The resultant files after running bitbake core-image-full-cmdline
    -c populate_sdk_ext](img/Figure_9.09_B19361.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.9 – 运行 bitbake core-image-full-cmdline -c populate_sdk_ext 后生成的文件](img/Figure_9.09_B19361.jpg)'
- en: Figure 9.9 – The resultant files after running bitbake core-image-full-cmdline
    -c populate_sdk_ext
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.9 – 运行 bitbake core-image-full-cmdline -c populate_sdk_ext 后生成的文件
- en: 'The next step after creating the Extensible SDK is to install it. To install
    it, we can execute the generated script. The following sequence shows the Extensible
    SDK installation process using the standard target directory:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 创建可扩展 SDK 后的下一步是安装它。要安装它，我们可以执行生成的脚本。以下命令序列展示了使用标准目标目录安装可扩展 SDK 的过程：
- en: '![Figure 9.10 – The Extensible SDK installation process](img/Figure_9.10_B19361.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.10 – 可扩展 SDK 安装过程](img/Figure_9.10_B19361.jpg)'
- en: Figure 9.10 – The Extensible SDK installation process
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.10 – 可扩展 SDK 安装过程
- en: The preceding screenshot illustrates how we can generate and install an Extensible
    SDK. Still, it is not ideal to use a standard image that is not tailored to your
    current needs. Therefore, creating a custom image that fits your application needs
    is highly recommended, as is basing the Extensible SDK on one. However, we can
    build and install any extra dependencies into the SDK using the Extensible SDK.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图展示了我们如何生成并安装一个可扩展的SDK。然而，使用一个不符合当前需求的标准镜像并不是理想的做法。因此，强烈建议创建一个适合您应用需求的自定义镜像，并基于此创建可扩展SDK。但是，我们可以通过使用可扩展SDK来构建并安装任何额外的依赖项。
- en: 'In our case, we installed the Extensible SDK in `/home/user/poky_sdk`. After
    the installation has been completed, the next step is to use the provided script
    to export the required environment variables, which enables the Extensible SDK’s
    use, with the following command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们将可扩展SDK安装在`/home/user/poky_sdk`目录中。安装完成后，下一步是使用提供的脚本导出所需的环境变量，这样就可以使用可扩展SDK，命令如下：
- en: '![Figure 9.11 – Exporting the environment variables to allow the Extensible
    SDK to be used](img/Figure_9.11_B19361.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.11 – 导出环境变量以允许使用可扩展SDK](img/Figure_9.11_B19361.jpg)'
- en: Figure 9.11 – Exporting the environment variables to allow the Extensible SDK
    to be used
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.11 – 导出环境变量以允许使用可扩展SDK
- en: In the following sections, we will cover some use cases using `devtool`. All
    commands are executed inside a terminal with the Extensible SDK variables exported.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将讨论一些使用`devtool`的案例。所有命令都在终端中执行，并且已导出可扩展SDK的环境变量。
- en: 'The Extensible SDK is a different way to deliver the same Yocto Project tools
    and metadata. It wraps together the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展SDK是一种不同的方式来交付相同的Yocto项目工具和元数据。它将以下内容打包在一起：
- en: A basic set of binaries for the Yocto Project environment execution
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于Yocto项目环境执行的一组基本二进制文件
- en: A Standard SDK for development
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于开发的标准SDK
- en: A shared state cache to reduce local builds
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个共享状态缓存，以减少本地构建
- en: A snapshot of the Yocto Project metadata and configuration
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yocto项目元数据和配置的快照
- en: Essentially, the Extensible SDK is a snapshot of the environment used to create
    it. Therefore, all `devtool` commands, including those we will use in the following
    sections, are available inside the Yocto Project environment.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，可扩展SDK是用于创建它的环境的快照。因此，所有`devtool`命令，包括我们将在接下来的部分中使用的命令，都可以在Yocto项目环境中使用。
- en: Building an image using devtool
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 devtool 构建镜像
- en: 'Let’s start by creating an image. The Extensible SDK is capable of creating
    any supported image. For example, to create `core-image-full-cmdline`, we can
    use the following command line:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建镜像开始。可扩展SDK能够创建任何支持的镜像。例如，要创建`core-image-full-cmdline`，我们可以使用以下命令行：
- en: '![Figure 9.12 – Building core-image-full-cmdline with devtool](img/Figure_9.12_B19361.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.12 – 使用 devtool 构建 core-image-full-cmdline](img/Figure_9.12_B19361.jpg)'
- en: Figure 9.12 – Building core-image-full-cmdline with devtool
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.12 – 使用 devtool 构建 core-image-full-cmdline
- en: After running the `devtool` command, the generated files can be found in `/home/user/poky_sdk/tmp/deploy/images/qemux86-64`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`devtool`命令后，生成的文件可以在`/home/user/poky_sdk/tmp/deploy/images/qemux86-64`目录中找到。
- en: Running an image on QEMU
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 QEMU 上运行镜像
- en: 'We can emulate the target hardware with QEMU using the previously built image,
    `core-image-full-cmdline`, with the following command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用之前构建的镜像`core-image-full-cmdline`通过QEMU仿真目标硬件，命令如下：
- en: '![Figure 9.13 – Emulating with devtool and QEMU](img/Figure_9.13_B19361.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.13 – 使用 devtool 和 QEMU 进行仿真](img/Figure_9.13_B19361.jpg)'
- en: Figure 9.13 – Emulating with devtool and QEMU
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.13 – 使用 devtool 和 QEMU 进行仿真
- en: 'It starts the QEMU execution and generates the boot splash, as is shown in
    the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 它启动QEMU执行并生成启动画面，如下图所示：
- en: '![Figure 9.14 – The QEMU boot splash](img/Figure_9.14_B19361.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.14 – QEMU 启动画面](img/Figure_9.14_B19361.jpg)'
- en: Figure 9.14 – The QEMU boot splash
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.14 – QEMU 启动画面
- en: Creating a recipe from an external Git repository
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从外部 Git 仓库创建配方
- en: '`devtool` is also capable of producing a recipe from an external Git repository.
    Here, we are going to use [https://github.com/OSSystems/bbexample](https://github.com/OSSystems/bbexample):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`devtool`还能够从外部Git仓库生成配方。在这里，我们将使用[https://github.com/OSSystems/bbexample](https://github.com/OSSystems/bbexample)：'
- en: '![Figure 9.15 – Creating the recipe using devtool](img/Figure_9.15_B19361.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.15 – 使用 devtool 创建配方](img/Figure_9.15_B19361.jpg)'
- en: Figure 9.15 – Creating the recipe using devtool
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.15 – 使用 devtool 创建配方
- en: '`devtool` creates a basic recipe file for the given repository. It creates
    a workspace with the package source code and the needed metadata. The file structure
    used by `devtool`, after the `devtool add https://github.com/OSSystems/bbexample`
    command is run, is as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`devtool` 为给定的仓库创建一个基本的配方文件。它创建了一个包含包源代码和所需元数据的工作区。在运行 `devtool add https://github.com/OSSystems/bbexample`
    命令后，`devtool` 使用的文件结构如下所示：'
- en: '![Figure 9.16 – The file structure created by devtool when creating a recipe](img/Figure_9.16_B19361.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.16 – 使用 devtool 创建配方时生成的文件结构](img/Figure_9.16_B19361.jpg)'
- en: Figure 9.16 – The file structure created by devtool when creating a recipe
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.16 – 使用 devtool 创建配方时生成的文件结构
- en: 'Currently, `devtool` generates a tentative recipe for projects based on the
    following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当前，`devtool` 根据以下内容生成一个暂定的配方：
- en: Autotools (`autoconf` and `automake`)
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Autotools（`autoconf` 和 `automake`）
- en: CMake
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CMake
- en: Scons
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scons
- en: '`qmake`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qmake`'
- en: A plain `Makefile`
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个普通的 `Makefile`
- en: The Node.js module
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 模块
- en: Python modules that use `setuptools` or `distutils`
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `setuptools` 或 `distutils` 的 Python 模块
- en: Building a recipe using devtool
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 devtool 构建配方
- en: 'Now that the recipe has been created under the workspace directory, we can
    build it with the following command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，配方已经在工作区目录下创建，我们可以使用以下命令构建它：
- en: '![Figure 9.17 – Building a recipe with devtool](img/Figure_9.17_B19361.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.17 – 使用 devtool 构建配方](img/Figure_9.17_B19361.jpg)'
- en: Figure 9.17 – Building a recipe with devtool
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.17 – 使用 devtool 构建配方
- en: Deploying to the target using devtool
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 devtool 部署到目标
- en: 'After building the package with `devtool`, we can deploy it to the target.
    In our example, the target is the running QEMU. To access it, use the default
    QEMU IP address, `192.168.7.2`, as shown in the following command:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `devtool` 构建完包后，我们可以将其部署到目标设备。在我们的示例中，目标设备是运行中的 QEMU。要访问它，请使用默认的 QEMU IP
    地址 `192.168.7.2`，如下所示的命令：
- en: '![Figure 9.18 – Deploying to the target using devtool](img/Figure_9.18_B19361.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.18 – 使用 devtool 部署到目标](img/Figure_9.18_B19361.jpg)'
- en: Figure 9.18 – Deploying to the target using devtool
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.18 – 使用 devtool 部署到目标
- en: 'The application is installed in the target. We can see `bbexample` being executed
    in the QEMU target, as shown in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序已安装在目标设备上。我们可以看到 `bbexample` 在 QEMU 目标上执行，如下图所示：
- en: "![Figure 9.19 –\uFEFF bbexample executing on the target](img/Figure_9.19_B19361.jpg)"
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.19 – 在目标上执行 bbexample](img/Figure_9.19_B19361.jpg)'
- en: Figure 9.19 – bbexample executing on the target
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.19 – 在目标上执行 bbexample
- en: Extending the SDK
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展 SDK
- en: 'One of the goals of the Extensible SDK is to allow us to install different
    recipes in the SDK environment. For example, to have `libusb1` available, we can
    run the following command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展 SDK 的目标之一是允许我们在 SDK 环境中安装不同的配方。例如，为了使 `libusb1` 可用，我们可以运行以下命令：
- en: '![Figure 9.20 – The installation of a new recipe in the Extensible SDK](img/Figure_9.20_B19361.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.20 – 在可扩展 SDK 中安装新配方](img/Figure_9.20_B19361.jpg)'
- en: Figure 9.20 – The installation of a new recipe in the Extensible SDK
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.20 – 在可扩展 SDK 中安装新配方
- en: Tip
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The Yocto Project Extensible SDK allows for distributed development, as developers
    can update and extend the existing SDK environment during a project’s lifetime.
    There is some infrastructure setup required for the proper use of the Extensible
    SDK as a `sstate-cache` mirror and Extensible SDK server, which requires a complex
    configuration beyond the scope of this book. For more details, please refer to
    the *Providing Updates to the Extensible SDK After Installation* section of *Yocto
    Project Application Development and the Extensible Software Development Kit (**eSDK)*
    ([https://docs.yoctoproject.org/4.0.4/sdk-manual/appendix-customizing.html#providing-updates-to-the-extensible-sdk-after-installation](https://docs.yoctoproject.org/4.0.4/sdk-manual/appendix-customizing.html#providing-updates-to-the-extensible-sdk-after-installation)).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Yocto 项目的可扩展 SDK 允许分布式开发，开发者可以在项目生命周期内更新和扩展现有的 SDK 环境。为了正确使用可扩展 SDK 作为 `sstate-cache`
    镜像和可扩展 SDK 服务器，需要一些基础设施的设置，这涉及复杂的配置，超出了本书的范围。更多细节，请参阅《Yocto 项目应用开发与可扩展软件开发工具包
    (**eSDK)**》中的 *安装后向可扩展 SDK 提供更新* 部分 ([https://docs.yoctoproject.org/4.0.4/sdk-manual/appendix-customizing.html#providing-updates-to-the-extensible-sdk-after-installation](https://docs.yoctoproject.org/4.0.4/sdk-manual/appendix-customizing.html#providing-updates-to-the-extensible-sdk-after-installation))。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned that the Yocto Project can be used for development
    and image creation. We learned how to create different types of toolchains and
    also how to use them.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Yocto项目如何用于开发和镜像创建。我们学习了如何创建不同类型的工具链以及如何使用它们。
- en: In the next chapter, we will look at how we can configure Poky to help us in
    the debugging process, how we can configure our system to provide the required
    tools for remote debugging using GDB, and how we can track our changes using `buildhistory`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何配置Poky来帮助我们进行调试过程，如何配置系统以便使用GDB提供远程调试所需的工具，以及如何通过`buildhistory`来跟踪我们的更改。
