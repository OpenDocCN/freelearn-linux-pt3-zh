- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Databases – Setting Up and Working with MariaDB SQL Databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be discussing databases. In our case, this will involve
    going into detail about the operation of MariaDB. This is a powerful tool that
    allows us to store and access data for use by applications, as well as web servers.
    With the power of a fully functional database behind your project, you will be
    able to increase the functionality of your application or web server by adding
    a multitude of items that can be saved and accessed by these products. Things
    from shopping carts to member information can all be saved using MariaDB. Let’s
    get started with learning more about databases and MariaDB for Red Hat Enterprise
    Linux 8.1.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with MariaDB for data collection storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring MariaDB on RHEL 8 manually
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring MariaDB on RHEL 8 using Ansible Automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The technical requirements for this chapter are covered in the following subsection.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up GitHub access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Please refer to the instructions found in [*Chapter 1*](B18607_01.xhtml#_idTextAnchor016),
    *Block Storage – Learning How to Provision Block Storage on Red Hat Enterprise
    Linux*, to gain access to GitHub. You will find the Ansible Automation playbooks
    for this chapter at the following link: [https://github.com/PacktPublishing/Red-Hat-Certified-Specialist-in-Services-Management-and-Automation-EX358-Exam-Guide/tree/main/Chapter07](https://github.com/PacktPublishing/Red-Hat-Certified-Specialist-in-Services-Management-and-Automation-EX358-Exam-Guide/tree/main/Chapter07).
    Remember these are suggested playbooks and are not the only way you can write
    them – you can make the playbooks work for you.'
  prefs: []
  type: TYPE_NORMAL
- en: You can always change them up using `raw`, `shell`, or `cmd` to achieve the
    same results but we are demonstrating the best way to accomplish the goals. Also,
    keep in mind that we are not using the FCQN, which is needed in future versions
    of Ansible, as that will not be supported in the exam, which covers Ansible 2.9.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with MariaDB for data collection storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MariaDB is a database that allows for the relational storage of objects. This
    allows for key-value pairs to be stored and accessed using MySQL commands. The
    ability to save and access this information is paramount for platforms such as
    forums where usernames and passwords need to be correlated together for authentication,
    for example. We also use this for inventory tracking in many instances, for businesses
    both big and small. The power of these databases is a necessity that every company
    relies upon.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structured Query Language** (**SQL**) is what is normally used by a **relational
    database management system** (**RDBMS**) in order to control how a database is
    configured and accessed. This system provides the means to configure your database
    in the manner that is needed to function properly, whether it is used by an application
    or a web server. The more you use relational databases, the more you will understand
    their significance when it comes to business strategies.'
  prefs: []
  type: TYPE_NORMAL
- en: First, we are going to look at manually installing MariaDB and then we'll move
    on to the automated installation and manipulation of these databases.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring MariaDB on RHEL 8 manually
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we are going to start the MariaDB installation in order to get started
    with using this powerful package of tools. We will look up the MariaDB package
    to get the default version and the profiles available using the command in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Module list of the server package instead of the client package](img/Figure_7.01_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – Module list of the server package instead of the client package
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the preceding screenshot, we can see that MariaDB 10.3 is the default,
    and we can see the profile of the server, which is what we want to install. We
    will install the MariaDB server as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Installing the MariaDB server](img/Figure_7.02_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – Installing the MariaDB server
  prefs: []
  type: TYPE_NORMAL
- en: 'We will then start and enable the MariaDB service as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Starting and enabling the MariaDB service](img/Figure_7.03_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – Starting and enabling the MariaDB service
  prefs: []
  type: TYPE_NORMAL
- en: 'We will then open the ports for MySQL, which, as discussed earlier, is how
    we interact with MariaDB. Opening the firewall rules can be seen in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Opening the firewall rules for MariaDB](img/Figure_7.04_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – Opening the firewall rules for MariaDB
  prefs: []
  type: TYPE_NORMAL
- en: Once we have the package enabled and started and the firewall open, we can begin
    to use our database server for data collection or application backing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s look at the options in the configuration file for controlling network
    connectivity. We have learned in the previous chapters that controlling network
    connectivity is key for many purposes. We will look at `/etc/my.cnf.d/mariadb-server.cnf`
    and pay close attention to a few items to go over, but first, a sample of this
    file can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – The truncated mariadb-server.cnf file](img/Figure_7.05_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – The truncated mariadb-server.cnf file
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look at the Galera-related settings, you will see an example of some
    of the items we want to pay attention to, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.6 – The \uFEFFmariadb-server.cnf file (continued)](img/Figure_7.06_B18607.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6 – The mariadb-server.cnf file (continued)
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can see `bind-address`, which we want to move up to the `[mysqld]`
    section. Next, we want to add `skip-networking=1` so that connections are only
    allowed on the server. If `skip-networking` is set to `0`, it will listen for
    connections outside of `localhost`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our use, we are going to limit the bind address to IPv4 and we are going
    to set `skip-networking=1` by adding a line of code to lock out all connections
    started from outside of the server. These settings configured within the file
    can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7 – The updated mariadb-server.cnf file with skip-networking](img/Figure_7.07_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – The updated mariadb-server.cnf file with skip-networking
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the settings have been added, ensure that you restart the MariaDB service
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we are going to work on manipulating data in the database. We will use
    MySQL tools to perform these actions. We will start by logging in to the database
    using the command shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.8 – Logging \uFEFFin to the mysql database for the first time](img/Figure_7.08_B18607.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8 – Logging in to the mysql database for the first time
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now going to secure the database by running the following command to
    secure the MySQL database installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This command removes things such as the test database and the anonymous user
    and sets a password for root accounts, among others. We can see the setup in action
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.9 – Securing the MariaDB installation](img/Figure_7.09_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.9 – Securing the MariaDB installation
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we are going to look at the databases and you will notice there are some
    default databases. These are used to handle how MySQL works within MariaDB, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.10 – Logging in using the newly set password and showing the databases](img/Figure_7.10_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.10 – Logging in using the newly set password and showing the databases
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to use a database, we will use the `USE` command, such as `USE information_schema;`,
    in order to access and manipulate that database. Next, we will use the database
    creation command and then use that database to manipulate data. We will create
    this new personnel database and make it ready for use as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.11 – Using the personnel database](img/Figure_7.11_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.11 – Using the personnel database
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, we will want to inspect the database and see whether anything is
    in it. For this, we will switch to the personnel database. We can identify that
    the database is currently empty in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.12 – Showing the tables are empty within the personnel database](img/Figure_7.12_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.12 – Showing the tables are empty within the personnel database
  prefs: []
  type: TYPE_NORMAL
- en: 'After we have created the database, we are going to create a table for the
    database using the command shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.13 – Creating tables in the personnel database](img/Figure_7.13_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.13 – Creating tables in the personnel database
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will be adding information to the name and phone number columns so
    that we have something to search through. We can see the commands to add to the
    database table in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.14 – Creating data within the table of the personnel database](img/Figure_7.14_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.14 – Creating data within the table of the personnel database
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also search for items within tables using the command shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.15 – Searching the database using known information](img/Figure_7.15_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.15 – Searching the database using known information
  prefs: []
  type: TYPE_NORMAL
- en: 'The `SELECT` command can be used with the `WHERE` variable, as in the following
    command, to look for a specific column within a database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we are going to talk about taking a backup of your database. This will
    allow you to restore information that you have backed up recently using the `mysqldump`
    command. More about the `mysqldump` command can be found in the man page for it,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.16 – mysqldump man page](img/Figure_7.16_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.16 – mysqldump man page
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the following command to back up the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This command execution can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.17 – Creating a backup of the personnel database](img/Figure_7.17_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.17 – Creating a backup of the personnel database
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we are going to restore from the backup. We will use the following command
    to choose the backup file we want to restore and restore it to our database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s test this by dropping the `users` table as shown in the following screenshot
    and then restoring the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.18 – Removing tables and checking that they are missing before restoring
    them](img/Figure_7.18_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.18 – Removing tables and checking that they are missing before restoring
    them
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to restore the database and show that the table has been
    recreated, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.19 – Restoring the database and showing that the tables are now
    back](img/Figure_7.19_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.19 – Restoring the database and showing that the tables are now back
  prefs: []
  type: TYPE_NORMAL
- en: Once you load this information back into your database, you can use `show` commands
    to gather information for anything needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we are going to show how to control user access to your systems. We
    are going to add users with different rights to the databases. Adding these users
    can be done with the following command in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.20 – Creating users for the databases](img/Figure_7.20_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.20 – Creating users for the databases
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding screenshot, you can see we created `danny@localhost`, specifying
    that this is a local user and that it is `identified by`, referring to the password
    for the user, `redhat`, in our case. Next, we are going to add privileges to `danny`
    so that he can make changes to the personnel database. The commands for adding
    privileges can be seen in the following commands within the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.21 – Setting privileges for a new user created](img/Figure_7.21_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.21 – Setting privileges for a new user created
  prefs: []
  type: TYPE_NORMAL
- en: We have also created `jennifer` as a user and provided her with privileges to
    alter the database. This allows `jennifer` to insert, delete, and select items
    within the personnel database. Now, we can use `jennifer` to add items to the
    database.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring MariaDB on RHEL 8 using Ansible Automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start with the inventory file to set up the MariaDB servers and configure
    them with users. We will then go into manipulating data within the created MariaDB
    system using loops to add things such as tables and database entries. We will
    then use Ansible Automation to show how to retrieve information from the MariaDB
    database so that you can provide information from your database to end users.
    Please ensure that the server you are running this playbook against has not had
    MariaDB installed previously, or you will receive errors when trying to set the
    root password.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we are going to start with an inventory file, which can be seen in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.22 – Ansible Automation inventory file](img/Figure_7.22_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.22 – Ansible Automation inventory file
  prefs: []
  type: TYPE_NORMAL
- en: 'From there, we are going to create the `ansible.cfg` file within our directory
    so that we can skip `host_key_checking`, as it causes issues with connectivity.
    We can see the Ansible file in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.23 – Ansible Automation ansible.cfg file](img/Figure_7.23_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.23 – Ansible Automation ansible.cfg file
  prefs: []
  type: TYPE_NORMAL
- en: 'After we have those files, we will create the playbook file of `mariadb_server.yml`
    and start it as normal, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we are going to install MariaDB and set up the firewall rules as well.
    Installing the package and starting and enabling the service, as well as setting
    the firewall rules, can be seen in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After we have the code for installing the server, we will move on to securing
    the MariaDB installation to enable it and open up the firewall rules. We will
    start by configuring the root password. We can see that we have configured that
    in the following code and marked it with `no_log: true` in order to keep the system
    from outputting this in the log files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we are going to copy a configuration file to `root` so that we can log
    in and make changes to the database without having to show the user and password.
    We can also vault this file, but for our purposes, we are simply going to copy
    it. The file can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.24 – The my.cnf file to provide access for configuring databases](img/Figure_7.24_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.24 – The my.cnf file to provide access for configuring databases
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code will be used to move the file to the needed location on
    the server for use later on with the modules to add and change things on the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we will remove the anonymous user so that only authenticated users
    can access the databases. We can see this removal of the anonymous user in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we are going to create a database called `employees`. We will update
    this database using a loop so that it is configured with multiple employees within
    the database. We can see how to create the database and tables and fill in the
    data in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will create the `insert.sql` file in order to import the needed database
    items. This can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.25 – The insert.sql file to import data into the employee database](img/Figure_7.25_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.25 – The insert.sql file to import data into the employee database
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the database, we will now create a table within the database
    with the name of people, as shown in the following code, using the `insert.sql`
    file to provide the information for the table and data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we are going to create a user for the databases and provide them with
    permissions to the newly created database. We can see how we create users with
    set privileges in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have all of this set, we are going to run the playbook. We will
    use the following command to run the playbook again, assuming you do not have
    keys set up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a successful Ansible Automation playbook run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.26 – Successful playbook run](img/Figure_7.26_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.26 – Successful playbook run
  prefs: []
  type: TYPE_NORMAL
- en: 'After a successful playbook run, you can see the information has been added,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.27 – Data is now populated within the system](img/Figure_7.27_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.27 – Data is now populated within the system
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned how to automate the installation and configuration
    of MariaDB. With this information, you can successfully deploy databases quickly
    and more confidently. The lower threshold for human error allows for greater confidence
    in the deployment and it can be done in seconds instead of hours, which is how
    long it would take somebody to do so with a keyboard for multiple databases. This
    is an advantage of using Ansible Automation.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the MariaDB SQL database and how it can be
    configured and updated. We learned how to automate it so that it can be easily
    deployed with the information we need it to have. This allows us to deploy a database
    quickly without the need for much human intervention. We also were able to back
    up the database and restore it, which is a crucial thing to be able to do when
    working with databases. In our next chapter, we will be talking about web servers,
    which use databases as their backends in some cases. We will go into installing
    and setting up these databases both manually and with Ansible Automation. I look
    forward to seeing you in the next chapter on our journey through the preparation
    for the EX358 exam.
  prefs: []
  type: TYPE_NORMAL
