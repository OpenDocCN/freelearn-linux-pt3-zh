- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Users and Groups
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户和组
- en: 'In this chapter, we’ll be taking a look at two of the building blocks that
    Linux uses to manage resources and maintain security: users and groups. After
    learning the basics and covering a very special user, `root`, we’ll show you how
    the concept of Linux user groups adds a convenient layer on top of the user abstraction.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究 Linux 用来管理资源和维护安全的两个构建块：用户和组。在学习了基础知识并介绍了一个特殊的用户 `root` 后，我们将展示 Linux
    用户组概念是如何在用户抽象之上添加一个方便的层次。
- en: 'Once we’ve covered the necessary theory, you’ll jump directly into the practical
    commands you need to create and modify users and groups. And, in a stunning triumph
    that will pay dividends if it ever comes up in an interview, you’ll see for yourself
    *what a Linux user is actually made of* (hint: it’s just three lines of plaintext).'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们涵盖了必要的理论，你将直接进入实际命令的讲解，学习如何创建和修改用户与组。而且，若在面试中遇到类似问题，你将能够亲眼看到 *一个 Linux 用户究竟是什么构成的*（提示：其实它仅由三行纯文本组成）。
- en: 'By the end of this chapter, you’ll:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将：
- en: Understand what users are and what they’re used for
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解用户是什么以及他们的用途
- en: Understand the distinction between root and normal users, and how to switch
    between them when you need to
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 root 用户与普通用户之间的区别，以及如何在需要时切换它们
- en: Know how to create and modify users and groups
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解如何创建和修改用户和组
- en: Take a deeper dive into user metadata, and see what a Linux user is actually
    made of
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入了解用户元数据，看看一个 Linux 用户究竟是什么构成的
- en: What is a user?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是用户？
- en: A user, in the context of a Unix system, is simply a named entity that can do
    things on the system. Users can launch and own processes, own files and directories
    and have various permissions on them, and be allowed or prevented from doing things
    or using resources on the system. Practically, a user is who you log in as, what
    your processes run as, or who owns your files.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix系统的上下文中，用户只是一个可以在系统上执行操作的命名实体。用户可以启动和拥有进程、拥有文件和目录，并对它们拥有各种权限，可以被允许或禁止在系统上执行某些操作或使用资源。实际上，用户就是你登录时使用的身份，进程以该身份运行，或文件的所有者。
- en: The word “user” is obviously a metaphor for a real person with a user account,
    a password, and so on. But most “users” on real systems don’t actually represent
    specific humans. They’re machine accounts, meant to group resources like processes
    and files for the purposes of security or organization.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: “用户”一词显然是指具有用户账户、密码等的真实人的隐喻。但是，实际上，大多数在系统中的“用户”并不代表特定的人类。他们是机器账户，目的是为了安全或组织上的需求，将进程和文件等资源进行分组。
- en: But there’s a much more important distinction than whether or not an account
    is intended to be used interactively by a human operator. There are exactly two
    types of users, and before we jump into practical user-management skills, we need
    to talk about that distinction.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，比账户是否打算由人工操作员交互使用更为重要的区别是：用户实际上分为两种类型，在我们开始讲解实际的用户管理技能之前，必须先讨论这个区别。
- en: Root versus everybody else
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Root 与其他用户
- en: The world can be a harsh place, and sometimes it’s dangerous to run a command.
    For example, `fdisk` can wipe the partitions of a disk or otherwise modify hardware.
    `iptables` can open a network port and let an attacker exploit a vulnerability.
    Even using an innocuous `echo` command to send a value to the wrong place on a
    filesystem can change the operating system’s configuration in subtle and terrible
    ways.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个世界有时会很严苛，有时运行某些命令是危险的。例如，`fdisk` 可能会清除磁盘的分区或以其他方式修改硬件。`iptables` 可以打开一个网络端口，允许攻击者利用漏洞。即使是使用一个无害的
    `echo` 命令将值发送到文件系统的错误位置，也可能会以微妙且可怕的方式改变操作系统的配置。
- en: 'To guard against this, the Unix-like environment that your command-line interface
    is running in has some built-in guardrails. There is a “superuser” called `root`
    in every Unix system. As a result, the basic security model is as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止这种情况，运行命令行界面的类Unix环境中有一些内建的防护措施。每个Unix系统中都有一个“超级用户”叫做 `root`。因此，基本的安全模型如下：
- en: First, there is `root`. This user is the equivalent of the system administrator
    on other systems and is the user with the highest number of permissions. `root`
    can do almost anything.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先是 `root`。这个用户相当于其他系统中的系统管理员，是具有最高权限的用户。`root` 几乎可以做任何事。
- en: Then, there’s everybody else. Non-root users have limited permissions – they
    can’t launch processes or edit files that could affect the whole system, but they
    can launch their own (unprivileged) applications and edit their own files.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后是其他所有人。非root用户的权限是有限的——他们不能启动可能影响整个系统的进程或编辑文件，但他们可以启动自己的（无特权）应用程序并编辑自己的文件。
- en: To guard against problems, only the `root` user can execute commands that change
    important aspects of your system. Because even seemingly innocuous commands can
    cause potential havoc if they’re run with the right arguments, you may find yourself
    needing root privileges just to edit a text file.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止出现问题，只有`root`用户才能执行改变系统重要部分的命令。因为即使是看似无害的命令，如果使用正确的参数，也可能造成潜在的破坏，所以你可能需要root权限来编辑一个文本文件。
- en: sudo
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: sudo
- en: Because it would be an inconvenience to have to log in as a separate user every
    time you want to do something potentially dangerous on a system, there’s the `sudo`
    command. Prefixing a command with `sudo`, which stands for “substitute user (and)
    do,” lets you perform that command *as the root user*. When that command finishes
    executing and exits, your next command is interpreted as coming from your regular
    (non-root) user again.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每次你想做一些可能对系统有危险的操作时都必须以不同的用户身份登录会很麻烦，因此有了`sudo`命令。在命令前加上`sudo`（代表“替代用户并执行”），可以让你*以root用户身份*执行该命令。当该命令执行完并退出后，下一个命令会再次作为你的普通（非root）用户来解释。
- en: 'You can see this behavior for yourself by running two commands. First, run
    the `whoami` command, which is a command that prints out the current user:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行两个命令亲自观察这种行为。首先，运行`whoami`命令，这是一个打印当前用户的命令：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this case. I’m logged in as the “`dave`" user, so this command prints out:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我以“`dave`”用户登录，所以这个命令会输出：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, prepend “`sudo`" to that same command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在那个命令前加上“`sudo`”：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Even though you’re still logged in as a non-root user, your *effective* user
    ID has changed for the duration of a single command, because of `sudo`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你仍然以非root用户登录，*有效的*用户ID在单个命令执行期间已经改变，因为使用了`sudo`：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let’s look at a more practical example where we want to run a single action
    as `root`, but then continue running other commands as our regular user:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个更实际的例子，假设我们想以`root`身份运行一个单独的操作，但之后继续以普通用户身份运行其他命令：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: That first command starts the `nginx` web server (presuming the nginx package
    is installed), which is something that only root can do. Any commands after that
    are executed as your regular user again.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令启动了`nginx` web服务器（假设已安装nginx包），这是只有root才能执行的操作。之后的任何命令都会再次作为普通用户执行。
- en: This is a common workflow that ensures safety – you spend most of your time
    working as a regular user, incapable of borking the entire system in a single
    command. When you need root powers, you invoke them by prepending *only those
    commands that require it* with root. It’s a nice psychological barrier to accidentally
    breaking things on a system.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个常见的工作流，确保系统安全——你大部分时间作为普通用户工作，无法在单个命令中破坏整个系统。当你需要root权限时，只需在*需要的命令前加上*root。这是一个很好的心理屏障，防止在系统中不小心破坏东西。
- en: 'You’ll see this pattern used for various potentially dangerous things on a
    system, such as editing system-level configuration files, creating directories
    outside of your user’s home directory (covered later in this chapter), and more:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到这种模式在系统中用于各种可能有危险的操作，例如编辑系统级配置文件、创建用户家目录之外的目录（本章后面会涉及），等等：
- en: '`sudo mkdir /var/log/foobar`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sudo mkdir /var/log/foobar`'
- en: '`sudo vim /etc/hosts`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sudo vim /etc/hosts`'
- en: '`sudo mount /dev/sdb1`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sudo mount /dev/sdb1`'
- en: 'You can use `sudo` to get a long-lived root shell session if you plan on running
    many commands as root (or if you’re troubleshooting something that runs as root,
    or simulating the environment that a `cloud-init` script would be executing in):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划以root身份运行多个命令（或者你正在故障排除某些以root身份运行的程序，或者模拟`cloud-init`脚本执行的环境），你可以使用`sudo`来获得一个长时间存在的root
    shell会话：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will get you an *interactive* shell session as the root user. Be careful
    with this! There’s nothing stopping you from destroying the system with a mistake
    or a poorly typed command.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为你提供一个作为root用户的*交互式* shell会话。小心使用！没有任何东西能阻止你因一个错误或输入错误的命令而破坏系统。
- en: 'While sudo defaults to replace the current user with the root user, you can
    also change that to another user, via the `–u` option. For example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然sudo默认将当前用户替换为root用户，但你也可以通过`–u`选项将其更改为其他用户。例如：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will open `/home/myuser/.bashrc` in vim as the user `myuser`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这将以用户`myuser`的身份在vim中打开`/home/myuser/.bashrc`。
- en: Which user (or group) is allowed to do what exactly can be defined in `/etc/sudo.conf`.
    You should never edit this file directly; use the `visudo` command to modify the
    file.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 哪个用户（或用户组）被允许执行哪些操作，可以在`/etc/sudo.conf`中定义。你永远不应该直接编辑这个文件；应该使用`visudo`命令来修改该文件。
- en: What is a group?
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是组？
- en: Groups are an additional primitive that allows a set of users to share permissions.
    Groups are often used to get the functionality of a permission set or profile.
    For example, on Linux, there’s often a group called `sudoers`, and on macOS, you’ll
    encounter a group called `wheel`. By convention, users who are members of the
    `sudoers` or `wheel` groups on these systems are allowed to use `sudo` to execute
    commands as root. This is functionally the same thing as adding a user to the
    `Administrators` group in Windows.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 组是一个额外的原语，允许一组用户共享权限。组常用于获得权限集或配置文件的功能。例如，在Linux中，通常有一个叫做`sudoers`的组，而在macOS中，你会遇到一个叫做`wheel`的组。根据惯例，系统中属于`sudoers`或`wheel`组的用户被允许使用`sudo`以root身份执行命令。这与在Windows中将用户添加到`Administrators`组功能上是相同的。
- en: You can extrapolate that if groups are useful for managing who is allowed to
    run the `sudo` command, they might be useful for grouping together users and managing
    other kinds of permissions, too.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以推断出，如果组对于管理谁可以运行`sudo`命令很有用，那么它们也可能对于将用户分组并管理其他类型的权限非常有用。
- en: 'Mini project: user and group management'
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小项目：用户和组管理
- en: For example, imagine that we want to allow every user who is a software developer
    at our company to read a given file – let’s call it `document.txt`. We can simply
    create a `developers` group and add all of our developer users to that group.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们希望允许公司中的每个软件开发人员都能读取某个特定文件——我们称它为`document.txt`。我们可以简单地创建一个`developers`组，并将所有开发人员用户添加到该组。
- en: Then, when we’re setting ownership and permissions for `document.txt`, we can
    reference the `developers` group instead of trying to keep track of every single
    user who might be a member of that group individually.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在设置`document.txt`的所有权和权限时，我们可以引用`developers`组，而不是试图跟踪每一个可能是该组成员的单个用户。
- en: Creating a user
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建用户
- en: On a Linux system that has the `adduser` command installed, you can use it to
    *interactively* create a user named `dave`. If you don’t, the package is usually
    named `useradd` (see *Chapter 9*, *Managing Installed Software* for more details
    on installing packages).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装了`adduser`命令的Linux系统上，你可以使用它*交互式*地创建一个名为`dave`的用户。如果没有，你通常会看到名为`useradd`的包（有关安装包的更多详细信息，请参见*第9章*，*管理已安装的软件*）。
- en: 'Running the command with a username as the only argument will give you a wizard-style
    user creation process. Notice that we’re using sudo here, since only `root` can
    add or delete users:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 只使用用户名作为唯一参数运行命令将为你提供一个向导式的用户创建过程。请注意，我们在这里使用了`sudo`，因为只有`root`用户可以添加或删除用户：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We’ve bolded the parts that required user interaction on our part – namely,
    setting the password, the full name, and the confirmation that we want to create
    this user on the system.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将需要用户互动的部分加粗——即设置密码、全名以及确认我们要在系统中创建该用户。
- en: 'This is a nice way to add one or two users, but what if you’re working on a
    Linux test server that needs individual accounts for your 300 largest customers?
    You’ll want the non-interactive `useradd` command instead, which lets you specify
    user attributes as arguments to a single command. This makes user changes easy
    to script (see our note about scriptability later in this chapter):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方式适合添加一两个用户，但如果你正在处理一个Linux测试服务器，需要为你300个最大客户创建单独的帐户呢？那时你会想要使用非交互式的`useradd`命令，它允许你将用户属性作为参数传递给一个命令。这使得用户变更变得容易脚本化（请参见本章稍后的脚本化说明）：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'That command also:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令还会：
- en: Sets and creates the user’s home directory (`--home-dir` and -`-create-home`)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置并创建用户的主目录（`--home-dir`和`--create-home`）。
- en: Sets a custom shell (`--shell`)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置自定义的shell（`--shell`）
- en: Sets the user’s primary group to `dave` (although this could also be something
    like `employees`) with the `-g` option
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`-g`选项将用户的主组设置为`dave`（虽然这也可以是像`employees`这样的组）。
- en: Adds a supplementary group membership to the `sudoers` group (you can pass multiple
    comma-separated group names here)
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将附加的用户组成员身份添加到`sudoers`组（你可以在此传递多个以逗号分隔的组名）。
- en: And that’s it – if the command exits successfully, your new user has been created!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样——如果命令成功退出，你的新用户已经创建！
- en: But we’re not done yet – this user is going to be working on the new, top-secret
    `tutorialinux` application, so let’s create a group for that project and add our
    new user to it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们还没有完成——这个用户将要在新的、绝密的 `tutorialinux` 应用程序上工作，所以让我们为这个项目创建一个组，并将新用户添加到其中。
- en: Create a group
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个组
- en: 'To create a new group called `tutorialinux`, you’ll use the `groupadd` command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个名为 `tutorialinux` 的新组，你可以使用 `groupadd` 命令：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This creates a new group on the system, adding a line to the `/etc/group` configuration
    file, which is the record of all groups that exist on a Unix system. You can validate
    that the group was created by “grepping” (searching) for the group name in that
    file:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这会在系统上创建一个新组，并向 `/etc/group` 配置文件中添加一行，该文件记录了 Unix 系统上所有存在的组。你可以通过在该文件中“grep”（搜索）组名来验证该组是否已创建：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can see that a group with the name `tutorialinux` now exists, with **Group
    ID** (**GID**) of 1001.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，名称为 `tutorialinux` 的组现在已经存在，其 **组 ID** (**GID**) 为 1001。
- en: We’re not going to dive deeply into what the `x` character here means; it’s
    enough to know that this file is made up of one line for every group, with colon-separated
    values. You’ll only ever care about the group name (first column), group ID (third
    column), and members (last column, which is empty in this example).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不打算深入探讨这里的 `x` 字符的含义；只需要知道该文件由每个组的一行组成，每行以冒号分隔的值。你只需关心组名（第一列）、组 ID（第三列）和成员（最后一列，在本例中为空）。
- en: Modifying a Linux user
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改 Linux 用户
- en: Just as `useradd` allows you to set user metadata to your heart’s content during
    user creation, `usermod` and `gpasswd` allow you to modify all aspects of an existing
    user. Let’s add the `dave` user we created earlier to the new `tutorialinux` group,
    so he can work on project files that only group members can see or modify.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 `useradd` 允许你在创建用户时自由设置用户元数据一样，`usermod` 和 `gpasswd` 允许你修改现有用户的所有方面。让我们将之前创建的
    `dave` 用户添加到新的 `tutorialinux` 组中，这样他就可以处理只有组成员才能看到或修改的项目文件。
- en: Adding a Linux user to a group
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 Linux 用户添加到组
- en: 'To change the primary group of the user: `sudo usermod -g groupname username`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改用户的主组：`sudo usermod -g groupname username`
- en: 'That’s not exactly what we want here, though: the `dave` user should continue
    to be in the eponymous `dave` group; it’s just that we want `dave` to *also* be
    a member of the `tutorialinux` group. To add a user to a group *without* making
    it that user’s primary group, use the `-aG` options (“**add** to additional **groups**”):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并不是我们想要的：`dave` 用户应该继续在同名的 `dave` 组中；我们只是希望 `dave` 也能成为 `tutorialinux` 组的成员。要将用户添加到一个组*而不*将其设置为该用户的主组，可以使用
    `-aG` 选项（“**添加**到附加的 **组**”）：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you inspect `/etc/group` again, you can see that the `dave` user is now
    a member of three groups: `dave`, `sudoers`, and `tutorialinux`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你再次检查 `/etc/group`，你会看到 `dave` 用户现在是三个组的成员：`dave`、`sudoers` 和 `tutorialinux`：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Using the commands you learned in the previous chapter to modify file ownership
    and permissions, you can now control the access that all members of the `tutorialinux`
    group have to certain files and directories.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你在上一章中学到的命令修改文件的所有权和权限后，你现在可以控制 `tutorialinux` 组所有成员对某些文件和目录的访问权限。
- en: Now, when a specific user is done working on the `tutorialinux` project, you
    can clean up and revoke their access without having to modify individual file
    and directory permissions.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当特定用户完成 `tutorialinux` 项目工作后，你可以清理并撤销他们的访问权限，而无需修改单独的文件和目录权限。
- en: Removing a user from a group
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从组中删除用户
- en: 'To remove a user from a group, we can use the `gpasswd` command like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要将用户从组中移除，我们可以使用 `gpasswd` 命令，如下所示：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Removing a Linux user
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除 Linux 用户
- en: 'To remove a Linux user entirely, use the `userdel` command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要完全删除一个 Linux 用户，使用 `userdel` 命令：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If you want to preserve that user’s home directory, omit the (`-r` / `--remove`)
    flag.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望保留该用户的主目录，请省略 (`-r` / `--remove`) 标志。
- en: Remove a Linux group
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除一个 Linux 组
- en: 'There’s also a `groupdel` command for groups that are no longer needed:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不再需要的组，还有一个 `groupdel` 命令：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Advanced: what is a user, really?'
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级内容：用户究竟是什么？
- en: 'Users and groups are one place where something quite wonderful about Unix and
    Linux can be seen clearly: there’s very little magic here.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 用户和组是 Unix 和 Linux 中非常清楚地展示了一些非常棒的特性的地方：这里几乎没有什么魔法。
- en: A Linux user is really just a **User ID** (**UID**), which is a simple numerical
    representation of a user (an unsigned 32-bit integer). The `root` user’s UID is
    0\. All other users have a UID larger than 0\. The same goes for groups.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Linux 用户实际上就是一个 **用户 ID**（**UID**），它是用户的简单数字表示（一个无符号的 32 位整数）。`root` 用户的
    UID 是 0。所有其他用户的 UID 都大于 0。组也是如此。
- en: 'This information is not stored in some secret location, in some binary format,
    or some proprietary data structure that only the operating system can work with:
    users and groups are defined in plaintext files, which are traditionally modified
    using the few simple commands we’ve covered here.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息并不是存储在某个秘密位置、某种二进制格式中，或者某个只有操作系统能够操作的专有数据结构里：用户和组是定义在纯文本文件中的，这些文件通常是通过我们在这里介绍的几个简单命令进行修改的。
- en: That simplicity and lack of magic means that mere mortals (such as a panicked
    developer with just a faded memory of this chapter) can quickly find out the state
    of users and groups on a running system, troubleshooting application errors that
    may come from an incorrectly prepared host environment that’s missing a necessary
    application user. It also comes in handy during the “systems engineering” portions
    of developer interviews.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这种简单性和缺乏神秘感意味着普通人（例如，一个慌乱的开发者，记忆仅能模糊回忆本章内容）可以快速了解正在运行的系统中用户和组的状态，解决可能由于主机环境准备不当导致的应用错误，特别是缺少必要应用用户的情况。这在开发者面试中的“系统工程”部分也很有帮助。
- en: So, in the interest of cementing your intuition about how this stuff works,
    here are a few more useful facts about what’s going on under the hood as we create
    and manage users and groups.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了加深你对这些内容如何工作的直观理解，下面是一些关于创建和管理用户与组时，系统底层运作的有用信息。
- en: User metadata / attributes
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户元数据 / 属性
- en: 'Users defined only by a number aren’t particularly useful – not without some
    additional metadata to spice things up. For example, an account that I use for
    my day-to-day work on a Linux or macOS machine, which happens to have UID `502`,
    might also have:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 仅通过数字定义的用户并不是特别有用——没有一些附加的元数据来增强其功能。例如，我在 Linux 或 macOS 机器上用于日常工作的账户，假设它的 UID
    为 `502`，可能还会有：
- en: A friendly login name (`dave`)
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个友好的登录名（`dave`）
- en: Its own group (the `dave` group)
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它自己的组（`dave` 组）
- en: Various group memberships (`staff`, `developer`, and `wheel`)
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种组成员身份（`staff`、`developer`、`wheel`）
- en: A login shell (`bash`, `zsh`, and so on)
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个登录 shell（`bash`、`zsh` 等）
- en: A home directory `(/Users/dave/` on macOS, or `/home/dave/` on Linux)
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个主目录（在 macOS 上是 `/Users/dave/`，在 Linux 上是 `/home/dave/`）
- en: 'If you’re curious, you can get information about your current user by running
    the `id` command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你感到好奇，可以通过运行 `id` 命令来获取当前用户的信息：
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'By default, a few files define and contain all this extra user information:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，几个文件定义并包含所有这些额外的用户信息：
- en: '`/etc/passwd` contains a username, UID, GID, home directory, and login shell,
    all on one colon-delimited line per user:'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/passwd` 包含一个用户名、UID、GID、主目录和登录 shell，每个用户一行，以冒号分隔：'
- en: '[PRE17]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`/etc/shadow` contains the user’s hashed, salted passwords; it is readable
    only by the root user:'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/shadow` 包含用户的哈希加盐密码；该文件仅对 root 用户可读：'
- en: '[PRE18]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`/etc/group` – the equivalent of `/etc/passwd`, but for groups instead of users.
    You saw (and used) this file earlier in the chapter.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/group` – 与 `/etc/passwd` 相似，但它是为组而非用户提供的。你在本章前面已经看到并使用过这个文件。'
- en: 'Optionally, a home directory like `/home/dave`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的主目录，如 `/home/dave`
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**WARNING**: While it makes sense to know what these files contain, you should
    NEVER edit any of these files manually. Use the tools we used in the previous
    sections to create, remove, or modify system users and groups.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**：虽然了解这些文件的内容很有意义，但你绝对不应该手动编辑这些文件。请使用我们在前面章节中提到的工具来创建、删除或修改系统用户和组。'
- en: Hopefully, this quick theoretical overview of the moving parts – or more accurately,
    the static plaintext files – that make up users and groups was enlightening. Not
    only do we want to make sure that you’ve got an intuition for how this works,
    but we hope that this section stresses how *simple* this really is under the covers.
    There’s no magic here! You can feel confident that you’re not missing something
    the next time you’re troubleshooting why an application won’t start, or why a
    user doesn’t have permission to view a certain file with specific group ownership
    permissions.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这个快速的理论概述——更准确地说，是构成用户和组的静态纯文本文件——能够让你有所启发。我们不仅希望确保你对这个过程有直观的了解，而且我们希望这一节强调
    *这个过程其实非常简单*。这里并没有什么魔法！下次在排查应用程序无法启动，或者用户没有权限查看某个具有特定组所有权权限的文件时，你可以更有信心地确认自己没有遗漏什么。
- en: A note on scriptability
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于脚本化的说明
- en: Earlier, we alluded to preferring automatable tools like `useradd`, instead
    of interactive wizard-based tools like `adduser` – even if those automatable tools
    are a bit more complex or hard to learn. Or perhaps you’re asking, “Why not just
    use a graphical tool, instead of these hard-to-remember CLI commands?”
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们提到过偏好使用像`useradd`这样的可自动化工具，而不是像`adduser`这样的交互式向导工具——即便这些自动化工具稍微复杂一些或者不容易学习。或者你可能会问：“为什么不直接使用图形工具，而是这些难记的
    CLI 命令呢？”
- en: One of the things we want to teach you during the course of this book is to
    generally prefer non-interactive commands.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 本书在讲解过程中，我们希望教会你的一件事是：通常优先使用非交互式命令。
- en: 'Because these commands don’t rely on real-time user input when they run, they
    are scriptable: creating a hundred users is almost as easy as creating one. This
    really comes in handy when you’re dealing with real-life problems like building
    Docker images, repeatedly preparing production environments, or writing `cloud-init`
    setup scripts for your cloud instances.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这些命令在运行时不依赖于实时的用户输入，它们是可以脚本化的：创建一百个用户几乎和创建一个一样简单。这在处理实际问题时特别有用，比如构建 Docker
    镜像、反复准备生产环境，或者为你的云实例编写`cloud-init`设置脚本。
- en: 'As a developer, this should ring true: automating things makes them more repeatable,
    safe, and fast. By learning commands that are non-interactive, you retain the
    power to use that command as part of a larger piece of automation, instead of
    having steps that require error-prone, time-consuming, and risky manual intervention.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，这一点应该深有体会：自动化让事情变得更具可重复性、更安全且更快速。通过学习非交互式命令，你能够将该命令作为更大自动化流程的一部分，而不是需要人工干预、容易出错且耗时的步骤。
- en: Conclusion
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: You just learned the basics of how Linux uses the abstractions of users and
    groups to manage and control processes, files, and other resources on a system.
    Just as importantly, you learned the basic commands you need to create and manage
    users and groups on a real system. You learned about the important difference
    between the `root` user and all of the other normal users on a system.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚学习了 Linux 如何利用用户和组的抽象来管理和控制系统上的进程、文件和其他资源。同样重要的是，你学习了在真实系统上创建和管理用户和组所需的基本命令。你了解了`root`用户与系统上其他普通用户之间的重要区别。
- en: Then, we walked through a practical exercise where you created a user, added
    a group to the system, modified that user, and then cleaned up all the resources
    you created.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过一个实际练习，带你创建一个用户，添加一个组到系统，修改该用户，最后清理你创建的所有资源。
- en: 'Finally, we went beyond the day-to-day commands to show you that there’s no
    magic behind the scenes here: it’s all just plaintext files that define users
    and groups on a Unix system. This is a good thing; it’s going to make your life
    as a developer easy, whether you’re:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们超越了日常命令，向你展示了背后并没有什么魔法：它们只是定义用户和组的 Unix 系统中的纯文本文件。这是好事；无论你是：
- en: Creating a Docker image to run your application as a specific non-root user.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 Docker 镜像以便以特定的非 root 用户身份运行你的应用程序。
- en: Setting up a long-running cloud instance with logins and a shared group for
    your data science team.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为你的数据科学团队设置一个长期运行的云实例，带有登录和共享组。
- en: Trying to minimize the blast radius of a mistake in your own local test environment.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量减少在本地测试环境中犯错的影响范围。
- en: Troubleshooting user- and group-based errors on applications, for example, on
    a web application that needs root-user powers to open a secret file or do privileged
    actions on a system.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决基于用户和组的错误，例如，在一个需要root用户权限才能打开机密文件或执行系统特权操作的Web应用程序上。
- en: In the next chapter, we’ll use all of this knowledge to dive deeply into how
    the Unix security model works, by looking at ownership and permissions.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将利用所有这些知识深入探讨Unix安全模型是如何运作的，通过查看所有权和权限来实现。
- en: Learn more on Discord
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Discord上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入本书的Discord社区——你可以在这里分享反馈，向作者提问，并了解新版本——请扫描下面的二维码：
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/SecNet](https://packt.link/SecNet)'
- en: '![](img/QR_Code1768422420210094187.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code1768422420210094187.png)'
