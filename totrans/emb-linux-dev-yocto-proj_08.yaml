- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Diving into BitBake Metadata
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入 BitBake 元数据
- en: At this point in this book, we know how to generate images and packages and
    how to use package feeds – basically, everything we must know for the simple usage
    of Poky. Hereafter, we will learn how to control the behavior of Poky to accomplish
    our goals and achieve maximum benefit from the Yocto Project as a whole.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学会了如何生成镜像和包，并如何使用包源——基本上，掌握了使用 Poky 的基本知识。接下来，我们将学习如何控制 Poky 的行为，以实现我们的目标，并从整个
    Yocto 项目中获得最大收益。
- en: This chapter will help enhance our understanding of the BitBake metadata syntax.
    We will learn to use the BitBake operators to alter the content of variables,
    variable expansions, and so on. These are the key concepts we can use to make
    our recipes and the customization that we will learn about in the following chapters.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将帮助我们增强对 BitBake 元数据语法的理解。我们将学习如何使用 BitBake 操作符来修改变量的内容、变量扩展等。这些是我们可以用来制作配方的关键概念，接下来我们将学习如何进行定制。
- en: Understanding BitBake’s metadata
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 BitBake 的元数据
- en: 'The amount of metadata used by BitBake is enormous. Therefore, to get the maximum
    benefit from Poky, we must master it. As we learned in [*Chapter 4*](B19361_04.xhtml#_idTextAnchor071),
    *Meeting the BitBake Tool*, metadata covers three major areas:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake 使用的元数据量非常庞大。因此，为了最大限度地利用 Poky，我们必须掌握它。正如我们在 [*第 4 章*](B19361_04.xhtml#_idTextAnchor071)
    中学到的，*与 BitBake 工具相遇*，元数据覆盖了三个主要领域：
- en: '`.conf` files): The configuration files define the global content that configures
    how the classes and recipes will work.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.conf` 文件）：配置文件定义了配置类和配方工作方式的全局内容。'
- en: '`.bbclass` files): Classes can be inherited for easier maintenance and to promote
    code reuse and avoid code duplication.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.bbclass` 文件）：类可以继承，以便更容易维护、促进代码重用并避免代码重复。'
- en: '`.bb` or `.bbappend` files): The recipes describe the tasks to be run and provide
    the required information to allow BitBake to generate the required task chain.
    They are the most commonly used metadata, as they define the variables and tasks
    for the recipes. The most common types of recipes generate packages and images.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.bb` 或 `.bbappend` 文件）：这些配方描述了要执行的任务，并提供必要的信息，以便 BitBake 生成所需的任务链。它们是最常用的元数据，因为它们定义了配方的变量和任务。最常见的配方类型是生成包和镜像。'
- en: The classes and recipes use a mix of Python and Shell Script code, which is
    parsed by BitBake, generating a massive number of tasks and local states that
    must still be executed after being parsed.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 类和配方使用混合的 Python 和 Shell 脚本代码，由 BitBake 解析，生成大量的任务和本地状态，这些任务和状态在解析后仍需执行。
- en: We will also learn about the operators and essential concepts we need to build
    our recipes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将学习构建配方所需的操作符和基本概念。
- en: Working with metadata
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用元数据
- en: 'The syntax used by BitBake metadata can be misleading and sometimes hard to
    trace. However, we can check the value of each variable in BitBake-generated,
    pre-processed recipe data by using the `bitbake` option (`-e` or `--environment`),
    as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake 元数据使用的语法可能会误导人，有时很难追踪。然而，我们可以通过使用 `bitbake` 选项（`-e` 或 `--environment`）来检查
    BitBake 生成的、预处理过的配方数据中每个变量的值，如下所示：
- en: '![Figure 8.1 – How to display the BitBake environment](img/Figure_8.01_B19361.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – 如何显示 BitBake 环境](img/Figure_8.01_B19361.jpg)'
- en: Figure 8.1 – How to display the BitBake environment
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – 如何显示 BitBake 环境
- en: To understand how BitBake works, please refer to *BitBake User Manual* ([https://docs.yoctoproject.org/bitbake/2.0](https://docs.yoctoproject.org/bitbake/2.0)).
    The following sections will show most of the syntax commonly used in recipes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解 BitBake 的工作原理，请参考 *BitBake 用户手册*（[https://docs.yoctoproject.org/bitbake/2.0](https://docs.yoctoproject.org/bitbake/2.0)）。接下来的章节将展示配方中常用的大部分语法。
- en: The basic variable assignment
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本变量赋值
- en: 'The assignment of a variable can be done as shown here:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示可以完成变量的赋值：
- en: '![Figure 8.2 – An example of a variable assignment](img/Figure_8.02_B19361.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2 – 变量赋值示例](img/Figure_8.02_B19361.jpg)'
- en: Figure 8.2 – An example of a variable assignment
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – 变量赋值示例
- en: In the preceding example, the value of the `FOO` variable is assigned to `bar`.
    Variable assignment is core to the BitBake metadata syntax, as most examples use
    variables.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`FOO` 变量的值被赋给 `bar`。变量赋值是 BitBake 元数据语法的核心，因为大多数示例都使用变量。
- en: The variable expansion
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量展开
- en: 'BitBake supports variable referencing. The syntax closely resembles Shell Script,
    such as the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake 支持变量引用。语法与 Shell 脚本非常相似，如下所示：
- en: '![Figure 8.3 – An example of variable expansion](img/Figure_8.03_B19361.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3 – 一个示例，展示了变量展开](img/Figure_8.03_B19361.jpg)'
- en: Figure 8.3 – An example of variable expansion
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – 一个示例，展示了变量展开
- en: 'The preceding example results in `A` containing `aValue` and `B` containing
    `before-aValue-after`. An important thing to bear in mind is that the variable
    only expands when it is used, as shown here:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例导致`A`包含`aValue`，`B`包含`before-aValue-after`。需要记住的是，变量只有在使用时才会展开，如下所示：
- en: '![Figure 8.4 – The variables are only expanded when used](img/Figure_8.04_B19361.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4 – 变量仅在使用时展开](img/Figure_8.04_B19361.jpg)'
- en: Figure 8.4 – The variables are only expanded when used
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4 – 变量仅在使用时展开
- en: '*Figure 8**.4* illustrates the *lazy evaluation* used by BitBake evaluation.
    The `B` variable value is `before-${A}-after` until a task requires the variable
    value. The `A` variable has been assigned to `aNewValue` in line 3; consequently,
    `B` evaluates `before-aNewValue-after`.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8.4* 说明了BitBake评估中使用的*惰性评估*。`B`变量的值是`before-${A}-after`，直到任务需要该变量的值。`A`变量在第3行被赋值为`aNewValue`，因此`B`的值变为`before-aNewValue-after`。'
- en: Assigning a value if the variable is unassigned, using ?=
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果变量未赋值，则使用`?=`进行赋值
- en: 'When there is a need to assign a variable only if the variable is still unassigned,
    the `?=` operator can be used. The following code shows its use:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要仅在变量尚未赋值时才赋值时，可以使用`?=`运算符。以下代码展示了其用法：
- en: '![Figure 8.5 – An example of value](img/Figure_8.05_B19361.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5 – 一个值的示例](img/Figure_8.05_B19361.jpg)'
- en: Figure 8.5 – An example of value
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5 – 一个值的示例
- en: 'The same behavior happens if there are multiple `?=` assignments to a single
    variable. The first use of the `?=` operator is responsible for assigning the
    variable. Let’s look at the following example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对同一变量进行多个`?=`赋值操作，也会发生相同的行为。第一次使用`?=`运算符负责赋值该变量。让我们来看以下示例：
- en: '![Figure 8.6 – An example of a second assignment being ignored](img/Figure_8.06_B19361.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.6 – 一个示例，展示了第二次赋值被忽略](img/Figure_8.06_B19361.jpg)'
- en: Figure 8.6 – An example of a second assignment being ignored
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6 – 一个示例，展示了第二次赋值被忽略
- en: The `A` variable has been assigned to `value` on line 1, before the assignment
    of `ignoredAsAlreadyAssigned` on line 2, which is ignored.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`A`变量在第1行已被赋值为`value`，然后在第2行赋值给`ignoredAsAlreadyAssigned`，该赋值被忽略。'
- en: 'We need to consider that the `=` operator is stronger than the `?=` operator,
    as it assigns the value independently of the previous variable state, as shown
    here:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要考虑到`=`运算符比`?=`运算符更强，因为它独立于之前的变量状态进行赋值，如下所示：
- en: '![Figure 8.7 – An example showing that the ?= operator is weaker than the =
    operator](img/Figure_8.07_B19361.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.7 – 一个示例，展示了`?=`运算符比`=`运算符弱](img/Figure_8.07_B19361.jpg)'
- en: Figure 8.7 – An example showing that the ?= operator is weaker than the = operator
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7 – 一个示例，展示了`?=`运算符比`=`运算符弱
- en: Hence, the `A` variable is assigned as `changeValue`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`A`变量被赋值为`changeValue`。
- en: Assigning a default value using ??=
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`??=`进行默认值赋值
- en: Using the `??=` operator is intended to provide a default value for a variable
    and is a weaker version of the `?=` operator.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`??=`运算符旨在为变量提供默认值，它是`?=`运算符的弱版本。
- en: 'Check out the following code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下代码：
- en: '![Figure 8.8 – An example of how default values are assigned](img/Figure_8.08_B19361.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.8 – 一个示例，展示了如何分配默认值](img/Figure_8.08_B19361.jpg)'
- en: Figure 8.8 – An example of how default values are assigned
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8 – 一个示例，展示了如何分配默认值
- en: In line 1, the `A` default value is assigned to `firstValue`, and then in line
    2, the `A` default value is changed to `secondValue`. As no other assignment is
    made to the `A` variable, the final value is `secondValue`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在第1行，`A`的默认值被赋值为`firstValue`，然后在第2行，`A`的默认值被更改为`secondValue`。由于没有对`A`变量进行其他赋值，最终的值是`secondValue`。
- en: '`?=` is an assignment operator, as seen before, and takes precedence over the
    `??=` operator, as can be seen in the following example:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`?=`是赋值运算符，正如之前所见，它优先于`??=`运算符，以下例子可以证明：'
- en: '![Figure 8.9 – An example of the ??= operator being weaker than the ?= operator](img/Figure_8.09_B19361.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.9 – 一个示例，展示了`??=`运算符比`?=`运算符弱](img/Figure_8.09_B19361.jpg)'
- en: Figure 8.9 – An example of the ??= operator being weaker than the ?= operator
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9 – 一个示例，展示了`??=`运算符比`?=`运算符弱
- en: The final value of `A` variable is `thirdValue`, as no assignment has been made
    until line 3.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`A`变量的最终值是`thirdValue`，因为直到第3行才有赋值。'
- en: The immediate variable expansion
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 立即变量展开
- en: 'The `:=` operator is used when there is a need to force the immediate expansion
    of a variable. It results in the variable’s contents being expanded immediately
    rather than when the variable is used, as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`:=` 操作符在需要强制立即扩展变量时使用。它会导致变量的内容立即扩展，而不是等到变量被使用时再扩展，如下所示：'
- en: '![Figure 8.10 – An example of immediate variable expansion](img/Figure_8.10_B19361.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.10 – 立即变量扩展的示例](img/Figure_8.10_B19361.jpg)'
- en: Figure 8.10 – An example of immediate variable expansion
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.10 – 立即变量扩展的示例
- en: The value for `B` is assigned immediately, in line 2, and expands to `aValue-after`.
    However, the value for `C` is only assigned when used and then set to `newValue`,
    as `A` value has been set in line 3.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`B` 的值在第 2 行立即赋值，并扩展为 `aValue-after`。然而，`C` 的值只有在使用时才会赋值，随后设为 `newValue`，因为
    `A` 的值已在第 3 行设置。'
- en: The list appending and prepending
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列表追加和预添加
- en: 'The `+=` operator, known as *list appending*, adds a new value after the original
    one, separated with a space, as shown here:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`+=` 操作符，称为 *列表追加*，将新值添加到原值之后，且与原值之间有空格，如下所示：'
- en: '![Figure 8.11 – An example of list appending](img/Figure_8.11_B19361.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.11 – 列表追加的示例](img/Figure_8.11_B19361.jpg)'
- en: Figure 8.11 – An example of list appending
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.11 – 列表追加的示例
- en: In this example, the final value for `A` is `originalValue appendedValue`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`A` 的最终值是 `originalValue appendedValue`。
- en: 'The `=+` operator, known as *list prepending*, adds a new value before the
    original one, separated with a space, as shown here:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`=+` 操作符，称为 *列表预添加*，将新值添加到原值之前，且与原值之间有空格，如下所示：'
- en: '![Figure 8.12 – An example of list prepending](img/Figure_8.12_B19361.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.12 – 列表预添加的示例](img/Figure_8.12_B19361.jpg)'
- en: Figure 8.12 – An example of list prepending
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.12 – 列表预添加的示例
- en: In this example, the final value for `A` is `prependedValue originalValue`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`A` 的最终值是 `prependedValue originalValue`。
- en: The string appending and prepending
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符串追加和预添加
- en: 'The `.=` operator, known as *string appending*, adds a new value after the
    original one, with no extra space, as shown here:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`.=` 操作符，称为 *字符串追加*，将一个新值添加到原值之后，中间不留空格，如下所示：'
- en: '![Figure 8.13 – An example of string appending](img/Figure_8.13_B19361.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.13 – 字符串追加的示例](img/Figure_8.13_B19361.jpg)'
- en: Figure 8.13 – An example of string appending
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.13 – 字符串追加的示例
- en: In this example, the final value for `A` is `originalValueAppendedValue`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`A` 的最终值是 `originalValueAppendedValue`。
- en: 'The `=.` operator, known as *string prepending*, adds the new value before
    the original one with no extra space, as shown here:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`=.` 操作符，称为 *字符串预添加*，将新值添加到原值之前，中间不留空格，如下所示：'
- en: '![Figure 8.14 – An example of string prepending](img/Figure_8.14_B19361.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.14 – 字符串预添加的示例](img/Figure_8.14_B19361.jpg)'
- en: Figure 8.14 – An example of string prepending
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.14 – 字符串预添加的示例
- en: In this example, the final value for `A` is `prependedValueOriginalValue`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`A` 的最终值是 `prependedValueOriginalValue`。
- en: The :append and :prepend operators
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: :append 和 :prepend 操作符
- en: 'The `:append` operator adds a new value after the original with no extra space,
    as shown here:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`:append` 操作符将新值添加到原值之后，中间不留空格，如下所示：'
- en: '![Figure 8.15 – An example of how to use the :append operator](img/Figure_8.15_B19361.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.15 – 使用 :append 操作符的示例](img/Figure_8.15_B19361.jpg)'
- en: Figure 8.15 – An example of how to use the :append operator
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.15 – 使用 :append 操作符的示例
- en: In this example, the final value for `A` is `originalValueAppendedValue`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`A` 的最终值是 `originalValueAppendedValue`。
- en: 'The `:prepend` operator adds the new value before the original with no extra
    space, as shown here:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`:prepend` 操作符将新值添加到原值之前，中间不留空格，如下所示：'
- en: '![Figure 8.16 – An example of how to use the :prepend operator](img/Figure_8.16_B19361.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.16 – 使用 :prepend 操作符的示例](img/Figure_8.16_B19361.jpg)'
- en: Figure 8.16 – An example of how to use the :prepend operator
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.16 – 使用 :prepend 操作符的示例
- en: In this example, the final value for `A` is `prependedValueOriginalValue`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`A` 的最终值是 `prependedValueOriginalValue`。
- en: 'You may have noticed that the `:append` and `:prepend` operators resemble the
    string appending (`.=`) and prepending (`=.`) operators. Still, there is a subtle
    difference between how the `:append` and `:prepend` operators and the string appending
    and string prepending operators are parsed, as shown here:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到，`:append` 和 `:prepend` 操作符与字符串追加（`.=`）和预添加（`=.`）操作符相似。但在解析 `:append`
    和 `:prepend` 操作符与字符串追加和预添加操作符时，存在微妙的差别，如下所示：
- en: "![Figure 8.17 – An example of the difference between \uFEFF:append and the\
    \ .= operator](img/Figure_8.17_B19361.jpg)"
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.17 – :append 和 .= 操作符之间差异的示例](img/Figure_8.17_B19361.jpg)'
- en: Figure 8.17 – An example of the difference between :append and the .= operator
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.17 – :append 和 .= 操作符之间差异的示例
- en: Using the `:append` operator queues the operation for execution, which happens
    after the *line 2* assignment, resulting in `A` becoming `valueAppendedValue`.
    The `.=` operator is immediate, so the assignment of *line 4* replaces the value
    set on *line 3*, resulting in `B` becoming `value`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `:append` 操作符将操作排队等待执行，这将在 *第 2 行* 分配后发生，结果是 `A` 变成了 `valueAppendedValue`。而
    `.=` 操作符是立即执行的，因此 *第 4 行* 的赋值会替代 *第 3 行* 中设置的值，导致 `B` 变为 `value`。
- en: The list item removal
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列表项移除
- en: 'The `:remove` operator drops a list item from the original content. For example,
    see the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`:remove` 操作符从原始内容中删除一个列表项。例如，见下文：'
- en: '![Figure 8.18 – An example of how to use the :remove operator](img/Figure_8.18_B19361.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.18 – 如何使用 :remove 操作符的示例](img/Figure_8.18_B19361.jpg)'
- en: Figure 8.18 – An example of how to use the :remove operator
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.18 – 如何使用 :remove 操作符的示例
- en: In this example, `A` is now `value1 value3`. The `:remove` operator considers
    the variable value as a list of strings separated by spaces so that the operator
    can remove one or more items from the list. Note that every appending and prepending
    operation has already finished when `:remove` is executed.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，`A` 现在是 `value1 value3`。`:remove` 操作符将变量值视为由空格分隔的字符串列表，因此该操作符可以从列表中删除一个或多个项目。请注意，每个追加和预加操作都已经完成，才会执行
    `:remove`。
- en: Conditional metadata sets
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 条件元数据设置
- en: BitBake provides a very easy-to-use way to write conditional metadata through
    a mechanism called **overrides**.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake 提供了一种非常易于使用的方式，通过名为 **overrides** 的机制编写条件元数据。
- en: The `OVERRIDES` variable contains values separated by colons (`:`) and evaluated
    from left to right. Each value is an item that we want to have conditional metadata.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`OVERRIDES` 变量包含由冒号（`:`）分隔的值，并从左到右进行评估。每个值都是我们希望具有条件元数据的项目。'
- en: 'Let’s consider the next example:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑下一个示例：
- en: '![Figure 8.19 – An example of the OVERRIDES variable](img/Figure_8.19_B19361.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.19 – OVERRIDES 变量的示例](img/Figure_8.19_B19361.jpg)'
- en: Figure 8.19 – An example of the OVERRIDES variable
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.19 – OVERRIDES 变量的示例
- en: 'The `linux` override is less specific than `arm` and `mymachine`. The following
    example shows how we can use `OVERRIDES` to set the `A` variable conditionally:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`linux` 覆盖比 `arm` 和 `mymachine` 更不具体。以下示例展示了如何使用 `OVERRIDES` 条件地设置 `A` 变量：'
- en: '![Figure 8.20 – An example of using OVERRIDES conditional setting](img/Figure_8.20_B19361.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.20 – 使用 OVERRIDES 条件设置的示例](img/Figure_8.20_B19361.jpg)'
- en: Figure 8.20 – An example of using OVERRIDES conditional setting
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.20 – 使用 OVERRIDES 条件设置的示例
- en: In this example, `A` will be `linuxSpecificValue`, due to the condition of `linux`
    being in `OVERRIDES`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，由于 `OVERRIDES` 中包含 `linux`，`A` 将是 `linuxSpecificValue`。
- en: Conditional appending
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 条件追加
- en: 'BitBake also supports appending and prepending variables, based on whether
    something is in `OVERRIDES`, as shown in the following example:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake 还支持基于是否在 `OVERRIDES` 中，进行变量追加和预加，如下所示：
- en: '![Figure 8.21 – An example of using OVERRIDES conditional appending](img/Figure_8.21_B19361.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.21 – 使用 OVERRIDES 条件追加的示例](img/Figure_8.21_B19361.jpg)'
- en: Figure 8.21 – An example of using OVERRIDES conditional appending
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.21 – 使用 OVERRIDES 条件追加的示例
- en: In the preceding example, `A` is set to `value armValue`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，`A` 被设置为 `value armValue`。
- en: File inclusion
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件包含
- en: BitBake provides two directives for file inclusion – `include` and `require`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake 提供了两种文件包含指令 – `include` 和 `require`。
- en: With the `include` keyword, BitBake attempts to insert the file at the keyword
    location, so it is optional. Let’s suppose the path specified on the `include`
    line is relative; then, BitBake locates the first instance it can find within
    `BBPATH`. By contrast, the `require` keyword raises `ParseError` if the required
    file cannot be found.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `include` 关键字，BitBake 尝试在关键字位置插入文件，因此它是可选的。假设 `include` 行上指定的路径是相对路径；然后，BitBake
    会在 `BBPATH` 中找到的第一个实例进行定位。相比之下，如果无法找到所需文件，`require` 关键字会引发 `ParseError`。
- en: Tip
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The convention generally adopted in the Yocto Project is to use a `.inc` file
    to share the common code between two or more recipe files.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Yocto 项目中通常采用的约定是使用 `.inc` 文件在两个或更多的配方文件之间共享公共代码。
- en: Python variable expansion
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 变量扩展
- en: 'BitBake makes it easy to use Python code in variable expansion with the following
    syntax:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake 使得在变量扩展中使用 Python 代码变得简单，语法如下：
- en: '![Figure 8.22 – An example of Python expansion syntax](img/Figure_8.22_B19361.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.22 – Python 扩展语法示例](img/Figure_8.22_B19361.jpg)'
- en: Figure 8.22 – An example of Python expansion syntax
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.22 – Python 扩展语法示例
- en: 'This gives enormous flexibility to a user. We can see a Python function call
    in the following example:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这为用户提供了极大的灵活性。我们可以在以下示例中看到 Python 函数的调用：
- en: '![Figure 8.23 – An example of a Python command to print the current date](img/Figure_8.23_B19361.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.23 – 打印当前日期的 Python 命令示例](img/Figure_8.23_B19361.jpg)'
- en: Figure 8.23 – An example of a Python command to print the current date
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.23 – 打印当前日期的 Python 命令示例
- en: This results in the `A` variable containing today’s date.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致 `A` 变量包含今天的日期。
- en: Defining executable metadata
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义可执行的元数据
- en: 'Metadata recipes (`.bb`) and class files (`.bbclass`) can use Shell Script
    code, as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据配方（`.bb`）和类文件（`.bbclass`）可以使用 Shell 脚本代码，如下所示：
- en: '![Figure 8.24 – An example of a task definition](img/Figure_8.24_B19361.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.24 – 任务定义示例](img/Figure_8.24_B19361.jpg)'
- en: Figure 8.24 – An example of a task definition
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.24 – 任务定义示例
- en: The task definition is identical to setting a variable, except that this variable
    happens to be an executable Shell Script code. When writing the task code, we
    should not use Bash or Zsh-specific features, as the tasks can only rely on POSIX-compatible
    features. When in doubt, an excellent way to test whether your code is safe is
    to use the Dash shell to try it out.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 任务定义与设置变量相同，不同之处在于此变量恰好是可执行的 Shell 脚本代码。在编写任务代码时，我们不应使用 Bash 或 Zsh 特有的功能，因为任务只能依赖于
    POSIX 兼容的功能。如果有疑问，测试代码是否安全的一个好方法是使用 Dash shell 来尝试。
- en: 'Another way to inject code is by using Python code, as shown here:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种注入代码的方式是使用 Python 代码，如此处所示：
- en: '![Figure 8.25 – An example of a Python task definition](img/Figure_8.25_B19361.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.25 – Python 任务定义示例](img/Figure_8.25_B19361.jpg)'
- en: Figure 8.25 – An example of a Python task definition
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.25 – Python 任务定义示例
- en: The task definition is similar, but it flags the task as Python so that BitBake
    knows how to run it accordingly.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 任务定义类似，但它将任务标记为 Python 任务，这样 BitBake 就知道如何相应地运行它。
- en: Defining Python functions in a global namespace
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在全局命名空间中定义 Python 函数
- en: 'When we need to generate a value for a variable or some other use, this can
    be quickly done in recipes (`.bb`) and classes (`.bbclass`) using code similar
    to the following:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要为变量或其他用途生成一个值时，可以通过以下类似的代码在配方（`.bb`）和类（`.bbclass`）中快速完成：
- en: '![Figure 8.26 – A code example to handle variable values in Python code](img/Figure_8.26_B19361.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.26 – 处理 Python 代码中变量值的代码示例](img/Figure_8.26_B19361.jpg)'
- en: Figure 8.26 – A code example to handle variable values in Python code
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.26 – 处理 Python 代码中变量值的代码示例
- en: Usually, we need to access the BitBake datastore when writing a Python function.
    Therefore, a convention among all metadata is the use of an argument called `d`
    to point to BitBake’s datastore. It is usually in the last parameter of the function.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在编写 Python 函数时，我们需要访问 BitBake 数据存储。因此，所有元数据之间的约定是使用一个名为 `d` 的参数来指向 BitBake
    的数据存储。它通常是函数的最后一个参数。
- en: In *Figure 8**.26*, we ask the datastore for the value of the `SOMECONDITION`
    variable in line 2 and return a value depending on it.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 8.26* 中，我们在第 2 行向数据存储请求 `SOMECONDITION` 变量的值，并根据该值返回一个结果。
- en: The example results in the value for the `DEPENDS` variable containing `dependencyWithConditon`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例导致 `DEPENDS` 变量的值包含 `dependencyWithCondition`。
- en: The inheritance system
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 继承系统
- en: 'The `inherit` directive specifies which classes of functionality our recipe
    (`.bb`) offers a rudimentary inheritance mechanism, such as object-oriented programming
    languages. For example, we can abstract the tasks involved in using the Autoconf
    and Automake building tools and put them into the class for our recipes to reuse.
    A given `.bbclass` is located by searching for `classes/filename.bbclass` in `BBPATH`.
    So, in a recipe that uses Autoconf or Automake, we can use the following:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`inherit` 指令指定我们的配方（`.bb`）提供哪些功能类，提供了类似面向对象编程语言的基本继承机制。例如，我们可以抽象出使用 Autoconf
    和 Automake 构建工具所涉及的任务，并将它们放入配方类中以供重用。给定的 `.bbclass` 文件通过在 `BBPATH` 中查找 `classes/filename.bbclass`
    来定位。因此，在使用 Autoconf 或 Automake 的配方中，我们可以使用以下内容：'
- en: '![Figure 8.27 – An example of how to inherit a class](img/Figure_8.27_B19361.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.27 – 继承类的示例](img/Figure_8.27_B19361.jpg)'
- en: Figure 8.27 – An example of how to inherit a class
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.27 – 如何继承一个类的示例
- en: Line 1 from *Figure 8**.27* instructs BitBake to use `inherit autotools.bbclass`,
    providing the default tasks that work fine for most Autoconf- or Automake-based
    projects.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8.27* 的第 1 行指示 BitBake 使用 `inherit autotools.bbclass`，为大多数基于 Autoconf 或
    Automake 的项目提供默认任务。'
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned in detail about the BitBake metadata syntax, its
    operators to manipulate variable contents, and variable expansions, including
    some usage examples.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们详细学习了 BitBake 元数据语法、用于操作变量内容的运算符，以及变量展开，包括一些使用示例。
- en: In the next chapter, we will learn how to use Poky to create external compilation
    tools and produce a `root` filesystem suitable for target development.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用Poky创建外部编译工具，并生成适合目标开发的`root`文件系统。
