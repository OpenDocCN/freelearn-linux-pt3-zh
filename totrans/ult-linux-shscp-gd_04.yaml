- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Understanding Input/Output Redirection
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解输入/输出重定向
- en: In the previous chapter, we discussed how to use variables and pipelines in
    a shell. This time, we’ll look at how to send the text output of a command to
    somewhere other than the terminal, which is the default output device. We’ll then
    look at how to make a command bring in text from somewhere other than the keyboard,
    which is the default input device. Finally, we’ll look at how to send error messages
    to somewhere other than the terminal.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了如何在shell中使用变量和管道。这一次，我们将看看如何将命令的文本输出发送到终端以外的地方，终端是默认的输出设备。然后，我们将看看如何让命令从键盘以外的地方获取文本，键盘是默认的输入设备。最后，我们将讨论如何将错误消息发送到终端以外的地方。
- en: 'Topics in this chapter include:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主题包括：
- en: Understanding `stdout`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解`stdout`
- en: Understanding `stdin`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解`stdin`
- en: Understanding `stderr`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解`stderr`
- en: Understanding `tee`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解`tee`
- en: Okay, let’s get started.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们开始吧。
- en: Introduction to Input/Output Redirection
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入/输出重定向简介
- en: In order to extract information from different sources and format it for presentation,
    we’ll often need to use various utilities that are collectively known as **text
    stream filters**. When you work with text-stream filtering utilities, it only
    makes sense that you would need a way to feed them some sort of input. It also
    makes sense that you would need a way to see the output, and to see error messages
    if something goes wrong. For these purposes, we have `stdin`, `stdout`, and `stderr`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从不同的来源提取信息并进行格式化展示，我们通常需要使用各种实用工具，这些工具统称为**文本流过滤器**。当你使用文本流过滤工具时，提供输入显然是必要的。查看输出以及在出现问题时查看错误信息同样是必须的。为了这些目的，我们有了`stdin`、`stdout`和`stderr`。
- en: '`stdin`: This is short for *standard input*. By default, `stdin` comes from
    the keyboard. However, by using pipes or redirectors, you can also obtain `stdin`
    from either a file or from the output of another command.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stdin`：这是*标准输入*的缩写。默认情况下，`stdin`来自键盘。然而，通过使用管道或重定向符号，你也可以从文件或另一个命令的输出中获取`stdin`。'
- en: '`stdout` : This is short for *standard output*. By default, `stdout` gets sent
    to your computer screen. You can use pipes to have `stdout` become the `stdin`
    for another command, or you can use redirectors to save the `stdout` as a file
    on a storage device. If you don’t want to see any output at all, just use redirectors
    to send `stdout` to the proverbial *bit bucket*.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stdout`：这是*标准输出*的缩写。默认情况下，`stdout`会发送到你的计算机屏幕。你可以使用管道将`stdout`变成另一个命令的`stdin`，或者你可以使用重定向符号将`stdout`保存为存储设备上的文件。如果你不想看到任何输出，只需使用重定向符号将`stdout`发送到所谓的*垃圾桶*。'
- en: '`stderr`: As you may have guessed, this is short for *standard error*. If a
    command doesn’t execute properly, you’ll receive an error message. By default,
    the message shows up on the screen. However, you can use pipes or redirectors
    to change `stderr`''s destination, just the same as you can with `stdout`.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stderr`：正如你可能猜到的，这是*标准错误*的缩写。如果命令执行不正确，你将收到一条错误消息。默认情况下，消息会显示在屏幕上。然而，你可以使用管道或重定向符号将`stderr`的输出目标改变，就像你可以操作`stdout`一样。'
- en: 'I’ve told you before that everything on a Linux, Unix, or Unix-like systems
    such as FreeBSD or OpenIndiana is represented by a file. `stdin`, `stdout`, and
    `stderr` are represented on a Linux system by files in the `/proc/` filesystem.
    In the `/dev/` directory, there are symbolic links that point to these files,
    as we see here:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前告诉过你，在Linux、Unix或类似Unix的系统（如FreeBSD或OpenIndiana）上，一切都表示为文件。`stdin`、`stdout`和`stderr`在Linux系统中由`/proc/`文件系统中的文件表示。在`/dev/`目录下，有指向这些文件的符号链接，正如我们所看到的：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that the lowest-level subdirectory where these files are found is `fd`,
    which stands for **file descriptor**. So, these files that represent `stdin`,
    `stdout`, and `stderr` are collectively known as file descriptors.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些文件所在的最低级别子目录是`fd`，即**文件描述符**的缩写。所以，表示`stdin`、`stdout`和`stderr`的文件统称为文件描述符。
- en: 'I’m not going to delve into the nitty-gritty details of how this works, because
    it’s not really necessary. The only part of this that you really need to know
    is the ID numbers of the file descriptors, which are as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会深入探讨它是如何工作的细节，因为其实并不需要了解这些。你真正需要知道的唯一内容就是文件描述符的ID号，具体如下：
- en: '`0`: This is for `stdin`.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`：这是用于`stdin`。'
- en: '`1`: This is for `stdout`.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1`：这是用于`stdout`。'
- en: '`2`: This is for `stderr`.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2`：这是用于`stderr`。'
- en: Remembering the numbers of these file descriptors, which are the same across
    all Linux, Unix/Unix-like systems, will help you understand some concepts that
    I’ll present later in this chapter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 记住这些文件描述符的编号，这些编号在所有 Linux、Unix/类 Unix 系统中都是相同的，这将帮助你理解本章稍后介绍的一些概念。
- en: 'Here’s what you can do with redirectors:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用重定向符号做以下事情：
- en: Direct a command to obtain its input (`stdin`) from someplace other than the
    keyboard.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将命令的输入（`stdin`）从键盘以外的地方获取。
- en: Have a command send its output (`stdout`) to someplace other than the computer
    screen.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让命令将其输出（`stdout`）发送到计算机屏幕以外的地方。
- en: Have a command send its error messages (`stderr`) to somplace other than the
    computer screen.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让命令将其错误消息（`stderr`）发送到计算机屏幕以外的地方。
- en: There are several operator symbols that you’ll use with redirectors. Most are
    easy to understand, but you may find that the ones associated with `stderr` are
    a bit confusing. Not to worry though, because I’m here to help. Let’s start by
    taking a look at the `stdout` family of operators, which consists of `>`, `>|`,
    and `>>`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你将会使用几个操作符符号与重定向符号搭配。大部分符号很容易理解，但你可能会发现与 `stderr` 相关的符号有点令人困惑。不过不用担心，因为我会帮你解答。我们从
    `stdout` 系列的操作符开始，它包括 `>`、`>|` 和 `>>`。
- en: Understanding stdout
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解标准输出（stdout）
- en: 'Let’s say that you want to look at the listing of files that are in a certain
    directory. Instead of piping the `ls` output into `less`, you want to create a
    text file of this listing so that you can print it later. Here’s a graphical representation
    of how it works:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想查看某个目录中的文件列表。你不想将 `ls` 的输出通过管道传输到 `less`，而是希望将这个列表保存为文本文件，以便以后打印。以下是它如何工作的图示：
- en: '![](img/B21693_04_01.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21693_04_01.png)'
- en: 'Figure 4.1: How stdout works'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1：标准输出（stdout）是如何工作的
- en: 'Here’s what it looks like in practice, where I’m sending output from the `ls`
    command to the `filelist.txt` file:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是实践中的效果，我正在将 `ls` 命令的输出发送到 `filelist.txt` 文件：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, this is fairly simple. You can take pretty much any command
    that normally sends its output to the computer screen, and have it sent to a text
    file instead. There is one thing that you have to be careful with, though. If
    you redirect a command’s output to a file that already exists, you will overwrite
    it, and all previous information in that file will be lost. There are three ways
    to prevent this from happening.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这相当简单。你几乎可以将任何通常将输出发送到计算机屏幕的命令，改为将其输出发送到文本文件。不过，有一点需要小心。如果你将命令的输出重定向到一个已经存在的文件，它将被覆盖，文件中所有之前的信息将会丢失。防止这种情况发生的方法有三种。
- en: Preventing File Overwrites
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防止文件被覆盖
- en: 'In this section, I’ll show you two ways to prevent overwriting existing files,
    which are:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我将展示两种防止覆盖现有文件的方法，分别是：
- en: Ensure that an existing file with same name as the file that you want to create
    doesn’t already exist.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保同名文件已经不存在，否则你将创建的新文件会覆盖它。
- en: Set the `noclobber` option.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 `noclobber` 选项。
- en: Let’s look at both of these methods.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下这两种方法。
- en: The first way to prevent accidentally overwriting an important file is the most
    obvious. That is, before you redirect output to a file, make sure that a file
    of that name doesn’t already exist. Later, I’ll show you how trivial it is to
    write shell script code that will check for this.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 防止意外覆盖重要文件的第一种方法是最显而易见的。也就是说，在你将输出重定向到文件之前，确保同名的文件不存在。稍后我将展示如何轻松编写 Shell 脚本代码来检查这一点。
- en: 'The second way is to set the `noclobber` option for your shell environment,
    like so:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是为你的 Shell 环境设置 `noclobber` 选项，如下所示：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can set this option either from the command-line or from within a shell
    script. With this option set, `bash` and `zsh` will issue an error message if
    you try to use a redirector to overwrite a file, as you see here:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过命令行或在 Shell 脚本中设置此选项。设置此选项后，如果你尝试使用重定向符号覆盖文件，`bash` 和 `zsh` 会发出错误消息，正如你在这里看到的：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'However, if you really want to overwrite a file with this option set, you can
    do so by making a slight modification to the redirection command. Just use `>|`
    for your operator instead of just a plain `>`, like so:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你真的想在设置了此选项的情况下覆盖文件，你可以通过稍微修改重定向命令来实现。只需将操作符 `>` 替换为 `>|`，就像这样：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There was no error message this time, which means that I really did overwrite
    the file.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这次没有错误消息，这意味着我确实覆盖了文件。
- en: Be aware that when you set the `noclobber` option, it’s not a permanent setting.
    It will go away as soon as you exit from your `bash` or `zsh` session. (This includes
    when you close your terminal emulator window.) Also be aware that the `noclobber`
    option will not prevent you from losing your files by overwriting them with the
    `mv` or `cp` commands. It also won’t stop you from deleting them with the `rm`
    command.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当你设置了 `noclobber` 选项时，这并不是一个永久设置。它会在你退出 `bash` 或 `zsh` 会话后消失。（包括你关闭终端模拟器窗口时。）同时要注意，`noclobber`
    选项不会阻止你通过 `mv` 或 `cp` 命令覆盖文件从而丢失文件。它也不会阻止你通过 `rm` 命令删除文件。
- en: Using the File Descriptor
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用文件描述符
- en: 'I told you just a bit ago that the file descriptor for `stdout` is the number
    `1`. If you really wanted to, you could include this file descriptor in any of
    the commands that I’ve shown you, which would look something like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我刚才告诉过你，`stdout` 的文件描述符是数字 `1`。如果你真的想，你可以在我展示的任何命令中包括这个文件描述符，看起来像这样：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: “What’s the advantage of this?”, you’re wondering. Well, in this case, there
    is none. Leave out the `1`, and things will work just as well. But, in a few pages,
    we’ll be talking about `stderr`. That’s where the file descriptor ID numbers *will*
    come in handy.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: “这有什么好处呢？”你可能会问。好吧，在这种情况下，没有任何好处。去掉 `1`，效果也一样好。但在接下来的几页中，我们会讨论 `stderr`。那时文件描述符的
    ID 号*会*派上用场。
- en: Okay, that’s enough about getting things out. Now, let’s get some things in.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，关于输出的内容我们已经讲够了。现在，让我们来看看一些输入的内容。
- en: Understanding stdin
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 stdin
- en: 'This will be a bit easier, since only one operator symbol is involved. Here’s
    the graphical representation:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这样会更容易一些，因为只涉及一个运算符符号。以下是图形表示：
- en: '![](img/B21693_04_02.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21693_04_02.png)'
- en: 'Figure 4.2: How stdin works'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2：stdin 的工作原理
- en: For our example, we’ll briefly look at the `tr` utility. (We’ll give `tr` a
    more in-depth explanation in *Chapter 7, Text Stream Filters-Part 2*. For now,
    let’s just say that it’s a utility that *translates* things.) By default, `tr`
    would take its `stdin` from the keyboard.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将简要介绍 `tr` 工具。（我们将在*第七章，文本流过滤器-第二部分*中更深入地解释 `tr`。目前，简单来说，它是一个用来*转换*内容的工具。）默认情况下，`tr`
    会从键盘读取 `stdin`。
- en: 'One thing you can do is to type a text string in all lower-case, and have `tr`
    echo it back to you in all upper-case. Hit the *Enter* key after you’ve typed
    the `tr [:lower:] [:upper:]` command, and hit it again after you’ve typed your
    line of text. When the upper-case line comes up, hit *Ctrl-d* to exit `tr`. It
    should look something like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以做的一件事是输入一个全小写的文本字符串，然后让 `tr` 将其转换回全大写。输入 `tr [:lower:] [:upper:]` 命令后，按下*回车*键，再输入你的一行文本后再次按下回车。当大写的文本出现时，按下*Ctrl-d*退出
    `tr`。它应该看起来像这样：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you need for `tr` to take its input from a file, just add the appropriate
    redirector operator and the filename, like so:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要 `tr` 从文件获取输入，只需添加适当的重定向运算符和文件名，像这样：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This won’t change the original file. It will only cause the file contents to
    be displayed on screen in all upper-case letters. If you want to save this converted
    output to another file, just add one of the `stdout` operators and a new filename,
    like this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这不会改变原文件。它只会让文件内容以全大写字母显示在屏幕上。如果你想将这个转换后的输出保存到另一个文件中，只需添加一个 `stdout` 运算符和一个新文件名，像这样：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When you use this trick, you’ll always need to specify a new filename for the
    output. If you use this trick to try to just modify the original file, you’ll
    end up with nothing but a file with no contents. So, entering this would be a
    bad thing:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用这个技巧时，你总是需要为输出指定一个新文件名。如果你试图使用这个技巧只修改原文件，你最终会得到一个没有任何内容的文件。所以，输入这个命令会是一个糟糕的选择：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Of course, you could also use the `>>` operator in this trick to append the
    new information to the original file, like so:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你也可以在这个技巧中使用 `>>` 运算符将新信息追加到原文件中，像这样：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `stdin` and `stdout` operators are fairly easy to understand. The `stderr`
    operator isn’t hard, but some aspects of it can be a bit tricky. So, before getting
    started, sit back, take a deep breath and relax. Ready? Good, let’s go.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`stdin` 和 `stdout` 运算符相对容易理解。`stderr` 运算符不难，但它的某些方面可能有点棘手。所以，在开始之前，坐下来，深呼吸，放松一下。准备好了吗？好，开始吧。'
- en: Understanding stderr
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 stderr
- en: 'The redirector operators for `stderr` are `2>` and `2>>`. If you’re wondering
    why, it’s because of the file descriptor ID numbers that we looked at a few pages
    ago. The ID number for `stderr` just happens to be `2`. As always, here’s the
    graphical representation:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 用于`stderr`的重定向操作符是`2>`和`2>>`。如果你想知道为什么，那是因为我们几页前看过的文件描述符ID号码。`stderr`的ID号码恰好是`2`。一如既往，这里是图形表示：
- en: '![](img/B21693_04_03.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21693_04_03.png)'
- en: 'Figure 4.3: How stderr works'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3：stderr的工作原理
- en: If you run a command and something goes wrong, it will output an error message
    via `stderr`. By default, this message will get sent to the computer screen. Also
    by default, `stderr` messages get mixed in with `stdout` messages. So, if your
    command outputs both good data and error messages, you’ll have to scroll through
    the output messages on your screen to separate the two. Fortunately, you can use
    redirectors to change that behavior. To show how this works, let’s take another
    look at the `find` utility that we discussed in *Chapter 2, Interpreting Commands*.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行一个命令，出了问题，它会通过`stderr`输出一个错误消息。默认情况下，这条消息将被发送到计算机屏幕。同样默认情况下，`stderr`消息与`stdout`消息混合在一起。因此，如果你的命令同时输出良好的数据和错误消息，你需要在屏幕上滚动输出消息以区分两者。幸运的是，你可以使用重定向符来改变这种行为。为了展示这是如何工作的，让我们再次看一下我们在*第二章，解释命令*中讨论过的`find`实用程序。
- en: 'If you’re logged on to a computer as a normal user and you use `find` to search
    through an entire file system, you’ll get error messages when `find` tries to
    access directories that you don’t have permission to access. You’ll also get good
    output, but note how the good is mixed in with the bad in this example:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你作为普通用户登录到计算机上，并使用`find`命令搜索整个文件系统，当`find`尝试访问你没有权限访问的目录时，你会收到错误消息。你也会得到良好的输出，但请注意，良好的输出在这个例子中和错误的输出混合在一起：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you append a `2>` redirector and a filename to this command, you can send
    the error messages to a text file so that you can just look at the good data on
    the screen. Here’s how that looks:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在这个命令后面加上一个`2>`重定向符和一个文件名，你可以将错误消息发送到一个文本文件中，这样你就可以在屏幕上只看到良好的数据。这是它的工作原理：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can combine redirectors to have `stdout` sent to one text file, and `stderr`
    sent to another text file, like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以结合重定向符，将`stdout`发送到一个文本文件，将`stderr`发送到另一个文本文件，像这样：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If you don’t want to see any error messages at all, just send `stderr` to the
    `/dev/null` device, which is known in some circles as the infamous *bit bucket*.
    Anything sent there will never see the light of day. Here’s how that looks:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想看到任何错误消息，只需将`stderr`发送到`/dev/null`设备，有些圈子称之为臭名昭著的*位桶*。任何发送到那里的东西都永远不会见天日。这是它的外观：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you want to send the good data to the bit bucket so that you’ll see nothing
    but error messages, you can use this command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想把好的数据发送到位桶，这样你就只会看到错误消息，你可以使用这个命令：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can also append error messages to an existing file with the 2>> operator,
    like so:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`2>>`操作符将错误消息附加到现有文件中，就像这样：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: So far, so good. Now, as promised, we’ll look at the part that can be a bit
    confusing. Well, actually, it’s not *that* confusing. It’s just that we’re going
    to use a bit of shorthand that takes a bit of getting used to.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切都很顺利。现在，正如承诺的那样，我们来看一下可能会有点令人困惑的部分。嗯，实际上，它并不*那么*令人困惑。只是我们要使用一点缩写，需要一点时间来适应。
- en: Let’s say that you want to send both `stdout` and `stderr` to the same place.
    Does that mean that you have to enter the destination twice, with two different
    redirectors? Thanks to this bit of shorthand, the answer is *No*. Here’s how it
    works.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要将`stdout`和`stderr`同时发送到同一个地方。这意味着你必须用两个不同的重定向符输入目的地吗？多亏了这个简写，答案是*不用*。它是这样工作的。
- en: If you want both `stderr` and `stdout` to go to the same text file, just enter
    your command with the regular `stdout` operator and destination. Then, at the
    end, append `2>&1`. If you need a way to help understand this, just remember that
    `stderr` is File Descriptor ID `2`, and `stdout` is File Descriptor ID `1`. So,
    you can read this as, `stderr` *(ID* `2`*) goes to the same place as* `stdout`
    *(ID* `1`*)*.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望`stderr`和`stdout`都发送到同一个文本文件中，只需输入你的命令，带有常规的`stdout`操作符和目的地。然后，在最后追加`2>&1`。如果你需要一种帮助理解这一点的方法，只需记住`stderr`是文件描述符`2`，而`stdout`是文件描述符`1`。所以，你可以把它读作，`stderr`（ID`2`）*去*与`stdout`（ID`1`）*去同一个地方*。
- en: 'To have both `stderr` and `stdout` of a `find` operation sent to the same text
    file, you can enter:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`find`操作的`stderr`和`stdout`都发送到同一个文本文件中，你可以输入：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'There may be times when you wouldn’t want any output from either `stderr` or
    `stdout`. For example, if you needed to run a backup job in the background, you
    wouldn’t want any screen output to mess up the text file that you’re editing in
    the foreground. (You also wouldn’t need to save any of the output to a text file.)
    For this, you can enter something like this:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有一些情况，你不希望从`stderr`或`stdout`中获取任何输出。例如，如果你需要在后台运行一个备份任务，你就不希望任何屏幕输出打乱你正在前台编辑的文本文件。（你也不需要将任何输出保存到文本文件。）为此，你可以输入如下内容：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: (Note that I’ve set the permissions on the `/backup/` directory so that I can
    write to it with my normal user privileges.)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: （注意，我已经设置了`/backup/`目录的权限，以便我可以用普通用户权限进行写操作。）
- en: I think that that about does it for `stderr`. And now, as a no-extra-cost bonus,
    I’ll show you how to send your output to both the screen and a text file at the
    same time.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这就是关于`stderr`的全部内容了。现在，作为额外的奖励，我会展示如何将输出同时发送到屏幕和文本文件。
- en: Understanding tee
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解tee命令
- en: The `tee` command is rather unique, because it’s not really a normal redirector.
    Rather, it’s a utility that can take output from a command and send it to both
    the screen and to a file at the same time. So, instead of using it with a redirector
    symbol as we’ve been doing, you’ll send it its input via a pipe.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`tee`命令相当独特，因为它并不是一个普通的重定向器。它是一个工具，可以同时将命令的输出发送到屏幕和文件中。因此，和我们之前使用重定向符号的方式不同，你会通过管道将输入传递给它。'
- en: 'If you need to see a command’s output on the screen and also save it as a text
    file, pipe the output of the command through the `tee` utility, like this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要同时查看命令的输出并将其保存为文本文件，可以像这样将命令的输出通过`tee`工具进行管道传输：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note that you don’t have to use the `stdout` operator (`>`) with this command.
    The name of the text file is used as the argument for `tee`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你不需要在此命令中使用`stdout`操作符（`>`）。文本文件的名称作为`tee`的参数使用。
- en: 'If you run another command with the same filename, the first file that you
    created will get overwritten. (Of course, you can prevent that by setting the
    `noclobber` option, as I showed you just a while ago.) If you want to append output
    to an existing file, you can use the `-a` option, like this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你用相同的文件名运行另一个命令，第一个创建的文件将被覆盖。（当然，你可以通过设置`noclobber`选项来防止这种情况，就像我刚才展示的那样。）如果你想将输出追加到现有文件中，可以使用`-a`选项，像这样：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'There’s another use for `tee` that you definitely need to know about. It’s
    just that at times, you might have to create a shell script that will automatically
    create or update a configuration file in the `/etc/` directory. It seems logical
    that you would use `echo` and either the `>` or `>>` operator to accomplish that.
    But, look what happens when I try that:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`tee`命令还有另一个你一定需要了解的用途。只不过有时候，你可能需要创建一个shell脚本，自动创建或更新`/etc/`目录中的配置文件。看似逻辑上，你应该使用`echo`命令，并使用`>`或`>>`操作符来完成这一操作。但看看当我尝试这么做时发生了什么：'
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As you see, the shell doesn’t allow me to redirect output into a file in the
    `/etc/` directory, even when I use `sudo` privileges. (Okay, you can do this if
    you actually log into the root user’s shell, but let’s say that we don’t want
    to do that.) The solution is to use `tee`, as you see here:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，shell不允许我将输出重定向到`/etc/`目录中的文件，即使我使用了`sudo`权限。（好吧，如果你实际登录root用户的shell，是可以做到的，但假设我们不想这么做。）解决方法是使用`tee`，如你所见：
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: When running this from the command-line, I have to precede the `tee` command
    with `sudo`. If you put a command like this in a shell script, you’ll be able
    to omit the `sudo`, because you’ll be running the entire script with `sudo` privileges.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当在命令行中运行时，我必须在`tee`命令前加上`sudo`。如果你将像这样的命令放入shell脚本中，你就可以省略`sudo`，因为你将以`sudo`权限运行整个脚本。
- en: Now, as cool as `tee` sounds, there is one slight catch. That is, `tee` always
    sends both good output and error messages to the screen, but it only sends good
    output to the designated file.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尽管`tee`听起来很酷，但有一个小小的限制。也就是说，`tee`始终将正常输出和错误信息都发送到屏幕，但只会将正常输出发送到指定的文件。
- en: So far, it’s been pretty easy for you to follow along in your own shell as I’ve
    explained things. Now that things are getting a bit more complex, let’s tie things
    together a bit by doing an actual hands-on lab.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在我解释的过程中，你应该很容易跟上并在你自己的shell中操作。现在事情有点复杂了，我们通过进行一个实际的实践实验室来把这些内容结合起来。
- en: Hands-on Lab – Pipes, Redirectors, and find
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践实验室 – 管道、重定向器和find命令
- en: For this assignment, you’ll be working with pipes and redirectors. To see the
    full effect of this exercise, you’ll need to be logged in as a normal user, and
    *not* as root.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本次任务，你将使用管道和重定向器。为了看到这个练习的完整效果，你需要作为普通用户登录，而*不是*以root身份登录。
- en: Enter the following, noting that you’re deliberately typing the name of a non-existent
    directory in order to generate an error message.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下内容，注意你故意输入了一个不存在的目录名来生成错误信息。
- en: '[PRE23]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Note the output, and then enter:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意输出，然后输入：
- en: '[PRE24]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a listing of files and see how many there are, by entering:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以创建文件列表并查看文件数量：
- en: '[PRE25]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: If you’re logged on as a normal user instead of as root, this should generate
    some error messages about the fact that you don’t have permission to look in certain
    directories. The list of `.txt` files will be written to the `filelist.txt` file,
    and the error messages will be written to the `error_2.txt` file .
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你作为普通用户登录，而不是root身份登录，这应该会生成一些错误信息，表示你没有权限查看某些目录。`.txt`文件的列表将被写入`filelist.txt`文件，错误信息将写入`error_2.txt`文件。
- en: 'Search for README files by entering:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以搜索README文件：
- en: '[PRE26]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This time, the `2>&1` that’s appended to the end of the command caused the error
    messages and the file list to both go to the same file.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，命令末尾追加的`2>&1`导致错误信息和文件列表都发送到了同一个文件。
- en: 'For the next operation, you’ll send the file list to both the screen and to
    a file. Enter:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于下一个操作，你将把文件列表同时发送到屏幕和文件中。请输入：
- en: '[PRE27]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note that both the file list and the error messages will print on the screen,
    but that only the file list will go to the file.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，文件列表和错误信息都会打印在屏幕上，但只有文件列表会写入文件中。
- en: 'Create a simulated backup directory, like so:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个模拟的备份目录，如下所示：
- en: '[PRE28]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Copy all of the .txt files that you created within the last day to the `/backup/`
    directory, and send all screen output to the `/dev/null` device:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将过去一天内创建的所有.txt文件复制到`/backup/`目录，并将所有屏幕输出发送到`/dev/null`设备：
- en: '[PRE29]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'View the files in the `/backup/` directory:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看`/backup/`目录中的文件：
- en: '[PRE30]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: End of lab
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 实验结束
- en: Well, that’s pretty much it for this chapter. Let’s summarize and move on.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，本章内容差不多就这些。让我们总结一下并继续前进。
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the concept of Input/Output redirection. It’s
    a simple concept, really. It just means that we either take input from somewhere
    other than the keyboard, or we send output to somewhere other than the terminal
    screen. We looked at the redirection operators, how to use them, and some of the
    pitfalls of using them incorrectly.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们讨论了输入/输出重定向的概念。其实这是一个简单的概念。它只是意味着我们要么从键盘之外的地方获取输入，要么将输出发送到屏幕之外的地方。我们了解了重定向操作符，如何使用它们，以及使用不当时的一些陷阱。
- en: In the next chapter, we’ll look at ways to modify your shell environment. I’ll
    see you there.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何修改你的shell环境。到时见。
- en: Questions
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the file descriptor number for `stdin`?
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`stdin`的文件描述符号是多少？'
- en: '`0`'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`0`'
- en: '`1`'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`1`'
- en: '`2`'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`2`'
- en: '`3`'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`3`'
- en: Which of the following operators is for `stdin`?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些操作符用于`stdin`？
- en: '`>`'
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`>`'
- en: '`>>`'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`>>`'
- en: '`<`'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<`'
- en: '`<<`'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<<`'
- en: What will happen if you run this command?
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果运行此命令，会发生什么？
- en: '[PRE31]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `filelist.txt` file will get overwritten with updated output.
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`filelist.txt`文件将被更新的输出覆盖。'
- en: The output of `tr` will be appended to the end of the file.
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`tr`的输出将会追加到文件末尾。'
- en: You’ll receive a warning message.
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将收到一条警告信息。
- en: The contents of the `filelist.txt` file will be wiped out, and you’ll be left
    with just an empty file.
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`filelist.txt`文件的内容将被清除，最终只会留下一个空文件。'
- en: What is the default `stdin` device?
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`stdin`的默认设备是什么？'
- en: keyboard
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 键盘
- en: terminal
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 终端
- en: mouse
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 鼠标
- en: a named pipe
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命名管道
- en: Which of these operators would you use to send `stderr` and `stdout` to the
    same place?
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会使用哪个操作符将`stderr`和`stdout`发送到同一个地方？
- en: '`2>1&`'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`2>1&`'
- en: '`2>&1`'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`2>&1`'
- en: '`2&1`'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`2&1`'
- en: '`2>1`'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`2>1`'
- en: Further Reading
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Five ways to use redirect operators in Bash: [https://www.redhat.com/sysadmin/redirect-operators-bash](https://www.redhat.com/sysadmin/redirect-operators-bash)'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Bash中使用重定向操作符的五种方式：[https://www.redhat.com/sysadmin/redirect-operators-bash](https://www.redhat.com/sysadmin/redirect-operators-bash)
- en: 'How to manipulate files with with shell redirection and pipelines in Linux:
    [https://www.redhat.com/sysadmin/linux-shell-redirection-pipelining](https://www.redhat.com/sysadmin/linux-shell-redirection-pipelining)'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在Linux中使用shell重定向和管道操作文件：[https://www.redhat.com/sysadmin/linux-shell-redirection-pipelining](https://www.redhat.com/sysadmin/linux-shell-redirection-pipelining)
- en: 'How to redirect shell command output: [https://www.redhat.com/sysadmin/redirect-shell-command-script-output](https://www.redhat.com/sysadmin/redirect-shell-command-script-output)'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何重定向Shell命令输出：[https://www.redhat.com/sysadmin/redirect-shell-command-script-output](https://www.redhat.com/sysadmin/redirect-shell-command-script-output)
- en: Answers
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: a
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: a
- en: c
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: c
- en: d
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: d
- en: a
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: a
- en: b
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: b
- en: Join our community on Discord!
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的Discord社区！
- en: Read this book alongside other users, Linux experts, and the author himself.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他用户、Linux专家以及作者本人一起阅读本书。
- en: Ask questions, provide solutions to other readers, chat with the author via
    Ask Me Anything sessions, and much more. Scan the QR code or visit the link to
    join the community.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 提问、为其他读者提供解决方案、通过“问我任何问题”环节与作者交流，等等。扫描二维码或访问链接加入社区。
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/SecNet](https://packt.link/SecNet)'
- en: '![](img/QR_Code10596186092701843.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code10596186092701843.png)'
