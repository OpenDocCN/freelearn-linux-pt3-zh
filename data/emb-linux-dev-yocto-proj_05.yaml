- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Grasping the BitBake Tool
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 掌握 BitBake 工具
- en: In the previous chapter, we learned about metadata, metadata collection concepts,
    and the importance of `conf/layer.conf`. In this chapter, we will examine metadata
    more deeply, understand how recipes depend on each other, and see how BitBake
    deals with dependencies.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们了解了元数据、元数据收集概念以及 `conf/layer.conf` 的重要性。在本章中，我们将更深入地研究元数据，理解配方之间的依赖关系，并了解
    BitBake 如何处理这些依赖关系。
- en: In addition, we will cover a massive list of tasks, from downloading source
    code to generating images and other artifacts. Some examples of these tasks are
    storing the source code in the directory used for the build, patching, configuring,
    compiling, installing, and generating packages, and determining how the packages
    fit into the generated images, which we will introduce in this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将介绍一系列任务，从下载源代码到生成镜像和其他制品。这些任务的一些示例包括将源代码存储在用于构建的目录中、打补丁、配置、编译、安装、生成软件包，并确定软件包如何适应生成的镜像，我们将在本章中介绍这些内容。
- en: Parsing metadata
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析元数据
- en: 'Usually, our projects include multiple layers that provide different metadata
    to fulfill specific needs. For example, when we initialize a build directory,
    using `source oe-init-build-env build`, a set of files is generated as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们的项目包含多个层，这些层提供不同的元数据以满足特定需求。例如，当我们初始化构建目录时，使用 `source oe-init-build-env
    build`，会生成如下文件：
- en: '![Figure 5.1 – A list of files created with source oe-init-build-env build](img/Figure_5.01_B19361.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – 使用 source oe-init-build-env build 创建的文件列表](img/Figure_5.01_B19361.jpg)'
- en: Figure 5.1 – A list of files created with source oe-init-build-env build
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – 使用 source oe-init-build-env build 创建的文件列表
- en: The `build/conf/templateconf.cfg` file points to the directory used as the template
    to create the `build/conf` directory.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`build/conf/templateconf.cfg` 文件指向用于创建 `build/conf` 目录的模板目录。'
- en: Note
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: A user can provide a different template directory using the `TEMPLATECONF` environment
    variable – for example, `TEMPLATECONF=/some/dir source` `oe-init-build-env build`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以使用 `TEMPLATECONF` 环境变量提供一个不同的模板目录——例如，`TEMPLATECONF=/some/dir source` `oe-init-build-env
    build`。
- en: The `build/conf/local.conf` file is the placeholder for the local configurations.
    We used this file in [*Chapter 2*](B19361_02.xhtml#_idTextAnchor031), *Baking
    Our First Poky-Based System*, and we will use it throughout this book.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`build/conf/local.conf` 文件是本地配置的占位符。我们在 [*第 2 章*](B19361_02.xhtml#_idTextAnchor031)，《*烘焙我们的第一个基于
    Poky 的系统*》中使用了此文件，并将在本书中贯穿使用。'
- en: 'BitBake uses the `build/conf/bblayers.conf` file to list the layers considered
    in the build environment. An example is as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake 使用 `build/conf/bblayers.conf` 文件列出构建环境中考虑的层。以下是一个示例：
- en: "![Figure 5.2 – The build/conf/bblayer.conf content after \uFEFFthe source oe-init-build-env\
    \ build](img/Figure_5.02_B19361.jpg)"
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – 使用 source oe-init-build-env build 后的 build/conf/bblayer.conf 内容](img/Figure_5.02_B19361.jpg)'
- en: Figure 5.2 – The build/conf/bblayer.conf content after the source oe-init-build-env
    build
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – 使用 source oe-init-build-env build 后的 build/conf/bblayer.conf 内容
- en: 'The `BBLAYERS` variable, on line 8, is a space-delimited list of layer directories.
    BitBake parses each layer to load its content to the metadata collection. There
    are three major categories that the metadata used by BitBake can be classified
    into. They are listed as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`BBLAYERS` 变量（第 8 行）是一个以空格分隔的层目录列表。BitBake 解析每个层并将其内容加载到元数据集合中。BitBake 使用的元数据可以分为三大类，具体如下：'
- en: Configuration (the `.``conf` files)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置（`.conf` 文件）
- en: Classes (the `.``bbclass` files)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类（`.bbclass` 文件）
- en: Recipes (the `.bb` and `.``bbappend` files)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配方（`.bb` 和 `.bbappend` 文件）
- en: Tip
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The order of the listed layers in the `BBLAYERS` variable is followed from left
    to right by BitBake when parsing the metadata. Therefore, if your layer needs
    to be parsed first, have it listed in the right place in the `BBLAYERS` variable.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`BBLAYERS` 变量中列出的层的顺序由 BitBake 按照从左到右的顺序解析元数据。因此，如果您的层需要最先解析，请确保将其列在 `BBLAYERS`
    变量中的正确位置。'
- en: After parsing all the layers in use, BitBake starts to parse the metadata. The
    first parsed metadata in BitBake is configuration metadata, identified by the
    `.conf` file extension. This metadata is global and, therefore, affects all executed
    recipes and tasks.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在解析所有使用的层之后，BitBake 开始解析元数据。BitBake 中第一个解析的元数据是配置元数据，它的文件扩展名为 `.conf`。这些元数据是全局性的，因此会影响所有执行的配方和任务。
- en: Note
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: One typical example of the configuration file is the machine file, which has
    a list of settings that describes the hardware.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的配置文件示例是机器文件，它包含描述硬件的设置列表。
- en: BitBake first loads `meta/conf/bitbake.conf` from one of the paths included
    in the `BBPATH` list. The `meta/conf/bitbake.conf` file uses `include` directives
    to pull in metadata, such as architecture-specific metadata, machine configuration
    files, and the `build/conf/local.conf` file. One significant restriction of BitBake
    configuration files (`.conf`) is that only variable definitions and `include`
    directives are allowed.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake 首先从 `BBPATH` 列表中包含的路径之一加载 `meta/conf/bitbake.conf`。`meta/conf/bitbake.conf`
    文件使用 `include` 指令来引入元数据，例如特定架构的元数据、机器配置文件和 `build/conf/local.conf` 文件。BitBake
    配置文件（`.conf`）的一个显著限制是，只允许变量定义和 `include` 指令。
- en: BitBake’s classes (`.bbclass`) are a rudimentary inheritance mechanism in the
    `classes/` directories. When an `inherit` directive appears during parsing, BitBake
    immediately parses the linked class. The class content is searched based on the
    order of the `BBPATH` variable list.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake 的类（`.bbclass`）是 `classes/` 目录中的一个基本继承机制。当在解析过程中出现 `inherit` 指令时，BitBake
    会立即解析链接的类。类的内容会根据 `BBPATH` 变量列表的顺序进行搜索。
- en: The `BBFILES` variable is a space-separated list of the `.bb` and `.bbappend`
    files and can use wildcards. It is required in every layer inside `conf/layer.conf`,
    so BitBake knows where to look for recipes. A BitBake recipe (`.bb`) is a logical
    unit of tasks to be executed; typically, it refers to a package.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`BBFILES` 变量是一个以空格分隔的 `.bb` 和 `.bbappend` 文件列表，并且可以使用通配符。它在每个层的 `conf/layer.conf`
    中都是必需的，这样 BitBake 就知道去哪里查找配方。BitBake 配方（`.bb`）是要执行的任务的逻辑单元；通常，它指的是一个包。'
- en: Dependencies
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖关系
- en: 'From the BitBake point of view, there are three different dependency types:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 从 BitBake 的角度来看，有三种不同的依赖类型：
- en: Build time
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建时
- en: Execution time
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行时间
- en: Tasks
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务
- en: An application that needs some other package, such as a library, has a build
    dependency for a successful compilation. Build dependencies include compilers.
    libraries, and native build tools (such as **CMake**). In addition, a build dependency
    has an execution dependency whenever an application is needed only during execution
    time. Runtime dependencies include fonts, icons, dynamically opened libraries,
    and language interpreters.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 需要其他包（如库）的应用程序，在成功编译时有构建依赖关系。构建依赖关系包括编译器、库和本地构建工具（如 **CMake**）。此外，当应用程序仅在执行时需要时，构建依赖关系就会变成执行依赖关系。运行时依赖关系包括字体、图标、动态链接库和语言解释器。
- en: Tip
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The convention inside Poky is to use `-native` suffixes for recipe names. This
    is because those tools are aimed to be run during the build process, in the host
    building system, and are not deployed into the target.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Poky 中的约定是对配方名称使用 `-native` 后缀。这是因为这些工具旨在在构建过程中运行，在主机构建系统中执行，而不会部署到目标系统中。
- en: The task dependencies create order in the chaos of task execution – for example,
    to compile a package, the source code needs to be downloaded. Under the hood,
    all the dependencies are task dependencies. This means that when package `B` has
    a build-time dependency on package `A`, the tasks from package `A` need to be
    completed before package `B` starts.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 任务依赖关系在任务执行的混乱中创建了顺序——例如，为了编译一个包，需要先下载源代码。在底层，所有依赖关系都是任务依赖关系。这意味着，当包 `B` 依赖包
    `A` 进行构建时，包 `A` 的任务需要先完成，包 `B` 才能开始。
- en: Metadata expresses all the dependencies. OpenEmbedded Core provides a vast set
    of classes to handle the default task dependencies commonly used – for example,
    a recipe can express a build-time dependency with the `DEPENDS` variable and an
    execution-time dependence with the `RDEPENDS` variable.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据表示所有依赖关系。OpenEmbedded Core 提供了一组广泛的类来处理常用的默认任务依赖关系——例如，一个配方可以通过 `DEPENDS`
    变量表示构建时的依赖关系，通过 `RDEPENDS` 变量表示执行时的依赖关系。
- en: 'Knowing the recipe dependencies chain, BitBake can sort all the recipes for
    the build in a feasible order. BitBake organizes tasks in the following ways:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 了解配方依赖链，BitBake 可以将所有配方按可行顺序排序。BitBake 以以下方式组织任务：
- en: Recipe tasks that do not have a dependency relation are built in parallel
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有依赖关系的配方任务会并行构建。
- en: Dependent recipes are built in serial order and sorted in a way that satisfies
    the dependencies
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖的配方按顺序串行构建，并以满足依赖关系的方式进行排序。
- en: Tip
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Every recipe included in the runtime dependencies is added to the build list.
    This sounds obvious, but even though they have no role during the build, they
    need to be ready for use so that the resulting binary packages are installable.
    This will be required when building images or populating feeds.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所有在运行时依赖中包含的配方都会被添加到构建列表中。这看起来很明显，但即使它们在构建过程中没有任何作用，它们仍然需要准备好，以便最终生成的二进制包可供安装。这在构建镜像或填充源时是必需的。
- en: Preferring and providing recipes
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 偏好和提供配方
- en: Dependency is a relation between two things; one side can only be fulfilled
    if the other side exists. However, a dependency only specifies that some functionality
    or characteristic is needed to be fulfilled, not precisely how it must be fulfilled.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖是两者之间的关系；一方只有在另一方存在时才能被满足。然而，依赖仅指定某个功能或特性需要被满足，并不具体说明如何满足。
- en: 'For example, when a recipe depends on `A`, the first thought is that it depends
    on a recipe called `A`. However, there are two possible ways to satisfy the dependency
    requirement of `A`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当一个配方依赖于`A`时，最初的想法是它依赖于一个名为`A`的配方。然而，有两种可能的方式来满足`A`的依赖需求：
- en: A recipe called `A`
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为`A`的配方
- en: A recipe that provides a functionality or characteristic called `A`
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供名为`A`的功能或特性的配方
- en: For a recipe to communicate to BitBake that it can fulfill a functionality or
    characteristic requirement, it must use the `PROVIDES` keyword. A subtle consequence
    is that two or more recipes can deliver the same functionality or characteristic.
    We must inform BitBake which recipe should fulfill that requirement using the
    `PREFERRED_PROVIDER` keyword.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让一个配方告诉 BitBake 它可以满足某个功能或特性需求，必须使用`PROVIDES`关键字。一个微妙的后果是，两个或更多的配方可以提供相同的功能或特性。我们必须使用`PREFERRED_PROVIDER`关键字告知
    BitBake 哪个配方应该满足该需求。
- en: 'So, if a recipe called `foo_1.0.bb` depends on `bar`, BitBake lists all recipes
    providing `bar`. The `bar` dependency can be satisfied by the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果一个名为`foo_1.0.bb`的配方依赖于`bar`，BitBake 会列出所有提供`bar`的配方。`bar`的依赖可以通过以下方式满足：
- en: A recipe with the `bar_<version>.bb` format because every recipe provides itself
    by default
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个以`bar_<version>.bb`格式命名的配方，因为每个配方默认提供自己
- en: A recipe where the `PROVIDES` variable includes `bar`
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含`bar`的`PROVIDES`变量的配方
- en: The `virtual/kernel` provider is a clear example of this mechanism. The `virtual/`
    namespace is the convention adopted when we have a set of commonly overridden
    providers.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`virtual/kernel` 提供者清楚地展示了这一机制。`virtual/`命名空间是当我们有一组常见的覆盖提供者时所采用的约定。'
- en: 'All recipes that require the kernel to be built can add `virtual/kernel` to
    the dependency list (`DEPENDS`), and BitBake satisfies the dependency. When we
    have more than one recipe with an alternative provider, we must choose one to
    be used – for example, the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所有需要构建内核的配方都可以将`virtual/kernel`添加到依赖列表（`DEPENDS`）中，BitBake 会满足该依赖。当我们有多个提供者时，我们必须选择一个来使用——例如，以下情况：
- en: '![Figure 5.3 – An example of how to set a preferred provider for virtual/kernel](img/Figure_5.03_B19361.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – 如何为虚拟/内核设置首选提供者的示例](img/Figure_5.03_B19361.jpg)'
- en: Figure 5.3 – An example of how to set a preferred provider for virtual/kernel
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – 如何为虚拟/内核设置首选提供者的示例
- en: The `virtual/kernel` provider is commonly set in the machine definition file,
    as it can vary from machine to machine. We will see how to create a machine definition
    file in [*Chapter 12*](B19361_12.xhtml#_idTextAnchor147), *Creating* *Custom Layers*.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`virtual/kernel` 提供者通常在机器定义文件中设置，因为它可能因机器不同而有所变化。我们将在[*第12章*](B19361_12.xhtml#_idTextAnchor147)
    *创建* *自定义层*中看到如何创建机器定义文件。'
- en: Note
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: BitBake raises an error when a dependency cannot be satisfied due to a missing
    provider.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当依赖无法满足时，BitBake 会报错，这通常是因为缺少提供者。
- en: When BitBake has two providers with different versions, it uses the highest
    version by default. However, we can force BitBake to use a different version by
    using `PREFERRED_VERSION`. This is common in BSPs, such as bootloaders, where
    vendors may use specific versions for a board.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当 BitBake 有两个不同版本的提供者时，它默认使用最高版本。然而，我们可以通过使用`PREFERRED_VERSION`强制 BitBake 使用不同的版本。这在
    BSP（如引导加载程序）中很常见，因为厂商可能会为某个板子使用特定版本。
- en: 'We can avoid using a development or an unreliable recipe version, by default,
    lowering the version preference by using the `DEFAULT_PREFERENCE` keyword in a
    recipe file, as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在配方文件中使用`DEFAULT_PREFERENCE`关键字，默认降低版本偏好来避免使用开发版或不可靠的配方版本，如下所示：
- en: '![Figure 5.4 – How to lower the version preference in a recipe](img/Figure_5.04_B19361.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.4 – 如何在配方中降低版本优先级](img/Figure_5.04_B19361.jpg)'
- en: Figure 5.4 – How to lower the version preference in a recipe
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – 如何在配方中降低版本优先级
- en: So, even if the version is higher, the recipe is not choosen without `PREFERRED_VERSION`
    being explicitly set to use it.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，即使版本较高，如果没有显式设置`PREFERRED_VERSION`来使用该版本，配方也不会被选择。
- en: Fetching the source code
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取源代码
- en: When we download the Poky source code, we download the metadata collection and
    the BitBake tool. One of the main features supported by BitBake is additional
    source code fetching.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们下载Poky源代码时，我们同时下载了元数据集合和BitBake工具。BitBake支持的主要功能之一是额外的源代码获取。
- en: The ability of fetching external source code is as modular and flexible as possible.
    For example, every Linux-based system includes the Linux kernel and several other
    utilities that form the `root` filesystem, such as OpenSSH or BusyBox.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 获取外部源代码的能力尽可能模块化和灵活。例如，每个基于Linux的系统都包括Linux内核和一些其他工具，这些工具共同构成了`root`文件系统，如OpenSSH或BusyBox。
- en: The OpenSSH source code is available from its upstream website as a `tar.gz`
    file hosted on an HTTP server, while the Linux kernel release is in a Git repository.
    Therefore, BitBake can easily fetch those two different instances of source code.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: OpenSSH源代码可通过其上游网站获得，作为一个托管在HTTP服务器上的`tar.gz`文件，而Linux内核发布版本则在一个Git仓库中。因此，BitBake可以轻松获取这两种不同的源代码实例。
- en: 'BitBake offers support for many different fetcher modules that allow the retrieval
    of tarball files and several other SCM systems, such as the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake支持许多不同的fetcher模块，允许检索tar包文件和其他多个SCM系统，例如以下几种：
- en: Amazon AWS S3
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊 AWS S3
- en: Android repo
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android repo
- en: Azure Storage
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 存储
- en: Bazaar
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bazaar
- en: ClearCase
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ClearCase
- en: CVS
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CVS
- en: FTP
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FTP
- en: Git
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git
- en: Git Annex
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git Annex
- en: Git submodules
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git子模块
- en: HTTP(S)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP(S)
- en: Mercurial
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mercurial
- en: NPM
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NPM
- en: NPMSW (`npm` `shrinkwrap` implementation)
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NPMSW（`npm` `shrinkwrap`实现）
- en: openSUSE Build Service client
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: openSUSE构建服务客户端
- en: Perforce
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Perforce
- en: Rust Crate
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rust Crate
- en: SFTP
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SFTP
- en: SSH
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSH
- en: Subversion
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Subversion
- en: The mechanism used by BitBake to fetch the source code is internally called
    a fetcher backend, which is configurable to align a user’s requirements and optimize
    fetching the source code.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake用于获取源代码的机制在内部称为fetcher后端，可以根据用户的需求进行配置，并优化源代码的获取。
- en: Remote file downloads
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 远程文件下载
- en: BitBake supports several methods for remote file downloads. The most commonly
    used are `http://`, `https://`, and `git://`. We won’t cover the internal details
    of how BitBake handles remote file downloads and will instead focus on its visible
    effects.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake支持多种远程文件下载方式，最常用的包括`http://`、`https://`和`git://`。我们不会讨论BitBake处理远程文件下载的内部细节，而是专注于它的可见效果。
- en: 'When BitBake executes the `do_fetch` task in a recipe, it checks the `SRC_URI`
    contents. Let’s look at, for example, the `pm-utils` recipe (available at `meta/recipes-bsp/pm-utils/pm-utils_1.4.1.bb`).
    The processed variables are shown in the following figure:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当BitBake在配方中执行`do_fetch`任务时，它会检查`SRC_URI`的内容。以`pm-utils`配方为例（可以在`meta/recipes-bsp/pm-utils/pm-utils_1.4.1.bb`中找到）。处理后的变量显示在下图中：
- en: "![Figure 5.5 – \uFEFF\uFEFFSRC_URI for the pm-utils_1.4.1.bb recipe \uFEFF\
    ](img/Figure_5.05_B19361.jpg)"
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: "![图 5.5 – \uFEFF\uFEFFpm-utils_1.4.1.bb配方的SRC_URI](img/Figure_5.05_B19361.jpg)"
- en: Figure 5.5 – SRC_URI for the pm-utils_1.4.1.bb recipe
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – pm-utils_1.4.1.bb配方的SRC_URI
- en: BitBake expands the `PV` variable to the package version (`1.4.1` in this example
    is taken from the `pm-utils_1.4.1.bb` recipe filename) to download the file from
    [http://pm-utils.freedesktop.org/releases/pm-utils-1.4.1.tar.gz](http://pm-utils.freedesktop.org/releases/pm-utils-1.4.1.tar.gz),
    and then saves it as `DL_DIR`, which points to the download storage directory.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake将`PV`变量扩展为包的版本号（在此示例中，`1.4.1`来自`pm-utils_1.4.1.bb`配方文件名），然后从[http://pm-utils.freedesktop.org/releases/pm-utils-1.4.1.tar.gz](http://pm-utils.freedesktop.org/releases/pm-utils-1.4.1.tar.gz)下载文件，最后将其保存在`DL_DIR`指定的下载存储目录中。
- en: After the download is complete, BitBake compares the `sha256sum` value of the
    downloaded file with the value from the recipe. If the value matches, it creates
    a `${DL_DIR}/pm-utils-1.4.1.tar.gz.done` file to mark the file as successfully
    downloaded and checked, allowing BitBake to reuse it.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，BitBake会将下载文件的`sha256sum`值与配方中的值进行比较。如果值匹配，它会创建一个`${DL_DIR}/pm-utils-1.4.1.tar.gz.done`文件，以标记文件已成功下载和验证，允许BitBake重用该文件。
- en: Note
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: By default, the `DL_DIR` variable points to `build/downloads`. You can override
    this by adding to the `build/conf/local.conf` file the following line – `DL_DIR
    = "/my/download-cache"`. Using this, we can share the same download cache among
    several build directories, thus saving download time and bandwidth.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`DL_DIR`变量指向`build/downloads`。你可以通过在`build/conf/local.conf`文件中添加以下行来覆盖此设置
    – `DL_DIR = "/my/download-cache"`。通过这种方式，我们可以在多个构建目录之间共享相同的下载缓存，从而节省下载时间和带宽。
- en: Git repositories
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Git 仓库
- en: One of the most commonly used source control management systems is Git. BitBake
    has solid support for Git, and the Git backend is used when the `do_fetch` task
    is run and finds a `git://` URL at the beginning of the `SRC_URI` variable.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的源代码管理系统之一是 Git。BitBake 对 Git 提供了稳定的支持，当运行`do_fetch`任务并发现`SRC_URI`变量开头是`git://`
    URL 时，会使用 Git 后端。
- en: 'The default way for BitBake’s Git backend to handle the repositories is to
    clone the repository in `${DL_DIR}/git2/<git URL>` – for example, check the following
    quote from the `lz4_1.9.4.bb` recipe found in `meta/recipes-support/lz4/lz4_1.9.4.bb`
    inside Poky:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake Git 后端处理仓库的默认方式是将仓库克隆到`${DL_DIR}/git2/<git URL>` – 例如，查看以下从 `meta/recipes-support/lz4/lz4_1.9.4.bb`
    配方中找到的`lz4_1.9.4.bb`文件：
- en: '![Figure 5.6 – Source code download configuration for the lz4_1.9.4.bb recipe](img/Figure_5.06_B19361.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.6 – lz4_1.9.4.bb 配方的源代码下载配置](img/Figure_5.06_B19361.jpg)'
- en: Figure 5.6 – Source code download configuration for the lz4_1.9.4.bb recipe
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6 – lz4_1.9.4.bb 配方的源代码下载配置
- en: Here, the `lz4.git` repository is cloned in `${DL_DIR}/git2/ github.com.lz4.lz4.git`.
    This directory name avoids conflicts between possible Git repositories with the
    same project name.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`lz4.git` 仓库被克隆到 `${DL_DIR}/git2/github.com.lz4.lz4.git`。这个目录名避免了可能存在相同项目名的
    Git 仓库之间的冲突。
- en: 'There are two cases where the `SRCREV` variable has an impact. They are as
    follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`SRCREV` 变量有两个影响的情况。它们如下：'
- en: '`do_fetch`: This task uses the `SRCREV` variable to ensure the repository has
    the required Git revision'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_fetch`：此任务使用`SRCREV`变量来确保仓库具有所需的 Git 版本。'
- en: '`do_unpack`: This task uses `SRCREV` to set up the working directory with the
    necessary source revision'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_unpack`：此任务使用`SRCREV`来设置工作目录并获取必要的源代码版本。'
- en: Note
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We need to use the `branch=<branch name>` parameter as follows – `SRC_URI =
    "git://myserver/myrepo.git;branch=mybranch"` – to specify the branch that contains
    the revision we want to use. In cases when the hash used points to a tag that
    is not available on a branch, we need to use the `nobranch=1` option as follows
    – `SRC_URI = "``git://myserver/myrepo.git;nobranch=1"`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用`branch=<branch name>`参数，如下所示 – `SRC_URI = "git://myserver/myrepo.git;branch=mybranch"`，来指定包含我们要使用的版本的分支。如果使用的哈希指向一个在分支上不可用的标签，则需要使用`nobranch=1`选项，如下所示
    – `SRC_URI = "git://myserver/myrepo.git;nobranch=1"`。
- en: The remote file and the Git repository are the most commonly used fetch backends
    of BitBake. The other source code management-supported systems vary in their implementations,
    but the general ideas and concepts are the same.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 远程文件和 Git 仓库是 BitBake 最常用的获取后端。其他支持的源代码管理系统在实现上有所不同，但基本的理念和概念是相同的。
- en: Optimizing the source code download
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化源代码下载
- en: 'To improve the robustness of source code download, Poky provides a mirror mechanism
    that can provide the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高源代码下载的稳定性，Poky 提供了一个镜像机制，可以提供以下内容：
- en: A centrally preferred server for download
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于下载的集中首选服务器
- en: A set of fallback servers
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组回退服务器
- en: 'To provide this robust download mechanism, BitBake follows defined logic steps.
    During the build, the first BitBake step is to search for the source code within
    the local download directory (specified by `DL_DIR`). If this fails, the next
    step is to try the locations defined by the `PREMIRRORS` variable. Finally, BitBake
    searches the locations specified in the `MIRRORS` variable in a failure case.
    In summary, these steps are as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供这个强大的下载机制，BitBake 遵循了定义的逻辑步骤。在构建过程中，第一步是从本地下载目录（由`DL_DIR`指定）中搜索源代码。如果这一步失败，下一步是尝试由`PREMIRRORS`变量定义的位置。最后，BitBake
    会在失败的情况下搜索`MIRRORS`变量指定的位置。总的来说，这些步骤如下：
- en: '`DL_DIR`: Look for the download on the host machine.'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DL_DIR`：在主机机器上查找下载。'
- en: '`MIRRORS`: Search for the download in a list of mirrors.'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MIRRORS`：在镜像列表中搜索下载。'
- en: '`PREMIRRORS`: This is used to reduce the download from external servers and
    is usually used inside companies to reduce or forbid internet use.'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PREMIRRORS`：用于减少从外部服务器的下载，通常在公司内部使用，以减少或禁止互联网使用。'
- en: 'For example, when configuring a local server, `https://mylocalserver`, as `PREMIRROR`,
    we can add the following code to a global configuration file, such as `build/conf/local.conf`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当配置本地服务器 `https://mylocalserver` 作为 `PREMIRROR` 时，我们可以在全局配置文件（例如 `build/conf/local.conf`）中添加以下代码：
- en: '![Figure 5.7 – An example of the PREMIRRORS configuration](img/Figure_5.07_B19361.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.7 – PREMIRRORS 配置示例](img/Figure_5.07_B19361.jpg)'
- en: Figure 5.7 – An example of the PREMIRRORS configuration
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7 – PREMIRRORS 配置示例
- en: The preceding code prepends the `PREMIRRORS` variable to change and instructs
    the build system to intercept any download requests. It redirects them to the
    `https://mylocalserver` source’s mirror.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将 `PREMIRRORS` 变量添加到前面，并指示构建系统拦截所有下载请求。它会将请求重定向到 `https://mylocalserver`
    源的镜像。
- en: This use of `PREMIRRORS` is so common that there is a class to help its configuration.
    To make it easier, we inherit the `own-mirror` class and then set the `SOURCE_MIRROR_URL`
    variable to `https://mylocalserver` in any global configuration file, such as
    `build/conf/local.conf`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `PREMIRRORS` 的方式非常常见，以至于有一个类可以帮助其配置。为了简化操作，我们继承 `own-mirror` 类，然后在任何全局配置文件中（例如
    `build/conf/local.conf`）设置 `SOURCE_MIRROR_URL` 变量为 `https://mylocalserver`。
- en: '![Figure 5.8 – How to configure own-mirror](img/Figure_5.08_B19361.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.8 – 如何配置 own-mirror](img/Figure_5.08_B19361.jpg)'
- en: Figure 5.8 – How to configure own-mirror
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8 – 如何配置 own-mirror
- en: 'If the desired component is unavailable in the source mirror, BitBake falls
    back to the `MIRRORS` variable. An example of the content of this variable is
    shown in the following figure. It shows some servers used in `mirrors.bbclass`,
    inherited by default in Poky:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所需的组件在源镜像中不可用，BitBake 会回退到 `MIRRORS` 变量。该变量内容的示例如下图所示。它显示了在 `mirrors.bbclass`
    中使用的一些服务器，默认情况下会继承该类：
- en: '![Figure 5.9 – An example of how to use the MIRRORS variable](img/Figure_5.09_B19361.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.9 – 使用 MIRRORS 变量的示例](img/Figure_5.09_B19361.jpg)'
- en: Figure 5.9 – An example of how to use the MIRRORS variable
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9 – 使用 MIRRORS 变量的示例
- en: Tip
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Let’s suppose the goal is to have a shareable download cache. In that case,
    it is advisable to enable the tarball generation for the SCM backends (for example,
    Git) in the download folder with `BB_GENERATE_MIRROR_TARBALLS = "1"` in `build/conf/local.conf`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 假设目标是拥有一个可共享的下载缓存。在这种情况下，建议在下载文件夹中启用 SCM 后端（例如 Git）的 tarball 生成，方法是在 `build/conf/local.conf`
    中设置 `BB_GENERATE_MIRROR_TARBALLS = "1"`。
- en: Disabling network access
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 禁用网络访问
- en: 'Sometimes, we need to ensure that we don’t connect to the internet during the
    build process. There are several valid reasons for this, such as the following:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们需要确保在构建过程中不连接到互联网。这样做有几个有效的理由，举例如下：
- en: '**Policy**: Our company does not allow the inclusion of external sources in
    a product without proper legal validation and review.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**政策**：我们的公司不允许在产品中包含未经合法验证和审查的外部源。'
- en: '**Network cost**: When we are on the road using mobile broadband, the cost
    of data may be too high because the data to download may be extensive.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络费用**：当我们在路上使用移动宽带时，数据费用可能过高，因为下载的数据量可能非常庞大。'
- en: '**Download and build decoupling**: This setup is typical in continuous integration
    environments, where a job is responsible for downloading all the required source
    code. In contrast, the build jobs have internet access disabled. The decoupling
    between downloading and building ensures that no source code is downloaded in
    duplication and that we have cached all the necessary source code.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**下载与构建解耦**：这种设置在持续集成环境中很常见，其中一个任务负责下载所有所需的源代码，而构建任务则禁用互联网访问。下载与构建的解耦确保不会重复下载源代码，并且我们已经缓存了所有必要的源代码。'
- en: '**Lack of network access**: Sometimes, we do not have access to a network.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏网络访问**：有时我们无法访问网络。'
- en: 'To disable the network connection, we need to add the following code in the
    `build/conf/local.conf` file:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 为了禁用网络连接，我们需要在 `build/conf/local.conf` 文件中添加以下代码：
- en: '![Figure 5.10 – How to disable network access during the build](img/Figure_5.10_B19361.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.10 – 如何在构建过程中禁用网络访问](img/Figure_5.10_B19361.jpg)'
- en: Figure 5.10 – How to disable network access during the build
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10 – 如何在构建过程中禁用网络访问
- en: Understanding BitBake’s tasks
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 BitBake 的任务
- en: BitBake uses execution units, which are, in essence, a set of clustered instructions
    that run in sequence. These units are known as **tasks**. During every recipe’s
    build, BitBake, schedules, executes, and checks many tasks provided by classes
    to form the framework we use to build a recipe. Therefore, it is essential to
    understand some of these, as we often use, extend, implement, or replace them
    ourselves when writing a recipe.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake 使用执行单元，实质上是一组按顺序执行的集群指令。这些单元被称为**任务**。在每个配方的构建过程中，BitBake 会调度、执行并检查由类提供的许多任务，从而形成我们用来构建配方的框架。因此，理解其中的一些任务非常重要，因为我们在编写配方时，经常会使用、扩展、实现或替换它们。
- en: 'When we run the following command, BitBake runs a set of scheduled tasks:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行以下命令时，BitBake 会运行一组已安排的任务：
- en: '![Figure 5.11 – How to run all tasks for a recipe](img/Figure_5.11_B19361.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.11 – 如何运行配方的所有任务](img/Figure_5.11_B19361.jpg)'
- en: Figure 5.11 – How to run all tasks for a recipe
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.11 – 如何运行配方的所有任务
- en: 'When we wish to run a specific task, we can use the following command:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望运行特定任务时，可以使用以下命令：
- en: '![Figure 5.12  – How to run a particular task for a recipe](img/Figure_5.12_B19361.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.12 – 如何运行特定任务](img/Figure_5.12_B19361.jpg)'
- en: Figure 5.12 – How to run a particular task for a recipe
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.12 – 如何运行特定任务
- en: 'To list the tasks defined for a recipe, we can use the following command:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出为配方定义的任务，我们可以使用以下命令：
- en: '![Figure 5.13  – How to list all tasks for a recipe](img/Figure_5.13_B19361.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.13 – 如何列出配方的所有任务](img/Figure_5.13_B19361.jpg)'
- en: Figure 5.13 – How to list all tasks for a recipe
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.13 – 如何列出配方的所有任务
- en: 'The output of `listtasks` for the `wget` recipe is as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`wget` 配方的 `listtasks` 输出如下：'
- en: '![Figure 5.14 – The list of tasks for the wget recipe](img/Figure_5.14_B19361.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.14 – wget 配方的任务列表](img/Figure_5.14_B19361.jpg)'
- en: Figure 5.14 – The list of tasks for the wget recipe
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.14 – wget 配方的任务列表
- en: 'We will briefly describe the most commonly used tasks here:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这里简要描述最常用的任务：
- en: '`do_fetch`: The first step when building a recipe is fetching the required
    source using the fetching backends feature, which we discussed previously in this
    chapter. It is essential to note that fetching a source or a file does not mean
    it is a remote source.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_fetch`：构建配方的第一步是使用前面本章中讨论的获取后端功能来获取所需的源代码。需要注意的是，获取源代码或文件并不意味着它是远程源。'
- en: '`do_unpack`: The subsequent natural task after the `do_fetch` task is `do_unpack`.
    This is responsible for unpacking source code or checking out the requested revision
    or branch in case the referenced source uses an SCM system.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_unpack`：在 `do_fetch` 任务之后的自然任务是 `do_unpack`。它负责解包源代码，或在引用的源代码使用 SCM 系统的情况下，检出请求的修订版本或分支。'
- en: '`do_patch`: Once the source code is properly unpacked, BitBake initiates adapting
    the source code. Every file fetched by `do_fetch`, with the `.patch` extension,
    is assumed to be a patch to be applied. This task applies the list of patches
    needed. The final modified source code will be used to build the package.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_patch`：一旦源代码被正确解包，BitBake 会启动源代码的适配过程。所有通过 `do_fetch` 获取的具有 `.patch` 扩展名的文件都被认为是需要应用的补丁。此任务应用所需的补丁列表。最终修改后的源代码将用于构建软件包。'
- en: '`do_configure`, `do_compile`, and `do_install`: The `do_configure`, `do_compile`,
    and `do_install` tasks are performed in this order. It is important to note that
    the environment variables defined in the tasks are different from one task to
    another. Poky provides a rich collection of predefined tasks in the classes, which
    we ought to use when possible – for example, when a recipe inherits the `autotools`
    class, it provides a known implementation of the `do_configure`, `do_compile`,
    and `do_install` tasks.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_configure`、`do_compile` 和 `do_install`：这些任务按照此顺序执行。需要注意的是，这些任务中定义的环境变量在不同任务之间是不同的。Poky
    提供了一个丰富的预定义任务集合，在类中，我们应该尽可能使用这些任务——例如，当一个配方继承了 `autotools` 类时，它提供了 `do_configure`、`do_compile`
    和 `do_install` 任务的已知实现。'
- en: '`do_package`: The `do_package` task splits the files installed by the recipe
    into logical components, such as debugging symbols, documentation, and libraries.
    We will cover packaging details in more depth in [*Chapter 7*](B19361_07.xhtml#_idTextAnchor097),
    *Assimilating* *Package Support*.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_package`：`do_package` 任务将配方安装的文件分割为逻辑组件，例如调试符号、文档和库。我们将在[**第 7 章**](B19361_07.xhtml#_idTextAnchor097)《吸收包支持》中更深入地介绍打包的细节。'
- en: Summary
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we learned how recipes depend on each other and how Poky deals
    with dependencies. We understood how a download is configured and how to optimize
    it. In addition, we got a better view of the tasks managed by BitBake to download
    all the required source code and use it to build and generate packages.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了配方如何相互依赖，以及Poky如何处理依赖关系。我们了解了如何配置下载以及如何优化它。此外，我们还更好地理解了BitBake如何管理任务，下载所有所需的源代码，并利用这些代码来构建和生成包。
- en: In the next chapter, we will see the contents of the build directory after complete
    image generation and learn how BitBake uses it in the baking process, including
    the contents of the temporary build directory and its generated files.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将查看在完成镜像生成后构建目录的内容，并了解BitBake如何在烘焙过程中使用这些内容，包括临时构建目录及其生成的文件。
