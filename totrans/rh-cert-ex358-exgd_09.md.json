["```\nUsername: emcleroy\nPassword: redhat\nAdmin username: root\nAdmin password: redhat\nNode1: rhel1.example.com 192.168.1.198\nNode2: rhel2.example.com 192.168.1.133\nNode3: rhel3.example.com 192.168.1.53   Ansible control node\n```", "```\nRhel1 DHCP IP: 192.168.1.81\nRhel2 DHCP IP: 192.168.1.65\nRhel1 Static IP: 192.168.1.198\nRhel2 Static IP: 192.168.1.133\nThe subnet is 192.168.1.0/24\n```", "```\n[emcleroy@rhel1 ~]$ sudo systemctl restart NetworkManager\n```", "```\nRhel1 IPv6: fc65:8956:7254:6321::a7/64\nRhel2 IPv6: fc65:8956:7254:6321::a8/64\nSubnet: fc65:8956:7254:6321::/64\n```", "```\n[emcleroy@rhel1 ~]$ sudo systemctl restart NetworkManager\n```", "```\nServices: http and https\n```", "```\n- name: firewalld configuration\n  hosts: all\n  become: true\n  become_method: sudo\n  tasks:\n    - name: Enable Firewalld services\n      firewalld:\n        permanent: yes\n        immediate: yes\n        service: \"{{ item }}\"\n        state: enabled\n      loop:\n        - http\n        - https\n    - name: Reload firewall\n      command:\n        cmd: firewall-cmd --reload\n    - name: Show open services and ports\n      command:\n        cmd: firewall-cmd --list-all\n```", "```\n[emcleroy@rhel1 ~]$ sudo firewall-cmd --permanent --add-rich-rule='rule family=ipv4 source address=192.168.1.0/24 service name=http accept'\nsuccess\n[emcleroy@rhel1 ~]$ sudo firewall-cmd --permanent --add-rich-rule='rule family=ipv4 source address=172.16.1.0/24 service name=http reject'\nsuccess\n[emcleroy@rhel1 ~]$ sudo firewall-cmd --list-rich-rules\nrule family=\"ipv4\" source address=\"192.168.1.0/24\" service name=\"http\" accept\nrule family=\"ipv4\" source address=\"172.16.1.0/24\" service name=\"http\" reject\n[emcleroy@rhel1 ~]$ sudo firewall-cmd --reload\nsuccess\n```", "```\n- name: Firewalld Rich Rule\n  hosts: all\n  become: true\n  become_method: sudo\n  tasks:\n    - name: Set rich rules up on firewall\n      firewalld:\n        permanent: yes\n        immediate: yes\n        rich_rule: \"{{ item }}\"\n        state: enabled\n      loop:\n       - 'rule family=ipv4 source address=192.168.1.0/24 service name=\"http\"  accept'\n       - 'rule family=ipv4 source address=172.16.1.0/24 service name=\"http\" reject'\n    - name: Show rich rules\n      command:\n        cmd: firewall-cmd --list-rich-rules\n    - name: Reload firewall\n      command:\n        cmd: firewall-cmd --reload\n```", "```\nFolder: /srv/test\nFile: /srv/test/text.txt\nFile body: Testing SELinux contexts.\n```", "```\n[emcleroy@rhel1 ~]$ sudo mkdir /srv/test\n[emcleroy@rhel1 ~]$ sudo vi /srv/test/text.txt\n[emcleroy@rhel1 ~]$ restorecon -Rv /srv/test\n[emcleroy@rhel1 ~]$ ls -lZ /srv/test\ntotal 4\n-rw-r--r--. 1 root root unconfined_u:object_r:var_t:s0 33 Oct  8 09:16 text.txt\n```", "```\n- name: SELinux training\n  hosts: all\n  become: true\n  become_method: sudo\n  tasks:\n    - name: Create directory\n      file:\n        path: /srv/test\n        state: directory\n        mode: '0755'\n    - name: Create a file in the directory\n      copy:\n        dest: \"/srv/test/text.txt\"\n        content: |\n          Thank you for reading my book!!!\n    - name: Restore any SELinux issues if they exist\n      command:\n        cmd: restorecon -Rv /srv/test\n    - name: View attributes\n      command:\n        cmd: ls -lZ /srv/test\n```", "```\n[emcleroy@rhel1 ~]$ sudo dnf install @postgresql\n[emcleroy@rhel1 ~]$ sudo systemctl enable postgresql\n[emcleroy@rhel1 ~]$ sudo postgresql-setup --initdb\n * Initializing database in '/var/lib/pgsql/data'\n * Initialized, logs are in /var/lib/pgsql/initdb_postgresql.log\n[emcleroy@rhel1 ~]$ sudo systemctl start postgresql\n```", "```\nsudo dnf remove @postgresql\n```", "```\n- name: Install package, enable and start it.\n  hosts: rhel1.example.com\n  become: true\n  become_method: sudo\n  tasks:\n    - name: Install postgresql\n      command:\n        cmd: \"dnf install @postgresql -y\"\n    - name: Initialize the database\n      command:\n        cmd: postgresql-setup --initdb\n      ignore_errors: true\n    - name: Enable and start postgresql service\n      service:\n        name: postgresql\n        state: started\n        enabled: true\n    - name: Check to ensure service is started\n      command:\n        cmd: systemctl status postgresql\n```", "```\nRhel1 IPv4: 192.168.1.225\nRhel2 IPv4: 192.168.1.226\n```", "```\n[emcleroy@rhel1 ~]$ sudo nmcli con add type team con-name team1 ifname team1 team.runner roundrobin\nConnection 'team1' (58770e3c-89bf-4a87-9b26-e9ad581ef978) successfully added.\n[emcleroy@rhel1 ~]$ sudo nmcli con add type ethernet slave-type team con-name team1-enp0s8 ifname enp0s8 master team1\nConnection 'team1-enp0s8' (3886d9f8-2db6-4269-9d9b-2973b24f74ce) successfully added.\n[emcleroy@rhel1 ~]$ sudo nmcli con add type ethernet slave-type team con-name team1-enp0s9 ifname enp0s9 master team1\nConnection 'team1-enp0s9' (d845c4e1-b354-4c58-904d-f9cf0c3d1e59) successfully added.\n[emcleroy@rhel1 ~]$ sudo nmcli con mod team1 ipv4.addresses 192.168.1.225/24\n[emcleroy@rhel1 ~]$ sudo nmcli con mod team1 ipv4.method manual\n[emcleroy@rhel1 ~]$ sudo ifdown team1\nConnection 'team1' successfully deactivated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/2)\n[emcleroy@rhel1 ~]$ sudo ifup team1\nConnection successfully activated (master waiting for slaves) (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/5)\n[emcleroy@rhel1 ~]$ ifconfig\nteam1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 192.168.1.225  netmask 255.255.255.0  broadcast 192.168.1.255\n        inet6 fe80::4036:4e32:d1af:fd0a  prefixlen 64  scopeid 0x20<link>\n        ether 08:00:27:ad:b3:d8  txqueuelen 1000  (Ethernet)\n        RX packets 159  bytes 8184 (7.9 KiB)\n        RX errors 0  dropped 30  overruns 0  frame 0\n        TX packets 8  bytes 688 (688.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n```", "```\n- name: Create a network team\n  hosts: rhel1.example.com, rhel2.example.com\n  become: true\n  become_method: sudo\n  tasks:\n    - name: Create network team\n      command:\n        cmd: nmcli con add type team con-name team1 ifname team1 team.runner roundrobin\n    - name: Add slave interfaces\n      command:\n        cmd: 'nmcli con add type ethernet slave-type team con-name team1-\"{{ item }}\" ifname \"{{ item }}\" master team1'\n      loop:\n        - enp0s8\n        - enp0s9\n    - name: Add Static IP to team1\n      command:\n        cmd: nmcli con mod team1 ipv4.addresses \"{{ team_ip }}\"\n    - name: Add interface method\n      command:\n        cmd: nmcli con mod team1 ipv4.method manual\n```", "```\nrhel1.example.com – 192.168.1.198\nrhel2.example.com – 192.168.1.133\nrhel3.example.com – 192.168.1.53\n```", "```\n[emcleroy@rhel1 ~]$ sudo dnf install bind -y\n```", "```\n[emcleroy@rhel1 ~]$ sudo firewall-cmd --permanent --add-service=dns\nsuccess\n[emcleroy@rhel1 ~]$ sudo firewall-cmd --reload\nSuccess\n```", "```\n[root@rhel1 named]# systemctl enable named\nCreated symlink /etc/systemd/system/multi-user.target.wants/named.service → /usr/lib/systemd/system/named.service.\n[root@rhel1 named]# systemctl start named\n```", "```\n[root@rhel1 named]# nslookup rhel2.example.com 192.168.1.198\nServer:          192.168.1.198\nAddress:  192.168.1.198#53\nName: rhel2.example.com\nAddress: 192.168.1.133\n```", "```\n---\n- name: Install and configure DNS\n  hosts: rhel1.example.com\n  become: true\n  become_method: sudo\n  tasks:\n    - name: Install DNS server\n      package:\n        name: bind\n        state: latest\n    - name: Move bind configuration to named.conf\n      template:\n        src: \"{{ playbook_dir }}/named.conf.j2\"\n        dest: \"/etc/named.conf\"\n    - name: Move example.com.zone and 192.168.1.zone to /var/named\n      template:\n        src: \"{{ playbook_dir}}/{{ item }}.j2\"\n        dest: \"/var/named/{{ item }}\"\n      loop:\n        - 'example.com.zone'\n        - '192.168.1.zone'\n    - name: Set firewall rules\n      firewalld:\n        service: dns\n        permanent: true\n        state: enabled\n    - name: Reload firewall\n      command:\n        cmd: firewall-cmd --reload\n    - name: Start and enable the DNS service\n      service:\n        name: named\n        state: restarted\n        enabled: true\n```", "```\n//\n// named.conf\n//\n// Provided by Red Hat bind package to configure the ISC BIND named(8) DNS\n// server as a caching only nameserver (as a localhost DNS resolver only).\n//\n// See /usr/share/doc/bind*/sample/ for example named configuration files.\n//\noptions {\n     listen-on port 53 { 127.0.0.1; 192.168.1.198; };\n     listen-on-v6 port 53 { ::1; };\n     directory  \"/var/named\";\n     dump-file  \"/var/named/data/cache_dump.db\";\n     statistics-file \"/var/named/data/named_stats.txt\";\n     memstatistics-file \"/var/named/data/named_mem_stats.txt\";\n     secroots-file   \"/var/named/data/named.secroots\";\n     recursing-file  \"/var/named/data/named.recursing\";\n     allow-query     { localhost; 192.168.1.198; };\n     recursion no;\n     dnssec-enable yes;\n     dnssec-validation yes;\n     managed-keys-directory \"/var/named/dynamic\";\n     pid-file \"/run/named/named.pid\";\n     session-keyfile \"/run/named/session.key\";\n     /* https://fedoraproject.org/wiki/Changes/CryptoPolicy */\n     include \"/etc/crypto-policies/back-ends/bind.config\";\n};\nlogging {\n        channel default_debug {\n                file \"data/named.run\";\n                severity dynamic;\n        };\n};\nzone \"example.com\" IN {\n        type master;\n        file \"example.com.zone\";\n        forwarders {};\n};\nzone \"192.168.1.in-addr.arpa\" IN {\n        type master;\n        file \"192.168.1.zone\";\n        forwarders {};\n};\nzone \".\" IN {\n     type hint;\n     file \"named.ca\";\n};\ninclude \"/etc/named.rfc1912.zones\";\ninclude \"/etc/named.root.key\";\n```", "```\n$TTL 3H\n@       IN SOA rhel1.example.com. admin.example.com (\n2; serial\n65; refresh\n75; retry\n8000; expire\n60) ; minimum\n        NS      rhel1\n        A       127.0.0.1\n        AAAA    ::1\nrhel1        IN  A 192.168.1.198\nrhel2        IN  A 192.168.1.133\nrhel3        IN  A 192.168.1.53\n```", "```\n$TTL 3H\n@       IN SOA rhel1.example.com. admin.example.com. (\n                                        2       ; serial\n                                        8000      ; refresh\n                                        9000      ; retry\n                                        10000      ; expire\n                                        5000)    ; minimum\n        NS      rhel1.example.com.\n198        IN  PTR  rhel1.example.com.\n133        IN  PTR  rhel2.example.com.\n53         IN  PTR  rhel3.example.com.\n```", "```\nrhel4.example.com MAC Address: 08:00:27:AB:81:10 IP: 192.168.1.120\nrhel5.example.com MAC Address: 08:00:27:AB:81:11 IP: 192.168.1.121\n```", "```\n[emcleroy@rhel1 ~]$ sudo dnf install dhcp-server -y\n```", "```\n[emcleroy@rhel1 ~]$ sudo firewall-cmd --permanent --add-service=dhcp\n[emcleroy@rhel1 ~]$ firewall-cmd –reload\n[emcleroy@rhel1 ~]$ sudo systemctl start dhcpd\n[emcleroy@rhel1 ~]$ sudo systemctl enable dhcpd\nCreated symlink /etc/systemd/system/multi-user.target.wants/dhcpd.service → /usr/lib/systemd/system/dhcpd.service.\n```", "```\n---\n- name: Install and configure DHCP\n  hosts: rhel1.example.com\n  become: true\n  become_method: sudo\n  tasks:\n    - name: Install dhcp server\n      package:\n        name: dhcp-server\n        state: latest\n    - name: Copy the dhcpd.conf file to the server\n      template:\n        src: \"{{ playbook_dir }}/dhcpd.conf.j2\"\n        dest: /etc/dhcp/dhcpd.conf\n    - name: Open firewall rules\n      firewalld:\n        service: dhcp\n        permanent: true\n        state: enabled\n    - name: Reload firewall rules\n      command:\n        cmd: firewall-cmd --reload\n    - name: Start and enable dhcp server\n      service:\n        name: dhcpd\n        enabled: true\n        state: restarted\n```", "```\n#\n# DHCP Server Configuration file.\n#   see /usr/share/doc/dhcp-server/dhcpd.conf.example\n#   see dhcpd.conf(5) man page\n#\nauthoritative;\nsubnet 192.168.1.0 netmask 255.255.255.0 {\n  range 192.168.1.100 192.168.1.220;\n  option broadcast-address 192.168.1.255;\n  option domain-name-servers 192.168.1.198;\n}\nhost rhel4 {\n  hardware ethernet 08:00:27:AB:81:10;\n  fixed-address 192.168.1.120;\n}\nhost rhel5 {\n  hardware ethernet 08:00:27:AB:81:11;\n  fixed-address 192.168.1.121;\n}\n```", "```\n[emcleroy@rhel1 ~]$ sudo dnf install cups -y\n```", "```\n[emcleroy@rhel1 ~]$ sudo systemctl enable cups\n[emcleroy@rhel1 ~]$ sudo systemctl start cups\n```", "```\n[emcleroy@rhel1 ~]$ sudo firewall-cmd --permanent --add-service=mdns\nsuccess\n[emcleroy@rhel1 ~]$ sudo firewall-cmd --reload\nsuccess\n```", "```\n[emcleroy@rhel1 ~]$ ippfind -T 5\nipp://BRW9C305BC2B044.local:631/ipp/print\nipp://BRW9C305BC2B044.local:631/ipp/print\n```", "```\n[emcleroy@rhel1 ~]$ lpadmin -p myqueue -v ipp://BRW9C305BC2B044.local:631/ipp/print -m everywhere -E\n```", "```\n[emcleroy@rhel1 ~]$ lpadmin -d myqueue\n```", "```\n---\n- name: Install cups, print queue, and printer\n  hosts: rhel1.example.com\n  become: true\n  become_method: sudo\n  tasks:\n    - name: Install cups\n      package:\n        name: cups\n        state: latest\n    - name: Enable firewall rules\n      firewalld:\n        permanent: true\n        state: enabled\n        service: mdns\n    - name: Reload Firewall\n      command:\n        cmd: firewall-cmd --reload\n    - name: Start and enable cups\n      service:\n        name: cups\n        state: started\n        enabled: true\n    - name: Create print queue\n      command:\n        cmd: lpadmin -p myqueue -v ipp://BRW9C305BC2B044.local:631/ipp/print -m everywhere -E\n    - name: Set default print destination\n      command:\n        cmd: lpadmin -d myqueue\n```", "```\nmyorigin: example.com\nrelayhost: rhel2.example.com\n```", "```\n[root@rhel1 ~]# sudo dnf install postfix -y\n[root@rhel1 ~]# sudo postconf -e \"inet_interfaces = loopback-only\"\n[root@rhel1 ~]# sudo postconf -e \"myorigin = example.com\"\n[root@rhel1 ~]# sudo postconf -e \"inet_protocols = ipv4\"\n[root@rhel1 ~]# sudo postconf -e \"mydestination =\"\n[root@rhel1 ~]# sudo postconf -e \"mynetworks = 127.0.0.0/8\"\n[root@rhel1 ~]# sudo postconf -e \"local_transport = error: no local delivery\"\n[root@rhel1 ~]# sudo postconf -e \"relayhost = [rhel2.example.com]\"\n[root@rhel1 ~]# sudo systemctl start postfix\n[root@rhel1 ~]# sudo systemctl enable postfix\nCreated symlink /etc/systemd/system/multi-user.target.wants/postfix.service → /usr/lib/systemd/system/postfix.service.\n```", "```\n ---\n- name: Configure Null Client Email Service\n  become: true\n  hosts: rhel1.example.com\n  vars:\n    postfix_conf:\n      relayhost: \"[??.example.com]\"\n      inet_interfaces: \"loopback-only\"\n      mynetworks: \"127.0.0.0/8\"\n      myorigin: \"example.com\"\n      mydestination: \"\"\n  roles:\n    - linux-system-roles.postfix\n```", "```\n[emcleroy@rhel1 ~]$ sudo dnf install @mariadb -y\n[root@rhel1 ~]# systemctl start mariadb\n[root@rhel1 ~]# systemctl enable mariadb\nCreated symlink /etc/systemd/system/mysql.service → /usr/lib/systemd/system/mariadb.service.\nCreated symlink /etc/systemd/system/mysqld.service → /usr/lib/systemd/system/mariadb.service.\nCreated symlink /etc/systemd/system/multi-user.target.wants/mariadb.service → /usr/lib/systemd/system/mariadb.service.\n[root@rhel1 ~]# mysql_secure_installation\n```", "```\n[root@rhel1 ~]# mysql -u root -p\nMariaDB [(none)]> CREATE DATABASE available_stock;\nQuery OK, 1 row affected (0.000 sec)\nMariaDB [(none)]> USE  available_stock;\nDatabase changed\nMariaDB [available_stock]> CREATE USER fred@localhost identified by 'redhat';\nQuery OK, 0 rows affected (0.000 sec)\nMariaDB [available_stock]> GRANT INSERT, UPDATE, DELETE, SELECT on available_stock.* to fred@localhost;\nQuery OK, 0 rows affected (0.000 sec)\n```", "```\n[root@rhel1 ~]# mysqldump available_stock -u root -p\n> test.dump\nFinally, to restore the dump we are going to simply change the direction of the symbol:\n[root@rhel1 ~]# mysqldump -u root -p available_stock\n< test.dump\n```", "```\n---\n- name: MariaDB install and configuration\n  hosts: rhel2.example.com\n  become: true\n  become_method: sudo\n  tasks:\n    - name: Install MariaDB server\n      package:\n        name: '@mariadb:10.3/server'\n        state: present\n    - name: Install MariaDB client\n      package:\n        name: mariadb\n        state: latest\n    - name: Start and enable MariaDB\n      service:\n        name: mariadb\n        state: started\n        enabled: true\n    - name: Open firewall rules for MariaDB\n      firewalld:\n        service: mysql\n        permanent: true\n        state: enabled\n    - name: Reload firewall\n      command:\n        cmd: firewall-cmd --reload\n    - name: Set root password for MariaDB\n      mysql_user:\n        name: root\n        host_all: true\n        update_password: always\n        password: redhat\n      no_log: true\n      ignore_errors: true\n```", "```\n[emcleroy@rhel1 ~]$ sudo dnf install httpd -y\n```", "```\n[emcleroy@rhel1 html]$ sudo systemctl enable httpd\n[emcleroy@rhel1 html]$ sudo systemctl start httpd\n```", "```\n[emcleroy@rhel1 html]$ sudo firewall-cmd --permanent --add-service=http\nsuccess\n[emcleroy@rhel1 html]$ sudo firewall-cmd --reload\nSuccess\n```", "```\n---\n- name: Install and configure apache\n  hosts: rhel1.example.com\n  become: true\n  become_method: sudo\n  tasks:\n    - name: Install apache httpd\n      package:\n        name: httpd\n        state: latest\n    - name: Ensure default directory exists\n      file:\n        path: /var/www/html\n        state: directory\n        recurse: yes\n    - name: Copy index template\n      template:\n        src: \"{{ playbook_dir }}/index.html.j2\"\n        dest: /var/www/html/index.html\n    - name: Restore SELinux contexts\n      sefcontext:\n        target: /var/www/html\n        setype: httpd_sys_content_t\n        state: present\n    - name: Open firewall rules\n      command:\n        cmd: firewall-cmd –permanent –add-service=http\n    - name: Reload firewall\n      command:\n        cmd: firewall-cmd --reload\n    - name: Start and enable apache httpd service\n      service:\n        name: httpd\n        state: restarted\n        enabled: true\n```", "```\nansible-playbook -i inventory apache_server.yml -u emcleroy -k --ask-become -v\n```", "```\n[emcleroy@rhel1 ~]$ sudo dnf install nfs-utils\n```", "```\n[emcleroy@rhel1 ~]$ sudo systemctl enable nfs-server\nCreated symlink /etc/systemd/system/multi-user.target.wants/nfs-server.service → /usr/lib/systemd/system/nfs-server.service.\n[emcleroy@rhel1 ~]$ sudo systemctl start nfs-server\n[emcleroy@rhel1 ~]$ sudo systemctl status nfs-server\n● nfs-server.service - NFS server and services\n   Loaded: loaded (/usr/lib/systemd/system/nfs-server.service; enabled; vendor >\n   Active: active (exited) since Thu 2022-10-27 12:33:28 EDT; 10s ago\n  Process: 71257 ExecStart=/bin/sh -c if systemctl -q is-active gssproxy; then >\n  Process: 71245 ExecStart=/usr/sbin/rpc.nfsd (code=exited, status=0/SUCCESS)\n  Process: 71244 ExecStartPre=/usr/sbin/exportfs -r (code=exited, status=0/SUCC>\n Main PID: 71257 (code=exited, status=0/SUCCESS)\nOct 27 12:33:28 rhel1.example.com systemd[1]: Starting NFS server and services.>\nOct 27 12:33:28 rhel1.example.com systemd[1]: Started NFS server and services.\nlines 1-10/10 (END)\n```", "```\n[emcleroy@rhel1 ~]$ sudo mkdir /test\n```", "```\n[emcleroy@rhel1 /]$ sudo exportfs -rav\nexporting 192.168.1.0/24:/test\n```", "```\n[emcleroy@rhel1 /]$ sudo firewall-cmd --permanent --add-service=nfs\nsuccess\n[emcleroy@rhel1 /]$ sudo firewall-cmd --reload\nsuccess\n```", "```\n---\n- name: Configure nfs and share folder deployment\n  hosts: rhel1.example.com\n  become: true\n  become_method: sudo\n  tasks:\n    - name: Install nfs-utils\n      package:\n        name: nfs-utils\n        state: present\n    - name: Start and enable nfs-server\n      service:\n        name: nfs-server\n        state: started\n        enabled: true\n    - name: Firewall rules for nfs-server\n      firewalld:\n        service: nfs\n        permanent: true\n        state: enabled\n    - name: Reload firewall\n      command:\n        cmd: firewall-cmd --reload\n    - name: Create directory\n      file:\n        path: /test\n        state: directory\n        mode: '0755'\n    - name: Add directory to exports list\n      lineinfile:\n        path: /etc/exports\n        state: present\n        line: '/test 192.168.1.0/24(ro)'\n    - name: Export nfs shares\n      command:\n        cmd: exportfs -rav\n```", "```\n[emcleroy@rhel2 ~]$ sudo firewall-cmd --permanent --add-service=nfs\nsuccess\n[emcleroy@rhel2 ~]$ sudo firewall-cmd --reload\nsuccess\n```", "```\n[emcleroy@rhel2 ~]$ sudo mkdir /mnt/test\n```", "```\n[emcleroy@rhel2 ~]$ sudo mount -a -v\n/                        : ignored\n/boot                    : already mounted\nswap                     : ignored\n/mnt/test                : mounted\n```", "```\n[emcleroy@rhel1 /]$ sudo touch /test/test.txt\n```", "```\n[emcleroy@rhel2 ~]$ cd /mnt/test\n[emcleroy@rhel2 test]$ ls -l\ntotal 0\n-rw-r--r--. 1 root root 0 Oct 27 13:05 test.txt\n[emcleroy@rhel2 test]$\n```", "```\n---\n- name: Mount nfs share\n  hosts: rhel2.example.com\n  become: true\n  become_method: sudo\n  tasks:\n    - name: Create mount directory\n      file:\n        path: /mnt/test\n        state: directory\n        mode: '0755'\n    - name: Add fstab mount information\n      lineinfile:\n        path: /etc/fstab\n        state: present\n        line: '192.168.1.198:/test /mnt/test nfs defaults 0 0'\n    - name: Remount fstab shares\n      command:\n        cmd: mount -a -v\n```"]