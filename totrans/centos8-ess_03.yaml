- en: 4\. Dual Booting CentOS 8 with Windows
  prefs: []
  type: TYPE_NORMAL
- en: CentOS 8, just like most Linux distributions, will happily co-exist on a hard
    disk drive with just about any version of Windows up to and including Windows
    10\. This is a concept known as dual-booting. Essentially, when you power up the
    system, you will be presented with a menu providing the option to boot either
    your CentOS 8 installation or Windows. Obviously you can only run one operating
    system at a time, but it is worth noting that the files on the Windows partition
    of your disk drive will be available to you from CentOS 8 regardless of whether
    your Windows partition was formatted using NTFS, FAT16 or FAT32.
  prefs: []
  type: TYPE_NORMAL
- en: This installation method involves shrinking the size of the existing Windows
    partitions and then installing CentOS 8 into the reclaimed space. This chapter
    will assume that CentOS 8 is being installed on a system currently running Windows
    10.
  prefs: []
  type: TYPE_NORMAL
- en: 4.1 Partition Resizing
  prefs: []
  type: TYPE_NORMAL
- en: In order to accommodate CentOS on a disk drive that already contains a Windows
    installation, the first step involves shrinking the Windows partition to make
    some room. The recommended course of action is to use the Windows Disk Management
    interface to reduce the size of the partition before attempting to install CentOS
    8\.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access Disk Management on Windows 10, right-click on the Start menu and
    select Disk Management from the resulting menu as highlighted in [Figure 4-1](../Text/Installation_Dual_Boot.xhtml#_idTextAnchor048):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/rhel_8_win_10_disk_management_start.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-1
  prefs: []
  type: TYPE_NORMAL
- en: 'Once loaded, the Disk Management tool will display a graphical representation
    of the disk drives detected on the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/rhel_8_win_10_disk_management_main.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-2
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the partition you wish to reduce in size and select Shrink Volume...
    from the popup menu. The tool will calculate the maximum amount by which the volume
    size can be reduced without data loss (a process that can take several minutes
    depending on the overall size of the partition). Once this analysis is complete,
    a dialog similar to the one in [Figure 4-3](../Text/Installation_Dual_Boot.xhtml#_idTextAnchor049)
    below will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/rhel_8_win_10_disk_management_shrink.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-3
  prefs: []
  type: TYPE_NORMAL
- en: Specify a value in the Enter amount of space to shrink in MB field and click
    on the Shrink button to proceed. Once the resizing operation is complete, reboot
    using the CentOS 8 installation media (as outlined in [“Installing CentOS 8 on
    a Clean Disk Drive”](../Text/Installation_Clean_Disk.xhtml#_idTextAnchor017))
    and proceed with the installation making use of the new free space.
  prefs: []
  type: TYPE_NORMAL
- en: 4.2 Editing the CentOS 8 Boot Menu
  prefs: []
  type: TYPE_NORMAL
- en: 'Once installation of CentOS onto the disk is complete and the system has restarted,
    the standard CentOS boot menu will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/centos_8_boot_screen.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-4
  prefs: []
  type: TYPE_NORMAL
- en: At this point, the boot menu only provides the option to boot the CentOS 8 system.
    Clearly an option also needs to be added so that the Windows system is still accessible.
    These steps will need to be taken from within the CentOS 8 system, so start the
    system and log in as root.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to identify the Windows boot partition on the disk drive
    using the fdisk command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: fdisk -l
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: Device Boot Start End Sectors Size Id Type
  prefs: []
  type: TYPE_NORMAL
- en: /dev/sda1 * 2048 1126399 1124352 549M 7 HPFS/NTFS/exFAT
  prefs: []
  type: TYPE_NORMAL
- en: /dev/sda2 1126400 53655551 52529152 25G 7 HPFS/NTFS/exFAT
  prefs: []
  type: TYPE_NORMAL
- en: /dev/sda3 53655552 55752703 2097152 1G 83 Linux
  prefs: []
  type: TYPE_NORMAL
- en: /dev/sda4 55752704 104857599 49104896 23.4G 5 Extended
  prefs: []
  type: TYPE_NORMAL
- en: /dev/sda5 55754752 104857599 49102848 23.4G 8e Linux LVM
  prefs: []
  type: TYPE_NORMAL
- en: In the above output /dev/sda3 through to /dev/sda5 are clearly the CentOS 8
    partitions. The smaller /dev/sda1 partition is the Windows system partition, leaving
    /dev/sda2 as the Windows boot partition.
  prefs: []
  type: TYPE_NORMAL
- en: The CentOS 8 boot system works using partition indexes where the first partition
    is partition 0, the second is partition 1 and so on. As such, the Windows boot
    partition from the point of view of the boot menu is located on hard disk 0 at
    partition index location 1 and is defined in the boot configuration as “hd0,1”.
  prefs: []
  type: TYPE_NORMAL
- en: 'The boot menu configuration settings are stored in the /boot/grub2/grub.cfg
    file which is generated using the grub2-mkconfig tool based on the content of
    the configuration files located in the /etc/grub.d directory. To add the Windows
    boot option to the configuration, edit the /etc/grub.d/40_custom file which should
    read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '#!/bin/sh'
  prefs: []
  type: TYPE_NORMAL
- en: exec tail -n +3 $0
  prefs: []
  type: TYPE_NORMAL
- en: This file provides an easy way to add custom menu entries. Simply type the
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: menu entries you want to add after this comment. Be careful not to change
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: the ‘exec tail’ line above.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Edit the file to add the following entry to the end of the 40_custom file:'
  prefs: []
  type: TYPE_NORMAL
- en: menuentry "Windows 10" {
  prefs: []
  type: TYPE_NORMAL
- en: set root=(hd0,1)
  prefs: []
  type: TYPE_NORMAL
- en: chainloader +1
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the file and generate the boot menu as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: grub2-mkconfig --output=/boot/grub2/grub.cfg
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Generating grub configuration file ...
  prefs: []
  type: TYPE_NORMAL
- en: done
  prefs: []
  type: TYPE_NORMAL
- en: 'On the next reboot, Windows will now be included as a boot option as shown
    in [Figure 4-5](../Text/Installation_Dual_Boot.xhtml#_idTextAnchor051):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/centos_8_boot_screen_with_win10.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-5
  prefs: []
  type: TYPE_NORMAL
- en: 4.3 Changing the Default Boot Option
  prefs: []
  type: TYPE_NORMAL
- en: When the system starts, the boot options screen will appear and wait 5 seconds
    for the user to make an operating system choice. If no selection has been made
    before the timeout elapses, the default operating system will be started. On a
    newly configured system, the default operating system will be the standard (non-rescue)
    CentOS 8 image. This default can, however, be changed from within CentOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'A range of boot configuration options (including the 5 second timeout and the
    boot RHGB settings outlined in [“Installing CentOS 8 on a Clean Disk Drive”](../Text/Installation_Clean_Disk.xhtml#_idTextAnchor017))
    are declared in the /etc/default/grub file which reads as follows on a new installation:'
  prefs: []
  type: TYPE_NORMAL
- en: GRUB_TIMEOUT=5
  prefs: []
  type: TYPE_NORMAL
- en: GRUB_DISTRIBUTOR=”$(sed ‘s, release .*$,,g’ /etc/system-release)”
  prefs: []
  type: TYPE_NORMAL
- en: GRUB_DEFAULT=saved
  prefs: []
  type: TYPE_NORMAL
- en: GRUB_DISABLE_SUBMENU=true
  prefs: []
  type: TYPE_NORMAL
- en: GRUB_TERMINAL_OUTPUT=”console”
  prefs: []
  type: TYPE_NORMAL
- en: GRUB_CMDLINE_LINUX=”crashkernel=auto resume=/dev/mapper/cl-swap rd.lvm.lv=cl/root
    rd.lvm.lv=cl/swap rhgb quiet”
  prefs: []
  type: TYPE_NORMAL
- en: GRUB_DISABLE_RECOVERY=”true”
  prefs: []
  type: TYPE_NORMAL
- en: GRUB_ENABLE_BLSCFG=true
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step in changing the default boot system is to declare the GRUB_SAVEDEFAULT
    setting within this file:'
  prefs: []
  type: TYPE_NORMAL
- en: GRUB_TIMEOUT=5
  prefs: []
  type: TYPE_NORMAL
- en: GRUB_DISTRIBUTOR="$(sed 's, release .*$,,g' /etc/system-release)"
  prefs: []
  type: TYPE_NORMAL
- en: GRUB_DEFAULT=saved
  prefs: []
  type: TYPE_NORMAL
- en: GRUB_SAVEDEFAULT=true
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: 'This setting allows a new default value to be saved within the boot configuration.
    Next, run the grub2-set-default command to change the default setting using a
    numbering system that counts the first option as 0\. For the boot options shown
    in [Figure 4-5](../Text/Installation_Dual_Boot.xhtml#_idTextAnchor051) above,
    for example, the first CentOS entry is position 0 while the Windows 10 option
    is position 2\. The command to make Windows 10 the default boot option, therefore,
    would read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: grub2-set-default 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Check that the new setting has taken effect by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: grub2-editenv list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: saved_entry=2
  prefs: []
  type: TYPE_NORMAL
- en: kernelopts=root=/dev/mapper/cl-root ro crashkernel=auto resume=/dev/mapper/cl-swap
    rd.lvm.lv=cl/root rd.lvm.lv=cl/swap rhgb quiet
  prefs: []
  type: TYPE_NORMAL
- en: boot_success=0
  prefs: []
  type: TYPE_NORMAL
- en: boot_indeterminate=0
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the saved_entry value is now set to 2\. After changing the default,
    regenerate the boot configuration file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: grub2-mkconfig --output=/boot/grub2/grub.cfg
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reboot the system and verify that the boot menu defaults to the Windows 10 option
    and that Windows loads after the timeout expires.
  prefs: []
  type: TYPE_NORMAL
- en: 4.4 Accessing the Windows Partition from CentOS 8
  prefs: []
  type: TYPE_NORMAL
- en: 'When running CentOS in a dual boot configuration it is still possible to access
    files located on the Windows partition. This can be achieved by manually mounting
    the partition from the command-line. Before doing so, however, some additional
    packages need to be installed on the system. First the fuse kernel module needs
    to be downloaded and installed:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf install fuse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: modprobe fuse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, the Fuse NTFS driver needs to be installed. Unfortunately, this package
    is not included in the standard CentOS 8 repositories so the Extra Packages for
    Enterprise Linux (EPEL) repository needs to be added to the system as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf install wget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: rpm -ivh epel-release-latest-8.noarch.rpm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the EPEL repository added, the driver can now be installed:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf install fuse-ntfs-3g
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the requisite packages are installed, the next step is to create a directory
    to use as the mount point for our Windows partition. In this example we will create
    a directory named /mnt/windows:'
  prefs: []
  type: TYPE_NORMAL
- en: mkdir /mnt/windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to identify the device name that has been assigned to the Windows
    partition, use the fdisk command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: fdisk -l
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: Device Boot Start End Blocks Id System
  prefs: []
  type: TYPE_NORMAL
- en: /dev/sda1 * 1 13 102400 7 HPFS/NTFS
  prefs: []
  type: TYPE_NORMAL
- en: /dev/sda2 13 1400 11141120 7 HPFS/NTFS
  prefs: []
  type: TYPE_NORMAL
- en: /dev/sda3 1400 1464 512000 83 Linux
  prefs: []
  type: TYPE_NORMAL
- en: /dev/sda4 1464 2611 9214976 5 Extended
  prefs: []
  type: TYPE_NORMAL
- en: /dev/sda5 1464 2611 9213952 8e Linux LVM
  prefs: []
  type: TYPE_NORMAL
- en: 'In the above output, the main Windows partition containing the files we need
    access to is represented by /dev/sda2\. Next, we need to run the mount command
    (assuming the Windows partition is /dev/sda2 and NTFS format) as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: mount /dev/sda2 /mnt/windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Check that the mount was successful by listing the contents of the top level
    directory of the mount point:'
  prefs: []
  type: TYPE_NORMAL
- en: ls /mnt/windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ‘$Recycle.Bin’ ProgramData swapfile.sys
  prefs: []
  type: TYPE_NORMAL
- en: ‘Documents and Settings’ ‘Program Files’ ‘System Volume Information’
  prefs: []
  type: TYPE_NORMAL
- en: pagefile.sys ‘Program Files (x86)’ Users
  prefs: []
  type: TYPE_NORMAL
- en: PerfLogs Recovery Windows
  prefs: []
  type: TYPE_NORMAL
- en: 'To automate the mount each time the system is booted, simply add the appropriate
    mount line to the /etc/fstab file:'
  prefs: []
  type: TYPE_NORMAL
- en: /dev/sda2 /mnt/windows ntfs defaults 0 0
  prefs: []
  type: TYPE_NORMAL
- en: 'To unmount the Windows file system at any time:'
  prefs: []
  type: TYPE_NORMAL
- en: umount /mnt/windows
  prefs: []
  type: TYPE_NORMAL
- en: 4.5 Summary
  prefs: []
  type: TYPE_NORMAL
- en: CentOS 8 can safely co-exist on the same disk drive as a Windows operating system
    by creating a dual boot environment. This involves shrinking the amount of space
    occupied by the Windows system to make room for CentOS 8 before performing the
    installation. Once CentOS has been installed, the boot menu configuration must
    be modified to include the option to boot from Windows. To access the Windows
    filesystem from within CentOS, the Fuse NTFS driver needs to be installed and
    used to mount the Windows partitions.
  prefs: []
  type: TYPE_NORMAL
