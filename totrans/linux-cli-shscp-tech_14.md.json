["```\n#!/bin/bash\necho \"Input a value: \"\nread Value1\necho \"Your input was: $Value1\"\n```", "```\ndemo@cli1:~/interactive$ bash singlevar.sh \nInput a value: \ntest\nYour input was: test\ndemo@cli1:~/interactive$ bash singlevar.sh \nInput a value: \ntest value\nYour input was: test value\n```", "```\n#!/bin/bash\necho -e \"Input two numbers \"\nread num1 num2\necho \"Two numbers are $num1 and $num2\"\n```", "```\ndemo@cli1:~/interactive$ bash doublevar.sh \nInput two numbers \n2 3\nTwo numbers are 2 and 3\n```", "```\ndemo@cli1:~/interactive$ bash doublevar.sh \nInput two numbers \nFirst second\nTwo numbers are First and second\ndemo@cli1:~/interactive$ bash doublevar.sh \nInput two numbers \nfirst second third\nTwo numbers are first and second third\n```", "```\n#!/bin/bash\necho \"Input a value: \"\nRead\necho \"Your input was: $REPLY\"\n```", "```\ndemo@cli1:~/interactive$ bash novar.sh \nInput a value: \ntest value no variable\nYour input was: test value no variable\n```", "```\n#!/bin/bash\necho \"Input multiple values: \"\nread REGULAR\necho \"Your input was: $REGULAR\"\necho \"This will not work: ${REGULAR[0]}\"\necho \"Now input multiple values again:\"\nread -a REGULAR\necho \"This will work: ${REGULAR[0]}\"\n```", "```\ndemo@cli1:~/interactive$ bash array.sh \nInput multiple values: \nfirst second third\nYour input was: first second third\nThis will not work: first second third\nNow input multiple values again:\nfirst second third\nThis will work: first\n```", "```\n#!/bin/bash\necho -n \"Can you please input a word?: \"\nread  word\necho \"I got: $word\"\n```", "```\ndemo@cli1:~/interactive$ bash echoline.sh \nCan you please input a word?: singleword\nI got: singleword\n```", "```\n#!/bin/bash\necho -e \"Can you please input a word?:  \\c \"\nread  word\necho \"I got: $word\"\n```", "```\n#!/bin/bash\necho \"Your favourite scripting language?\"\necho \"1) bash\"\necho \"2) perl\"\necho \"3) python\"\necho \"4) c++\"\necho \"5) Dunno!\"\necho -n \"Your choice is: \"\nread choice;\n# we do a simple case structure\ncase $choice in\n    1) echo \"You chose bash\";;\n    2) echo \"You chose perl\";;\n    3) echo \"You chose python\";;\n    4) echo \"You chose c++\";;\n    5) exit\nesac\n```", "```\n#!/bin/bash\nPS3='Please choose an option: '\noptions=(\"Option 1\" \"Option 2\" \"Option 3\" \"Quit\")\nselect opt in \"${options[@]}\"\ndo\n    case $opt in\n        \"Option 1\")\n            echo \"you chose Option 1\"\n            ;;\n        \"Option 2\")\n            echo \"you chose Option 2\"\n            ;;\n        \"Option 3\")\n            echo \"you chose Option $REPLY which is $opt\"\n            ;;\n        \"Quit\")\n            break\n            ;;\n        *) echo \"invalid option $REPLY\"\n            ;;\n    esac\ndone\n```", "```\ndemo@cli1:~/interactive$ bash select.sh \n1) Option 1\n2) Option 2\n3) Option 3\n4) Quit\nPlease choose an option: 1\nyou chose Option 1\nPlease choose an option: 2\nyou chose Option 2\nPlease choose an option: 3\nyou chose Option 3 which is Option 3\nPlease choose an option: 4\ndemo@cli1:~/interactive$\n```", "```\nsudo apt install expect\n```", "```\n#!/usr/bin/expect\nexpect \"hello\"\nsend \"world\"\n```", "```\ndemo@cli1:~/interactive$ expect expect1.exp \nHEllo\nhelo\nhello\nworld\n```", "```\n#!/usr/bin/expect\nset timeout 20\nset host [lindex $argv 0]\nset user [lindex $argv 1]\nset password [lindex $argv 2]\nspawn ssh \"$user\\@$host\"\nexpect \"Password:\"\nsend \"$password\\r\";\ninteract\n```", "```\ndemo@cli1:~/interactive$ expect sshlogin.exp localhost demo demo\nspawn ssh demo@localhost\ndemo@localhost's password: \nWelcome to Ubuntu 20.10 (GNU/Linux 5.8.0-63-generic x86_64)\n Documentation:  https://help.ubuntu.com\n* Management:     https://landscape.canonical.com\n* Support:        https://ubuntu.com/advantage\n0 updates can be installed immediately.\n0 of these updates are security updates.\ndemo@cli1:~$\n```", "```\n#!/usr/bin/expect\nset timeout 20\nset host [lindex $argv 0]\nset user [lindex $argv 1]\nset password [lindex $argv 2]\nspawn ssh \"$user\\@$host\"\nexpect \"password:\"\nsend \"$password\\r\";\nsleep 5\nsend \"clear\\r\";\nsend \"ip link\\r\";\nexpect \"$\"\nputs $expect_out(buffer);\nsend \"exit\\r\";\n```", "```\n#!/bin/bash\n#echo -e \"Can you please input a word?:  \\c \"\necho -n \"Can you please input a word?:   \"\nread  word\necho \"I got: $word\"\necho -e \"Now please input two words: \"\nread word1 word2\necho \"I got: \\\"$word1\\\" \\\"$word2\\\"\"\necho -e \"Any more thoughts? \"\n# read will by default create $REPLY variable\nread\necho \"$REPLY is not a bad thing \"\necho -e \"Can you give me three of your favorite colors? \"\n# read -a will read an array of words\nread -a colours\necho \"Amazing, I also like ${colours[0]}, ${colours[1]} and \\n\n${colours[2]}:-)\"\n```", "```\ndemo@cli1:~/interactive$ autoexpect bash simpleecho.sh \nautoexpect started, file is script.exp\nCan you please input a word?:   word one\nI got: word one\nNow please input two words: \ntwo words\nI got: \"two\" \"words\"\nAny more thoughts? \nnone whatsoever\nnone whatsoever is not a bad thing \nCan you give me three of your favourite colors? \nblue yellow cyan\nAmazing, I also like blue, yellow and cyan\nautoexpect done, file is script.exp\n```", "```\n#!/usr/bin/expect -f\n# This Expect script was generated by autoexpect on Sun Oct \\n\n10 13:35:52 2021\nset force_conservative 0  ;# set to 1 to force conservative \\n\nmode even if\n                                        ;# script wasn't run \\n\nconservatively\n          Originally\n               if {$force_conservative} {                                            \n                          set send_slow {1 .1}\n                          proc send {ignore arg} {\n                          sleep .1\n                          exp_send -s -- $arg\n             }\n} \nset timeout -1\nspawn bash simpleecho.sh\nmatch_max 100000\nexpect -exact \"Can you please input a word?:   \"\nsend -- \"word one\\r\"\nexpect -exact \"word one\\r\nI got: word one\\r\nNow please input two words: \\r\n\"\nsend -- \"two rods \"\nexpect -exact \"\nsend -- \"\"\nexpect -exact \"\nsend -- \"\"\nexpect -exact \"\nsend -- \"\"\nexpect -exact \"\nsend -- \"\"\nexpect -exact \"\nsend -- \"words\\r\"\nexpect -exact \"words\\r\nI got: \\\"two\\\" \\\"words\\\"\\r\nAny more thoughts? \\r\n\"\nsend -- \"none whatsoever\\r\"\nexpect -exact \"none whatsoever\\r\nnone whatsoever is not a bad thing \\r\nCan you give me three of your favorite colors? \\r\n\"\nsend -- \"blue llow and \"\nexpect -exact \"\nsend -- \"\"\nexpect -exact \"\nsend -- \"\"\nexpect -exact \"\nsend -- \"\"\nexpect -exact \"\nsend -- \"cz\"\nexpect -exact \"\nsend -- \"yan\\r\"\nexpect eof\n```", "```\nsudo apt install dialog\n```", "```\ndialog --clear --backtitle \"Simple menu\" --title \"Available \\n\noptions\" --menu \"Choose one:\" 16 50 4 1 \"First\" 2 \"Second\" 3 \\n\n\"Third\"\n```", "```\n#!/bin/bash\nHEIGHT=16\nWIDTH=50\nCHOICE_HEIGHT=4\nBACKTITLE=\"Simple menu\"\nTITLE=\"Available options\"\nMENU=\"Choose one:\"\nOPTIONS=(1 \"First\" 2 \"Second\" 3 \"Third\")\nCHOICE=$(dialog --clear \\\n                --backtitle \"$BACKTITLE\" \\\n                --title \"$TITLE\" \\\n                --menu \"$MENU\" \\\n                $HEIGHT $WIDTH $CHOICE_HEIGHT \\\n                \"${OPTIONS[@]}\" \\\n                2>&1 >/dev/tty)\nclear\ncase $CHOICE in\n        1)\n            echo \"You chose First\"\n            ;;\n        2)\n            echo \"You chose Second\"\n            ;;\n        3)\n            echo \"You chose Third\"\n            ;;\nesac\n```", "```\n#!/bin/bash\nDATEPROMPT=\"Choose a date\"\nCHOSENDATE=$(dialog --stdout --calendar \"$DATEPROMPT\" 0 0)\necho \"Chosen date is $CHOSENDATE\"\n```", "```\ndialog --dselect ~ 10 39\n```", "```\ndialog --yesno \"Do you wish to do it?\" 0 0\n```", "```\ndialog --msgbox \"A lot of text can be displayed here!\" 10 30\n```", "```\ndialog --tailbox /var/log/syslog 40 80\n```"]