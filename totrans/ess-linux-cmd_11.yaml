- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: File Transfer, Downloading, and Managing Log Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: File transfer, downloading, and managing log files are crucial aspects of managing
    a Linux system effectively, enabling system administrators to efficiently handle
    data exchange, retrieve essential software or content, and maintain a robust record
    of system activities. This multifaceted topic encompasses a variety of commands
    and utilities, each serving distinct purposes and collectively supporting seamless
    file operations and log management. Understanding and mastering these tools is
    vital for administrators to ensure smooth system functioning, troubleshoot issues,
    and maintain data integrity.
  prefs: []
  type: TYPE_NORMAL
- en: The significance of file transfer, downloading, and managing log file commands
    lies in their essential role in day-to-day system administration tasks. File transfer
    commands such as `netcat`, `socat`, `wget`, `curl`, and `axel` facilitate seamless
    data exchange between local and remote systems. These tools are critical for sharing
    files, backups, and configurations, both within an internal network and across
    the internet. Similarly, downloading commands such as `wget`, `curl`, and `axel`
    empower administrators to efficiently retrieve files, software packages, and updates
    from remote servers or repositories. These commands are indispensable for obtaining
    the necessary resources efficiently and ensuring the system remains up to date
    and well-equipped. Equally important is managing log files, which plays a pivotal
    role in system analysis, performance monitoring, and troubleshooting. Log files
    are records that contain critical information about system activities, errors,
    and events. By exploring common log files, administrators can gain valuable insights
    into the system’s health, identify potential issues, and take preventive measures.
    This level of visibility is essential for maintaining system stability, ensuring
    security, and complying with regulatory requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will delve into the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Copying files into remote systems using `netcat` and `socat`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading files with `wget` and `curl`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring common log files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The purpose of mastering file transfer, downloading, and managing log file commands
    is to equip system administrators with the ability to perform a wide array of
    tasks effectively. By understanding these tools, administrators can confidently
    perform file transfers, secure content exchange, and retrieve essential data.
    They can also analyze and interpret log files to gain valuable information about
    the system’s performance and diagnose any underlying issues. These commands provide
    the flexibility and control needed to handle diverse file operations and maintain
    a well-organized log management system. As such, file transfer, downloading, and
    managing log file commands remain essential and are widely used by Linux system
    administrators, empowering them to efficiently manage their systems and deliver
    optimal performance and security.
  prefs: []
  type: TYPE_NORMAL
- en: Copying files into remote systems using netcat and socat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Copying files into remote systems using the `netcat` and `socat` commands is
    a crucial aspect of file transfer and system administration in Linux environments.
    Both `netcat` and `socat` are versatile networking utilities that offer powerful
    capabilities for transferring data between systems over the network. These commands
    provide a simple and efficient way to securely send files, directories, or streams
    from one host to another, making them indispensable tools for Linux system administrators.
    They operate at the network level, allowing data to be transmitted over TCP or
    UDP connections, making them ideal for transferring large files or backups across
    the network. Unlike traditional file transfer methods, such as `netcat` and `socat`
    provide a more lightweight and flexible approach. FTP and SCP are well-established
    methods for transferring files over networks, but they come with certain limitations.
    For instance, FTP requires a dedicated FTP server setup, which can be resource-intensive
    and less flexible in ad hoc network scenarios. SCP, while secure, relies on SSH
    and might not be available or practical in all situations. `netcat` and `socat`,
    on the other hand, are lightweight and versatile tools that allow for direct network
    communication, making them ideal for quick and ad hoc file transfers. They don’t
    require dedicated servers or complex configurations to be set up, making them
    valuable tools in various network administration and troubleshooting tasks. Moreover,
    they can be used in various scenarios, including data replication, system backups,
    remote administration, and even tunneling encrypted communication. These commands
    provide administrators with greater control over the data transfer process, making
    it easier to customize and automate file transfer tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The use of `netcat` and `socat` in copying files into remote systems is highly
    practical and efficient. Administrators can quickly transfer files by piping the
    content through `netcat` or `socat` to the destination system. The process is
    relatively simple, involving a single line of command, reducing the need for complex
    setups or additional software installations. Additionally, `netcat` and `socat`
    support various options that allow administrators to specify data streams, handle
    multiple connections, and control the transfer speed, providing greater flexibility
    and control over the file transfer process. Overall, the `netcat` and `socat`
    commands provide efficient and reliable solutions for copying files into remote
    systems, streamlining file transfer tasks, and enhancing the overall efficiency
    of system administration. Now, let’s delve into practical examples of how these
    commands can be effectively utilized by system administrators:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Transferring files using `netcat` (CentOS machine):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first command, `ls -l /bin/wget`, lists detailed information about the `wget`
    file located in the `/bin` directory. The output includes various attributes such
    as permissions, owner, group, size, modification date, and the name of the file.
    In this case, the `wget` file is an executable with `-rwxr-xr-x` permissions,
    indicating that it is readable, writable, and executable by the owner, and executable
    by others.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The second command, `nc -nv 192.168.x.xxx 4444 < wget`, involves the use of
    the `nc` (`netcat`) command for network communication. Here, the user is attempting
    to send the content of the `wget` file to a remote machine at IP address `192.168.x.xxx`,
    port `4444`. The `<` symbol is used for input redirection, indicating that the
    content of the `wget` file will be provided as input to the `nc` command.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `-n` flag ensures that no DNS resolution is performed for the IP address,
    `192.168.x.xxx`, and `-v` provides verbose output about the connection process.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The subsequent lines show the output of the `netcat` command. It starts by
    displaying the version of Ncat (a modern reimplementation of `netcat`) being used.
    Then, it reports that a connection has been established to the specified IP address
    and port:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 11.1 – File transfer with netcat](img/B18212_11_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – File transfer with netcat
  prefs: []
  type: TYPE_NORMAL
- en: 'Remote machine:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first command that’s executed is `nc -nlvp 4444 > wget`. This command uses
    the `nc` (`netcat`) utility to listen for incoming network connections on port
    `4444`. The output of the incoming connection is redirected to a file named `wget`
    in the current directory. The `>` symbol is used for output redirection. The output
    indicates that the system is now listening on port `4444`. Note that when sending
    a file via `nc`, no progress bar will be displayed in the Terminal.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The second command that’s executed is `ls -l wget`. This command lists detailed
    information about the `wget` file in the current directory. The output includes
    attributes such as permissions, owner, group, size, modification date, and the
    name of the file.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The third command that’s executed is `sudo chmod +x wget`. This command uses
    `chmod` to change the permissions of the `wget` file. The `+x` argument adds the
    executable permission to the file.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The concluding command that’s issued is `wget --help`. This command aims to
    verify the successful transfer of the file, as evidenced by the output, which
    demonstrates that it was executed successfully:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 11.2 – Receiving an incoming file using nc](img/B18212_11_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – Receiving an incoming file using nc
  prefs: []
  type: TYPE_NORMAL
- en: 'Transferring files using `socat` (remote machine):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On the remote machine, the `socat TCP4-LISTEN:4444,fork file:shadow.txt` command
    is executed. This command sets up a TCP listener on port `4444`. When a connection
    is established to this port, `socat` reads the content of the local `shadow.txt`
    file and sends it to the connected client. The fork option allows `socat` to handle
    multiple incoming connections independently. In this example, the `shadow.txt`
    file contains text stating `file file`, as shown here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Sending a file with socat on a remote machine](img/B18212_11_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 – Sending a file with socat on a remote machine
  prefs: []
  type: TYPE_NORMAL
- en: 'CentOS machine:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On the CentOS machine, the `socat TCP4:192.168.x.xxx:4444 file:shadow.txt,
    create` command is executed. This command initiates a TCP connection to the remote
    machine at IP address `192.168.x.xxx` on port `4444`. Once connected, `socat`
    reads the contents of the local `shadow.txt` file and sends it to the remote machine.
    The `create` option instructs `socat` to create the `shadow.txt` file on the remote
    machine if it doesn’t already exist. After the transfer is complete, the local
    `shadow.txt` file is created or overwritten with the received data. The `ls -l
    shadow.txt` command confirms the creation of the file, and the `cat shadow.txt`
    command displays its content, which is `file file`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.4 – Receiving and verifying the transferred file](img/B18212_11_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.4 – Receiving and verifying the transferred file
  prefs: []
  type: TYPE_NORMAL
- en: While both Netcat and Socat are used for networking tasks and data transfer,
    Netcat is a simpler utility that’s primarily used for basic networking tasks,
    whereas Socat offers more advanced capabilities and options, making it suitable
    for a wider range of networking scenarios, including complex data manipulation,
    encryption, and proxying.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading files with wget and curl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Downloading files is a fundamental task in system administration, and tools
    such as `wget` and `curl` play a pivotal role in simplifying and optimizing this
    process. These commands are designed to fetch files from remote servers, repositories,
    or URLs and bring them to the local system. Their importance stems from the need
    to keep systems updated with the latest software versions, retrieve critical data,
    and efficiently manage resources. The significance of these commands lies in their
    versatility and ease of use. `wget`, for instance, is a robust and feature-rich
    tool capable of handling various protocols, such as HTTP, HTTPS, and FTP. Its
    ability to recursively download files and mirror entire websites is particularly
    valuable for administrators managing large-scale systems or websites. `curl`,
    on the other hand, is equally powerful, supporting a wide range of protocols and
    enabling administrators to not only download files but also perform various other
    network-related tasks, such as sending data to servers and handling authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'These commands are indispensable for system administrators due to their role
    in maintaining up-to-date software, retrieving critical data, and ensuring the
    smooth operation of a system. Their ease of use, flexibility in handling different
    protocols, and ability to accelerate downloads make them essential tools in the
    toolkit of every Linux system administrator. Let’s make use of these commands
    practically on our Linux machine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `wget`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `wget http://192.168.x.xxx:80/file.txt` command is used to download a file
    from a remote web server. Here’s a breakdown of what each part of the command
    does:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`http://192.168.x.xxx:80/file.txt`: This is the URL of the file we want to
    download. Here `http` specifies the protocol to use for the download – in this
    case, HTTP'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When we execute the command, `wget` establishes an HTTP connection to the provided
    IP address and port, sends an HTTP GET request for the specified file (`/file.txt`),
    and receives the file’s content in response. The downloaded file will be saved
    in the current working directory on our local machine with the same name as on
    the server (in this case, `file.txt`):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.5 – File download with wget](img/B18212_11_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.5 – File download with wget
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `curl`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `curl -O http://192.168.x.xxx:80/file.txt` command is used to download
    a file from a remote web server using the `curl` command-line tool. Here’s a breakdown
    of what each part of the command does:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`curl`: This is a command-line utility that stands for `-O`: This option tells
    `curl` to save the downloaded file using the same name as on the remote server.
    It’s used to preserve the original filename.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://192.168.x.xxx:80/file.txt`: This is the URL of the file you want to
    download, similar to the previous explanation:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http`: This specifies the protocol to use for the download – in this case,
    HTTP'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When we execute this command, `curl` establishes an HTTP connection to the
    provided IP address and port, sends an HTTP GET request for the specified file
    (`/file.txt`), and receives the file’s content in response. The downloaded file
    will be saved in the current working directory on the local machine with the same
    name as on the server (`file.txt`):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.6 – File download with curl](img/B18212_11_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.6 – File download with curl
  prefs: []
  type: TYPE_NORMAL
- en: By offering options for batch downloads, resumable transfers, and detailed progress
    reporting, `wget` and `curl` streamline the process of obtaining files from remote
    sources, enhancing efficiency and productivity for administrators across various
    domains and industries.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring common log files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: System administrators check log files for various reasons due to their critical
    importance in maintaining system health, diagnosing issues, and ensuring security.
    These logs provide a comprehensive record of system activities, errors, and events,
    allowing administrators to gain valuable insights into the system’s behavior.
    For instance, the `/var/log/messages` log is a goldmine for general system-wide
    events, which assists in troubleshooting issues that might affect the entire system.
    This log’s significance lies in its ability to offer a holistic view of the system’s
    health and performance, aiding administrators in detecting anomalies early on
    and addressing potential bottlenecks or threats.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, log files such as `/var/log/secure` and `/var/log/auth.log` are pivotal
    in upholding system security. System administrators continuously monitor these
    logs to track authentication and authorization activities, helping them identify
    unauthorized access attempts or breaches. The importance of such logs cannot be
    overstated as they provide the necessary trail to investigate security incidents,
    enforce access controls, and mitigate potential security risks. Additionally,
    logs related to web servers such as `/var/log/httpd/` hold the key to identifying
    unauthorized access attempts, suspicious activities, or web server errors, which
    are crucial for maintaining the integrity and security of web applications. Regularly
    checking these logs empowers administrators to proactively identify and rectify
    security vulnerabilities, keeping sensitive data and systems safeguarded.
  prefs: []
  type: TYPE_NORMAL
- en: 'In CentOS 8, several common log files are located in various directories that
    record system events, application activities, and errors. Here is a list of some
    of the common log files, along with their paths:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/``var/log/messages`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This log file contains general system messages generated by various processes.
    It’s a catch-all location for different log messages, including those from daemons,
    services, and the kernel.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/``var/log/dmesg`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The kernel ring buffer messages are stored here. These messages provide information
    about the kernel’s interactions with hardware during boot and while the system
    is running.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/``var/log/boot.log`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This file contains messages related to the boot process and startup information.
    It’s useful for diagnosing boot issues.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/``var/log/secure`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication and security-related events, including successful and failed
    login attempts, are logged here. Monitoring this file helps in tracking unauthorized
    access attempts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/``var/log/wtmp`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This log file records the user’s login and logout history. It maintains a record
    of user sessions and their durations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/var/log/yum.log` and `/var/log/dnf.rpm.log`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These logs contain package management activities. Entries include package installations,
    updates, and removals performed using YUM or DNF package managers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/var/log/httpd/`, `/``var/log/mariadb/`, `/var/log/nginx/`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These directories contain logs specific to Apache, MariaDB, and nginx servers,
    respectively. They include access logs, error logs, and other server-related events.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/``var/log/maillog`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tailored for email-related activities, this log tracks email sending, receiving,
    and errors for mail server configurations, helping in troubleshooting email communication
    problems.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/``var/log/cron`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Focused on scheduled tasks, this log records the execution of cron jobs and
    their outcomes. It’s indispensable for ensuring that automated tasks run as expected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/``var/log/audit/audit.log`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The audit log is a treasure trove for security teams. It contains records of
    system activities and security events, aiding in identifying suspicious activities
    and policy violations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/``var/log/auth.log`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Like `/var/log/secure`, this log concentrates on authentication and authorization
    activities. It’s a window into user access, password changes, and privilege modifications.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/``var/log/kern.log`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kernel messages and hardware-related events are logged here. When troubleshooting
    hardware issues or kernel-level problems, this log can be instrumental.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/``var/log/udev`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This directory contains logs related to device management and device events.
    It’s helpful for understanding device-related problems.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/var/log/sssd/` and `/var/log/avahi-daemon/`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These logs pertain to **System Security Services Daemon** (**SSSD**) and Avahi
    Daemon, respectively. SSSD handles authentication and identity resolution, while
    Avahi focuses on local network service discovery.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/``var/log/firewalld`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`firewalld` logs provide information about firewall rules and activities, aiding
    in monitoring and managing network security.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/``var/log/audit/`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This directory stores SELinux audit logs. It helps in tracking security-related
    incidents and identifying policy violations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/``var/log/sa/`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The system accounting (`sa`) logs help monitor system performance metrics such
    as CPU, memory, and disk usage over time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/``var/log/cloud-init.log`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud initialization logs contain information about the initialization process
    on cloud instances, aiding in tracking cloud-based system setups.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`/``var/log/libvirt/`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Libvirt logs include events and activities related to virtualization using the
    Libvirt framework.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In essence, the regular scrutiny of these log files by system administrators
    is indispensable. These logs serve as a vital toolset for troubleshooting, performance
    optimization, and security enhancement. By harnessing the insights embedded in
    these logs, administrators can ensure seamless system operation, prompt issue
    resolution, and robust security posture, ultimately contributing to the overall
    stability and reliability of the Linux environment.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter provided a comprehensive exploration of crucial techniques and
    tools tailored for Linux system administrators. This chapter should empower administrators
    with the proficiency to efficiently manage file transfers, execute seamless downloads,
    and effectively handle log files, all of which are integral aspects of maintaining
    robust and secure Linux systems. We began by learning how to copy files into remote
    systems while leveraging the capabilities of `netcat` and `socat`. These utilities
    facilitate secure and efficient file transfers, providing administrators with
    the means to exchange data across networks with confidence. Subsequently, we delved
    into the art of downloading files by utilizing the `wget` and `curl` commands.
    These commands empower administrators to seamlessly fetch content from the web
    or other remote locations, simplifying the process of acquiring essential resources
    for system management and enhancement. This chapter further enriched its content
    by delving into the significance and diverse array of log files, which constitute
    a fundamental component of effective system administration. Logging serves as
    an indispensable practice for monitoring system activities, diagnosing potential
    issues, and safeguarding security protocols. By delving into the intricacies of
    common log files, Linux system administrators can attain a comprehensive grasp
    of system health and performance indicators. Proficiency in comprehending log
    files proves pivotal for troubleshooting errors, promptly identifying security
    breaches, and optimizing overall system functionality. This comprehensive exploration
    equips administrators with the expertise to proactively address challenges, maintain
    system integrity, and drive efficient operations.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll delve into crucial security measures for Linux systems.
    We will show you how to utilize enforcing and permissive modes in SELinux, manage
    SELinux Boolean values, strategies to secure **Secure Shell** (**SSH**) access,
    methods for locking user accounts, and techniques for enhancing system booting
    security.
  prefs: []
  type: TYPE_NORMAL
- en: Part 4:Linux Security and the Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, we dive into Linux security, a critical duty for administrators
    of production systems. Linux features powerful security tools such as SELinux,
    integrated firewalls, and standard system permissions. This section offers a clear
    overview of Linux security measures and guides you through setting up CentOS 8
    on AWS.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section contains the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B18212_12.xhtml#_idTextAnchor134), *Exploring Linux Security*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B18212_13.xhtml#_idTextAnchor147), *Linux in the Cloud*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
