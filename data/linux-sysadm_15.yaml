- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Security Guidelines and Best Practices
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全指南和最佳实践
- en: In the modern world, where almost all computers are connected to the internet
    and online applications play an increasingly larger role in all aspects of our
    lives, information security is also becoming more and more important. When information
    stored in digital form becomes more valuable and malicious actors constantly devise
    new attacks, every system administrator must make a conscious effort to keep their
    machines secure.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代社会，几乎所有计算机都连接到互联网，在线应用在我们生活的各个方面扮演着越来越重要的角色，信息安全也变得愈发重要。当以数字形式存储的信息变得越来越有价值，而恶意行为者不断设计新的攻击方式时，每个系统管理员都必须有意识地努力保持机器的安全。
- en: Luckily, following security guidelines and best practices can prevent most attacks
    and limit the impact of successful attacks if they occur.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，遵循安全指南和最佳实践可以防止大多数攻击，并在攻击发生时限制其影响。
- en: 'In this chapter, we will learn about the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下内容：
- en: Information security components and types of breaches
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信息安全组件和泄露类型
- en: Common types of attacks and threats
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见的攻击类型和威胁
- en: Attack vectors and security vulnerabilities
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击途径和安全漏洞
- en: Ways to keep your system secure and stable
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持系统安全和稳定的方法
- en: Common threats and attack types
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见的威胁和攻击类型
- en: There are many reasons why attackers may target a system, many ways to attack
    targets, and multiple possible consequences for the operator of the compromised
    system. Let’s examine them in detail.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可能针对系统的原因有很多，攻击目标的方式也各不相同，而受损系统的操作员可能面临多种后果。我们将详细探讨这些内容。
- en: The motivation of attackers and the possible consequences
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 攻击者的动机及其可能带来的后果
- en: The picture of an attack on computer systems that movies, literature, and video
    games tend to show is usually an attack on a carefully selected target with a
    specific goal – most often, to steal some valuable information, modify it, or
    perhaps destroy it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 电影、文学和视频游戏中呈现的计算机系统攻击画面通常是针对一个精心挑选的目标进行攻击，具有特定的目标——最常见的目标是窃取一些有价值的信息、修改它，或者可能摧毁它。
- en: Such attacks certainly exist in the real world and they are a huge concern for
    high-profile companies and government agencies. However, that popular depiction
    often misleads people into believing that security is not important for them because
    they do not have any valuable information and are not high-profile targets.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的攻击在现实世界中确实存在，并且对高知名度公司和政府机构来说是一个巨大的隐患。然而，这种流行的描绘常常误导人们认为，安全对他们并不重要，因为他们没有任何有价值的信息，也不是高知名度的目标。
- en: That perception might have been correct in the early days of the internet but,
    these days, it is a very dangerous assumption. In reality, most attacks are no
    longer targeted and carefully prepared, but rather automated and opportunistic.
    Every machine connected to the internet is constantly probed by automated tools
    that attempt to exploit known security weaknesses.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这种看法在互联网初期可能是正确的，但如今，这种假设已经变得非常危险。实际上，大多数攻击不再是针对特定目标并精心策划的，而是自动化的、机会主义的。每一台连接到互联网的机器都会不断被自动化工具扫描，试图利用已知的安全漏洞。
- en: Worse yet, automated attacks often rely on the availability of compromised third-party
    machines – running automated attack tools on machines that belong to the attackers
    themselves would be expensive and easy to detect and mitigate. To avoid paying
    for hosting and evade detection and blocking, attackers often gain unauthorized
    access to a few machines and use them to facilitate further attacks. A group of
    machines controlled by a malicious entity is often called a **botnet**. Botnets
    are used to probe more machines and take control of them, distribute malware,
    send unsolicited messages (spam), and perform other types of attacks.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 更糟糕的是，自动化攻击通常依赖于被攻陷的第三方机器的可用性——在攻击者自己的机器上运行自动化攻击工具既昂贵又容易被发现并加以遏制。为了避免支付托管费用并逃避检测和封锁，攻击者通常会获得对几台机器的未经授权的访问，并利用它们来促进进一步的攻击。一组被恶意实体控制的机器通常被称为**僵尸网络**。僵尸网络用于扫描更多机器并控制它们，分发恶意软件，发送未经请求的消息（垃圾邮件），并执行其他类型的攻击。
- en: 'Thus, a careless system administrator can become not only a victim of an attack
    but also an unintentional and unknowing accomplice of the attacker. In some cases,
    owners of compromised systems can come under investigation from law enforcement
    agencies and be suspected of conducting the attack because it came from their
    machines. Such cases are rare but even if the owner is not held legally liable,
    there are still many possible consequences of allowing an attacker to control
    your machine: cost of electricity (for on-premises machines or co-location) or
    CPU time on cloud platforms, bandwidth use fees, and system overload that takes
    resources away from legitimate users.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一位粗心的系统管理员不仅可能成为攻击的受害者，还可能成为攻击者的无意和不知情的同谋。在某些情况下，受攻击系统的所有者可能会受到执法机关的调查，并因攻击源自其机器而被怀疑为攻击的实施者。这类情况虽罕见，但即使所有者不承担法律责任，允许攻击者控制你的机器仍然会带来许多潜在后果：电力成本（对于本地机器或联合托管的机器）、云平台上的CPU时间、带宽使用费用，以及系统过载，导致合法用户的资源被抢占。
- en: Finally, a machine that was identified as a source of attacks or spam can be
    added to blacklists. Multiple blacklists are maintained by various companies,
    so if your IP address or a domain name ends up in those lists, removing it from
    every list can be a very time-consuming endeavor. Moreover, blacklist maintainers
    are not required to remove your address since they are private companies, and
    blacklist inclusion and removal are not governed by any laws, and they may refuse
    to remove entries of repeat offenders or demand extensive proof that the current
    owner significantly improved its security practices.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，被确认作为攻击或垃圾邮件来源的机器可能会被加入黑名单。多个黑名单由不同的公司维护，因此，如果你的IP地址或域名被列入这些名单，清除它们可能是一个非常耗时的工作。此外，黑名单维护者并没有义务删除你的地址，因为它们是私营公司，黑名单的加入和移除并不受任何法律监管，且它们可能会拒绝删除重复违规者的条目，或者要求提供大量证明，证明当前所有者已经显著改善了安全措施。
- en: Information security properties and attacks on them
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 信息安全特性及其攻击
- en: 'The three components of information security are usually defined as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 信息安全的三个组成部分通常定义如下：
- en: Availability
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用性
- en: Confidentiality
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保密性
- en: Integrity (or authenticity)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整性（或真实性）
- en: Information availability means that authorized users can access it when they
    need it. Confidentiality means that users can only access the information they
    are authorized to access. Finally, integrity means that there are no accidental
    or deliberate modifications that are performed or authorized by legitimate users.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 信息可用性意味着授权用户可以在需要时访问信息。保密性意味着用户只能访问他们被授权访问的信息。最后，完整性意味着没有任何无意或故意的修改被合法用户执行或授权。
- en: Attacks can have different goals – either to compromise information availability
    or to gain control of the target to compromise the confidentiality and authenticity
    of information stored on it. In the modern world, many attackers are also interested
    solely in the resources of the machine and not in any information stored on it.
    Let’s look at these attacks in detail.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击可能有不同的目标——要么是破坏信息的可用性，要么是获得目标的控制权，从而破坏存储在其中的信息的机密性和真实性。在现代社会，许多攻击者更关心的是机器的资源，而非存储在其中的信息。我们来详细看看这些攻击。
- en: Denial of service
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 拒绝服务
- en: An attack on information availability is called a **Denial of Service** (**DoS**)
    attack. On the surface, it may look like the most benign type of attack because
    its effects are usually temporary. However, such attacks still can have severe
    consequences – for example, an online store whose website becomes unavailable
    can experience a significant loss of revenue, while an attack on a phone system
    may leave subscribers unable to make emergency calls and lead to loss of life
    as well. Some DoS attacks are performed simply as acts of vandalism but many such
    attacks are launched to extort money from the target system operator in exchange
    for stopping the attack, harm its reputation by rendering the service unreliable,
    or prevent it from making information available to users (the last goal is especially
    common for politically-motivated attacks).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对信息可用性的攻击称为**拒绝服务**（**DoS**）攻击。表面上看，这可能是最无害的攻击类型，因为其影响通常是暂时性的。然而，这种攻击仍然可能带来严重后果——例如，一个在线商店的网站无法访问可能导致收入的大幅损失，而对电话系统的攻击可能使用户无法拨打紧急电话，甚至可能导致生命丧失。一些
    DoS 攻击仅仅是破坏行为，但许多此类攻击是为了从目标系统运营商勒索资金以换取停止攻击，损害其声誉，使服务变得不可靠，或阻止其向用户提供信息（最后一种目标对于政治动机的攻击尤为常见）。
- en: There are two possible ways to perform a DoS attack. The classic way involves
    exploiting a flaw in the system software to crash it or make it repeatedly perform
    complex operations and thus slow it down. These attacks can be prevented by proper
    software development and configuration.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 DoS 攻击有两种可能的方式。经典方式是利用系统软件中的漏洞来使其崩溃，或让其反复执行复杂操作，从而使其变慢。这些攻击可以通过适当的软件开发和配置来防止。
- en: The other, increasingly more common, type is the **Distributed Denial of Service**
    (**DDoS**) attack. Such attacks use large numbers of machines to saturate the
    network link of the target system or overload it with requests beyond its capacity.
    The attacker can either generate attack traffic from a large botnet or use an
    amplification attack – that is, they can send DNS or NTP requests to public servers
    and specify the address of the attack target as the source address to make them
    send unsolicited reply packets to the target that the target never requested.
    Since replies are typically larger than requests, an amplification attack can
    save the attacker considerable bandwidth and computational resources by involving
    well-intentioned third parties in the attack.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种、日益常见的攻击类型是**分布式拒绝服务**（**DDoS**）攻击。这种攻击利用大量机器来饱和目标系统的网络链接，或用超出其处理能力的请求使其过载。攻击者可以通过大型僵尸网络生成攻击流量，或使用放大攻击——即他们可以向公共服务器发送
    DNS 或 NTP 请求，并将攻击目标的地址指定为源地址，以使其向目标发送未经请求的回复数据包。由于回复通常比请求数据包大，放大攻击可以通过让好心的第三方参与攻击，从而为攻击者节省大量带宽和计算资源。
- en: The worst part of a DDoS attack is that if an attacker generates enough traffic
    to saturate the network link of the target, there is nothing the administrator
    of the target machine itself can do to mitigate it – if the attack traffic has
    reached the target, its damage is already done. Such attacks can only be mitigated
    by the hosting or internet service provider, or a dedicated DDoS protection service
    that filters out malicious packets and forwards legitimate requests to the target
    machine. However, DDoS attacks are always targeted and never opportunistic since
    they require sending traffic from multiple machines to a single designated target,
    and most systems never become DDoS attack targets.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: DDoS 攻击最糟糕的部分是，如果攻击者产生足够的流量来使目标的网络链接饱和，目标机器的管理员本身无法采取任何措施来缓解这种情况——如果攻击流量已经到达目标，损害已经发生。这种攻击只能通过托管服务提供商、互联网服务提供商或专门的
    DDoS 保护服务来缓解，这些服务通过过滤恶意数据包并将合法请求转发到目标机器。然而，DDoS 攻击总是有明确目标的，而非机会主义性攻击，因为它们需要从多台机器向单一指定目标发送流量，并且大多数系统永远不会成为
    DDoS 攻击的目标。
- en: Credential theft and brute-force attacks
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 凭证盗窃和暴力破解攻击
- en: Taking full control of a target machine is one of the most attractive goals
    for any attacker because it allows them to easily compromise the integrity and
    confidentiality of any information stored on it and use the machine itself for
    their purposes.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 完全控制目标机器是任何攻击者最吸引人的目标之一，因为它允许攻击者轻松破坏机器上存储的任何信息的完整性和机密性，并将机器本身用于自己的目的。
- en: The cleanest way to gain access is to impersonate a legitimate user. If attackers
    somehow gain possession of a password, a cryptographic key, or an API key used
    for authentication, their use of the system will look indistinguishable from normal
    access.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 获取访问权限的最干净方法是冒充合法用户。如果攻击者以某种方式获取了密码、加密密钥或用于身份验证的API密钥，他们使用系统的行为将与正常访问无法区分。
- en: Even credentials for access to small servers can be valuable in the modern world
    if the attacker can steal enough of them – one of the most common attacker actions
    after gaining access is to run cryptocurrency mining software on the compromised
    machine and thus directly convert its CPU and GPU power into money. Stealing credentials
    for access to cloud platforms, email services, or **Voice over Internet Protocol**
    (**VoIP**) is even more lucrative because attackers can use them to spawn new
    virtual machines, send spam, or make international calls – some even go as far
    as selling such illegally acquired resources to third parties who are unaware
    of their origin. The cost of those services, of course, has to be paid by the
    lawful owner of those credentials.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 即便是访问小型服务器的凭证，在现代社会也能变得非常有价值——如果攻击者能窃取足够多的凭证，获取访问权限后的常见攻击行为之一就是在受害机器上运行加密货币挖矿软件，从而直接将其CPU和GPU的计算能力转化为货币。窃取云平台、电子邮件服务或**互联网语音协议**（**VoIP**）的访问凭证更具盈利性，因为攻击者可以利用这些凭证生成新的虚拟机、发送垃圾邮件或拨打国际电话——有些人甚至会将这些非法获取的资源出售给第三方，第三方对此毫不知情。当然，这些服务的费用最终要由合法的凭证拥有者支付。
- en: A lot of malware is programmed to steal passwords and keys from end user computers.
    This method is ideal for attackers because it leaves no traces on the target machines
    that they access using those stolen credentials.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 许多恶意软件被编程用来窃取终端用户计算机上的密码和密钥。这种方法对攻击者来说是理想的，因为它不会在他们通过窃取的凭证访问的目标机器上留下任何痕迹。
- en: However, many other attacks exploit the fact that end users often use weak passwords
    that are easy to guess. This is the basis for brute-force attacks, which are conducted
    by attempting to log in repeatedly with different passwords from a password dictionary
    that contains common words, commonly used passphrases, and often passwords stolen
    from other machines in the hope that someone used them for more than one machine
    or service (which is often the case).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，许多其他攻击利用了终端用户通常使用容易猜测的弱密码这一事实。这正是暴力破解攻击的基础，攻击者通过反复尝试使用包含常见单词、常用口令和经常被窃取的其他机器密码的密码字典登录，希望某些用户将它们用于多台机器或服务（这种情况很常见）。
- en: Brute-force attacks can be made significantly harder to execute by using strong
    passwords, encrypted keys, and setting up rate limiting to give the attacker fewer
    chances to log in and guess the password.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用强密码、加密密钥和设置速率限制，可以显著增加暴力破解攻击的难度，从而减少攻击者登录和猜测密码的机会。
- en: Attacks using configuration and software vulnerabilities
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 利用配置和软件漏洞进行的攻击
- en: Finally, in some cases, attackers can perform actions that logically must be
    denied to them by exploiting flaws in the system itself.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在某些情况下，攻击者可以通过利用系统本身的漏洞，执行那些逻辑上应该被拒绝的操作。
- en: 'There are two classes of such flaws: configuration issues and software vulnerabilities.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这种漏洞有两类：配置问题和软件漏洞。
- en: For an example of a configuration flaw, consider that the standard protocol
    for email submission – **Simple Mail Transport Protocol** (**SMTP**) – does not
    require mandatory authentication. For this reason, every SMTP server implementation
    can be configured to allow anyone to send mail through it and act as an open relay.
    If a server with such a configuration is exposed to the public internet, attackers
    can use it to send large amounts of spam through it simply because it does not
    check whether the sender is a legitimate user of the system or not.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以配置缺陷为例，考虑到电子邮件提交的标准协议——**简单邮件传输协议**（**SMTP**）——不要求强制身份验证。因此，每个SMTP服务器的实现都可以配置为允许任何人通过它发送邮件，并充当开放中继。如果一个配置了这种设置的服务器暴露在公共互联网中，攻击者可以利用它发送大量垃圾邮件，仅仅因为它没有检查发件人是否是系统的合法用户。
- en: In other cases, the flaw is in the software itself. For a contrived example,
    suppose a web application implements user authentication and correctly redirects
    users to their account pages upon login – say, a user with a login name of `bob`
    gets redirected from `https://example.com/login` to `https://example.com/users/bob`
    when they enter their login and password. However, due to a programming mistake,
    the application never checks the user account when someone tries to access an
    account page, so anyone who knows that there is a user named `bob` in that system
    can access their account page simply by typing `https://example.com/users/bob`
    in the address bar.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他情况下，缺陷存在于软件本身。例如，假设一个 Web 应用程序实现了用户身份验证，并且在用户登录后正确地将他们重定向到其账户页面——假设用户名为`bob`的用户从`https://example.com/login`被重定向到`https://example.com/users/bob`。然而，由于编程错误，应用程序在用户尝试访问账户页面时从未检查用户账户，因此任何知道系统中有一个名为`bob`的用户的人，只需在地址栏输入`https://example.com/users/bob`，就可以访问该账户页面。
- en: This example may sound egregious but it is not very far from vulnerabilities
    sometimes found in real software, even if their exploitation method might be more
    complex than typing a URL into the address bar.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子听起来可能很严重，但它与在真实软件中发现的漏洞并不太远，即使它们的利用方法可能比在地址栏中输入 URL 更复杂。
- en: Luckily, most vulnerabilities are not as dangerous. When security researchers
    publish their findings and when software maintainers release fixes for discovered
    vulnerabilities, they use a set of terms for vulnerability types and severity
    levels that you should be familiar with to estimate how important a fix is.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，大多数漏洞并没有那么危险。当安全研究人员发布他们的发现，以及软件维护人员发布已发现漏洞的修复程序时，他们会使用一组术语来表示漏洞类型和严重性等级，你应该熟悉这些术语，以估计修复的重要性。
- en: Vulnerability reports are published by individual researchers and software vendors
    and also aggregated in databases such as the National Vulnerability Database,
    which is maintained by the United States **National Institute of Standards and
    Technology** (**NIST**). Every known vulnerability in those databases is assigned
    a unique identifier such as CVE-2023-28531 ([https://nvd.nist.gov/vuln/detail/CVE-2023-28531](https://nvd.nist.gov/vuln/detail/CVE-2023-28531)),
    where **CVE** stands for **Common Vulnerabilities** **and Exposures**.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞报告由个人研究人员和软件供应商发布，并且也会汇总到像美国**国家标准与技术研究院**（**NIST**）维护的国家漏洞数据库中。在这些数据库中，每个已知的漏洞都会分配一个唯一的标识符，例如
    CVE-2023-28531（[https://nvd.nist.gov/vuln/detail/CVE-2023-28531](https://nvd.nist.gov/vuln/detail/CVE-2023-28531)），其中**CVE**代表**公共漏洞和暴露**。
- en: 'The usual set of severity levels is as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的严重性等级如下：
- en: '**Critical**: Usually, this allows any attacker who can connect to the system
    to gain complete control of it. Vulnerable systems should be patched immediately
    or, if a patch is not available yet, isolated to make them inaccessible to attackers.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**严重**：通常，这使得任何能够连接到系统的攻击者都可以完全控制它。易受攻击的系统应该立即修补，或者如果补丁尚不可用，则应隔离，使其无法被攻击者访问。'
- en: '**High and medium**: These may allow the attacker to significantly compromise
    the system but require special circumstances (for example, certain features enabled
    in the system) or difficult exploitation procedures. Affected systems should always
    be patched as soon as possible and may need temporary mitigation methods if a
    patch is not available (such as disabling the affected feature).'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高和中等**：这些可能允许攻击者显著危害系统，但需要特殊的情况（例如，系统中启用了某些特性）或复杂的利用过程。如果补丁不可用，受影响的系统应该尽快修补，且可能需要采取临时缓解措施（例如禁用受影响的特性）。'
- en: '**Low**: This does not give significant advantages to attackers as exploitation
    is only possible under rare circumstances.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低**：这不会给攻击者带来显著的优势，因为只有在罕见的情况下才能进行利用。'
- en: Databases assign these levels based on multiple factors such as risk level,
    the skill required of an attacker to exploit the vulnerability, the impact, and
    more. For details, you may want to read about the Common Vulnerability Scoring
    System used by NIST or the OWASP Risk Rating Methodology.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库根据多个因素（例如风险等级、攻击者利用漏洞所需的技能、影响等）来分配这些等级。有关详细信息，你可能想要阅读 NIST 使用的**常见漏洞评分系统**或
    OWASP 风险评级方法。
- en: 'Here are some common vulnerability types:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些常见的漏洞类型：
- en: Arbitrary code execution
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任意代码执行
- en: Privilege escalation
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提权
- en: Denial of service
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拒绝服务
- en: '**Arbitrary code execution** attacks tend to be the most dangerous because
    they allow attackers to introduce new program logic to the target system rather
    than merely use or abuse the software already running on it. However, there can
    be many mitigating factors. A vulnerability that allows remote unauthenticated
    attackers to execute arbitrary code by sending a specially crafted request to
    the target system over the network is the worst threat of all and may warrant
    taking the affected systems offline completely until they can be patched. However,
    if the user must be authenticated to execute the attack, it limits its impact
    greatly – to get to the arbitrary code execution stage, the attacker needs to
    steal valid user credentials first. Moreover, executing arbitrary code from a
    process that is running with highly restricted privileges and does not have access
    to any sensitive information may not benefit the attacker much.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**任意代码执行**攻击往往是最危险的，因为它们允许攻击者向目标系统引入新的程序逻辑，而不仅仅是使用或滥用系统上已运行的软件。然而，也有许多缓解因素。一个允许远程未认证攻击者通过向目标系统发送特制请求来执行任意代码的漏洞是所有威胁中最严重的，可能需要将受影响的系统完全下线，直到修补漏洞。然而，如果攻击者需要先认证才能执行攻击，那么它的影响会大大减少——要到达任意代码执行阶段，攻击者首先需要窃取有效的用户凭证。此外，从一个具有高度限制权限且无法访问任何敏感信息的进程中执行任意代码，可能对攻击者的帮助有限。'
- en: '**Privilege escalation** attacks allow legitimate users to perform actions
    that are not supposed to be available to them. Their impact can be severe – for
    example, if a vulnerability allows any authenticated user to read every file on
    the system regardless of its permissions, any machine where non-administrator
    users are allowed to log in is at risk of privacy breaches. However, before attackers
    outside of your organization can take advantage of it, they first need to find
    a way to log in. For systems where only administrators are allowed, such a vulnerability
    is not a concern at all, unless it is present at the same time with a remote arbitrary
    code execution vulnerability or credential theft.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**权限提升**攻击允许合法用户执行本不应由他们执行的操作。其影响可能非常严重——例如，如果一个漏洞允许任何已认证用户读取系统上的所有文件，不论文件权限如何，那么任何允许非管理员用户登录的机器都有隐私泄露的风险。然而，在外部攻击者利用这个漏洞之前，他们首先需要找到一种登录的方法。对于仅允许管理员访问的系统而言，除非同时存在远程任意代码执行漏洞或凭证盗窃漏洞，否则这种漏洞根本不需要担心。'
- en: Finally, **denial of service** vulnerabilities merely allow the attacker to
    compromise the availability of the system, as we already discussed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，**拒绝服务**漏洞仅仅允许攻击者妥协系统的可用性，就像我们之前讨论的那样。
- en: With this in mind, let’s discuss how to protect your system from those types
    of attacks.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 牢记这一点，接下来我们将讨论如何保护您的系统免受这些类型的攻击。
- en: Keeping your system secure
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持系统安全
- en: A common joke in information security circles is that the only perfectly secure
    system is one that is powered off. Such a system is only secure in the sense of
    integrity and confidentiality, of course – at the cost of availability. Any realistic
    scenario is always a compromise and there is always a risk; the system administrator’s
    goal is to prevent known attacks and reduce the impact of unknown ones, and every
    administrator must always be ready to respond to new threats and mitigate them.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在信息安全圈中有一个常见的笑话，那就是唯一完全安全的系统就是关机的系统。当然，这样的系统仅在完整性和机密性的意义上是安全的——以可用性为代价。任何现实场景总是一个妥协，总是存在风险；系统管理员的目标是防止已知攻击，并减少未知攻击的影响，每个管理员必须始终准备好应对新的威胁并加以缓解。
- en: Luckily, following simple guidelines can considerably reduce the risk – let’s
    discuss the general strategies and tactics to prevent specific attack types.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，遵循一些简单的指导原则可以大大降低风险——接下来我们将讨论防止特定攻击类型的一般策略和战术。
- en: Reducing the attack surface
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 减少攻击面
- en: A system’s attack surface is, roughly speaking, the set of all ways to access
    it. For example, a machine that is running a web server and also a mail server
    has a larger attack surface than a system that only runs one of those. If we assume
    that vulnerabilities and configuration issues are equally probable in those services
    and can arise independently, then a system running both is twice as likely to
    be vulnerable.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的攻击面大致可以理解为访问系统的所有方式。例如，一个同时运行着web服务器和邮件服务器的机器，其攻击面比只运行其中之一的系统要大。如果我们假设这些服务中的漏洞和配置问题发生的概率相同且可以独立出现，那么运行这两项服务的系统就有两倍的可能性受到攻击。
- en: Of course, many real systems need to provide both services – for example, an
    email provider needs mail servers and a website for customers. Reducing the attack
    surface is not about running fewer services, but rather about isolating services
    from one another and, ideally, from attackers.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，许多真实的系统需要同时提供多项服务——例如，电子邮件提供商需要邮件服务器和面向客户的网站。减少攻击面并不是减少服务的数量，而是将服务彼此隔离，并且理想情况下，要将它们与攻击者隔离开来。
- en: For example, a typical web application stack involves application servers and
    database servers. Most of the time, there is no reason for database servers to
    be publicly accessible – it is always a good idea to restrict access to them to
    the internal network. Moreover, application servers do not need to be *directly*
    publicly accessible either – as we discussed in [*Chapter 13*](B18575_13.xhtml#_idTextAnchor216),
    *High Availability*, they can be kept behind a load balancer. Not only will a
    load balancer improve the system’s availability but it will also reduce the attack
    surfaces that are available to attackers from the public internet. Additionally,
    it can provide rate limiting and a threat detection system and shield application
    servers from at least some attack traffic.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个典型的 Web 应用堆栈包括应用服务器和数据库服务器。大多数情况下，数据库服务器不需要对外公开访问——将其访问限制在内部网络中总是一个好主意。此外，应用服务器也不需要*直接*对外公开——正如我们在[*第13章*](B18575_13.xhtml#_idTextAnchor216)中讨论的内容，*高可用性*，它们可以被放置在负载均衡器后面。负载均衡器不仅能提高系统的可用性，还能减少攻击者通过公共互联网能够接触到的攻击面。此外，它还可以提供速率限制和威胁检测系统，至少能在一定程度上保护应用服务器免受部分攻击流量的影响。
- en: Compartmentalization and privilege separation
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**隔离与权限分离**'
- en: A long time ago, the only way to isolate different components of a system from
    one another was to run them on different physical machines. This approach is very
    expensive and is only practiced when there are also significant reasons to do
    so – for example, applications designed to handle high loads have to use separate
    databases and application servers simply to meet their performance requirements,
    rather than solely to reduce the attack surface of the system.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 很久以前，系统中不同组件之间唯一的隔离方法是将它们运行在不同的物理机器上。这种方法成本很高，通常只有在有充分理由的情况下才会采用——例如，设计用来处理高负载的应用程序必须使用独立的数据库和应用服务器，以满足其性能要求，而不仅仅是为了减少系统的攻击面。
- en: However, in the last two decades, there have been many more granular methods
    to isolate processes, even on commodity hardware. Virtualization allows you to
    run multiple instances of operating systems on a single physical machine, and
    modern virtual machine managers make it easy to spawn them – not to mention cloud
    platforms that allow VMs to be spawned with your operating system of choice with
    a single click or API call.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在过去二十年里，出现了许多更细粒度的方法来隔离进程，即使是在普通硬件上。虚拟化技术使你可以在单一物理机器上运行多个操作系统实例，现代虚拟机管理器使得启动虚拟机变得简单——更不用说云平台，它们可以通过单一点击或
    API 调用来启动你选择的操作系统的虚拟机。
- en: Apart from full virtualization, there are many ways to isolate applications
    on a single machine from one another. Those include `chroot` environments, containers,
    and mandatory access control systems.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 除了完全虚拟化外，还有许多方法可以在单台机器上隔离应用程序。包括`chroot`环境、容器和强制访问控制系统。
- en: Using chroot
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 chroot
- en: The oldest way to completely separate processes is `chroot`. Technically, `chroot`
    (change root) is a system call in the kernel that changes the root directory for
    a process. A process whose root directory was changed no longer has access to
    any files outside of it – to that process, it looks as if its directory is all
    that exists in the system. Setting up a `chroot` environment for a process by
    hand may be a time-consuming task, so many distributions provide special packages
    to simplify the process.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 完全隔离进程的最古老方法是`chroot`。从技术上讲，`chroot`（更改根目录）是内核中的一个系统调用，用于更改进程的根目录。根目录已更改的进程将无法访问根目录以外的任何文件——对该进程而言，系统中似乎只有它所在的目录。手动为进程设置`chroot`环境可能是一个耗时的任务，因此许多发行版提供了特殊的包来简化该过程。
- en: 'For example, Fedora provides an easy way to run ISC BIND (also known as `named`),
    a popular DNS server, in `chroot`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Fedora 提供了一种简单的方法来在`chroot`环境中运行 ISC BIND（也称为`named`），这是一款流行的 DNS 服务器：
- en: '[PRE0]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, the directory that will serve as a limited root for the BIND
    process mimics the real root in that it also has `/dev` and `/proc` hierarchies
    – global versions of those directories become unavailable to the process.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，作为 BIND 进程的限制根目录的目录与真实根目录类似，它也有 `/dev` 和 `/proc` 层级 —— 这些目录的全局版本将无法被进程访问。
- en: Thus, even if attackers manage to inject malicious code into the BIND process
    using a remote code execution vulnerability, they will be unable to read any files
    outside `/var/named/chroot`. However, they will still be free to interact with
    other processes on the system. If deeper isolation is required, you can use containers
    instead.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，即使攻击者利用远程代码执行漏洞成功将恶意代码注入到 BIND 进程中，他们也无法读取 `/var/named/chroot` 以外的任何文件。然而，他们仍然可以与系统上的其他进程进行交互。如果需要更深层次的隔离，可以改用容器。
- en: Using containers
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用容器
- en: The Linux kernel provides a container technology named **LXC**. It consists
    of multiple sub-components such as process groups, control groups, and network
    namespaces. Creating container environments and launching them by hand is a laborious
    process, so people created tools that automated the process, as well as registries
    of ready-to-use container images.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 内核提供了一种名为 **LXC** 的容器技术。它由多个子组件组成，例如进程组、控制组和网络命名空间。手动创建容器环境并启动它们是一个繁琐的过程，因此人们创建了可以自动化该过程的工具，并且有了可供使用的容器镜像注册表。
- en: 'At this time, the most popular tool for managing containers on Linux is Docker,
    although there are alternatives to it, such as Podman. We will demonstrate process
    isolation by launching a Fedora image using Docker:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，Linux 上最流行的容器管理工具是 Docker，尽管也有替代工具，例如 Podman。我们将通过使用 Docker 启动 Fedora 镜像来演示进程隔离：
- en: '[PRE1]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, when we start a `bash` shell process in a container, from inside
    the container, it looks as if it is the only process in the system. None of the
    processes of the host system, such as systemd or the Docker daemon process, are
    visible and processes inside the container cannot interact with them in any way.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，当我们在容器中启动一个 `bash` shell 进程时，从容器内部看，它就像是系统中的唯一进程。宿主系统中的进程（例如 systemd 或
    Docker 守护进程）对容器来说是不可见的，容器中的进程也无法与它们进行任何交互。
- en: Using mandatory access control
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用强制访问控制
- en: Finally, there are ways to grant users and processes different capabilities
    – ideally, only the capabilities they need to function. Such mechanisms are known
    as **Mandatory Access Control** (**MAC**) systems – as opposed to the classic
    **Discretionary Access Control** – that is, the Unix file permission system.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，存在授予用户和进程不同能力的方式 —— 理想情况下，只有它们需要的能力才能正常运行。这种机制被称为 **强制访问控制** (**MAC**) 系统
    —— 与经典的 **自主访问控制**（即 Unix 文件权限系统）不同。
- en: The most popular MAC system for Linux these days is **Security Enhanced Linux**
    (**SELinux**), although there are less common alternatives as well – most notably,
    the AppArmor kernel module.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当前，Linux 最流行的 MAC 系统是 **安全增强 Linux**（**SELinux**），尽管也有一些不太常见的替代方案 —— 最著名的就是
    AppArmor 内核模块。
- en: These days, many Linux distributions enable SELinux by default and include capabilities
    and object contexts for popular services.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，许多 Linux 发行版默认启用 SELinux，并为流行服务包含了相应的能力和对象上下文。
- en: 'You can check whether SELinux is enabled on your system with the `getenforce`
    command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `getenforce` 命令检查系统是否启用了 SELinux：
- en: '[PRE2]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In `Enforcing` mode, SELinux disallows actions not permitted by capabilities
    granted to a user or a process – for example, a process without the `can_network_connect`
    capability will not be able to initiate any network connections. In `Permissive`
    mode, SELinux will generate alerts in the system log but not enforce capabilities
    – this mode is ideal for testing. Finally, if the mode is `Disabled`, SELinux
    does not perform any capability checks at all.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Enforcing` 模式下，SELinux 会禁止用户或进程未被授权的操作 —— 例如，若进程没有 `can_network_connect`
    能力，它将无法发起任何网络连接。而在 `Permissive` 模式下，SELinux 会在系统日志中生成警报，但不会强制执行能力 —— 该模式适合用于测试。最后，如果模式为
    `Disabled`，则 SELinux 完全不执行任何能力检查。
- en: Configuring SELinux policies is a subject far beyond the scope of an introductory
    book. However, if you choose to keep SELinux enabled, you will often need to know
    how to grant processes access to files.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 配置 SELinux 策略是一本入门书籍无法涵盖的主题。然而，如果你决定启用 SELinux，你将经常需要知道如何授予进程对文件的访问权限。
- en: For example, in the Apache HTTPd configuration files, it is possible to specify
    any directory as a website root. That is also a possible security problem if an
    attacker gains control of the Apache process. That is why, in Fedora, the maintainers
    of that package introduced a set of special SELinux contexts for files that must
    be accessible to the web server.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 Apache HTTPd 配置文件中，可以将任何目录指定为网站根目录。如果攻击者控制了 Apache 进程，这也可能带来安全问题。这就是为什么在
    Fedora 中，该软件包的维护者为必须让 web 服务器访问的文件引入了一组特殊的 SELinux 上下文。
- en: 'You can view the SELinux contexts of a file by adding the `-Z` option to the
    `ls` command. For example, the `/var/lib/httpd` directory has the `httpd_var_lib_t`
    context, which grants read access:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在 `ls` 命令中添加 `-Z` 选项来查看文件的 SELinux 上下文。例如，`/var/lib/httpd` 目录具有 `httpd_var_lib_t`
    上下文，授予读取权限：
- en: '[PRE3]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Website directories that may be writable use a different context – `httpd_sys_content_t`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 可能是可写的网页目录使用不同的上下文 —— `httpd_sys_content_t`：
- en: '[PRE4]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you set a website root to a newly created directory elsewhere, the Apache
    process will not have access to it because it lacks the required context, even
    if it should be readable to it according to Unix permissions. You can grant it
    access using the `chcon` command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将网站根目录设置为一个新创建的其他目录，Apache 进程将无法访问该目录，因为它缺少所需的上下文，即使该目录根据 Unix 权限应该是可读的。你可以使用`chcon`命令授予它访问权限：
- en: '[PRE5]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There are many more possibilities for creating flexible and fine-grained security
    policies with SELinux, but beginners should certainly start by using the distribution
    defaults first.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SELinux 创建灵活且细粒度的安全策略还有很多其他可能性，但初学者应当先从使用发行版默认配置开始。
- en: Preventing credential theft and brute-force attacks
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防止凭证盗窃和暴力破解攻击
- en: Credential theft must be addressed at user workstations. There is no definitive
    way to prevent credential theft, so you should strive to protect your laptop or
    desktop system from attacks in general – keep it up to date, protect it from malware,
    and avoid falling for social engineering attacks such as phishing letters that
    contain malicious links.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 凭证盗窃必须在用户工作站上处理。没有绝对的方法可以防止凭证盗窃，因此你应该努力保护你的笔记本或台式系统免受攻击 —— 保持系统更新，保护免受恶意软件侵害，避免陷入如钓鱼邮件等社会工程攻击，其中包含恶意链接。
- en: When it comes to brute-force attacks, there are two complementary approaches
    – keeping passwords hard to guess and limiting authentication attempts.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于暴力破解攻击，有两种互补的策略 —— 保持密码难以猜测和限制认证尝试次数。
- en: 'Most Linux distributions have a PAM module named `pam_pwquality.so` enabled
    by default, which prevents unprivileged users from using insecure passwords. You
    can verify this by trying to set your password to something way too short or a
    simple dictionary word:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Linux 发行版默认启用了一个名为 `pam_pwquality.so` 的 PAM 模块，它防止非特权用户使用不安全的密码。你可以通过尝试设置一个非常短的密码或简单的字典词来验证这一点：
- en: '[PRE6]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The backend that it uses for password strength checking is called `cracklib`.
    It normally keeps its data in `/usr/share/cracklib`. Its dictionary is in a binary
    format but it offers tools for manipulating those dictionary files and checking
    password strength without actually trying to set a password:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 它用于密码强度检查的后端叫做 `cracklib`。它通常将数据保存在 `/usr/share/cracklib` 中。其字典是二进制格式，但它提供了用于操作这些字典文件和检查密码强度的工具，无需实际设置密码：
- en: '[PRE7]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that the root user is exempt from password quality checking and is free
    to set any password for any user.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，root 用户不受密码质量检查的限制，可以为任何用户设置任何密码。
- en: 'There is also a tool for generating secure random passwords named **pwgen**
    that is present in the package repositories of most Linux distributions. It allows
    you to specify whether passwords should be completely random, what characters
    they should contain, how long they should be, and how many passwords to generate
    at once:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个名为 **pwgen** 的工具可以生成安全的随机密码，这个工具存在于大多数 Linux 发行版的软件包仓库中。它允许你指定密码是否应完全随机，密码应包含哪些字符，密码的长度，及一次生成多少个密码：
- en: '[PRE8]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Rate limiting is a broad subject and its setup varies between services and applications.
    However, there are also general integrated solutions that support multiple services,
    such as **fail2ban**.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 限制速率是一个广泛的话题，且其设置在不同的服务和应用程序之间有所不同。然而，也有一些通用的集成解决方案支持多个服务，例如**fail2ban**。
- en: Reducing the risk of software vulnerabilities
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 降低软件漏洞的风险
- en: The best way to ensure that your system does not have vulnerable software in
    it is to use software from your distribution repositories and install updates
    on time. Installing packages by hand should be avoided because such packages will
    not automatically receive updates from the distribution maintainers. If they are
    required, you should make sure you subscribe to their release announcements and
    check for updates yourself.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 确保系统没有脆弱软件的最佳方法是使用来自发行版仓库的软件，并按时安装更新。应该避免手动安装软件包，因为这些软件包不会自动接收发行版维护者的更新。如果确实需要，您应该确保订阅它们的发布公告，并自行检查更新。
- en: A lot of the time, vulnerabilities are found in already released software versions
    rather than during development – this situation is called a **zero-day vulnerability**
    (often shortened to **0day**). Sometimes, they turn out to have existed for months
    or even years before their discovery. Updated packages that fix such vulnerabilities
    may appear later than malicious actors start exploiting them. In that case, software
    maintainers often suggest a temporary mitigation strategy that may involve changing
    configuration options, disabling specific features, or making other changes in
    the system to make the attack harder to execute. For this reason, it is also a
    good idea to follow the blogs or mailing lists or the distribution and software
    projects that you use often.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 很多时候，漏洞是在已经发布的软件版本中发现的，而不是在开发过程中 – 这种情况被称为**零日漏洞**（通常简称为**0day**）。有时，这些漏洞在被发现之前已经存在了几个月甚至几年。修复这些漏洞的更新包可能会晚于恶意行为者开始利用它们的时间。在这种情况下，软件维护者通常会建议一种临时的缓解策略，可能包括更改配置选项、禁用特定功能或对系统进行其他更改，以使攻击更难执行。因此，关注您常用的发行版和软件项目的博客、邮件列表也是一个好主意。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about various types of attacks on computer systems,
    attackers’ motivation to execute them, and possible consequences for users.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了计算机系统受到的各种攻击类型、攻击者执行攻击的动机，以及这些攻击可能给用户带来的后果。
- en: We also learned about common strategies for keeping your systems protected from
    attacks. However, we only scratched the surface – information security is a large
    field, and keeping your knowledge of it up to date and your systems safe is a
    life-long pursuit for every system administrator.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还了解了保持系统免受攻击的常见策略。然而，我们仅仅触及了表面——信息安全是一个庞大的领域，保持对它的知识更新并确保系统安全是每个系统管理员终身的追求。
- en: Further reading
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解本章中涉及的更多内容，请查阅以下资源：
- en: 'NIST vulnerability database: [https://nvd.nist.gov/](https://nvd.nist.gov/%0D)'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'NIST漏洞数据库: [https://nvd.nist.gov/](https://nvd.nist.gov/%0D)'
- en: 'Common Vulnerability Scoring System: [https://nvd.nist.gov/vuln-metrics/cvss](https://nvd.nist.gov/vuln-metrics/cvss%0D)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '常见漏洞评分系统: [https://nvd.nist.gov/vuln-metrics/cvss](https://nvd.nist.gov/vuln-metrics/cvss%0D)'
- en: 'OWASP Risk Rating Methodology: [https://owasp.org/www-community/OWASP_Risk_Rating_Methodology](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology%0D)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'OWASP风险评估方法论: [https://owasp.org/www-community/OWASP_Risk_Rating_Methodology](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology%0D)'
- en: 'Fail2Ban rate limiting daemon: [https://www.fail2ban.org](https://www.fail2ban.org)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Fail2Ban限速守护进程: [https://www.fail2ban.org](https://www.fail2ban.org)'
