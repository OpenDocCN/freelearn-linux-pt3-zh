- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Network Services with Automation – Introduction to Red Hat Linux Networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will introduce you to the exciting world of Red Hat Enterprise
    Linux networking. We will go over the intricacies of setting up the network interfaces
    to start. This will be done by using the `nmtui` command, which opens a visual
    tool as the main option. With this knowledge, you will begin to understand how
    your server connects to the outside world through an understanding of network
    interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Further chapters will delve deeper into other network applications that can
    be used to automatically set things, such as the **domain name system** (**DNS**),
    and gain an IP through **Dynamic Host Configuration Protocol** (**DHCP**). In
    this chapter, we are going to showcase how to set up both static and dynamic configurations
    and ensure they start when the server is turned on. This will ensure you always
    have network connectivity to the world when you need it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The beginning of your journey into Linux networking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting to know what the different terms mean and how they apply to what you
    are trying to achieve
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your basic network profile and getting online so you can get applications
    up and running
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automation of network services using Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following items are necessary for following along with the chapter if you
    would like to gain hands-on knowledge of the systems.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up GitHub access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Please refer to [*Chapter 1*](B18607_01.xhtml#_idTextAnchor016), *Block Storage
    – Learning How to Provision Block Storage on Red Hat Enterprise Linux*, for information
    about how to gain access to this book’s GitHub repository. You will find the Ansible
    automation playbooks for this chapter at the following link: [https://github.com/PacktPublishing/Red-Hat-Certified-Specialist-in-Services-Management-and-Automation-EX358-Exam-Guide/tree/main/Chapter03](https://github.com/PacktPublishing/Red-Hat-Certified-Specialist-in-Services-Management-and-Automation-EX358-Exam-Guide/tree/main/Chapter03).
    Remember these are the suggested playbooks and are not the only way you can write
    them to make the playbooks work for you.'
  prefs: []
  type: TYPE_NORMAL
- en: You can always change them by using `raw`, `shell`, or `cmd` to achieve the
    same results, but we are demonstrating the best way to accomplish our goals. Also,
    keep in mind that we are not using the FCQN that is needed in future versions
    of Ansible, as that will not be part on the exam as it is testing against Ansible
    2.9.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your lab environment for networking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to the lab environment setup from the previous chapters if not
    already completed. You can also use this opportunity to create snapshots of your
    environment so that you can revert to them and do the hands-on exercises over
    and over again. This is outlined in [*Chapter 2*](B18607_02.xhtml#_idTextAnchor027),
    *Network File Storage – Expanding Your Knowledge of How to Share* *Data* .
  prefs: []
  type: TYPE_NORMAL
- en: The beginning of your journey into Linux networking!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are fewer things more important than networking in today’s world. You
    may not realize it, but you are always connected wherever you go. This can be
    from your home internet to your cell phone or the Wi-Fi at your local coffee shop.
    These all run on networks that interconnect our worlds. This is what allows you
    to get to Google.com or Amazon.com to search for or buy things. Without networking,
    none of this would be possible as you couldn’t reach your destination. We will
    talk about networking in more depth over the next three chapters, but really,
    networking is used in all of this book – from SAN connectivity for storage to
    when you are connecting to a database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting to know what the different terms mean and how they apply to what you
    are trying to achieve!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to go over many different terms, starting out with abbreviations
    such as **ETH**, which stands for **Ethernet**. This is the physical connection
    used to plug your tower computer into a switch or router. This leads to what ETH
    uses to connect to the world, **Internet Protocol** (**IP**), or think of it as
    part of your home address to the world. And the other part of the address is your
    **media access control** (**MAC**) address, which is your unique hardware identifying
    number that is part of the physical ETH port. Think of IP as your city, state,
    and zip code, and your MAC as your street address. With the IP and MAC address
    put together, you are able to send and receive information as you would through
    the postal service only at over 1,000 times the speed. First up, we are going
    to create a basic internet connection manually and through automation.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your basic network profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here we will focus on getting online so you can get applications up and running!
    First, we are going to configure our interface directly through network scripts.
    We want to determine the interface name we would like to change with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is fully illustrated in the output of the command in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Output from an IP command showing the interfaces](img/Figure_3.01_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – Output from an IP command showing the interfaces
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we will be manipulating the `enp0s3` interface. This is the main
    interface, as the others are bridges and are not physical. The first interface
    is the loopback, which is used for the localhost connectivity for on-server communication.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can go to `/etc/sysconfig/network-scripts/`, where we will only find
    `ifcfg-enp0s3`. This is the interface configuration of the `enp0s3` connection.
    We can view it with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the command looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – /etc/sysconfig/network-scripts/ifcfg-enp0s3 configuration](img/Figure_3.02_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – /etc/sysconfig/network-scripts/ifcfg-enp0s3 configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'Please note that before you make any changes, you should make a copy of this
    file. Also, note that you will need to use the `sudo` command to escalate privileges
    have root privileges to configure this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After copying the file so that you have a backup, you can now make your changes
    to the interface configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of a change is to disable IPV6 DHCP, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – A change made to the ifcfg-enp0s3 configuration file](img/Figure_3.03_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – A change made to the ifcfg-enp0s3 configuration file
  prefs: []
  type: TYPE_NORMAL
- en: This is just one of many things you can change. You can learn about all that
    you can modify using the supplied documentation during the test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Secondly, we are going to use the `/etc/sysconfig/network-scripts/ifcfg-enp0s3`.
    Now, keep in mind there is a very well-documented **manual** (**man**) page for
    nmcli, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Man page for the nmcli command](img/Figure_3.04_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – Man page for the nmcli command
  prefs: []
  type: TYPE_NORMAL
- en: 'This documentation will give you all of the information you need to control
    your interface. Let’s try changing the enp0s3 DNS for our interface, as shown
    in the preceding screenshot. Using the man page, we can see what command we require
    in the examples to meet these variable command needs, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – Example of the required nmcli command string from the man page](img/Figure_3.05_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – Example of the required nmcli command string from the man page
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, here we can use the following command to append a change to
    the dns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This change has only taken effect in the startup script of the interface. This
    interface change can now be seen in the network scripts, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Results of the nmcli command string adding DNS3=4.4.4.4](img/Figure_3.06_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – Results of the nmcli command string adding DNS3=4.4.4.4
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to make the interface change now, we need to bring down the interface
    and then bring it back up. This can be accomplished by using the following commands,
    but ensure that you are on the machine via **out-of-band management** (**OBM**),
    as you will lose connectivity if this is your SSH connection to the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we are going to use the graphical interface through the **NetworkManager
    text user interface** (**nmtui**) command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of running the `nmtui` command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – The nmtui tool invoked, and options first presented](img/Figure_3.07_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – The nmtui tool invoked, and options first presented
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose **Edit** **a connection**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Interfaces that are already present and available to change
    using nmtui](img/Figure_3.08_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – Interfaces that are already present and available to change using
    nmtui
  prefs: []
  type: TYPE_NORMAL
- en: For this exercise, choose **Ethernet** | **enp0s3**.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see here, **Profile name** matches the name of the interface. The
    **Device** field adds another element in the form of the MAC address. The **Automatic**
    configuration option dictates using a DHCP server to obtain your IP address automatically.
    We will get more into that in later chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – Using nmtui to display the network interface and information](img/Figure_3.09_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – Using nmtui to display the network interface and information
  prefs: []
  type: TYPE_NORMAL
- en: 'Here you can see the information, which in our case is manually set so that
    we do not have IP changes in order to ensure the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – Using nmtui to make a change](img/Figure_3.10_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.10 – Using nmtui to make a change
  prefs: []
  type: TYPE_NORMAL
- en: This is also where you set your gateway or the address for getting out to the
    rest of the network, in our case, `192.168.1.1`, and DNS servers, and since our
    router sits on `192.168.1.1` also runs DNS from AT&T, for my purposes, it is my
    first DNS address. I follow this with a backup of a well-known DNS, such as Google’s
    `8.8.8.8`.
  prefs: []
  type: TYPE_NORMAL
- en: From there you can set other things, such as search domains and specific routing.
    These are a few more advanced areas that we don’t need to cover right now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within this screen is where you can set your IPV6 information as well, such
    as automatically from a DHCP server or link-local to a manually set one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11 – Exiting nmtui correctly to save changes](img/Figure_3.11_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.11 – Exiting nmtui correctly to save changes
  prefs: []
  type: TYPE_NORMAL
- en: All of the configuration settings look in order for our purposes, and any of
    them can be changed later if found to be incorrect. Just make sure that you hit
    the *Num Lock* key as needed, or it will not accept your input.
  prefs: []
  type: TYPE_NORMAL
- en: Once complete, choose **OK** or **Cancel**. We are going to cancel, as this
    is how we would like the interface setup to be.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, if you made changes you have to reset the connection for them to take
    effect. If you have direct access, you can go back to the **Activate a connection**
    option within the nmtui screen. This activation window is shown as follows in
    the nmtui GUI screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12 – Using nmtui to activate and deactivate network interfaces that
    have been created](img/Figure_3.12_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.12 – Using nmtui to activate and deactivate network interfaces that
    have been created
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, choose **Deactivate** followed by **Reactivate**. You can only
    do this if you have direct access; if not, you will lose connectivity to your
    server. There is another way of testing this if you know your settings are correct
    or hope they are if you don’t have direct server OBM. Just as with nmcli, we can
    repurpose one of those commands we learned earlier. This has to be run as root
    in order to ensure no password prompts or other things hang and cause the interface
    to remain down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Please understand that the recommendation is always to have remote onsite support
    or OBM, having had an unfortunate experience and a very long nervous car ride
    later.
  prefs: []
  type: TYPE_NORMAL
- en: Automation of network services using Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Automating the setup of interfaces can be as simple or complex as you want
    to make it. Our recommendation is to start with installing the ansible galaxy
    system roles known as **Red Hat Enterprise Linux** (**RHEL**) system roles since
    we are using RHEL and not just any Linux. This can be accomplished by checking
    to see whether they are installed by ansible-galaxy first using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This confirms that the network role is missing. Running the following command
    installs the roles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from this screenshot, the roles are now installed by running
    the `$ ansible-galaxy` `list` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13 – Screen seen after installing the system roles](img/Figure_3.13_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.13 – Screen seen after installing the system roles
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get explanations on the different system roles or examples in the following
    location: `/usr/share/doc/rhel-system-roles-<version>/SUBSYSTEM/`. The command
    for `network` looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then look at the README or any of the numerous examples. The README
    is illustrated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.14 – Examples of playbooks you can use to create the skeleton of
    your playbook](img/Figure_3.14_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.14 – Examples of playbooks you can use to create the skeleton of your
    playbook
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now set up an inventory for the playbook with the proper IP and Mac
    addresses. If they are not known, we can set different things. Let’s start simple
    and just add the current IP of `rhel1` as shown in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Move back to the home directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a playbook folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Move into the working directory of the playbook folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the inventory file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As shown in the following screenshot, we have the full inventory with a group
    for `rhel1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.15 – Playbook inventory in order to pinpoint changes](img/Figure_3.15_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.15 – Playbook inventory in order to pinpoint changes
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s write a playbook based on one of the items in the `/usr/share/doc/rhel-system-roles/network/`directory.
    Let’s make a change to the DNS record.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, to see what a playbook looks like using the network roles since this
    will be our first introduction, please expand upon `/usr/share/doc/rhel-system-roles/network/example-eth_simple_auto-playbook.yml`.
    This is illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 3.16 – Viewing \uFEFFan example in order to know what to do to set\
    \ \uFEFFup the playbook](img/Figure_3.16_B18607.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 3.16 – Viewing an example in order to know what to do to set up the playbook
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see here, it is slightly different as we are laying out the variables
    and then the role runs the playbook. Take that structure and apply it to your
    playbook. You can see in the following screenshot that we have changed some of
    the items such as hosts and names to match our systems:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 3.17 – \uFEFFUsing an example from \uFEFF/usr/share/doc/rhel-system-roles/network/\
    \ to start \uFEFFthe playbook](img/Figure_3.17_B18607.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 3.17 – Using an example from /usr/share/doc/rhel-system-roles/network/
    to start the playbook
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, move on to checking out the `README.md` file for the variables
    you need. By exploring the `README.md` file, you can get examples towards the
    bottom, as shown in the following screenshot of a persistent connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.18 – Using the README.md file from the systems role docs for more
    information](img/Figure_3.18_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.18 – Using the README.md file from the systems role docs for more information
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to take that snippet and put it in our playbook, ensuring we change
    the information as needed (such as the MAC and IP addresses). We are going to
    combine the initial copy from the system and change it around to meet our static
    connection. This will allow us to add the DNS values. This can be seen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.19 – Combining the two examples and the server information to create
    a complete playbook](img/Figure_3.19_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.19 – Combining the two examples and the server information to create
    a complete playbook
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, with all of the playbook options all set, we should be able to merge the
    changes to the interface, and it should have the new DNS records. Here are the
    records before running the playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 3.20 – Verifying that the \uFEFFchanges are not in place](img/Figure_3.20_B18607.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 3.20 – Verifying that the changes are not in place
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will run the playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the following screenshot, it finished without any issues
    and shows one orange change, which should be our DNS entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.21 – Running the playbook](img/Figure_3.21_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.21 – Running the playbook
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can check the DNS records for `rhel1` and see whether they have changed
    correctly. As seen from the following screenshot, the changes were successful:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 3.22 – Verifying the change\uFEFFs took effect](img/Figure_3.22_B18607.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 3.22 – Verifying the changes took effect
  prefs: []
  type: TYPE_NORMAL
- en: There are many changes you can use with the system roles that are not limited
    to just networking. These can be used for other parts of the exam and provide
    a helping hand that may be needed. So, keep in mind `/usr/share/doc/rhel-system-roles/`
    from the installation we did previously, which is installed as a package.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This concludes our first steps into the world of networking. I hope learning
    about setting up your interfaces and changing how you talk to the world has helped
    you grow in some small way. In this chapter, you learned how to configure a network
    interface both manually and automatically. This allowed you to connect your server,
    thus, your application to the world using either a public or a private IP. Using
    tools such as nmtui and man pages make configuring these values more user-friendly.
    I hope we touched on all the parts you were particularly excited to see. We will
    go more in-depth into working with interfaces with **Link Aggregation** in our
    next chapter. This allows for many different traffic behaviors that can help you
    in your day-to-day job or if you need to set up failover, as I have in my home
    lab. For instance, if my primary internet connection goes down, my cellular network
    connection picks up where it left off. We are headed into more exciting areas
    of networking with many things to learn following that. Until the next chapter,
    breathe and remember this is a journey and it takes one step at a time. Also,
    don’t forget that the documents are a part of the exam area. Just do not rely
    too heavily on them as time is key and is very limited.
  prefs: []
  type: TYPE_NORMAL
