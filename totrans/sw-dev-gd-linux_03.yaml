- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Service Management with systemd
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 systemd 进行服务管理
- en: 'In the previous chapter, you learned about how processes work in Linux. Now
    it’s time to look at how these processes are wrapped in an additional layer of
    abstraction: the *systemd service*.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了 Linux 中进程的工作原理。现在是时候看看这些进程如何被包装在一个额外的抽象层中：*systemd 服务*。
- en: The commands you’ve seen so far – `ls`, `mv`, `rm`, `ps`, and others – run in
    the foreground, attached to your shell session. You run them, the programs do
    their job, and then they exit. However, not all programs run like this.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止你看到的命令——`ls`、`mv`、`rm`、`ps` 等——都在前台运行，并且附属于你的 shell 会话。你运行它们，程序完成任务后退出。然而，并非所有程序都像这样运行。
- en: Services, also frequently called daemons, are long-running processes that run
    in the background. These can be things like databases and web servers, but also
    regular system services like your network manager, your desktop environment, and
    so on. These long-running background services are typically started and controlled
    via an **init** system such as **systemd**.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 服务，也常被称为守护进程，是在后台长时间运行的进程。这些可以是数据库和 Web 服务器，也可以是常规的系统服务，如网络管理器、桌面环境等。这些长时间运行的后台服务通常通过
    **init** 系统（如 **systemd**）启动和控制。
- en: '**init** here refers to the first process your operating system kernel starts,
    and it is the job of this process to take care of starting any other processes.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**init** 在这里指的是操作系统内核启动的第一个进程，而这个进程的任务是负责启动其他所有进程。'
- en: '**systemd** services are controlled using a command line utility called `systemctl`.
    It will be used for starting and stopping services, for example, to restart a
    service that’s misbehaving or to reload one whose configuration has changed.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**systemd** 服务通过名为 `systemctl` 的命令行工具进行控制。它用于启动和停止服务，例如，重启一个出现故障的服务或重新加载一个配置已更改的服务。'
- en: If you’re bouncing around the book and haven’t read the previous chapter yet,
    you can still get value out of this one. For now, just think of a process as any
    running command, application, or service. When you’re ready to learn about how
    processes work in more detail, you can read *Chapter 2*, *Working with Processes*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在跳读本书，尚未阅读上一章，你仍然能从本章中获得价值。现在，只需将进程理解为任何正在运行的命令、应用程序或服务。当你准备好更详细地了解进程如何工作时，你可以阅读
    *第2章，处理进程*。
- en: 'In this chapter, you’ll learn all about:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下内容：
- en: 'The command you’ll use to interact with `systemd` services: `systemctl`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你将用来与 `systemd` 服务交互的命令：`systemctl`
- en: A slightly deeper dive into what an init system does, and how `systemd` specifically
    fills this role
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更深入地了解初始化系统的作用，以及 **systemd** 如何特别担任这一角色
- en: Managing services with `systemctl`
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `systemctl` 管理服务
- en: A few tips for working in container environments (like Docker containers), which
    usually don’t have the kind of robust service management layer we describe in
    this chapter
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些在容器环境中工作的提示（如 Docker 容器），这些环境通常没有我们在本章描述的那种强大的服务管理层。
- en: '**Note**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: This chapter applies to Linux only – macOS and Windows (and even other Unixes)
    manage processes using different tools. In fact, different Linux distributions
    use different tools, however, `systemd` is the most widely used one. While the
    concepts are similar, knowing how modern Linux environments manage services is
    most useful for developers.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章仅适用于 Linux – macOS 和 Windows（甚至其他 Unix 系统）使用不同的工具来管理进程。实际上，不同的 Linux 发行版使用不同的工具，但
    `systemd` 是最广泛使用的。虽然概念相似，但了解现代 Linux 环境如何管理服务对开发者而言最为有用。
- en: The basics
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础知识
- en: Linux services are background processes that run on a Linux system to perform
    specific tasks. They are similar to Windows services or daemons on macOS.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 服务是运行在 Linux 系统上的后台进程，用于执行特定任务。它们类似于 Windows 服务或 macOS 上的守护进程。
- en: 'Most non-containerized Linux environments use `systemd` to manage services.
    The two tools you’ll use to interact with `systemd` are:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数非容器化的 Linux 环境使用 `systemd` 来管理服务。你将使用两个工具来与 `systemd` 进行交互：
- en: '`systemctl`: Controls services (called ‘units’ in `systemd` nomenclature)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`systemctl`：控制服务（在 `systemd` 的术语中称为“单元”）'
- en: '`journalctl`: Lets you work with system logs'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`journalctl`：让你与系统日志互动'
- en: We’ll cover `systemctl` in this chapter, and `journalctl` in *Chapter 16*, *Monitoring
    Application Logs*, later in the book.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中介绍 `systemctl`，而 `journalctl` 将在 *第16章，监控应用日志* 中详细介绍。
- en: '`systemd` is a system and service manager for Linux that provides a standard
    way to manage services. It is now widely used as the default init system for most
    Linux distributions. Many Linux distributions previously made use of the SysV
    init systems, which come from Unix and are still used by many modern Unix operating
    systems. Others, such as Alpine and Gentoo Linux, use OpenRC as their init systems.
    There are many more init systems out there, however, the overwhelming majority
    of Linux distributions now use `systemd`. With `systemd`, services can be started,
    stopped, restarted, enabled (set to start at boot), and disabled, and their status
    can be checked. Services are defined by a *unit file*, which specifies exactly
    how the service should be managed by systemd.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`systemd` 是一个针对 Linux 的系统和服务管理器，提供了一种管理服务的标准方式。它现在被广泛用作大多数 Linux 发行版的默认初始化系统。许多
    Linux 发行版以前使用过来自 Unix 的 SysV 初始化系统，许多现代 Unix 操作系统仍在使用它。还有一些，比如 Alpine 和 Gentoo
    Linux，使用 OpenRC 作为它们的初始化系统。然而，有许多其他的初始化系统，但绝大多数 Linux 发行版现在都使用 `systemd`。使用 `systemd`，服务可以被启动、停止、重启、启用（设置为开机启动）或禁用，并且可以检查它们的状态。服务通过*单元文件*来定义，该文件明确指定服务应如何由
    `systemd` 管理。'
- en: 'To manage services with `systemd`, you can use the following basic commands
    (we’ll dive into each one later in this chapter):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过 `systemd` 管理服务，你可以使用以下基本命令（我们将在本章稍后深入讲解每个命令）：
- en: '`systemctl start <service>`: starts a service.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`systemctl start <service>`：启动一个服务。'
- en: '`systemctl stop <service>`: stops a service.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`systemctl stop <service>`：停止一个服务。'
- en: '`systemctl restart <service>`: restarts a service.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`systemctl restart <service>`：重启一个服务。'
- en: '`systemctl status <service>`: displays the current status of a service.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`systemctl status <service>`：显示服务的当前状态。'
- en: Remember that only users with root privileges (e.g., using `sudo`) can manage
    system services with `systemd`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，只有具有 root 权限的用户（例如，使用 `sudo`）才能通过 `systemd` 管理系统服务。
- en: init
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化
- en: Let’s take a quick detour to define a common term that you’ll see used often.
    In Linux, `init` – short for ‘initialization’ – is the first process that is started
    when the system boots up. Unsurprisingly, you can find it at PID 1\. init is responsible
    for managing the boot process and starting all other processes and services that
    have been configured to run on the system. It also re-parents orphaned processes
    (processes whose original parent process has died) and keeps them as its own children,
    to ensure they still behave normally.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍作绕行，定义一个你经常会看到的常用术语。在 Linux 中，`init`——即“初始化”的简称——是系统启动时首先启动的进程。毫不奇怪，你可以在
    PID 1 找到它。`init` 负责管理启动过程，并启动系统上配置为运行的所有其他进程和服务。它还会重新接管孤儿进程（即原始父进程已死亡的进程），并将它们当作自己的子进程，以确保它们的正常运行。
- en: Like almost everything in the Linux world, there are several different, mutually
    exclusive programs that can fill this role. They are all referred to as *init
    systems*, which is the general name for any software that can fill this important
    bootstrapping, initializing, and coordinating role. As mentioned previously, there
    are several init systems available for Linux, including **System V init** (**SysV**),
    OpenRC, and `systemd`. Most modern Linux systems have switched to systemd, which
    is why that’s the one we’re covering here.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 像 Linux 世界中的几乎所有事物一样，有几个不同的、互斥的程序可以填补这个角色。它们统称为*初始化系统*，这是任何可以承担这一重要引导、初始化和协调角色的软件的通用名称。如前所述，Linux
    上有多个可用的初始化系统，包括**System V init**（**SysV**）、OpenRC 和 `systemd`。大多数现代 Linux 系统已经切换到了
    `systemd`，这也是我们在这里讨论的内容。
- en: Which init system you’re using will determine how services are defined and managed,
    so keep in mind that everything you see here applies only to systemd.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用的初始化系统将决定服务的定义和管理方式，因此请记住，这里讨论的内容仅适用于 `systemd`。
- en: Processes and services
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程和服务
- en: Let’s talk about the subtle difference between processes and services. You can
    think of a service as some packaging around a piece of software that makes it
    easier to manage as a running process.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈进程和服务之间的微妙差别。你可以把服务看作是围绕一块软件进行包装的一层，它让这块软件作为正在运行的进程更易于管理。
- en: A service adds convenient features to how a program (and the resulting process
    spawned by that program) is handled by the system. For example, it lets you define
    dependencies between different processes, control startup order, add environment
    variables for the process to start with, limit resource usage, control permissions,
    and many other useful things. To tie a bow around the whole package, a service
    provides a simple name to reference your program. We’ll show you how to create
    your own service in the later *Chapter 10*, *Configuring Software*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 服务为程序（以及由该程序启动的进程）在系统中的处理方式增加了便利功能。例如，它让你能够定义不同进程之间的依赖关系，控制启动顺序，添加进程启动时的环境变量，限制资源使用，控制权限，及许多其他有用的功能。为了让这一切更加清晰，服务还为你的程序提供了一个简单的名称供引用。我们将在稍后的*第10章*，*配置软件*中向你展示如何创建你自己的服务。
- en: In the rest of this chapter, we’ll stick to managing existing services.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的其余部分，我们将专注于管理现有的服务。
- en: systemctl commands
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: systemctl命令
- en: '`systemctl` is the tool you’ll use to manage the services that have been defined
    on your system. These examples will use the `foobar` service, which doesn’t really
    exist, as a stand-in for whatever service you might be managing.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`systemctl`是你用来管理系统中已定义的服务的工具。这些示例将使用`foobar`服务，虽然它并不存在，但我们用它代替你可能正在管理的任何服务。'
- en: Checking the status of a service
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查服务状态
- en: '`systemctl status <service>` checks the status of the service. You’ll get an
    assortment of data that’s useful for all kinds of troubleshooting tasks. This
    is what the output for the nginx web server’s service looks like:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`systemctl status <service>` 检查服务的状态。你将获得一系列对各种故障排除任务有用的数据。这是nginx web服务器服务输出的样子：'
- en: '![](img/B19251_03_01.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19251_03_01.png)'
- en: 'Figure 3.1: nginx web server service output'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1：nginx web服务器服务输出
- en: 'Let’s dissect the information that’s displayed in the dense output that this
    command produces, line by line:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐行剖析该命令生成的密集输出信息：
- en: '**Service name**: The name of the service as defined in its unit file.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务名称**：在服务的单元文件中定义的服务名称。'
- en: '**Load state**: Whether the service unit file has been successfully loaded
    and is ready to be started.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载状态**：服务单元文件是否已成功加载并准备好启动。'
- en: '**Active state**: The current state of the service – whether it is running,
    inactive, or failed – and how long it’s been that way.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**活动状态**：服务的当前状态——是否正在运行、处于非活动状态或已失败——以及这种状态持续了多久。'
- en: '**Docs**: The main page where you can find relevant documentation if it’s been
    installed.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档**：如果安装了相关文档，这是你可以找到的主页面。'
- en: '**Main PID and child processes:** The **process ID** (**PID**) of the main
    process associated with the service, with additional entries for any child processes
    that have been launched.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主PID和子进程**：与该服务相关的主进程的**进程ID**（**PID**），以及任何已启动的子进程的附加条目。'
- en: '**Resource usage**: RAM (memory) and CPU time.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源使用**：RAM（内存）和CPU时间。'
- en: '**CGroup**: Details about the control group to which this process belongs.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CGroup**：该进程所属控制组的详细信息。'
- en: '**Log preview**: A few loglines from the service’s output, to give you an idea
    of what’s happening.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志预览**：来自服务输出的几行日志，帮助你了解正在发生的情况。'
- en: This information provides a detailed overview of the service and its status
    and can be useful for debugging issues or checking the health of the service.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息提供了关于服务及其状态的详细概述，对于调试问题或检查服务健康状态非常有用。
- en: If the service has failed, the output will usually provide details on why it
    failed, such as the exit code or a description of the error.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务失败，输出通常会提供失败的原因，例如退出代码或错误描述。
- en: Starting a service
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动服务
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This starts the service. If the service was already running, this command would
    have no effect.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这会启动服务。如果服务已经在运行，执行此命令将没有效果。
- en: Stopping a service
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 停止服务
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This stops the service. If the service wasn’t running, then it should have no
    effect.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这会停止服务。如果服务没有运行，那么此命令应该没有效果。
- en: Restarting a service
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重启服务
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This stops and then starts a service. It is equivalent to running:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这会停止并重新启动服务。等同于运行：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Note**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: 'Be careful with this command: if a service’s configuration file has changed
    on disk since it was started, and that config file has a bug that prevents the
    program from successfully starting, then `restart` will happily stop your running
    service and then fail to start it again.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 小心使用此命令：如果服务的配置文件在启动后已经更改，并且该配置文件中存在一个错误导致程序无法成功启动，那么`restart`将愉快地停止正在运行的服务，然后无法重新启动它。
- en: This logical but potentially undesirable behavior has bitten many developers
    over the years, so take care to ensure that your service’s configuration is still
    valid before restarting.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这种逻辑但可能不太理想的行为多年来已经让许多开发者吃过亏，因此在重启之前，要确保你的服务配置仍然有效。
- en: 'Many popular programs have built-in configuration validation, e.g., for `nginx`,
    you can run:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 许多流行的程序都有内建的配置验证，例如，对于`nginx`，你可以运行：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: to test the configuration on disk.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 测试磁盘上的配置。
- en: Reloading a service
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新加载服务
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Not all services support this subcommand – it’s up to the person creating the
    service configuration to implement it. If a service does have a `reload` option,
    it is generally safer than `restart`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 不是所有服务都支持这个子命令——是否实现取决于创建服务配置的人。如果服务有`reload`选项，通常比`restart`更安全。
- en: '`U`sually, a `reload`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`U`通常，`reload`：'
- en: re-checks the configuration on disk to ensure that it’s valid
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新检查磁盘上的配置，以确保它有效
- en: re-reads the configuration into memory without interrupting the running process,
    if possible
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新读取配置到内存中，如果可能的话，不中断正在运行的进程
- en: restarts the process only after validating the config and making sure the process
    will start successfully after being stopped
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有在验证配置并确保进程在停止后能够成功启动的情况下，才会重新启动该进程
- en: 'Like so many things in Linux, this is a convention rather than a strictly enforced
    requirement, so you may run into software that:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 Linux 中的许多东西一样，这是一种约定，而不是严格执行的要求，所以你可能会遇到一些软件：
- en: doesn’t implement a `reload` subcommand
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有实现`reload`子命令
- en: doesn’t implement some of the safety features discussed above (config validation,
    etc.)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有实现上述讨论的一些安全功能（如配置验证等）
- en: does something else with a `reload`, because the developer or packager thought
    it was a good idea
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行与`reload`相关的其他操作，因为开发者或打包者认为这是一个好主意
- en: In general, when updating the configuration file for an application, especially
    in production environments, you should prefer `reload` over `restart`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，在更新应用程序的配置文件时，特别是在生产环境中，你应该优先使用`reload`而不是`restart`。
- en: Enable and disable
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用和禁用
- en: '`systemctl enable foobar` – configures `foobar` to start automatically on boot.
    `systemctl disable foobar` – if `foobar` is configured to start automatically,
    gets rid of that configuration and turns foobar into a manually managed service.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`systemctl enable foobar` – 配置`foobar`在启动时自动启动。`systemctl disable foobar` –
    如果`foobar`已配置为自动启动，则取消该配置并将`foobar`变成手动管理的服务。'
- en: The key difference here is that while `start` and `stop` have an immediate effect
    – they ensure that a service is running (or stopped) *right now*; `enable` and
    `disable` are about future system startups. However, they have no effect on that
    service’s ‘running’ status at the time you run the command.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键区别是，虽然`start`和`stop`会立即生效——它们确保服务*现在*正在运行（或已停止）；而`enable`和`disable`则是关于未来系统启动的设置。然而，它们对你运行命令时服务的“运行”状态没有任何影响。
- en: 'One common mistake that developers make is to assume that `enable` will start
    a service. It won’t. If you want to start an `nginx` web server now and ensure
    that it automatically starts every time the VM is rebooted, you need to run two
    commands:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者常犯的一个错误是认为`enable`会启动服务，但它不会。如果你想立即启动`nginx` web 服务器，并确保每次虚拟机重启时它都会自动启动，你需要运行两个命令：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Because of this, `enable` and `disable` come with an optional flag that also
    starts (or stops, in the case of `disable`) the service. This command is equivalent
    to the two commands above:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`enable`和`disable`带有一个可选的标志，也可以启动（或者在`disable`的情况下停止）服务。此命令等同于上述两个命令：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: A note on Docker
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 注释
- en: While `systemctl` is a common tool for managing services on traditional Linux
    systems, it is generally not used in Docker containers due to containers’ isolated
    and self-contained nature.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`systemctl`是传统 Linux 系统中管理服务的常用工具，但由于容器具有隔离和自包含的特性，通常在 Docker 容器中不使用它。
- en: Docker containers ideally run a single process and therefore don’t require a
    complex boot phase or process management. The container, in essence, *is* the
    process and doesn’t have access to the host system’s init system (including `systemd`).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 容器理想情况下运行一个单一的进程，因此不需要复杂的启动阶段或进程管理。容器本质上*就是*进程，并且无法访问宿主系统的初始化系统（包括`systemd`）。
- en: Although it’s possible to have access to these commands in a Docker container,
    it’s usually undesirable to use any kind of service-management system inside of
    them.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在 Docker 容器中访问这些命令是可能的，但通常不建议在容器内使用任何类型的服务管理系统。
- en: Docker containers ideally contain a single application and launch a single process
    when they start. For this, no service management is needed – the running container
    is your service package, and your Docker container essentially *is* your process.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 容器理想情况下包含一个应用程序，并在启动时启动一个进程。为此，无需服务管理——运行中的容器就是你的服务包，Docker 容器本质上*就是*你的进程。
- en: 'We don’t recommend a Docker setup that includes multiple processes or significant
    internal service management, so we won’t get into it here: much like families,
    all happy Docker images are alike in the same way, while each unhappy Docker configuration
    is unhappy in its own way.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不推荐包含多个进程或重要内部服务管理的 Docker 设置，所以我们在这里不做详细讨论：就像家庭一样，所有快乐的 Docker 镜像在某种程度上是相似的，而每个不快乐的
    Docker 配置都有其独特的不快乐。
- en: Conclusion
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'In this chapter, you learned how services are managed in Linux, and we introduced
    the practical commands you’ll use to control them. We gave you the theory you’ll
    need to make sense of all the terminology you’ll come across on a live system:
    what init is, what systemd does on Linux systems, and which commands you need
    to interact with it.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了 Linux 中服务是如何管理的，并介绍了你将用来控制它们的实际命令。我们为你提供了理解所有你在实际系统中遇到的术语所需的理论：init
    是什么，systemd 在 Linux 系统上做什么，以及你需要使用哪些命令与它交互。
- en: In the next chapter, we’ll show you some useful tricks for interacting with
    your shell and your command history, so you can save time and look like a Unix
    wizard from your favorite movie (it will also make you faster and more efficient
    at your day job, but putting it that way just doesn’t make it sound as fun).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将展示一些与 shell 和命令历史记录交互的实用技巧，帮助你节省时间，并像你最喜欢电影中的 Unix 大师一样（当然，这也会让你在日常工作中变得更快更高效，但这么说就没有那么有趣了）。
- en: Learn more on Discord
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入本书的 Discord 社区——你可以在这里分享反馈、向作者提问并了解新版本发布——请扫描下方二维码：
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/SecNet](https://packt.link/SecNet)'
- en: '![](img/QR_Code1768422420210094187.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code1768422420210094187.png)'
