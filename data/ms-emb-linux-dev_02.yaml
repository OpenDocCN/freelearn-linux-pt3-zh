- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Starting Out
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始
- en: You are about to begin working on your next project, and this time, it is going
    to run Linux. What should you think about before you put finger to keyboard? Let’s
    begin with a high-level look at embedded Linux and see why it is popular, what
    the implications of open source licenses are, and what kind of hardware you need
    to run it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你即将开始你的下一个项目，这次，它将运行Linux。在你动手之前，你应该考虑什么？让我们首先从高层次上了解嵌入式Linux，看看它为何受欢迎，开源许可证的含义是什么，以及你需要什么样的硬件来运行它。
- en: Linux first became a viable choice for embedded devices around 1999\. That was
    when AXIS released the 2100 Network Camera and TiVo released their first **Digital
    Video Recorder** (**DVR**). Both were the first Linux-powered devices in their
    category. Since 1999, Linux has become increasingly popular to the point that
    today it is the **Operating System** (**OS**) of choice for many classes of product.
    In 2024, there were over three billion devices running Linux. That includes all
    the smartphones running Android, which uses a Linux kernel, and hundreds of millions
    of set-top boxes, smart TVs, and Wi-Fi routers. We must not forget other devices,
    such as vehicle diagnostics, industrial equipment, and medical monitoring units,
    that ship in smaller volumes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Linux在1999年左右首次成为嵌入式设备的可行选择。那时，AXIS发布了2100网络摄像头，TiVo发布了他们的首个**数字视频录制器**（**DVR**）。这两款设备都是各自类别中首批使用Linux的设备。从1999年起，Linux逐渐流行起来，直到今天，它成为了许多产品类别的**操作系统**（**OS**）首选。到2024年，运行Linux的设备已超过三十亿台。这包括所有运行Android系统的智能手机，Android使用的是Linux内核，以及数亿台机顶盒、智能电视和Wi-Fi路由器。我们不能忽视其他设备，例如车辆诊断设备、工业设备和医疗监测设备，这些设备的出货量较小。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Choosing Linux
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择Linux
- en: When not to choose Linux
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么时候不选择Linux
- en: Meeting the players
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解相关参与者
- en: Moving through the project life cycle
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目生命周期的推进
- en: Navigating open source
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索开源
- en: Selecting hardware for embedded Linux
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为嵌入式Linux选择硬件
- en: Obtaining the hardware for this book
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取本书所需的硬件
- en: Provisioning your development environment
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置开发环境
- en: Choosing Linux
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择Linux
- en: Why is Linux so pervasive? And why does something as simple as a TV need to
    run something as complex as Linux just to display streaming video on a screen?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么Linux如此普及？为什么像电视机这样简单的设备需要运行如此复杂的Linux，只是为了在屏幕上显示流媒体视频？
- en: The simple answer is **Moore’s law**. Gordon Moore, cofounder of Intel, observed
    in 1965 that the density of components on a chip doubles approximately every two
    years. That applies to the devices that we design and use in our everyday lives
    just as much as it does to desktops, laptops, and servers. At the heart of most
    embedded devices is a highly integrated chip that contains one or more processor
    cores and interfaces with main memory, mass storage, and peripherals of many types.
    This is referred to as a **System on Chip** (**SoC**). SoCs are increasing in
    complexity in accordance with Moore’s law. A typical SoC has a technical reference
    manual that stretches to thousands of pages.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的答案是**摩尔定律**。英特尔的联合创始人戈登·摩尔在1965年观察到，芯片上元件的密度大约每两年翻一番。这一规律适用于我们日常生活中设计和使用的设备，就像它适用于台式机、笔记本电脑和服务器一样。大多数嵌入式设备的核心是一个高度集成的芯片，芯片包含一个或多个处理器核心，并与主内存、大容量存储器和各种外设进行接口。这被称为**系统级芯片**（**SoC**）。SoC的复杂性随着摩尔定律的推进不断增加。一个典型的SoC有一个技术参考手册，内容可能达到几千页。
- en: Your TV isn’t simply displaying a video stream like the analog sets of old.
    The stream is digital, possibly encrypted, and needs processing to produce an
    image. Your TV is (or soon will be) connected to the internet. It can receive
    content from smartphones, tablets, laptops, desktops, and home media servers.
    It can be used to play games, stream video, and display live feeds from security
    cameras. You need a full OS to manage this degree of complexity.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你的电视机不再像旧款模拟电视那样只显示视频流。这个视频流是数字的，可能是加密的，并且需要处理才能生成图像。你的电视机（或者很快会）连接到互联网。它可以接收来自智能手机、平板电脑、笔记本电脑、台式机和家庭媒体服务器的内容。它可以用来玩游戏、播放视频流和显示来自安全摄像头的实时画面。你需要一个完整的操作系统来管理这种复杂度。
- en: 'Here are some points that drive the adoption of Linux:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些推动Linux采用的要点：
- en: Linux has the necessary functionality. It has a good scheduler, a good network
    stack, support for USB, Wi-Fi, Bluetooth, many kinds of storage media, multimedia
    devices, and so on. It ticks all the boxes.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux具备所需的功能。它有一个良好的调度器、优秀的网络栈、对USB、Wi-Fi、蓝牙、多种存储介质、多媒体设备等的支持，能够满足所有需求。
- en: Linux has been ported to a wide range of processor architectures, including
    some that are very commonly found in SoC designs – Arm, RISC-V, x86, PowerPC,
    and MIPS.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 已经被移植到广泛的处理器架构上，包括在 SoC 设计中非常常见的一些架构——Arm、RISC-V、x86、PowerPC 和 MIPS。
- en: Linux is open source, so you have the freedom to get the source code and modify
    it to meet your needs. You or someone working on your behalf can create a board
    support package for your device. You can add protocols, features, and technologies
    that may be missing from the mainline source code. You can remove features that
    you don’t need to reduce memory and storage requirements. Linux is flexible.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 是开源的，因此你有自由获取源代码并根据需求进行修改。你或代表你工作的人可以为你的设备创建板级支持包。你可以添加缺失的协议、特性和技术，也可以删除不需要的功能，以减少内存和存储需求。Linux
    非常灵活。
- en: Linux has an active community (in the case of the Linux kernel, very active).
    There is a new release of the kernel every 8 to 10 weeks, and each release contains
    code from more than 1,000 developers. An active community means that Linux is
    up to date and supports current hardware, protocols, and standards. The Linux
    Foundation is a non-profit organization with backing from big tech.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 拥有一个活跃的社区（以 Linux 内核为例，社区非常活跃）。每 8 到 10 周就会发布一次新内核版本，每个版本都包含来自 1,000 多位开发者的代码。活跃的社区意味着
    Linux 能保持最新，并支持当前的硬件、协议和标准。Linux 基金会是一个非盈利组织，得到了大科技公司的支持。
- en: The foundation acts as a steward for several major open source projects besides
    Linux, including Kubernetes and PyTorch. It also hosts yearly events around the
    world like the Open Source Summit and Linux Plumbers Conference.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Linux，Linux 基金会还为多个主要的开源项目提供支持，包括 Kubernetes 和 PyTorch。它还在全球举办年度活动，如开源峰会和
    Linux Plumbers 大会。
- en: Open source licenses guarantee that you have access to the source code. There
    is no vendor lock-in.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开源许可证保证你可以访问源代码。没有供应商锁定。
- en: For these reasons, Linux is an ideal choice for complex devices. But there are
    a few caveats I should mention here. Complexity makes it harder to understand.
    Coupled with the fast-moving development process and the decentralized structures
    of open source, you need to put some effort into learning how to use it and to
    keep on re-learning as it changes. I hope that this book helps in the process.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正因如此，Linux 是复杂设备的理想选择。但在这里我需要提几个注意事项。复杂性使得它更难理解。加上快速发展的开发进程和开源的去中心化结构，你需要投入一些精力学习如何使用它，并且随着它的变化不断学习。我希望这本书能帮助你这一过程。
- en: When not to choose Linux
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时不选择 Linux
- en: 'Is Linux suitable for your project? Linux works well where the problem being
    solved justifies the complexity. It is especially good where connectivity, robustness,
    and complex user interfaces are required. However, it cannot solve every problem,
    so here are some things to consider before you jump in:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 适合你的项目吗？当要解决的问题足够复杂时，Linux 非常适用。特别是在需要连接性、鲁棒性和复杂用户界面的场合，Linux 表现得尤为出色。然而，它并不能解决所有问题，因此在你深入之前需要考虑以下几个方面：
- en: Is your hardware up to the job? Compared to a traditional **Real-Time Operating
    System** (**RTOS**) such as VxWorks or QNX, Linux requires a lot more resources.
    It needs at least a 32-bit processor and lots more memory. I will go into more
    detail in the *Selecting hardware for embedded Linux* section.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的硬件能胜任工作吗？与传统的**实时操作系统**（**RTOS**），如 VxWorks 或 QNX 相比，Linux 需要更多的资源。它至少需要一个
    32 位处理器和更多的内存。我将在*为嵌入式 Linux 选择硬件*部分中详细讲解。
- en: Do you have the right skill set? The early parts of a project, the board bring-up,
    require detailed knowledge of Linux and how it relates to your hardware. Likewise,
    when debugging and tuning your application you will need to be able to interpret
    the results. If you don’t have the skills in-house you may want to outsource some
    of the work. Of course, reading this book helps!
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你拥有合适的技能吗？项目的早期阶段，尤其是板级启动，需要对 Linux 以及它如何与硬件关联有详细了解。同样，在调试和优化应用时，你需要能够解读结果。如果你的团队没有相关技能，可能需要外包一些工作。当然，阅读本书会有所帮助！
- en: Is your system real time? Linux can handle many real-time activities as long
    as you pay attention to certain details, which I cover in depth in [*Chapter 21*](Chapter_19.xhtml#_idTextAnchor654).
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的系统是实时的吗？只要你注意一些细节，Linux 可以处理许多实时活动，我在[*第 21 章*](Chapter_19.xhtml#_idTextAnchor654)中深入讨论了这些内容。
- en: Will your code require regulatory approval (medical, automotive, aerospace,
    and so on)? The burden of regulatory verification and validation might make another
    OS a better choice. Even if you do choose Linux for use in these environments,
    it may make sense to purchase a commercially available distribution from a company
    that has supplied Linux for existing products like the one you are building. These
    commercial Linux vendors include Siemens, Timesys, and Wind River.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的代码是否需要监管批准（医疗、汽车、航空航天等）？合规验证和确认的负担可能使得选择其他操作系统成为更好的选择。即使你选择在这些环境中使用 Linux，购买一款已经为类似产品提供
    Linux 发行版的商业公司提供的发行版可能也更有意义。这些商业 Linux 厂商包括西门子、Timesys 和 Wind River。
- en: Consider these points carefully. Probably the best indicator of success is to
    look around for similar products that run Linux and see how they did it, and follow
    best practices.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细考虑这些要点。成功的最佳指示器可能是寻找类似的 Linux 运行产品，看看它们是如何做的，并遵循最佳实践。
- en: Meeting the players
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解各方参与者
- en: Where does open source software come from? Who writes it? In particular, how
    does it relate to the key components of embedded development – the toolchain,
    bootloader, kernel, and basic utilities found in the root filesystem?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 开源软件从哪里来？谁编写它？特别是，它如何与嵌入式开发的关键组件——工具链、引导加载程序、内核以及根文件系统中的基本实用程序相关联？
- en: '**Open source community**: This, after all, is the engine that generates the
    software you are going to be using. The community is a loose alliance of developers
    many of whom are funded in some way by a non-profit organization, an academic
    institution, or a commercial company. They work together to further the aims of
    the various projects. There are many of them – some small, some large. Some that
    we will make use of are Linux itself, U-Boot, BusyBox, Buildroot, The Yocto Project,
    and the many projects under the GNU umbrella.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开源社区**：毕竟，这是生成你将使用的软件的引擎。这个社区是一个松散的开发者联盟，其中许多人通过非营利组织、学术机构或商业公司获得资助。他们共同合作推动各个项目的目标。这个社区非常庞大，有很多不同规模的项目。我们将使用的一些项目包括
    Linux 本身、U-Boot、BusyBox、Buildroot、Yocto 项目以及许多 GNU 旗下的项目。'
- en: '**CPU architects**: These are the organizations that design the CPUs we use.
    The important ones here are Arm/Linaro (Arm Cortex-A), Intel (x86 and x86-64),
    SiFive (RISC-V), and IBM (PowerPC). They implement or at the very least influence
    support for the basic CPU architecture.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CPU 架构师**：这些是设计我们使用的 CPU 的组织。这里重要的有 Arm/Linaro（Arm Cortex-A）、英特尔（x86 和 x86-64）、SiFive（RISC-V）和
    IBM（PowerPC）。它们实现或至少影响对基本 CPU 架构的支持。'
- en: '**SoC vendors**: These include Broadcom, Intel, Microchip, NXP, Qualcomm, TI,
    and many others. They take the kernel and toolchain from the CPU architects and
    modify them to support their chips. They also create reference boards: designs
    that are used by the next level down to create development boards and working
    products.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SoC 厂商**：这些包括博通、英特尔、Microchip、NXP、高通、TI 等公司。它们从 CPU 架构师处获取内核和工具链，并修改它们以支持自己的芯片。它们还创建参考板：用于下一层级创建开发板和工作产品的设计。'
- en: '**Board vendors and OEMs**: These people take the reference designs from SoC
    vendors and build them into specific products like set-top boxes or cameras. They
    also create more general-purpose development boards such as those from Advantech
    and Kontron. An important category is the cheap **Single-Board Computers** (**SBCs**)
    such as BeagleBoard and Raspberry Pi, which have created their own ecosystems
    of software and hardware add-ons.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**板卡厂商和 OEM**：这些公司从 SoC 厂商那里获取参考设计，并将其构建成特定的产品，如机顶盒或摄像头。它们还创建更多通用的开发板，如 Advantech
    和 Kontron 的产品。一个重要类别是便宜的 **单板计算机** (**SBC**) 如 BeagleBoard 和 Raspberry Pi，它们已经创建了自己的软件和硬件附加组件生态系统。'
- en: '**Commercial Linux vendors**: Companies such as Siemens, Timesys, and Wind
    River offer commercial Linux distributions that have undergone strict regulatory
    verification and validation across multiple industries (medical, automotive, aerospace,
    and so on).'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**商业 Linux 厂商**：如西门子、Timesys 和 Wind River 等公司提供经过严格合规验证的商业 Linux 发行版，这些发行版已在多个行业（医疗、汽车、航空航天等）中得到验证和确认。'
- en: These form a chain, with your project usually at the end, which means that you
    do not have a free choice of components. You cannot simply take the latest kernel
    from kernel.org, except in rare cases, because it does not have support for the
    chip or board that you are using.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这些形成了一条链条，通常你的项目处于链条的末端，这意味着你没有自由选择组件的余地。除非在极少数情况下，否则你不能直接从 kernel.org 获取最新的内核，因为它不支持你正在使用的芯片或板卡。
- en: This is an ongoing problem with embedded development. Ideally, the developers
    at each link in the chain would push their changes upstream but they don’t. Developers
    are under constant time pressure and getting patches accepted into the Linux kernel
    takes major effort. It is not uncommon to find a kernel that has many thousands
    of patches that are not merged. In addition, SoC vendors tend to actively develop
    open source components only for their latest chips, meaning that support for any
    chip more than a couple of years old will be frozen and not receive any updates.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是嵌入式开发中的一个持续性问题。理想情况下，每个链条中的开发人员都会推动他们的更改上游，但实际情况并非如此。开发人员时刻面临时间压力，将补丁合并到 Linux
    内核中需要付出极大的努力。不少内核存在许多尚未合并的补丁。此外，SoC 供应商通常仅对其最新芯片积极开发开源组件，这意味着对任何两年以上的芯片的支持将被冻结，并且不会接收任何更新。
- en: The consequence is that most embedded designs are based on old versions of software.
    They do not receive security fixes, performance enhancements, or features that
    are in newer versions. Problems such as Heartbleed (a bug in the OpenSSL library)
    and Shellshock (a bug in the Bash shell) go unfixed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是大多数嵌入式设计基于旧版软件。它们不会接收安全补丁、性能增强或者新版本中的功能。像 Heartbleed（OpenSSL 库的漏洞）和 Shellshock（Bash
    shell 的漏洞）这样的问题未得到修复。
- en: 'What can you do about it? First, ask questions of your vendors (NXP, TI, and
    Xilinx to name just a few): what is their update policy, how often do they revise
    kernel versions, what is the current kernel version, what was the one before that,
    and what is their policy for merging changes upstream? Some vendors are making
    great strides in this direction. You should prefer their chips.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你能做些什么？首先，请向你的供应商（如 NXP、TI 和 Xilinx 等）提问：他们的更新政策是什么，他们多久更新一次内核版本，当前内核版本是什么，之前的版本是什么，以及他们的上游合并政策是什么？一些供应商在这方面取得了显著进展。你应该偏爱他们的芯片。
- en: Secondly, you can take steps to make yourself more self-sufficient. The chapters
    in *Part 1* explain the dependencies in more detail and show you where you can
    help yourself. Don’t just take the package offered to you by the SoC or board
    vendor and use it blindly without considering the alternatives.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，您可以采取措施提高自给自足能力。*第 1 部分*的章节详细说明了依赖关系，并展示了您可以自助的地方。不要仅仅接受 SoC 或板卡供应商提供的包并盲目使用，而不考虑其他选择。
- en: Moving through the project life cycle
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目生命周期的推进
- en: 'This book is divided into five sections that reflect the phases of a project.
    The phases are not necessarily sequential. Usually, they overlap, and you will
    need to jump back to revisit things that were done previously. However, they are
    representative of a developer’s preoccupations as the project progresses:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 本书分为五个部分，反映了项目的各个阶段。这些阶段不一定是顺序的。通常它们是重叠的，你需要回头重新审视先前完成的事情。然而，它们代表了开发者在项目进展过程中关注的重点。
- en: '*Elements of Embedded Linux (Chapters 1 to 5)* will help you set up the development
    environment and create a working platform for the later phases. It is often referred
    to as the **board bring-up** phase.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*嵌入式 Linux 要素（第 1 到 5 章）*将帮助您设置开发环境，并为后续阶段创建一个工作平台。这通常被称为**板级启动**阶段。'
- en: '*Building Embedded Linux Images (Chapters 6 to 8)* shows you how to automate
    the process of building an embedded Linux image by leveraging a build system like
    Buildroot or The Yocto Project. Automating complex build tasks accelerates the
    project life cycle so that teams can deliver higher-quality products in less time.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*构建嵌入式 Linux 镜像（第 6 到 8 章）*展示了如何通过利用 Buildroot 或 The Yocto Project 等构建系统自动化构建嵌入式
    Linux 镜像的过程。自动化复杂的构建任务可以加速项目生命周期，使团队能够在更短的时间内交付更高质量的产品。'
- en: '*System Architecture and Design Choices (Chapters 9 to 14)* will inform some
    of the design decisions you will have to make concerning the storage of programs
    and data, how to divide work between kernel device drivers and applications, and
    how to initialize the system.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*系统架构与设计选择（第 9 到 14 章）*将为您提供一些关于程序和数据存储、如何在内核设备驱动程序和应用程序之间分工，以及如何初始化系统的设计决策。'
- en: '*Developing Applications (Chapters 15 to 18)* shows you how to package and
    deploy Python applications, make effective use of the Linux process and thread
    model, and manage memory in a resource-constrained device. What do packaging and
    deploying Python applications have to do with embedded Linux? The answer is “not
    much”, but bear in mind that the word “development” also happens to be in the
    title of this book. And *Chapters 15 and 16* have everything to do with modern-day
    software development.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*开发应用程序（第15到18章）* 向你展示如何打包和部署 Python 应用程序，如何有效利用 Linux 的进程和线程模型，并在资源受限的设备上管理内存。打包和部署
    Python 应用程序与嵌入式 Linux 有什么关系呢？答案是“关系不大”，但请记住，本书的标题中也恰好有“开发”这个词。而且*第15和16章*完全与现代软件开发有关。'
- en: '*Debugging and Optimizing Performance (Chapters 19 to 21)* describes how to
    trace, profile, and debug your code in both the application and the kernel. The
    last chapter explains how to design for real-time behavior when required.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*调试与性能优化（第19到21章）* 描述了如何在应用程序和内核中跟踪、分析和调试你的代码。最后一章解释了当需要时如何为实时行为进行设计。'
- en: Now, let’s focus on the four basic elements of embedded Linux that comprise
    the first section of the book.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们集中讨论本书第一部分中涉及的嵌入式 Linux 四个基本元素。
- en: The four elements of embedded Linux
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入式 Linux 的四个元素
- en: 'Every project begins by obtaining, customizing, and deploying these four elements:
    the toolchain, the bootloader, the kernel, and the root filesystem. This is the
    topic of the first section of this book.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 每个项目都始于获取、定制和部署这四个元素：工具链、引导加载程序、内核和根文件系统。这是本书第一部分的内容。
- en: '**Toolchain**: This is the cross compiler and other tools needed to create
    code for your target device. A cross compiler generates machine code for a target
    CPU architecture while running on a different host CPU architecture.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具链**：这是交叉编译器和其他创建目标设备代码所需的工具。交叉编译器在不同的主机 CPU 架构上运行时，生成目标 CPU 架构的机器码。'
- en: '**Bootloader**: This is a bare metal program that initializes the board and
    the Linux kernel. The term “bare metal” means the program runs directly on the
    CPU, not on top of an OS.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引导加载程序**：这是一个裸机程序，用于初始化板卡和 Linux 内核。“裸机”一词意味着该程序直接运行在 CPU 上，而不是在操作系统之上。'
- en: '**Kernel**: This is the heart of the system, managing system resources and
    interfacing with the hardware.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内核**：这是系统的核心，管理系统资源并与硬件进行交互。'
- en: '**Root filesystem**: This contains the libraries and programs that are run
    once the kernel has completed its initialization.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**根文件系统**：它包含了内核初始化完成后运行的库和程序。'
- en: There is also a fifth element not mentioned here. That is the collection of
    programs specific to your embedded application that make the device do whatever
    it is supposed to do, be it weighing groceries, displaying movies, controlling
    a robot, or flying a drone.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一个未提到的第五个元素，那就是特定于嵌入式应用程序的程序集合，它使得设备能够执行预定的功能，无论是称重商品、播放电影、控制机器人还是飞行无人机。
- en: 'Typically, you will be offered some or all of these elements as a package when
    you buy your SoC or board. But for the reasons mentioned earlier, they may not
    be the best choices for you. In the first eight chapters, I will give you the
    background to make the right selection and introduce two tools that automate the
    whole process for you: Buildroot and The Yocto Project.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当你购买 SoC 或板卡时，你会获得这些元素中的部分或全部作为一个软件包。但由于前面提到的原因，这些可能不是最适合你的选择。在前八章中，我将为你提供背景知识，以帮助你做出正确的选择，并介绍两种能够自动化整个过程的工具：Buildroot
    和 Yocto 项目。
- en: Navigating open source
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览开源
- en: The components of embedded Linux are *open source* so now is a good time to
    consider what that means, why open source licenses work the way they do, and how
    this affects the often proprietary embedded device you will be creating from it.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式 Linux 的组件是*开源的*，所以现在是时候考虑一下开源意味着什么，开源许可证为什么会这样运作，以及这将如何影响你将要基于它创建的、通常是专有的嵌入式设备。
- en: Licenses
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 许可证
- en: When talking about open source the word *free* is often used. People new to
    the subject often take it to mean *nothing to pay* and open source software licenses
    do indeed guarantee that you can use the software to develop and deploy systems
    for no charge. However, the more important meaning here is freedom since you are
    free to obtain the source code, modify it in any way you see fit, and redeploy
    it in other systems. Open source licenses give you this right, but some also require
    you to share these changes with the public.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论开源时，“*免费*”这个词经常被提及。对于新接触这个话题的人来说，他们通常认为它意味着“*无需付费*”，而开源软件许可证确实保证你可以免费使用软件来开发和部署系统。然而，这里的更重要的含义是自由，因为你可以自由地获取源代码，按照自己的需要进行修改，并在其他系统中重新部署它。开源许可证赋予你这种权利，但一些许可证还要求你将这些修改与公众共享。
- en: Compare that with freeware licenses, which allow you to copy the binaries for
    no cost but do not give you the source code. Other licenses allow you to use the
    software for free under certain circumstances, for example, for personal use,
    but not commercial. These are not open source.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 与免费软件许可证进行比较，这类许可证允许你免费复制二进制文件，但不提供源代码。其他许可证允许你在特定条件下免费使用软件，例如用于个人用途，但不允许商业用途。这些都不是开源。
- en: I will provide the following comments in the interest of helping you understand
    the implications of working with open source licenses, but I would like to point
    out that I am an engineer and not a lawyer. What follows is my understanding of
    the licenses and how they are interpreted.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助你理解与开源许可证相关的影响，我将提供以下评论，但我要指出的是，我是一名工程师，不是律师。接下来是我对这些许可证的理解以及它们的解释方式。
- en: 'Open source licenses fall broadly into two categories:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 开源许可证大致分为两类：
- en: '*Copyleft* licenses such as the GNU **General Public License** (**GPL**)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Copyleft* 许可证，如 GNU **通用公共许可证**（**GPL**）'
- en: Permissive licenses such as the **BSD** and **MIT** licenses
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宽松许可证，如 **BSD** 和 **MIT** 许可证
- en: The permissive licenses say, in essence, that you may modify the source code
    and use it in systems of your own choosing as long as you do not modify the terms
    of the license in any way. In other words, apart from that one restriction, you
    can do with it what you want, including building it into possibly proprietary
    systems.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 宽松许可证本质上说，你可以修改源代码并在你选择的系统中使用它，只要你不以任何方式修改许可证的条款。换句话说，除了这一条限制之外，你可以随意使用它，包括将其构建到可能的专有系统中。
- en: The GPL licenses are similar but have clauses that compel you to pass the rights
    to obtain and modify the software on to your end users. In other words, you share
    your source code. One option is to make it completely public by putting it onto
    a public server. Another is to offer it only to your end users by means of a written
    offer to provide the code when requested.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: GPL 许可证相似，但有一些条款要求你将获取和修改软件的权利传递给最终用户。换句话说，你需要共享源代码。一种选择是通过将其上传到公共服务器使其完全公开。另一种选择是通过书面方式向最终用户提供代码，按照要求提供。
- en: The GPL goes further to say that you cannot incorporate GPL code into proprietary
    programs. Any attempt to do so would make the GPL apply to the whole. In other
    words, you cannot combine GPL and proprietary code in the same program. Aside
    from the Linux kernel, the GNU Compiler Collection and GNU Debugger, as well as
    many other freely available tools associated with the GNU project, fall under
    the umbrella of the GPL.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: GPL 进一步规定，你不能将 GPL 代码并入专有程序。任何尝试这样做的行为都会使整个程序适用 GPL。换句话说，你不能在同一个程序中将 GPL 代码和专有代码结合起来。除了
    Linux 内核，GNU 编译器集合（GCC）和 GNU 调试器（GDB），以及与 GNU 项目相关的许多其他自由工具，都是 GPL 许可证下的内容。
- en: So, what about libraries? If they are licensed with the GPL, any program linked
    with them becomes GPL also. However, most libraries are licensed under the GNU
    **Lesser General Public License** (**LGPL**). If this is the case, you are allowed
    to link with them from a proprietary program.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，库文件如何呢？如果它们采用 GPL 许可证，则与它们链接的任何程序也会成为 GPL 程序。然而，大多数库是采用 GNU **较宽松通用公共许可证**（**LGPL**）进行授权的。如果是这种情况，你可以从专有程序中与它们进行链接。
- en: '**IMPORTANT NOTE**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: All of the preceding descriptions relate specifically to the GPL v2 and LGPL
    v2\. I should mention the latest versions of the GPL v3 and LGPL v3\. These are
    controversial and I will admit that I don’t fully understand the implications.
    However, the intention is to ensure that the GPL v3 and LGPL v3 components in
    any system can be replaced by the end user, which is in the spirit of open source
    software for everyone.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 上述描述全部与 GPL v2 和 LGPL v2 相关。我应该提到最新版本的 GPL v3 和 LGPL v3。这些版本有争议，我承认我并不完全理解其含义。然而，GPL
    v3 和 LGPL v3 的目的是确保系统中的 GPL v3 和 LGPL v3 组件可以被最终用户替换，这符合开放源代码软件的精神，适用于每个人。
- en: The GPL v3 and LGPL v3 have their problems though. There are security issues.
    If the owner of a device has access to the system code, then so might an unwelcome
    intruder. Often the defense is to have kernel images signed by an authority such
    as the vendor so that unauthorized updates are not possible. Is that an infringement
    of my right to modify my device? Opinions differ.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，GPL v3 和 LGPL v3 也存在一些问题。存在安全隐患。如果设备的拥有者可以访问系统代码，那么不受欢迎的入侵者也可能访问。通常的防御措施是通过诸如厂商等权威机构对内核映像进行签名，以避免未经授权的更新。这是否侵犯了我修改设备的权利？意见不一。
- en: '**IMPORTANT NOTE**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要说明**'
- en: The TiVo set-top box is an important part of this debate. It uses a Linux kernel,
    which is licensed under the GPL v2\. TiVo has released the source code of their
    version of the kernel in compliance with the license. TiVo also has a bootloader
    that will only load a kernel binary that is signed by them. Consequently, you
    can build a modified kernel for a TiVo box, but you cannot load it on the hardware.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: TiVo 机顶盒是这场辩论中的一个重要部分。它使用一个 Linux 内核，该内核根据 GPL v2 许可发布。为了遵守许可，TiVo 已经发布了他们版本的内核源代码。TiVo
    还有一个启动加载程序，该加载程序只会加载由他们签名的内核二进制文件。因此，你可以为 TiVo 盒子构建一个修改版的内核，但无法在硬件上加载它。
- en: The **Free Software Foundation** (**FSF**) takes the position that this is not
    in the spirit of open source software and refers to this procedure as **tivoization**.
    The GPL v3 and LGPL v3 were written explicitly to prevent this from happening.
    Some projects, the Linux kernel in particular, have been reluctant to adopt the
    GPL version 3 licenses because of the restrictions they place on device manufacturers.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**自由软件基金会**（**FSF**）的立场是，这种做法不符合开放源代码软件的精神，并将其称为 **TiVo化**。GPL v3 和 LGPL v3
    的编写目的就是为了防止这种情况的发生。一些项目，特别是 Linux 内核，一直不愿意采用 GPL v3 许可证，因为它对设备制造商施加了限制。'
- en: Selecting hardware for embedded Linux
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为嵌入式 Linux 选择硬件
- en: If you are designing or selecting hardware for an embedded Linux project, what
    do you look out for?
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在为嵌入式 Linux 项目设计或选择硬件，你应该注意什么？
- en: First, a CPU architecture that is supported by the kernel – unless you plan
    to add a new architecture yourself of course! Looking at the source code for Linux
    5.15 there are 23 architectures each represented by a subdirectory in the `arch/`
    directory. They are all 32-or 64-bit architectures, most with an MMU, but some
    without. The ones most often found in embedded devices are Arm, RISC-V, PowerPC,
    MIPS, and x86 each in 32-and 64-bit variants all of which have **Memory Management
    Units** (**MMUs**).
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，选择一个被内核支持的 CPU 架构——除非你计划自己添加一个新的架构！查看 Linux 5.15 的源代码，你会看到有 23 个架构，每个架构都在
    `arch/` 目录中有一个子目录。它们都是 32 位或 64 位架构，大多数有 MMU，有些则没有。在嵌入式设备中最常见的架构是 Arm、RISC-V、PowerPC、MIPS
    和 x86，它们都有 32 位和 64 位版本，且都配有 **内存管理单元**（**MMU**）。
- en: Most of this book is written with this class of processor in mind. There is
    another group that doesn’t have an MMU and that runs a subset of Linux known as
    a **microcontroller Linux** or **uClinux**. These processor architectures include
    **ARC** (**Argonaut RISC Core**), Blackfin, MicroBlaze, and Nios. I will mention
    uClinux from time to time, but I will not go into detail because it is a rather
    specialized type.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本书大部分内容是以这类处理器为基础编写的。还有另一类处理器没有 MMU，并运行一种被称为 **微控制器 Linux** 或 **uClinux** 的
    Linux 子集。这些处理器架构包括 **ARC**（**阿戈诺特 RISC 核心**）、Blackfin、MicroBlaze 和 Nios。我会不时提到
    uClinux，但不会深入讨论，因为它是一个相对专门化的类型。
- en: Second, you will need a reasonable amount of RAM. 16 MB is a good minimum, although
    it is quite possible to run Linux using half of that. It is even possible to run
    Linux with 4 MB if you are prepared to go to the trouble of optimizing every part
    of the system. It may even be possible to get lower, but there comes a point at
    which it is no longer Linux.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二，你将需要适量的 RAM。16 MB 是一个不错的最低值，尽管实际上用一半的内存也完全可以运行 Linux。如果你愿意为优化系统的每个部分付出努力，甚至可以用
    4 MB 来运行 Linux。甚至可能能更低，但到了某个临界点，它就不再是 Linux 了。
- en: Third, there is non-volatile storage, usually flash memory. 8 MB is enough for
    a simple device such as a webcam or basic router. As with RAM, you can create
    a workable Linux system with less storage if you really want to, but the lower
    you go the harder it becomes. Linux has extensive support for flash storage devices,
    including raw NOR and NAND flash chips, and managed flash in the form of SD cards,
    eMMC chips, USB flash memory, and so on.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三，存在非易失性存储，通常是闪存。8 MB 足以满足简单设备的需求，如网络摄像头或基础路由器。与 RAM 类似，如果你真的愿意，你可以在较小的存储空间下创建一个可用的
    Linux 系统，但存储越小，操作就越困难。Linux 对闪存存储设备有广泛的支持，包括原始的 NOR 和 NAND 闪存芯片，以及以 SD 卡、eMMC
    芯片、USB 闪存等形式存在的管理闪存。
- en: Fourth, a serial port is very useful, preferably a UART-based serial port. It
    does not have to be fitted on production boards but makes board bring-up, debugging,
    and development much easier.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第四，串口非常有用，最好是基于 UART 的串口。它不一定要安装在生产板上，但会使板子的启动、调试和开发变得更加容易。
- en: Fifth, you need some means of loading software when starting from scratch. Many
    microcontroller boards are fitted with a **Joint Test Action Group** (**JTAG**)
    interface for this purpose. Modern SoCs can also load boot code directly from
    the removable media, especially SD and microSD cards, or serial interfaces such
    as QSPI or USB.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第五，你需要某种方式来加载软件，从零开始时尤其如此。许多微控制器板上配备了 **联合测试行动组**（**JTAG**）接口，专门用于此目的。现代 SoC
    也可以直接从可移动介质加载启动代码，特别是 SD 卡和 microSD 卡，或像 QSPI 或 USB 这样的串行接口。
- en: In addition to these basics, there are interfaces to the specific bits of hardware
    your device needs to get its job done. Mainline Linux comes with open source drivers
    for many thousands of different devices, and there are drivers available (of variable
    quality) from the SoC manufacturer and from the OEMs of third-party chips that
    may be included in the design.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些基本要素外，设备还需要与其工作所需的特定硬件进行接口。主线 Linux 提供了许多不同设备的开源驱动程序，并且来自 SoC 制造商和第三方芯片
    OEM 的驱动程序（质量不同）也可供使用，后者可能会在设计中包含。
- en: Remember my comments on the commitment and ability of some manufacturers. As
    a developer of embedded systems, you will find that you spend quite a lot of time
    evaluating and adapting third-party code, if you have it, or liaising with the
    manufacturer if you don’t. Finally, you will have to write the device support
    for the interfaces that are unique to the device or find someone to do it for
    you.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 记住我关于某些厂商承诺和能力的评论。作为嵌入式系统的开发者，你会发现自己花了很多时间评估和适配第三方代码（如果有的话），或者如果没有，你需要与厂商沟通。最后，你必须为设备特有的接口编写设备支持，或者找人来做这件事。
- en: Obtaining the hardware for this book
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取本书所需硬件
- en: 'The examples in this book are intended to be generic. To make them relevant
    and easy to follow I have had to choose specific hardware. I have chosen three
    exemplary devices: the Raspberry Pi 4, BeaglePlay, and QEMU. The first is by far
    the most popular Arm-based SBC on the market. The second is a widely available
    SBC that can also be used in serious embedded hardware. The third is a machine
    emulator that can be used to create a range of systems that are typical of embedded
    hardware.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的示例旨在具有通用性。为了使它们更具相关性和易于跟随，我不得不选择特定的硬件。我选择了三种典型设备：树莓派 4、BeaglePlay 和 QEMU。第一种设备无疑是市场上最流行的基于
    Arm 的单板计算机。第二种设备是广泛可用的单板计算机，也可以用于严肃的嵌入式硬件。第三种设备是机器仿真器，可以用于创建典型的嵌入式硬件系统。
- en: It was tempting to use QEMU exclusively, but like all emulations, it is not
    quite the same as the real thing. Using the Raspberry Pi 4 and BeaglePlay, you
    have the satisfaction of interacting with real hardware and seeing real LEDs flash.
    The BeaglePlay, like the BeagleBone Black before it, is *open source hardware*,
    unlike the Raspberry Pi 4\. This means that the board design materials are freely
    available for anyone to build the BeaglePlay or a derivative into their products.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 曾一度想仅使用 QEMU，但像所有仿真一样，它与真实硬件有所不同。使用 Raspberry Pi 4 和 BeaglePlay，你能够与真实硬件互动，看到真实的
    LED 闪烁。与 Raspberry Pi 4 不同，BeaglePlay 和之前的 BeagleBone Black 一样，都是 *开源硬件*。这意味着板卡设计材料是公开的，任何人都可以将
    BeaglePlay 或其衍生品嵌入到他们的产品中。
- en: In any case, I encourage you to try out as many of the examples as you can,
    using either of these three platforms or any embedded hardware you may have on
    hand.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，我鼓励你尽可能多地尝试这些示例，无论是使用这三种平台中的任何一种，还是使用你手头的任何嵌入式硬件。
- en: The Raspberry Pi 4
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Raspberry Pi 4
- en: 'From June 2019 until October 2023, the Raspberry Pi 4 Model B was the flagship
    SBC produced by the Raspberry Pi Foundation. The Raspberry Pi 4’s technical specs
    include the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 从 2019 年 6 月到 2023 年 10 月，Raspberry Pi 4 Model B 一直是由 Raspberry Pi 基金会生产的旗舰
    SBC。Raspberry Pi 4 的技术规格包括以下内容：
- en: A Broadcom BCM2711 1.5 GHz quad-core Cortex-A72 (Arm v8) 64-bit SoC
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Broadcom BCM2711 1.5 GHz 四核 Cortex-A72（Arm v8）64 位 SoC
- en: 2, 4, or 8 GB DDR4 RAM
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2, 4 或 8 GB DDR4 RAM
- en: 2.4 GHz and 5 GHz 802.11ac wireless, Bluetooth 5.0, BLE
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.4 GHz 和 5 GHz 802.11ac 无线，蓝牙 5.0，BLE
- en: A serial port for debugging and development
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于调试和开发的串口
- en: A microSD slot, which can be used as a boot device
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 microSD 卡槽，可以用作启动设备
- en: A USB-C connector to power the board
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 USB-C 连接器，用于为开发板供电
- en: Two full-size USB 3.0 and two full-size USB 2.0 host ports
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个全尺寸 USB 3.0 和两个全尺寸 USB 2.0 主机端口
- en: A Gigabit Ethernet port
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个千兆以太网端口
- en: Two micro HDMI ports for video and audio output
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个 micro HDMI 端口，用于视频和音频输出
- en: In addition, there is a 40-pin expansion header for which there are a great
    variety of daughter boards known as **Hardware Attached on Top** (**HATs**) that
    allow you to adapt the board to do many different things. However, you will not
    need any HATs for the examples in this book.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还提供一个 40 针扩展头，可以连接多种被称为 **硬件附加在顶部**（**HATs**）的子板，允许你将开发板适配成许多不同的用途。然而，在本书中的示例中，你不需要任何
    HATs。
- en: 'In addition to the board itself you will require the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 除了开发板本身，你还需要以下设备：
- en: A microSD card and a means of writing to it from your development PC or laptop
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一张 microSD 卡以及一种从开发PC或笔记本电脑写入它的方式
- en: A USB-to-TTL serial cable with a 3.3 V logic level
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一根带有 3.3 V 逻辑电平的 USB 到 TTL 串口线
- en: A 5 V USB-C power supply capable of delivering 3 A
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 5 V USB-C 电源，能够提供 3 A 电流
- en: An Ethernet cable and a router to plug it into as some of the examples require
    network connectivity
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一根以太网线和一个路由器来连接，因为一些示例需要网络连接
- en: The BeaglePlay
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BeaglePlay
- en: 'The BeaglePlay is an open source hardware design for an SBC produced by the
    BeagleBoard.org Foundation. The main points of the specification are:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: BeaglePlay 是由 BeagleBoard.org 基金会生产的一款开源硬件设计的 SBC（单板计算机）。该规格的主要特点如下：
- en: A TI AM6254 1.4 GHz Arm quad-core Cortex-A53 (Arm v8) 64-bit Sitara SoC
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TI AM6254 1.4 GHz 四核 Cortex-A53（Arm v8）64 位 Sitara SoC
- en: 2 GB DDR4 RAM
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2 GB DDR4 RAM
- en: 16 GB eMMC on-board flash
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 板载 16 GB eMMC 闪存
- en: 2.4 GHz and 5 GHz MIMO Wi-Fi, BLE, Zigbee
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.4 GHz 和 5 GHz MIMO Wi-Fi, BLE, Zigbee
- en: A serial port for debugging and development
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于调试和开发的串口
- en: A microSD slot, which can be used as a boot device
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 microSD 卡槽，可以用作启动设备
- en: A USB-C connector to power the board
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 USB-C 连接器，用于为开发板供电
- en: A full-size USB 2.0 host port
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个全尺寸 USB 2.0 主机端口
- en: A Gigabit Ethernet port
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个千兆以太网端口
- en: A full-size HDMI port for video and audio output
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个全尺寸 HDMI 端口，用于视频和音频输出
- en: Instead of a large expansion header, the BeaglePlay has mikroBUS, Grove, and
    Qwiic interfaces for connecting add-on boards.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: BeaglePlay 采用 mikroBUS、Grove 和 Qwiic 接口来连接附加板，而不是采用大型扩展头。
- en: 'In addition to the board itself, you will require the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 除了开发板本身，你还需要以下设备：
- en: A microSD card and a means of writing to it from your development PC or laptop
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一张 microSD 卡以及一种从开发PC或笔记本电脑写入它的方式
- en: A USB-to-TTL serial cable with a 3.3 V logic level
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一根带有 3.3 V 逻辑电平的 USB 到 TTL 串口线
- en: A 5 V USB-C power supply capable of delivering 3 A
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 5 V USB-C 电源，能够提供 3 A 电流
- en: An Ethernet cable and a router to plug it into as some of the examples require
    network connectivity
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一根以太网线和一个路由器来连接，因为一些示例需要网络连接
- en: 'In addition to the above,[*Chapter 12*](Chapter_04.xhtml#_idTextAnchor126)
    also requires the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 除了上述内容，[*第12章*](Chapter_04.xhtml#_idTextAnchor126)还要求以下内容：
- en: A MikroE-5764 GNSS 7 Click add-on board
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块 MikroE-5764 GNSS 7 Click 扩展板
- en: An external active GNSS antenna with an SMA connector
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个带有 SMA 连接器的外部主动 GNSS 天线
- en: A MikroE-5546 Environment Click add-on board
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块 MikroE-5546 Environment Click 扩展板
- en: A MikroE-5545 OLED C Click add-on board
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块 MikroE-5545 OLED C Click 扩展板
- en: QEMU
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: QEMU
- en: 'QEMU is a machine emulator. It comes in different flavors, each of which can
    emulate a processor architecture and various boards built using that architecture.
    For example, we have the following:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: QEMU 是一个机器模拟器。它有不同的版本，每个版本可以模拟一种处理器架构以及使用该架构构建的各种板子。例如，我们有以下几种：
- en: '`qemu-system-arm`: 32-bit Arm'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qemu-system-arm`：32位 Arm'
- en: '`qemu-system-aarch64`: 64-bit Arm'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qemu-system-aarch64`：64位 Arm'
- en: '`qemu-system-mips`: MIPS'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qemu-system-mips`：MIPS'
- en: '`qemu-system-ppc`: Power PC'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qemu-system-ppc`：Power PC'
- en: '`qemu-system-x86`: x86 and x86-64'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qemu-system-x86`：x86和x86-64'
- en: 'For each architecture, QEMU emulates a range of hardware that you can see by
    using the `-machine help` option. Each architecture emulates most of the hardware
    that would normally be found on that board. There are options to link hardware
    to local resources, such as using a local file for the emulated disk drive. Here
    is a concrete example:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每种架构，QEMU 模拟了一系列硬件，你可以通过使用`-machine help`选项查看。每种架构模拟了该板上通常会找到的大多数硬件。还有选项将硬件链接到本地资源，例如使用本地文件作为模拟的磁盘驱动器。这里是一个具体的例子：
- en: '[PRE0]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**IMPORTANT NOTE**'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: The preceding command is not meant to be executed and will fail since `qemu-system-arm`
    is not installed and the `rootfs.ext4.sd`, `zImage`, and `vexpress-v2p-ca9.dtb`
    files do not exist on your host system. It is just an example for us to expand
    on.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令不打算执行，并且会失败，因为`qemu-system-arm`未安装，并且`rootfs.ext4.sd`、`zImage`和`vexpress-v2p-ca9.dtb`文件在你的主机系统中不存在。这只是一个供我们展开讨论的示例。
- en: 'The options used in the preceding command line are as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令行中使用的选项如下：
- en: '`-machine vexpress -a9`: Creates an emulation of an Arm Versatile Express development
    board with a Cortex-A9 processor.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-machine vexpress -a9`：创建一个具有 Cortex-A9 处理器的 Arm Versatile Express 开发板的仿真。'
- en: '`-m 256M`: Populates it with 256 MB of RAM.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-m 256M`：分配 256 MB 的 RAM。'
- en: '-`drive file=rootfs.ext4,sd`: Connects the SD interface to the local `rootfs.ext4`
    file, which contains a filesystem image.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-drive file=rootfs.ext4,sd`：将 SD 接口连接到本地的`rootfs.ext4`文件，该文件包含文件系统映像。'
- en: '`-kernel zImage`: Loads the Linux kernel from the local file named `zImage`.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-kernel zImage`：从本地名为`zImage`的文件加载 Linux 内核。'
- en: '`-dtb vexpress-v2p-ca9.dtb`: Loads the device tree from the local `vexpress-v2p-ca9.dtb`
    file.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-dtb vexpress-v2p-ca9.dtb`：从本地的`vexpress-v2p-ca9.dtb`文件加载设备树。'
- en: '`-append "…"`: Appends the string in quotes as the kernel command line.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-append "…" `：将引号中的字符串追加为内核命令行。'
- en: '`-serial stdio`: Connects the serial port to the terminal that launched QEMU
    so that you can log on to the emulated machine via the serial console.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-serial stdio`：将串口连接到启动 QEMU 的终端，这样你就可以通过串口控制台登录到模拟的机器。'
- en: '`-net nic,model=lan9118`: Creates a network interface.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-net nic,model=lan9118`：创建一个网络接口。'
- en: '`-net tap,ifname=tap0`: Connects the network interface to the virtual network
    interface `tap0`.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-net tap,ifname=tap0`：将网络接口连接到虚拟网络接口`tap0`。'
- en: 'To configure the host side of the network you need the `tunctl` command from
    the **User Mode Linux** (**UML**) project. On Debian and Ubuntu, the package is
    named `uml-utilities`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置主机端的网络，你需要 **User Mode Linux** (**UML**) 项目中的 `tunctl` 命令。在 Debian 和 Ubuntu
    上，软件包名为 `uml-utilities`：
- en: '[PRE1]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This creates a network interface named `tap0` that is connected to the network
    controller in the emulated QEMU machine. You configure `tap0` the same way as
    any other network interface.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这会创建一个名为`tap0`的网络接口，并将其连接到模拟 QEMU 机器中的网络控制器。你可以像配置任何其他网络接口一样配置`tap0`。
- en: All these options are described in the following chapters. I will be using Versatile
    Express for most of my examples, but it should be easy to use a different machine
    or architecture.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些选项将在接下来的章节中进行描述。我将在大多数示例中使用 Versatile Express，但应该很容易使用不同的机器或架构。
- en: Provisioning your development environment
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置你的开发环境
- en: I have only used open source software for both the development tools and the
    target OS/applications. I assume you will be using Linux on your development system.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我只使用了开源软件作为开发工具和目标操作系统/应用程序。我假设你将在开发系统上使用 Linux。
- en: I tested all the host commands using Ubuntu 24.04 LTS, so I recommend using
    that version throughout the book to prevent any unexpected problems.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用 Ubuntu 24.04 LTS 测试了所有的主机命令，因此我建议在整本书中使用该版本，以避免出现意外问题。
- en: 'Besides Ubuntu, The Yocto Project only supports a select few Linux distributions:
    Fedora, Debian, openSUSE, AlmaLinux, and Rocky. If you absolutely cannot use Ubuntu,
    then make sure to choose one of those supported distros for The Yocto Project
    exercises.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Ubuntu，The Yocto Project 只支持少数几个 Linux 发行版：Fedora、Debian、openSUSE、AlmaLinux
    和 Rocky。如果你无法使用 Ubuntu，请确保选择这些支持的发行版来进行 The Yocto Project 的练习。
- en: Summary
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Embedded hardware continues to get more complex following the trajectory set
    by Moore’s law. Linux has the power and flexibility to make use of hardware in
    an efficient way. Together, we will learn how to harness that power so we can
    build robust products that delight our users. This book will take you through
    the five phases of an embedded project’s life cycle, beginning with the four elements
    of embedded Linux.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式硬件继续按照摩尔定律的发展趋势变得越来越复杂。Linux 拥有高效利用硬件的能力和灵活性。我们将共同学习如何利用这一力量，从而构建出令用户满意的强大产品。本书将带领你经历嵌入式项目生命周期的五个阶段，从嵌入式
    Linux 的四个元素开始。
- en: The sheer variety of embedded platforms and the fast pace of development lead
    to isolated pools of software. In many cases, you will become dependent on this
    software, especially the Linux kernel that is provided by your SoC or board vendor,
    and to a lesser extent, the toolchain.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式平台的种类繁多，并且开发进度迅速，这导致了软件的孤立池。在许多情况下，你将依赖这些软件，特别是由 SoC 或主板厂商提供的 Linux 内核，以及在较小程度上，工具链。
- en: Some SoC manufacturers are getting better at pushing their changes upstream
    and the maintenance of these changes is getting easier. Despite these improvements,
    selecting the right hardware for your embedded Linux project is still an exercise
    fraught with peril. Open source license compliance is another topic you need to
    be aware of when building products atop the embedded Linux ecosystem.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 SoC 制造商在推动他们的更改上游时变得更加高效，且这些更改的维护也变得更加容易。尽管有这些改进，选择适合的硬件来进行嵌入式 Linux 项目仍然是一项充满风险的挑战。开源许可证合规性是你在构建嵌入式
    Linux 生态系统中的产品时需要关注的另一个话题。
- en: In this chapter, you were introduced to the hardware and some of the software
    you will use throughout this book (namely QEMU). Later on, we will examine some
    powerful tools that can help you create and maintain the software for your device.
    We cover Buildroot and dig deep into The Yocto Project. Before we tackle these
    build tools, we will deconstruct the four elements of embedded Linux, which you
    can apply to all embedded Linux projects regardless of how they are built.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解本书中将使用的硬件和一些软件（即 QEMU）。随后，我们将探讨一些强大的工具，帮助你为设备创建和维护软件。我们将介绍 Buildroot，并深入讲解
    The Yocto Project。在我们深入研究这些构建工具之前，我们将拆解嵌入式 Linux 的四个元素，你可以将其应用于所有嵌入式 Linux 项目，无论它们是如何构建的。
- en: Join our community on Discord
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord 频道
- en: 'Join our community’s Discord space for discussions with the authors and other
    readers: https://packt.link/embeddedsystems'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord 频道，与作者和其他读者讨论： [https://packt.link/embeddedsystems](https://packt.link/embeddedsystems)
- en: '![](img/QR_Code12308107448340296.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code12308107448340296.png)'
