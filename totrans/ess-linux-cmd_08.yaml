- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux SWAP Commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux SWAP commands are an integral part of Linux system administration, allowing
    administrators to effectively manage swap space within the operating system. Swap
    space serves as a crucial component of memory management, providing additional
    virtual memory when the physical RAM capacity is insufficient. These commands
    are widely utilized by Linux system administrators due to their importance in
    optimizing system performance and ensuring efficient memory utilization. The importance
    of Linux SWAP commands lies in their ability to enhance system stability and prevent
    issues related to memory exhaustion. By effectively managing swap space, administrators
    can alleviate memory constraints, allowing the system to handle memory-intensive
    tasks and prevent crashes or slowdowns. This is particularly valuable in scenarios
    where the system encounters high memory demands or when running multiple resource-intensive
    applications simultaneously. The purpose of these commands is to provide administrators
    with the necessary tools to control and monitor swap space. These commands enable
    the configuration and activation of swap devices or files, allowing administrators
    to fine-tune the system’s memory management settings. Additionally, they provide
    insights into memory usage, allowing administrators to monitor swap space utilization
    and make informed decisions regarding memory allocation and optimization. They
    are highly valued by Linux system administrators due to their role in ensuring
    efficient memory utilization and system stability. By utilizing these commands,
    administrators can proactively manage and allocate memory resources according
    to the system’s requirements. This, in turn, leads to improved system performance,
    reduced memory-related issues, and enhanced overall reliability.
  prefs: []
  type: TYPE_NORMAL
- en: With these commands, system administrators can effectively manage swap space
    and optimize memory utilization. Their significance lies in their ability to enhance
    system stability, prevent memory exhaustion, and allow efficient handling of memory-intensive
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The swapon command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The free command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The swapon command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `swapon` command is a crucial utility in Linux that allows system administrators
    to activate and configure swap devices or files. Swap space serves as an extension
    to the physical memory (RAM) and provides additional virtual memory to the system.
    It is located on disk, typically in the form of a dedicated partition or a swap
    file. The operating system uses this disk space as an extension of the physical
    RAM, allowing it to move data between RAM and the swap space as needed to efficiently
    manage system memory. The `swapon` command plays a vital role in efficiently managing
    memory resources and optimizing system performance. One of the main reasons why
    the `swapon` command is of utmost importance is its ability to address situations
    where the system’s physical memory is insufficient to handle the workload. By
    activating swap devices or files using the `swapon` command, administrators can
    effectively increase available memory resources, allowing the system to handle
    memory-intensive tasks without encountering memory exhaustion or performance degradation.
    This is particularly crucial in environments with limited physical memory or when
    running resource-intensive applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'This command is widespread among Linux system administrators due to its versatility
    and flexibility. It enables administrators to configure swap devices or files
    according to their specific requirements. This includes specifying the location
    and size of the swap space, as well as defining swap priority levels for multiple
    swap devices. The `swapon` command empowers administrators to fine-tune the system’s
    memory management settings, ensuring efficient utilization of available resources.
    The primary purpose of the `swapon` command is to enable efficient memory management
    and optimize system performance. By activating swap devices or files, the command
    expands the virtual memory of the system, allowing it to handle memory demands
    beyond the physical RAM capacity. This helps prevent memory-related issues such
    as `swapon` command is a critical tool for maintaining system stability and ensuring
    smooth operation, especially in environments where memory demands fluctuate or
    exceed physical memory limitations. Let’s explore a few examples and leverage
    their practical applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '`swapon` command provides a means to obtain comprehensive details about active
    swap devices, offering valuable information such as the device path, type, size,
    and priority. This feature allows system administrators to gain insights into
    currently enabled swap devices and their associated properties. By executing the
    `swapon` command, users can retrieve a detailed summary of the active swap configuration,
    facilitating efficient monitoring and management of swap resources:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Executing the swapon command to obtain details about active
    swap devices](img/B18212_08_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – Executing the swapon command to obtain details about active swap
    devices
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example, the output displays the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '`NAME`: This column indicates the name or identifier of the swap device. In
    this case, it shows `/dev/dm-1`, which represents a swap partition on the `/``dev/dm-1`
    device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE`: This column indicates the type of the swap device. Here, it states
    that the device is a `partition` type, indicating that it is a dedicated partition
    specifically used for swap space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SIZE`: This column displays the size of the swap device. In the example, the
    size is specified as `3G`, indicating that the swap partition has a capacity of
    3 GB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`USED`: This column indicates the amount of swap space that is currently being
    utilized. In the output, it shows `0B`, indicating that none of the swap space
    is currently in use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PRIO`: This column represents the priority assigned to the swap device. A
    higher priority value indicates a higher preference for utilizing that particular
    swap device. In the example, the priority is indicated as `-2`, suggesting that
    this swap device has a lower priority compared to others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`free` command is used to display information about the system’s memory usage,
    including the total physical memory (RAM), used memory, free memory, and swap
    space. We will delve into the `free` command in our upcoming topic on monitoring
    memory usage, where we will explain how to interpret its output to assess the
    system’s memory health:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Displaying information about memory usage](img/B18212_08_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – Displaying information about memory usage
  prefs: []
  type: TYPE_NORMAL
- en: The output of the `free -h | grep 'Mem|buffers/cache'` command provides information
    about the memory usage in the system. The line that starts with `Mem:` displays
    details about the physical memory (RAM) in the system. In this example, it shows
    that the total physical memory is `8.0Gi` (GB). The next column indicates the
    amount of memory used, which is `1.5Gi`. The following column represents the amount
    of memory allocated for buffers and cache, which is `5.3Gi`. The subsequent columns
    provide information about other memory metrics, such as the amount of memory used
    for kernel purposes (`21Mi`) and the available memory (`1.2Gi` and `6.3Gi`).
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 3**: Check the available swap space:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: "![Figure 8.3 – Checking \uFEFFthe available swap space](img/B18212_08_3.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – Checking the available swap space
  prefs: []
  type: TYPE_NORMAL
- en: The output of the `swapon --summary | tail -n +2 | awk '{sum += $3} END {print
    sum/1024 " MB"}'` command provides the total size of the swap space in MB.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break down the command step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: '`swapon --summary` displays a summary of currently active swap devices and
    their respective sizes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tail -n +2` filters the output and skips the first line, which is the header
    line, and displays only the subsequent lines containing information about the
    swap devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`awk ''{sum += $3} END {print sum/1024 " MB"}''` uses the `awk` command to
    calculate the sum of the third column (which represents the size of each swap
    device) and store it in the `sum` variable. The `END` block is executed after
    processing all the lines, and it prints the sum divided by 1,024 to convert it
    from KB to MB, followed by the `MB` unit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this example, the `3072 MB` output indicates that the total size of the swap
    space is 3,072 MB. This information is useful for monitoring and managing the
    available swap space in the system.
  prefs: []
  type: TYPE_NORMAL
- en: By combining these commands, you can get an overview of both the free memory
    in RAM and the available swap space in your Linux system. Additionally, the `swapon`
    command serves a crucial role in configuring and enabling specific files or devices
    to be used as swap space, expanding the virtual memory capacity of the system
    when needed. This enables efficient memory management and ensures that the system
    can handle tasks that exceed the physical RAM capacity. To sum up, the `swapon`
    command holds great significance for system administrators. Its primary function
    is to activate and configure swap devices or files, which adds extra virtual memory
    to the system. This capability is crucial for effectively managing memory resources,
    preventing memory depletion, and enhancing overall system performance. The `swapon`
    command offers a range of options and settings that empower administrators to
    fine-tune memory management parameters and maximize the utilization of available
    resources. As a result, it has become an indispensable tool in the arsenal of
    Linux system administrators, enabling them to optimize memory usage and maintain
    a well-performing system.
  prefs: []
  type: TYPE_NORMAL
- en: The free command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `free` command is a powerful utility used in Linux systems to provide information
    about the system’s memory usage. It plays a crucial role in monitoring and managing
    memory resources, allowing system administrators to optimize system performance
    and ensure efficient utilization of available memory. The command displays various
    metrics, including total memory, used memory, free memory, and memory allocated
    for buffers and cache. By analyzing the output of the `free` command, administrators
    can assess the memory status of the system, identify potential memory issues,
    and make informed decisions regarding memory allocation and optimization. The
    importance of the `free` command lies in its ability to provide real-time information
    about memory usage. Memory is a critical resource in any system, and monitoring
    its usage is essential for maintaining system stability and performance. The `free`
    command offers a comprehensive overview of memory utilization, enabling administrators
    to identify memory-hungry processes, detect memory leaks, and take appropriate
    actions to mitigate memory-related issues. It also allows administrators to gauge
    the impact of memory-intensive tasks on the system’s overall performance and make
    necessary adjustments to optimize resource allocation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `free` command is extensively used by Linux system administrators for a
    variety of purposes. It helps in troubleshooting memory-related problems, such
    as identifying excessive memory usage or low available memory. Administrators
    can use the command to determine if a system is running low on memory and take
    appropriate actions to alleviate the situation, such as freeing up memory by terminating
    unnecessary processes or optimizing memory allocation for critical applications.
    Additionally, the `free` command aids in capacity planning, as administrators
    can gather information about memory usage trends over time to determine if additional
    memory resources are required to meet future demands. It serves as a valuable
    tool for monitoring system performance, ensuring optimal memory utilization, and
    maintaining a stable and efficient Linux environment. In our previous discussion,
    we explored the functionality of the `free` command. Now, let’s further explore
    this command by examining additional flags and options that can be applied to
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check memory usage:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.4 – Using the free command to check memory usage](img/B18212_08_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – Using the free command to check memory usage
  prefs: []
  type: TYPE_NORMAL
- en: This will display the memory usage in a human-readable format, showing the total,
    used, and available memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check memory usage in continuous mode:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.5 – Using the free command to check memory usage in continuous mode](img/B18212_08_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – Using the free command to check memory usage in continuous mode
  prefs: []
  type: TYPE_NORMAL
- en: The `-s` flag specifies the interval in seconds for updating the displayed memory
    information. In this example, the command will continuously refresh the memory
    usage every 5 seconds, providing real-time updates.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, the `free` command provides real-time information about memory usage
    and assists in troubleshooting memory-related problems. This makes it an essential
    component of memory management. By leveraging the insights provided by the `free`
    command, administrators can make informed decisions, enhance system performance,
    and ensure efficient resource allocation in their Linux systems.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter delves into the realm of Linux SWAP commands, which are crucial
    for efficient memory management and performance optimization in Linux systems.
    The chapter highlights two key commands: `swapon` and `free`. The `swapon` command
    enables system administrators to activate and configure swap devices or files,
    thereby adding extra memory resources to the system. Lastly, the `free` command
    provides real-time information on memory usage, aiding in the identification of
    memory-related issues and assisting in capacity planning.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore a wide range of essential tools for monitoring
    system performance, troubleshooting issues, and debugging problems in Linux environments.
    These commands provide valuable insights into various aspects of the system, allowing
    administrators to identify and resolve issues efficiently. By mastering these
    commands, system administrators can maintain the stability, reliability, and performance
    of their Linux systems.
  prefs: []
  type: TYPE_NORMAL
