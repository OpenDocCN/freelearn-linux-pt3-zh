- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sandbox Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To provide children with a safe place to play, you create a walled area and
    store their toys inside a small box (or *container*). When this idea moves to
    the playground, we refer to it as a **sandbox**. The term sandbox in application
    development comes from this same idea.
  prefs: []
  type: TYPE_NORMAL
- en: In the *sandboxing* approach, each application resides in a sandbox, a controlled
    and restricted environment for running its code. This environment helps developers
    isolate and protect system resources.
  prefs: []
  type: TYPE_NORMAL
- en: Developers also use *sandboxed environments* to identify an application’s behavior
    and to detect bugs or other undesirable elements of its behavior.
  prefs: []
  type: TYPE_NORMAL
- en: There are several methods of sandboxing applications for Linux environments.
    In this book, we focus on some of them, including those considered the *least
    intrusive* (**Applmage**) and those developed and supported by the **Fedora**
    **Project** (**Flatpak**).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting sandbox applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diving deep into AppImage apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examining Flatpak applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For sandboxing or development of sandbox applications, you will need to install
    some packages. Most of them are included in Fedora’s official repositories.
  prefs: []
  type: TYPE_NORMAL
- en: In each section, you will see the required packages and how to install each
    one of them.
  prefs: []
  type: TYPE_NORMAL
- en: If we use any package or code that’s not included in the official Fedora repositories,
    we will include the link to get it and the instructions to install it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The examples created in this chapter can be found in the book’s GitHub repository
    that you can find at the following URL: [https://github.com/PacktPublishing/Fedora-Linux-System-Administration/tree/main/chapter6](https://github.com/PacktPublishing/Fedora-Linux-System-Administration/tree/main/chapter6).'
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting sandbox applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we begin, we must make a distinction. Application isolation has always
    been sought as a *security* or *restriction measure*, either in case of intrusions
    or excessive use of resources.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we can distinguish the development of applications according to the
    relationship between their use of resources and their interaction with privileged
    files of the host system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, based on the aforementioned abstraction required to host code in a system,
    we could typify an application as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Native** or **compiled**: It runs on the system with all system restrictions
    and privileges.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interpret**: Interpreters walk through an application’s code line by line
    and run each instruction into the system. In the past, applications created with
    interpreted languages were much slower than applications created with compiled
    languages. But, with the development of *just-in-time compilation*, this difference
    is reduced.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jailed**: It allows application code to run on the system but from a *restricted
    location*. This restriction could include system resources or even system files.
    The structure of the jail could look like the system, but the changes or alterations
    to the files inside the jail do not affect the behavior of the host system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sandbox**: This is a more *restrictive* environment than a jail. The sandbox
    includes *only* the files required to run the application and interact with the
    system. This feature allows the portability of the application in an efficient
    way. The distribution of the host system does not affect the runtime of the sandbox
    application. It only requires that the distribution supports the sandbox type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The development of a sandbox application could be very simple, from opening
    an application installed on the system in a controlled environment to porting
    applications from other distributions, without all the development involved in
    making it run on each distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how to create a simple sandbox application. Then, let’s learn about
    the common packaging methods for sandbox applications in Fedora.
  prefs: []
  type: TYPE_NORMAL
- en: SELinux sandbox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**SELinux** is a set of policies that allow us to add a *security layer* to
    our system environment. Based on these policies, we could set up a sandbox for
    applications.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: SELinux will be covered in detail in [*Chapter 12*](B19121_12.xhtml#_idTextAnchor240)
    of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let’s run the **Firefox** browser inside a sandbox isolated from
    the system environment. To do this, follow the subsequent steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a **root** user, install the SELinux sandbox utilities. Install the **policycoreutils-sandbox**
    package with the **dnf** command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure SELinux in the **Permissive** mode to allow SELinux sandboxing. Use
    the **setenforce** and **getenforce** commands to verify the change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As a *non-privileged user*, open a terminal and, inside the SELinux sandbox,
    run **firefox** in a *1280x1024* window. Use the **sandbox** command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 6.1 – Firefox on SELinux sandbox](img/6.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – Firefox on SELinux sandbox
  prefs: []
  type: TYPE_NORMAL
- en: Let’s find out how to *monitor the performance* of the sandbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the **ps** command to find the sandbox’s PID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 6.2 – Finding the sandbox pid](img/B19121_06_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – Finding the sandbox pid
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the **top** command to monitor the performance of the found **PID**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 6.3 – Monitoring sandbox performance](img/B19121_06_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Monitoring sandbox performance
  prefs: []
  type: TYPE_NORMAL
- en: The web browser is isolated, so its behavior does not affect the rest of the
    system. Let’s see how to verify it.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Firefox sandboxing, open the Fedora Project home page ([https://start.fedoraproject.org/](https://start.fedoraproject.org/)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Browsing with Firefox sandboxing](img/6.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Browsing with Firefox sandboxing
  prefs: []
  type: TYPE_NORMAL
- en: Close Firefox sandboxing by clicking the **X** button in the upper-right corner
    of the Firefox window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run Firefox in the sandbox again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use *Ctrl* + *H* to open the browsing history:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Checking browsing history](img/6.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Checking browsing history
  prefs: []
  type: TYPE_NORMAL
- en: Close the Firefox sandboxing window again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Observe that no information about the website visited was saved. This information
    gets saved in a system file. Firefox runs in isolation and the information is
    stored inside the sandbox. When the sandbox is closed, the information stored
    in it is deleted.
  prefs: []
  type: TYPE_NORMAL
- en: The SELinux sandbox has many practical uses, for example, if an *untrusted file*
    needs to be opened.
  prefs: []
  type: TYPE_NORMAL
- en: 'With a `pdf` file, as an example, run `evince` in a sandbox to read it. Use
    the `sandbox` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: $ chmod +x firefox-nightly-113.0.r20230321213816-x86_64.AppImage
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ wget \
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ chmod a+x appimagetool-x86_64.AppImage
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ./appimagetool-x86_64.AppImage some.AppDir
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[root@workstation ~]# ps axf | egrep "krita|xdg-dbus-proxy"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 13340 ?  S   0:00  |   \_ bwrap --args 42 krita
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 13359 ?  S   0:00  |       \_ bwrap --args 42 krita
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 13360 ?  Sl  0:04 |           \_ krita
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 13353 ?  S   0:00 \_ bwrap --args 42 xdg-dbus-proxy --args=44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: xdg-dbus-proxy is a filtering proxy for *D-Bus* connections. It is the portal
    through which the krita application interacts with the system.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[root@workstation ~]# top -p 13353,13360'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[root@workstation ~]# flatpak list --app'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[root@workstation ~]# flatpak history'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[root@workstation ~]# flatpak info org.kde.krita'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[root@workstation ~]# flatpak ps'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[root@workstation ~]# flatpak remotes'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[root@workstation ~]# flatpak remote-ls flathub --app'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: flatpak remote-add --if-not-exists flathub \
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: .org/repo/flathub.flatpakrepo
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[root@workstation ~]# flatpak remotes'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: flatpak remote-ls flathub --app | wc -l
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: $ flatpak remote-ls flathub --app | grep "Telegram Desktop"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ flatpak remote-info flathub org.telegram.desktop
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ flatpak install flathub org.telegram.desktop
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Looking for matches…
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Required runtime for org.telegram.desktop/x86_64/stable (runtime/org.freedesktop.Platform/x86_64/22.08)
    found in remote flathub
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Do you want to install it? [Y/n]: Y to install.Wait for the installation to
    finish:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ flatpak run org.telegram.desktop
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: flatpak remote-ls flathub -a | grep -i \
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: '"freedesktop platform" | grep -v translations'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: flatpak remote-ls flathub -a | grep -i \
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: '"freedesktop SDK" | grep 22.08'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: flatpak install flathub \
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: org.freedesktop.Platform//22.08 \
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: org.freedesktop.Sdk//22.08
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Skipping: org.telegram.desktop/x86_64/22.08 is already installed'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Do you want to install it? [Y/n]: Y'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '#!/bin/sh'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: echo "Hello world, I'm a flatpak application"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'app-id: org.flatpak.script'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'runtime: org.freedesktop.Platform'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'runtime-version: ''22.08'''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'sdk: org.freedesktop.Sdk'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'command: script.sh'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'modules:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- name: script'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'buildsystem: simple'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'build-commands:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- install -D script.sh /app/bin/script.sh'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'sources:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- type: file'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'path: script.sh'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ flatpak-builder build-dir org.flatpak.script.yml
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ flatpak-builder --user --install --force-clean \
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: build-dir org.flatpak.script.yml
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ flatpak run org.flatpak.script
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
