- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Serving Web Content
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供 Web 内容
- en: 'The flexible nature of Ubuntu Server makes it an amazing platform on which
    to host your organization’s web presence. In this chapter, we’ll take a look at
    Apache and NGINX, which make up the leading web server software on the internet.
    We’ll go through installing, configuring, and extending both, as well as securing
    them with **Transport Layer Security (TLS)**. In addition, we’ll also take a look
    at installing Nextcloud, which is a great solution for setting up your very own
    cloud environment for your organization to use for collaboration and sharing files.
    As we work through concepts related to hosting web content on Ubuntu Server, we
    will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu Server 的灵活性使其成为一个极好的平台，用来托管你组织的 web 存在。在本章中，我们将讨论 Apache 和 NGINX，它们是目前互联网上领先的
    web 服务器软件。我们将介绍两者的安装、配置和扩展，并用**传输层安全性（TLS）**来保护它们。此外，我们还将讨论如何安装 Nextcloud，这是一个非常适合搭建私人云环境的解决方案，供你的组织用来协作和共享文件。在处理与在
    Ubuntu Server 上托管 web 内容相关的概念时，我们将覆盖以下内容：
- en: Installing and configuring Apache
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装与配置 Apache
- en: Installing additional Apache modules
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装额外的 Apache 模块
- en: Securing Apache with TLS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用 TLS 保护 Apache
- en: Installing and configuring NGINX
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装与配置 NGINX
- en: Setting up and configuring Nextcloud
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置与配置 Nextcloud
- en: To get us started, we’ll first look at configuring Apache, as well as some basic
    configuration.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们入门，我们首先来看一下 Apache 的配置，以及一些基本配置。
- en: Installing and configuring Apache
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装与配置 Apache
- en: The best way to become familiar with any technology is to dive right in. We’ll
    begin this chapter by installing Apache. But first, what exactly is Apache? For
    those that aren’t already aware, Apache is a popular application that is typically
    run on Linux and Unix servers to serve web pages to users. It runs in the background,
    and serves HTML pages to those that request a URL that exists on your server.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 了解任何技术的最佳方法就是直接上手。本章开始时我们将安装 Apache。但首先，究竟什么是 Apache？对于那些还不清楚的人，Apache 是一个流行的应用程序，通常运行在
    Linux 和 Unix 服务器上，用来向用户提供网页。它在后台运行，响应请求 URL 的用户并提供 HTML 页面。
- en: 'Installing Apache is very easy; it’s simply a matter of installing the `apache2`
    package:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Apache 非常简单；实际上只需要安装 `apache2` 包：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'By default, Ubuntu will immediately start and enable the `apache2` daemon as
    soon as its package is installed. You can confirm this yourself with the following
    command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Ubuntu 会在安装 `apache2` 包后立即启动并启用 `apache2` 守护进程。你可以通过以下命令自行确认：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In fact, at this point, you already have (for all intents and purposes) a fully
    functional web server. If you were to open a web browser and enter the IP address
    of the server you just installed Apache on, you should see Apache’s sample web
    page:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，此时，你已经拥有了一个（在实际操作中）完全功能的 web 服务器。如果你打开一个网页浏览器并输入你刚刚安装了 Apache 的服务器的 IP 地址，你应该会看到
    Apache 的示例网页：
- en: '![](img/B18425_14_01.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_14_01.png)'
- en: 'Figure 14.1: The default sample web page provided by Apache'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.1：Apache 提供的默认示例网页
- en: There you go, you have officially served web content. All you needed to do was
    install the `apache2` package, and your server was transformed into a web server.
    Chapter over, time to move on.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，你已经正式提供了 web 内容。你所需要做的就是安装 `apache2` 包，你的服务器就转变成了一个 web 服务器。本章结束，接下来可以继续进行。
- en: Of course, there’s more to Apache than simply installing it and having it present
    a sample web page. While you could certainly replace the content in the sample
    web page with your own and be all set when it comes to hosting content for your
    users, there’s much more to understand. For instance, there are several configuration
    files in the `/etc/apache2` directory that govern how sites are hosted, as well
    as which directories Apache will look in to find web pages to host. Apache also
    features plugins, which we will go over as well.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Apache 不仅仅是安装并展示示例网页那么简单。虽然你可以将示例网页中的内容替换为自己的内容，并顺利完成托管任务，但 Apache 的功能远不止于此。例如，在
    `/etc/apache2` 目录中有多个配置文件，它们控制着网站的托管方式，以及 Apache 会查找哪些目录以找到需要托管的网页。Apache 还有插件，我们也会介绍它们。
- en: The directory that Apache serves web pages from is known as the **document root**,
    with `/var/www/html` being the default. Inside that directory, you’ll see an `index.xhtml`
    file, which is actually the default page you see when you visit an unmodified
    Apache server. Essentially, this is a test page that is designed to show you that
    the server is working, as well as some tidbits of information regarding the default
    configuration.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Apache 提供网页的目录称为**文档根目录**，默认路径为 `/var/www/html`。在该目录内，你会看到一个 `index.xhtml` 文件，这实际上是当你访问一个未修改的
    Apache 服务器时看到的默认页面。本质上，这是一个测试页面，旨在向你展示服务器正在工作，并提供一些关于默认配置的信息。
- en: You’re not limited to hosting just one website on a server, though. Apache supports
    the concept of a **virtual host**, which allows you to serve multiple websites
    from a single server. Each virtual host consists of an individual configuration
    file, which differentiates itself based on either name or IP address.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你并不限于在一个服务器上托管单个网站。Apache 支持**虚拟主机**的概念，这允许你从单个服务器上服务多个网站。每个虚拟主机由一个单独的配置文件组成，该文件根据名称或
    IP 地址进行区分。
- en: For example, you could have an Apache server with a single IP address that hosts
    two different websites, such as `acmeconsulting.com` and `acmesales.com`. These
    are hypothetical websites, but you get the idea. To set this up, you would create
    separate configuration files for `acmeconsulting.com` and `acmesales.com` and
    store them in your Apache configuration directory. Each configuration file would
    include a `<VirtualHost>` stanza, where you would place an identifier such as
    a name or IP address that differentiates one from the other. When a request comes
    in, Apache will serve either `acmeconsulting.com` or `acmesales.com` to the user’s
    browser, depending on which criteria matched when the request came in. The configuration
    files for each site typically end with the `.conf` filename extension and are
    stored in the `/etc/apache2/sites-available` directory. We’ll go over all of this
    in more detail shortly, so don’t worry if you don’t understand this yet.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以拥有一个 Apache 服务器，使用一个 IP 地址托管两个不同的网站，如 `acmeconsulting.com` 和 `acmesales.com`。这些是假设的网站，但你明白意思。为了设置这个，你需要为
    `acmeconsulting.com` 和 `acmesales.com` 创建单独的配置文件，并将它们存储在 Apache 配置目录中。每个配置文件都会包括一个
    `<VirtualHost>` 部分，在其中你会放置一个标识符，比如名称或 IP 地址，用于区分不同的网站。当请求到来时，Apache 会根据匹配的标准，将
    `acmeconsulting.com` 或 `acmesales.com` 服务到用户的浏览器。每个站点的配置文件通常以 `.conf` 为文件扩展名，并存储在
    `/etc/apache2/sites-available` 目录中。我们稍后会更详细地讲解这些内容，所以如果你现在还不明白也不用担心。
- en: 'The basic workflow for setting up a new site (virtual host) will typically
    be similar to the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 设置新站点（虚拟主机）的基本工作流程通常如下：
- en: The web developer creates the website and related files
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网页开发者创建网站及相关文件
- en: These files are uploaded to Ubuntu Server, typically in a subdirectory of `/var/www`
    or another directory the administrator has chosen
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些文件被上传到 Ubuntu 服务器，通常位于 `/var/www` 的子目录中，或是管理员选择的其他目录
- en: After adding the necessary files into the Document Root directory, the administrator
    will make sure that the `www-data` user owns all of the files within (in the case
    of Apache)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在将必要的文件添加到文档根目录后，管理员会确保 `www-data` 用户拥有该目录中的所有文件（在 Apache 的情况下）
- en: The server administrator creates a configuration file for the site and copies
    it into the `/etc/apache2/sites-available` directory
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器管理员为该站点创建一个配置文件并将其复制到 `/etc/apache2/sites-available` 目录中
- en: The administrator enables the site and reloads Apache
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员启用该站点并重新加载 Apache
- en: 'Enabling virtual hosts is handled a bit differently in Debian and Ubuntu than
    on other platforms. In fact, there are two specific commands to handle this purpose:
    `a2ensite` for enabling a site and `a2dissite` for disabling a site. You won’t
    find these commands on distributions such as CentOS, for example. Configuration
    files for each site are stored in the `/etc/apache2/sites-available/` directory,
    and we would use the `a2ensite` command to enable each configuration. Assuming
    a site with the URL [acmeconsulting.com](http://acmeconsulting.com) is to be hosted
    on our Ubuntu server, we would create the `/etc/apache2/sites-available/acmeconsulting.com.conf`
    configuration file and enable the site with the following commands:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在Debian和Ubuntu中，启用虚拟主机的方式与其他平台有所不同。实际上，有两个专门的命令来处理这个目的：`a2ensite`用于启用站点，`a2dissite`用于禁用站点。例如，你在CentOS等发行版中是找不到这些命令的。每个站点的配置文件存储在`/etc/apache2/sites-available/`目录中，我们使用`a2ensite`命令来启用每个配置。假设要在Ubuntu服务器上托管一个URL为[acmeconsulting.com](http://acmeconsulting.com)的站点，我们将创建`/etc/apache2/sites-available/acmeconsulting.com.conf`配置文件，并使用以下命令启用站点：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: I’m not using absolute paths in my examples; as long as you’ve copied the configuration
    file to the correct place, the `a2ensite` and `a2dissite` commands will know where
    to find it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我的示例中没有使用绝对路径；只要你将配置文件复制到正确的位置，`a2ensite`和`a2dissite`命令就会知道在哪里找到它。
- en: 'If we wanted to disable the site for some reason, we would execute the `a2dissite`
    command against the site’s configuration file:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们出于某些原因想禁用站点，我们可以对该站点的配置文件执行`a2dissite`命令：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you’re curious about how this works behind the scenes, when the `a2ensite`
    command is run against a configuration file, it basically creates a symbolic link
    to that file and stores it in the `/etc/apache2/sites-enabled` directory. When
    you run `a2dissite` to disable a site, this symbolic link is removed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对背后如何运作感到好奇，当运行`a2ensite`命令时，它会针对配置文件创建一个符号链接，并将其存储在`/etc/apache2/sites-enabled`目录中。当你运行`a2dissite`来禁用站点时，这个符号链接会被删除。
- en: Apache, by default, will use any configuration files it finds in the `/etc/apache2/sites-enabled`
    directory. After enabling or disabling a site, you’ll need to refresh Apache’s
    configuration, which is where the `reload` option comes in. This command won’t
    restart Apache itself (so users who are using your existing sites won’t be disturbed)
    but it does give Apache a chance to reload its configuration files. If you replace
    `reload` with `restart` in the preceding commands, Apache will perform a full
    restart. You should only need to do that if you’re having an issue with Apache
    or enabling a new plugin, but in most cases the `reload` option is preferred on
    a production system.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Apache会使用它在`/etc/apache2/sites-enabled`目录中找到的任何配置文件。在启用或禁用站点后，你需要刷新Apache的配置，这时就用到了`reload`选项。这个命令不会重启Apache本身（所以正在使用你现有站点的用户不会受到干扰），但它确实给了Apache一个重新加载配置文件的机会。如果你将`reload`替换为`restart`，Apache将执行完全重启。你只有在遇到Apache问题或启用新插件时才需要执行重启，但在大多数情况下，生产系统上更推荐使用`reload`选项。
- en: 'The main configuration file for Apache is located at `/etc/apache2/apache2.conf`.
    Feel free to view the contents of this file; the comments contain a good overview
    of how Apache’s configuration is laid out. The following lines in this file are
    of special interest:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Apache的主配置文件位于`/etc/apache2/apache2.conf`。你可以查看这个文件的内容，文件中的注释很好地概述了Apache配置的布局。这个文件中的以下几行特别值得关注：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, this is how Ubuntu has configured Apache to look for enabled
    sites in the `/etc/apache2/sites-enabled` directory. Any file stored there with
    the `.conf` file extension is read by Apache. If you wish, you could actually
    remove those lines and Apache would then behave as it does on other platforms,
    and the `a2ensite` and `a2dissite` commands would no longer have any purpose.
    However, it’s best to keep the framework of Ubuntu’s implementation intact, as
    separating the configuration files makes logical sense and helps simplify the
    configuration. This chapter will go along with the Ubuntu way of managing configuration.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这就是Ubuntu如何配置Apache以在`/etc/apache2/sites-enabled`目录中查找已启用站点的方式。存储在该目录下的任何以`.conf`为扩展名的文件都会被Apache读取。如果你愿意，实际上可以移除这些行，这样Apache就会像在其他平台上那样运行，`a2ensite`和`a2dissite`命令也将不再有任何用途。然而，最好保留Ubuntu实现的框架，因为将配置文件分开是有逻辑意义的，并有助于简化配置。本章将沿用Ubuntu的配置管理方式。
- en: An additional virtual host is not required if you’re only hosting a single site.
    The contents of `/var/www/html` are served by the default virtual host if you
    make no changes to Apache’s configuration. This is where the example site that
    ships with Apache comes from. If you only need to host one site, you could remove
    the default `index.xhtml` file stored in this directory and replace it with the
    files required by your website. If you wish to test this for yourself, you can
    make a backup copy of the default `index.xhtml` file and create a new one with
    some standard HTML. You should see the default page change to feature the content
    you just added to the file.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只托管一个站点，则不需要额外的虚拟主机。如果你没有更改 Apache 配置，`/var/www/html`中的内容将由默认虚拟主机提供。这就是 Apache
    附带的示例网站所在的地方。如果你只需要托管一个站点，你可以删除存储在此目录中的默认`index.xhtml`文件，并将其替换为你网站所需的文件。如果你希望自己进行测试，可以先备份默认的`index.xhtml`文件，然后使用一些标准的
    HTML 创建一个新的文件。你应该看到默认页面变更为你刚才添加到文件中的内容。
- en: 'The `000-default.conf` file is special, in that it’s basically the configuration
    file that controls the default Apache sample website. If you look at the contents
    of the `/etc/apache2/sites-available` and `/etc/apache2/sites-enabled` directories,
    you’ll see the `000-default.conf` configuration file stored in `sites-available`
    and `symlinked` in `sites-enabled`. This shows you that, by default, this site
    was included with Apache, and its configuration file was enabled as soon as Apache
    was installed. For all intents and purposes, the `000-default.conf` configuration
    file is all you need if you only plan on hosting a single website on your server.
    The contents of this file are as follows, but I’ve stripped the comments out of
    the file in order to save space on this page:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`000-default.conf`文件是特殊的，因为它基本上是控制默认 Apache 示例网站的配置文件。如果你查看`/etc/apache2/sites-available`和`/etc/apache2/sites-enabled`目录的内容，你会看到`000-default.conf`配置文件存储在`sites-available`中，并在`sites-enabled`中创建了符号链接。这表明，默认情况下，这个站点已包含在
    Apache 中，并且它的配置文件在安装 Apache 时即已启用。实际上，如果你只打算在服务器上托管一个网站，那么`000-default.conf`配置文件就是你需要的全部。该文件的内容如下，但我已去除文件中的注释以节省页面空间：'
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see, this default virtual host is telling Apache to listen on port
    `80` for requests and to serve content from `/var/www/html` as soon as requests
    come in. The `<VirtualHost>` declaration at the beginning is listening to everything
    (the asterisk is a *wildcard*) on port `80`, so this is basically handling all
    web traffic that comes into the server from port `80`. The `ServerAdmin` clause
    specifies the email address that is displayed in any error messages shown if there
    is a problem with the site.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这个默认的虚拟主机告诉 Apache 在端口`80`上监听请求，并在请求到达时从`/var/www/html`提供内容。开头的`<VirtualHost>`声明在端口`80`上监听所有请求（星号是一个*通配符*），因此基本上它处理所有从端口`80`进入服务器的网页流量。`ServerAdmin`子句指定了如果站点出现问题时，错误信息中显示的电子邮件地址。
- en: The `DocumentRoot` setting tells Apache which directory to look for in order
    to find files to serve as connections to this virtual host. `/var/www/html` is
    the default, but some administrators choose to customize this. This file also
    contains lines for where to send logging information. The **access log** contains
    information relating to HTTP requests that come in, which by default is stored
    in `/var/log/access.log`. The **error log** is stored at `/var/log/error.log`
    and contains information you can use whenever someone has trouble visiting your
    site. The `${APACHE_LOG_DIR}` variable equates to `/var/log` by default, and this
    is set in the `/etc/apache2/envvars` file, in case for some reason you wish to
    change this (for example, you wish to use a custom logging directory).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`DocumentRoot`设置告诉 Apache 查找哪个目录以便找到要提供给该虚拟主机的文件。`/var/www/html`是默认值，但一些管理员选择自定义此设置。该文件还包含了发送日志信息的位置。**访问日志**包含与传入的
    HTTP 请求相关的信息，默认情况下存储在`/var/log/access.log`中。**错误日志**存储在`/var/log/error.log`，包含了你在有人访问你的网站时遇到问题时可以使用的信息。`${APACHE_LOG_DIR}`变量默认等同于`/var/log`，并且这个设置存储在`/etc/apache2/envvars`文件中，以防你出于某些原因希望更改此设置（例如，你希望使用自定义的日志目录）。'
- en: 'If you wish to host another site on the same server by creating an additional
    virtual host, you can use the same framework as the original file, with some additional
    customizations. Virtual host files are stored in the `/etc/apache2/sites-available`
    directory, with a filename ending in `.conf`. Here’s an example of a hypothetical
    website, `acmeconsulting.com`. A virtual host file such as this might be saved
    as `/etc/apache2/sites-available/acmeconsulting.com.conf`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望通过创建一个额外的虚拟主机在同一台服务器上托管另一个站点，可以使用与原始文件相同的框架，并进行一些额外的自定义。虚拟主机文件存储在`/etc/apache2/sites-available`目录下，文件名以`.conf`结尾。以下是一个假设网站`acmeconsulting.com`的示例。这样的虚拟主机文件可能会保存为`/etc/apache2/sites-available/acmeconsulting.com.conf`：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To save time, I’ll generally copy another virtual host file, even the default
    one, and change it accordingly. In this particular example, I’ve emphasized some
    important differences. First, with this virtual host, I’m not listening for all
    connections coming in on port `80`; instead, I’m specifically looking for incoming
    traffic going to IP address `192.168.1.104` on port `80`. This works because this
    server has two network cards, and therefore two IP addresses. With virtual hosts,
    I’m able to serve a different website, depending on which IP address the request
    is coming in on.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了节省时间，我通常会复制另一个虚拟主机文件，甚至是默认的那个，然后根据需要进行修改。在这个具体的例子中，我强调了一些重要的不同之处。首先，在这个虚拟主机中，我不是监听所有进入`80`端口的连接；相反，我是专门监听指向`192.168.1.104`的`80`端口的传入流量。这是因为这个服务器有两个网卡，因此有两个IP地址。通过虚拟主机，我能够根据请求来自哪个IP地址，提供不同的网站。
- en: Next, I set `DocumentRoot` to `/var/www/acmeconsulting`. Each virtual host should
    have its own individual `DocumentRoot` to keep each site separate from the others.
    On my servers, I will typically disable or remove the sample virtual host (the
    one that has the default `DocumentRoot` of `/var/www/html`). Instead, I use `/var/www`
    as a base directory, and each virtual host gets its own directory as a subdirectory
    of this base.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我将`DocumentRoot`设置为`/var/www/acmeconsulting`。每个虚拟主机应该有自己的独立`DocumentRoot`，以将每个站点与其他站点分开。在我的服务器上，我通常会禁用或删除示例虚拟主机（即默认`DocumentRoot`为`/var/www/html`的那个）。相反，我使用`/var/www`作为基础目录，每个虚拟主机将其自己的目录作为该基础目录的子目录。
- en: Another change I find useful is to give each virtual host its own log files.
    Normally, Apache will use `/var/log/apache2/error.log` and `/var/log/apache2/access.log`
    to store log entries for all sites. If you only have a single site on your server,
    that is fine. However, when you’re serving multiple sites, I find it useful to
    give each site its own independent log files. That way, if you are having trouble
    with a particular site, you don’t have to scroll through unrelated log entries
    to find what you’re looking for when you’re troubleshooting. In my example, I
    inserted the website name in the log filenames, so this virtual host is logging
    errors in the `/var/log/apache2/acmeconsulting.com-error.log` file, and the access
    log is being written to `/var/log/apache2/acmeconsulting.com-access.log`. These
    log files will be created for you automatically as soon as you reload Apache.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个我觉得有用的改变是给每个虚拟主机设置独立的日志文件。通常，Apache会使用`/var/log/apache2/error.log`和`/var/log/apache2/access.log`来存储所有站点的日志条目。如果你的服务器上只有一个站点，那没问题。但当你托管多个站点时，我发现给每个站点设置独立的日志文件很有用。这样，当你遇到某个站点的问题时，你不需要浏览与该站点无关的日志条目来查找你需要的内容。在我的示例中，我将网站名称插入到日志文件名中，因此这个虚拟主机的错误日志记录在`/var/log/apache2/acmeconsulting.com-error.log`文件中，访问日志则写入`/var/log/apache2/acmeconsulting.com-access.log`。这些日志文件将在你重新加载Apache时自动创建。
- en: 'With a server that only has a single IP address, you can still set up multiple
    virtual hosts. Instead of differentiating virtual hosts by IP, you can instead
    differentiate them by name. This is common on **Virtual Private Server** (**VPS**)
    installations of Ubuntu, where you’ll typically have a single IP address assigned
    to you by your VPS provider. For name-based virtual hosts, we would use the `ServerName`
    option in our configuration. Refer to the following example to see how this would
    work. With this example, I’m adding name-based virtual hosts to their own files.
    I called mine `000-virtual-hosts.conf` and stored it in the directory. The contents
    are as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于只有一个 IP 地址的服务器，你仍然可以设置多个虚拟主机。你可以通过名称来区分虚拟主机，而不是通过 IP 来区分。这在 Ubuntu 的**虚拟私人服务器**（**VPS**）安装中很常见，在这种情况下，你通常会收到
    VPS 提供商分配给你的单个 IP 地址。对于基于名称的虚拟主机，我们会在配置中使用 `ServerName` 选项。请参考以下示例，看看如何操作。在这个示例中，我将基于名称的虚拟主机添加到它们各自的文件中。我将文件命名为
    `000-virtual-hosts.conf`，并将其存储在该目录中。其内容如下：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For each virtual host, I’m declaring a `ServerName` with a matching `DocumentRoot`.
    With the first example, any traffic coming into the server requesting [acmeconsulting.com](http://acmeconsulting.com)
    will be provided a `DocumentRoot` of `/var/www/acmeconsulting`. The second example
    looks for traffic from [acmesales.com](http://acmesales.com) and directs it to
    `/var/www/acmesales`. You can list as many virtual hosts here as you’d like to
    host on your server. Providing your server has enough resources to handle traffic
    to each site, you can host as many as you need.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个虚拟主机，我都会声明一个与之匹配的 `ServerName` 和 `DocumentRoot`。在第一个示例中，任何请求 [acmeconsulting.com](http://acmeconsulting.com)
    的流量都会被提供一个 `DocumentRoot`，其路径为 `/var/www/acmeconsulting`。第二个示例则查找来自 [acmesales.com](http://acmesales.com)
    的流量，并将其引导到 `/var/www/acmesales`。你可以根据需要在此列出尽可能多的虚拟主机，只要你的服务器有足够的资源来处理每个站点的流量，就可以托管任意数量的虚拟主机。
- en: If you’re using domain names with virtual hosts, then this will only work if
    you set up networking such that the domain name referenced in the file resolves
    to the IP address of your server. Depending on your configuration, there are multiple
    ways to do this. If you’re using a VPS provider, such as DigitalOcean or Linode,
    your server will have an IP address already and you only need to edit the **A
    Record** on your DNS server to point to that IP. (The various types of DNS entries,
    such as an A Record, were covered in *Chapter 11*, *Setting Up Network Services*.)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用带有虚拟主机的域名，那么只有在你设置了网络，使得文件中引用的域名能够解析到你服务器的 IP 地址时，才会生效。根据你的配置方式，有多种方法可以实现这一点。如果你使用
    VPS 提供商，如 DigitalOcean 或 Linode，你的服务器已经有了一个 IP 地址，你只需要在 DNS 服务器上编辑**A 记录**，将其指向该
    IP 地址。（DNS 记录的各种类型，如 A 记录，已在*第 11 章*，*网络服务配置*中讲解。）
- en: If you’re running your own DNS server, you would add the A Record there. If
    you’re using an external DNS provider, you would log in to the dashboard for your
    account and add the A Record there. For testing purposes, you can edit your `/etc/hosts`
    file on your local workstation (not the server) to point to your new web server.
    If you’re not using a VPS provider, you would need to forward port `80` in your
    firewall to point to your internal web server. This is beyond the scope of this
    book, as there are many different models of firewalls available and it’s impossible
    to cover them all.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在运行自己的 DNS 服务器，你可以在那儿添加 A 记录。如果你使用的是外部 DNS 提供商，你需要登录到账户的仪表板并在那儿添加 A 记录。为了测试，你可以在本地工作站（而不是服务器）编辑
    `/etc/hosts` 文件，将其指向你的新 web 服务器。如果你没有使用 VPS 提供商，你需要在防火墙中转发 `80` 端口，指向你的内部 web
    服务器。由于存在许多不同类型的防火墙，这超出了本书的范围，因此无法全面覆盖所有防火墙模型。
- en: As we continue through this chapter, we’ll perform some additional configurations
    for Apache. At this point though, you should have an understanding of the basics
    of how Apache is configured in Ubuntu Server. For extra practice, feel free to
    create additional virtual hosts and serve different pages for them.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章继续进行时，我们将为 Apache 执行一些额外的配置。但此时，你应该已经了解了如何在 Ubuntu 服务器中配置 Apache 的基础知识。如果想要额外练习，随时可以创建更多虚拟主机并为其提供不同的页面。
- en: Installing additional Apache modules
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装额外的 Apache 模块
- en: 'Apache features additional modules that can be installed that will extend its
    functionality. These modules can provide additional features such as adding support
    for things like Python or PHP. Ubuntu’s implementation of Apache includes two
    specific commands for enabling and disabling modules, `a2enmod` and `a2dismod`,
    respectively. Apache modules are generally installed via packages from Ubuntu’s
    repositories. To see a list of modules available for Apache, run the following
    command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Apache 提供了可以安装的额外模块来扩展其功能。这些模块可以提供额外的特性，比如添加对 Python 或 PHP 的支持。Ubuntu 实现的 Apache
    包含两个特定的命令，用于启用和禁用模块，分别是 `a2enmod` 和 `a2dismod`。Apache 模块通常通过 Ubuntu 仓库中的包进行安装。要查看可用于
    Apache 的模块列表，可以运行以下命令：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the results, you’ll see various module packages available, such as `libapache2-mod-python`
    (which adds Python support) and `libapache2-mod-php8.1` (which adds PHP 8.1 support),
    among many others. Installing an Apache module is done the same way as any other
    package, with the `apt install` command. In the case of PHP support, we can install
    the required package with the following command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在结果中，你会看到各种可用的模块包，如 `libapache2-mod-python`（添加对 Python 的支持）和 `libapache2-mod-php8.1`（添加对
    PHP 8.1 的支持）等许多模块。安装 Apache 模块与安装其他软件包一样，通过 `apt install` 命令进行。在 PHP 支持的情况下，我们可以通过以下命令安装所需的包：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Installing a module package alone is not enough for a module to be usable in
    Apache, though. Modules must be enabled in order for Apache to be able to utilize
    them. As mentioned earlier, we can use the `a2enmod` and `a2dismod` commands for
    respectively enabling or disabling a module. You can view a list of modules that
    are built into Apache with the following command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅安装模块包不足以让模块在 Apache 中可用。必须启用模块，Apache 才能使用它们。如前所述，我们可以使用 `a2enmod` 和 `a2dismod`
    命令分别启用或禁用模块。你可以使用以下命令查看 Apache 内置模块的列表：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The modules shown in the output will be those that are built into Apache, so
    you won’t need to enable them. If the module your website requires is listed in
    the output, you’re all set.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 输出中显示的模块是 Apache 内置的模块，因此你不需要启用它们。如果输出中列出了你网站所需的模块，那么就大功告成了。
- en: 'To view a list of all modules that are installed and ready to be enabled, you
    can run the `a2enmod` command by itself with no options:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看所有已安装并准备启用的模块列表，可以单独运行 `a2enmod` 命令，无需指定任何选项：
- en: '![](img/B18425_14_02.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_14_02.png)'
- en: 'Figure 14.2: The a2enmod command showing a list of available Apache modules'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.2：a2enmod 命令显示可用的 Apache 模块列表
- en: 'The end of the output of the `a2enmod` command will ask you whether or not
    you’d like to enable any of the modules:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`a2enmod` 命令的输出结束时会询问你是否希望启用任何模块：'
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you wanted to, you could type the names of any additional modules you’d like
    to enable and then press *Enter*. Alternatively, you can press *Enter* without
    typing anything to simply return to the prompt.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，可以输入任何其他想要启用的模块名称，然后按 *Enter*。或者，你可以不输入任何内容直接按 *Enter*，返回到提示符。
- en: 'If you give the `a2enmod` command a module name as an option, it will enable
    it for you. To enable PHP 8.1 (which we’ll need later), you can run the following
    command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你为 `a2enmod` 命令指定了模块名作为选项，它将为你启用该模块。要启用 PHP 8.1（稍后我们需要使用），可以运行以下命令：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Chances are, though, if you’ve installed a package for an additional module,
    it was most likely enabled for you during installation. With Debian and Ubuntu,
    it’s very common for daemons and modules to be enabled as soon as their packages
    are installed, and Apache is no exception. In the case of the `libapache2-mod-php8.1`
    package I used as an example, the module should’ve been enabled for you once the
    package was installed:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你安装了一个额外模块的包，它很可能在安装过程中就已经为你启用了。在 Debian 和 Ubuntu 中，守护进程和模块在其包安装后通常会自动启用，Apache
    也不例外。以我使用的 `libapache2-mod-php8.1` 包为例，安装该包后，模块应该已经为你启用：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If a module is already enabled, you will see output similar to the following
    when you try to enable it with `a2enmod`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果模块已经启用，当你尝试使用 `a2enmod` 启用它时，会看到类似以下的输出：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If the module wasn’t already enabled, we would see the following output:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果模块尚未启用，我们将看到以下输出：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As instructed, we’ll need to restart Apache in order for the enabling of a
    module to take effect. Keep in mind that restarting Apache will make any sites
    it may host become unavailable during the process. When it comes to disabling
    a module, the command syntax is fairly similar. To do so, you’ll use the `a2dismod`
    command along with the name of the module you’d like to disable:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如指示，为了使模块的启用生效，我们需要重启 Apache。请注意，重启 Apache 会导致其托管的任何站点在此过程中不可用。在禁用模块方面，命令语法非常相似。要执行此操作，您将使用`a2dismod`命令以及要禁用的模块的名称：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Enabling a module that was already previously enabled will result in output
    similar to the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 启用已经先前启用的模块将产生类似以下输出：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To activate the new configuration, you need to run:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要激活新配置，您需要运行：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The modules you install and enable on your Apache server will depend on the
    needs of your website. For example, if you’re going to need support for Python,
    you’ll want to install the `libapache2-mod-python` package. If you’re installing
    a third-party package, such as WordPress or Drupal, you’ll want to refer to the
    documentation for those packages in order to obtain a list of which modules are
    required for the solution to install and run properly. Once you have such a list,
    you’ll know which packages you’ll need to install and which modules to enable.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您在 Apache 服务器上安装和启用的模块将取决于您网站的需求。例如，如果您需要支持 Python，您将需要安装`libapache2-mod-python`包。如果您安装了第三方包，如
    WordPress 或 Drupal，您需要参考这些包的文档，以获取安装和运行所需模块的列表。一旦您拥有这样的列表，您将知道需要安装哪些包和启用哪些模块。
- en: Securing Apache with TLS
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 TLS 安全 Apache
- en: Nowadays, it’s a great idea to ensure your organization’s website is encrypted
    and available over HTTPS. Encryption of web traffic has been historically achieved
    by utilizing **Secure Sockets Layer** (**SSL**) or, more recently, **TLS**, which
    is the successor to SSL. Both refer to a method of utilizing cryptography by installing
    signed certificates that protect and encrypt web traffic. The two functions are
    different, but the end result is the same. Going forward, it’s recommended to
    use TLS due to the additional security strength it offers, though it’s not uncommon
    to see SSL being used nowadays since it hasn’t been completely phased out.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，确保您的组织网站通过 HTTPS 加密并可用是个好主意。通过安装签名证书来保护和加密 Web 流量，历史上已经实现了 Web 流量的加密，通过利用**安全套接层**（**SSL**）或更近期的**传输层安全**（**TLS**）。这两种方法使用加密技术来保护和加密
    Web 流量。这两种方法有所不同，但最终结果是相同的。从现在开始，推荐使用 TLS，因为它提供了额外的安全强度，尽管目前仍然可以看到使用 SSL，因为它还没有完全淘汰。
- en: Setting up and benefiting from TLS is not all that difficult to do, and will
    help protect your organization against common vulnerabilities being potentially
    exploited. Utilizing TLS doesn’t protect you from all exploits being used in the
    wild, but it does offer a layer of protection you’ll want to benefit from. Not
    only that, but your customers pretty much expect you to secure their communications
    nowadays. In this section, we’ll look at how to use TLS with our Apache installation.
    We’ll work through enabling it, generating certificates, and configuring Apache
    to use those certificates with both a single-site configuration and with virtual
    hosts.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 设置并受益于 TLS 并不是很难，而且将帮助保护您的组织免受潜在的常见漏洞攻击。虽然使用 TLS 不能保护您免受所有野外利用的攻击，但它确实提供了一层您想要受益的保护。不仅如此，您的客户现在几乎都希望您保护他们的通信。在本节中，我们将看看如何在我们的
    Apache 安装中使用 TLS。我们将通过启用它、生成证书以及配置 Apache 使用这些证书来工作，既可以使用单站点配置，也可以使用虚拟主机配置。
- en: 'By default, Ubuntu’s Apache configuration listens for traffic on port `80`,
    but not port `443` (HTTPS). You can check this yourself by running the following
    command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Ubuntu 的 Apache 配置会在端口`80`上监听流量，但不会在端口`443`（HTTPS）上。您可以通过运行以下命令来检查：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The results will look similar to the following and will show the ports that
    Apache is listening on, which is only port `80` by default:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将类似于以下内容，并显示 Apache 监听的端口，这默认仅为端口`80`：
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If the server were listening on port `443` as well, we would’ve seen the following
    within the output:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器也监听端口`443`，我们将会在输出中看到以下内容：
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To enable support for HTTPS traffic, we need to first enable the `ssl` module:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用对 HTTPS 流量的支持，我们首先需要启用`ssl`模块：
- en: '[PRE22]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, we need to restart Apache:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要重启 Apache：
- en: '[PRE23]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In addition to the sample website we discussed earlier, Ubuntu’s default Apache
    implementation also includes another site configuration file, `/etc/apache2/sites-available/default-ssl.conf`.
    Unlike the sample site, this one is not enabled by default. This configuration
    file is similar to the sample site configuration, but it’s listening for connections
    on port `443` and contains additional configuration items related to TLS. Here’s
    the content of that file, with the comments stripped out in order to save space
    on this page:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们之前讨论的示例网站之外，Ubuntu 的默认 Apache 实现还包括另一个站点配置文件 `/etc/apache2/sites-available/default-ssl.conf`。与示例站点不同，默认情况下该文件并未启用。这个配置文件与示例站点配置类似，但它监听端口
    `443` 上的连接，并包含与 TLS 相关的附加配置项。以下是该文件的内容，我们已去除注释，以便节省页面空间：
- en: '[PRE24]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We already went over the `ServerAdmin`, `DocumentRoot`, `ErrorLog`, and `CustomLog`
    options earlier in this chapter, but there are additional options in this file
    that we haven’t seen yet. On the first line, we can see that this virtual host
    is listening on port `443`. We also see `_default_` listed here instead of an
    IP address. The `_default_` option only applies to unspecified traffic, which
    in this case means any traffic coming into port `443` that hasn’t been identified
    in any other virtual host. In addition, the `SSLEngine on` option enables TLS
    traffic. Right after that, we have options for our TLS certificate file and key
    file, which we’ll get to a bit later.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在本章前面讨论过 `ServerAdmin`、`DocumentRoot`、`ErrorLog` 和 `CustomLog` 选项，但该文件中还有一些我们尚未看到的附加选项。在第一行中，我们可以看到该虚拟主机监听的是端口
    `443`。我们还看到这里列出了 `_default_`，而不是 IP 地址。`_default_` 选项仅适用于未指定的流量，这意味着任何进入端口 `443`
    但未在其他虚拟主机中标识的流量。此外，`SSLEngine on` 选项启用了 TLS 流量。紧接着，我们可以看到 TLS 证书文件和密钥文件的相关选项，我们稍后会详细讨论。
- en: We also have a `<Directory>` clause, which allows us to apply specific options
    to a directory. In this case, the `/usr/lib/cgi-bin` directory is having the `SSLOptions
    +StdEnvVars` settings applied, which enables default environment variables for
    use with TLS. This option is also applied to files that have an extension of `.cgi`,
    `.shtml`, `.phtml`, or `.php` through the `<FilesMatch>` option. The `BrowserMatch`
    option allows you to set options for specific browsers, though it’s out of scope
    for this chapter. For now, just keep in mind that if you want to apply settings
    to specific browsers, you can.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到有一个 `<Directory>` 子句，它允许我们对某个目录应用特定的选项。在这个例子中，`/usr/lib/cgi-bin` 目录应用了
    `SSLOptions +StdEnvVars` 设置，该设置启用了默认的环境变量，以供 TLS 使用。通过 `<FilesMatch>` 选项，这个设置也应用于扩展名为
    `.cgi`、`.shtml`、`.phtml` 或 `.php` 的文件。`BrowserMatch` 选项允许你为特定浏览器设置选项，尽管这超出了本章的讨论范围。现在，只需要记住，如果你想为特定浏览器应用设置，是可以做到的。
- en: 'By default, the `default-ssl.conf` file is not enabled. In order to benefit
    from its configuration options, we’ll need to enable it, which we can do with
    the `a2ensite` command as we would with any other virtual host:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`default-ssl.conf` 文件是未启用的。为了使用其配置选项，我们需要启用它，可以通过 `a2ensite` 命令来完成，就像启用任何其他虚拟主机一样：
- en: '[PRE25]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Even though we just enabled TLS, our site isn’t secure just yet. We’ll need
    TLS certificates installed in order to secure our web server. We can do this in
    one of two ways, with self-signed certificates or certificates signed by a certificate
    authority. Both are implemented in very similar ways, and I’ll discuss both methods.
    For the purposes of testing, self-signed certificates are fine. In production,
    self-signed certificates would technically work, but most browsers won’t trust
    them by default and will give you an error when you go to their page. Therefore,
    it’s a good idea to refrain from using self-signed certificates on a production
    system. Users of a site with self-signed certificates would need to bypass an
    error page before continuing to the site, and seeing this error may cause them
    to avoid your site altogether. You can install the certificates into each user’s
    web browser, but that can be a headache. In production, it’s best to use certificates
    signed by a vendor.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们刚刚启用了 TLS，但我们的网站还不安全。我们需要安装 TLS 证书来保护我们的 Web 服务器。我们可以通过两种方式来实现这一点：使用自签名证书或由证书颁发机构签名的证书。这两种方式的实现非常相似，我会讨论这两种方法。对于测试目的，自签名证书是可以的。在生产环境中，自签名证书技术上是可以使用的，但大多数浏览器默认不会信任它们，访问时会出现错误提示。因此，在生产环境中最好避免使用自签名证书。使用自签名证书的网站用户需要绕过错误页面才能继续访问网站，看到这个错误提示可能会让他们避开你的网站。你可以将证书安装到每个用户的
    Web 浏览器中，但这会很麻烦。在生产环境中，最好使用由证书供应商签名的证书。
- en: Another method of setting up a certificate on your server is **Let’s Encrypt**,
    a popular (and free) service for encrypting web traffic. Consider checking out
    the instructions at the Let’s Encrypt website at [letsencrypt.org/docs](http://letsencrypt.org/docs),
    as well as the example article mentioned at the end of the chapter.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种在服务器上设置证书的方法是 **Let’s Encrypt**，这是一个流行的（且免费的）加密 Web 流量的服务。你可以参考 [letsencrypt.org/docs](http://letsencrypt.org/docs)
    网站上的说明，以及本章末尾提到的示例文章。
- en: As we go through this process, I’ll first walk you through setting up TLS with
    a self-signed certificate so you can see how the process works. We’ll create the
    certificate and then install it into Apache. You won’t necessarily need to create
    a website to go through this process, since you could just secure the sample website
    that comes with Apache if you wanted something to use as a proof of concept. After
    we complete the process, we’ll take a look at installing certificates that were
    signed by a certificate authority.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进行这个过程时，我会首先指导你如何通过自签名证书设置 TLS，以便你了解整个过程。我们将创建证书并将其安装到 Apache 中。你不一定需要创建一个网站来完成这个过程，因为你可以直接使用
    Apache 附带的示例网站来作为概念验证。如果我们完成这个过程后，还会讨论安装由证书颁发机构签名的证书。
- en: 'To get the ball rolling, we’ll need a directory to house our certificates.
    I’ll use `/etc/apache2/certs` in my examples, although you can use whatever directory
    you’d like, as long as you remember to update Apache’s configuration with your
    desired location and filenames:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，我们需要一个目录来存放我们的证书。我将在示例中使用 `/etc/apache2/certs`，不过你可以使用任何你喜欢的目录，只要记得在 Apache
    配置文件中更新你选择的路径和文件名：
- en: '[PRE26]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'For a self-signed certificate and key, we can generate the pair with the following
    command. Feel free to change the name of the key and certificate files to match
    the name of your website:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于自签名证书和密钥，我们可以通过以下命令生成这一对文件。可以根据你的网站名称自由更改密钥和证书文件的名称：
- en: '[PRE27]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You’ll be prompted to enter some information for generating the certificate.
    Answer each prompt as they come along. Here’s a list of the questions you’ll be
    asked, along with my responses for each. Change the answers to fit your server,
    environment, organization name, and location:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 系统会提示你输入一些信息来生成证书。根据提示逐一回答问题。以下是你将被询问的问题清单，以及我为每个问题提供的回答。根据你的服务器、环境、组织名称和位置修改答案：
- en: '[PRE28]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, you should see that two files have been created in the `/etc/apache2/certs`
    directory, `mysite.crt` and `mysite.key`, which represent the certificate and
    private key, respectively. Now that these files have been generated, the next
    thing for us to do is to configure Apache to use them. Look for the following
    two lines in the `/etc/apache2/sites-available/default-ssl.conf` file:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该看到在 `/etc/apache2/certs` 目录下创建了两个文件，分别是 `mysite.crt` 和 `mysite.key`，它们代表证书和私钥。文件生成后，接下来要做的是配置
    Apache 使用这些文件。在 `/etc/apache2/sites-available/default-ssl.conf` 文件中，查找以下两行：
- en: '[PRE29]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Comment these lines out by placing a `#` symbol in front of both:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在两行前加上`#`符号，将这两行注释掉：
- en: '[PRE30]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Next, add the following two lines underneath the lines you just commented out.
    Be sure to replace the target directories and certificate filenames with yours,
    if you followed your own naming convention:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在你刚刚注释掉的两行下方添加以下两行。如果你使用了自己的命名规则，记得替换目标目录和证书文件名：
- en: '[PRE31]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To make Apache benefit from the new configuration, reload the `apache2` daemon:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Apache应用新的配置，请重新加载`apache2`守护进程：
- en: '[PRE32]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'With the new configuration in place, we’re not quite done but we’re close.
    We still have a small bit of configuration left to add. But before we get to that,
    let’s return to the topic of installing TLS certificates that were signed by a
    certificate authority. The process for installing signed TLS certificates is pretty
    much the same, but the main difference is how the certificate files are requested
    and obtained. Once you have them, you will copy them to your file server and configure
    Apache the same way as we just did. To start the process of obtaining a signed
    TLS certificate, you’ll need to create a **Certificate Signing Request** (**CSR**).
    A CSR is basically a request for a certificate in file form that you’ll supply
    to your certificate authority to start the process of requesting a signed certificate.
    A CSR can be easily generated with the following command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 配置完成后，我们虽然还没完全完成，但已经接近尾声。我们还有少量配置需要添加。但在此之前，让我们先回到安装由证书颁发机构签发的TLS证书的话题。安装签名TLS证书的过程基本相同，主要的区别在于证书文件的请求和获取方式。一旦你获得了这些证书文件，你需要将它们复制到文件服务器上，并像我们刚才做的那样配置Apache。为了开始获取签名TLS证书的过程，你需要创建一个**证书签名请求**（**CSR**）。CSR基本上是一个证书请求文件，你需要将其提供给证书颁发机构，启动签发证书的流程。你可以通过以下命令轻松生成CSR：
- en: '[PRE33]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: With the CSR file that was generated, you can request a signed certificate.
    The CSR file should now be in your current working directory. The entire process
    differs from one provider to another, but in most cases, it’s fairly straightforward.
    You’ll send them the CSR, pay their fee, fill out a form or two on their website,
    prove that you are the owner of the website in question, and then the vendor will
    send you the files you need. It may sound complicated, but certificate authorities
    usually walk you through the entire process and make it clear what they need from
    you in order to proceed. Once you complete the process, the certificate authority
    will send you your certificate files, which you’ll then install on your server.
    Once you configure the `SSLCertificateFile` and `SSLCertificateKeyFile` options
    in `/etc/apache2/sites-available/default-ssl.conf` to point to the new certificate
    files and reload Apache, you should be good to go.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用生成的CSR文件，你可以请求一个签名证书。CSR文件应该已经在你的当前工作目录中。整个过程在不同的供应商之间有所不同，但大多数情况下，它是相当直接的。你需要将CSR文件发送给他们，支付费用，填写他们网站上的一两份表格，证明你是相关网站的所有者，然后供应商会将所需文件发送给你。听起来可能有些复杂，但证书颁发机构通常会引导你完成整个过程，并明确告诉你他们需要你提供的内容。一旦你完成这个过程，证书颁发机构会将证书文件发送给你，你然后将其安装到服务器上。一旦你在`/etc/apache2/sites-available/default-ssl.conf`中配置了`SSLCertificateFile`和`SSLCertificateKeyFile`选项，指向新的证书文件，并重新加载Apache，你应该就可以顺利进行。
- en: There’s one more additional step we should perform for setting this up properly.
    At this point, our certificate files should be properly installed, but we’ll need
    to inform Apache of when to apply them. If you recall, the `default-ssl.conf`
    file provided by the `apache2` package is answering requests for any traffic not
    otherwise identified by a virtual host (the `<VirtualHost _default_:443>` option).
    We will need to ensure that our web server is handling traffic for our existing
    websites when TLS is requested. We can add a `ServerName` option to that file
    to ensure our site supports TLS.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个额外的步骤，我们需要执行才能正确设置。在这一点上，我们的证书文件应该已经正确安装，但我们还需要告知Apache何时应用它们。如果你还记得，`apache2`包提供的`default-ssl.conf`文件是用来处理任何没有被虚拟主机明确识别的流量（即`<VirtualHost
    _default_:443>`选项）。我们需要确保我们的Web服务器在请求TLS时能够处理我们现有网站的流量。我们可以在该文件中添加`ServerName`选项，以确保我们的网站支持TLS。
- en: 'Add the following option to the `/etc/apache2/sites-available/default-ssl.conf`
    file, right underneath `<VirtualHost _default_:443>`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下选项添加到`/etc/apache2/sites-available/default-ssl.conf`文件中，紧跟在`<VirtualHost
    _default_:443>`下方：
- en: '[PRE34]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Now, when traffic comes into your server on port `443` requesting a domain that
    matches the domain you typed for the `ServerName` option, it should result in
    a secure browsing session for the client. You should see the green padlock icon
    in the address bar (this depends on your browser), which indicates that your session
    is secured. If you’re using self-signed certificates, you’ll probably see an error
    you’ll have to skip through first, and you may not get the green padlock icon.
    This doesn’t mean the encryption isn’t working; it just means your browser is
    skeptical of the certificate since it wasn’t signed by a known certificate authority.
    Your session will still be encrypted.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当流量通过端口`443`进入服务器，并请求与`ServerName`选项中输入的域名匹配的域时，应该会为客户端创建一个安全的浏览会话。你应该能在地址栏中看到绿色的锁形图标（这取决于你的浏览器），它表示你的会话是安全的。如果你使用的是自签名证书，可能会首先看到一个错误提示，你需要跳过它，而且你可能不会看到绿色锁形图标。这并不意味着加密没有生效；它只是意味着浏览器对证书持怀疑态度，因为它没有由一个已知的证书颁发机构签名。你的会话仍然会是加密的。
- en: 'If you are planning on hosting multiple websites over HTTPS, you may want to
    consider using a separate virtual host file for each. An easy way to accomplish
    this is to use the `/etc/apache2/sites-available/default-ssl.conf` file as a template
    and change `DocumentRoot` to the directory that hosts the files for that site.
    In addition, be sure to update the `SSLCertificateFile` and `SSLCertificateKeyFile`
    options to point to the certificate files for the site and set `ServerName` to
    the domain that corresponds to your site. Here’s an example virtual host file
    for a hypothetical site that uses TLS. I’ve highlighted lines that I’ve changed
    from the normal `default-ssl.conf` file:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划在 HTTPS 上托管多个网站，可能需要考虑为每个网站使用一个单独的虚拟主机文件。实现这一点的一个简单方法是使用`/etc/apache2/sites-available/default-ssl.conf`文件作为模板，并将`DocumentRoot`更改为托管该站点文件的目录。此外，确保更新`SSLCertificateFile`和`SSLCertificateKeyFile`选项，指向该站点的证书文件，并将`ServerName`设置为与你的站点对应的域名。以下是一个使用
    TLS 的假设站点的虚拟主机文件示例。我已将从正常的`default-ssl.conf`文件中更改的行标出：
- en: '[PRE35]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Basically, what I did was create a new virtual host configuration file (using
    the existing `default-ssl.conf` file as a template). I called this new file `acme-consulting.conf`
    and I stored it in the `/etc/apache2/sites-available` directory. I changed the
    `VirtualHost` line to listen for anything coming in on port `443`. The line `ServerName
    acmeconsulting.com:443` was added to make this file responsible for traffic coming
    in looking for `acmeconsulting.com` on port `443`. I also set `DocumentRoot` to
    `/var/www/acmeconsulting`. In addition, I customized the error and access logs
    so that it will be easier to find log messages relating to this new site, since
    its log entries will go to their own specific files.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我所做的就是创建了一个新的虚拟主机配置文件（使用现有的`default-ssl.conf`文件作为模板）。我将这个新文件命名为`acme-consulting.conf`，并将其存储在`/etc/apache2/sites-available`目录中。我将`VirtualHost`行更改为监听端口`443`上的所有流量。添加了`ServerName
    acmeconsulting.com:443`这一行，使得这个文件负责处理针对`acmeconsulting.com`在端口`443`上的流量。我还将`DocumentRoot`设置为`/var/www/acmeconsulting`。此外，我自定义了错误日志和访问日志，以便更容易找到与这个新站点相关的日志信息，因为它的日志条目会被记录到专门的文件中。
- en: In my experience, I find that a modular approach, such as what I’ve done with
    the sample virtual host file for HTTPS, works best when setting up a web server
    that’s intended to host multiple websites. With each site, I’ll typically give
    it its own document root, certificate files, and log files. Even if you’re only
    planning on hosting a single site on your server, using this modular approach
    is still a good idea, since you may want to host additional sites later on.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，当设置一个打算托管多个网站的 Web 服务器时，像我在示例中使用的那种模块化方法是最有效的。对于每个站点，我通常会为其提供独立的文档根目录、证书文件和日志文件。即使你只打算在服务器上托管一个站点，采用这种模块化方法仍然是一个好主意，因为你以后可能还会想托管其他站点。
- en: So, there you have it. You should now understand how to set up secure virtual
    hosts in Apache.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，以上就是了。你现在应该理解如何在 Apache 中设置安全的虚拟主机。
- en: Installing and configuring NGINX
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置 NGINX
- en: Apache isn’t the only technology that is capable of allowing you to host web
    content on your server. NGINX also serves the same purpose and is gaining popularity
    quite rapidly. Apache is still a great option, and even if that’s your chosen
    web server software, it’s a good idea to at least be familiar with NGINX and learn
    its basics. NGINX itself is a proxy server as well but is capable of also serving
    web content, which is why it competes with Apache.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Apache 并不是唯一能够让你在服务器上托管网页内容的技术。NGINX 也具有相同的功能，并且正在迅速获得人气。Apache 仍然是一个很好的选择，即使那是你选择的
    web 服务器软件，至少了解一下 NGINX 并学习其基础知识也是个好主意。NGINX 本身也是一个代理服务器，但也能够托管网页内容，这就是它与 Apache
    竞争的原因。
- en: Before we do so, I want to mention first that you can really only have one web
    server service running on a single web server. If you’ve been following along
    up to now, you currently have a functional Apache web server. If you were to also
    install NGINX, it probably wouldn’t start as the ports it wants to listen on (port
    `80` and/or `443`) will already be in use. You can run both on a single server,
    but that’s outside the scope of this book. Ideally, you’d want to use one or the
    other. Therefore, to continue with this section you’d either want to remove Apache
    or set up a separate web server for testing NGINX. I recommend the latter, because
    later on in this chapter we will take a look at hosting Nextcloud, and we will
    be using Apache to do so. If you remove Apache now, you’d have to add it back
    in order to follow along with that section. Theoretically, you’d only have to
    stop the `apache2` process before starting `nginx`, but the two resources sharing
    the same server have a lot of variables and may conflict.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我想先提一下，你实际上只能在一个 Web 服务器上运行一个 Web 服务器服务。如果你一直跟着操作到现在，你已经有一个功能正常的 Apache
    Web 服务器。如果你同时安装 NGINX，它可能不会启动，因为它想监听的端口（端口 `80` 和/或 `443`）已经被占用。你可以在同一台服务器上运行两个，但那超出了本书的范围。理想情况下，你应该选择使用其中一个。因此，为了继续这一部分，你要么删除
    Apache，要么为测试 NGINX 设置一个单独的 Web 服务器。我推荐后者，因为在本章后面，我们将讨论如何托管 Nextcloud，并且我们将使用 Apache
    来实现这一目标。如果你现在删除了 Apache，你将不得不重新安装它，才能继续这一部分。理论上，你只需要在启动 `nginx` 之前停止 `apache2`
    进程，但两个资源共享同一台服务器，涉及许多变量，可能会发生冲突。
- en: 'To get started with NGINX, simply install it:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 NGINX，只需安装它：
- en: '[PRE36]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Just like with Apache, if we enter the IP address of our server in a browser,
    we’re presented with a sample page, but this time NGINX’s version instead of the
    one that ships with Apache. It certainly looks boring in comparison, but it works:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 Apache 一样，如果我们在浏览器中输入服务器的 IP 地址，我们将看到一个示例页面，但这次是 NGINX 的版本，而不是 Apache 自带的版本。与之相比，它确实看起来很单调，但它能够正常工作：
- en: '![](img/B18425_14_03.png)Figure 14.3: The NGINX sample page'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/B18425_14_03.png)图 14.3：NGINX 示例页面'
- en: The default configuration files for `nginx` are stored in the `/etc/nginx` directory.
    Go ahead and peruse these files to get a general feel for how the configuration
    is presented. Similar to Apache, you also have `sites-enabled` and `sites-available`
    directories here, which serve the same purpose.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`nginx` 的默认配置文件存储在 `/etc/nginx` 目录中。你可以浏览这些文件，以大致了解配置文件的呈现方式。与 Apache 类似，这里也有
    `sites-enabled` 和 `sites-available` 目录，它们具有相同的功能。'
- en: 'Just as with Apache, the `sites-available` directory houses configuration files
    for sites that *can be* enabled, while the `sites-enabled` directory stores configuration
    files for sites that are enabled. Unlike Apache, though, we don’t have dedicated
    commands to enable these sites. We have to link them manually. Although we haven’t
    even looked at NGINX configuration files yet, let’s just assume that we have created
    the following configuration file:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 Apache 一样，`sites-available` 目录存储着可以启用的站点的配置文件，而 `sites-enabled` 目录存储着已启用的站点的配置文件。不过，与
    Apache 不同的是，我们没有专门的命令来启用这些站点。我们需要手动链接它们。尽管我们还没有查看 NGINX 的配置文件，但假设我们已经创建了以下配置文件：
- en: '[PRE37]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To enable that site, we would need to create a symbolic link for it and store
    that link in the `/etc/nginx/sites-enabled` directory:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用该站点，我们需要为它创建一个符号链接，并将该链接存储在 `/etc/nginx/sites-enabled` 目录中：
- en: '[PRE38]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then, we can reload `nginx`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以重新加载 `nginx`：
- en: '[PRE39]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: As it stands right now, a site configuration file named `default` exists in
    `/etc/nginx/sites-available` and a symbolic link to it is already present in `/etc/nginx/sites-enabled`.
    If all we want to do is host a single site, we only need to replace the default
    content that NGINX serves, which is located in the `/var/www/html` directory (the
    same as Apache) with the content for our site. After refreshing the page, we’re
    good to go.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，名为 `default` 的站点配置文件存在于 `/etc/nginx/sites-available` 目录中，并且在 `/etc/nginx/sites-enabled`
    中已经存在对它的符号链接。如果我们只想托管一个站点，我们只需要替换 NGINX 提供的默认内容，它位于 `/var/www/html` 目录下（与 Apache
    相同），然后用我们站点的内容替换。刷新页面后，我们就可以开始使用了。
- en: 'If we want to serve more than one site from one server, the `default` file
    is a great starting point for creating additional virtual hosts. We can start
    by copying it to a new name:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要从一台服务器提供多个站点，那么 `default` 文件是创建额外虚拟主机的一个很好的起点。我们可以从将它复制到一个新名称开始：
- en: '[PRE40]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Obviously, `acmesales.com` is an example, so feel free to name this whatever
    you wish.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，`acmesales.com` 是一个示例，所以你可以随意将其命名为你希望的任何名称。
- en: 'Now, we can edit this file and change it to serve additional content. First
    of all, only one site can be referred to as a *default* site. A default site in
    NGINX is one that answers if none of the other sites match a request. Therefore,
    we want to remove both occurrences of `default_server` from our newly copied config.
    Find these lines:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以编辑这个文件并更改它以提供额外的内容。首先，只有一个站点可以被称为 *默认* 站点。在 NGINX 中，默认站点是在没有其他站点匹配请求时进行响应的站点。因此，我们需要从新复制的配置中删除
    `default_server` 的两处出现。找到这些行：
- en: '[PRE41]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Change them to this:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 将它们改成这样：
- en: '[PRE42]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Next, we’ll need to adjust the `server_name` option to refer to the name of
    our new site. Add this line:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要调整 `server_name` 选项，以指向我们新站点的名称。添加这一行：
- en: '[PRE43]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now, we’ll need to change the document root to the directory that will store
    the files for our new site. Find this line:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要将文档根目录更改为存储新站点文件的目录。找到这一行：
- en: '[PRE44]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'And change it to this:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将其更改为：
- en: '[PRE45]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The final file should look like the following at this point:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，最终的文件应该如下所示：
- en: '[PRE46]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: You can probably see that the configuration format for NGINX configuration files
    is simpler than with Apache. I find this to be true, and I’ve noticed that sites
    I’ve configured with NGINX generally have fewer lines in their configuration files
    than Apache does.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会发现，NGINX 配置文件的配置格式比 Apache 更简单。我也觉得这是事实，而且我注意到我用 NGINX 配置的网站通常比 Apache 配置的网站配置文件行数要少。
- en: At this point, assuming that you have the required content in `/var/www/acmesales.com`
    and have a proper configuration file, the new site should respond as soon as you
    reload `nginx`. But what about TLS? I recommend that we always secure our websites,
    regardless of which solution we’re using to serve it. With NGINX, we can add that
    feature easily. The certificate files themselves are the same regardless of whether
    we’re using Apache or NGINX. If you haven’t already created your certificate files,
    refer back to the section in this chapter where we did so. Assuming you already
    have certificate files, we just need to make additional changes to our configuration.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，假设你在 `/var/www/acmesales.com` 中有必要的内容，并且配置文件正确，当你重新加载 `nginx` 后，新站点应该会响应。但
    TLS 呢？我建议我们始终保护我们的网站，无论我们使用哪种解决方案来提供它。使用 NGINX 时，我们可以轻松添加这个功能。证书文件本身无论是使用 Apache
    还是 NGINX 都是相同的。如果你还没有创建证书文件，请参考本章中我们创建证书文件的部分。假设你已经有了证书文件，我们只需要对配置做一些额外的修改。
- en: 'First, we change the first two lines to listen on port `443` with TLS instead
    of standard port `80`:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将前两行更改为监听 `443` 端口并使用 TLS，而不是标准的 `80` 端口：
- en: '[PRE47]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Next, we’ll add the following two lines before the `location` section:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在 `location` 部分之前添加以下两行：
- en: '[PRE48]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'For this to work, you’ll need to adjust the paths and the names of the `cert`
    files to make sure they match what you called them on your server. The entire
    file should look similar to the following at this point:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使其正常工作，你需要调整路径和 `cert` 文件的名称，确保它们与服务器上设置的名称匹配。到目前为止，整个文件应该如下所示：
- en: '[PRE49]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Finally, a potential problem is that users may access our site via port `80`,
    instead of utilizing HTTPS. We can tell NGINX to forward these people to the secure
    version of our site automatically. To do that, we can edit the default configuration
    file (`/etc/nginx/sites-available/default`) and add the following line just after
    the two `listen` directives:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一个潜在的问题是用户可能会通过端口`80`访问我们的网站，而不是使用 HTTPS。我们可以告诉 NGINX 自动将这些人转发到我们网站的安全版本。为此，我们可以编辑默认配置文件（`/etc/nginx/sites-available/default`），并在两个
    `listen` 指令之后添加以下行：
- en: '[PRE50]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Now, anytime a user visits the HTTP version of our site, they’ll be redirected
    to the secure HTTPS version automatically.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，任何用户访问我们网站的 HTTP 版本时，他们会自动重定向到安全的 HTTPS 版本。
- en: Now that we’ve looked at serving web content with both Apache and NGINX, let’s
    take a look at setting up our very own Nextcloud server.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了如何通过 Apache 和 NGINX 提供 Web 内容，让我们来看看如何设置我们自己的 Nextcloud 服务器。
- en: Setting up and configuring Nextcloud
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置和配置 Nextcloud
- en: 'I figured we’d end this chapter with a fun activity: setting up our very own
    Nextcloud server. Nextcloud is a very useful web application that’s handy for
    any organization. Even if you’re not working on a company network, Nextcloud is
    a great asset for even a single user. You can use it to synchronize files between
    machines, store and sync contacts, keep track of tasks you’re working on, fetch
    email from a mail server, and more. To complete this activity, you’ll need a web
    server to work with. Nextcloud supports multiple different web server platforms,
    but in this example, we’ll be using Apache.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我想我们可以以一个有趣的活动来结束这一章：设置我们自己的 Nextcloud 服务器。Nextcloud 是一个非常有用的 Web 应用程序，对任何组织都很方便。即使您不在公司网络中工作，Nextcloud
    对于单个用户也是一个很好的工具。您可以用它在计算机之间同步文件，存储并同步联系人，跟踪您正在处理的任务，从邮件服务器获取电子邮件等。要完成这个活动，您需要一个
    Web 服务器。Nextcloud 支持多种不同的 Web 服务器平台，但在本例中，我们将使用 Apache。
- en: You’ll also need an installation of MySQL or MariaDB, as Nextcloud will need
    its own database. We went over installing and managing MariaDB databases in *Chapter
    13*, *Managing Databases*. I’ll give you all the commands you’ll need to set up
    the database in this section, but refer back to *Chapter 13*, *Managing Databases*,
    if any of these commands confuse you.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要安装 MySQL 或 MariaDB，因为 Nextcloud 需要自己的数据库。我们在*第 13 章*《管理数据库》中介绍了 MariaDB
    数据库的安装和管理。在本节中，我会给您所有需要设置数据库的命令，但如果有任何命令让您感到困惑，请参考*第 13 章*《管理数据库》。
- en: To get started, we need to download Nextcloud. To do so, head on over to the
    project’s website at [https://www.nextcloud.com](https://www.nextcloud.com) and
    navigate to the **Download** section. The layout of this site may change from
    time to time, but at the time of writing, the first link to click on is a button
    labeled **Get Nextcloud**, which will take you to the download page. As of the
    time of writing, the direct URL for the download page for Nextcloud is currently
    [https://nextcloud.com/install](https://nextcloud.com/install).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们需要下载 Nextcloud。为此，请访问该项目的网站 [https://www.nextcloud.com](https://www.nextcloud.com)
    并导航到 **下载** 部分。该网站的布局可能会时常变化，但在写作时，第一个要点击的链接是一个标有 **获取 Nextcloud** 的按钮，它会将您带到下载页面。根据写作时的信息，Nextcloud
    的直接下载页面的 URL 当前是 [https://nextcloud.com/install](https://nextcloud.com/install)。
- en: Once there, look for the **Archive File** heading, and expand it. Underneath
    that, you should see a button that reads **Download for Server**, but don’t click
    on it just yet. Instead, right-click on it and click **Copy link address** or
    a similarly named option, depending on the browser you use.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 到达后，寻找 **压缩文件** 标题，并展开它。在下面，您应该能看到一个按钮，写着 **为服务器下载**，但现在不要点击它。相反，右键点击它，然后点击
    **复制链接地址** 或根据您使用的浏览器选择类似的选项。
- en: This should copy the link for the download to your clipboard. If the Nextcloud
    website layout has changed since publication, you’re essentially just looking
    for the URL to the ZIP file to download Nextcloud, and you’ll want to copy it
    to your computer’s clipboard.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该将下载链接复制到您的剪贴板。如果 Nextcloud 网站的布局自发布以来有所变化，您实际上只是需要找到 ZIP 文件的 URL 来下载 Nextcloud，然后将其复制到您的计算机剪贴板中。
- en: 'Next, open an SSH session to your web server. Make sure you’re currently working
    from your home directory, and execute the following command:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开一个 SSH 会话连接到您的 Web 服务器。确保您当前在家目录下，并执行以下命令：
- en: '[PRE51]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'To get the Nextcloud URL, simply paste the URL into your terminal after typing
    `wget`. Your entire command will look similar to the following:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取 Nextcloud URL，只需在终端中键入 `wget` 后粘贴 URL。你的完整命令将类似于以下内容：
- en: '[PRE52]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'This command will download the Nextcloud software locally to your current working
    directory. Next, we’ll need to `unzip` the archive:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将把 Nextcloud 软件下载到当前工作目录。接下来，我们需要解压该归档文件：
- en: '[PRE53]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'If you get an error message insinuating that the `unzip` command is not available,
    you may need to install it:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你收到提示 `unzip` 命令不可用的错误消息，可能需要安装它：
- en: '[PRE54]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Now, let’s move the newly extracted `nextcloud` directory to `/var/www/html`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将新解压的 `nextcloud` 目录移动到 `/var/www/html`：
- en: '[PRE55]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'In order for Nextcloud to function, the user account that Apache uses to serve
    content will need full access to it. Let’s use the following command to give the
    user `www-data` ownership of the `nextcloud` directory:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使 Nextcloud 正常运行，Apache 用于提供内容的用户帐户需要对其拥有完全访问权限。我们可以使用以下命令将 `www-data` 用户设置为
    `nextcloud` 目录的所有者：
- en: '[PRE56]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Now, you should have the required files for the Nextcloud software installed
    on the server in the `/var/www/nextcloud` directory. In order for this to work,
    though, Apache will need a configuration file that includes `/var/www/nextcloud`
    as its document root. We can create the file we need at the following location:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该已经将 Nextcloud 软件所需的文件安装到了 `/var/www/nextcloud` 目录下。为了使其正常工作，Apache 需要一个配置文件，该文件将
    `/var/www/nextcloud` 作为其文档根目录。我们可以在以下位置创建所需的文件：
- en: '[PRE57]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Example content to include in that file is as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 包含在该文件中的示例内容如下：
- en: '[PRE58]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Similar to our earlier discussion on Apache, we’re adding a config file here
    specifically for Nextcloud that sets up an alias to point to `/nextcloud` to `www.mydomain.com/nextcloud`.
    Essentially, it allows Nextcloud to be reached at your domain name, plus `/nextcloud`
    added to the end. The rest of the file disables WebDAV (a means of allowing a
    web server to act as a file server, not needed in our case) and then enables environment
    variables to set `HOME` and `HTTP_HOME` to the document root for Nextcloud, which
    in our case is `/var/www/html/nextcloud`.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于我们之前讨论的 Apache 配置，这里我们为 Nextcloud 添加了一个配置文件，该文件设置了一个别名，将 `/nextcloud` 指向
    `www.mydomain.com/nextcloud`。本质上，它允许通过你的域名访问 Nextcloud，并且在域名后加上 `/nextcloud`。文件的其他部分禁用了
    WebDAV（这是一种允许 Web 服务器充当文件服务器的方式，但在我们的情况下不需要），然后启用了环境变量来设置 `HOME` 和 `HTTP_HOME`
    为 Nextcloud 的文档根目录，在我们的情况下是 `/var/www/html/nextcloud`。
- en: 'Next, we enable the new site:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们启用新站点：
- en: '[PRE59]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Next, we’ll need to make a change to Apache. First, we’ll need to ensure that
    the `libapache2-mod-php8.1` package is installed since Nextcloud requires PHP,
    but we’ll need some additional packages as well. You can install Nextcloud’s prerequisite
    packages with the following command:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要对 Apache 进行一些更改。首先，我们需要确保安装了 `libapache2-mod-php8.1` 包，因为 Nextcloud
    需要 PHP，但我们还需要一些额外的包。你可以使用以下命令安装 Nextcloud 的先决条件包：
- en: '[PRE60]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Next, restart Apache so that it can take advantage of the new PHP plugin:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，重启 Apache，以便它能够利用新的 PHP 插件：
- en: '[PRE61]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: At this point, we’ll need a MySQL or MariaDB database for Nextcloud to use.
    This database can exist on another server, or you can share it on the same server
    you installed Nextcloud on. If you haven’t already set up MariaDB, a walk-through
    was covered during *Chapter 13*, *Managing Databases*. At this point, it’s assumed
    that you already have MariaDB installed and running.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们需要一个 MySQL 或 MariaDB 数据库供 Nextcloud 使用。该数据库可以存在于另一台服务器上，或者你也可以在安装了 Nextcloud
    的同一台服务器上共享它。如果你还没有设置 MariaDB，*第13章*《管理数据库》中已有详细说明。此时假设你已经安装并运行了 MariaDB。
- en: 'Log in to your MariaDB instance as your `root` user, or a user with full root
    privileges. You can create the Nextcloud database with the following command:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你的 `root` 用户或具有完全 root 权限的用户登录到 MariaDB 实例。你可以通过以下命令创建 Nextcloud 数据库：
- en: '[PRE62]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Next, we’ll need to add a new user to MariaDB for Nextcloud and give that user
    full access to the `nextcloud` database. We can take care of both with the following
    command:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要为 Nextcloud 向 MariaDB 添加一个新用户，并赋予该用户对 `nextcloud` 数据库的完全访问权限。我们可以通过以下命令来完成这两个操作：
- en: '[PRE63]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Make sure to change `super_secret_password` to a very strong (preferably randomly
    generated) password. Make sure you save this password in a safe place.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将 `super_secret_password` 更改为一个非常强的（最好是随机生成的）密码。务必将此密码保存在安全的地方。
- en: 'Now we have all we need in order to configure Nextcloud. You should now be
    able to visit your Nextcloud instance in a web browser. Just enter a URL similar
    to the following, replacing the sample IP address with the one for your server:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们拥有了配置 Nextcloud 所需的一切。你现在应该能够在网页浏览器中访问你的 Nextcloud 实例。只需输入类似于以下的 URL，将示例
    IP 地址替换为你服务器的 IP 地址：
- en: '[PRE64]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'If you’re using a subdomain and gave Nextcloud its own virtual host, that URL
    would then be something like this:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是子域名，并为 Nextcloud 配置了自己的虚拟主机，那么该 URL 将类似于以下内容：
- en: '[PRE65]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'You should see a page asking you to configure Nextcloud:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一个页面，要求你配置 Nextcloud：
- en: '![](img/B18425_14_04.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_14_04.png)'
- en: 'Figure 14.4: Nextcloud configuration page'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.4：Nextcloud 配置页面
- en: If you do not see this page, make sure that the `/var/www/html/nextcloud` directory
    is accessible via Apache. Also, make sure you have an appropriate virtual host
    for Nextcloud referencing this directory as its Document Root.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有看到这个页面，请确保 `/var/www/html/nextcloud` 目录可以通过 Apache 访问。还要确保你为 Nextcloud
    配置了一个合适的虚拟主机，并将该目录作为其文档根目录。
- en: This page will ask you for several pieces of information. First, you’ll see
    **Username** and **Password**. This is not asking you for a pre-existing account,
    but actually to set up a brand-new administrator account. This shouldn’t be an
    account you’ll use on a day-to-day basis, but instead an admin account you’ll
    use only when you want to add users and maintain your system. Please note that
    it won’t ask you to confirm the password, so you’ll want to make certain you’re
    entering the password you think you are. It’s perhaps safer to type the password
    in a text editor, and then copy and paste the password into the **Password** box
    to make sure you don’t lock yourself out.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面会要求你提供一些信息。首先，你会看到 **用户名** 和 **密码**。这并不是让你输入一个已存在的账户，而是要求你设置一个全新的管理员账户。这不应是你日常使用的账户，而应是一个只在需要添加用户和维护系统时使用的管理员账户。请注意，它不会要求你确认密码，因此你需要确保输入的是你认为自己输入的密码。为了安全起见，最好先在文本编辑器中输入密码，然后将密码复制粘贴到
    **密码** 框中，以确保不会将自己锁定。
- en: '**Data folder** will default to `/var/www/html/nextcloud/data`. This default
    is normally fine, but if you have configured your server to have a separate data
    partition, you can configure that here. If you plan on storing a large amount
    of data on your Nextcloud server, setting up a separate partition for it may be
    a good idea. If you do, you can set that here. Otherwise, leave the default.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据文件夹** 默认为 `/var/www/html/nextcloud/data`。这个默认设置通常是可以接受的，但如果你已将服务器配置为使用单独的数据分区，可以在这里进行配置。如果你打算在
    Nextcloud 服务器上存储大量数据，设置一个独立的分区可能是一个好主意。如果是这样，你可以在这里进行设置，否则保持默认设置。'
- en: 'In the next section, you’ll be asked to fill in information for the Nextcloud
    database we created earlier. **Database user** and **Database password** will
    use the values we created when we set up the MariaDB database for Nextcloud earlier.
    In my examples, I used `nextcloud` for the username as well as **Database name**.
    The password will be whatever it is you used for the password when we set up the
    database user account and granted privileges. Finally, the database server defaults
    to `localhost`, which is correct as long as you set up the database on the same
    machine as the Nextcloud server. If not, enter the address of your database server
    here, if it’s somewhere else. The following screenshot shows the initial form
    completely filled out with the example values we’ve used so far in this section:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，你将被要求填写我们之前创建的 Nextcloud 数据库的信息。**数据库用户** 和 **数据库密码** 将使用我们在为 Nextcloud
    设置 MariaDB 数据库时创建的值。在我的示例中，我使用了 `nextcloud` 作为用户名和 **数据库名**。密码则是我们在设置数据库用户账户并授予权限时所使用的密码。最后，数据库服务器默认是
    `localhost`，这在你将数据库设置在与 Nextcloud 服务器同一台机器上时是正确的。如果不是，请在这里输入你的数据库服务器的地址，如果它在其他地方。以下截图展示了填充完整的表单，其中包含了我们迄今为止在本节中使用的示例值：
- en: '![](img/B18425_14_05.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_14_05.png)'
- en: 'Figure 14.5: Nextcloud configuration page'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.5：Nextcloud 配置页面
- en: 'That’s it! Assuming all went well, Nextcloud will set itself up in the background
    and you’ll then continue to the main screen. Since you only created an `admin`
    account so far, I recommend you create an account for yourself, as well as any
    friends or colleagues you’d like to check out your Nextcloud server. To do so,
    go to the top-right corner of the Nextcloud page, where it shows an icon that
    resembles a gear. When you click on this icon, you’ll see an option for **Users**:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！如果一切顺利，Nextcloud 会在后台自动设置好，你接着会进入主屏幕。由于你目前只创建了一个`admin`账户，我建议你为自己以及任何希望访问你
    Nextcloud 服务器的朋友或同事创建账户。为此，请进入 Nextcloud 页面右上角，在那里你会看到一个类似齿轮的图标。点击该图标后，你将看到一个**用户**选项：
- en: '![](img/B18425_14_06.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_14_06.png)'
- en: 'Figure 14.6: Nextcloud menu'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.6：Nextcloud 菜单
- en: 'On the **Users** screen, you’ll be able to add additional users to access Nextcloud.
    Click on the **New User** button. Simply fill out the **Username** and **Password**
    fields at the top of the screen, and then click on the blue checkmark icon to
    finish the process:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在**用户**页面，你可以添加其他用户来访问 Nextcloud。点击**新建用户**按钮。只需在页面顶部填写**用户名**和**密码**字段，然后点击蓝色的勾选图标即可完成操作：
- en: '![](img/B18425_14_07.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_14_07.png)'
- en: 'Figure 14.7: Adding a new user to Nextcloud'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.7：向 Nextcloud 添加新用户
- en: As an administrative user, you can enable or disable various apps that are used
    by your users. Out of the box, Nextcloud has a basic suite of apps enabled, such
    as the **File Sharing** and **Photos** plugins. There are many more apps that
    you can enable in order to extend its functionality. In the top-right corner of
    the main screen of Nextcloud, you’ll find an icon that looks like a gear, and
    if you click on it, you will find a link to **Apps**, which will allow you to
    add additional functionality. Feel free to enable additional apps to extend Nextcloud’s
    capabilities. Some of my must-haves include **Notes** and **Tasks**.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 作为管理员用户，你可以启用或禁用用户使用的各种应用。Nextcloud 默认启用了基本的应用套件，如**文件共享**和**照片**插件。你还可以启用更多应用来扩展其功能。在
    Nextcloud 主屏幕的右上角，你会看到一个类似齿轮的图标，点击后可以找到**应用**链接，点击进入即可添加更多功能。你可以自由启用其他应用来扩展 Nextcloud
    的能力。我个人必备的一些应用包括**笔记**和**任务**。
- en: Now, you have your very own Nextcloud server. I find Nextcloud to be a very
    useful platform. Some Linux desktop environments (such as GNOME) have built-in
    integrations that allow you to add your Nextcloud account right to your desktop,
    which will allow calendar and contact syncing with your computer. There are also
    standalone client apps available for Linux, Windows, and macOS that you can download
    from the same URL that we’ve downloaded Nextcloud itself from.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经拥有了自己的 Nextcloud 服务器。我认为 Nextcloud 是一个非常实用的平台。一些 Linux 桌面环境（例如 GNOME）内置了集成功能，允许你将
    Nextcloud 账户直接添加到桌面，这样就可以与电脑同步日历和联系人。Linux、Windows 和 macOS 上也有独立的客户端应用可以下载，它们可以从我们下载
    Nextcloud 的同一网址获取。
- en: I’m sure you’ll agree that Nextcloud is a very useful asset to have available.
    For more information on using Nextcloud, check out the manual. In fact, it’s available
    in the **Files** app from within the application itself.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信你一定同意，Nextcloud 是一个非常有用的工具。如果想了解如何使用 Nextcloud，请查看手册。事实上，它可以在应用程序内的**文件**应用中找到。
- en: Summary
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this action-packed chapter, we looked at serving web pages with Apache. We
    started out by installing and configuring Apache, and then added additional modules.
    We also covered the concept of virtual hosts, which allow us to serve multiple
    websites on a single server, even if we only have a single network interface.
    Then, we walked through securing our Apache server with TLS. With Apache, we can
    use self-signed certificates, or we can purchase TLS certificates from a vendor
    for a fee. We looked at both possibilities. We even set up NGINX, which is a very
    powerful application that is growing in popularity. Finally, we closed out the
    chapter with a guide to installing Nextcloud, which is an application I’m sure
    you’ll find incredibly useful.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章内容中，我们探讨了如何使用 Apache 提供网页服务。我们首先安装并配置了 Apache，然后添加了额外的模块。我们还讨论了虚拟主机的概念，它允许我们在单个服务器上提供多个网站，即使我们只有一个网络接口。接着，我们演示了如何使用
    TLS 安全化 Apache 服务器。通过 Apache，我们可以使用自签名证书，或者我们也可以从供应商那里购买 TLS 证书。我们讨论了这两种可能性。最后，我们还设置了
    NGINX，它是一款功能强大的应用程序，正在变得越来越流行。我们以安装 Nextcloud 的指南结束了这一章，Nextcloud 作为一个应用，我相信你会发现它非常有用。
- en: In the next chapter of our journey, we’ll take a look at the process of automating
    server configuration with Ansible, which is a lot of fun.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们旅程的下一章，我们将深入了解如何使用 Ansible 自动化服务器配置，这非常有趣。
- en: Relevant videos
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关视频
- en: 'Nextcloud setup walk-through: [https://linux.video/nextcloud-setup](https://linux.video/nextcloud-setup)'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nextcloud 设置教程：[https://linux.video/nextcloud-setup](https://linux.video/nextcloud-setup)
- en: Further reading
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'NGINX documentation: [https://nginx.org/en/docs/](https://nginx.org/en/docs/)'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NGINX 文档：[https://nginx.org/en/docs/](https://nginx.org/en/docs/)
- en: 'NGINX documentation from the Ubuntu community wiki: [https://help.ubuntu.com/community/Nginx](https://help.ubuntu.com/community/Nginx)'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 Ubuntu 社区 Wiki 的 NGINX 文档：[https://help.ubuntu.com/community/Nginx](https://help.ubuntu.com/community/Nginx)
- en: 'Apache HTTP server documentation: [https://httpd.apache.org/docs/](https://httpd.apache.org/docs/)'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache HTTP 服务器文档：[https://httpd.apache.org/docs/](https://httpd.apache.org/docs/)
- en: 'Nextcloud administration manual: [https://docs.nextcloud.com/server/latest/admin_manual/](https://docs.nextcloud.com/server/latest/admin_manual/)'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nextcloud 管理手册：[https://docs.nextcloud.com/server/latest/admin_manual/](https://docs.nextcloud.com/server/latest/admin_manual/)
- en: 'Certbot instructions: [https://certbot.eff.org/instructions](https://certbot.eff.org/instructions)'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Certbot 使用说明：[https://certbot.eff.org/instructions](https://certbot.eff.org/instructions)
- en: Join our community on Discord
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord 空间，与作者和其他读者一起讨论：
- en: '[https://packt.link/LWaZ0](https://packt.link/LWaZ0)'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/LWaZ0](https://packt.link/LWaZ0)'
- en: '![](img/QR_Code50046724-1955875156.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code50046724-1955875156.png)'
