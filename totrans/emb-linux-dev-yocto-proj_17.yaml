- en: '17'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '17'
- en: Best Practices
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践
- en: This chapter aims to provide insight into our (the authors’) personal experience
    in working with embedded devices and embedded Linux development over the years.
    We have gathered some aspects that are often underestimated or wholly neglected
    to serve as inspiration for you in your next project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在提供我们（作者）多年来在嵌入式设备和嵌入式Linux开发方面的个人经验。我们收集了一些常常被低估或完全忽视的方面，以便为你下一个项目提供灵感。
- en: We have split this chapter into two independent parts, one about the guidelines
    related to the Yocto Project specifics and the other about more general aspects
    of a project. This is so that you don’t have to study the two sections in a particular
    order.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将本章分为两个独立部分，一部分涉及与Yocto项目相关的指导原则，另一部分涉及项目的一些更一般性的方面。这样，你就不需要按照特定顺序学习这两个部分。
- en: Guidelines to follow for Yocto Project
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Yocto项目遵循的指导原则
- en: This section aims to gather some guidelines for aspects of the Yocto Project
    metadata and project organization tips that make our life easier in terms of short-
    and long-term maintenance.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本节旨在收集一些关于Yocto项目元数据和项目组织的指导原则，这些原则可以让我们在短期和长期维护方面更加轻松。
- en: Managing layers
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理层次
- en: 'As our journey in product development advances, we will naturally use multiple
    repositories to meet the needs we face. Keeping track of the repositories is a
    complex challenge as we need to do the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们在产品开发中的进展，我们自然会使用多个仓库来满足我们面临的需求。跟踪这些仓库是一个复杂的挑战，因为我们需要做以下几件事：
- en: Make sure we can reproduce a previous build in the future
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保我们将来能够复现之前的构建
- en: Allow multiple team members to work in the same code base
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许多个团队成员在同一代码库中工作
- en: Validate the changes we make using Continuous Integration tools
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用持续集成工具验证我们所做的更改
- en: Avoid subtle changes in the layers we use
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免我们使用的层次中出现细微的变化
- en: Those goals are intimidating, but a few tools are in use, with different strategies
    to overcome those challenges.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些目标令人畏惧，但目前已有一些工具在使用，并且采取了不同的策略来克服这些挑战。
- en: 'The simplest solution uses the `image-buildinfo` class ([https://docs.yoctoproject.org/4.0.4/ref-manual/classes.html#image-buildinfo-bbclass](https://docs.yoctoproject.org/4.0.4/ref-manual/classes.html#image-buildinfo-bbclass)),
    which writes a plain text file containing build information and layers revisions
    to the target filesystem at `${sysconfdir}/buildinfo` by default. Some tools have
    been developed that can help this process. These tools are discussed as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的解决方案使用`image-buildinfo`类（[https://docs.yoctoproject.org/4.0.4/ref-manual/classes.html#image-buildinfo-bbclass](https://docs.yoctoproject.org/4.0.4/ref-manual/classes.html#image-buildinfo-bbclass)），该类默认将一个包含构建信息和层次修订的纯文本文件写入目标文件系统的`${sysconfdir}/buildinfo`。一些工具已经被开发出来，可以帮助这一过程。以下是讨论这些工具的内容：
- en: Google developed the **repo** ([https://source.android.com/docs/setup/download#repo](https://source.android.com/docs/setup/download#repo))
    tool for Android development. It has been adopted for use in other projects. A
    critical aspect of repo is that it requires some tooling to integrate with Yocto
    Project-based projects to automate the build directory and environment configuration.
    See the *O.S. Systems Embedded Linux project* ([https://github.com/OSSystemsEmbeddedLinux/ossystems-embedded-linux-platform](https://github.com/OSSystemsEmbeddedLinux/ossystems-embedded-linux-platform))
    as inspiration for using repo in your projects.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google为Android开发开发了**repo**工具（[https://source.android.com/docs/setup/download#repo](https://source.android.com/docs/setup/download#repo)）。它已经被其他项目采纳。repo的一个关键特点是，它需要一些工具与基于Yocto项目的项目集成，以自动化构建目录和环境配置。可以参考*O.S.
    Systems嵌入式Linux项目*（[https://github.com/OSSystemsEmbeddedLinux/ossystems-embedded-linux-platform](https://github.com/OSSystemsEmbeddedLinux/ossystems-embedded-linux-platform)）作为使用repo的灵感来源。
- en: Siemens developed **kas** ([https://github.com/siemens/kas](https://github.com/siemens/kas))
    to provide an easy mechanism for downloading sources, automating the build directory
    and environment configuration, and so on.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Siemens开发了**kas**（[https://github.com/siemens/kas](https://github.com/siemens/kas)），提供了一种简便机制，用于下载源代码、自动化构建目录和环境配置等。
- en: Garmin developed **Whisk** ([https://github.com/garmin/whisk](https://github.com/garmin/whisk))
    to manage complex product configurations using OpenEmbedded and the Yocto Project.
    The key features are a single source tree, multiple axes of configuration, multiple
    product builds, isolated layer configuration, and so on.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Garmin开发了**Whisk** ([https://github.com/garmin/whisk](https://github.com/garmin/whisk))，用于通过OpenEmbedded和Yocto项目管理复杂的产品配置。其主要特点包括单一源树、多个配置轴、多个产品构建、隔离层配置等。
- en: Agilent developed **Yocto Buddy** ([https://github.com/Agilent/yb](https://github.com/Agilent/yb)).
    The design aims to ease the setup and keep Yocto Project-based environments synchronized.
    Yocto Buddy was inspired by all previously mentioned tools and is still early
    in development.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Agilent开发了**Yocto Buddy** ([https://github.com/Agilent/yb](https://github.com/Agilent/yb))。该设计旨在简化设置，并保持基于Yocto项目的环境同步。Yocto
    Buddy的灵感来源于前面提到的所有工具，当前仍处于早期开发阶段。
- en: This is a subset of existing tools and shouldn’t be considered a complete list.
    Ideally, you should play with them before deciding, as the choice depends on the
    project use case and team expertise.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是现有工具的一个子集，不应被视为完整列表。理想情况下，您应该在做出决定前先使用它们，因为选择取决于项目用例和团队的专业知识。
- en: Avoid creating too many layers
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免创建过多的层
- en: 'A significant advantage of the Yocto Project is that it has the ability to
    use and create multiple layers. It allows us to do the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Yocto项目的一个显著优势是，它能够使用和创建多个层。这使我们能够做到以下几点：
- en: Reuse BSP layers from semiconductor vendors
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重用半导体供应商的BSP层
- en: Reduce duplication of work by sharing reusable blocks to enable the use of new
    or specific applications, programming languages, and so on.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过共享可重用的模块来减少工作重复，从而支持新的或特定的应用程序、编程语言等。
- en: 'However, creating multiple layers may be unproductive when developing a project
    or a set of products. For example, the development of BSP-only layers makes sense
    in the following situations:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在开发项目或一组产品时，创建多个层可能没有成效。例如，以下情况中开发仅包含BSP的层是有意义的：
- en: The board is the product, as in the **System on Module** (**SoM**) vendors’
    case
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**系统模块**（**SoM**）供应商的案例中，板卡即是产品
- en: When external access to the layer is critical, however, we want to limit the
    access for the non-BSP source
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当外部需要访问某个层时，然而我们希望限制非BSP源的访问
- en: 'Using a single layer for the product, or even the company, has many advantages,
    such as the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用单一层来为产品甚至公司提供支持，有许多优势，例如：
- en: Facilitating the development of reusable components such as a `packagegroup`
    package for development tools or network utilities shared by multiple products
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 促进可重用组件的开发，例如多个产品共享的`packagegroup`开发工具或网络工具包
- en: Reducing the risk of unexpected side effects due to changes for a specific product
    or board
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 降低由于为特定产品或板卡做更改而引发的意外副作用的风险
- en: Increasing the reuse of bug fixes across multiple products and reuse of BSP
    low-level components such as the Linux kernel or bootloader
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加跨多个产品的bug修复复用，并重用BSP低级组件，如Linux内核或引导加载程序
- en: Boosting standardization across multiple products, reducing the learning curve
    for new team members
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多个产品之间推动标准化，减少新团队成员的学习曲线
- en: The decision to use one or more layers depends on several aspects; however,
    we recommend starting simple and, in the future, splitting the layer if required.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 是否使用一个或多个层取决于多个方面；然而，我们建议从简单开始，未来如有需要再拆分层。
- en: Prepare the product metadata for new Yocto Project releases
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为新版本的Yocto项目发布准备产品元数据
- en: 'As our product grows, so does our metadata and the need for good organization.
    Some use cases commonly seen during product development are as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们产品的增长，元数据也在增长，并且需要良好的组织结构。以下是在产品开发过程中常见的一些用例：
- en: The need to backport a new recipe version due to a bug fix or a feature
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要回溯一个新配方版本，以修复bug或增加新特性
- en: A missing package configuration or bug fix is not yet available in the Yocto
    Project recipe
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yocto项目配方中尚未提供缺失的包配置或 bug 修复
- en: 'We use two recipe directories to organize this kind of content:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用两个配方目录来组织这类内容：
- en: '`recipes-backport`: Backports of recipes coming from new Yocto Project releases'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recipes-backport`: 从新的Yocto项目版本回溯的配方'
- en: '`recipes-staging`: New recipes or `bbappend` files adding missing package configurations
    or bug fixes'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recipes-staging`: 新的配方或`bbappend`文件，添加缺失的包配置或bug修复'
- en: We continuously send new recipes or bug fixes from `recipes-staging` to the
    respective upstream project (for example, OpenEmbedded Core). Then, when the patch
    is accepted, we move this change from `recipes-staging` to the `recipes-backport`
    directory. This approach allows us to keep track of pending upstreaming tasks
    and easily upgrade our meta layer to a new Yocto Project release. Furthermore,
    we can quickly act on the backport directory and remove it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们持续将新的配方或错误修复从`recipes-staging`发送到相应的上游项目（例如，OpenEmbedded Core）。然后，当补丁被接受后，我们将此更改从`recipes-staging`移动到`recipes-backport`目录。这种方法使我们能够跟踪待上游提交的任务，并轻松将我们的元层升级到新的Yocto
    Project版本。此外，我们可以快速处理回移目录并将其删除。
- en: Create your custom distro
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建您的自定义发行版
- en: 'When using the Yocto Project, we usually add many configurations in `build/conf/local.conf`.
    However, as discussed in the book, this is bad as it is not at source control
    management and is likely to differ among developers. Using a custom distribution
    has many benefits, and some of them are highlighted here:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Yocto Project时，我们通常会在`build/conf/local.conf`中添加许多配置。然而，正如书中所讨论的，这样做不好，因为它不在源代码管理中，并且可能在开发者之间有所不同。使用自定义发行版有许多好处，以下是其中一些重点：
- en: Allows consistent use among multiple developers
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许多个开发者之间的一致使用
- en: Provides a clear view of the different `DISTRO_FEATURES` we use when compared
    to our base distribution (for example, `poky`)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供清晰的视图，展示我们与基础发行版（例如`poky`）相比所使用的不同`DISTRO_FEATURES`
- en: Provides a central place where we can have a global view of all the required
    recipe configurations we need for our product, reducing the number of `bbappend`
    files required to configure our recipes (for example, `PACKAGECONFIG:pn-<myrecipe>:append
    = "` `myfeature"`)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供一个集中地点，让我们可以全局查看产品所需的所有配方配置，从而减少配置配方所需的`bbappend`文件数量（例如，`PACKAGECONFIG:pn-<myrecipe>:append
    = "` `myfeature"`）
- en: Besides those more technical aspects, using a custom distro also allows the
    proper branding of SDK or other Yocto Project-generated artifacts.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 除了那些更技术性的方面，使用自定义发行版还允许对SDK或其他Yocto Project生成的工件进行适当的品牌化。
- en: We learned how to create a custom distribution in the *Using a custom distribution*
    sectiown in [*Chapter 12*](B19361_12.xhtml#_idTextAnchor147), *Creating* *Custom
    Layers*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第12章*](B19361_12.xhtml#_idTextAnchor147)的*使用自定义发行版*部分中学会了如何创建自定义发行版，*创建*
    *自定义层*。
- en: Avoid reusing existing images for your product
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免为您的产品重复使用现有的镜像
- en: 'Images are where everything fits together. When we are developing a product,
    it is important to minimize the number of packages we have installed in our images
    for multiple reasons:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 镜像是所有内容汇集的地方。当我们开发产品时，出于多种原因，重要的是最小化镜像中安装的包的数量：
- en: Reducing the rootfs size
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少rootfs大小
- en: Reducing the build time
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少构建时间
- en: Reducing the number of licenses to deal with
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少需要处理的许可证数量
- en: Reducing the surface of attack for security breaches
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 降低安全漏洞的攻击面
- en: A typical starting point is copying the `core-image-base.bb` file to our custom
    layer as `myproduct-image.bb` and extending it, adding what we need for the product’s
    image. In addition, we create an image called `myproduct-image-dev.bb` for use
    during development and make sure it requires `myproduct-image.bb` along with the
    artifacts used only for development, avoiding code duplication. This way, we have
    two images for production and development, but they share the same core features
    and packages.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的起点是将`core-image-base.bb`文件复制到我们的自定义层，并命名为`myproduct-image.bb`，然后对其进行扩展，添加我们需要的产品镜像内容。此外，我们创建一个名为`myproduct-image-dev.bb`的镜像，用于开发过程中，并确保它依赖于`myproduct-image.bb`以及仅用于开发的工件，避免代码重复。这样，我们就有了两个镜像，一个用于生产，一个用于开发，但它们共享相同的核心特性和包。
- en: Standard SDK is commonly undervalued
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准SDK通常被低估
- en: 'Application development implies an interactive process, mainly because we usually
    continuously build the application until we accomplish what we aim for. This use
    case is not well suited for the Yocto Project, mainly for the following reasons:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序开发意味着一个互动过程，主要是因为我们通常会持续构建应用程序，直到实现我们所期望的目标。这个用例不太适合Yocto Project，主要是由于以下原因：
- en: Every time we start the build of a recipe, it discards the previous build objects
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次开始构建配方时，它都会丢弃之前的构建对象
- en: The time needed for deploying the application or image is much longer
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署应用程序或镜像所需的时间更长
- en: A lack of proper integration in the IDE environment
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺乏在IDE环境中的适当集成
- en: There are alternatives for a few of those topics, such as using `devtool` to
    reuse the build objects and helping to deploy the application. We saw how to use
    `devtool` in the *Deploying to the target using devtool* and *Building a recipe
    using devtool* sections from [*Chapter 9*](B19361_09.xhtml#_idTextAnchor115),
    *Developing with the Yocto Project*, but the development experience is still cumbersome.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些主题，有一些替代方案，例如使用`devtool`来重用构建对象并帮助部署应用程序。我们在《使用devtool部署到目标》和《使用devtool构建配方》章节中看到了如何使用`devtool`，但开发体验仍然很繁琐。
- en: Using Standard SDK for application and other components’ development, such as
    the Linux kernel and bootloader, is still preferable. This way, we focus on faster
    development, postponing or parallelizing the Yocto Project integration task.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于应用程序和其他组件（如Linux内核和引导程序）的开发，使用标准SDK仍然更可取。这样我们可以专注于更快的开发，推迟或并行化Yocto项目的集成任务。
- en: Avoid too many patches for Linux kernel and bootloader modifications
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免对Linux内核和引导程序进行过多的补丁修改
- en: 'The need for patches in the Linux kernel and bootloader is inherent to embedded
    Linux development, as we rarely use the hardware without any changes. The level
    of modification on those components is related to your hardware design, for example:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在嵌入式Linux开发中，内核和引导程序的补丁需求是内在的，因为我们很少在没有任何更改的情况下使用硬件。这些组件的修改程度与您的硬件设计有关，例如：
- en: Using a **Single-Board Computer** (**SBC**), the number of changes should be
    minimal
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**单板计算机**（**SBC**），变更数量应尽量少
- en: In the use of **System-On-Module** (**SOM**) with a custom baseboard, the number
    of changes could vary depending on the number of modifications from the vendor
    baseboard hardware design
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用**系统级模块**（**SOM**）与自定义基板时，变更数量可能会因供应商基板硬件设计的修改数量而异
- en: Ultimately, the use of custom hardware design implies the development of a custom
    BSP and, consequently, a considerable number of modifications
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终，使用自定义硬件设计意味着开发自定义BSP，因此会有大量修改
- en: Those are not set in stone. So, for example, consider starting the project using
    an SBC. Later, we find out that the vendor does not provide a good reference BSP,
    so the number of modifications and amount of work for the BSP will increase considerably.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些并非一成不变。例如，考虑使用SBC启动项目。后来，我们发现供应商没有提供良好的参考BSP，因此BSP的修改数量和工作量将大幅增加。
- en: 'When we have small changes, it is better to tackle the changes as patch files
    added to the component recipe. But when the effort to maintain the component increases,
    it justifies having a separate fork of that component to keep all the changes
    in place. Using a repository fork gives us the following advantages:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有小的变更时，最好将这些变更作为补丁文件添加到组件配方中处理。但是当维护组件的工作量增加时，有必要将这些变更保留在单独的组件分支中。使用存储库分支具有以下优势：
- en: The history of the changes
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更历史记录
- en: Different branches or tags for development and production
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的开发和生产分支或标签
- en: The possibility of merging with other providers
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他提供者合并的可能性
- en: It allows the use of much simpler recipes, as we don’t need to carry on individual
    patches
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这允许使用更简单的配方，因为我们不需要进行个别的补丁维护
- en: In summary, we should use the strategy that makes sense for the project. Eventually,
    this will change, but using the right approach reduces the total effort to support
    the hardware in use properly.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，我们应该使用适合项目的策略。最终会有所变化，但采用正确的方法可以减少支持所用硬件的总体工作量。
- en: Avoid using AUTOREV as SRCREV
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免使用AUTOREV作为SRCREV
- en: 'The use of `AUTOREV` as `SRCREV` is usually applied when developing a product.
    We must interactively change the code and try that code inside the Yocto Project.
    That said, this comes with a couple of drawbacks:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发产品时通常会将`AUTOREV`作为`SRCREV`。我们必须交互式地更改代码，并在Yocto项目中尝试该代码。话虽如此，这也伴随着几个缺点：
- en: It is hard to reproduce the previous build as every time we rebuild our image,
    it may use a different revision for our recipe.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于每次重建映像时都可能使用不同的配方修订版，因此很难重现先前的构建。
- en: The `AUTOREV` value is only applied when BitBake invalidates the cache of a
    specific recipe. That happens when we modify the recipe itself or when we change
    something that triggers the BitBake cache rebuild, such as changing any `.``conf`
    file.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当BitBake使特定配方的缓存无效时，才会应用`AUTOREV`值。这发生在我们修改配方本身或更改触发BitBake缓存重建的任何`.conf`文件时。
- en: Those drawbacks make `AUTOREV` very fragile, and other alternatives can cover
    the interactive code change more consistently. Typically, `devtool` is used as
    it allows us to change the code directly in the workspace and forces the recipe
    to use this as the source. Another alternative is to use the `externalsrc.bbclass`
    class ([https://docs.yoctoproject.org/4.0.4/index.html#ref-classes-externalsrc](https://docs.yoctoproject.org/4.0.4/index.html#ref-classes-externalsrc)),
    which allows us to configure a recipe to use a directory as the source for the
    build.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这些缺点使得`AUTOREV`非常脆弱，而其他替代方案可以更一致地覆盖交互式代码更改。通常使用`devtool`，因为它允许我们直接在工作区中更改代码，并强制食谱使用此作为源代码。另一个替代方法是使用`externalsrc.bbclass`类（[https://docs.yoctoproject.org/4.0.4/index.html#ref-classes-externalsrc](https://docs.yoctoproject.org/4.0.4/index.html#ref-classes-externalsrc)），它允许我们配置一个食谱，以使用一个目录作为构建源。
- en: Create a Software Bill of Materials
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建软件物料清单
- en: The Poky build system can describe all the components used in an image from
    the licenses for each software component. This description is generated as a **Software
    Bill of Materials** (**SBOM**) using the **Software Package Data Exchange** (**SPDX**)
    standard ([https://spdx.dev/](https://spdx.dev/)). Using the SPDX format has the
    advantage of leveraging existing tooling, allowing extra automation, which is
    impossible using Poky’s standard license output format.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Poky 构建系统可以描述镜像中使用的所有组件，包括每个软件组件的许可证。这个描述会生成一个**软件物料清单**（**SBOM**），使用**软件包数据交换**（**SPDX**）标准（[https://spdx.dev/](https://spdx.dev/)）。使用
    SPDX 格式的好处是能够利用现有工具，从而实现额外的自动化，这是使用 Poky 的标准许可证输出格式无法做到的。
- en: The SBOM is critical to ensure open source license compliance. However, the
    SBOM is not generated by default. You can refer to the *Creating a Software Bill
    of Materials* section from *The Yocto Project Development Tasks* *Manual* ([https://docs.yoctoproject.org/4.0.4/dev-manual/common-tasks.html#creating-a-software-bill-of-materials](https://docs.yoctoproject.org/4.0.4/dev-manual/common-tasks.html#creating-a-software-bill-of-materials)).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: SBOM 对确保开源许可证合规性至关重要。然而，SBOM 默认不会生成。你可以参考*《Yocto 项目开发任务手册》*中的*创建软件物料清单*部分（[https://docs.yoctoproject.org/4.0.4/dev-manual/common-tasks.html#creating-a-software-bill-of-materials](https://docs.yoctoproject.org/4.0.4/dev-manual/common-tasks.html#creating-a-software-bill-of-materials)）。
- en: Guidelines to follow for general projects
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通用项目的指南
- en: This section discusses some project-related guidelines to follow to reduce the
    general project risk and avoid common pitfalls.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论了一些与项目相关的指南，帮助减少一般项目风险，避免常见的陷阱。
- en: Continuously monitor the project license constraints
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续监控项目的许可证约束
- en: 'Depending on the project we are working on, license compliance might be a big
    or a small topic. Some projects have very restricted license constraints, such
    as the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们所从事的项目，许可证合规性可能是一个大问题，也可能是一个小问题。一些项目有非常严格的许可证约束，例如以下内容：
- en: The inability to use GPLv3-released software
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法使用 GPLv3 发布的软件
- en: Copyleft contamination of project-specific intellectual property
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目特定知识产权的复制左传播
- en: Company-wise license constraints
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公司范围内的许可证约束
- en: The advice is to start this process at the beginning of the project, reducing
    the amount of rework throughout the project. However, the project license constraints
    and the project component’s licenses may change, requiring us to monitor our license
    compliance continuously.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 建议在项目开始时就启动这一过程，从而减少整个项目中的返工量。然而，项目的许可证约束和项目组件的许可证可能会发生变化，这要求我们持续监控许可证合规性。
- en: Security can harm your project
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全问题可能会危害你的项目
- en: 'In our hyper-connected era, every connected device is a potential target for
    a security attack. As embedded device developers, we should contribute to a safer
    place. We should do the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们这个超连接的时代，每个连接的设备都是潜在的安全攻击目标。作为嵌入式设备开发人员，我们应当为创建一个更安全的环境做出贡献。我们应该做以下几点：
- en: Scan our embedded Linux software for known security flaws
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描我们的嵌入式 Linux 软件以查找已知的安全漏洞
- en: Monitor critical software for security fixes
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控关键软件的安全修复
- en: Implement a process for fixing field devices
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施修复现场设备的过程
- en: We can use the Yocto Project infrastructure, as discussed in the *Checking for
    Vulnerabilities* section of *Yocto Project Development Tasks Manual* ([https://docs.yoctoproject.org/4.0.4/dev-manual/common-tasks.html#checking-for-vulnerabilities](https://docs.yoctoproject.org/4.0.4/dev-manual/common-tasks.html#checking-for-vulnerabilities)),
    to scan for known **Common Vulnerabilities and Exposures** (**CVE**) for our recipes.
    We should not be limited to this as our BSP components might also require security
    fixes, which the BSP vendors commonly neglect. Still, the paranoia level depends
    on the project niche.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Yocto项目的基础设施，正如*《Yocto项目开发任务手册》*中的*检查漏洞*部分所讨论的那样([https://docs.yoctoproject.org/4.0.4/dev-manual/common-tasks.html#checking-for-vulnerabilities](https://docs.yoctoproject.org/4.0.4/dev-manual/common-tasks.html#checking-for-vulnerabilities))，来扫描我们配方中的已知**常见漏洞和暴露**(**CVE**)信息。我们不应仅限于此，因为我们的BSP组件也可能需要安全修复，而BSP供应商通常会忽视这些修复。不过，过度谨慎的程度取决于项目的细分领域。
- en: Don’t underestimate maintenance costs
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不要低估维护成本
- en: 'At first, upstreaming our changes might not seem strategic for the following
    reasons:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，上游我们的更改可能看起来并不具备战略意义，原因如下：
- en: Upstreaming uses resources to adapt modifications
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上游工作使用资源来适应修改
- en: Upstream review feedback may require additional interactions and rework
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上游审查反馈可能需要额外的互动和返工
- en: Development work not directly connected to the product needs to be done
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要完成与产品无直接关联的开发工作
- en: 'Usually, development and management teams underestimate the total cost of maintenance.
    But unfortunately, this is frequently the most expensive part of the project,
    as it lasts for years. Upstreaming our changes to the respective project allows
    us to do the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，开发和管理团队低估了维护的总成本。但不幸的是，这往往是项目中最昂贵的部分，因为它会持续多年。将我们的更改上游到相应的项目，可以让我们做到以下几点：
- en: Avoid work duplication over the years
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免多年来的工作重复
- en: Reduce the friction during upgrades for new Yocto Project releases
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少升级新Yocto项目版本时的摩擦
- en: Receive critical and constructive feedback about the changes we are upstreaming
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接受关于我们正在上游的更改的关键性和建设性反馈
- en: Reduce the amount of work with security updates and bug fixes
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少与安全更新和漏洞修复相关的工作量
- en: Reduce the amount of code we have to maintain
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少我们需要维护的代码量
- en: The upstream work is continuous. Every time we add a new feature, we potentially
    increase the gap between our code and the upstream. Therefore, we may postpone
    the upstreaming work, but the upstreaming costs will be multiplied when you work
    on updating to the next Yocto Project release.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 上游工作是持续性的。每当我们添加一个新特性时，我们可能会增加代码与上游之间的差距。因此，我们可以推迟上游工作，但当你开始更新到下一个Yocto项目版本时，上游工作的成本将成倍增加。
- en: Tackle project risk points and constraints as soon as possible
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尽早解决项目的风险点和限制
- en: 'As the software and hardware must work together, a few aspects directly depend
    on our hardware design. To reduce the project risk, we should anticipate as many
    critical software and hardware requirements as possible so we can validate some
    aspects, such as the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 由于软件和硬件必须协同工作，因此有些方面直接依赖于我们的硬件设计。为了降低项目风险，我们应该尽可能预见到许多关键的软件和硬件需求，以便能够验证一些方面，例如：
- en: Is the amount of memory we intend to use enough or too much?
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们打算使用的内存量是否足够或过多？
- en: Is the amount of power the hardware uses sufficient for our constraints?
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬件使用的功率是否足够满足我们的限制？
- en: Is the target GPU capable of rendering the animations we need?
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标GPU是否能够渲染我们需要的动画？
- en: Do all the planned peripheral devices have available Linux kernel drivers ready
    for use or do we need to plan the development for those?
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有计划的外设设备是否都已准备好可用的Linux内核驱动，还是我们需要规划开发这些驱动？
- en: 'The preceding questions can be answered using a reference or well-known board,
    which we have ready to use BSP. This allows us to produce a **Minimal Viable Product**
    (**MVP**) without the need to design our custom hardware. After we validate the
    project’s risks and constraints, those boards are still valuable assets for the
    following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 前述问题可以通过使用参考板或已准备好的BSP板来回答。这使我们能够在无需设计自定义硬件的情况下，生产出**最小可行产品**(**MVP**)。在验证项目的风险和限制后，这些板仍然是宝贵的资产，用于以下内容：
- en: Continuing the development of our software until the custom board and BSP are
    ready for use
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继续开发我们的软件，直到自定义板和BSP准备好使用
- en: As a base of comparison with our custom design
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为与我们自定义设计进行比较的基础
- en: As a reference to verify whether a bug is specific to our custom board and BSP
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为验证某个错误是否仅限于我们定制板和BSP的参考
- en: Considering we can develop our software using a reference or a well-known board,
    we should postpone the design of a custom board for as long as possible. Delaying
    the design gives us the freedom to change many aspects of our project, such as
    changing a peripheral because of a specific driver or even changing the planned
    CPU and memory capabilities after maturing the application and features.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到我们可以使用参考板或知名板开发软件，我们应尽可能推迟设计定制板。推迟设计为我们提供了改变项目多个方面的自由，例如由于特定驱动程序需要更换外设，甚至在应用程序和功能成熟后更改计划中的CPU和内存能力。
- en: When we finally decide to go with a custom design, we should keep it as close
    as possible to the board we choose as a reference. But, of course, sometimes we
    need to deviate from the reference design. Still, it comes with the risk of introducing
    design issues and increasing the cost of our custom BSP.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们最终决定使用定制设计时，应该尽量保持它与我们选择的参考板相似。但当然，有时我们需要偏离参考设计。然而，这样做有引入设计问题和增加定制BSP成本的风险。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Phew! In this final chapter, you have been introduced to a set of good practices
    that the authors have been using in their real-life projects. We hope they have
    given you some points to consider when planning your next project.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 呼！在这一最终章节中，您已了解一系列作者在实际项目中使用的最佳实践。我们希望这些内容能为您在规划下一个项目时提供一些值得考虑的要点。
- en: Throughout the book, we have covered the necessary background information for
    you to learn any other aspect of the Yocto Project that you may need on your own.
    So, you now have a general understanding of what is happening behind the scenes
    when you ask BitBake to build a recipe or an image. From now on, you are ready
    to free your mind and try new things. The ball is in your court now – here’s where
    the fun begins!
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们已经涵盖了必要的背景知识，以便您能够独立学习Yocto项目的其他任何方面。因此，您现在对当您请求BitBake构建食谱或镜像时发生的幕后过程有了大致了解。从现在开始，您已经准备好释放思维，尝试新事物。球现在在您这一方——真正的乐趣才刚刚开始！
