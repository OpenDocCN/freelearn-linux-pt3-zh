- en: 25\. An Introduction to Linux Containers
  prefs: []
  type: TYPE_NORMAL
- en: The preceding chapters covered the concept of virtualization with a particular
    emphasis on creating and managing virtual machines using KVM. This chapter will
    introduce a related technology in the form of Linux Containers. While there are
    some similarities between virtual machines and containers, there are also some
    key differences that will be outlined in this chapter along with an introduction
    to the concepts and advantages of Linux Containers. The chapter will also provide
    an overview of some of the CentOS 8 container management tools. Once the basics
    of containers have been covered in this chapter, the next chapter will work through
    some practical examples of creating and running containers on CentOS 8.
  prefs: []
  type: TYPE_NORMAL
- en: 25.1 Linux Containers and Kernel Sharing
  prefs: []
  type: TYPE_NORMAL
- en: In simple terms, Linux containers can be thought of as a lightweight alternative
    to virtualization. In a virtualized environment, a virtual machine is created
    that contains and runs the entire guest operating system. The virtual machine,
    in turn, runs on top of an environment such as a hypervisor that manages access
    to the physical resources of the host system.
  prefs: []
  type: TYPE_NORMAL
- en: Containers work by using a concept referred to as kernel sharing which takes
    advantage of the architectural design of Linux and UNIX-based operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: In order to understand how kernel sharing and containers work it helps to first
    understand the two main components of Linux or UNIX operating systems. At the
    core of the operating system is the kernel. The kernel, in simple terms, handles
    all the interactions between the operating system and the physical hardware. The
    second key component is the root file system which contains all the libraries,
    files and utilities necessary for the operating system to function. Taking advantage
    of this structure, containers each have their own root file system but share the
    kernel of the host operating system. This structure is illustrated in the architectural
    diagram in [Figure 25-1](../Text/Containers_Overview.xhtml#_idTextAnchor310) below.
  prefs: []
  type: TYPE_NORMAL
- en: This type of resource sharing is made possible by the ability of the kernel
    to dynamically change the current root file system (a concept known as change
    root or chroot) to a different root file system without having to reboot the entire
    system. Linux containers are essentially an extension of this capability combined
    with a container runtime, the responsibility of which is to provide an interface
    for executing and managing the containers on the host system. A number of container
    runtimes are available including Docker, lxd, containerd and CRI-O. Earlier versions
    of CentOS used Docker by default but this has been supplanted by Podman as the
    default in CentOS 8.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/linux_container_diagram.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 25-1
  prefs: []
  type: TYPE_NORMAL
- en: 25.2 Container Uses and Advantages
  prefs: []
  type: TYPE_NORMAL
- en: The main advantage of containers is that they require considerably less resource
    overhead than virtualization allowing many container instances to be run simultaneously
    on a single server, and can be started and stopped rapidly and efficiently in
    response to demand levels. Containers run natively on the host system providing
    a level of performance that cannot be matched by a virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: Containers are also extremely portable and can be migrated between systems quickly
    and easily. When combined with a container management system such as Docker, OpenShift
    and Kubernetes, it is possible to deploy and manage containers on a vast scale
    spanning multiple servers and cloud platforms, potentially running thousands of
    containers.
  prefs: []
  type: TYPE_NORMAL
- en: Containers are frequently used to create lightweight execution environments
    for applications. In this scenario, each container provides an isolated environment
    containing the application together with all of the runtime and supporting files
    required by that application to run. The container can then be deployed to any
    other compatible host system that supports container execution and run without
    any concerns that the target system may not have the necessary runtime configuration
    for the application - all of the application’s dependencies are already in the
    container.
  prefs: []
  type: TYPE_NORMAL
- en: Containers are also useful when bridging the gap between development and production
    environments. By performing development and QA work in containers, those containers
    can then be passed to production and launched safe in the knowledge that the applications
    are running in the same container environments in which they were developed and
    tested.
  prefs: []
  type: TYPE_NORMAL
- en: Containers also promote a modular approach to deploying large and complex solutions.
    Instead of developing applications as single monolithic entities, containers can
    be used to design applications as groups of interacting modules, each running
    in a separate container.
  prefs: []
  type: TYPE_NORMAL
- en: One possible drawback of containers is the fact that the guest operating systems
    must be compatible with the version of the kernel which is being shared. It is
    not, for example, possible to run Microsoft Windows in a container on a Linux
    system. Nor is it possible for a Linux guest system designed for the 2.6 version
    of the kernel to share a 2.4 version kernel. These requirements are not, however,
    what containers were designed for. Rather than being seen as limitations, therefore,
    these restrictions should be viewed as some of the key advantages of containers
    in terms of providing a simple, scalable and reliable deployment platform.
  prefs: []
  type: TYPE_NORMAL
- en: 25.3 CentOS 8 Container Tools
  prefs: []
  type: TYPE_NORMAL
- en: 'CentOS 8 provides a number of tools for creating, inspecting and managing containers.
    The main tools are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: •buildah – A command-line tool for building container images.
  prefs: []
  type: TYPE_NORMAL
- en: •podman – A command-line based container runtime and management tool. Performs
    tasks such as downloading container images from remote registries and inspecting,
    starting and stopping images.
  prefs: []
  type: TYPE_NORMAL
- en: •skopeo – A command-line utility used to convert container images, copy images
    between registries and inspect images stored in registries without the need to
    download them.
  prefs: []
  type: TYPE_NORMAL
- en: •runc – A lightweight container runtime for launching and running containers
    from the command-line.
  prefs: []
  type: TYPE_NORMAL
- en: •OpenShift – An enterprise level container application management platform consisting
    of command-line and web-based tools.
  prefs: []
  type: TYPE_NORMAL
- en: All of the above tools are compliant with the Open Container Initiative (OCI),
    a set of specifications designed to ensure that containers conform to the same
    standards between competing tools and platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 25.4 The Docker Registry
  prefs: []
  type: TYPE_NORMAL
- en: 'Although CentOS is provided with a set of tools designed to be used in place
    of those provided by Docker, those tools still need access to CentOS images for
    use when building containers. For this purpose, the CentOS project maintains a
    set of CentOS container images within the Docker Hub. The Docker Hub is an online
    container registry made of multiple repositories, each containing a wide range
    of container images available for download when building containers. The images
    within a repository are each assigned a repository tag (for example, centos8,
    centos7.7, latest etc) which can be referenced when performing an image download.
    The following, for example, is the URL of the centos8 image contained within the
    Docker Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: docker://docker.io/library/centos:centos8
  prefs: []
  type: TYPE_NORMAL
- en: In addition to downloading (referred to as “pulling” in container terminology)
    container images from Docker and other third party hosts registries, you can also
    use registries to store your own images. This can be achieved either by hosting
    your own registry, or by making use of existing services such as those provided
    by Docker, Amazon AWS, Google Cloud, Microsoft Azure and IBM Cloud to name a few
    of the many options.
  prefs: []
  type: TYPE_NORMAL
- en: 25.5 Container Networking
  prefs: []
  type: TYPE_NORMAL
- en: By default, containers are connected to a network using a Container Networking
    Interface (CNI) bridged network stack. In the bridged configuration, all the containers
    running on a server belong to the same subnet (10.88.0.0/16 by default) and, as
    such, are able to communicate with each other. The containers are also connected
    to the external network by bridging the host system’s network connection. Similarly,
    the host is able to access the containers via a virtual network interface (usually
    named cni0) which will have been created as part of the container tool installation.
  prefs: []
  type: TYPE_NORMAL
- en: 25.6 Summary
  prefs: []
  type: TYPE_NORMAL
- en: Linux Containers offer a lightweight alternative to virtualization and take
    advantage of the structure of the Linux and Unix operating systems. Linux Containers
    essentially share the kernel of the host operating system, with each container
    having its own root file system containing the files, libraries and applications.
    Containers are highly efficient and scalable and provide an ideal platform for
    building and deploying modular enterprise level solutions. A number of tools and
    platforms are available for building, deploying and managing containers including
    third-party solutions and those provided with CentOS.
  prefs: []
  type: TYPE_NORMAL
