- en: '*Chapter 11*: Understanding cgroups Version 1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第11章*：理解cgroups版本1'
- en: In this chapter, we'll introduce you to `cgroups`. (More specifically, we'll
    be looking at cgroups Version 1.) You'll learn what cgroups are, how they're constructed,
    and how you can benefit by taking advantage of them. We'll also briefly look at
    the history of cgroups.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍`cgroups`。 (更具体地说，我们将关注cgroups版本1。) 你将学习什么是cgroups，它们是如何构建的，以及你如何通过利用它们来获得好处。我们还将简要回顾cgroups的历史。
- en: Now, I have to tell you that discussing cgroups can become quite complex and
    convoluted. You might have already seen some online cgroups tutorials that do
    nothing but make your head hurt. My goal is to strip away as much complexity as
    possible and provide you with just enough information to help you manage resources
    on a systemd machine.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我必须告诉你，讨论cgroups可能变得相当复杂和曲折。你可能已经见过一些在线的cgroups教程，它们让你只觉得头痛。我的目标是尽可能剥去复杂性，为你提供足够的信息，帮助你管理systemd机器上的资源。
- en: 'Specific topics include:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 具体主题包括：
- en: Understanding the history of cgroups
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解cgroups的历史
- en: Understanding the purpose of cgroups
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解cgroups的目的
- en: Understanding the structure of cgroups Version 1
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解cgroups版本1的结构
- en: Understanding the cgroup Version 1 filesystem
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解cgroup版本1文件系统
- en: All right – if you're ready, let's get started!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，如果你准备好了，我们开始吧！
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To make things more interesting, we'll use the same Alma virtual machine that
    we set up in [*Chapter 5*](B17491_05_Final_NM_ePub.xhtml#_idTextAnchor063), *Creating
    and Editing Services*. You might remember that on that virtual machine, we set
    up one WordPress container service that's running in system mode, and another
    WordPress container service that running in user mode. If you don't have that
    virtual machine, go back to [*Chapter 5*](B17491_05_Final_NM_ePub.xhtml#_idTextAnchor063),
    *Creating and Editing Services*, and follow the steps for creating the WordPress
    container services. As always, this chapter will be hands-on. So fire up that
    virtual machine, and let's dig in.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让内容更加有趣，我们将使用在[*第5章*](B17491_05_Final_NM_ePub.xhtml#_idTextAnchor063)中设置的同一台Alma虚拟机，*创建和编辑服务*。你可能还记得，在那台虚拟机上，我们设置了一个以系统模式运行的WordPress容器服务，和一个以用户模式运行的WordPress容器服务。如果你没有那台虚拟机，可以返回到[*第5章*](B17491_05_Final_NM_ePub.xhtml#_idTextAnchor063)，*创建和编辑服务*，并按照步骤创建WordPress容器服务。和往常一样，本章将是动手实践的。所以启动那台虚拟机，我们一起深入研究吧。
- en: 'Check out the following link to see the Code in Action video: [https://bit.ly/3ltmKsO](https://bit.ly/3ltmKsO)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下链接，观看“代码实践”视频：[https://bit.ly/3ltmKsO](https://bit.ly/3ltmKsO)
- en: Understanding the history of cgroups
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解cgroups的历史
- en: This might shock you, but the cgroups technology didn't start as a part of systemd,
    and it wasn't invented by Red Hat. It's actually a component in the Linux kernel
    that can run on non-systemd Linux distros. A pair of Google engineers started
    cgroups development back in 2006, four years before Red Hat engineers started
    developing systemd. The first enterprise-grade Linux distro to include cgroups
    technology was *Red Hat Enterprise Linux 6*, which ran a hybrid upstart/SysV setup
    instead of systemd. Using cgroups on RHEL 6 was optional, and you had to jump
    through some hoops to set them up.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会让你震惊，但cgroups技术最初并不是systemd的一部分，也不是由Red Hat发明的。它实际上是Linux内核中的一个组件，可以在非systemd的Linux发行版上运行。一对Google工程师早在2006年就开始了cgroups的开发，早于Red
    Hat工程师开始开发systemd四年。第一款包含cgroups技术的企业级Linux发行版是*Red Hat Enterprise Linux 6*，它使用的是混合upstart/SysV设置，而不是systemd。在RHEL
    6中使用cgroups是可选的，你必须经历一些复杂的步骤才能设置它们。
- en: Nowadays, cgroups are enabled by default on all of the major enterprise-type
    Linux distros and are tightly integrated with systemd. RHEL 7 was the first enterprise
    distro to use systemd and was also the first enterprise distro to always have
    cgroups enabled.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，cgroups在所有主要的企业级Linux发行版中默认启用，并且与systemd紧密集成。RHEL 7是第一款使用systemd的企业级发行版，也是第一款始终启用cgroups的企业级发行版。
- en: There are currently two versions of the cgroups technology. Version 1 works
    well for the most part, but it does have some flaws, which I won't get into here.
    Version 2 was developed in 2013, primarily by an engineer at Facebook. In this
    chapter, I'll confine the discussion to Version 1\. Even though Version 2 might
    be much better, it still hasn't been widely adopted, and many container technologies
    still depend upon Version 1\. The current versions of all enterprise-grade Linux
    distros run with Version 1 by default.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有两个版本的cgroups技术。版本1在大多数情况下表现良好，但它确实存在一些缺陷，我这里不详细讨论。版本2是在2013年由Facebook的一位工程师开发的。在本章中，我将仅讨论版本1。尽管版本2可能更好，但它仍未得到广泛应用，许多容器技术仍然依赖版本1。目前所有企业级Linux发行版的默认版本都是版本1。
- en: Note
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Fedora, Arch, and Debian 11 are the only Linux distros of which I'm aware that
    run cgroups Version 2 by default. I've also seen some speculation that the next
    non-LTS version of Ubuntu, Ubuntu 21.10, is supposed to come with Version 2\.
    (Of course, you'll likely know that for sure by the time you read this.) So, which
    one should you learn about? Well, if you're an administrator working with any
    of the major enterprise-grade Linux distros, you'll want to concentrate on learning
    Version 1\. If you're a developer, you'll probably want to start learning Version
    2, because Version 2 is the future.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Fedora、Arch和Debian 11是我所知道的唯一默认运行cgroups版本2的Linux发行版。我还看到一些猜测认为，下一版本的非LTS版Ubuntu，即Ubuntu
    21.10，将会默认配备版本2。（当然，当你读到这篇文章时，你可能已经知道确切的情况。）那么，你应该学习哪个版本呢？嗯，如果你是负责管理主要企业级Linux发行版的管理员，你就应该集中精力学习版本1。如果你是开发者，你可能希望从版本2开始学习，因为版本2才是未来的趋势。
- en: Now that we've covered the history of cgroups, I suppose that I should now make
    some history by explaining what they are and why we need them. So, allow me to
    do just that.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了cgroups的历史，我想是时候做点历史性工作，解释一下它们是什么以及我们为什么需要它们了。那么，请允许我做一下这个解释。
- en: Understanding the purpose of cgroups
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解cgroups的目的
- en: Back in the days of single-core CPUs, resource management wasn't such a big
    deal. Servers generally came with anywhere from one to four single-core CPUs installed,
    so they were already limited in the number of services that could run simultaneously.
    All we needed for resource management back then were simple tools such as `nice`,
    `renice`, and `ulimit`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在单核CPU时代，资源管理并不是一件大事。服务器通常配备一到四个单核CPU，因此它们在能够同时运行的服务数量上本就有限。那时候，我们所需的资源管理工具只是一些简单的工具，如`nice`、`renice`和`ulimit`。
- en: Nowadays, it's an entirely different story. Servers now come with one or more
    multi-core CPUs and gobs of memory. (The current king-of-the-hill server CPU is
    the AMD Epyc, which now comes in a 64-core variety that can run 128 simultaneous
    threads. Yeah, that's enough to make us hard-core geeks salivate.) Although it
    might seem counter-intuitive, resource management on these beasts is more important
    than it was on the old systems. That's because one server can now run multiple
    services, multiple virtual machines, multiple containers, and multiple user accounts
    all at the same time. A whole roomful of the old physical servers that could only
    run one or two services can now be replaced by just one physical server. Those
    simple resource management tools that we used to use still have their uses, but
    we also now need something a lot more powerful to ensure that all processes and
    users play nice with each other. Enter cgroups.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，情况完全不同了。服务器现在配备了一个或多个多核CPU和大量内存。（目前最强的服务器CPU是AMD Epyc，它现在有一个64核版本，能够同时运行128个线程。是的，这足以让我们这些极客垂涎三尺。）虽然这看起来似乎有些违反直觉，但在这些强大系统上进行资源管理比旧系统更为重要。这是因为现在一台服务器可以同时运行多个服务、多个虚拟机、多个容器和多个用户账户。一整间只能运行一两个服务的老旧物理服务器，如今可以被一台物理服务器所替代。我们曾经使用的那些简单的资源管理工具仍然有用，但我们现在需要更强大的工具，以确保所有进程和用户能够和谐共处。cgroups应运而生。
- en: 'With cgroups, an administrator can:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用cgroups，管理员可以：
- en: Manage resource usage by either processes or users.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按照进程或用户来管理资源使用。
- en: Keep track of resource usage by users on multi-tenant systems to provide accurate
    billing.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪多租户系统中用户的资源使用情况，以提供准确的计费。
- en: More easily isolate running processes from each other. This not only makes for
    better security but also allows us to have better containerization technologies
    than we had previously.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更容易地将正在运行的进程相互隔离。这不仅能提高安全性，还能使我们拥有比以前更好的容器化技术。
- en: Run servers that are densely packed with virtual machines and containers due
    to better resource management and process isolation.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于更好的资源管理和进程隔离，运行密集堆叠了虚拟机和容器的服务器。
- en: Enhance performance by ensuring that processes always run on the same CPU core
    or set of CPU cores, instead of allowing the Linux kernel to move them around
    to different cores.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过确保进程始终在同一CPU核心或一组CPU核心上运行，从而提高性能，而不是让Linux内核将它们移动到不同的核心。
- en: Whitelist or blacklist hardware devices.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 白名单或黑名单硬件设备。
- en: Set up network traffic shaping.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置网络流量整形。
- en: Now that we've seen the purpose of cgroups, my own purpose now is to show you
    the structure of cgroups.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了cgroups的目的，我的目标是向你展示cgroups的结构。
- en: Understanding the structure of cgroups Version 1
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解cgroups版本1的结构。
- en: 'To understand the structure of cgroups, you''ll need to understand some of
    the cgroups terminology. Let''s start with just a few terms that you need to know:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解cgroups的结构，你需要了解一些cgroups的术语。我们从几个你需要知道的术语开始：
- en: '**cgroups**: The term *cgroup* has two different meanings. What concerns us
    most is that a cgroup is a collection of processes. The processes within each
    cgroup are bound to limits and parameters that are defined within the *cgroup
    filesystem*. (We''ll talk more about the cgroup filesystem in a bit.) The term
    *cgroup* can also refer to the Linux kernel code that implements cgroups technology.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cgroups**：*cgroup*一词有两种不同的含义。我们最关心的是，cgroup是一个进程集合。每个cgroup中的进程都受限于在*cgroup文件系统*中定义的限制和参数。（稍后我们会更详细地讨论cgroup文件系统。）*cgroup*这个词还可以指代实现cgroups技术的Linux内核代码。'
- en: '`httpd.service` or `apache2.service`. (Okay, you already knew this, but I told
    you again anyway.)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`httpd.service` 或 `apache2.service`。（好吧，你已经知道这一点了，但我还是再告诉你一次。）'
- en: '**scopes**: A scope is a group of processes that are started by some external
    means. Virtual machines, containers, and user sessions are examples of scopes.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**scopes**：scope是由某些外部方式启动的进程组。虚拟机、容器和用户会话都是scope的例子。'
- en: '`-.slice`: This is the *root* slice, which is the root of the whole slice hierarchy.
    Normally, it won''t directly contain any other units. However, you can use it
    to create default settings for the entire slice tree.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-.slice`：这是*根* slice，它是整个slice层次结构的根。通常，它不会直接包含其他单元。不过，你可以用它来为整个slice树创建默认设置。'
- en: '`system.slice`: By default, system services that have been started by systemd
    would go here.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`system.slice`：默认情况下，由systemd启动的系统服务会在这里运行。'
- en: '`user.slice`: By default, user-mode services would go here. An implicit slice
    is assigned to each logged-in user.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user.slice`：默认情况下，用户模式服务会在这里运行。每个登录用户会自动分配一个隐式的slice。'
- en: '`machine-slice`: If you''re running containers or virtual machines, their services
    will show up here.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`machine-slice`：如果你运行的是容器或虚拟机，它们的服务会出现在这里。'
- en: In addition, the system administrator can define custom slices, and assign scopes
    and services to them.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，系统管理员可以定义自定义slice，并将范围和服务分配到它们。
- en: 'To see a more graphical representation of all this, use the `systemd-cgls`
    command as a normal user. Just for fun, let''s look at the Alma 8 virtual machine
    that we used to create the WordPress containers back in [*Chapter 5*](B17491_05_Final_NM_ePub.xhtml#_idTextAnchor063),
    *Creating and Editing Services*. The output of `systemd-cgls` should look something
    like this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更直观地展示这一切，可以使用`systemd-cgls`命令作为普通用户。为了好玩，我们来看一下我们用来创建WordPress容器的Alma 8虚拟机，出自[*第5章*](B17491_05_Final_NM_ePub.xhtml#_idTextAnchor063)，*创建和编辑服务*。`systemd-cgls`的输出应该像这样：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: I don't have a desktop environment installed on this virtual machine, so we
    can't see any of the Gnome stuff that you would see on a machine that does have
    a desktop. However, we do see the user-mode WordPress container service that we
    created in [*Chapter 5*](B17491_05_Final_NM_ePub.xhtml#_idTextAnchor063), *Creating
    and Editing Services*. (If you have Gnome on your virtual machine, that's fine.
    It just means that you'll have to scroll down a bit more to see your WordPress
    container service.)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这台虚拟机上没有安装桌面环境，所以我们看不到在安装了桌面环境的机器上会看到的Gnome界面。不过，我们可以看到我们在[*第5章*](B17491_05_Final_NM_ePub.xhtml#_idTextAnchor063)中创建的用户模式WordPress容器服务，*创建和编辑服务*。（如果你的虚拟机上安装了Gnome，那也没关系。那只是意味着你需要稍微滚动一下才能看到你的WordPress容器服务。）
- en: The `systemd-cgls` tool shows us a hierarchical listing of the cgroups that
    are running on the system. The first one listed is the `/` cgroup, which is how
    the root cgroup is designated. The second line begins the listing for the root
    slice ( `-.slice` ), and directly under it is `user.slice`. Next, we can see `user-1000.slice`,
    which is a child of `user.slice`. In this case, I'm the only user who's logged
    into the system, so this slice belongs to me. The `user-1000.slice` designation
    corresponds to my User ID number, which is `1000`. Following that, we can see
    the services that are running in my slice, which we'll get to in just a bit.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`systemd-cgls` 工具展示了系统上运行的 cgroups 的层次结构。列出的第一项是 `/` cgroup，这是根 cgroup 的标识。第二行开始列出根
    slice（`-.slice`），直接下面是 `user.slice`。接下来，我们可以看到 `user-1000.slice`，这是 `user.slice`
    的子级。在这种情况下，我是唯一登录到系统的用户，所以这个 slice 属于我。`user-1000.slice` 的名称对应于我的用户ID号，`1000`。之后，我们可以看到在我的
    slice 中运行的服务，稍后我们会详细讲解。'
- en: Note
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you want to see user slices, you'll need to run the `systemd-cgls` command
    from *outside* of the cgroup filesystem. If you `cd` into the `/sys/fs/cgroup/`
    directory, you won't see the user slices. The further down you go into the cgroup
    filesystem, the less you'll see with `systemd-cgls`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看用户 slices，你需要从 cgroup 文件系统 *外部* 运行 `systemd-cgls` 命令。如果你进入 `/sys/fs/cgroup/`
    目录，你将看不到用户 slices。越深入 cgroup 文件系统，你通过 `systemd-cgls` 能看到的内容就越少。
- en: 'The `user.slice` is defined by the `/lib/systemd/system/user.slice` unit file,
    which looks like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`user.slice` 是由 `/lib/systemd/system/user.slice` 单元文件定义的，该文件内容如下：'
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here, we can see that this slice has to finish starting before the `slices.target`
    can start. The `slices.target` file looks like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到，这个 slice 必须先完成启动，才能启动 `slices.target`。`slices.target` 文件内容如下所示：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: According to the `systemd.special` man page, `slices.target` is responsible
    for setting up the slices that are to run when you boot up your machine. By default,
    it starts up `system.slice` and the root slice ( `-.slice` ), as we see here in
    the `Wants=` line, and the `After=` line. We can also add more slices to that
    list, as we've just seen in the `user.slice` file. We'll look at `-.slice` and
    `system.slice` in a moment. For now, let's get back to `user.slice`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 `systemd.special` 手册页面，`slices.target` 负责在启动机器时设置将要运行的 slices。默认情况下，它会启动
    `system.slice` 和根 slice（`-.slice`），正如我们在 `Wants=` 行和 `After=` 行中看到的那样。我们还可以将更多的
    slices 添加到该列表中，正如我们刚刚在 `user.slice` 文件中看到的。稍后我们将查看 `-.slice` 和 `system.slice`。现在，让我们回到
    `user.slice`。
- en: 'In my `user-1000.slice`, the first listed service is `user@1000.service`. This
    service is responsible for all the other services that run within my slice. It''s
    set up by the `user@.service` template. The `[Unit]` section of the `user@.service`
    file looks like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的 `user-1000.slice` 中，列出的第一个服务是 `user@1000.service`。这个服务负责管理所有在我的 slice 中运行的其他服务。它是通过
    `user@.service` 模板设置的。`user@.service` 文件的 `[Unit]` 部分如下所示：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When this service runs, the `%i` variable will be replaced with a User ID number.
    The `[Service]` section of the file looks like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当该服务运行时，`%i` 变量将被替换为用户ID号码。文件中的 `[Service]` 部分如下所示：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here''s the breakdown:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是详细信息：
- en: '`ExecStart=`: This line causes systemd to start a new systemd session for each
    user who logs in.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExecStart=`：这一行使 systemd 为每个登录的用户启动一个新的 systemd 会话。'
- en: '`Slice=`: This line creates a separate slice for each user.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Slice=`：这一行为每个用户创建一个独立的 slice。'
- en: '`TasksMax=`: This line is set to infinity, which means that there''s no limit
    to the number of processes that a user can run.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TasksMax=`：这一行设置为无限制，意味着用户可以运行的进程数量没有上限。'
- en: '`Delegate=`: We''ll discuss this directive in [*Chapter 12*](B17491_12_Final_NM_ePub.xhtml#_idTextAnchor164),
    *Controlling Resource Usage with cgroups Version 1*.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Delegate=`：我们将在 [*第12章*](B17491_12_Final_NM_ePub.xhtml#_idTextAnchor164) 中讨论这一指令，*使用
    cgroups 版本 1 控制资源使用*。'
- en: 'The next thing we see in the output of `systemd-cgls` is that all of the services
    that are running in my user slice are children of the `user@1000.service`. When
    I scroll down, I''ll eventually get past the list of services, and will see the
    *scope* for my login session. In this case, my login session at the local terminal
    is designated as `session-2.scope`, and my remote login session is designated
    as `session-3.scope`. Here''s what this looks like:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `systemd-cgls` 输出的下一个内容中，我们看到在我的用户 slice 中运行的所有服务都是 `user@1000.service` 的子级。当我向下滚动时，最终会跳过服务列表，看到我的登录会话的
    *scope*。在这种情况下，我在本地终端的登录会话被标识为 `session-2.scope`，而远程登录会话则被标识为 `session-3.scope`。其内容如下所示：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: According to the `systemd.scope` man page, scopes can't be created by creating
    unit files. Instead, they're created programmatically at runtime. So, don't expect
    to see any `.scope` files in the `/lib/systemd/system/` directory.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 `systemd.scope` 手册页，作用域不能通过创建单元文件来创建。相反，它们是在运行时通过编程创建的。所以，不要指望在 `/lib/systemd/system/`
    目录中看到任何 `.scope` 文件。
- en: 'Further down in the `systemd-cgls` output, we finally get past my user slice.
    The next thing we can see after my user slice is the `init.scope` and the `system.slice`,
    as we see here:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `systemd-cgls` 输出的进一步部分，我们终于跨越了我的用户切片。接下来，我们可以看到我的用户切片后面是 `init.scope` 和 `system.slice`，如我们所见：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, we can see system services that have nothing to do with my user session.
    One service that we see here is the WordPress container service that's running
    in system mode.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到与我的用户会话无关的系统服务。我们在这里看到的一个服务是以系统模式运行的 WordPress 容器服务。
- en: 'The fact that I have a system-mode container service running means that there''s
    something in `machine.slice`, as we see here:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个系统模式的容器服务在运行，这意味着在 `machine.slice` 中有一些内容，如我们所见：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `libpod` branch of this `machine.slice` tree represents our `podman-docker`
    container. (Note that the user-mode container service only shows up directly under
    the user slice, and doesn't show up here under the machine slice.)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`libpod` 分支代表了我们的 `podman-docker` 容器。（注意，用户模式的容器服务只会直接出现在用户切片下，而不会出现在这里的 machine
    切片下。）'
- en: 'Okay, let''s shift back to an Alma machine that''s running with the Gnome desktop.
    As we see here, there''s a lot more going on with the output of `systemd-cgls`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们切换回运行 Gnome 桌面的 Alma 机器。如我们所见，`systemd-cgls` 的输出显示了更多的内容：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: On any desktop machine, you'll always have a lot more running services than
    you'd have on a strictly text-mode machine.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何桌面机器上，你总是会有比严格文本模式机器更多的正在运行的服务。
- en: 'Next, create a new user account for Frank. Then, have Frank log in to this
    machine via a remote SSH session. The top part of the output of `systemd-cgls`
    now looks like this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为 Frank 创建一个新的用户账户。然后，让 Frank 通过远程 SSH 会话登录到这台机器。现在 `systemd-cgls` 的输出的顶部部分如下所示：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Frank now has his own user slice, which is `user-1001.slice`. We see that he's
    logged in remotely, as well as the name of the virtual terminal that he used to
    log in. (In case you're wondering, *Frank* is the name of my formerly feral Flame
    Point Siamese kitty, who has been with me for many years. Until just a moment
    ago, he was sleeping on the computer table where my keyboard should be, which
    was making it quite awkward for me to type.)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Frank 有了自己的用户切片，即 `user-1001.slice`。我们看到他已经远程登录，以及他用来登录的虚拟终端的名称。（如果你在想，*Frank*
    是我曾经野生的 Flame Point 暹罗猫，他已经和我在一起很多年了。直到刚才，他还躺在我键盘应该放置的位置上睡觉，这让我打字时相当不方便。）
- en: 'If you don''t want to see the entire cgroups tree, you can use `systemctl status`
    to see just one part of it. For example, to just see the `user.slice`, I''d do
    `systemctl status user.slice`. The output would look something like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想查看整个 cgroups 树，你可以使用 `systemctl status` 来查看它的一部分。例如，要仅查看 `user.slice`，我会执行
    `systemctl status user.slice`。输出将如下所示：
- en: '![](img/Figure_11.1_B17491.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_11.1_B17491.jpg)'
- en: Figure 11.1 – user.slice on Alma Linux with the Gnome desktop
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – 在 Gnome 桌面的 Alma Linux 上的 user.slice
- en: 'Here, we see that Frank has logged out and that I''m now the only user who
    is logged in. (After all, Frank is a cat, which means that he spends most of his
    time sleeping.) We can also view information about the other slices, as well as
    about scopes. For example, doing `systemctl status session-3.scope` shows me information
    about the session scope that''s running under my user slice, which would look
    like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到 Frank 已经注销，而我现在是唯一登录的用户。（毕竟，Frank 是只猫，这意味着他大部分时间都在睡觉。）我们还可以查看其他切片的信息，以及作用域的信息。例如，执行
    `systemctl status session-3.scope` 会显示我在用户切片下运行的会话作用域信息，看起来像这样：
- en: '![](img/Figure_11.2_B17491.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_11.2_B17491.jpg)'
- en: Figure 11.2 – Session scope on Alma Linux
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2 – Alma Linux 上的会话范围
- en: All right, that pretty much covers it for the basic structure of cgroups. Now,
    let's move on and look at the cgroup filesystem.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这基本涵盖了 cgroups 的基本结构。现在，让我们继续深入看看 cgroup 文件系统。
- en: Understanding the cgroup filesystem
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 cgroup 文件系统
- en: 'On any system that runs cgroups, you''ll see a `cgroup` directory under the
    `/sys/fs/` virtual filesystem, as shown here:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何运行 cgroups 的系统上，你都会在 `/sys/fs/` 虚拟文件系统下看到一个 `cgroup` 目录，如下所示：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As with all virtual filesystems, the cgroup filesystem only exists in memory
    at runtime and disappears when you shut down the machine. There's no permanent
    copy of it on the machine's drive.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有虚拟文件系统一样，cgroup 文件系统仅在运行时存在于内存中，并在关机时消失。它没有在机器的硬盘上有永久副本。
- en: 'When you look inside the `/sys/fs/cgroup/` directory, you''ll see something
    like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当你查看 `/sys/fs/cgroup/` 目录时，你会看到类似这样的内容：
- en: '![](img/Figure_11.3_B17491.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_11.3_B17491.jpg)'
- en: Figure 11.3 – cgroupfs on Alma Linux
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3 – Alma Linux 上的 cgroupfs
- en: 'Each of these directories represents a cgroup *susbsystem*. (You''ll also see
    them referred to as either *controllers* or *resource controllers*.) Inside each
    of these directories is a set of files that represent the cgroup''s *tunables*.
    These files hold information about any resource control or tuning parameters that
    you would set. (We''ll talk more about that in [*Chapter 12*](B17491_12_Final_NM_ePub.xhtml#_idTextAnchor164),
    *Controlling Resource Usage with cgroups Version 1*.) For example, here''s what
    we have in the `blkio` directory:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这些目录中的每一个都表示一个 cgroup *子系统*。（你也会看到它们被称为 *控制器* 或 *资源控制器*。）在这些目录中，每个都有一组文件，表示
    cgroup 的 *可调参数*。这些文件包含有关你将设置的任何资源控制或调优参数的信息。（我们将在 [*第 12 章*](B17491_12_Final_NM_ePub.xhtml#_idTextAnchor164)中详细讨论，“使用
    cgroups 版本 1 控制资源使用”。）例如，下面是 `blkio` 目录中的内容：
- en: '![](img/Figure_11.4_B17491.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_11.4_B17491.jpg)'
- en: Figure 11.4 – The blkio filesystem
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – blkio 文件系统
- en: Each of these files represents a parameter that can be custom-tuned for the
    best performance. Toward the bottom, we also see directories for `init.scope`,
    `machine.slice`, `system.slice`, and `user.slice`. Each also has its own set of
    tunable parameters.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件中的每一个都表示一个可以自定义调优的参数，以获得最佳性能。往下看，我们还会看到 `init.scope`、`machine.slice`、`system.slice`
    和 `user.slice` 目录。每个目录都有一组可调参数。
- en: 'When we use the `mount` command and pipe it through `grep`, we''ll see that
    each of these resource controllers is mounted on its own virtual partition. Here''s
    what that looks like:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用 `mount` 命令并通过 `grep` 管道过滤时，我们会看到每个资源控制器都挂载在其独立的虚拟分区上。它们的样子是这样的：
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Okay, I think that that should do it for our basic introduction to cgroups Version
    1\. So, let's wrap up this chapter and move on!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我想这应该足以完成我们对 cgroups 版本 1 的基本介绍了。所以，让我们结束这一章并继续前进！
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the history of the cgroups technology, what cgroups
    are, and why we need them. We then looked at the structure of cgroups and the
    cgroup filesystem.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们回顾了 cgroups 技术的历史、cgroups 是什么，以及我们为什么需要它们。接着，我们看了 cgroups 的结构以及 cgroup
    文件系统。
- en: A major challenge that comes with learning about cgroup technology is that there
    isn't much available documentation about it. I mean, you'll see a lot of blog
    posts and YouTube videos about it, but much of it either isn't very comprehensive
    or is woefully out of date. Hopefully, I've been able to give you a better understanding
    of cgroup technology and how it works together with systemd.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 学习 cgroup 技术的一个主要挑战是，它没有很多可用的文档。我的意思是，你会看到很多博客文章和 YouTube 视频，但其中许多要么不够全面，要么已经过时。希望我能让你对
    cgroup 技术以及它如何与 systemd 协同工作有更好的理解。
- en: In the next chapter, we'll look at controlling resource usage with cgroups Version
    1\. I'll see you there.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何使用 cgroups 版本 1 控制资源使用情况。我会在那儿见。
- en: Questions
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the default location of the cgroup filesystem?
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: cgroup 文件系统的默认位置是什么？
- en: a. `/proc/fs/cgroup/`
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. `/proc/fs/cgroup/`
- en: b. `/sys/cgroup/`
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. `/sys/cgroup/`
- en: c. `/sys/fs/cgroup/`
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. `/sys/fs/cgroup/`
- en: d. `/proc/cgroup/`
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. `/proc/cgroup/`
- en: What must you do to see user slices with `systemd-cgls`?
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你必须做什么才能使用 `systemd-cgls` 查看用户 slice？
- en: a. Run the command only from the local terminal.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 仅从本地终端运行该命令。
- en: b. Run the command only from outside the cgroup filesystem.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. 仅在 cgroup 文件系统外部运行该命令。
- en: c. Run the command with root privileges.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. 使用 root 权限运行该命令。
- en: d. You can't. User slices never show up.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. 你不能这么做。用户 slice 永远不会显示出来。
- en: How can you create your own cgroup scope?
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何创建你自己的 cgroup scope？
- en: a. Use `systemctl edit --full --force`, just as you would with other systemd
    units.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 使用 `systemctl edit --full --force`，就像你操作其他 systemd 单元一样。
- en: b. Manually create a unit file in the `/etc/systemd/system/` directory.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. 手动在 `/etc/systemd/system/` 目录中创建单元文件。
- en: c. You can't. Scopes are created programmatically, and there are no `.scope`
    unit files.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. 你不能这么做。Scopes 是程序化创建的，并且没有 `.scope` 单元文件。
- en: d. Manually create a unit file in the `/lib/systemd/system/` directory.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. 手动在 `/lib/systemd/system/` 目录中创建单元文件。
- en: What does a slice do?
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: slice 的作用是什么？
- en: a. It directly manages user mode processes.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 它直接管理用户模式进程。
- en: b. It directly manages system mode processes.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. 它直接管理系统模式进程。
- en: c. It manages processes that are in either scopes or services.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. 它管理处于作用域或服务中的进程。
- en: d. It manages user login sessions.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. 它管理用户登录会话。
- en: Answers
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: c
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: c
- en: b
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: b
- en: c
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: c
- en: c
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: c
- en: Further reading
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Take a look at the following links for more information about cgroups:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下链接，了解有关 cgroups 的更多信息：
- en: 'A Linux sysadmin''s introduction to cgroups:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 系统管理员的 cgroups 入门：
- en: '[https://www.redhat.com/sysadmin/cgroups-part-one](https://www.redhat.com/sysadmin/cgroups-part-one)'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.redhat.com/sysadmin/cgroups-part-one](https://www.redhat.com/sysadmin/cgroups-part-one)'
- en: 'cgroups documentation at kernel.org:'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 kernel.org 上的 cgroups 文档：
- en: '[https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt](https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt)'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt](https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt)'
