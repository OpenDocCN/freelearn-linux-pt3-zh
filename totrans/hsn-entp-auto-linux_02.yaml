- en: Building a Standard Operating Environment on Linux
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Linux上构建标准操作环境
- en: This chapter provides a detailed exploration of the **Standard Operating Environment**
    (henceforth, **SOE** for short) concept in Linux. Although we will go into much
    greater detail later, in short, an SOE is an environment where everything is created
    and modified in a standard way. For example, this would mean that all Linux servers
    are built in the same way, using the same software versions. This is an important
    concept because it makes managing the environment much easier and reduces the
    workload for those looking after it. Although this chapter is quite theoretical
    in nature, it sets the groundwork for the rest of this book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章详细探讨了Linux中的**标准操作环境**（以下简称**SOE**）概念。虽然我们稍后会详细讨论，但简而言之，SOE是指所有事物都以标准化的方式进行创建和修改的环境。例如，这意味着所有Linux服务器都以相同的方式构建，使用相同的软件版本。这个概念很重要，因为它使得管理环境变得更容易，并减少了管理人员的工作量。尽管本章的内容较为理论，但它为本书的其余部分奠定了基础。
- en: We will start by looking at the fundamental definition of such an environment,
    and then proceed to explore why it is desirable to want to create one. From there,
    we will look at some of the pitfalls of an SOE to give you a good perspective
    on how to maintain the right balance in such an environment, before finally discussing
    how an SOE should be integrated into day-to-day maintenance processes. The effective
    application of this concept enables efficient and effective management of Linux
    environments at very large scales.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从探讨这种环境的基本定义开始，然后继续研究为什么希望创建这种环境是有利的。从这里出发，我们将探讨一些SOE的陷阱，为你提供如何在这种环境中保持正确平衡的视角，最后讨论如何将SOE融入到日常维护流程中。有效应用这一概念，可以在非常大的规模下高效且有效地管理Linux环境。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding the challenges of Linux environment scaling
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Linux环境扩展的挑战
- en: What is an SOE?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是SOE？
- en: Exploring SOE benefits
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索SOE的好处
- en: Knowing when to deviate from standards
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 知道何时偏离标准
- en: Ongoing maintenance of SOEs
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SOE的持续维护
- en: Understanding the challenges of Linux environment scaling
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Linux环境扩展的挑战
- en: Before we delve into the definition of an SOE, let's explore the challenges
    of scaling a Linux environment without standards. An exploration of this will
    help us to understand the definition itself, as well as how to define the right
    standards for a given scenario.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨SOE的定义之前，让我们先来探索没有标准的Linux环境扩展所面临的挑战。对这一问题的探讨将帮助我们理解SOE的定义，同时也帮助我们为特定场景定义适当的标准。
- en: Challenges of non-standard environments
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非标准环境的挑战
- en: It is important to consider that many challenges experienced by enterprises
    with technology estates (whether Linux or otherwise) do not start out as such.
    In the early stages of growth, in fact, many systems and processes are entirely
    sustainable, and in the next section, we will look at this early stage of environment
    growth as a precursor to understanding the challenges associated with large-scale
    growth.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 需要考虑的是，许多企业在拥有技术资源（无论是Linux还是其他）的过程中所遇到的挑战，并非一开始就显现出来。事实上，在增长的早期阶段，许多系统和流程完全是可持续的，在下一部分中，我们将探讨环境增长的这一早期阶段，以便为理解大规模增长相关的挑战做铺垫。
- en: Early growth of a non-standard environment
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非标准环境的早期增长
- en: In a surprisingly large number of companies, Linux environments begin life without
    any form of standardization. Often, they grow organically over time. Deployments
    start out small, perhaps just covering a handful of core functions, and as time
    passes and requirements grow, so does the environment. Skilled system administrators
    often make changes by hand on a per-server basis, deploying new services and growing
    the server estate as business demands dictate.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多公司中，Linux环境的初始阶段往往没有任何标准化形式。通常，它们随着时间的推移而自然增长。最初的部署可能很小，可能仅覆盖一些核心功能，随着时间的推移和需求的增长，环境也随之扩展。熟练的系统管理员通常根据每台服务器手动进行更改，部署新服务，并根据业务需求扩展服务器规模。
- en: This organic growth is the path of least resistance for most companies—project
    deadlines are often tight and in addition both budget and resource are scarce.
    Hence, when a skilled Linux resource is available, that resource can assist in
    just about all of the tasks required, from simple maintenance tasks to commissioning
    complex application stacks. It saves a great deal of time and money spent on architecture
    and makes good use of the skillset of staff on hand as they can be used to address
    immediate issues and deployments, rather than spending time on architectural design.
    Hence, quite simply, it makes sense, and the author has experienced this at several
    companies, even high-profile multi-national ones.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这种有机增长是大多数公司选择的最小阻力路径——项目的截止日期通常很紧，而且预算和资源也很紧张。因此，当有一位熟练的 Linux 人员时，这位人员几乎可以协助完成所有需要的任务，从简单的维护任务到复杂应用栈的调试与部署。这节省了大量在架构设计上花费的时间和金钱，并且能够充分利用现有员工的技能，因为他们可以用来处理紧急问题和部署，而不是在架构设计上浪费时间。因此，简而言之，这是有道理的，作者在几家公司，甚至一些知名的跨国公司中都经历过这种情况。
- en: Impacts of non-standard environments
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非标准环境的影响
- en: Let's take a deeper look at this from a technical standpoint. There are numerous
    flavors of Linux, numerous applications that perform (at a high level) the same
    function, and numerous ways to solve a given problem. For example, if you want
    to script a task, do you write it in a shell script, Perl, Python, or Ruby? For
    some tasks, all can achieve the desired end result. Different people have different
    preferred ways of approaching problems and different preferred technology solutions,
    and often it is found that a Linux environment has been built using a technology
    that was *the flavor of the month* when it was created or that was a favorite
    of the person responsible for it. There is nothing wrong with this in and of itself,
    and initially, it does not cause any problems.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术角度更深入地看这个问题。Linux 有多种版本，也有多种应用程序执行（在高层次上）相同的功能，并且有多种方式解决给定的问题。例如，如果你想写一个任务脚本，你是写一个
    shell 脚本、Perl、Python 还是 Ruby？对于某些任务，所有这些方式都能实现预期的最终结果。不同的人在解决问题时有不同的偏好方式和技术解决方案，通常会发现一个
    Linux 环境是使用一种当时“月度风味”的技术或负责此环境的人最喜欢的技术构建的。就其本身而言，这没有什么问题，最初也不会引发任何问题。
- en: 'If organic growth brings with it one fundamental problem, it is this: scale.
    Making changes by hand and always using the latest and greatest technology is
    great when the environment size is relatively small, and often provides an interesting
    challenge, hence keeping technical staff feeling motivated and valued. It is vital
    for those working in technology to keep their skills up to date, so it is often
    a motivating factor to be able to employ up-to-date technologies as part of the
    day job.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有机增长带来一个根本性的问题，那就是：规模。当环境的规模相对较小时，手动进行更改并始终使用最新、最先进的技术是非常不错的，通常也会带来有趣的挑战，因此能够保持技术人员的积极性和价值感。对从事技术工作的人来说，保持技能的更新至关重要，因此，能够在日常工作中运用最新技术，常常是一个激励因素。
- en: Scaling up non-standard environments
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展非标准环境
- en: When the number of servers enters the hundreds, never mind thousands (or even
    greater!), this whole *organic* process breaks down. What was once an interesting
    challenge becomes laborious and tedious, even stressful. The learning curve for
    new team members is steep. A new hire may find themselves with a disparate environment
    with lots of different technologies to learn, and possibly a long period of training
    before they can become truly effective. Long-serving team members can end up being
    silos of knowledge, and should they depart the business, their loss can cause
    continuity issues. Problems and outages become more numerous as the non-standard
    environment grows in an uncontrolled manner, and troubleshooting becomes a lengthy
    endeavor—hardly ideal when trying to achieve a 99.99% service uptime agreement,
    where every second of downtime matters! Hence, in the next section, we will look
    at how to address these challenges with an SOE.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器数量达到数百，甚至数千（或更多！）时，这个*有机*过程就会崩溃。曾经有趣的挑战变成了繁重且单调的任务，甚至带来压力。新团队成员的学习曲线陡峭。新员工可能会发现自己面对一个不同技术堆栈的环境，需要学习大量不同的技术，可能还需要一段时间的培训才能真正发挥作用。长期服务的团队成员可能成为知识孤岛，如果他们离开公司，知识的流失可能会导致连续性问题。随着非标准环境的无序扩展，问题和故障会变得更多，故障排除也会变得漫长——当你试图实现99.99%的服务正常运行时间协议时，每一秒的停机时间都至关重要，这显然不是理想的。因此，在下一节中，我们将探讨如何通过SOE来解决这些挑战。
- en: Addressing the challenges
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决挑战
- en: 'From this, we realize our requirement for standardization. Building a suitable
    SOE is all about the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从中我们意识到对标准化的需求。构建合适的SOE的关键在于以下几点：
- en: Realizing economies of scale
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现规模经济
- en: Being efficient in day-to-day operations
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在日常操作中高效工作
- en: Making it easy for all involved to get up to speed quickly and easily
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使所有参与者能够快速轻松地掌握并适应
- en: Being aligned with the growing needs of the business
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与企业不断增长的需求保持一致
- en: After all, if an environment is concise in its definition, then it is easier
    for everyone involved in it to understand and work with. This, in turn, means
    tasks are completed quicker and with greater ease. In short, standardization can
    bring cost savings and improved reliability.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 毕竟，如果一个环境在定义上简洁明了，那么所有参与其中的人都更容易理解和使用它。反过来，这意味着任务能更快完成，且更加轻松。简而言之，标准化可以带来成本节约并提高可靠性。
- en: It must be stressed that this is a concept and not an absolute. There is no
    right or wrong way to build such an environment, though there are best practices.
    Throughout this chapter, we will explore the concept further and help you to identify
    core best practices associated with SOEs so that you can make informed decisions
    when defining your own.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 必须强调，这只是一个概念，而非绝对的标准。虽然构建这种环境没有绝对对错之分，但有一些最佳实践。在本章中，我们将进一步探讨这一概念，并帮助你识别与SOE相关的核心最佳实践，以便在定义自己的环境时做出明智的决策。
- en: 'Let''s proceed to explore this in more detail. Every enterprise has certain
    demands of their IT environments, whether they are based on Linux, Windows, FreeBSD,
    or any other technology. Sometimes, these are well understood and documented,
    and sometimes, they are simply implicit—that is to say, everyone assumes the environment
    meets these *standards*, but there is no official definition. These requirements
    often include the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续深入探讨这个问题。每个企业对其IT环境都有一定的需求，无论是基于Linux、Windows、FreeBSD还是其他技术。有时，这些需求是清晰且有文档支持的，而有时它们只是隐性的——也就是说，大家假设环境已经符合这些*标准*，但没有正式定义。这些需求通常包括以下几个方面：
- en: Security
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性
- en: Reliability
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可靠性
- en: Scalability
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展性
- en: Longevity
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长期性
- en: Supportability
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持性
- en: Ease of use
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易用性
- en: These, of course, are all high-level requirements, and very often, they intersect
    with each other. Let's explore these in more detail.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这些当然都是高层次的要求，且它们往往彼此交织。让我们更详细地探讨这些要求。
- en: Security
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全性
- en: 'Security in an environment is established by several factors. Let''s look at
    some questions to understand the factors involved:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性由多个因素共同决定。让我们通过一些问题来了解其中涉及的因素：
- en: Is the configuration secure?
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置是否安全？
- en: Have we allowed the use of weak passwords?
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们是否允许使用弱密码？
- en: Is the superuser, root, allowed to log in remotely?
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超级用户 root 是否允许远程登录？
- en: Are we logging and auditing all connections?
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们是否记录并审计所有连接？
- en: Now, in a non-standard environment, how can you truly say that these requirements
    are all enforced across all of your Linux servers? To do so requires a great deal
    of faith they have all been built the same way, that they had the same security
    parameters applied, and that no-one has ever revisited the environment to change
    anything. In short, it requires fairly frequent auditing to ensure compliance.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在非标准环境下，你如何真正说这些要求在所有的 Linux 服务器上都得到了强制执行？要做到这一点，需要相当大的信任，假设所有服务器的构建方式相同，应用了相同的安全参数，并且没有人曾经重新审视该环境进行更改。简而言之，这需要相当频繁的审计以确保合规性。
- en: However, where the environment has been standardized, and all servers have been
    built from a common source or using a common automation tool (we shall demonstrate
    this later in this book), it is much easier to say with confidence that your Linux
    estate is secure.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当环境已标准化，并且所有服务器都从相同的源构建或使用相同的自动化工具（我们将在本书后续内容中展示这一点）时，就更容易有信心地说你的 Linux 系统是安全的。
- en: A standards-based environment isn't implicitly secure, of course—if there is
    an issue that results in a vulnerability in the build process for this environment,
    automation means this vulnerability will be replicated across the entire environment!
    It is important to be aware of the security requirements of your environment and
    to implement these with care, maintaining and auditing your environment continuously
    to ensure security levels are maintained.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 基于标准的环境当然并不意味着自动安全——如果存在导致构建过程中出现漏洞的问题，自动化意味着这种漏洞将会在整个环境中被复制！因此，了解你环境的安全要求，并小心实施这些要求，持续维护和审计环境，以确保安全水平得到保持，是非常重要的。
- en: Security is also enforced by patches, which ensure you are not running any software
    with vulnerabilities that could allow an attacker to compromise your servers.
    Some Linux distributions have longer lives than others. For example, Red Hat Enterprise
    Linux (and derivatives such as CentOS) and the Ubuntu LTS releases all have long,
    predictable life cycles and make good candidates for your Linux estate.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性还通过补丁得到强制执行，补丁确保你不会运行任何有漏洞的软件，这些漏洞可能允许攻击者侵入你的服务器。一些 Linux 发行版的生命周期比其他的要长。例如，Red
    Hat Enterprise Linux（以及 CentOS 等衍生版）和 Ubuntu LTS 版本都具有较长、可预测的生命周期，是你的 Linux 系统的不错选择。
- en: As such, they should be part of your standards. By contrast, if a *bleeding
    edge* Linux distribution such as Fedora has been used because, perhaps, it had
    the latest packages required at the time, you can be sure that the life cycle
    will be short, and that updates would cease in the not too distant future, hence
    leaving you open to potential unpatched vulnerabilities and the need to upgrade
    to a newer release of Fedora.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，它们应该成为你标准的一部分。相反，如果使用了如 Fedora 这样的*前沿* Linux 发行版，可能是因为它当时提供了所需的最新软件包，你可以确信它的生命周期会很短，并且不久后更新会停止，这样就会使你暴露于潜在的未修补漏洞中，并且需要升级到
    Fedora 的新版本。
- en: Even if the upgrade to a newer version of Fedora is performed, sometimes packages
    get *orphaned—*that is to say, they do not get included in the newer release.
    This might be because they have been superseded by a different package. Whatever
    the cause, upgrading one distribution to another could cause a false sense of
    security and should be avoided unless thoroughly researched. In this way, standardization
    helps to ensure good security practices.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 即使升级到 Fedora 的新版本，有时也会出现软件包被*遗弃*的情况——也就是说，这些包没有包含在新的发行版本中。这可能是因为它们被其他包取代了。无论原因如何，升级一个发行版到另一个可能会导致虚假的安全感，除非经过彻底研究，否则应避免这种做法。通过这种方式，标准化有助于确保良好的安全实践。
- en: Reliability
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可靠性
- en: Many enterprises expect their IT operations to be up and running 99.99% of the
    time (or better). Part of the route to achieving this is robust software, application
    of relevant bug fixes, and well-defined troubleshooting procedures. This ensures
    that in the worst case scenario of an outage, the downtime is as minimal as possible.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 许多企业希望其 IT 运维能够保持 99.99%（或更高）的正常运行时间。实现这一目标的一部分途径是使用稳健的软件，应用相关的 bug 修复以及明确定义的故障排除流程。这确保了在最坏的情况下发生停机时，停机时间最小化。
- en: Standardization again helps here*—*as we discussed in the preceding section
    on security, a good choice of underlying operating system ensures that you have
    ongoing access to bug fixes and updates, and if you know that your business needs
    a vendor backup to ensure business continuity, then the selection of a Linux operating
    system with a support contract (available with Red Hat or Canonical, for example)
    makes sense.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 标准化在这里同样起到帮助作用*——*正如我们在上一节关于安全的讨论中所提到的，一个合适的操作系统选择能够确保你持续获得漏洞修复和更新，而且如果你知道企业需要供应商备份来确保业务连续性，那么选择一个有支持合同的Linux操作系统（例如Red
    Hat或Canonical提供的）是明智的选择。
- en: Equally, when servers are all built to a well-defined and understood standard,
    making changes to them should yield predictable results as everyone knows what
    they are working with. If all servers are built slightly differently, then a well-meaning
    change or update could have unintended consequences and result in costly downtime.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，当所有服务器都按照一个明确定义且被充分理解的标准构建时，对其进行修改应该能产生可预测的结果，因为每个人都知道自己在处理什么。如果所有的服务器构建方式略有不同，那么即便是出于好意的修改或更新，也可能会产生意想不到的后果，从而导致昂贵的停机时间。
- en: Again with standardization, even if the worst-case scenario occurs, everyone
    involved should know how to approach the problem because they will know that all
    servers have been built on a certain base image and have a certain configuration.
    This knowledge and confidence reduce troubleshooting times and ultimately downtime.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调标准化，即使发生最坏的情况，所有参与者应该知道如何解决问题，因为他们知道所有的服务器都基于某个基础镜像并拥有相同的配置。这种知识和信心能减少故障排除的时间，最终也能减少停机时间。
- en: Scalability
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可扩展性
- en: All enterprises desire their business to grow and most times, this means that
    IT environments need to scale up to deal with increased demand. In an environment
    where the servers are built in a non-standard manner, scaling up an environment
    becomes more of a challenge.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 所有企业都希望自己的业务增长，而大多数时候，这意味着IT环境需要扩展以应对不断增加的需求。在一个服务器构建方式非标准化的环境中，扩展环境就成了一个更大的挑战。
- en: For example, if scaling horizontally (adding more identical servers to an existing
    service), the new servers should all have the same configuration as the existing
    ones. Without standards, the first step is to work out how the initial set of
    servers was built and then to clone this and make the necessary changes to produce
    more unique servers.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果进行横向扩展（向现有服务添加更多相同的服务器），新服务器应该与现有服务器具有相同的配置。如果没有标准化，第一步是弄清楚初始服务器集群是如何构建的，然后克隆这些服务器并进行必要的更改，创建更多独特的服务器。
- en: This process is somewhat cumbersome whereas, with a standardized environment,
    the investigative step is completely unnecessary, and horizontal scaling becomes
    a predictable, repeatable, *business-as-usual* task. It also ensures greater reliability
    as there should be no unintended results from the new servers in the case that
    a non-standard configuration item was missed. Human beings are incredible, intelligent
    beings capable of sending a man to the moon, and yet they are equally capable
    of overlooking a single line in a configuration file. The idea of standardization
    is to mitigate this risk, and hence make it quick and efficient to scale an environment
    either up or out using a well-thought-out operating system template, the concept
    of which we will explore as we proceed through this chapter.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程有些繁琐，而在标准化环境下，调查步骤完全不必要，水平扩展也变成了一个可预测、可重复的*日常任务*。它还确保了更高的可靠性，因为在新服务器中如果漏掉了非标准配置项，应该不会产生意外的结果。人类是令人难以置信的智能生物，能够把人类送上月球，但同样也能忽视配置文件中的一行。标准化的目的是减少这种风险，从而使得在使用经过深思熟虑的操作系统模板进行环境扩展时，无论是纵向扩展还是横向扩展，都变得既快速又高效，我们将在本章中进一步探讨这一概念。
- en: Longevity
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 长期可用性
- en: Sometimes when deploying a service, a particular software version is needed.
    Let's take the example of a web application that runs on PHP. Now, suppose that
    your particular enterprise has, for historical reasons, standardized on CentOS
    6 (or RHEL 6). This operating system only ships with PHP 5.3, meaning that if
    you suddenly take on an application that only supports PHP 7.0 and above, you
    need to figure out how to host this.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有时在部署某个服务时，需要特定的软件版本。比如，我们以一个运行在PHP上的Web应用为例。假设你的企业因为历史原因，标准化使用的是CentOS 6（或RHEL
    6）。该操作系统默认提供PHP 5.3版本，这意味着如果你突然需要运行一个仅支持PHP 7.0及以上版本的应用，你就得想办法如何托管它。
- en: One apparently obvious solution to this would be to roll out a Fedora virtual
    machine image. After all, it shares similar technologies to CentOS and RHEL and
    has much more up-to-date libraries included with it. The author has direct experience
    of this kind of solution in several roles! However, let's take a look at the bigger
    picture.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一个显而易见的解决方案可能是推出 Fedora 虚拟机镜像。毕竟，它与 CentOS 和 RHEL 共享类似的技术，并且包含了更新的库。作者在多个角色中都有直接使用这种解决方案的经验！不过，让我们从更大的视角来看待这个问题。
- en: RHEL (and CentOS, which is based upon this) has a lifespan of around 10 years,
    depending on the point at which you purchased it. In an enterprise, this is a
    valuable proposition*—*it means that you can guarantee that any servers you build
    will have patches and support for up to 10 years (and possibly longer with extended
    life cycle support) from the point at which you built them. This ties in nicely
    with our previous points around security, reliability, and supportability (in
    the following section).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: RHEL（以及基于此的 CentOS）的生命周期大约为 10 年，具体取决于你购买的时间点。在企业环境中，这是一个宝贵的选择*——*这意味着你可以确保任何构建的服务器在构建后的
    10 年内（以及可能更长时间的延长生命周期支持）都能获得补丁和支持。这与我们之前提到的安全性、可靠性和可支持性（在下文中）相契合。
- en: However, any servers that you build on Fedora will have a lifespan of somewhere
    in the region of 12-18 months (depending on the Fedora release cycle)*—*in an
    enterprise setting, having to redeploy a server after, say, 12-18 months is a
    headache that is not needed.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在 Fedora 上构建的任何服务器的生命周期大约是 12-18 个月（取决于 Fedora 发布周期）*——*在企业环境中，必须在例如 12-18
    个月后重新部署服务器，显然是一个不必要的麻烦。
- en: This is not to say there is never a case for deploying on Fedora or any other
    fast-moving Linux platform*—*it is simply to state that in an enterprise where
    security and reliability are vitally important, you are unlikely to want a Linux
    platform with a short life cycle as the short term gain (newer library support)
    would be replaced in 12-18 months with the pain of a lack of updates and the need
    to rebuild/upgrade the platform.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是说在 Fedora 或任何其他快速发展的 Linux 平台上部署没有必要*——*只是想说明，在安全性和可靠性至关重要的企业环境中，你不太可能想要一个生命周期短的
    Linux 平台，因为短期的收益（更新的库支持）将在 12-18 个月后被缺少更新和需要重新构建/升级平台的痛苦所取代。
- en: Of course, this does depend very much on your approach to your infrastructure*—*some
    enterprises take a very container-like approach to their servers and re-deploy
    them with every new software release or application deployment. When your infrastructure
    and build standards are defined by code (such as Ansible), then it is entirely
    possible to do this with a fairly minimal impact on your day-to-day operations,
    and it is unlikely that any single server would be around for long enough for
    the operating system to become outdated or unsupported.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这在很大程度上取决于你对基础设施的处理方式*——*有些企业采用类似容器的方式管理服务器，并在每次新的软件发布或应用部署时重新部署它们。当你的基础设施和构建标准由代码定义（如
    Ansible）时，完全可以做到这一点，且对日常操作的影响最小，且不太可能有任何单一的服务器存在足够长的时间，导致操作系统过时或不再受支持。
- en: At the end of the day, the choice is yours and you must establish which path
    you feel provides you with the most business benefit without putting your operations
    at risk. Part of standardization is to make sound, rational decisions on technology
    and to adopt them wherever feasible, and your standard could include frequent
    rebuilds such that you can use a fast-moving operating system such as Fedora.
    Equally, you might decide that your standard is that servers will have long lives
    and be upgraded in place, and in this case, you would be better choosing an operating
    system such as an Ubuntu LTS release or RHEL/CentOS.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 归根结底，选择权在你手中，你必须确定哪条路径能为你提供最大的商业利益，而又不会使你的运营面临风险。标准化的一部分是做出合理的、理智的技术决策，并在可行的情况下采纳这些决策，你的标准可能包括频繁的重建，从而可以使用像
    Fedora 这样的快速发展操作系统。同样，你也可能决定标准是服务器将有较长的生命周期，并在原地升级，在这种情况下，你最好选择像 Ubuntu LTS 版本或
    RHEL/CentOS 这样的操作系统。
- en: In the following section, we will look in greater detail at how an SOE benefits the
    concept of supportability in the next section.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个部分中，我们将更详细地探讨 SOE 如何促进支持性这一概念。
- en: Supportability
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可支持性
- en: As we have already discussed, having a standardized environment brings with
    it two benefits. The first is that a well-chosen platform means a long vendor
    support life cycle. This, in turn, means long support from either the vendor (in
    the case of a product such as RHEL) or the community (in the case of CentOS).
    Some operating systems such as Ubuntu Server are available with either community
    support or a paid contract directly from Canonical.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经讨论过的，拥有标准化的环境带来了两个好处。第一个好处是，精心选择的平台意味着较长的供应商支持生命周期。反过来，这意味着无论是来自供应商（例如RHEL产品）的长期支持，还是来自社区（例如CentOS）的长期支持。某些操作系统，如Ubuntu
    Server，可以选择通过社区支持或直接从Canonical获得付费合同支持。
- en: Supportability doesn't just mean support from the vendor or the Linux community
    at large, however. Remember that, in an enterprise, your staff is your front line
    support before anyone external steps in. Now, imagine having a crack team of Linux
    staff, and presenting them with a server estate comprised of Debian, SuSe, CentOS,
    Fedora, Ubuntu, and Manjaro. There are similarities between them, but also a huge
    number of differences. Across them, there are four different package managers
    for installing and managing software packages, and that's just one example.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，可支持性不仅仅意味着来自供应商或Linux社区的支持。请记住，在企业中，你的员工是前线支持，外部人员介入之前，员工就已经在处理问题了。现在，想象一下你有一支优秀的Linux团队，并且他们面对的是由Debian、SuSe、CentOS、Fedora、Ubuntu和Manjaro组成的服务器环境。它们之间有相似之处，但也有大量的差异。它们之间有四种不同的软件包管理器来安装和管理软件包，这只是其中的一个例子。
- en: Whilst entirely supportable, it does present more of a challenge for your staff
    and means that, for anyone joining the company, you require both a broad and a
    deep set of Linux experience*—*either that or an extensive on-boarding process
    to get them up to speed.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然完全可以支持，但这对你的员工提出了更大的挑战，这意味着对于任何加入公司的人，你需要一套广泛且深入的Linux经验——或者需要一个广泛的入职过程来帮助他们快速上手。
- en: With a standardized environment, you might end up with more than one operating
    system, but nonetheless, if you can meet all of your requirements with, say, CentOS
    7 and Ubuntu Server 18.04 LTS (and know that you are covered for the next few
    years because of your choices), then you immediately reduce the workload on your
    Linux team and enable them to spend more time creatively solving problems (for
    example, automating solutions with Ansible!) and less time figuring out the nuances
    between operating systems. As we have also discussed, in the event of an issue,
    they will be more familiar with each OS and hence need to spend less time debugging,
    reducing downtime.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个标准化的环境中，你可能会使用多个操作系统，但如果你能够通过选择例如CentOS 7和Ubuntu Server 18.04 LTS来满足所有的需求，并且知道你在未来几年内选择是有保障的，那么你立刻就能减少Linux团队的工作负担，让他们有更多时间去创造性地解决问题（例如，通过Ansible自动化解决方案！），而不是花时间去琢磨操作系统之间的细微差别。正如我们所讨论的，在出现问题时，他们会更熟悉每个操作系统，因此需要花费更少的时间来调试，从而减少停机时间。
- en: This brings us nicely into the subject of ease of use at scale, and we will
    provide an overview of this in the next section.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这引出了一个关于大规模易用性的话题，我们将在下一节中对此进行概述。
- en: Ease of use
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 易用性
- en: This final category overlaps heavily with the last two—that is to say that,
    quite simply, the more standardized your environment, the easier it is for a given
    set of employees to get to grips with it. This automatically promotes all of the
    benefits we have discussed so far around reducing downtime, easier recruitment
    and on-boarding of staff, and so on.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这一最终类别与前两个类别有很大重叠——也就是说，更标准化的环境使得给定的员工更容易掌握。这样就自动促进了我们之前讨论的所有好处，包括减少停机时间、简化员工招聘和入职等。
- en: Having set out the challenges that an SOE helps to address, we will proceed
    in the next section to look at the anatomy of such an environment to understand
    it from a technical standpoint.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在列出了SOE帮助解决的挑战之后，我们将在下一节中继续探讨这种环境的结构，从技术角度理解它。
- en: What is an SOE?
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是SOE？
- en: Now that we've explored the reasons why an SOE is important to the enterprise
    and understood at a high level the solutions for these problems, let's look in
    detail at an SOE. We will begin by defining the SOE itself.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探讨了SOE对企业重要性的原因，并且在高层次上了解了这些问题的解决方案，让我们详细了解SOE。我们将从定义SOE本身开始。
- en: Defining the SOE
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义SOE
- en: Let's take a quick look at this from a more practical standpoint. As we have
    already said, an SOE is a concept, not an absolute. It is, at its simplest level,
    a common server image or build standard that is deployed across a large number
    of servers throughout a company. Here, all required tasks are completed in a known,
    documented manner.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个更实际的角度来看一下这个问题。正如我们已经提到的，SOE 是一个概念，而非绝对的标准。从最简单的层面来看，它是一个在公司多个服务器上部署的通用服务器镜像或构建标准。在这里，所有必需的任务都以一种已知且文档化的方式完成。
- en: 'To start with, there is the base operating system—and, as we have discussed,
    there are hundreds of Linux distributions to choose from. Some are quite similar
    from a system administration perspective (for example, Debian and Ubuntu), whilst
    some are markedly different (for example, Fedora and Manjaro). By way of a simple
    example, let''s say you wanted to install the Apache Web Server on Ubuntu 18.04
    LTS—you would enter the following commands:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是基础操作系统——正如我们讨论的那样，选择 Linux 发行版有成百上千种。有些在系统管理方面非常相似（例如，Debian 和 Ubuntu），而有些则有显著不同（例如，Fedora
    和 Manjaro）。举个简单的例子，假设你想在 Ubuntu 18.04 LTS 上安装 Apache Web 服务器——你需要输入以下命令：
- en: '[PRE0]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, if you wanted to do the same thing but on CentOS 7, you would enter the
    following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你想在 CentOS 7 上做相同的事情，你需要输入以下命令：
- en: '[PRE1]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, there is nothing in common between these commands—not even the
    name of the package, even though the end result in both cases is an installation
    of Apache. On a small scale, this is not an issue, but when servers are numerous
    and as server count goes up, so does the complexity of managing such an environment.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这些命令之间没有任何共同之处——即便最终结果在两种情况下都是安装 Apache，命令的包名也完全不同。在小规模环境下这不是问题，但当服务器数量增多时，管理这样一个环境的复杂度也会随之增加。
- en: The base operating system is just the start. Our example above was installing
    Apache, yet we could also install nginx or even lighttpd. They are, after all,
    also web servers.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 基础操作系统只是开始。我们上面的例子是安装 Apache，但我们也可以安装 nginx 或者 lighttpd。毕竟，它们也是网页服务器。
- en: Then, there is configuration. Do you want users to be able to log in as root over
    SSH? Do you need a certain level of logging for audit or debug purposes? Do you
    need local or centralized authentication? The list is myriad, and as you can see,
    if left unchecked could grow into a massive headache.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是配置。你是否希望用户能够通过 SSH 以 root 身份登录？你是否需要某种级别的日志记录以便审计或调试？你需要本地认证还是集中式认证？这些问题不胜枚举，正如你所看到的，如果不加以控制，它们可能会发展成一场巨大的头痛。
- en: 'This is where the SOE comes in. It is effectively a specification, and at a
    high level, it might say the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 SOE 的作用所在。它实际上是一种规范，从高层来看，它可能包含以下内容：
- en: Our standard base operating system is Ubuntu 18.04 LTS.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的标准基础操作系统是 Ubuntu 18.04 LTS。
- en: Our standard web server will be Apache 2.4.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的标准网页服务器将是 Apache 2.4。
- en: SSH logins are enabled, but only for users with SSH keys and not root.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用了 SSH 登录，但仅限于具有 SSH 密钥的用户，并且禁止 root 登录。
- en: All user logins must be logged and archived for audit purposes.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有用户登录必须进行记录并归档，以供审计使用。
- en: Except for a few local *break glass* accounts, all accounts must be centrally
    managed (for example, by LDAP or Active Directory).
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了一些本地的*紧急账户*外，所有账户必须集中管理（例如，通过 LDAP 或 Active Directory）。
- en: Our corporate monitoring solution must be integrated (for example, the Nagios
    NCPA agent must be installed and configured to communicate with our Nagios server).
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的企业监控解决方案必须集成（例如，必须安装并配置 Nagios NCPA 代理，以便与我们的 Nagios 服务器进行通信）。
- en: All system logs must be sent to the corporate central log management system.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有系统日志必须发送到企业的中央日志管理系统。
- en: Security hardening must be applied to the system.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须对系统进行安全加固。
- en: The preceding is simply an example, and it is by no means complete; however,
    it should begin to give you an idea of what an SOE looks like at a high level.
    As we proceed through this chapter, we will delve deeper into this subject and
    give more examples to build up a clear definition.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 上述只是一个示例，绝非完整的内容；然而，它应该能让你初步了解 SOE 的高层次定义。随着本章的推进，我们将深入探讨这一主题，并提供更多示例，以帮助清晰地定义
    SOE。
- en: Knowing what to include
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 知道需要包含什么内容
- en: Before we proceed, let's take a look in a little more detail at what to include
    in the environment. We have outlined in the previous section a very simplistic
    definition for an SOE. Part of any good SOE operating process is to have a pre-defined
    operating system build that can be deployed at a moment's notice. There are multiple
    ways this might be achieved and we will discuss these later in this book—however,
    for the time being, let's assume that a base image of Ubuntu 18.04 LTS as suggested
    previously has been built. What do we integrate into this *standard* build?
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我们更详细地了解一下环境中需要包含的内容。在前面的章节中，我们概述了SOE的一个非常简化的定义。任何良好的SOE操作流程的一部分就是拥有一个预定义的操作系统构建，可以在任何时刻进行部署。有多种方法可以实现这一点，我们将在本书后续章节讨论这些方法——然而，暂时假设我们之前提到的Ubuntu
    18.04 LTS基础镜像已经构建完成。我们在这个*标准*构建中应该集成哪些内容呢？
- en: We know, for example, that our login policy is going to be applied throughout
    the organization—hence, when the build is created, `/etc/ssh/sshd_config` must
    be customized to include `PermitRootLogin no` and `PasswordAuthentication no`.
    There is no point in performing this step in the post-deployment configuration,
    as this would have to be performed on each and every single deployment. Quite
    simply, this would be inefficient.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们知道我们的登录策略将在整个组织中实施——因此，在创建镜像时，`/etc/ssh/sshd_config`必须定制为包含`PermitRootLogin
    no`和`PasswordAuthentication no`。在后期部署配置中执行这个步骤没有意义，因为每次部署都需要执行这一操作。简单来说，这样做效率低下。
- en: 'There are also important automation considerations for our operating system
    image. We know that Ansible itself communicates over SSH, and so we know that
    we are going to require some kind of credentials (it is quite likely this will
    be SSH key-based) for Ansible to run against all of the deployed servers. There
    is little point in having to manually roll out Ansible credentials to every single
    machine before you can actually perform any automation, and so it is important
    to consider the kind of authentication you want Ansible to use (for example, password-
    or SSH key-based), and to create the account and corresponding credentials when
    you build the image. The exact method for doing this will depend upon your corporate
    security standards, but I would advocate as a potential solution the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的操作系统镜像还需要考虑一些重要的自动化问题。我们知道Ansible本身是通过SSH进行通信的，因此我们知道需要某种类型的凭证（很可能是基于SSH密钥）才能让Ansible在所有已部署的服务器上运行。在你能够执行任何自动化操作之前，如果需要手动将Ansible凭证分发到每一台机器上，是没有意义的，因此考虑Ansible使用的认证方式非常重要（例如，基于密码或SSH密钥），并且在构建镜像时创建相应的账户和凭证。实现这一点的具体方法将取决于你们公司安全标准，但我建议可以考虑以下解决方案：
- en: Creating a local account on the standard image for Ansible to authenticate against
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在标准镜像上创建一个本地账户，供Ansible进行身份验证
- en: Giving this account appropriate sudo rights to ensure all desired automation
    tasks can be performed
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为该账户授予适当的sudo权限，确保能够执行所有预定的自动化任务
- en: Setting the local password for this account, or adding the SSH public key from
    an Ansible key-pair to the `authorized_keys` file for the local Ansible account
    you created
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为这个账户设置本地密码，或者将Ansible密钥对中的SSH公钥添加到你创建的本地Ansible账户的`authorized_keys`文件中
- en: Doing this, of course, does present some security risks. It is most likely that
    Ansible will need full access to root on your servers for it to effectively perform
    all of the automation tasks you might ask of it, and so this Ansible account could
    become a backdoor if the credentials were ever compromised. It is recommended
    that as few people as possible have access to the credentials and that you make
    use of a tool such as AWX or Ansible Tower (which we shall explore in [Chapter 3](b0c37bde-4b12-4619-94f1-dd14ae0c96ff.xhtml),
    *Streamlining Infrastructure Management with AWX*) to manage your credentials,
    hence preventing people from getting hold of them inappropriately. You will also
    almost certainly want to enable auditing of all activities performed by the Ansible
    account and have these logged to a central server somewhere so that you can inspect
    them for any suspicious activity and audit them as required.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做当然会带来一些安全风险。最有可能的是，Ansible需要完全访问服务器上的root权限，才能有效地执行你要求的所有自动化任务，因此，如果凭证被泄露，这个Ansible帐户可能会成为一个后门。建议尽量让尽可能少的人访问凭证，并使用像AWX或Ansible
    Tower这样的工具（我们将在[第3章](b0c37bde-4b12-4619-94f1-dd14ae0c96ff.xhtml)，*通过AWX简化基础设施管理*中进行探讨）来管理凭证，从而防止不当人员获取凭证。你几乎肯定还会希望启用对Ansible帐户执行的所有活动进行审计，并将这些活动记录到某个中央服务器上，这样你就可以检查是否有任何可疑活动，并根据需要进行审计。
- en: Moving on from user accounts and authentication, consider also **Nagios Cross-Platform
    Agent** (**NCPA**). We know in our example that all deployed servers are going
    to need to be monitored, and so it is a given that NCPA agent must be installed,
    and the token defined such that it can communicate with the Nagios server. Again,
    there is no point doing this on every single server after the standard image is
    deployed.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 从用户帐户和身份验证转移开，考虑一下**Nagios跨平台代理**（**NCPA**）。我们在示例中知道，所有部署的服务器都需要进行监控，因此可以认为NCPA代理必须安装，并且令牌必须被定义，以便它可以与Nagios服务器进行通信。同样，在标准映像部署后，没必要在每台服务器上都执行这个操作。
- en: What about the web server though? It is sensible to have a standard, as it means
    all who are responsible for the environment can become comfortable with the technology.
    This makes administration easier and is especially beneficial for automation,
    as we shall see in the next section. However, unless you only ever deploy web
    servers running on Linux, this probably shouldn't be included as part of the standard
    build.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，关于Web服务器呢？拥有一个标准是明智的，因为这意味着所有负责环境的人都能熟悉这项技术。这使得管理变得更容易，尤其对自动化非常有利，正如我们将在下一节中看到的。然而，除非你只部署运行Linux的Web服务器，否则这不应该作为标准构建的一部分。
- en: As a sound principle, the standard builds should be as simple and lightweight
    as possible. There is no point in having additional services running on them,
    taking up memory and CPU cycles, when they are redundant. Equally, having unconfigured
    services increases the attack surface for any potential attacker and so for security
    reasons, it is advisable to leave them out.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种基本原则，标准构建应尽可能简单且轻量。没有必要在它们上运行额外的服务，这些服务占用内存和CPU周期，尤其是在它们是冗余的情况下。同样，未配置的服务会增加潜在攻击者的攻击面，因此出于安全原因，建议将它们排除在外。
- en: In short, the standard build should only include configuration and/or services
    that are going to be common to every server deployed. This approach is sometimes
    referred to as **Just enough Operating System** or **JeOS** for short, and it
    is the best starting point for your SOE.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，标准构建应该只包含那些将对每台部署的服务器都通用的配置和/或服务。这种方法有时被称为**恰到好处的操作系统**，简称**JeOS**，它是SOE的最佳起点。
- en: Having understood the basic principles of an SOE, we will proceed in the next
    section to look in more detail at the benefits an SOE brings to your enterprise.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 理解了SOE的基本原则后，我们将在下一节中更详细地探讨SOE为企业带来的好处。
- en: Exploring SOE benefits
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索SOE的好处
- en: By now, you should have some idea of what an SOE is, and how it brings economies
    of scale and greater efficiency to a Linux environment. Now, let's build on that
    and look in more detail at an example of the importance of standardization.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该已经对SOE有了一些了解，并且知道它如何为Linux环境带来规模经济和更高的效率。现在，让我们在此基础上，详细了解标准化的重要性示例。
- en: Example benefits of an SOE in a Linux environment
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Linux环境中，SOE的示例好处
- en: To say that there are commonalities in a Linux environment is to say that the
    servers that comprise it all share attributes and features. For example, they
    might all be built upon Ubuntu Linux, or they might all have Apache as their web
    server.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 说Linux环境中存在共性，就是说组成它的服务器都有一些共享的属性和特征。例如，它们可能都建立在Ubuntu Linux之上，或者它们可能都使用Apache作为Web服务器。
- en: We can explore this concept with an example. Suppose that you have 10 Linux
    web servers behind a load balancer and that they are all serving simple static
    content. Everything is working fine, but then a configuration change is mandated.
    Perhaps this is to change the document root of each web server to point to a new
    code release that has been deployed to them by another team.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过一个例子来探索这个概念。假设你有10台Linux Web服务器，它们都在一个负载均衡器后面，且它们都在提供简单的静态内容。所有一切运行正常，但随后需要进行配置更改。也许这是为了更改每台Web服务器的文档根目录，以指向由其他团队部署到这些服务器的新代码版本。
- en: As the person responsible, you know that because the overall solution is load
    balanced, all servers should be serving the same content. Therefore, the configuration
    change is going to be required on each and every one. That means 10 configurations
    changes to make if you do it by hand.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 作为负责人，你知道因为整体解决方案是负载均衡的，所以所有服务器应该提供相同的内容。因此，配置更改将在每台服务器上都需要进行。这意味着如果你手动操作，就需要做10次配置更改。
- en: You could, of course, do this by hand, but this would be tedious and certainly
    isn't the best use of time for a skilled Linux admin. It is also error-prone—a
    typo could be made on one of the 10 servers and not spotted. Or the admin could
    be interrupted by an outage elsewhere and only a subset of the server configurations
    changed.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以手动完成这个操作，但这将是一个繁琐的过程，显然对于一个熟练的Linux管理员来说，这并不是最好的时间利用方式。它也容易出错——可能在10台服务器中的某一台上输入了错误的内容，且没有被发现。或者管理员可能被其他地方的故障打断，只对部分服务器的配置进行了更改。
- en: The better solution would be to write a script to make the change. This is the
    very basis of automation and it is almost certainly going to be a better use of
    time to run a single script once against 10 servers than to manually make the
    same change 10 times over. Not only is it more efficient, but if the same change
    became required in a month, the script could be reused with just minimal adjustment.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的解决方案是编写一个脚本来进行更改。这正是自动化的基础，而且几乎可以肯定，运行一个脚本一次以更改10台服务器的配置，比手动重复更改10次要更高效。不仅效率更高，而且如果一个月后需要做相同的更改，这个脚本可以在仅做最小调整的情况下重复使用。
- en: 'Now, let''s throw a spanner into the works. What if, for reasons unknown, someone
    built five of the web servers using Apache on CentOS 7, and the other five using
    nginx on Ubuntu 18.04 LTS? The end result would, after all, be the same—at a basic
    level, they are both web servers. However, if you want to change the document
    root in Apache on CentOS 7, you would need to do the following:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们再增加一点复杂性。如果，出于某些未知原因，五台Web服务器使用的是基于CentOS 7的Apache，另外五台则使用的是基于Ubuntu 18.04
    LTS的nginx，会发生什么呢？最终结果其实是相同的——从基本层面来看，它们都是Web服务器。然而，如果你想在CentOS 7上的Apache中更改文档根目录，你需要做如下操作：
- en: Locate the appropriate configuration file in `/etc/httpd/conf.d`.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`/etc/httpd/conf.d`中的适当配置文件。
- en: Make the required change to the `DocumentRoot` parameter.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`DocumentRoot`参数进行所需的更改。
- en: Reload the web server with `systemctl reload httpd.service`.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`systemctl reload httpd.service`重新加载Web服务器。
- en: 'If you had to do the same thing for nginx on Ubuntu 18.04 LTS, you would do
    the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要在Ubuntu 18.04 LTS上的nginx中做相同的更改，你需要做如下操作：
- en: Locate the correct configuration file in `/etc/nginx/sites-available`.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`/etc/nginx/sites-available`中的正确配置文件。
- en: Make the required change to the `root` parameter.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`root`参数进行所需的更改。
- en: Ensure that the site configuration file is enabled using the `a2ensite` command—otherwise,
    Apache will not actually see the configuration file.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保使用`a2ensite`命令启用站点配置文件——否则，Apache将不会实际看到配置文件。
- en: Reload the web server with `systemctl reload apache2.service`.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`systemctl reload apache2.service`重新加载Web服务器。
- en: 'As you can see from this rather simplistic (albeit contrived) example, a lack
    of commonality is the enemy of automation. To cope with the case, you would need
    to do as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个相当简单（尽管是人为设定的）例子中可以看出，缺乏共性是自动化的敌人。为了应对这种情况，你需要做如下操作：
- en: 'Detect the operating system on each server. This in itself is non-trivial—there
    is no one way to detect a Linux operating system, so your script would have to
    walk through a series of checks, including the following:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检测每台服务器上的操作系统。这本身并不简单——没有一种方法可以检测Linux操作系统，因此你的脚本需要依次进行一系列检查，包括以下内容：
- en: The contents of `/etc/os-release`, if it exists
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '` /etc/os-release` 的内容（如果存在）'
- en: The output of `lsb_release`, if it is installed
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '` lsb_release` 的输出（如果已安装）'
- en: The contents of `/etc/redhat-release`, if it exists
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '` /etc/redhat-release` 的内容（如果存在）'
- en: The contents of `/etc/debian_version`, if it exists
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '` /etc/debian_version` 的内容（如果存在）'
- en: Other OS-specific files as required, if none of the preceding produce meaningful
    results
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据需要的其他操作系统特定文件，如果前面的检查没有产生有意义的结果
- en: Run different modification commands in different directories to effect the change
    as discussed previously.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在不同的目录中运行不同的修改命令，以实现之前讨论的更改。
- en: Run different commands to reload the web server, again as detailed previously.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行不同的命令来重新加载Web服务器，正如之前所详细描述的那样。
- en: Hence, the script becomes complex, more difficult to write and maintain, and
    certainly more difficult to make reliable.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，脚本变得复杂，编写和维护变得更加困难，显然也更难以保证其可靠性。
- en: 'Although this particular example is unlikely to occur in real life, it does
    serve to make an important point—automation is much easier to implement when the
    environment is built to a given standard. If a decision is made that all web servers
    are to be based on CentOS 7, to run Apache 2, and have the site configuration
    named after the service name, then our automation becomes so much easier. In fact,
    you could even run a simple `sed` command to complete the change; for example,
    suppose the new web application was deployed to `/var/www/newapp`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个特定的例子在现实生活中不太可能发生，但它确实突出了一个重要的观点——当环境被构建为符合某个标准时，自动化的实现要容易得多。如果决定所有的Web服务器都基于CentOS
    7，运行Apache 2，并且站点配置文件以服务名称命名，那么我们的自动化就变得更加简单。事实上，你甚至可以运行一个简单的`sed`命令来完成这个更改；例如，假设新的Web应用程序部署到了`/var/www/newapp`：
- en: '[PRE2]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: No environment detection was necessary at all—just two simple shell commands.
    This could be the basis of a really simple automation script to be run either
    on each of the 10 servers in turn or remotely over SSH. Either way, our automation
    task is now very simple and shows how important commonality is. Importantly, an
    SOE by its very nature provides this commonality. Lack of commonality doesn't
    just make automation difficult though—it also hampers testing, often distorting
    test results as they may not be representative if environments are different.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 完全不需要环境检测——只需要两个简单的Shell命令。这可以成为一个非常简单的自动化脚本的基础，既可以在10台服务器中依次运行，也可以通过SSH远程运行。无论哪种方式，我们的自动化任务现在变得非常简单，充分展示了公共性的的重要性。重要的是，SOE本身就提供了这种公共性。然而，缺乏公共性不仅使得自动化变得困难——它还会妨碍测试，通常会扭曲测试结果，因为如果环境不同，测试结果可能不具代表性。
- en: In the next section of this chapter, we will build on this knowledge to demonstrate
    how an SOE benefits the process of software testing.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的下一部分，我们将基于这些知识，展示SOE如何有利于软件测试过程。
- en: Benefits of SOE to software testing
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SOE对软件测试的好处
- en: A common problem I have seen in many environments is that of a new software
    deployment having been successfully tested in an isolated pre-production environment
    and yet not working correctly when it is released into the production environment.
    More often than not, this problem is traced back to fundamental differences between
    the production and pre-production environments, and so it is clear that for testing
    to be valid, both environments must be as similar as possible.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我在许多环境中看到的一个常见问题是：一个新的软件部署在隔离的预生产环境中经过成功测试，但在发布到生产环境后却不能正常工作。这个问题往往可以追溯到生产环境和预生产环境之间的根本差异，因此很明显，要使测试有效，两个环境必须尽可能相似。
- en: Indeed, one of the problems containerization platforms such as Docker set out
    to solve was exactly this, and hence portability is a core feature of container
    environments. Code deployed on Docker is built on top of a container image that
    is, in simple terms, a stripped-down operating system image (remember JeOS?).
    This, in effect, is a really tiny SOE, just running in a container rather than
    on a bare metal server or virtual machine. However, it is worth considering that
    if portability through environment standardization is a key feature of container
    technology, then should we not try to achieve this across the board regardless
    of our infrastructure.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，像 Docker 这样的容器平台旨在解决的问题之一就是这个，因此可移植性是容器环境的核心特性。在 Docker 上部署的代码是建立在一个容器镜像之上的，简单来说，这是一个精简的操作系统镜像（记得
    JeOS 吗？）。实际上，这只是在容器中运行而不是在裸金属服务器或虚拟机上运行的一个非常小的 SOE。然而，值得考虑的是，如果通过环境标准化实现可移植性是容器技术的一个关键特性，那么我们不应该在不考虑基础设施的情况下努力实现这一点吗？
- en: After all, if the configuration of the production servers is different from
    the pre-production ones, then how valid is the testing? If the pre-production
    environment was built on CentOS 7.6, but the production environment lags behind
    it on CentOS 7.4, then can you really ensure that a successful test result in
    one environment will guarantee it in the other? On paper, it should work, but
    with fundamental differences in software and library versions between the environments,
    this can never be guaranteed. This is before we even consider possible differences
    in configuration files and installed software.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 毕竟，如果生产服务器的配置与预生产服务器不同，那么测试的有效性又有多大保证呢？如果预生产环境是建立在 CentOS 7.6 上，而生产环境却落后于 CentOS
    7.4，那么你真的能确保在一个环境中的成功测试结果在另一个环境中也能保证吗？在理论上，应该可以，但由于环境中软件和库版本的根本差异，这永远无法保证。这甚至还没有考虑到配置文件和安装软件可能存在的差异。
- en: Hence, SOEs can help here—if all environments are built to the same standards,
    then in theory, they should all be identical. Those of you who are eagle-eyed
    will notice the use of the word *should* in the previous sentence and it is there
    for a good reason. SOEs are a great step forward in defining the solution for
    testing failures, but they are not the whole story.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，SOE 在这里可以起到帮助的作用——如果所有环境都按照相同的标准构建，那么理论上它们都应该是相同的。那些眼尖的人会注意到前面一句中使用“*应该*”这个词，这是有充分理由的。SOE
    在定义测试失败解决方案方面迈出了重要一步，但它们并非全部内容。
- en: An environment is only standard as long as no-one modifies it, and if all users
    have administration-level privileges, then it is very easy for someone (well-meaning
    or otherwise) to log in and make changes that mean the environment deviates from
    the standard.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当没有人修改它时，环境才能保持标准化，如果所有用户都拥有管理级别的权限，那么某人（无论出于善意还是其他原因）登录并进行更改，使环境偏离标准就非常容易了。
- en: The answer to this issue is automation—not only do SOEs promote and enable automation,
    they also rely on it to maintain the level of standardization that they were required
    for in the first place. The two support each other directly and should ideally
    be inseparable partners—the SOE being the definition for the environment itself,
    and the automation providing the implementation, enforcement, and auditing of
    the standard. Indeed, this is the very premise of this book—that environments
    should be standardized as far as possible, and that as many changes as possible
    should be automated.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的答案是自动化——SOE 不仅促进和实现自动化，它们也依赖于它来维持最初所需的标准化水平。这两者直接支持彼此，并且理想情况下应该成为不可分割的伙伴——SOE
    是环境本身的定义，而自动化则提供标准的实施、执行和审计。事实上，这本书的核心前提就是——环境应尽可能地标准化，并且尽可能多的变更应该是自动化的。
- en: The focus of this book will be on the automation aspect of this equation, as
    other than adhering to the principles outlined in this chapter, the standards
    adopted will be unique for every environment and it is not the goal of this book
    to determine them at a low level. Working with our earlier example, both Apache
    and nginx have their benefits, and what fits one use case may not fit another.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的重点将放在这个方程式的自动化方面，除了遵循本章概述的原则之外，采用的标准将对每个环境都是独特的，本书并不旨在低级别确定它们。与之前的例子一起工作，Apache
    和 nginx 都有各自的好处，适合一个用例的可能并不适合另一个用例。
- en: The same is true with operating systems—some organizations may rely on the support
    package provided with Red Hat Enterprise Linux, whilst others don't need this
    but need the bleeding edge technologies provided by, say, Fedora. There is no
    right or wrong way to define a standard, as long as it meets the needs of the
    services it underpins. So far, we have focused very much on commonality and standards;
    however, there will always be edge cases where an alternative solution is required.
    In the next section, we will establish how to know when you should deviate from
    your standards.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统也是如此——有些组织可能依赖于Red Hat Enterprise Linux所提供的支持包，而其他组织则不需要此支持包，但需要例如Fedora提供的前沿技术。定义标准并没有绝对对错，只要它满足所支撑服务的需求即可。到目前为止，我们非常注重共同性和标准化；然而，总会有一些特殊情况需要采用替代方案。在下一节中，我们将讨论如何判断何时应该偏离标准。
- en: Knowing when to deviate from standards
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 知道何时偏离标准
- en: It would be easy to oversell the benefits of standardization, and they are certainly
    a requirement for automation to be effective. However, like anything, it can be
    taken too far. There is no point, for example, building servers on top of Red
    Hat Enterprise Linux 5.7 in 2019 simply because this was once defined as a standard
    (it is now End of Life and no longer supported or updated). Similarly, from time
    to time, software vendors will have qualified their product on certain specific
    Linux distributions or application stacks and will not provide support unless
    their software is run within that ecosystem.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 标准化的好处很容易被过度宣扬，尽管它们无疑是自动化有效性的必要条件。然而，像任何事物一样，标准化也可以被推得过头。例如，完全没有必要在2019年仅仅因为某个时间点曾被定义为标准而在Red
    Hat Enterprise Linux 5.7上构建服务器（该版本现在已到达生命周期终点，不再支持或更新）。同样，软件供应商有时会在某些特定的Linux发行版或应用堆栈上对其产品进行认证，除非软件运行在该生态系统内，否则不会提供支持。
- en: These are cases when deviations from the SOE are necessary, but they should
    be performed in a controlled manner. For example, if a business has built up its
    Linux server estate on Ubuntu 18.04 LTS, and then a new software stack is purchased
    that is only qualified on RHEL 7, it is clear that builds of RHEL 7 are going
    to be required. These should, however, be part of a new set of standards if possible
    and become a secondary SOE.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是需要偏离SOE的情况，但必须以受控的方式进行。例如，如果企业已经在Ubuntu 18.04 LTS上构建了其Linux服务器环境，然后购买了一个仅在RHEL
    7上经过认证的新软件堆栈，那么显然需要构建RHEL 7。但如果可能的话，这些应该成为新标准的一部分，并成为一个次要SOE。
- en: 'For example, if the CIS security hardening benchmark is applied to the Ubuntu
    SOE, then the equivalent one should be applied to the RHEL too. Similarly, if
    the business has standardized on nginx, then this should be used on the environment
    unless there is a compelling reason not to (hint: a compelling reason is not that
    it''s new and sexy—it is that it solves a real problem or somehow improves something
    in a tangible way).'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果将CIS安全加固基准应用于Ubuntu SOE，那么同等的基准也应该应用于RHEL。同样，如果企业已经在nginx上实现了标准化，那么在环境中应该继续使用它，除非有令人信服的理由不使用（提示：令人信服的理由不是它“新”和“炫酷”，而是它解决了一个实际问题或以某种方式在可衡量的方面改进了某些东西）。
- en: This results in the business going from one Linux SOE to two, which is still
    entirely manageable and certainly better than returning to organic growth methodologies
    that hamper effective automation.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致企业从一个Linux SOE（标准操作环境）转向两个，虽然这仍然完全可以管理，并且无疑比回到那些阻碍有效自动化的有机增长方法要好。
- en: In short, expect deviations, and don't fear them. Instead, handle them and use
    the requirements to expand your standards, but stick with them where you can.
    SOEs present a balancing act for everyone—on the one hand, they bring advantages
    of scale, make automation easier, and reduce the training time for new staff (as
    all servers are more or less the same in build and configuration), but if applied
    too rigidly, they could hamper innovation. They must not be used as an excuse
    to do things a certain way *because that's how it has always been done*.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，要预期会有偏离，并且不要害怕它们。相反，应该处理它们，并利用这些需求来扩展你的标准，但在可能的情况下坚持标准。SOE对于每个人来说都是一种平衡——一方面，它们带来了规模优势，使得自动化变得更容易，并减少了对新员工的培训时间（因为所有服务器的构建和配置大致相同）；但如果过于严格地应用，它们也可能阻碍创新。它们不能作为以*“因为一直都是这么做的”*为理由的借口。
- en: There will always be a good reason to deviate from a standard; simply look for
    the business benefit it brings, whether it's vendor support, lower resource requirements
    (hence saving power and money), a longer support window, or otherwise. Try and
    avoid doing so just because a new technology is *shiny*. As long as you are mindful
    of this fact, you will make good decisions regarding deviation from your standards.
    In the next section of this chapter, we will explore the ongoing maintenance of
    SOEs.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 总会有充分的理由偏离标准；只需要寻找它所带来的业务利益，无论是供应商支持、较低的资源需求（从而节省电力和金钱）、更长的支持周期，还是其他原因。尽量避免仅仅因为一种新技术看起来*光鲜亮丽*而去偏离标准。只要你牢记这一点，你就能在偏离标准时做出明智的决策。在本章的下一部分，我们将探讨SOE的持续维护。
- en: Ongoing maintenance of SOEs
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SOE的持续维护
- en: Although we will look at patching and maintenance in much greater detail later
    in this book, it deserves a mention here as it dovetails nicely into the discussion
    on commonality and deviations.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本书后面会更详细地讨论补丁和维护，但在此提及它是因为它与常规性和偏差的讨论密切相关。
- en: If nothing else, you are going to have to patch your Linux environment. For
    security reasons alone, this is a given and good practice, even in an air-gapped
    environment. Let's say that your environment is made up entirely of virtual machines
    and that you decided to standardize on CentOS 7.2 some time ago. You built a virtual
    machine, performed all of the required configuration steps to turn it into your
    SOE image, and then converted it into a template for your virtualization environment.
    This becomes your *gold build*. So far, so good.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有其他原因，你至少需要为你的Linux环境打补丁。仅仅出于安全考虑，这也是一项理所当然且良好的实践，即使是在隔离环境中也是如此。假设你的环境完全由虚拟机组成，而你早些时候决定将CentOS
    7.2作为标准。你创建了一个虚拟机，执行了所有必要的配置步骤将其变成SOE镜像，然后将其转换为虚拟化环境中的模板。这就成为了你的*黄金构建*。到目前为止，一切顺利。
- en: However, CentOS 7.2 was released in December 2015, nearly 4 years ago at the
    time of writing, and if you were to deploy such an image today, the first thing
    you would have to do is patch it. This would, depending on the build definition
    (and the number of packages included in it), possibly involve downloading a gigabyte
    or more of packages to bring it up to the latest standard and ensure you were
    running with all discovered vulnerabilities patched, and all of the requisite
    bug fixes in place.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，CentOS 7.2发布于2015年12月，距今已经快四年了。如果你今天部署这样的镜像，首先需要做的就是为其打补丁。根据构建定义（以及包含的包数量），这可能意味着你需要下载一GB或更多的包，以使其符合最新标准，并确保修补所有已发现的漏洞，并完成所有必要的bug修复。
- en: Obviously, if you are doing this at scale, this is inefficient—each new server
    is going to pull all that data down over the network (or worse, the internet,
    if you don't have an internal mirror), and then consume a great deal of I/O time
    and CPU time applying the patches, during which the server can't be used for anything
    meaningful. If you only deploy one server every few months, you can probably put
    up with this. If you deploy them on a more regular basis, then this is going to
    waste a lot of valuable time and resources.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，如果你在大规模操作中进行这种操作，这是低效的——每台新服务器都需要通过网络（或者更糟，如果没有内部镜像，还需要通过互联网）下载所有数据，并且在应用补丁时会消耗大量的I/O时间和CPU时间，而在此期间服务器无法用于任何有意义的任务。如果你每隔几个月才部署一台服务器，你可能还能忍受这个过程。如果你更频繁地部署服务器，这将浪费大量宝贵的时间和资源。
- en: Hence, as well as performing ongoing maintenance of your environment itself,
    it is important to perform ongoing maintenance of your standards. In 2019, it
    makes sense to update your CentOS build to 7.6\. At the very least, your ongoing
    maintenance schedule should involve updating the *gold build* regularly.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，除了对你的环境本身进行持续维护外，持续维护你的标准同样重要。在2019年，更新你的CentOS构建到7.6是有意义的。至少，你的持续维护计划应该包括定期更新*黄金构建*。
- en: We will go into much greater detail on how this might be performed later in
    this book. However, for those who are eager to know now, this might be as simple
    as booting the virtual machine image up, performing the updates, sanitizing it
    (for example, removing SSH host keys that would be duplicated when the template
    is cloned), and then creating a new template from it. Obviously, if any other
    changes to the SOE have been made since the last maintenance cycle, then these
    can be incorporated too.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 本书稍后将详细讨论如何执行这一过程。然而，对于那些急于了解的人来说，这可能简单到只需启动虚拟机镜像，执行更新，清理它（例如，删除克隆模板时可能重复的 SSH
    主机密钥），然后从中创建一个新模板。显然，如果自上次维护周期以来对 SOE 进行了任何更改，那么这些更改也可以纳入其中。
- en: You should expect your SOE to evolve over time—it would be easy perhaps to labor
    this point—but there is an important balance between creating and maintaining
    standards, and being overly rigid with them. You must accept that there are times
    when you will need to deviate from them as we discussed in the previous section
    and that, over time, they will evolve.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该预期您的 SOE 会随着时间的推移而发展——或许在这个问题上会花费很多篇幅，但创建和维护标准与过于僵化之间需要有一个重要的平衡。您必须接受有时您需要偏离这些标准，如我们在前一节中讨论的那样，并且随着时间推移，这些标准会不断演变。
- en: In short, SOEs should become a part of your regular IT processes; if employed
    correctly, they don't hinder innovation— instead, they actively support it by
    giving back time to those working with them and ensuring they spend less time
    performing mundane, repetitive tasks and hence have more time for evaluating new
    technologies and finding better ways of doing things. This, after all, is one
    of the key benefits of automation, which SOEs support directly.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 总而言之，SOE 应该成为您常规 IT 流程的一部分；如果正确使用，它们不会妨碍创新——相反，它们通过将时间返还给使用它们的人，积极支持创新，确保他们花更少的时间在繁琐、重复的任务上，从而有更多的时间评估新技术和寻找更好的工作方式。这毕竟是自动化的关键好处之一，而
    SOE 正是直接支持这一点。
- en: Summary
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: SOEs are a valuable addition to technology processes in almost any environment.
    They require some time to be spent upfront on design work and defining standards,
    but this time is more than offset later on as it supports efficient and effective
    automation of the environments, and in this manner, actually gives time back to
    those responsible for the environment, giving them more time to work on evaluating
    new technologies, finding more efficient ways to do things, and being innovative in
    general.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: SOE（标准化操作环境）是几乎所有环境中技术流程的宝贵补充。它们需要在设计工作和定义标准方面花费一些前期时间，但随着它支持环境的高效自动化，这段时间在后期得到了充分的回报，从而真正为负责环境管理的人们节省了时间，让他们有更多时间评估新技术、寻找更高效的工作方式，并在总体上进行创新。
- en: In this chapter, you learned the fundamental definition of an SOE. You explored
    the benefits that they bring to just about any Linux environment where scale is
    important, how they support automation, and when and how to make deviations from
    the standards to ensure that they do not become overly rigid and hamper growth.
    Finally, you learned about the importance of ongoing maintenance, including maintenance
    of your standards as part your ongoing maintenance cycles.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了 SOE 的基本定义。您探讨了它们为几乎所有对规模要求较高的 Linux 环境带来的好处，它们如何支持自动化，以及如何在确保不会过于僵化并妨碍发展的情况下，何时以及如何偏离标准。最后，您了解了持续维护的重要性，包括作为持续维护周期一部分的标准维护。
- en: In the next chapter, we will explore how to make use of Ansible as an effective
    automation framework for your Linux environment.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何将 Ansible 作为一个有效的自动化框架应用于您的 Linux 环境。
- en: Questions
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What does the acronym SOE stand for?
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SOE 的缩写代表什么？
- en: Why would you choose an operating system with a long support cycle, such as
    CentOS, rather than one with a more rapid release cycle, such as Fedora?
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么您会选择支持周期长的操作系统，如 CentOS，而不是支持周期较短、发布频率较高的操作系统，如 Fedora？
- en: Should you ever deviate from the standards you have defined for your environment?
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您偏离了为环境定义的标准，应该怎么办？
- en: List three challenges of scaling Linux environments up to enterprise scale.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出三个将 Linux 环境扩展到企业规模时面临的挑战。
- en: Name three benefits that SOEs bring to Linux in the enterprise.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列举三个 SOE 为企业中的 Linux 带来的好处。
- en: How does an SOE help to reduce the training requirements in an enterprise?
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SOE 如何帮助减少企业中的培训需求？
- en: Why does an SOE benefit the security of your Linux environment?
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么 SOE 有助于提高 Linux 环境的安全性？
- en: Further reading
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: To learn more about SOEs from a Red Hat perspective, refer to this article: [https://servicesblog.redhat.com/2016/11/03/standard-operating-environment-part-i-concepts-and-structures/](https://servicesblog.redhat.com/2016/11/03/standard-operating-environment-part-i-concepts-and-structures/).
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要从Red Hat的角度了解更多关于SOE的信息，请参考这篇文章：[https://servicesblog.redhat.com/2016/11/03/standard-operating-environment-part-i-concepts-and-structures/](https://servicesblog.redhat.com/2016/11/03/standard-operating-environment-part-i-concepts-and-structures/)。
