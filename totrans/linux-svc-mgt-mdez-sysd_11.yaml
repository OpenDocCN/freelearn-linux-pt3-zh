- en: '*Chapter 10*: Understanding Shutdown and Reboot Commands'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By this point in your career, you most likely know the basic commands for shutting
    down or rebooting a text-mode Linux server. In this chapter, we'll look at some
    things that are more specific to the systemd method. So, bear with me. There's
    a chance that you might learn something that you didn't know before.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specific topics in this chapter include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Shutting down with `systemctl`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Halting with `systemctl`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rebooting with `systemctl`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `shutdown` instead of `systemctl`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you're ready, let's go.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although either of your virtual machines will work equally well for this, all
    you need is a text-mode virtual machine, so there's no need to fire up the Alma
    desktop virtual machine if you don't want to. Toward the end of the chapter, we'll
    be working with some shell scripts. If you don't want to type them in yourself,
    simply download them from our Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following link to see the Code in Action video: [https://bit.ly/3G6nbkD](https://bit.ly/3G6nbkD)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book, I've been using AlmaLinux 8 as a replacement for the soon-to-be
    discontinued CentOS 8\. (Of course, depending upon when you're reading this, CentOS
    8 may have already been discontinued.)
  prefs: []
  type: TYPE_NORMAL
- en: A few days before I started writing this chapter, the stable release of Rocky
    Linux 8 finally became available. Using it is the same as using AlmaLinux, or
    any other RHEL 8 clone for that matter. However, if security is your thing, Rocky
    does have one huge advantage. Unlike the other RHEL 8 clones, Rocky comes with
    a set of OpenSCAP profiles that you can apply either during or after the installation
    of the operating system. As things stand now, Rocky Linux is the only RHEL 8 clone
    that fully supports OpenSCAP. (If you want to learn more about OpenSCAP, be sure
    to check out my other book, *Mastering Linux Security and Hardening*, also from
    Packt Publishing.)
  prefs: []
  type: TYPE_NORMAL
- en: All right, if you're ready, let's get cracking.
  prefs: []
  type: TYPE_NORMAL
- en: Shutting down with systemctl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Shutting down a systemd system is really easy, but there are a few options
    that you might not know about. Let''s start with the basic command to shut down
    and power off a machine, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'So, what exactly is happening here? If you open the `systemctl` man page and
    scroll down to the `poweroff` item, you''ll see that this command starts `poweroff.target`,
    which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the `[Unit]` section, you see that this *requires* `systemd-poweroff.service`,
    which means that this service will now get started. At the bottom of the `[Unit]`
    section, you will see two new parameters. The `JobTimeoutSec=30min` line gives
    systemd plenty of time to gracefully shut down all running services before it
    turns off the power. The `JobTimeoutAction=poweroff-force` line means that if
    all of the services haven't gracefully shut down within that 30-minute window,
    then systemd will turn off the power regardless. In the `[Install]` section, we
    see the `Alias=ctrl-alt-del.target` line. That seems a bit odd because the *Ctrl*
    + *Alt* + *Del* key sequence is for rebooting a machine, not for shutting it down.
    It's not just an Ubuntu oddity this time – it's the same way on the Alma machine.
    However, this is easy to explain. It's just that if the system hangs hard during
    a shutdown, doing the *Ctrl* + *Alt* + *Del* key sequence 7 times within 2 seconds
    will force the machine to do a reboot. You can then just boot to the GRUB command
    prompt, and shut the machine down from there. (You can read more about *Ctrl*
    + *Alt* + *Del* under the `systemd` man page.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember, using *Ctrl* + *A**lt* + *Del* to reboot a machine doesn''t require
    root privileges. That''s not normally a problem, because mission-critical servers
    should be locked away in a secure room where only authorized personnel can get
    to them. Even so, you might want to place restrictions on the ability to reboot
    servers. If this is the case, disable the *Ctrl* + *Alt* + *Del* reboot feature
    by masking `ctrl-alt-del.target`. The command to do that is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, you can do *C**trl* + *Alt* + *Del* key sequences until the end of time,
    and nothing will happen.
  prefs: []
  type: TYPE_NORMAL
- en: 'On a desktop machine with a graphical interface, the *Ctrl* + *Alt* + *Del*
    key sequence is controlled by the desktop configuration, which might be different
    across various desktop environments. On the Alma machine with its Gnome 3 environment,
    doing *Ctrl* + *Alt* + *Del* brings up the normal shutdown menu, which looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_10.1_B17491.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – The Gnome 3 Power Off menu on the Alma machine
  prefs: []
  type: TYPE_NORMAL
- en: Masking `ctrl-alt-del.target` on a desktop machine does not affect this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '`systemd-poweroff.service` only has a `[Unit]` section, which we see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This service requires `shutdown.target`, `umount.target`, and `final.target`.
    If we look in the unit files for these targets, we can see that they don''t appear
    to do anything. For example, here''s what the `shutdown.target` file looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Our good friend `strings` shows us that `shutdown.target` is defined in the
    `systemd` executable file, as we see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The same thing is true of `umount.target`, as we see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we have `final.target`, as we see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Although it also doesn''t appear to be doing anything, it''s not defined in
    the `systemd` executable file, as we see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'So, I don''t know where `final.target` is defined, but that''s okay. For our
    current topic, it''s not important. I also couldn''t find any information about
    what `final.target` actually does, other than this short blurb in the `systemd.special`
    man page:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"A special target unit that is used during the shutdown logic and may be used
    to pull in late services after all normal services are already terminated and
    all mounts unmounted."*'
  prefs: []
  type: TYPE_NORMAL
- en: I don't know what those *late services* are supposed to be, but again, that's
    okay. For our present discussion, it doesn't matter.
  prefs: []
  type: TYPE_NORMAL
- en: According to the `systemctl` man page, a `systemctl poweroff` command is supposed
    to send a `wall` message to all users who are logged into the system. However,
    that is incorrect. No message gets sent out, and there's no option switch to make
    it happen.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, a `systemctl poweroff` command would shut down running services and
    unmount all mounted filesystems in an orderly manner. Using the `--force` option
    would shut down the system without taking time to shut down the services first.
    This could be handy if you have a service that's hung up and refuses to stop normally.
    Using the `--force` option *twice* would shut down the system without taking time
    to either shut down services normally or to unmount any mounted filesystems. Of
    course, this isn't recommended unless it's an absolute emergency, because it could
    corrupt your filesystem and cause data loss. On the other hand, using `--force
    --force` could be handy if the `systemd` process has crashed. This is because
    `--force --force` allows the `systemctl` executable to shut down the system without
    having to contact the `systemd` process.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, let's *power off* the discussion about `poweroff`. Let's now talk briefly
    about halting a system.
  prefs: []
  type: TYPE_NORMAL
- en: Halting with systemctl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using a `sudo systemctl halt` command halts the operating system, but it doesn't
    power down the computer. Because I can read your mind, I know that you're saying,
    *But Donnie. Why would I want to halt the operating system but leave the computer
    running?* Well, I don't know. That's something that I've never figured out in
    my entire Linux career.
  prefs: []
  type: TYPE_NORMAL
- en: But seriously, `halt.target` works pretty much the same as `poweroff.target`.
    So, I'll leave it to you to look at the associated unit files, if you really want
    to.
  prefs: []
  type: TYPE_NORMAL
- en: All right, let's *reboot* this discussion by talking about rebooting.
  prefs: []
  type: TYPE_NORMAL
- en: Rebooting with systemctl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You'll never guess what the command is to reboot a system. Okay, if you said
    `sudo systemctl reboot`, then you win today's grand prize. (Sadly, the grand prize
    consists of absolutely nothing, except for the good feeling that comes with giving
    a correct answer.)
  prefs: []
  type: TYPE_NORMAL
- en: Again, I'll leave it to you to look at the associated `reboot.target` files,
    because this also works pretty much the same as `poweroff.target`. One difference
    to note is that this time, the `Alias=ctrl-alt-del.target` line in the `[Install]`
    section actually does something for us. On a text mode machine, doing a *Ctrl*
    + *Alt* + *Del* sequence at the local terminal will reboot the machine. So yes,
    that old three-finger salute is still with us. (You don't even need to enter an
    admin password to make this work. So, fortunately, doing *Ctrl* + *Alt* + *Del*
    from a remote terminal doesn't work.) If you want to try this on your VirtualBox
    virtual machine, you'll need to click on the virtual machine's **Input** menu,
    click on **Keyboard**, and then click on **Insert Ctrl-Alt-Del**.
  prefs: []
  type: TYPE_NORMAL
- en: Once again, I'm reading your mind. I know that you're saying, *But Donnie. These
    systemctl commands don't give us the cool options that we used to have with the
    old shutdown commands.* Yeah, you're right, which is why I still use the old `shutdown`
    commands. So, let's talk about them next, shall we?
  prefs: []
  type: TYPE_NORMAL
- en: Using shutdown instead of systemctl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The old `shutdown` commands that we used on SysV systems came with some cool
    options. We could schedule a shutdown or reboot for some time in the future, cancel
    a scheduled shutdown, and broadcast a message about an impending shutdown or reboot
    to all users who were logged into the system. With the `systemctl` commands, you
    can''t do any of that. Fortunately, the old `shutdown` options are still with
    us, in the form of a symbolic link that points to the `systemctl` executable,
    as we see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Even though you can't use the old `shutdown` options with `systemctl`, you can
    use them with the `shutdown` link that points to `systemctl`. (Strange, but true.)
    Now, I realize that you old-timers might know these `shutdown` commands already,
    and that's okay. You won't hurt my feelings if you're tempted to just skim over
    this. On the other hand, if you bear with me until the end, you'll see some cool
    stuff that you might not currently know about. If you're a Linux newbie, you're
    almost sure to find some useful information here. So, let's go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever you do a `shutdown` command, you can specify the time at which you
    want the shutdown to occur. For example, to perform an immediate shutdown, just
    do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: On an old SysV system, this command would have just halted the operating system.
    To power down the machine, you would have had to use the `-h` option. On a systemd
    machine, this command powers off the machine, so the `-h` option switch is no
    longer necessary. (Curiously, the `-h` switch is still mentioned in the `shutdown`
    man page, even though it no longer does anything.)
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also specify the time at which you want the shutdown to occur, using
    the 24-hour time format. For example, to shut down the machine at 6:00 P.M., do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'At about 25 minutes before the scheduled shutdown time, the system will start
    sending broadcast messages to all logged-in users, as we see here for Goldie:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The system will continue sending out this broadcast message until the shutdown
    actually occurs. The frequency with which the message gets sent out depends upon
    how soon the shutdown is scheduled to occur. Within the last ten minutes, the
    message will get sent out every minute. Fortunately, Goldie can regain use of
    the command prompt by just hitting the *Enter* key, which will allow her to finish
    what she's doing. (In case you're wondering, *Goldie* is the name of my youngest
    kitty. You'll never guess what color she is.)
  prefs: []
  type: TYPE_NORMAL
- en: 'If you change your mind and want to cancel the shutdown, use the `-c` option
    switch, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also send out your own customized broadcast message by simply placing
    it after the `shutdown` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'At five minutes before the scheduled shutdown time, a `nologin` file will get
    created in the `/run/` directory, as we see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This will prevent any other users from logging in. The next time you boot up
    this system, this `nologin` file will get deleted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Any time you schedule a future shutdown job, a `scheduled` file gets created
    in the `/run/systemd/shutdown/` directory. Look inside the file, and you''ll see
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `USEC=` line specifies the time for the scheduled shutdown, in Unix epoch
    format. If you don''t know when the system is scheduled to shut down and you want
    to find out, you can use a shell script to translate this to human-readable format.
    The first example of this type of script uses a `perl` command to do the actual
    translation. Here''s what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file as `scheduled_shutdown_1.sh`, and set the executable permission,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Schedule a shutdown for whatever time you want, and then run the script. The
    output should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If `perl` isn''t installed on your system or if you''d prefer to not use `perl`,
    then you can use `awk` to perform the translation. The script with `awk` looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Both of these scripts are set up to search for the `scheduled` file, and to
    only run the translation command if the `scheduled` file exists. If the file doesn't
    exist, the script will inform you of that, and then exit gracefully.
  prefs: []
  type: TYPE_NORMAL
- en: 'To reboot a machine, just use `shutdown` with the `-r` option, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: You can schedule a reboot and send custom broadcast messages the same way that
    you would do for a shutdown operation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You old-timers might remember that on SysV systems, there was also an `f` option
    that you could use with the `-r` option. Doing a `sudo shutdown -rf now` command
    would reboot the machine, and would cause an `fsck` operation to be performed
    on the machine's filesystems before mounting them. That `f` option is now gone,
    because systemd systems are set up to always do an `fsck` operation on all supported
    filesystems every time you boot the machine. This happens because `systemd-fsckd.service`
    runs as part of the boot-up process if any supported filesystems are detected.
    (By *supported* filesystems, I mean that `fsck` works on the `ext4` filesystem
    that's the default for Ubuntu, but it doesn't work on the `xfs` filesystem, which
    is the default for RHEL and RHEL clones. So, don't be too disappointed if you
    see that `systemd-fsckd.service` doesn't run on your Alma machine.)
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 7*](B17491_07_Final_NM_ePub.xhtml#_idTextAnchor091), *Understanding
    systemd Timers*, we learned how to set up a job to automatically run when you
    boot up your machine. Now, let's see how to set up a job to run when you shut
    down the machine.
  prefs: []
  type: TYPE_NORMAL
- en: Running a job before shutting down
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's say that you want to have a job automatically run every time you shut
    down your computer. (I'll let you use your imagination about what kind of job
    that could be.) To set that up, just create your own custom service that's `WantedBy`
    `the` `shutdown.target`. Let's check out how.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll demonstrate this by creating a dummy shell script that goes along with
    our new service. In the `/usr/local/bin/` directory, create the `script.sh` file
    with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The first `systemctl list-jobs` command will search through the list of running
    jobs, looking for the `reboot.target.*start*` text string. If the text string
    is found, the `&&` operator will cause the `echo` command to run. The `echo` output
    will go to the `reboot_test.txt` file in the `/root/` directory. However, this
    will never actually happen, because this service will only get activated by `shutdown.target`,
    and not by `reboot.target`. The next line is the same, except it''s looking for
    the `shutdown.target.*start*` text string. If that text string is found, the `echo`
    command will send its output to the `/root/shutdown_test.txt` file. After you''ve
    saved the file, set the executable permission by doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, use `sudo systemctl edit --full --force myscript.service` to create the
    service. Add the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `ExecStart=` line activates our shell script. In the `[Install]` section,
    we see that this service is `WantedBy` the `shutdown.target`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve saved this file, do the normal `sudo systemctl daemon-reload`
    and `sudo systemctl enable myscript.service` operations. To test things out, first
    shut the machine down and then start it back up. You should now see the `shutdown_test.txt`
    file in the `/root/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Next, reboot the machine. This time, you'll see that no file gets created, proving
    that this service will run only for a shutdown, and not for a reboot.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, I think that's about it. Let's wrap this baby up.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As usual, we've seen some cool stuff in this chapter. We started out by looking
    at the `systemctl` commands for shutting down, halting, or rebooting a machine.
    We then saw that the old-style `shutdown` commands still work, and will allow
    you to use the scheduling and messaging features that you've always been used
    to using. We ended by creating a service that would run a job whenever you shut
    down the machine.
  prefs: []
  type: TYPE_NORMAL
- en: I realize that a lot of you might already have been familiar with a lot of what
    I presented in this chapter, but I did present some cool things at the end, and
    I hope that you enjoyed it.
  prefs: []
  type: TYPE_NORMAL
- en: This concludes part 1 of *Mastering systemd*. In part 2, we'll delve into the
    mysteries of *cgroups*. I'll see you there.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the command for rebooting a Linux machine?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) `sudo shutdown now`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) `sudo systemctl -r now`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) `sudo systemctl reboot now`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) `sudo systemctl reboot`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: e) `sudo shutdown --reboot`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What happens 5 minutes before a scheduled shutdown time?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) The `scheduled` file gets created in the `/run/systemd/shutdown/` directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) The `scheduled` file gets created in the `/run/` directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) The `nologin` file gets created in the `/run/systemd/shutdown/` directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) The `nologin` file gets created in the `/run/` directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you schedule a future shutdown, which of the following happens?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) A `nologin` file gets created in the `/run/systemd/shutdown/` directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) A `scheduled` file gets created in the `/run/systemd/shutdown/` directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) A `nologin` file gets created in the `/run/systemd/` directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) A `scheduled` file gets created in the `/run/` directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What could happen if you do a `sudo systemctl poweroff --force --force` command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Using the `--force` option twice would result in an error message.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) The system will ignore the second `--force` option.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) You could damage your filesystem, which could result in data loss.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) If the first `--force` doesn't ensure that the `power off` command works,
    the second one surely will.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: d
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: d
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: b
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: c
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`/tmp/` directory, which gets cleaned out every time you shut down the machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.golinuxcloud.com/run-script-with-systemd-at-shutdown-only-rhel/](https://www.golinuxcloud.com/run-script-with-systemd-at-shutdown-only-rhel/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**How to check the time for a delayed shutdown**: You can find the answers
    to lots of your Linux admin questions with simple DuckDuckGo searches, as I did
    with this. Learn how to use DuckDuckGo. It can be a Linux administrator''s best
    friend:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://unix.stackexchange.com/questions/229745/systemd-how-to-check-scheduled-time-of-a-delayed-shutdown](https://unix.stackexchange.com/questions/229745/systemd-how-to-check-scheduled-time-of-a-delayed-shutdown)'
  prefs: []
  type: TYPE_NORMAL
