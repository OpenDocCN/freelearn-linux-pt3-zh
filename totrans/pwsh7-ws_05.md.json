["```\nsudo apt update\nsudo apt install ./<filename>.deb\n```", "```\nsudo apt update\nsudo apt install code\n```", "```\nsudo snap install code –classic\n```", "```\nInstall-Script Install-VSCode -Scope CurrentUser ; Install-VSCode.PS1\n```", "```\n1 -eq 1\n1 -eq 2\n```", "```\nNew-Item -Path C:\\Temp\\Poshbook -ItemType Directory\nSet-Location -Path C:\\Temp\\Poshbook\nCode .\n```", "```\n$x = 5\nif ($X -gt 4) {\n    Write-Output '$x is bigger than 4'\n}\n```", "```\nif (!($x -lt 4)) {\n    Write-Output ' $x is bigger than 4'\n}\n```", "```\nfor (-not($x -lt 4)) {\n```", "```\nif ($x -lt 4) {\n    Write-Output '$x is smaller than 4'\n}\nelse {\n    <# Action when all if and elseif conditions are false #>\n    Write-Output '$x is not smaller than 4'\n}\n```", "```\nif ($x -lt 5) {\n    Write-Output '$x is less than 5'\n}\nelseif ($x -gt 5) {\n    Write-Output '$x is bigger than 5'\n}\nelse {\n    Write-Output '$x is 5'\n}\n```", "```\nif ($x -lt 5) {\n    Write-Output '$x is less than 5'\n}\nelseif ($x -lt 6) {\n    Write-Output '$x is less than 6'\n}\nelse {\n    Write-Output '$x is 5'\n}\n```", "```\nif ($x -lt 4) {\n    Write-Output ' $x is smaller than 4'\n}\nelse {\n    <# Action when all if and elseif conditions are false #>\n    Write-Output '$x is not smaller than 4'\n}\n```", "```\n($x -lt 4) ? '$x is smaller than 4' : '$x is not smaller than 4'\n```", "```\n$Array  = 1,2,3,4,5\nswitch ($Array) {\n    1 {Write-Output '$Array contains 1'}\n    3 {Write-Output '$Array contains 3'}\n    6 {Write-Output '$Array contains 6'}\n}\n```", "```\n$String = \"Powershell 7\"\nSwitch -Wildcard -CaseSensitive ($String) {\n    7 { Write-Output 'contains 7' }\n    \"Pow*\" { Write-Output 'contains Pow'}\n    'pow*' { Write-Output 'contains pow'}\n    '*she*' { Write-Output 'contains she'}\n    {$String.Length -gt 7} { Write-Output \"long string\"}\n    Default {Write-Output \"No powershell here\"}\n}\n```", "```\nforeach ( $element in <expression> ) {<scriptblock>}\n```", "```\n$l = 0 ; foreach ($f in Get-ChildItem *.ps1) {$l += $f.length} ; $l\n```", "```\ndo {<scriptblock>} until/while (<condition> is true)\n```", "```\n$number = 0\ndo { $number ++\nWrite-Output \"The number is $number\"\n} while ($number -ne 5)\n```", "```\n$number = 0\nDo {Write-Host \"The number is not Zero\"}\nWhile ($number -ne 0)\n```", "```\n$number = 0\ndo { $number ++\nWrite-Host \"The number is $number\"\n} until ($number -eq 5)\n```", "```\nwhile (<condition> is true) {<scriptblock>}\n```", "```\n$number = 0\nwhile ( $number -ne 5) { $number ++\nWrite-Host \"The number is $number\"}\n```", "```\nfor (<Iterator> ; <condition> ; <iteration>) { <scriptblock> }\n```", "```\nfor ($i = 0 ; $i -lt 5 ; $i ++) {Write-Host $i}\n```", "```\n$fruits = @('banana', 'apple', 'pear', 'plum')\nfor ($i = 1 ; $i -lt ($fruits.length) ; $i ++) {\n    Write-Host $fruits[$i] \"is after\"  $fruits[$i-1]\n}\n```", "```\n$fruits = @('banana', 'apple', 'pear', 'plum')\nforeach ($fruit in $fruits) {$fruit = \"tasty $fruit\"}\nWrite-Host $fruits\n```", "```\n$fruits = @('banana', 'apple', 'pear', 'plum')\nfor ($i = 0 ; $i -lt ($fruits.length) ; $i ++) {\n    $fruits[$i] = \"tasty $($fruits[$i])\"\n}\nWrite-Host $fruits\n```", "```\n$number = 0\nwhile ( $number -ne 5) { $number ++\nif ($number -eq 3) {\n    break\n    }\n    Write-Host \"The number is $number\"\n}\n```", "```\n$number = 0\nwhile ( $number -ne 5) { $number ++\nif ($number -eq 3) {\n    continue\n    }\n    Write-Host \"The number is $number\"\n}\n```", "```\n$String = \"Powershell 7\", \"python\"\nswitch -Wildcard -CaseSensitive ($String) {\n    {$_} {Write-output \"processing $_ :\"}\n    '*7' { Write-Output 'contains 7'}\n    \"Pow*\" { Write-Output 'contains Pow'}\n    'pow*' {Write-Output 'contains pow'}\n    '*she*' { Write-Output 'contains she'; continue}\n    {$String.Length -gt 7} { Write-Output \"long string\"}\n    {$String.Length -lt 7} {Write-Output \"No powershell here\"}\n}\n```", "```\n[int]$Hidden = Get-Random -Minimum 1 -Maximum 101\n```", "```\nWrite-Host \"Let's play the Brucie Game! Guess the hidden number between 1 and 100\\. give me a number below\"\n$guess = [int] (Read-Host)\n```", "```\n[int]$Hidden = Get-Random -Minimum 1 -Maximum 101\nWrite-Host \"Let's play the Brucie Game! Guess the hidden number between 1 and 100\\. give me a number below\"\n$guess = [int] (Read-Host)\nif ($guess -ne $hidden) {\n    <# Action to perform if the condition is true #>\n} else {Write-Host \"You Win\"}\n```", "```\nif ($guess -ne $hidden) {\n    <# Action to perform if the condition is true #>\n    if ($guess -lt $hidden) {\n        Write-Host \"Higher!\"\n    } else { Write-Host \"Lower!\"}\n} else {Write-Host \"You Win!\"}\n```", "```\n[int]$Hidden = Get-Random -Minimum 1 -Maximum 101\nWrite-Host \"Let's play the Brucie Game! Guess the hidden number between 1 and 100.\ngive me a number below\"\n$guess = 0\nwhile ($guess -ne $hidden) {\n    $guess = [int] (Read-Host)\n    if ($guess -lt $hidden) {\n        Write-Host \"Higher!\"\n    } elseif ( $guess -gt $hidden) { Write-Host \"Lower!\"}\n}\nWrite-Host \"You Win\"\n```", "```\n    $processes = Get-process | foreach ($process in $processes) {$process.name}\n    ```"]