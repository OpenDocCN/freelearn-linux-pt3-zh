- en: '*Chapter 7*: Documentation, Monitoring, and Logging Techniques'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第7章*：文档、监控和日志技术'
- en: Now we are getting into the real *meat* of system administration work, although
    I think that most people would feel like this is the *potatoes*. In this chapter
    we are going to be dealing with all of the parts of system administration that
    no one can see on our servers. These are those nearly invisible components of
    our jobs that are so critical and can do so much to separate the juniors from
    the seniors; the extra steps that make all of the difference when things start
    to go wrong.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们进入了系统管理工作的真正*核心*部分，尽管我认为大多数人会觉得这只是*基础*。在本章中，我们将处理那些没人能在我们的服务器上看到的系统管理部分。这些是我们工作中几乎看不见的组成部分，虽然它们至关重要，但却能将初级人员与高级人员区分开来；当事情开始出错时，这些额外的步骤能带来决定性的差异。
- en: 'In this chapter we are going to learn about the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下内容：
- en: 'Modern Documentation: Wiki, Live Docs, Repos'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现代文档：Wiki、实时文档、代码库
- en: Tooling and Impact
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具和影响
- en: Capacity Planning
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容量规划
- en: Log Management and Security
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志管理和安全
- en: Alerts and Troubleshooting
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警报和故障排除
- en: 'Modern documentation: Wiki, live docs, repos'
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代文档：Wiki、实时文档、代码库
- en: The thing about documentation is that everyone admits that it is important,
    everyone talks about it, and almost no one does it or if they do, they don't keep
    it up to date. Documentation is boring, often harder than it seems to do well,
    and because almost no management will ever follow up and verify it, extremely
    easy to ignore. No one ever gets promoted because of excellent documentation,
    no one throws documentation parties, and no one talks about it on their curriculum
    vitae. Documentation just is not cool enough for people to want to spend time
    talking about.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 关于文档的一点是，大家都承认它很重要，大家都在谈论它，但几乎没有人去做，或者即使做了，也没有保持更新。文档无聊，往往比看起来更难做得好，而且由于几乎没有管理层会跟进并验证它，极其容易被忽视。因为优秀的文档没有人会因此晋升，没有人举办文档派对，也没有人会在简历上提到它。文档就是没有足够酷，人们不愿花时间讨论它。
- en: Documentation is, however uncool it might feel, amazingly important for so many
    reasons. It can go far for moving someone from being an acceptable system administrator
    to being a great one.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管文档可能感觉不太酷，但它在许多方面都非常重要。它能够极大地帮助一个人从合格的系统管理员变成一个优秀的系统管理员。
- en: Documentation does some interesting things. Of course, it allows us to recall
    how systems work and what tasks need to be done to them. It allows us to hand
    off tasks to others. It protects the business should we go on vacation, get sick,
    or move on to greener pastures or even retire. But beyond these obvious points,
    documentation allows us, forces us in fact, to think differently about our systems
    that we maintain.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 文档具有一些有趣的功能。当然，它可以帮助我们回忆起系统如何运作以及需要执行哪些任务。它允许我们将任务交接给他人。如果我们度假、生病、跳槽甚至退休，它还能够保护公司。但除了这些显而易见的点外，文档实际上迫使我们以不同的方式思考我们所维护的系统。
- en: 'In the software engineering world, a new technique of writing tests before
    writing the functions that they test has become popular and has shown that it
    can force people to think differently about how they approach problem solving
    and can lead to greater efficiency. We have very similar benefits in system administration.
    Approaching documentation more aggressively can lead to faster processes, better
    planning, less wasted time, and fewer mistakes. Taking a documentation-first approach,
    that is writing documentation before systems are built or configured, can help
    us think differently about our system designs and to document thoroughly: An intentional
    process of documenting what should be, rather than attempting to document what
    we did. This provides a wholly different way of thinking, and a way to double
    verify veracity, and an actual process to encourage completeness of documentation.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件工程领域，编写测试用例再编写要测试的功能这一新技术已变得流行，并且证明它能够促使人们以不同的方式思考如何解决问题，从而提高效率。在系统管理中，我们也有类似的好处。更积极地进行文档编写能带来更快的流程、更好的规划、更少的时间浪费和更少的错误。采取“文档优先”的方法，即在系统构建或配置之前先编写文档，能帮助我们以不同的方式思考系统设计，并进行充分的文档记录：这是一个有意识的文档编写过程，目的是记录应该做的事情，而不是记录我们做过的事情。这提供了一种完全不同的思维方式，一种验证真实性的方式，以及一种促进文档完整性的实际过程。
- en: If we force ourselves to document everything before we enter it into a system,
    we can improve our chances of having accurate and complete data. Avoiding the
    need to go back and attempt to remember everything that was needed or done on
    a system is important. Using a document first process we have an opportunity to
    catch missed documentation at the time that we go to use it, which may only be
    a few minutes later. If we work first and then document it, it is very easy to
    forget small details and there is no triggering event to remind us to verify that
    something is written. Alternatively, if we document first, we have the moment
    when we need to put data into a system or a configuration to make. We have a triggering
    event, the actual moment of entering configuration data to remind us that we should
    have pulled that out of a document. It is not foolproof, only more reliable than
    typical processes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们强迫自己在将信息输入系统之前就进行文档记录，我们可以提高数据准确性和完整性的机会。避免回过头去试图记住在系统上所需的或已完成的所有内容是很重要的。使用文档优先的流程，我们有机会在实际使用文档时捕捉到遗漏的部分，这可能仅仅是在几分钟之后。如果我们先工作再进行文档化，就很容易忘记一些小细节，而且没有触发事件提醒我们验证文档中是否有遗漏。相反，如果我们先进行文档化，当需要将数据输入系统或配置时，就会有一个触发事件，提醒我们应该从文档中提取出相关内容。这并非万无一失，但比传统流程更为可靠。
- en: No one really disputes, at least not in polite company, that documentation is
    needed or that it is one of the most important things that we can do working as
    system administrators, or really working in information technology at all. It
    is practically a mantra that we repeat, yet few of us really internalize this
    decision. Instead, we pay lip service to the ideology of documenting everything
    and still push off documentation as a secondary concern that we might do tomorrow
    if, and only if, we get bored during some mythical free time. This is where things
    break down. We cannot simply claim to believe that documentation is all important,
    we have to truly believe it and act accordingly.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 没有人真正反对，至少在礼貌的场合中不会反对，文档是必要的，或者它是我们作为系统管理员，甚至在信息技术领域工作的过程中最重要的事情之一。它几乎成了我们反复提到的口头禅，然而很少有人真正将这个决定内化。相反，我们只是口头上承认文档化一切的重要性，却依旧将文档作为次要问题推迟到明天做，前提是如果在某个虚构的空闲时间感到无聊时再做。这正是问题所在。我们不能仅仅声称相信文档至关重要，我们必须真正相信并相应地采取行动。
- en: We can talk all day about the importance of documentation, but all that really
    matters is taking that knowledge and putting it into action, however that works
    for you and your organization. To make that more likely to be successful we need
    to use good documentation tools. Having a high barrier to documentation encourages
    us to avoid it or to see it as too time consuming to do at the correct time. If
    we make documentation fast and easy, we are much more likely to find ourselves
    just doing it, perhaps even enjoying it to some degree. I know that I am personally
    very satisfied finding my documentation to be complete and up to date - having
    that satisfaction of knowing that I could show it to someone, at any time, and
    feel good about what is there.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以整天讨论文档的重要性，但真正重要的是将这些知识付诸实践，无论对你和你的组织来说，这种实践的方式是什么。为了更有可能取得成功，我们需要使用好的文档工具。高门槛的文档要求会让我们回避它，或者认为它在正确的时间完成太过耗时。如果我们让文档变得快速且简单，我们更可能会去做，甚至可能在某种程度上享受这个过程。我个人知道，当我的文档完整且及时更新时，我感到非常满意——有那种随时可以把它展示给别人，并且对其中的内容感到自豪的满足感。
- en: 'In choosing a platform for documentation we have many considerations. How will
    the documentation be stored, backed up, protected, secured, and accessed? What
    kind of data will be stored: text, audio, images, video, or code? How many people
    will use it? Do you need to make it accessible inside an office? In multiple offices?
    Globally? Will third parties need to access it?'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择文档平台时，我们需要考虑许多因素。文档将如何存储、备份、保护、安全、访问？将存储什么类型的数据：文本、音频、图像、视频还是代码？将有多少人使用它？你是否需要在办公室内部访问它？在多个办公室之间？全球范围内？是否需要第三方访问它？
- en: Wikis
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 维基
- en: Over the last two decades, the wiki has arisen to be the de facto tool for documentation
    of all sorts. Wikis are designed around being fast and easy to edit and at this
    they excel. Wikis also traditionally use simple markup languages, like the MarkDown
    language, that make it easy to store exact text and technical data without it
    being manipulated by a formatting system. This creates a minor learning curve
    but rewards a small amount of very standard learning with the ability to make
    very accurate, well formatted documents quickly.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的二十年里，维基已经成为文档的事实标准工具。维基的设计围绕快速和易于编辑展开，而在这方面它表现得尤为出色。维基传统上还使用简单的标记语言，例如MarkDown语言，这使得它能够在不被格式化系统篡改的情况下精确存储文本和技术数据。这会带来一个小小的学习曲线，但通过学习一些非常标准的技巧，能迅速制作出非常精确、格式良好的文档。
- en: The wiki format is all about simplicity - the simplest possible system that
    still allows for enough formatting to be able to be used for nearly any documentation
    task. This simple format makes it easy to have a variety of wiki products on the
    market that satisfy nearly any specific need. From small, light, and free open-source
    products that you can run yourself to large, hosted commercial offerings that
    you simply sign up for and use. It covers nearly all bases. Organizations of any
    size can use it effectively and there is nearly always a wiki option that integrates
    with other systems that you have.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 维基格式注重简单——尽可能简单的系统，仍然允许足够的格式化，足以用于几乎任何文档任务。这种简单的格式使得市场上有各种各样的维基产品，能够满足几乎任何特定需求。从小型、轻量级的免费开源产品，你可以自己运行，到大型的托管商业产品，你只需要注册并使用。它几乎涵盖了所有的需求。任何规模的组织都可以有效使用，并且几乎总是有与其他系统集成的维基选项可供选择。
- en: 'A wiki will generally suffer from a need for some degree of organization which
    is not native to the platform. The strength of a wiki, that it is fast and flexible,
    is also a great weakness: it is just far too easy to start to throw data someplace
    that it does not belong and to leave no trail as to how to find the information
    again. Some wikis will go above and beyond the basics and include meta data tagging
    options or structured data organization options. These are the exception, not
    the norm.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 维基通常会面临一定的组织需求，而这一点并不是平台的本地特性。维基的优势在于它既快速又灵活，但这也是它的一个重大弱点：数据过于容易被丢到不属于它的位置，并且没有留下任何能够再次找到该信息的痕迹。有些维基会超越基本功能，包含元数据标签选项或结构化数据组织选项。这些都是例外，而不是常态。
- en: Wikis have, for a number of years, been used as a component of or even the basis
    for larger products. A great example of this is Microsoft's SharePoint which uses
    a wiki engine as its core rendering engine and all of its interface details are
    simply advanced components being rendered on top of a wiki.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，维基一直作为更大产品的组成部分，甚至是基础组件。一个很好的例子是微软的SharePoint，它使用维基引擎作为核心渲染引擎，所有的界面细节实际上都是在维基之上渲染出来的高级组件。
- en: An issue typical to wikis is that they are rarely able to have the same data
    modified by multiple people at the same time. Their simplistic design often assumes
    that they will be treated quite simply - a single author, as the only reader,
    during the time of edits. This makes a wiki more useful in single user environments,
    or environments where users rarely use the documentation platform at the same
    time, or in organizations where different users tend to be segmented off from
    one another so that they will use different documentation pages at different times.
    If your team needs to have multiple people making active edits, or viewing updating
    information, in real time of the same data then other documentation options are
    likely going to be better.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 维基的一个典型问题是，它们很少能够让多个用户同时修改相同的数据。它们的简化设计通常假设在编辑期间会有一个简单的使用场景——单一作者，唯一的读者。这使得维基在单用户环境中更加有用，或者在用户很少同时使用文档平台的环境中，或者在不同用户往往彼此隔离的组织中，这样他们就会在不同时间使用不同的文档页面。如果你的团队需要多个人同时进行实时编辑或查看更新的信息，那么其他文档选项可能会更适合。
- en: Live docs
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实时文档
- en: 'The newest way to approach documentation feels much like a step backward: word
    processor documents. Yes, you read that correctly. Hear me out.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最新的文档处理方式看起来更像是倒退了一步：文字处理器文档。是的，你没看错。听我慢慢道来。
- en: Traditionally, that is in the late 1990s and early 2000s, the idea that you
    would use a word processor document as documentation seemed ridiculous unless
    you were such a tiny company that you only had one person who would ever need
    to use and access these documents and then it was reasonable as it made storing
    everything as a file relatively easy. This has changed heavily in the last several
    years as new technologies have turned nearly all mainstream word processors into
    online, web-based, multi-user tools that only resemble early word processors in
    their superficial capacity, but not in usability or technology.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，在90年代末和2000年代初，使用文字处理文档作为文档资料似乎是荒谬的，除非你是一个非常小的公司，只有一个人需要使用和访问这些文档，这种情况下，存储所有内容为文件相对容易。近年来，随着新技术的发展，几乎所有主流文字处理器已经变成了在线、基于
    Web 的、多用户工具，这些工具在表面上仍然像早期的文字处理器，但在可用性或技术上大有不同。
- en: These next generation document systems provide a surprisingly powerful and robust
    mechanism to use for documentation purposes. While there is no single universal
    standard for how these systems should behave, a set of conventions have arisen
    that are sensible and are followed by all major systems and are available both
    commercially and in free, open-source packages as well as in hosted or self-hosting
    modes. Of the greatest importance to us are the ideas that these live documents
    are able to be edited by multiple users at the same time, show changes as they
    are made in real time, have secure access controls, track changes, and use web
    interfaces that are easily published online or anywhere that they are needed,
    as well as, being able to output documentation to an easily portable or transferable
    set of formats.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这些下一代文档系统提供了一个令人惊讶的强大且稳健的机制，供文档用途使用。虽然没有统一的标准规定这些系统应如何运作，但一套合理的约定已经出现，并且被所有主要系统遵循，这些系统既有商业版，也有免费开源版本，并且可以在托管或自托管模式下使用。对我们来说，最重要的是这些实时文档能够被多个用户同时编辑、实时显示更改、拥有安全的访问控制、跟踪更改，并且使用可以轻松在线发布或在任何需要的地方发布的
    Web 界面，同时能够将文档输出为易于携带或转移的多种格式。
- en: Modern document handling systems like these will often times use a database
    behind the scenes, rather than resorting to sets of individual documents, and
    only expose individual documents as views into a single, large data set rather
    than truly individual sets of data. These systems are becoming increasingly powerful
    and can fit easily into other document management or replacement workflows. Nearly
    all organizations today are already tackling the need for modern document systems
    in other parts of the business, and these will easily be systems into which system
    documentation can be added without incurring any additional cost or effort. Doing
    more with the systems you have to maintain already is a great way to get high
    value at low cost.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现代文档处理系统，如此类系统，通常会在后台使用数据库，而不是依赖于一组单独的文档，只将单独的文档作为一个单一、大型数据集的视图，而不是完全独立的数据集。这些系统变得越来越强大，可以轻松融入其他文档管理或替代工作流程。今天几乎所有的组织都已经在处理其他业务部分对现代文档系统的需求，这些系统可以轻松地将系统文档加入其中，而不会产生任何额外的成本或努力。利用已有系统进行更多操作，是以低成本获得高价值的好方法。
- en: Because these modern document systems allow for multiple users on the same document
    at the same time, they are especially useful for times when you have a multi-person
    team working on a single customer or system at the same time and the documentation
    needs to be shared. That way one person making a change keeps the data on everyone's
    screens constantly updated. The documentation system itself becomes a mechanism
    for team collaboration instead of being a risk of using outdated data because
    someone did not know to refresh their view.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些现代文档系统允许多个用户同时在同一文档上进行编辑，它们在多个团队成员同时为单个客户或系统工作时尤其有用，而文档需要共享。在这种情况下，一个人所做的更改会保持所有人屏幕上的数据实时更新。文档系统本身变成了团队协作的机制，而不是因为某个人没有刷新视图而使用过时数据的风险。
- en: Alternative interfaces to similar data
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 类似数据的替代界面
- en: As these kinds of tools have become more and more popular, alternative interfaces
    to similar database drive document data have started to arise. Popular alternative
    formats like notepad applications are beginning to become more popular. These
    formats are less well known than traditional word processing and spreadsheet tools
    but can be very good for system documentation.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 随着这类工具越来越受欢迎，针对类似数据库驱动文档数据的替代界面开始出现。像记事本应用这样的流行替代格式开始变得更加流行。这些格式比传统的文字处理和电子表格工具知名度低，但对系统文档非常有用。
- en: Because of the multi-media and often changing ad hoc nature of documentation,
    journal-style applications can be ideal. Over time I expect to see more and more
    applications designed around flexible documentation to become more mainstream.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于多媒体和经常变化的临时性质的文档，期刊风格的应用可能是理想的选择。随着时间的推移，我预计会看到更多围绕灵活文档设计的应用成为主流。
- en: Personally, I have become a large fan of these systems. They utilize standard
    tools that nearly all staff know already and tools that are likely to be already
    being used for many other purposes and repurposes them in a way that is surprisingly
    well suited for them. Less retraining, fewer special case tools to manage, and
    easy access and usability by teams that may use the documentation less often.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 就我个人而言，我已经成为这些系统的忠实粉丝。它们利用几乎所有员工都已经熟悉的标准工具，这些工具很可能已经被用于许多其他用途，并重新调整它们的方式，非常适合它们。少量的再培训，更少的特例工具管理，以及易于访问和团队使用频率较低的易用性。
- en: Repos
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仓库
- en: A new standard for documentation is to use online code repository systems. These
    systems generally work from a collection of text files that are loosely formatted
    but they get updated and version controlled centrally. This is a very different
    approach than what is taken with the examples given previously. This system does
    not address live collaboration between team members, but does allow for offline
    usage quite easily using standard tools used in the development space.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 文档化的新标准是使用在线代码仓库系统。这些系统通常从一组松散格式的文本文件开始，但它们会集中进行更新和版本控制。这与之前给出的示例方法非常不同。这个系统并不解决团队成员之间的实时协作，但确实很容易使用标准开发空间中使用的工具进行离线使用。
- en: The real reason that the use of version-controlled code repositories has become
    an area of interest for documentation is that it is already being used heavily
    in the development and DevOps spaces and so is a natural system to adapt for use
    in IT documentation. The ease of using documentation offline using local reading
    and writing tools, and the ability to also have online copies makes it very flexible.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 文档领域对版本控制代码仓库的使用成为关注点的真正原因是，它已经在开发和DevOps领域被广泛使用，因此是一个自然的系统，适合用于IT文档化。使用本地阅读和写作工具轻松使用文档离线，并且还能够在线拷贝，使其非常灵活。
- en: There are beginning to be ways to even use this type of documentation in a live,
    shared manner with some of the newer editing tools. Likely we will see this advance
    significantly in the near future as more focus is put on expanding the robustness
    of this process.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在开始有办法甚至使用这种类型的文档在一些较新的编辑工具中以实时共享的方式使用。随着更多关注于扩展这一过程的鲁棒性，我们可能会看到这方面的显著进展。
- en: Ticketing systems
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 票务系统
- en: 'Traditional documentation as we have been discussing is really state documentation:
    documenting the way that systems *are* or, at least, *should be*. There is much
    more to document. The other system that we should use is a ticketing system or,
    to think of it another way, *change documentation*.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们讨论的传统文档，实际上是状态文档：记录系统*是*或至少*应该是*的方式。还有更多需要记录的内容。我们应该使用的另一个系统是一个票务系统，或者换个角度考虑，*变更文档*。
- en: Tickets are a form of documentation just like your wiki might be. Unlike a wiki,
    tickets are focused on recording events in time. They track errors, problems,
    issues, requests, observations, reactions, changes, decisions, and so forth. Unlike
    traditional documentation that is a final document showing the results of all
    decisions and changes made until the current time, your ticket system should reflect
    the history of your systems and workloads to allow you to, theoretically, *play
    back* events as they happened to not only know what changes were made to a system
    but also who made them, who requested them, who approved them, and why.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 票务系统是一种文档化工具，类似于你的wiki。与wiki不同，票务系统专注于记录事件发生的时间点。它们记录错误、问题、请求、观察、反应、变化、决策等等。与传统文档不同，后者是最终的文档，展示了所有决策和变更的结果，直到当前时间；而你的票务系统应该反映你的系统和工作负载的历史，从而理论上可以*回放*事件的发生，不仅知道系统做了哪些更改，还能知道是谁做的、是谁请求的、谁批准的，以及为什么要做这些更改。
- en: Tickets, when used properly, play a huge role in the lives of a system administrator.
    While possible to function without a good ticketing system, this will add so much
    unnecessary work. Using tickets to track tasks as they get assigned, the process
    of completing the work, and the final disposition provides the missing half of
    the documentation puzzle.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当票务系统使用得当时，它在系统管理员的工作中扮演着重要角色。虽然没有一个好的票务系统也能运作，但这样会增加很多不必要的工作。使用票务系统追踪分配的任务、完成工作的过程以及最终的处理结果，提供了文档化中缺失的一部分。
- en: If your business does not have or is unsupportive of getting a ticketing system,
    consider implementing a private one just for yourself. Ticket software comes in
    many shapes and forms and free software and services are available that work quite
    well if spending money on upgraded products or more extensive features is not
    an option. You can think of your ticket system as a personal work journaling mechanism
    if that makes more sense.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的公司没有票务系统或不支持票务系统，考虑为自己实施一个私人票务系统。票务软件有很多种形式和种类，如果无法花费资金升级产品或增加更多功能，也有免费的软件和服务可以使用，效果相当不错。如果你觉得更合适，可以把你的票务系统当作一种个人工作日志工具。
- en: You do not have to go overboard attempting to integrate tickets into your company's
    greater workflow if you cannot get top level buy in or it does not make sense
    for how the organization should work, but it is hard to imagine any IT department
    that would not benefit dramatically for being able to track IT change events,
    including denied events, to be able to demonstrate the history and activity of
    the department and to be able to trace potential issues caused by changes in our
    systems.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果无法获得高层的支持，或者它与公司运营的方式不符，你不必过度尝试将票务系统融入到公司更大的工作流程中，但很难想象任何一个IT部门不会从能够追踪IT变更事件中受益，包括被拒绝的事件，这能帮助展示部门的历史和活动，追踪由系统变更引发的潜在问题。
- en: Like traditional documentation, ticketing systems come in all shapes and sizes.
    Play with a few, give them a try, do not be afraid to change to something else.
    Find something that works for you and allows you to effectively document the changes
    that you make, when you made them, how long it took you, why you did it in the
    first place; and all with a minimum of effort.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 就像传统文档一样，票务系统有各种不同的形式和大小。试试看几个不同的系统，给它们一个机会，不要害怕切换到其他系统。找到一个适合你的系统，使你能够有效地记录你所做的更改，何时做的，更改花费了多少时间，为什么要做这些更改；所有这些都尽可能地减少工作量。
- en: Approaching documentation
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何处理文档
- en: Chances are you have some amount of documentation in your job today. Chances
    are even better that what you have is incomplete, out of date, and essentially
    useless. It is okay, nearly all companies suffer from bad documentation. But this
    is a tremendous opportunity for improvement.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能你今天的工作中有一些文档。更有可能的是，这些文档是不完整的、过时的，基本上没有用。没关系，几乎所有公司都面临着文档管理不善的问题。但这也是一个巨大的改进机会。
- en: If you have documentation like most businesses, the best thing is often to literally
    start over. Look over your options, think about how your company will need to
    approach documentation and collaboration and pick an approach. It does not even
    have to be the right one. Any documentation process is good, even if you risk
    having to do it again. Pick a system and try it out. See if it fits the style
    of the data that you need to store, if it is comfortable for you to use, and if
    it allows for the style of collaboration (if any) that your business needs.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你像大多数企业一样拥有文档，最好的做法往往是从头开始。审视你的选项，思考公司如何需要处理文档和协作，并选择一个方法。这个方法甚至不需要是正确的。任何文档处理流程都是好的，即使你可能需要重新做一遍。选择一个系统并试试。看看它是否适合你需要存储的数据风格，使用起来是否方便，并且是否能支持你的企业所需的协作方式（如果有的话）。
- en: Do not try to document absolutely everything right away. Take a single system
    or workload and try documenting that one item in a very good way. Format it to
    look really good. Organize the data to make the data that you need quickly be
    clearly visible and available near the top so that someone trying to address a
    problem does not have to search far to find what they need. Remove redundancy
    and ensure that data exists only one time, in a single, predictable place. Think
    of your documentation like a relational database that needs some normalization,
    and the first major step is organization and the second is removing redundancy.
    Documentation is always hard to maintain, and redundancy of data makes it all
    but impossible. Attempting to change unknown occurrences of the same information
    gives no clue to how to find it all and what needs to be updated.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 不要试图立刻记录所有的内容。从一个系统或工作负载开始，尝试以非常好的方式记录这个项目。将它格式化得好看一些。组织数据，使得你需要的数据可以快速、清晰地在顶部显示，以便在解决问题时，别人不需要到处找才能找到需要的信息。去除冗余，确保数据只出现一次，且出现在单一、可预测的位置。把文档当作一个需要一定规范化的关系型数据库，第一个主要步骤是组织，第二个步骤是去除冗余。文档始终难以维护，数据的冗余几乎让维护变得不可能。试图更改同一信息的未知出现位置，无法提供找到所有信息和需要更新内容的线索。
- en: When you find a system and process that works for you, stick with that. Start
    documenting everything. Make it a huge priority, do nothing without documentation.
    Add tickets and start making everything get tracked.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当你找到适合自己的系统和流程时，就坚持下去。开始记录所有内容。把它作为一项重要任务，做任何事情之前都要有文档。增加工单，并开始让一切都被跟踪。
- en: Maybe you work for a company where documentation is already good. Chances are,
    though, you do not. And if you do, chances are you will never work in a place
    like that again. Good documentation is a rarity even before we consider the importance
    of tickets in the overall documentation equation.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你在一家文档已经做得很好的公司工作。然而，通常情况下，你并不是。即便如此，如果你现在在一个这样的公司工作，可能将来再也不会遇到这样的地方了。良好的文档是稀有的，尤其是在我们还没有考虑到工单在整个文档体系中重要性之前。
- en: 'There are no best practices as to what tools to use or in what format to put
    your documentation, but there are some high-level best practices to consider:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用哪些工具以及以什么格式记录文档，没有最佳实践，但有一些高层次的最佳实践需要考虑：
- en: Use both state and change documentation systems to track all aspects of your
    systems.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用状态和变更文档系统来跟踪你系统的各个方面。
- en: Avoid data redundancy in state documentation systems (it is fine in change systems.)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免在状态文档系统中出现数据冗余（在变更系统中可以出现冗余）。
- en: Keep all documentation up to date and secure.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持所有文档的更新和安全。
- en: Do not document data that can be recreated reliably from other data.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要记录那些可以从其他数据中可靠重建的数据。
- en: It is easy to say that we need to be religious about our documentation, and
    everyone agrees that it is of the utmost importance. Yet actually moving from
    saying it, to doing it, is understandably hard. Management rarely verifies documentation
    as we are working, but they do reward getting other work done and frown upon delays.
    It is unfortunate that often the most important aspects of our careers are not
    seen as important enough or interesting enough for those outside of our field
    and they get deprioritized by people with no knowledge of how they play into what
    we do.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们常常说需要对文档保持“宗教式”态度，大家都同意文档至关重要。然而，实际上从说到做是非常困难的。管理层很少在我们工作时验证文档，但他们会奖励完成其他工作的员工，并且对拖延表示不满。遗憾的是，通常我们职业生涯中最重要的方面，外界的人并不认为它们重要或足够有趣，因此它们往往被没有了解这些内容如何影响我们工作的人所忽视。
- en: In our next section, we will move on from purely manual system tracking to beginning
    to use tools on our systems to measure and track them in a more automated fashion.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将从纯粹的手动系统跟踪转向开始使用工具来测量和跟踪系统，以便以更自动化的方式进行。
- en: Tooling and impact
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具和影响
- en: One of the fundamental natures of physics, as well as a rule that you learn
    straight away in industrial engineering, is that you cannot observe or measure
    events without in some way impacting them. In computing, we face the same problem.
    If anything, we face it far more than in most other places.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 物理学的一个基本性质，以及工业工程中立刻学到的一条规则，是你不能在不以某种方式影响它们的情况下观察或测量事件。在计算中，我们面临着同样的问题。如果有的话，我们面临这一问题的程度比许多其他领域还要严重。
- en: The more that we measure, log, or put metrics on our systems the more of the
    system resources needed for our workloads is taken up by the measurement processes.
    As computers have gotten faster over the years the ability to measure without
    completely crippling our workloads has become more common and now, we often even
    track checkpoints inside of applications in addition to operating system metrics.
    But we always have to maintain an awareness of what this impact is.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对系统进行更多的测量、记录或设置度量标准时，所需的系统资源会更多地被测量过程所占用。随着计算机的速度不断提升，能够进行测量而不会完全拖慢工作负载的能力变得更加普遍，现在我们甚至经常在操作系统度量之外，在应用程序内部追踪检查点。但我们始终需要保持对这种影响的意识。
- en: At some point there is more value to just letting the systems that we have run
    as fast as they can rather than trying to measure them to see how fast they are
    going. A sprinter running flat out is faster than a sprinter running while carrying
    measurement devices to determine their speed. The measurement process works against
    them. However the sprinter getting more feedback might be able to improve with
    the additional knowledge over time. But you will never see someone attempting
    to outrun a charging hippopotamus (they are one of the fastest and most dangerous
    land mammals, you know) first stop to turn on measuring devices. They will just
    run as fast as they can. Knowing how to run faster is only useful if it gives
    you both potentially useful data that by using you can enact improvements and
    you get the chance to implement those improvements. If the hungry hippopotamus
    catches you, all those measurements will be for naught.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，让我们拥有的系统尽可能快速地运行，而不是试图通过测量它们来判断它们的速度，可能更有价值。全速奔跑的短跑运动员比一边跑一边携带测量设备来检测速度的运动员更快。测量过程反而对他们造成阻碍。然而，获取更多反馈的短跑运动员可能会随着额外的知识不断改进。但你永远不会看到有人在试图跑过一只正在追逐的河马时（它们是最快且最危险的陆地哺乳动物之一，你知道的）先停下来开启测量设备。他们只会尽全力跑。知道如何跑得更快只有在它提供了潜在有用的数据，并且通过这些数据你能够实施改进时才有意义。而如果饥饿的河马追上你，那么所有的测量数据都将毫无意义。
- en: Different tools will have very different levels of impact. Some simple everyday
    tools that we use on our systems may have almost no impact at all, but will generally
    give us only an extremely high level view of what the computer is doing. Other
    tools, like log collection, can require a great many resources and can even put
    noticeable strains on networking and storage resources.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的工具会产生截然不同的影响。有些我们在系统中使用的简单日常工具几乎不会产生任何影响，但一般只能给我们提供系统活动的极其高层次的概览。而其他工具，比如日志收集，可能需要大量资源，甚至可能对网络和存储资源造成显著的压力。
- en: Collecting data from a system is not the only activity that uses system resources.
    Collating that data and presenting it in a form useful for humans also requires
    resources, as would shipping that data off to an external system. Each step of
    the process requires that we use more and more resources. All of this is before
    we even consider how much human time may be involved in examining the data, as
    well. It is always tempting to simply opt for the most possible insight and monitoring
    into a system, but unless we can derive true value from that process it is actually
    a negative to do so.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从系统中收集数据并不是唯一占用系统资源的活动。整理这些数据并以对人类有用的形式呈现它也需要资源，向外部系统传输这些数据同样如此。过程的每个步骤都需要我们使用越来越多的资源。在我们考虑检查数据所涉及的人工时间之前，这一切都已经需要大量的资源了。尽管我们总是很容易选择尽可能多地深入观察和监控系统，但除非我们能从这一过程中获得真正的价值，否则这样做实际上是有负面影响的。
- en: In general, we will use a variety of tooling on our systems to provide some
    degree of regular measurement. There are both data collection tools, like the
    sysstat SAR utility, and immediate, *on the spot* observation tools like `top`,
    `htop`, and `glances` that allow us to watch a system's behavior in real time.
    Both kinds of tools deliver a lot of value.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，我们会在系统上使用各种工具来提供一定程度的常规度量。包括像 sysstat SAR 工具这样的数据收集工具，以及 `top`、`htop` 和
    `glances` 等即时的、*现场*观察工具，它们让我们能够实时监控系统的行为。这两类工具都提供了巨大的价值。
- en: Of course, there are a large variety of both free and paid, software and service
    tools that can take your monitoring to another level. Researching these will be
    very beneficial as even the open-source offerings have become amazingly powerful
    and robust. Performance tooling is typically handled locally as it is rarely used
    for alerting or security considerations and using it to perform postmortem investigations
    is often fruitless so incurring the cost of central data collection for performance
    data is not commonly worth it. Centralized tools do exist and can be quite useful.
    When used, these tend to be chosen for ease of use to humans rather than to serve
    a specific technical need. Decentralized tools that can optionally leverage a
    single pane of glass style interface to display data from many locations are quite
    popular for this specific need.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，市场上有大量的免费和付费软件及服务工具，可以将你的监控工作提升到另一个层次。研究这些工具会非常有帮助，因为即便是开源工具，也已经变得异常强大和健壮。性能工具通常在本地处理，因为它们很少用于告警或安全考虑，且用来进行事后调查往往徒劳无功，因此为了性能数据的中央数据收集而产生的成本通常是不值得的。尽管如此，中央化工具仍然存在，并且在某些情况下非常有用。使用这些工具时，通常是为了便于人类操作，而非为了解决特定的技术需求。去中心化的工具能够选择性地利用“单一视图”界面，显示来自多个位置的数据，这些工具在这个特定需求上非常受欢迎。
- en: Netdata
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Netdata
- en: I typically do not want to delve into specific products, but I feel that **Netdata**
    makes for an exceptional use case as a way to demonstrate the variety and power
    of available tools on the market today for Linux system administrators.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我通常不想深入探讨具体产品，但我觉得**Netdata**是一个非常出色的案例，能够展示当今市场上为 Linux 系统管理员提供的各种强大工具。
- en: First, Netdata is free and open source. So as a system administrator who may
    have to justify any software purchases, this is one that can be downloaded and
    implemented to enhance our monitoring abilities without needing any approvals
    or notifications. Installation is also very quick, and very easy.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，Netdata 是免费的且开源的。因此，作为一个系统管理员，可能需要为任何软件购买提供合理解释，而这款工具可以免费下载并实施，从而增强我们的监控能力，而无需任何审批或通知。安装也非常迅速且简单。
- en: Second, Netdata provides crazy gorgeous dashboards right out of the box. These
    make it just more fun to do our jobs, for one thing. If we need to show data to
    management or present it in a meeting, few things are going to look more impressive
    and polished than Netdata dashboards. This is a tool that makes it easier to sell
    the business on what we do.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 第二，Netdata 提供了开箱即用的极具美感的仪表板。这些仪表板让我们的工作变得更加有趣。比如，当我们需要向管理层展示数据或在会议中展示时，几乎没有什么比
    Netdata 的仪表板更能令人印象深刻和精美的了。这是一个让我们更容易向业务推销我们所做工作的工具。
- en: Third, Netdata uses surprisingly few resources. For the amazing graphical output
    that it generates you would never expect such a light utility to be able to pull
    it off.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，Netdata 使用的资源非常少。对于它所生成的惊人图形输出，你永远不会想到这样一个轻量级的工具能够做到这一点。
- en: Fourth, Netdata is decentralized. It runs locally on each server and does not
    send its data off to a central location to be collected. You can make a combined
    view of many systems, but doing so is all handled in the web browser of the viewer
    actively pulling the individual dashboards from each system directly and simply
    displaying disparate systems on one screen. There is no central server used to
    aggregate before display.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 第四，Netdata 是去中心化的。它在每个服务器上本地运行，而不会将数据发送到中央位置进行收集。你可以将多个系统的数据汇总成一个视图，但这个过程完全在查看者的网页浏览器中进行，浏览器会主动从每个系统中拉取单独的仪表板并直接显示不同的系统。没有使用中央服务器来聚合数据后再显示。
- en: I love Netdata as an example of truly useful, free, open source, groundbreaking
    software that makes our everyday experience in system administration better. And
    it shows a pattern that is potentially useable for a great many other products
    and product types to make decentralization more viable than it may first appear.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢以Netdata为例，作为真正有用的、免费的、开源的、开创性的工具，它让我们在系统管理中的日常体验变得更加高效。它展示了一种模式，可能适用于许多其他产品和产品类型，从而使去中心化比初看起来更具可行性。
- en: One of the more important things that you will do as a system administrator
    is learning what tools to use, when, and how to read them. One of the most valuable
    things that I have found over the years is becoming comfortable with what a healthy
    system will look like, both historically and in real time, and being able to look
    at a variety of tools and to get an innate sense of how the system is behaving.
    There is little way to teach this other than talking about the value of observing
    systems at idle, and at standard load and observing what they look like; and of
    course, the better you understand how system components, and software works, the
    more you are able to interpret what you are seeing in a meaningful way.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 作为系统管理员，你要做的一件更为重要的事情就是学习如何选择工具、何时使用以及如何读取它们。我多年来发现的最有价值的事情之一，就是变得熟悉健康系统的表现，无论是在历史记录中还是实时状态中，并且能够通过查看各种工具，直观地感知系统的行为。除了谈论观察空闲系统、标准负载下系统表现的价值之外，很难有其他方法来教会这一点；当然，你对系统组件和软件工作原理的理解越深入，你就越能以有意义的方式解读你所看到的内容。
- en: With enough practice and understanding it can be possible to essentially *sense*
    the behavior of a system and gain a confidence into why a system is behaving as
    it is. This is not something that can be learned from a book and requires putting
    in a lot of time working with systems and paying close attention to what you observe
    from monitoring tools and combining that with what you observe from the system's
    performance and a solid understanding of the interaction of the physical components.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通过足够的练习和理解，基本上可以*感知*一个系统的行为，并对系统为何这样表现有一定的信心。这不是一本书能够教会的内容，而是需要投入大量时间与系统打交道，仔细关注你从监控工具中观察到的内容，并结合系统的性能观察，再加上对物理组件交互的深刻理解。
- en: I find that momentary tools, such as top which is included in nearly all systems
    by default, presents a perfect way to stare at running systems as they perform
    their duties and become accustomed to how CPU utilization will fluctuate under
    appropriate load, how processes will shift around, and how load will vary. Some
    of the most complicated system troubleshooting will sometimes be done with little
    more than staring at changing process lists over time (and performing really well-timed
    screenshots.)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现一些短期工具，比如默认几乎所有系统都包含的`top`，是观察运行中的系统执行任务的完美方式，帮助我们习惯于如何在适当负载下，CPU的使用率如何波动，进程如何变化，负载如何变化。有时，最复杂的系统故障排查仅需通过不断观察进程列表的变化（并适时截图）来完成。
- en: This is an area that can do quite a lot to separate junior from senior system
    administrators. It is far less about knowing the basics as much as truly internalizing
    them and being able to intuitively apply that knowledge on the fly when a system
    is behaving badly or possibly being able to do so based solely on someone describing
    the problem! How drives perform under different conditions, how the CPU is behaving
    under different loads, how caches are hit, how memory is tuned, when is paging
    good or bad, and so forth.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个能够显著区分初级和高级系统管理员的领域。它与了解基础知识的关系远不如将这些知识真正内化，并且能够在系统表现不佳时，或者仅凭别人描述问题的情况下，迅速直觉地运用这些知识！例如，硬盘在不同条件下的表现，CPU在不同负载下的行为，缓存的命中情况，内存的调优，分页何时有利或不利等等。
- en: Understanding all of these factors is an ever-changing target. Each system is
    unique and new CPU schedulers, NUMA technologies, drive technologies, and so forth
    regularly change how systems behave and what our expectations of them should be.
    There is really no substitute for experience, and only one way to get experience.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 理解所有这些因素是一个不断变化的目标。每个系统都是独一无二的，新一代CPU调度器、NUMA技术、硬盘技术等常常会改变系统的表现，以及我们应对它们的预期。经验无可替代，获得经验的唯一途径就是实践。
- en: Choosing tooling can be hard. I tend to stay very light unless I have a workload
    with a very specific need. You should play with many different measurement tools
    to have a good feel for what is available and be ready to choose the right tool
    for you and for the task at hand whenever needed. In many cases for me, the simplest
    tools like **free**, **top**, and the **sysstat suite** are more than adequate
    for almost everything that I do, and they are available on essentially every system
    that I have encountered for over a decade. But on my own systems in my own environment,
    you will often catch me using something a bit more graphical and fun like Netdata
    as well.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 选择工具可能很困难。除非我有非常具体的工作需求，否则我倾向于保持工具的简洁性。你应该尝试使用许多不同的测量工具，以便对可用的工具有一个良好的了解，并随时准备在需要时为自己和当前任务选择合适的工具。对我来说，许多情况下，像**free**、**top**和**sysstat工具集**这样最简单的工具足以应对我所做的几乎所有事情，而且这些工具在我遇到的每个系统中都有超过十年的使用历史。但在我自己管理的系统环境中，你通常会发现我也会使用一些更具图形化和趣味性的工具，比如Netdata。
- en: 'Best Practices:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践：
- en: Learn measurement tooling before you need it and learn to use it quickly and
    efficiently.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你需要它之前学习测量工具，并学会迅速高效地使用它。
- en: Limit your usage of measurement tools to only that which is truly useful. Do
    not impact performance without a good reason.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将测量工具的使用限制在真正有用的工具上。没有充分的理由，不要影响性能。
- en: Now that we have talked about how we measure what our systems are doing, it
    our next section we start using these tools to plan for the future.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了如何衡量我们的系统在做什么，接下来的部分将开始使用这些工具来规划未来。
- en: Capacity planning
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容量规划
- en: When we take our knowledge of system resource usage away from the being in the
    moment and begin to apply it over the long-term aspects of a system, we start
    to think about capacity planning. Capacity planning should be, at least in theory,
    a rather important aspect of system administration. Many organizations will treat
    capacity planning as a non-technical exercise, however, and take it out of system
    administration hands. It is amazing how often I am told by a system administrator
    that they have received hardware that they did not specify and now have to *make
    it work* even though it was designed by someone with no knowledge of how it would
    be used! So much training and knowledge of system design in system administration
    being ignored and critical purchasing being down with no rhyme or reason.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将系统资源使用的知识从眼前的状态中抽离出来，并开始将其应用于系统的长期方面时，我们便开始思考容量规划。容量规划应该至少在理论上是系统管理中的一个相当重要的方面。然而，许多组织会将容量规划视为一种非技术性活动，将其从系统管理员手中剥离。让我感到吃惊的是，系统管理员常常告诉我，他们收到了自己没有指定的硬件，现在必须*使其正常工作*，尽管该硬件是由一个完全不了解其用途的人设计的！在系统管理中如此多的系统设计知识和培训被忽视，重要的采购也在没有任何道理的情况下进行。
- en: It Is already designed when purchased
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 购买时已经设计好
- en: One of the strangest problems that I run into with great regularity is system
    administrators asking me how they should set up hardware which they have already
    specified, ordered, and received. Most critically, they ask how they should configure
    the RAID and division of logical disks or splitting physical arrays. I am always
    amazed by this.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常遇到的最奇怪的问题之一是系统管理员问我，应该如何设置他们已经指定、订购并收到的硬件。最关键的是，他们问如何配置RAID和逻辑磁盘的划分或拆分物理阵列。我总是对此感到惊讶。
- en: Obviously, different configurations of the server change how it would need to
    be configured at the hardware level. The software to be run on the server, the
    amount of software, the needed performance of that software, the amount of storage
    that will be needed, how backups will work, and nearly everything about how a
    server will be used over its anticipated lifespan is needed to be well understood
    to be able to even begin the process of specifying hardware to be purchased. How
    did they know how much RAM to buy, or how many cores, how fast the CPUs should
    be, which CPU models to start with, even which brands would work? In many cases
    people overspend and overbuy by such a degree that things work out and no one
    notices because the mistakes are made in the form of lost money that no one investigates.
    A server budget was given, no one follows up to determine if the server that was
    purchased was a good value, only if it was in budget. So overbuying is often a
    way to cover for failing to do capacity planning, and one that can be costing
    companies a significant amount of money.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，服务器的不同配置会改变其在硬件层面的配置需求。服务器运行的软件、软件的数量、软件所需的性能、所需的存储量、备份如何工作以及几乎所有与服务器在预期生命周期内使用相关的内容，都必须被充分理解，才能开始指定购买硬件的过程。你是如何知道要购买多少RAM、多少核心、CPU应该有多快、应该选择哪些CPU型号，甚至是哪些品牌适用的？在许多情况下，人们会因为过度购买而浪费大量资金，结果看似一切正常，因为这些错误表现为没人去调查的金钱损失。给定了服务器预算后，没有人跟进确定所购买的服务器是否物有所值，只关心是否在预算内。因此，过度购买往往是一种弥补未进行容量规划的方式，而这种方式可能会给公司带来巨额损失。
- en: Most noticeable, though, is RAID configuration. When someone asks me what RAID
    level and configuration that I would recommend for hardware that was purposely
    purchased new for this project I have no idea how to respond. Any and all decisions
    about the RAID configuration surely had to have been made before the server was
    purchased. It is only by knowing the performance, reliability, and capacity artefacts
    of not only each RAID level but of different configuration options and applying
    that knowledge in combination with available physical drive and controller options
    that you could have even approached purchasing the storage portion of the server
    in the first place.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最显著的变化是RAID配置。当有人问我如果为这个项目专门购买了新的硬件，推荐哪种RAID级别和配置时，我不知道该如何回答。关于RAID配置的所有决策肯定是在购买服务器之前就已经做出。只有了解每个RAID级别的性能、可靠性和容量特征，并结合可用的物理驱动器和控制器选项，才能开始考虑购买服务器存储部分。
- en: 'In order to decide on storage needs you have to know what you need, first.
    Then you have to know how the hardware that you will specify will meet those needs.
    Some questions that come to my mind when someone says that they have hardware
    and bought it without having specified any design yet include:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了决定存储需求，首先必须了解自己的需求。然后，必须知道你指定的硬件如何满足这些需求。当有人说他们已经购买了硬件，但还没有指定任何设计时，以下是我脑海中浮现的一些问题：
- en: How did you know which hardware RAID card to buy? Or even that you needed a
    hardware controller at all?
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你是如何知道该购买哪个硬件RAID卡？或者甚至是你是否需要硬件控制器？
- en: How did you determine how much cache to purchase?
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你是如何确定购买多少缓存的？
- en: How did you know which types of drives would most useful?
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你是如何知道哪些类型的驱动器最有用的？
- en: How did you know what speed of drives you would need in throughput and/or IOPS?
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你是如何知道需要什么速度的驱动器以满足吞吐量和/或IOPS需求的？
- en: How did you know what size of drives to get?
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你是如何知道该购买多大尺寸的驱动器的？
- en: How did you know the quantity of drives to get?
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你是如何知道该购买多少个驱动器的？
- en: How did you determine caching capacity?
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你是如何确定缓存容量的？
- en: How did you determine tiering capacity?
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你是如何确定分层存储容量的？
- en: How did you determine hot spare needs?
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你是如何确定热备份需求的？
- en: The decisions necessary to make any of these decisions require having made all
    of the decisions as a whole. The final outcome is a product of the whole and any
    change in RAID level, for example, would drastically change the usable capacity,
    the system performance, and the overall reliability. Every small change makes
    everything else change with it. No piece can be decided upon individually, let
    alone changed. The most innocuous change could result in a system that is not
    large enough in capacity, or fast enough for the workload to function; and more
    dangerously the reliability of the storage system could swing wildly between extremely
    safe and extremely dangerous.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 做出这些决策所需的前提是必须先做出所有其他决策。最终的结果是整体的产物，例如，RAID级别的任何改变都会极大地影响可用容量、系统性能和整体可靠性。每一个小的变化都会引发其他所有事情的变化。没有任何一项是可以单独决定的，更别提改变了。哪怕是最不起眼的变化，也可能导致系统容量不足，或者处理工作负载的速度不够；更危险的是，存储系统的可靠性可能在极端安全和极端危险之间剧烈波动。
- en: It is really hard to describe just how crazy this process is; and even crazier
    to realize that this might even be normal for how people buy servers! The best
    analogy that I can muster is to say that it is like buying a transmission for
    a 1978 Ferrari and expecting it to just work when you do not even know if you
    are getting a car, boat, or small plane yet, let alone what year or model of Ferrari!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 很难形容这个过程有多疯狂；更疯狂的是意识到，这可能已经成为人们购买服务器的常态！我能想到的最好比喻是，就像为一辆1978年的法拉利买一个变速箱，却期望它能正常工作，而你甚至还不知道自己是买到一辆车、一艘船还是一架小飞机，更别提是什么年份和型号的法拉利了！
- en: Capacity planning is about far more than saving money, at least indirectly.
    It is about ensuring that systems that we purchase can meet all of the *projected*
    needs of our business for the duration of time that makes sense to do so. This
    is obviously a difficult number to really nail down as what feels appropriate
    as a projection, what are the likely changes coming in the near future, and what
    is a reasonable time frame for your systems, are all rather fungible concepts.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 容量规划不仅仅是为了省钱，至少间接上是如此。它关乎确保我们购买的系统能够在合理的时间范围内满足我们业务的所有*预期*需求。显然，这是一个非常难以确定的数字，因为什么是合适的预期，未来可能会发生什么变化，以及为系统设定合理的时间框架，都是相当灵活的概念。
- en: It is a common trend in businesses to want to project astronomic growth using
    *pie in the sky* numbers as hardware investment bases as well as using the maximum
    reasonable lifespan of the hardware to calculate over. While we cannot control
    the political processes that drive our businesses from our positions within IT,
    except in the rarest of cases, what we can control is the quality of our own numbers
    being provided to those making the decisions.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在商业中，使用**空中楼阁**式的数字作为硬件投资基础，并利用硬件的最大合理使用寿命进行计算，从而展现天文数字般的增长，已经成为一种常见趋势。虽然我们无法控制驱动企业运作的政治过程，除非在极少数情况下，但我们可以控制的是我们向决策者提供的数字质量。
- en: Buy late
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 晚些时候购买
- en: Good business logic says that, with rare exceptions, the cost of everything
    in IT goes down over time. It goes down a lot. The cost of memory, compute cycles,
    or storage is fractional today compared to just a few years ago and this trend
    has really never stopped nor reversed, nor is it likely to. Momentary issues due
    to scarcity during times of manufacturing or logistical crisis can happen, but
    these are extremely rare and short lived events. Given any amount of time to make
    a purchase, the cost of systems in a few months will be better than they are today.
    Either the money that we spend is less, or the amount that we get for that money
    is greater. In either case, we benefit by investing later.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 好的商业逻辑告诉我们，除非极少数例外，否则IT中的所有成本随着时间推移都会下降。它下降得非常多。与几年前相比，今天内存、计算周期或存储的成本微不足道，这一趋势实际上从未停止过，也不太可能逆转。由于制造或物流危机带来的短期稀缺问题确实可能发生，但这些事件非常罕见且持续时间极短。只要有时间去做购买，几个月后的系统成本肯定会比今天更低。无论是我们花的钱变少了，还是我们为这笔钱得到的东西更多了，结果都是我们通过推迟投资来获得利益。
- en: A common example that we can use is what if we bought a server today with plans
    to use it for eight years and we have expected growth, so we buy a server that
    meets our eight-year projections. To acquire a server with that much power, maybe
    we will spend $20,000 today. Or to get a server that we project will last us for
    four years, we might spend $8,000 today. A big difference. Of course, this is
    a contrived example, but in the real world, these kinds of costs are typical in
    a lot of common scenarios.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一个常见的例子：假设我们今天购买一台服务器，计划使用它八年，并且我们预期会有增长，因此我们购买一台满足八年需求的服务器。为了获得这样一台强大的服务器，我们今天可能需要花费$20,000，或者，如果我们只预期服务器能用四年，可能今天花费$8,000就能买到。差距很大。当然，这是一个假设的例子，但在现实世界中，这类成本在许多常见场景中是非常典型的。
- en: In this example, we then assume that in four years we can buy another new server
    for an additional $8000 that meets our needs for four more years. Again, contrived,
    but often true. The cost tends to work out similarly to this.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们假设在四年后我们可以再花$8000购买一台新的服务器，满足接下来的四年需求。虽然这个例子有点牵强，但通常是成立的。成本通常会按这种方式计算。
- en: The number of advantages to buying less to last an expected shorter amount of
    time is hard to overstate. First there is often hard cost savings because of the
    nature of server pricing means that buying less, more often simply costs less
    because of the price benefits that happen within the operational lifespan of a
    modern server. And then there is the time-value of money that says that spending
    the same amount of money, but delaying spending it, means that you have more money
    to make you money in the interim and that the same money that you spend in the
    future is worth less than that money today. Then there is newer technology - if
    we wait for years to buy a new server we potentially get a lot of newer technology
    in that server that can contribute not only to capacity advantages, but also lower
    power consumption, great durability, and so forth.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 购买更少、更短时间内使用的设备的优点是无法过分强调的。首先，由于服务器定价的特点，购买更少的设备、更加频繁地更换往往能节省硬性成本，因为现代服务器的运营生命周期内，会发生一些价格上的优惠。接着是货币的时间价值理论，这意味着如果你花费相同金额的钱，但推迟了支出，你就可以在此期间用这笔钱赚取更多的钱，而且未来你所花的钱，其价值比今天的钱要少。最后，还有更新的技术——如果我们等几年再购买新的服务器，我们可能会得到更多更新的技术，不仅能提升容量，还能带来更低的能耗、更好的耐用性等优势。
- en: Then the advantage of having two servers. We assume that the second server is
    going to replace the first, and maybe it will. But we might also use the purchase
    to simply expand capacity, the first might remain in production service. If we
    are replacing the first server, it may be redeployed in another role within the
    organization or could be used as a backup server for the new one. Almost always
    you will be able to find a highly effective use for the original investment.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是拥有两台服务器的优势。我们假设第二台服务器将替代第一台，或许会是这样。但我们也可能只是用这次购买来扩展容量，第一台仍然可以继续投入生产服务。如果我们是替换第一台服务器，它可能会在组织内的其他角色中重新部署，或者作为新服务器的备份。几乎总是可以找到一种高效的方式来利用最初的投资。
- en: Most likely the biggest advantage is in delayed decision making. By holding
    off spending much of our initial budget by several years we get the flexibility
    to invest that money at any time, or never. Instead of doing an eight-year projection,
    which is wildly inaccurate to the point of being totally useless, we do two four-year
    projections, which are still pretty inaccurate, but the degree to which they are
    more accurate is pretty crazy. At our first four-year checkpoint we get to evaluate
    how good our last projection was and make a new one based on this new data and
    new starting point. We not only get to do a fresh evaluation of our own organization
    with four more years of insight, but also four more years of insight on the industry,
    and four more years of new technology. Very few businesses would make the same
    decisions in four years that they would make today. In business, delayed decision
    making of this nature can be astronomically beneficial.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 最大的优势很可能在于延迟决策。通过推迟几年的开支，我们获得了在任何时候投资这笔钱的灵活性，甚至可以选择永远不投资。与其做一个八年的预测，这种预测极其不准确，甚至毫无用处，不如做两个四年的预测，虽然仍然相当不准确，但其准确性提高的幅度却是显而易见的。在第一个四年检查点时，我们可以评估上一个预测的质量，并根据新的数据和新的起点做出新的预测。我们不仅能根据四年的新见解重新评估自己的组织，还能获得四年内行业的变化和新技术的洞察。很少有公司会在四年后做出与今天相同的决策。在商业中，这种延迟决策的方式可能带来天文数字般的好处。
- en: Sadly, for most businesses, projecting becomes an emotional exercise because
    there are political benefits to making people feel good and showing faith in the
    business or its leadership; and it just makes us feel good to think about all
    of the success that we are surely going to experience. And better projections
    normally means more clout, bigger budgets, more to work with for many years to
    come. Almost no business ever goes back and evaluates past projections to see
    if people did a good job, so there are rewards for being overly optimistic and
    generally zero risk of retribution if they are falsified for personal gain (emotional,
    financial, or political.) This system makes projections very dangerous and anything
    that we can do to reduce our dependency on them is important.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 可悲的是，对于大多数企业来说，预测变成了一种情感上的练习，因为这样做有政治上的好处，能让人们感到愉快，并表现出对企业或领导层的信任；而且，想象自己必定会取得的成功也让我们感觉很好。而更好的预测通常意味着更大的影响力、更大的预算、更多的资源可以使用。这些资源会持续多年。几乎没有企业会回过头来评估过去的预测，看看人们是否做得好，所以过于乐观的预测会带来奖励，而且如果这些预测被为了个人利益（无论是情感、财务还是政治上的）伪造，几乎没有惩罚的风险。这种系统使得预测变得非常危险，因此，我们做任何能够减少对预测依赖的事情都很重要。
- en: At the end of the day, delaying purchasing of server resources until they are
    actually needed is one of the best practice strategies that we can have in technology
    purchasing. It is the best approach from a purely financial viewpoint, the best
    approach from a decision making and planning perspective, and the best way to
    allow technological and manufacturing advancements to work in our favor.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，推迟购买服务器资源直到真正需要时，是我们在技术采购中可以采取的最佳实践策略之一。从纯粹的财务角度来看，这种方法是最好的，从决策和规划的角度来看，也是最优的，最能让技术和制造进步为我们所用。
- en: There are three key numbers that will come from system administration during
    this process. The first is simply answering the question of *how many resources
    are we using currently?* The second question is *how many resources did we use
    in the past?* And third, *what resources do we think that we will use in the future?*
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一过程中，系统管理将提供三个关键数字。第一个问题是 *我们目前使用了多少资源？* 第二个问题是 *我们过去使用了多少资源？* 第三个问题是 *我们认为未来会使用多少资源？*
- en: In reality, answering any of these questions is surprisingly hard. Just counting
    up the resources that we have purchased and own today tells us nothing. We need
    to really understand how our CPUs, RAM, and different aspects of storage are being
    used and how they affect workloads.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，回答这些问题中的任何一个都出乎意料地困难。仅仅统计我们今天所购买和拥有的资源并没有提供任何有用的信息。我们需要真正理解我们的 CPU、RAM 以及存储的各个方面是如何被使用的，它们如何影响工作负载。
- en: For example, if we are running a large database instance the database might
    happily cache outrageous amounts of storage into memory to improve database performance
    or reduce storage wear and tear. But reducing available memory may not have an
    impact on database performance. Because of this, just measuring memory utilization
    can be very tricky. How much *useful* memory are we using? Storage is easier,
    but similar challenges can exist. CPU is the easiest, but nothing is ever completely
    straightforward. Just because we use system resources at a certain level does
    not tell us how well they are needed.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们正在运行一个大型数据库实例，数据库可能会非常乐意将大量存储缓存到内存中，以提高数据库性能或减少存储磨损。但是，减少可用内存可能对数据库性能没有影响。正因为如此，仅仅测量内存利用率可能会非常复杂。我们使用了多少*有效*内存？存储比较容易测量，但也存在类似的挑战。CPU
    是最简单的，但没有什么事是完全直观的。仅仅因为我们在某个水平上使用系统资源，并不意味着我们知道它们的实际需求程度。
- en: With CPU we might have a system that is averaging fifty percent CPU utilization.
    For one company, or set of workloads, this might mean that we can put twice as
    many workloads on this system to get its utilization close to up to one hundred
    percent. For another company, or set of workloads, it might mean that we have
    overloaded the system and there is enough context switching and wait times that
    some applications are noticing latency. It is not uncommon for companies to target
    ninety percent utilization as a loose average, but for others targeting just ten
    percent can be required.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 CPU 时，我们可能会遇到一个系统平均 CPU 利用率为 50% 的情况。对于某个公司或一组工作负载，这可能意味着我们可以在该系统上放置两倍的工作负载，使其利用率接近
    100%。而对于另一个公司或一组工作负载，这可能意味着我们已经超载了系统，系统出现了足够的上下文切换和等待时间，导致一些应用程序注意到延迟。许多公司通常以
    90% 的利用率作为宽松的平均目标，但对于其他公司，可能需要将目标设定为仅 10%。
- en: The tradeoff, in this case, is about waiting for throughput or latency. Available
    CPU cycles means that the CPU could be doing more tasks, but if a CPU is tied
    up doing tasks all of the time then it is not necessarily available if a new task
    is suddenly presented to it. If you are working with low latency systems, having
    available system resources at the ready to process that task at the time that
    it is first presented can be a requirement. In order to assess capacity use and
    needs for systems requires us to deeply understand not just how much of the system
    is being used, but what that ultimately means for our workloads.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，权衡的关键是等待吞吐量还是延迟。可用的 CPU 周期意味着 CPU 可以执行更多的任务，但如果 CPU 始终忙于处理任务，那么当新任务突然到来时，它可能并不完全可用。如果你正在处理低延迟系统，确保系统资源随时可用以处理刚出现的任务可能是一个必要条件。为了评估系统的容量使用情况和需求，我们不仅需要深入了解系统被使用了多少，还要理解这些使用对工作负载的最终影响。
- en: As with so many aspects of system administration, the key is to understand our
    workloads inside and out. We have to know how they work, how they consume resources,
    how they will respond to more or fewer resources. Everything that we do in capacity
    planning depends on this.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 与系统管理的许多方面一样，关键是要全面了解我们的工作负载。我们必须知道它们是如何工作的、如何消耗资源、以及它们如何响应更多或更少的资源。我们在容量规划中的一切操作都取决于此。
- en: Of course we have tools that we mentioned previously to help us with determining
    how well a system is performing, and with application measurement tools and/or
    human user observation we can reasonably determine what kind of resources are
    necessary for where our workloads are today.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们有一些前面提到的工具，能够帮助我们判断系统的性能表现，通过应用测量工具和/或人工观察，我们可以合理地确定当前工作负载所需的资源。
- en: Many of these tools that we use can also be used to collect historical records
    of system performance. Chances are that if we were to do this all of the time
    that we would produce a volume of data that we will never be prepared to utilize.
    Some organizations do collect this forever, but this is the exception, not the
    rule. More practical, in most circumstances, is to develop and track baselines
    over time. This generally means doing some sort of activity where you record measurements,
    as well as recording what you can about end user application performance, of the
    system so that you can look back and see what system utilization has been. This
    data should be collected over long periods of time. Weeks or months, at least
    sometimes, to find hot spots and cold spots. Common cold spots might be Sunday
    overnight when many applications are not used at all. A common hot spot is month-end
    financial processing times. Every organization has different utilization patterns.
    You need to learn yours.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的许多工具也可以用来收集系统性能的历史记录。如果我们总是这样做，可能会产生大量的数据，而我们永远也无法准备好去利用这些数据。有些组织会一直收集这些数据，但这是例外，而非常规。更实际的做法是在大多数情况下随着时间的推移开发并跟踪基准。这通常意味着进行某种活动，记录测量数据，并记录系统的最终用户应用性能，以便你可以回顾并了解系统的利用情况。这些数据应该在长时间内收集。至少几周或几个月，以便找到热点和冷点。常见的冷点可能是在星期天的晚上，当许多应用程序根本不被使用时。常见的热点则是月末的财务处理时间。每个组织的利用模式都不同，你需要了解自己的模式。
- en: With this collected data we can then analyze to see how utilization has changed
    over time. Changes will normally come from increases, or decreases, in application
    level utilization. But this is far from the only aspect that might change. It
    is important to be cognizant that application updates, operating system patches,
    changes in system configuration and so forth should be recorded and noted against
    data recording to make the data more meaningful in evaluation.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些收集的数据，我们可以分析系统利用率如何随时间变化。变化通常来源于应用层利用率的增加或减少。但这远不是唯一可能发生变化的方面。需要意识到的是，应用更新、操作系统补丁、系统配置变化等应当被记录并与数据记录一起标注，以使得这些数据在评估时更有意义。
- en: Long term data collection has to be considered against effort. Collecting data
    and collating that data on any scale can be extremely time consuming and potentially
    resource intensive. There is the possibility that after collecting all of that
    data that it will provide no useful insight or that the skills to read it back
    will be lacking. It is not unreasonable for a system administrator to track system
    performance data mentally if working with systems that are used constantly. In
    some cases, this will be more practical.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 长期的数据收集必须考虑到努力成本。收集数据并整理这些数据，无论规模多大，都可能非常耗时并且可能会消耗大量资源。收集了所有这些数据后，它可能不会提供有用的见解，或者分析它的技能可能缺乏。如果一个系统管理员在处理持续使用的系统时，能够凭记忆追踪系统性能数据，这是完全合理的。在某些情况下，这种做法会更为实际。
- en: Risk of too much data overhead
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 过多的数据开销的风险
- en: In pursuing capacity planning we risk creating a situation where we generate
    more overhead for ourselves, which will generally equate to more cost, than if
    we had not collected the data in the first place. We have to find an appropriate
    balance.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行容量规划时，我们有可能创造一个情况，即我们为自己制造了更多的开销，这通常意味着更高的成本，甚至可能比如果一开始就没有收集数据的情况还要高。我们需要找到一个适当的平衡点。
- en: Large organizations will tend to find large value in using lots of data collection
    to save money on a large scale. At scale automating the data collection and analysis
    is often relatively simple. Small businesses will often find this impractical.
    To collect any reasonably thorough amount of system data for a single server could
    result in expenses as large as the cost of the systems themselves. Clearly that
    is unworkable. Common sense has to prevail.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 大型组织通常会在大量数据收集中找到巨大的价值，从而在大规模上节省资金。在大规模的情况下，自动化数据收集和分析通常相对简单。小型企业则往往会觉得这种做法不切实际。收集单个服务器的任何合理全面的系统数据，可能会导致支出大到与系统本身的成本相当。显然，这是行不通的。常识必须占上风。
- en: Many small organizations will have just a single primary workload and will potentially
    never fully utilize the smallest of servers and will, from a capacity perspective,
    always experience overkill until moving away from running their own hardware,
    if that ever becomes practical. Large organizations are operating farms of servers
    and have many avenues to improve overall cost from playing with different software
    options, using many smaller servers or fewer large ones, using different processor
    models or even architectures, and so forth.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 许多小型组织可能只有一个主要的工作负载，并且可能永远无法充分利用最小的服务器，从容量的角度来看，通常会过度配置，直到他们放弃使用自有硬件，若那时变得切实可行的话。大组织则是在运营大规模的服务器集群，他们有许多途径可以通过尝试不同的软件选项、使用更多小型服务器或更少的大型服务器、使用不同的处理器型号甚至架构等来改善整体成本。
- en: The effort to save money just has to be kept in check against the potential
    value in the data collection. This is true with all decision-making processes.
    Beware that data collection is part of the total that makes up the high cost of
    decision making and you always have to remember to keep that cost far below the
    expected value level of that decision.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 节省开支的努力必须与数据收集的潜在价值保持平衡。这对于所有决策过程都是如此。要小心，数据收集是决策高成本的组成部分，你必须时刻记得保持这一成本远低于该决策的预期价值水平。
- en: When evaluating the cost of the data collection, we have to consider the time
    to collect the data, the cost of storage, and the cost of analyzing that data.
    We cannot forget, we have to consider the cost of considering all of this!
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在评估数据收集的成本时，我们需要考虑收集数据的时间、存储成本和分析这些数据的成本。我们不能忘记，还得考虑考虑这些的成本！
- en: There are vendors that make tools specifically for tackling these difficult
    questions and they can be very good. Dell, famously, provides tools to customers
    that can be run over long periods of time and produce very detailed reports as
    to how systems are being used and, of course, also provide *recommendations*,
    which are actually sales pitches, to sell you more products. If used properly,
    these tools can be quite valuable.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 有些供应商专门提供工具来解决这些难题，它们可能非常有效。戴尔（Dell）便是其中之一，著名的戴尔为客户提供可以长时间运行并生成非常详细报告的工具，报告内容包括系统如何使用，当然，工具也提供*建议*，但这些建议实际上是推销，目的是为了卖给你更多的产品。如果使用得当，这些工具可以非常有价值。
- en: Of course the natural question will also be *but what about cloud computing,
    does that not change all of this?* And yes, considering cloud computing is important
    and plays into this process.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，自然的问题也会是*“那么云计算呢？难道这不会改变一切吗？”* 是的，考虑到云计算非常重要，它确实会影响这一过程。
- en: As cloud computing enters into an organization's planning we have even more
    complexity to consider, in some ways. In other ways, cloud computing can make
    the process of capacity planning far simpler, if not moot.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 随着云计算进入到组织的规划中，从某种程度上来说，我们需要考虑的复杂性增加了。从另一个角度看，云计算能够让容量规划过程变得更加简单，甚至可以说不再重要。
- en: In cloud computing, or at least in nearly all of it, we buy our capacity as
    needed or very nearly as needed. This is the beauty of cloud computing. Use only
    what you need and let the system decide what it needs in real time. This is great,
    in theory. But just allowing the system to do this still leaves us with a need
    to predict what this approach will cost in order to compare financially against
    alternatives, and to predict what this will cost in order to budget properly for
    it.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在云计算中，或者至少在几乎所有的云计算中，我们按需或几乎按需购买容量。这就是云计算的魅力。只使用你所需要的，让系统实时决定需要什么。这在理论上是很棒的。但仅仅让系统自行决定仍然需要我们预测这种方法的成本，以便在财务上与其他替代方案进行比较，并且预测成本以便正确预算。
- en: If your organization is using cloud computing currently, this can make our processes
    far easier. Generally your cloud platform itself will be able to tell you an awful
    lot about system utilization rates. Even if traditional reporting is not available,
    the billing for cloud computing can often tell you as much as you may need to
    know for many types of planning.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的组织目前正在使用云计算，这将大大简化我们的过程。通常，你的云平台本身能够告诉你大量的系统使用率信息。即使没有传统的报告形式，云计算的账单也常常能提供你所需要了解的关于许多类型规划的信息。
- en: Our capacity planning best practices are purely mathematical. Use reasonable
    measurements and understanding of our systems and workloads and our best understanding
    of business expectations and input from other teams to plan for capacity needs
    for tomorrow and into the future. Study and understand the *cone of uncertainty*
    and use that sense of increasingly unforeseeable future combined with a good understanding
    of financial concepts such as the time value of money and the increased value
    of technological purchasing over time to provide best effort evaluations of future
    capacity investment needs for your organization.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的容量规划最佳实践纯粹是数学性的。利用我们对系统和工作负载的合理测量和理解，以及对商业预期和来自其他团队的输入，来规划明天及未来的容量需求。研究并理解*不确定性锥*，结合对未来越来越难以预见的感觉以及对时间价值等金融概念的良好理解，使用这些来为你组织的未来容量投资需求提供最佳努力评估。
- en: Capacity planning is often boring and more political than technical, but it
    is a role that can rarely be handled by anyone except system administration so
    it is our lot in life (professional life, at least) to be integrally involved
    in system hardware purchasing projections. It is essentially the computing futures
    market on a tiny scale inside of our own business. In our next section we move
    from capacity and performance needs and look at tools used for security and troubleshooting
    starting with system and application logging.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 容量规划通常是枯燥的，且比技术性更具政治性，但这一角色很少有人能胜任，除非是系统管理员，因此，在专业生活中，它注定要让我们与系统硬件采购预测紧密相关。它本质上是我们企业内部的小规模计算未来市场。在下一部分，我们将从容量和性能需求转到安全和故障排除工具，首先是系统和应用日志。
- en: Log management and security
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志管理与安全
- en: If you ask system administrators in casual conversation at the bar, you might
    believe that it is a major task for system administrators to collect all of their
    system logs and to spend hours each day manually and skillfully going through
    them line by line looking for system errors and malicious actors. Reality is very
    different. No one is doing this, no one was ever doing this, and no company is
    interested in paying for people to do this. Log reading is a serious skill and
    an activity that is excessively boring. It is also a type of task at which humans
    are extremely poor.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在酒吧和系统管理员闲聊，你可能会认为，系统管理员的主要任务之一是收集所有系统日志，并每天花费几个小时，手动且熟练地逐行查看日志，寻找系统错误和恶意行为者。现实情况大不相同。没有人在做这件事，也没有公司愿意为此支付费用。日志阅读是一项严肃的技能，且是一项极其无聊的活动。人类在这类任务上的表现非常差。
- en: If you were to attempt to have humans doing your log management by actually
    reading logs when there is nothing known to be wrong with a system you would run
    into a few problems. First, realistically no human can read logs fast enough to
    be truly effective. Systems log a lot of data and attempting to keep up with that
    kind of flow of truly mindless information would make humans extremely error prone.
    And then there is the cost. Anyone skilled enough to be able to handle log reading
    like that would be at the top end of the pay scale, and that job being so painful
    would have to be a premium pay position, and since typically servers run around
    the clock you would likely need four or five full time people *per server* to
    even make the attempt. Costly beyond anyone's wildest imagination and completely
    impractical to the point of useless. And hence, no one does it.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你试图让人类在没有已知系统问题的情况下实际读取日志来进行日志管理，你会遇到一些问题。首先，现实情况是，没有人类能以足够快的速度读取日志来真正有效地工作。系统记录了大量数据，试图跟上这种无意义信息的流动会使人类容易出错。然后是成本问题。任何足够熟练以处理这种日志阅读的人都会处于薪资的高端，且由于这一工作非常痛苦，它必须是一个高薪职位，而由于服务器通常是全天候运行的，你可能需要为每台服务器配备四到五个全职员工才能勉强做到这一点。这种成本超出了任何人的想象，完全不切实际，甚至可以说是毫无用处。因此，没人会这样做。
- en: That does not mean that logs are not valuable. The opposite is true. Logs are
    very valuable and we need to collect, protect, and know how to use them.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着日志没有价值。相反，事实恰恰相反。日志非常有价值，我们需要收集、保护并知道如何使用它们。
- en: When it comes to logs we need to know how to read them. This might seem trivial,
    but when you have an emergency and need to read your logs is not the time to find
    out that you do not understand what is being logged or how to interpret it. The
    system logs on Linux are rather consistent. The challenges really begin when different
    applications are logging as well. These logs might be independent or consolidated
    into other logs. Each application is responsible for its own logging and so we
    can face quite a potential for log variety when we start running a number of disparate
    applications. Add to this mix any logging done by bespoke in-house applications
    and things can possibly get quite complicated.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理日志时，我们需要知道如何读取它们。这看似微不足道，但当你遇到紧急情况，需要读取日志时，那可不是发现自己不理解日志内容或如何解读它的好时机。Linux上的系统日志相当一致。真正的挑战开始于不同应用程序也在记录日志时。这些日志可能是独立的，也可能被合并到其他日志中。每个应用程序负责自己的日志记录，因此当我们开始运行多个不同的应用程序时，日志的多样性可能会带来相当大的潜力。此外，如果还有定制的内部应用程序进行日志记录，事情可能会变得相当复杂。
- en: There is no need to teach log reading here. This is an activity that anyone
    reading this book should be well acquainted with. The exercise that you should
    perform now, though, is to go through your logs and determine which logs are of
    a format that is unfamiliar to you and make sure that you are ready to read through
    any of your system logs at any time without needing to do additional research
    before doing so. Fast and efficient log reading will do much to make you a better
    system administrator.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里没有必要教你如何读取日志。这是任何阅读本书的人都应该非常熟悉的活动。不过，你现在应该做的练习是，浏览你的日志并确定哪些日志的格式对你来说是陌生的，确保你随时准备好读取任何系统日志，而无需在读取前进行额外的研究。快速高效的日志读取将大大提升你成为一名更好的系统管理员的能力。
- en: Knowing how to read your logs is not enough. You should also be familiar with
    your logs enough to recognize what normal activity will look like. You will be
    far better at recognizing when something is wrong if you first know what it looks
    like when it is right. So many companies bring in specialists to deal with problems
    after they have arisen and in doing so, there are so many more challenges created
    because there is no *logging baseline* to use as a basis for comparison against
    what things are doing now.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅知道如何读取日志是不够的。你还应该足够熟悉你的日志，以便识别正常活动的表现。当你先知道正常的表现是什么样子时，你将更容易识别问题。许多公司在问题发生后聘请专家来处理这些问题，但这样做会带来更多的挑战，因为没有*日志基准*来与当前的情况进行比较。
- en: Without a solid baseline, errors that occur regularly can cause a lot of wasted
    time as diagnostic time is spent researching them to determine if they are normal
    log noise, a real problem, or an actual problem that is simply a component of
    the problem being diagnosed. When things are going wrong, we want to be extra
    efficient. That is the very last time when we want to be figuring out what good
    looks like.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有一个可靠的基准，定期发生的错误可能会浪费大量时间，因为诊断时间将被花在研究它们上，以确定它们是正常的日志噪声、真正的问题，还是正在诊断的问题的组成部分。当出现问题时，我们希望更加高效。这正是我们最不希望花时间去弄清楚正常表现是什么样子的时刻。
- en: It is always good to be prepared to hop directly onto a server and use traditional
    tools like vi, view, cat, head, tail, and grep to look at logs. You never know
    what situation you are going to be thrown into in the future.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好直接登录到服务器并使用传统工具，如vi、view、cat、head、tail和grep来查看日志，始终是一个好习惯。你永远不知道未来会遇到什么样的情况。
- en: With many modern systems today we expect to see extensive tooling around logs
    as there is much more that we can do with our logs than simply storing them on
    our local servers and poking around at them after something bad has happened.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天的许多现代系统中，我们期望看到围绕日志的广泛工具支持，因为我们可以做的远不止仅仅将日志存储在本地服务器上，并在发生问题后进行查看。
- en: Today, logging is one of the areas that has seen massive changes and advancements
    in server systems. We are leaps and bounds beyond where logging typically was
    just twenty years ago. There are some very simple advancements, such as high performance,
    graphical log viewers, that can be used to make the observation of logs faster
    and easier. There is advanced central logging to move logs away from the servers
    themselves and there is automated log processing.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，日志记录是服务器系统中发生巨大变化和进步的领域之一。相比二十年前，日志记录已经取得了飞跃性的进展。像高性能的图形化日志查看工具这样的简单进步，使得查看日志变得更快、更容易。同时，还有先进的集中日志管理，将日志从服务器本身转移出去，还有自动化的日志处理。
- en: Regardless of if logging is local or remote, modern log viewers have made a
    tremendous difference in how efficiently we can use our logs. Whether using local
    desktop GUIs, character-based sessions on the terminal, or a modern web interface,
    log viewing tools have been improving and for the last decade or more have made
    the act of reading logs pleasant and easy. Amazingly, very few organizations provide
    these kinds of tools or accommodate their usage and so it is far less common than
    it should be to find system administrators using them. If you talk to system administrators
    do not be surprised to find out that very few have actually had the pleasure of
    working in an environment with logging tools beyond the basic, included system
    log text files and the standard text file manipulation tools that are included
    in the operating system.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 无论日志是本地的还是远程的，现代的日志查看工具在我们使用日志的效率上都带来了巨大的改变。无论是使用本地桌面GUI、终端上的字符界面会话，还是现代的Web界面，日志查看工具都在不断改进，在过去十年甚至更长时间里，它们使得阅读日志变得既愉快又简单。令人惊讶的是，只有极少数的组织提供这些工具或支持其使用，因此，系统管理员使用这些工具的情况比应有的要少得多。如果你和系统管理员交谈，不要感到惊讶，如果发现很少有人真正有机会在拥有超出基本系统日志文本文件和操作系统自带的标准文本文件处理工具之外的环境中使用日志工具。
- en: Good log viewers are an important starting point in a log management journey.
    Make logs accessible to view quickly and make their viewing a pleasurable and
    as simple as possible experience. When things are going wrong you do not want
    to be spending any more time than is absolutely necessary getting to your logs
    or to digging through them. You certainly do not want to be working to install
    a log viewing tool at a time when something is already broken.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的日志查看工具是日志管理旅程中的重要起点。让日志能够快速查看，使其查看过程尽可能简单和愉快。当事情出错时，你肯定不想花费比绝对必要的更多时间去访问日志或深入挖掘日志。你更不想在系统出现问题时，还在忙着安装日志查看工具。
- en: Log viewing applications are only a starting point, we hope, for most organizations.
    The real leap in log management happens when we introduce central log collection.
    This is really where the logging revolution has taken place. Of course, even going
    back decades, the potential and tools for basic log aggregation existed. This
    can be as simple as using network copy commands or network mapped drives to store
    the same old text files on a central file server. So the fundamental idea of central
    logging is not new.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 日志查看应用程序只是大多数组织的起点。日志管理的真正飞跃发生在引入集中日志收集时。这才是真正的日志革命发生的地方。当然，即使回顾几十年，基础日志聚合的潜力和工具也早已存在。这可以简单到使用网络复制命令或网络映射驱动器将老旧的文本文件存储到中央文件服务器上。所以，集中日志的基本思想并不新鲜。
- en: Originally the central logging constraint was that servers were not networked.
    Later it was performance and storage issues. Centralizing logs used a lot of network
    bandwidth and required a lot of storage capacity and, in some cases, was a performance
    nightmare for the log server as well. Those days are long since in the past. Today
    all of those things are trivialized simply by the natural leaps in capacity and
    performance of all aspects of our systems with far smaller growth in log size
    and complexity. Logs today are not all that much larger than they were decades
    ago.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，集中日志的限制是服务器没有网络连接。后来是性能和存储问题。集中日志需要大量的网络带宽和存储容量，在某些情况下，对于日志服务器来说，这也是一个性能噩梦。那些日子早已成为过去。今天，随着我们系统各方面容量和性能的自然提升，这些问题变得微不足道，而日志的大小和复杂性增长却远远小于过去。如今，日志的大小其实并没有比几十年前大多少。
- en: Early log centralization systems were very basic and unable to scale gracefully.
    Large amounts of aggregated log data presents big challenges for most systems
    as they need to be able to continue to ingest large amounts of real time data
    from many sources while simultaneously being able to recall and display that data.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的日志集中化系统非常基础，无法优雅地扩展。大量聚合的日志数据对大多数系统来说是一个巨大挑战，因为它们需要能够持续从多个来源摄取大量实时数据，同时还能回溯并展示这些数据。
- en: Modern central logging applications all use new, modern databases designed around
    this time of data flow and storage. No one single type of database is used for
    this, but many newer databases excel at handling these needs allowing data traditionally
    stored as large, unwieldy text files to be reduced to much smaller and more efficient
    database items with metadata, caching, collation, and other features that allow
    for the ingestion of massively larger amounts of data than ever before while being
    able to continue to display data effectively. This change, along with the general
    improvements in system power, has made for effective centralized logging not only
    on the LAN, but in many cases, even for and to servers running hosted, in the
    cloud, or otherwise not sitting on a traditional LAN.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现代的日志集中应用程序都使用了围绕数据流和存储需求设计的全新现代数据库。没有单一类型的数据库被用于此目的，但许多新型数据库在处理这些需求时表现出色，它们允许传统上作为大型、笨重的文本文件存储的数据被压缩成更小、更高效的数据库条目，带有元数据、缓存、整理等功能，这些特性使得可以处理比以往更多的数据量，同时仍然能够有效地展示数据。这一变化，加上系统性能的整体提升，使得集中式日志管理不仅在局域网中得以有效实施，在许多情况下，甚至适用于托管服务器、云服务器或其他不在传统局域网中的服务器。
- en: By using this kind of system we have a few benefits. One is speed and efficiency
    in log reading. One (or at least fewer) places to go to read logs means that system
    administrators are looking at logs much faster than before and faster log reading
    means faster solutions. By having logs from many servers, systems, applications,
    and more all in a single place also means that we can correlate data between these
    systems without requiring humans to look at logs from multiple sources and make
    these connections manually.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种系统有几个好处。一个是日志读取的速度和效率。一个（或至少较少的）地方来查看日志意味着系统管理员比以前更快地查看日志，而更快的日志读取意味着更快的解决方案。通过将来自多个服务器、系统、应用程序等的日志集中在一个地方，我们还可以在这些系统之间关联数据，而无需人工查看来自多个来源的日志并手动建立这些联系。
- en: New tools, like volume graphs, also allow us to see patterns that we may have
    been unable to detect before. If multiple computers suddenly show a spike in log
    traffic maybe applications have suddenly become busy, or maybe there is a failure
    or attack underway. Centralized logging tools make it easier not only for us to
    understand what a baseline looks like for a single system, but what a baseline
    will look like for all of our systems combined! More layers of system understanding.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 新工具，如流量图，也让我们能够看到以前可能未能察觉的模式。如果多台计算机的日志流量突然激增，可能是应用程序突然变得繁忙，或者也可能是出现了故障或正在发生攻击。集中式日志工具不仅让我们更容易理解单个系统的基准是什么，还能帮助我们理解所有系统结合起来的基准是什么！这为系统理解增添了更多层次。
- en: Once we have these modern tools centralized the next logical step is using automation
    to read logs for us. **Security Information and Event Management** (**SIEM**)
    is the term generally applied for automatic log monitoring tools. Automation for
    logs is not new and even the United States government was putting rules in place
    for it by 2005\. But for many businesses, log automation is far beyond their current
    plans or capacity.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们将这些现代工具集中化，下一步逻辑就是使用自动化工具来读取日志。**安全信息与事件管理**（**SIEM**）是通常用于自动化日志监控工具的术语。日志自动化并不新鲜，甚至美国政府早在2005年就已经制定了相关规定。但对于许多企业而言，日志自动化远远超出了他们当前的计划或能力。
- en: Of course, like any automation, the degree to which we use it can vary greatly.
    Light automation might simply send alerts in case of certain triggering events
    occurring in the logs or alerting on uncharacteristic activity patterns. Complex
    automation might use artificial intelligence or threat pattern databases to scour
    logs across many systems at once to look for malicious activity.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，像任何自动化一样，我们使用它的程度可以有很大差异。简单的自动化可能仅仅在日志中发生某些触发事件时发送警报，或对不符合特征的活动模式进行警报。复杂的自动化可能使用人工智能或威胁模式数据库，跨多个系统同时扫描日志，寻找恶意活动。
- en: Why central logging?
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要进行日志集中？
- en: Given that centralized logging carries so much network overhead and because
    it tends to be so costly to implement, it is easy to question the value to centralizing
    logging to a single server, or group of servers, rather than simply leaving logs
    on individual hosts and finding better methods of examining logs from them. This
    is a very valid question. Of course, central logging is not going to be right
    for every organization. It is right for a large number of them, though.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于集中式日志记录带来了如此大的网络开销，并且实施成本通常很高，很容易质疑将日志集中到单个服务器或一组服务器的价值，而不是将日志保留在各个主机上并寻找更好的方法来检查它们的日志。这是一个非常合理的问题。当然，集中式日志记录并不适合每个组织。但它确实适合许多组织。
- en: While many advancements have been made to make central logging more capable
    than ever before, there have also been many advancements in making decentralized
    logging better as well including on-device log viewers with reporting, alerting,
    and attractive user interfaces and aggregation tools that display the data from
    multiple sources in a single dashboard even though the data itself is disparately
    located.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然许多进展使得中央日志记录比以往更具能力，但也有许多进展使得去中心化的日志记录变得更好，包括带有报告、告警、吸引人的用户界面的设备端日志查看器，以及显示来自多个来源数据的聚合工具，尽管这些数据本身分散在不同地方。
- en: Central logging offers unique advantages, though. The biggest advantage is simply
    that the data is not tied to the device. If a device dies, goes offline, or that
    device is compromised we have isolation for our logs. It is not uncommon to be
    stuck trying to get a server back online and running just so that we can look
    at the logs from that server.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，中央日志记录提供了独特的优势。最大的优势就是数据不与设备绑定。如果设备出现故障、离线，或者设备被攻破，我们的日志就可以实现隔离。经常会遇到需要重新启动一台服务器并让其恢复运行，只是为了查看该服务器的日志。
- en: If the server dies completely we may never want to bother bringing it back online.
    Or if the logs tells us that there is a catastrophic failure we might know from
    that, that we do not want to attempt to recover a failed device. Or perhaps we
    want one person to be working on getting a failed server back up and running simultaneously
    while another scours logs to determine what led up to the failure or possibly
    determine what is needed to restore services.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器完全崩溃，我们可能根本不想再费心让它恢复在线。或者如果日志告诉我们发生了灾难性故障，我们可能就知道我们不应该尝试恢复已失败的设备。又或者，我们可能希望一个人专注于恢复失败的服务器，同时另一个人则扫描日志以确定导致故障的原因，或者确定恢复服务所需的条件。
- en: If a server or application is compromised there is a risk that the logging mechanisms
    or storage systems will be compromised along with it. In fact this is generally
    quite likely. Modifying logs to cover up a compromise is very common with sophisticated
    attacks and simply deleting logs common in simpler ones. In most cases logs are
    attacked because they are the most likely place to easily identify that a compromise
    has happened or is happening and what to do to mitigate it. If the logs never
    show any signs of an attack, you may easily never discover that one has happened.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器或应用程序被攻破，存在日志机制或存储系统也被一起攻破的风险。实际上，这种情况通常是非常可能发生的。修改日志以掩盖入侵是高级攻击中非常常见的手段，而简单的攻击则通常通过删除日志来实现。大多数情况下，日志会被攻击，因为它们是最容易识别入侵发生或正在发生的地方，并且可以判断如何进行缓解。如果日志中从未显示出攻击的任何迹象，你可能永远不会发现入侵已经发生。
- en: If we instead send our logs, either in their entirety or at least a copy, directly
    to a remote logging server in real time then we have the logs stored separately
    from both the application and the server storage with an air gap so that, in order
    to modify those logs, a completely unrelated system has to also be compromised,
    without being detected. This is orders of magnitude more difficult to do, especially
    as the existence of and information about any external logging system will generally
    not be known until a compromise is already under way at which point it may already
    be too late to avoid detection.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将日志（无论是全部还是至少复制一份）实时发送到远程日志服务器，那么我们就可以将日志存储在与应用程序和服务器存储隔离的地方，并且通过气隙（air
    gap）使得若要修改这些日志，必须攻破一个完全无关的系统，且不能被发现。这比直接修改日志要困难几个数量级，特别是当任何外部日志系统的存在及信息通常在入侵发生时才会被发现，这时可能已经太晚，无法避免被检测。
- en: Because of the fact that logging is far more than just a way to look for bugs
    and primarily the key security recording system for auditing and tracking breaches,
    malicious activity, infiltration attempts, and others. it is critical that this
    data be kept safe from both accidental loss and intentional destruction.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 由于日志不仅仅是查找错误的方式，更是审计和追踪安全漏洞、恶意活动、渗透尝试等的关键安全记录系统，因此，必须确保这些数据免受意外丢失和故意破坏。
- en: Possibly the most important purpose of log separation, at least in larger organizations
    big enough to have multiple IT teams, is the separation of duties. If the logs
    are completely controlled by the same system administrator (presumably you) that
    controls the server then it is trivial to make major modifications and hide the
    evidence of those changes. If the logs are sent to an external system to which
    we are not the administrator then it is much harder for us to hide those changes
    as we must prevent them from being logged in the first place while not causing
    the logging itself to fail.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 日志分离的一个可能最重要的目的，至少在那些足够大的组织中，足以拥有多个IT团队时，就是职责分离。如果日志完全由控制服务器的同一个系统管理员（假设是你）控制，那么对日志进行重大修改并隐藏这些修改的证据就变得非常简单。如果日志被发送到一个我们不是管理员的外部系统，那么我们就很难隐藏这些更改，因为我们必须在不让日志记录失败的情况下，防止它们被记录下来。
- en: Having a strict separation of duties for this level of security may sound like
    something limited to large organizations, but even quite small companies, even
    those not large enough to have a single fill time system administrator, can take
    advantage of this aspect of a system like this by using an externally hosted logging
    platform rather than running their own. In this way all of the necessary system
    administration and security for the logging platform is encapsulated not only
    away from the individual system administrator but also away from the IT team and
    the entire corpus of the company itself!
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种级别的安全性，严格的职责分离听起来可能是大公司特有的事情，但即使是非常小的公司，甚至那些没有足够大到拥有一个全职系统管理员的公司，也可以通过使用外部托管的日志平台来利用这种系统特性，而不是自己运行日志系统。这样，所有必要的系统管理和日志平台的安全性不仅与个别系统管理员隔离，而且也与IT团队以及整个公司本身隔离开来！
- en: Because every business is different, there is a place for different levels of
    logging and log management depending on your needs. Our constant IT mantra has
    to be that one size does not fit all.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 因为每个企业都有其独特性，所以根据你的需求，日志管理和日志管理的层次会有所不同。我们的IT座右铭必须是：一刀切并不适合所有情况。
- en: So our best practice with logging is a difficult one. We need to evaluate logging
    needs. How can we use our logs efficiently to troubleshoot faster and better.
    How can we increase our security. Do we have factors that make local log storage
    outweigh the benefits of remote? Should we host our own log systems or use a third-party
    SaaS application that is managed for us? Will the security benefits of a SIEM
    or similar solution justify their cost and complexity?
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们的日志最佳实践是一个具有挑战性的任务。我们需要评估日志需求。我们如何高效地利用日志来更快、更好地解决问题？我们如何提高安全性？是否存在使本地日志存储超过远程日志存储的优势因素？我们是应该托管自己的日志系统，还是使用第三方SaaS应用程序，让他们为我们管理？SIEM或类似解决方案的安全性收益是否值得其成本和复杂性？
- en: Our only true best practices are to ensure that you are prepared to read logs
    before you need to, and to look at logs from time to time to understand what a
    healthy system looks like for you.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们唯一真正的最佳实践是确保在需要之前就做好阅读日志的准备，并且不时查看日志，以了解对你而言一个健康系统的表现。
- en: With logging we are forced to really look much more heavily at rules of thumb
    rather than best practices. In general, central log collection is a worthwhile
    endeavor for almost any environment with more than a single critical workload.
    This can mean a single company that has multiple workloads, or smaller firms should
    generally be using some form of external support vendor and that vendor would,
    in theory, have multiple customers and would generally benefit from a similar
    approach allowing them to centralize logs on behalf of their customers.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在日志管理方面，我们不得不更侧重于经验法则而非最佳实践。一般来说，中央日志收集对于几乎任何有多个关键工作负载的环境都是值得投资的。这可能意味着一个拥有多个工作负载的公司，或者较小的公司一般应当使用某种形式的外部支持供应商，而该供应商理论上会有多个客户，并且通常会受益于类似的方式，允许他们为客户集中日志。
- en: The smallest IT department
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最小的IT部门
- en: This is a topic beyond the scope of the role of system administration, but one
    that everyone in IT should really understand because nearly every IT role will,
    at some point, be put in a position of being part of an organization that is simply,
    too small.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个超出系统管理职责范围的话题，但每个IT人员都应该真正理解它，因为几乎每个IT角色在某个时刻都会面临成为一个组织的一部分，而这个组织无疑过于小型的局面。
- en: In most fields we can talk about a minimum size to any professional team. Doctors,
    lawyers, auto mechanics, veterinarians, software engineering, you name it. In
    all these examples we can talk about the staff and team necessary to make a position
    make sense. A doctor working with no nurses or assistants of any kind is going
    to be really inefficient and lack some vectors for healthcare training. Same with
    a veterinarian, if you are a lone vet and have no receptionist, cashier, vet tech,
    and so on, then you are forced to do roles at a fraction of your value. In software
    engineering it is more about the wide range of discrete tasks and roles that go
    into software design that cannot reasonably be done by a single person, even on
    a small project.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数领域，我们可以谈论任何专业团队的最小规模。医生、律师、汽车修理工、兽医、软件工程师等等。在所有这些例子中，我们都可以讨论让某个职位成立所需的人员和团队。一个没有护士或任何助手的医生将非常低效，并且缺乏某些医疗训练的维度。兽医也是如此，如果你是一个独立的兽医，没有接待员、收银员、兽医技术员等等，那么你将被迫在自己价值的很小一部分上承担多个角色。软件工程也是如此，涉及到软件设计的广泛离散任务和角色，这些工作即使在一个小项目中，也不可能由一个人合理地完成。
- en: IT is one of the more dramatic fields for this because IT is so broad and covers
    so many totally different knowledge areas. And every company has the need for
    a large scope of that IT skill set. Some skills are unique to certain types of
    environments, but the large base of foundational skills apply to essentially any
    and every company.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: IT是其中一个最具戏剧性的领域，因为IT涉及的知识面如此广泛，涵盖了许多完全不同的领域。而且每个公司都需要一大范围的IT技能。一些技能是特定环境所独有的，但大量基础技能几乎适用于任何公司。
- en: One of the most challenging aspects of this is that there is little room for
    underdeveloped skills. Because IT is the decision making and guidance around core
    business functions, infrastructure, support, efficiency, and security there is
    really no time that you do not want expert and mature guidance. A seemingly simple
    mistake, made nearly anywhere in the entire infrastructure, carries the risk of
    being a point of breach, an over expense, a decision that starts small but leads
    to a domino line of other decisions that will all be based on that one.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这其中最具挑战性的一方面是，几乎没有空间容纳未成熟的技能。因为信息技术（IT）是围绕核心业务功能、基础设施、支持、效率和安全进行决策和指导的，所以在任何时候，你都希望有专家和成熟的指导。一个看似简单的错误，几乎发生在整个基础设施中的任何地方，都可能成为一个突破口、一个过度支出的风险，或者一个从小错误开始却导致一系列连锁反应的决策，这些决策都将基于那个错误。
- en: Most businesses do not need most, if indeed any, individual skill more than
    part time with some skills, like that of CIO, being needed potentially for just
    a few hours per year. Obviously if skills are not needed more than a few hours
    per year, or even if only a few per day, paying for the skill full time would
    not make sense.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数企业不需要大多数技能，甚至几乎不需要任何个人技能，某些技能（如CIO）可能一年只需要几个小时。显然，如果某项技能每年只需要几个小时，甚至每天只需要几个小时，那么全职支付这项技能的费用显然是没有意义的。
- en: Then there is the issue of coverage. Many businesses need to only have coverage
    for forty hours per week with strict office hours and all systems capable of being
    taken offline when the office is close. This is, however, not at all normal. Most
    businesses need to operate six or seven days per week, and long hours per day
    and running twenty four by seven is totally reasonable. To have full coverage
    just for someone to answer support tickets, let alone make decisions or solve
    real problems, would require at least five people just to have shift coverage,
    ignoring any skills needed.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 接着是覆盖的问题。许多企业只需要在每周工作四十小时内提供支持，并且严格的办公时间内，所有系统都可以在下班时离线。然而，这种情况并不常见。大多数企业需要每周运营六到七天，每天长时间工作，并且全天候运行是完全合理的。为了提供完全的支持，仅仅让某人回答支持票，甚至做出决策或解决实际问题，就需要至少五个人来轮班，忽略任何技能要求。
- en: 'When you consider all of the discrete roles that exist in even the most minimal
    IT environment: systems, networking, CIO, helpdesk, desktop support, end user
    support, application support and then any specialty roles like cloud applications,
    backup, disaster recovery, project management, and on and on. What many companies
    attempt to do is to find a single person who can fill all of these roles, a generalist.
    This is a great theory, there is one person with tons of skills who can do a little
    bit of each one adding up to one whole person.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 当你考虑到即使在最简单的 IT 环境中也存在的所有独立角色：系统、网络、CIO、帮助台、桌面支持、终端用户支持、应用程序支持，以及任何专业角色如云应用、备份、灾难恢复、项目管理等，你会发现很多公司试图寻找一个可以胜任所有这些角色的人，一个通才。这是一个很好的理论：有一个拥有众多技能的人，可以做每个角色的一点，合起来就是一个完整的人。
- en: In the real world, this does not work, at all. First because the number of people
    who truly possess all those skills, keep them up to date, and are so good at all
    of them in the universe can probably be counted on one hand. Second, anyone with
    good CIO level skills or system administration skills has a huge per hour billable
    value from those skills alone. A worker is always worth the value of their maximum
    skill full time, not their minimum skill. And having additional skills raises
    your maximum. So a CIO with all these other skills would be, in theory, worth
    even more than if they only had the CIO skill. So even if you found such a person,
    either you would have to pay them an absorbent amount of money to do the job,
    or they would have to be willing to do the job for a tiny fraction of their value
    which from an employment standpoint makes no sense.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，这根本行不通。首先，因为真正具备所有这些技能、能保持技能更新并且在所有这些技能上都很出色的人，估计在全世界可能得用一只手就能数得过来。其次，任何具备良好
    CIO 水平或系统管理技能的人，单凭这些技能就能有很高的按小时计费价值。一个员工的价值总是基于他们的最高技能的全职价值，而不是最低技能的价值。而拥有额外技能可以提高你的最大价值。所以一个具备所有这些技能的
    CIO，从理论上讲，应该比只有 CIO 技能的人更有价值。所以即便你找到这样一个人，你要么得支付他们一笔巨额薪水，才能让他们做这个工作，要么他们得愿意以自己价值的极小一部分薪水做这份工作，而从雇佣角度来看，这毫无意义。
- en: Second because of coverage. A single person can only work so many hours leaving
    a business without support most of the time. And even if you have a business that
    only exists eight hours a day and is happy to do all support and even proactive
    maintenance during that time you still have the issue that generally many of the
    roles that one person is called on to perform will need to happen simultaneously.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 其次是覆盖问题。一个人能工作多少小时，通常意味着业务大部分时间没有得到支持。即使你有一家只在每天八小时内运营的公司，且愿意在这段时间内做所有支持和主动维护，仍然存在这样一个问题：一般来说，一个人被要求执行的许多角色需要同时进行。
- en: Amazingly, tons of companies of all sizes attempt this approach and universally
    end up with bad results, although many never measure their results or even understand
    what good performance from an IT department should look like or even what that
    department should be accomplishing so often ignore or even praise the failures
    in this area.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，各种规模的公司都在尝试这种方法，并普遍得到了糟糕的结果，尽管很多公司从未衡量过他们的结果，甚至不了解 IT 部门应该呈现的良好表现是什么，或者该部门应该完成什么任务，因此往往忽视甚至赞扬这些领域的失败。
- en: Finding a theoretically useful lower limit to the size of an IT department is
    hard. As a rule of thumb, if you do not need at a minimum three full time IT staff
    who never do anything outside of IT, then you should not try to staff an IT department.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 找到一个理论上有效的 IT 部门最低规模是很困难的。作为经验法则，如果你不至少需要三名全职 IT 员工，且他们从不做任何 IT 之外的事情，那么你就不应该尝试组建一个
    IT 部门。
- en: Entire ranges of IT businesses like Management Service Providers and IT Service
    Providers provide IT skills, management, oversight, and tooling in small portions
    for businesses who only need a little of many different resources. Smaller companies
    should never feel badly turning to these kinds of companies, they are necessary
    to provide the level of scale and division of that scale necessary to do IT well.
    That said, just like employees, the average firm is not going to be very good.
    So just as you want to make sure that you are hiring employees who are good, you
    want to hire a service provider who is good. Service providers are very much like
    employees, but employees that are more likely aligned with your business needs
    and generally with far more potential longevity - a good service provider relationship
    could easily outlast the career length of an individual employee.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 许多IT企业，如管理服务提供商和IT服务提供商，为只需少量各种资源的企业提供IT技能、管理、监督和工具。更小的公司不应该因为求助于这些公司而感到难过，这些公司为实现良好的IT运作所必需的规模和分工提供了必要的支持。话虽如此，正如雇员一样，普通公司的表现不会太好。因此，你希望确保你雇佣的不仅是好员工，也要雇佣一个好的服务提供商。服务提供商很像雇员，但更可能与你的业务需求保持一致，并且通常有更长的潜在服务期
    - 一个良好的服务提供商关系可能比一个员工的职业生涯更长。
- en: Rethinking inappropriate IT departments from both sides can be a boost to the
    industry. So many employers are unhappy with IT results that are predictably bad
    based on the IT structures that they enforce. And so many IT practitioners are
    unhappy with their careers or at least their immediate jobs, because they feel
    that they have to, or are encouraged to, work in environments that simply do not
    make any sense.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 从两面重新审视不合适的IT部门可能会提升整个行业。许多雇主对基于他们施加的IT结构而预料到的不良IT结果感到不满。而许多IT从业者对他们的职业或至少是他们眼下的工作感到不满，因为他们觉得他们必须或被鼓励在根本没有任何意义的环境中工作。
- en: Considering service providers as part of the in house IT team can make it possible
    to get the IT team that you need, at a price that is actually plausible. IT is
    not really outside of the budget of any company. If it seems like IT is going
    to be too expensive, something is wrong. The job of IT is to make the business
    money.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 将服务提供商视为内部IT团队的一部分，可以让你以实际可行的价格获得所需的IT团队。IT实际上并不超出任何公司的预算。如果看起来IT费用将会太高，那肯定是出了问题。IT的工作是为企业赚钱。
- en: The most common mistakes that I see when companies engage service providers
    is either assuming many incorrect rules of engagement such as assuming that local
    resources are better or that the service provider has to match the technology
    that you plan to use - if you were doing this, how would you ever determine the
    service provider to hire as only they would have the expertise to determine the
    technology to be used! A Catch-22 for sure. And the other key mistake is confusing
    service providers (companies that provide IT services) with value added resellers
    (vendor sales representatives). The latter will often market themselves as the
    former, but it is easy to tell them apart. The first one's business is to provide
    IT as a service. The second one's business includes selling hardware, software,
    and third party services, potentially in addition to layering on some IT.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我看到的公司与服务提供商合作时最常见的错误之一是假设许多不正确的参与规则，比如假设当地资源更好或者服务提供商必须匹配你计划使用的技术 - 如果你这样做，你怎么会确定要雇佣哪家服务提供商，因为只有他们才有决定使用的技术的专业知识！这确实是一个进退两难的局面。另一个关键错误是将服务提供商（提供IT服务的公司）与增值再销售商（供应商销售代表）混淆。后者通常会自称为前者，但很容易区分。第一个公司的业务是提供IT作为服务。第二个公司的业务包括销售硬件、软件和第三方服务，可能还包括添加一些IT服务。
- en: 'Best practices:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践：
- en: Avoid running IT departments that are too small to support the necessary roles
    and division of labour.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 避免运行过小以支持必要角色和分工的IT部门。
- en: Never hire a reseller to do the job of an IT service provider.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要雇佣转售商来做IT服务提供商的工作。
- en: Never allow your IT staff (internal or external) to have a conflict of interest
    and also sell the hardware, software, and services that it is their job to recommend
    and choose.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 决不允许你的IT员工（内部或外部）存在利益冲突，并且还销售他们推荐和选择的硬件、软件和服务。
- en: Now we have a good idea as to why logging is so critical to our organization.
    Good use of and understanding of logs and putting in place a proper, well thought
    out infrastructure for logs is one of the areas in which we truly see a separation
    between struggling and truly excelling IT departments.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们大致了解了为什么日志记录对我们的组织至关重要。良好地使用和理解日志，并为日志建立一个适当、深思熟虑的基础设施，是我们真正看到IT部门在挣扎与卓越之间分水岭的领域之一。
- en: Not a heavily technical discussion at this point. It is really all about sitting
    down and putting in the effort to develop and roll out a logging plan. Making
    logging happen for your organization. Centralized, decentralized, automated, whatever
    works for you. Getting started with something, turn your logs into a robust tool
    that makes your life easier.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 目前并不涉及太多技术性的讨论。实际上，这完全是关于坐下来投入精力来制定和推出日志记录计划。让日志记录在您的组织中发生。无论是集中式的、去中心化的，还是自动化的，任何适合您组织的方式。开始着手，确保您的日志成为一个强大的工具，使您的工作更加轻松。
- en: In the next section we will continue on from logging to look at more general
    monitoring. Two highly related concepts that together really take our administration
    to another level.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将从日志记录继续，探讨更一般的监控。两个高度相关的概念共同作用，真正将我们的管理提升到另一个层次。
- en: Alerts and troubleshooting
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 警报与故障排除
- en: Having just discussed logs we now have to consider the highly related concept
    of system alerting. I have to mention that of course logging systems themselves
    are also a potential source of alerts. If we use automation in our logging systems,
    that automation will generally be expected to either send alerts directly, or
    add alerts to an alerting system.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在刚刚讨论过日志之后，我们现在需要考虑与之高度相关的系统警报的概念。我必须提到，当然，日志系统本身也可能是警报的来源。如果我们在日志系统中使用自动化，那么这些自动化通常会被期望直接发送警报，或将警报添加到警报系统中。
- en: Alerts are, fundamentally, a way for our monitoring systems to reach out and
    tell us humans that they are in trouble and it is time for us to step in and work
    our human-intelligence magic. While we hope that our systems will have automation
    and can repair many problems themselves, the reality is that for the foreseeable
    future nearly all companies will have to keep working in a reality where human
    intervention is needed on a regular basis in systems administration. Whether it
    is to log in and clear a full disk or stop a broken process or identify a corrupt
    file or even to trigger a failover to a different application or notify the business
    of expected impact humans have a large role to play in systems still.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 警报从根本上来说，是我们的监控系统与我们这些人类沟通的方式，告诉我们它们出现了问题，是时候让我们介入并发挥人类智能的魔力了。虽然我们希望系统能够自动化并修复许多问题，但现实是，在可预见的未来，几乎所有公司都必须在一个需要定期进行人工干预的系统管理环境中工作。无论是登录并清理已满的磁盘、停止一个损坏的进程、识别一个损坏的文件，甚至是触发故障转移到另一个应用程序，或通知业务部门预期的影响，人类在系统中仍然扮演着重要角色。
- en: Having good mechanisms for discovering serious issues and alerting humans is
    critical to quality support. In order to understand good alerting, we have to
    talk about both how we discover that something is wrong, and how we are notified
    of it.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有良好的机制来发现严重问题并提醒人类是高质量支持的关键。为了理解良好的警报机制，我们必须讨论如何发现问题并如何接收到通知。
- en: On-device and centralized alerting systems
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设备端和集中式警报系统
- en: We can start by looking at on device and centralized alerts. Traditionally,
    going back more than a few years, it was common for systems to handle their own
    alerts individually. Systems were already set to log issues into a central log,
    it was a natural extension to have them also send out emails or similar notifications
    should something bad be detected. Alerting was very simple, and each system would
    handle its own detection and its own alerting individually. While centralized
    monitoring and alerting has long existed, the popularity of external monitoring
    really did not become highly mainstreamed until it was necessary to monitor hosted
    Internet resources, such as websites, where an outage would often be seen by customers
    first, rather than by employees. When outages are first noticed by internal staff,
    the decision to delay discovery can be more flexible.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从设备端和集中式警报开始进行比较。传统上，回溯到几年前，系统通常会单独处理自己的警报。系统已经设置为将问题记录到中央日志中，因此让它们在检测到坏事时也发送电子邮件或类似的通知是一个自然的延伸。警报非常简单，每个系统都会单独处理自己的检测和警报。虽然集中式监控和警报已经存在很长时间，但外部监控的普及直到需要监控托管的互联网资源（如网站）时才变得非常主流，网站的停机通常首先由客户察觉，而不是由员工察觉。当停机首先被内部员工发现时，推迟发现的决策会更加灵活。
- en: The simplicity of on-device alerting is enticing, and for smaller organizations
    or those that can risk slower error detection it can serve well. The key issues
    with on-device alerting are that many types of serious outages or attacks may
    disable alerting completely, or at least delay it. A simple example is the server
    that loses power or whose CPU melts, the system going offline is what we want
    to receive an alert about, but the system going offline suddenly precludes the
    possibility of the system telling anyone that something bad has happened. The
    same happens when there is a sudden loss of network connectivity. In the event
    of a system compromise, a hacker may take alerting capabilities offline before
    being detected leaving a system running, but unable to call out for help.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 设备端警报的简单性很有吸引力，对于较小的组织或那些可以承受较慢错误检测的组织来说，它是非常适用的。设备端警报的关键问题在于，许多严重的故障或攻击可能会完全禁用警报，或者至少会延迟警报。例如，一个简单的例子是失去电力的服务器或其
    CPU 融化的情况，系统下线是我们想要接收到警报的情况，但系统下线的突然发生排除了系统通知任何人发生了坏事的可能性。网络连接突然丢失时也会发生同样的情况。在系统被破坏的情况下，黑客可能会在被发现之前关闭警报功能，留下一个仍在运行的系统，但无法发出求助信号。
- en: On-device alerting is generally inexpensive and simple. It is often built in
    and only needs a small amount of configuration. If using simple mechanisms such
    as email to send alerts, even simple scripts can add a lot of alerting functionality.
    This approach uses very few system resources and for small businesses or those
    that simply do not have to worry about potential downtime without employees reporting
    a loss of functionality, it can be adequate.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 设备端警报通常便宜且简单。它通常是内置的，只需少量配置。如果使用简单的机制，如电子邮件发送警报，即使是简单的脚本也能增加很多警报功能。这种方法使用的系统资源非常少，对于小型企业或那些不必担心员工报告功能丧失的潜在停机情况的企业，它是足够的。
- en: For the majority of businesses or workloads, the caveats of on-device alerting
    are too great. Whether a system is customer facing and you want to maximize customer
    confidence, or a system is internal and you want to move discovery of issues from
    employees to IT to improve performance, or a system has few, if any, end users
    that may every discover that it is not working and you want to make sure that
    work is continuing to be done (such as with a scanning security system or filter)
    then external monitoring is necessary.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数企业或工作负载而言，设备端警报的局限性过大。无论系统是面向客户的，你希望最大化客户信任，还是系统是内部的，你希望将问题的发现从员工转移到 IT
    部门以提高性能，或者系统几乎没有最终用户，可能永远也不会发现它无法正常工作，你都需要确保工作继续进行（例如扫描安全系统或过滤器），因此外部监控是必要的。
- en: External monitoring allows us to disseminate alerts even when the system in
    question has completely failed. Because total failure is quite common in alerting
    events, this can be pretty important. Complete failure might mean that hardware
    has failed, power has been lost, software has crashed, or networking has been
    lost, as examples. These are all common failure cases, and all either certainly
    or likely will cause on-device alerting to fail. External alerts give us a level
    of confidence that we will be alerted when something fails that is otherwise lacking.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '外部监控允许我们在系统完全失败时仍然能够传播报警。由于完全失败在报警事件中非常常见，这一点非常重要。完全失败可能意味着硬件故障、电源丢失、软件崩溃或网络断开等。这些都是常见的故障情况，所有这些情况都会导致设备内部报警失败。外部报警为我们提供了一种信心，使我们在发生故障时能够获得警报，而这种信心在没有外部报警时是缺失的。  '
- en: Of course, external systems can fail as well, leading to a lack of alerts, but
    there are ways that we can effectively hedge against this. One option, of course,
    is external alerting on the external alerting system. Essentially backup alerting.
    And of course, by having only a single alert source, it is easy for us to simply
    check that source as humans to verify that it is working. An external alert mechanism,
    if decoupled from the systems that it monitors, is extremely unlikely to fail
    at the same time that another system fails and while not perfect, this will easily
    eliminate 99.99% or more of missed alerts which, for most organizations, is plenty.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，外部系统也可能发生故障，导致没有报警，但我们可以通过一些方法有效地对这种情况进行规避。一种选择当然是对外部报警系统进行外部报警。基本上是备份报警。并且，通过只使用单一的报警来源，我们可以简单地检查该来源是否正常工作。一个外部报警机制，如果与其监控的系统解耦，极不可能与另一个系统同时发生故障，虽然不是完美的，但这种方式可以轻松消除99.99%以上的漏报，对于大多数组织而言，这已经足够了。
- en: Out of band on-device alerts
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '带外设备报警  '
- en: There can be a little bit of a middle ground in alert management. If we think
    of our systems as a stack, each device lower in the stack is able to monitor,
    in a very minor way, the services running above it. For example, an application
    can tell us if a database connection is working, the operating system can tell
    us if an application is still running, a hypervisor can tell us if the operating
    system is still running, and, at the bottom of the stack, an out of band management
    hardware device can tell us if the core system components have failed.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '在报警管理中，可以有一定的折中。如果我们把系统视为一个层次结构，那么每个层次较低的设备都能够以非常微小的方式监控其上方运行的服务。例如，应用程序可以告诉我们数据库连接是否正常，操作系统可以告诉我们应用程序是否仍在运行，虚拟机管理程序可以告诉我们操作系统是否仍在运行，而在堆栈的底部，带外管理硬件设备可以告诉我们核心系统组件是否已发生故障。  '
- en: This system is not foolproof and tends to be quite basic. An operating system
    knows very little about the workings of an application process and mostly can
    only tell us if the application has crashed completely causing an error code be
    returned to the operating system, or it can tell us if the application is using
    an inordinate amount of resources such as suddenly spiking in memory requests
    or using a large number of CPU cycles, but the operating system will have little
    idea if the application keeps running but is throwing errors or gibberish to end
    users.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '该系统并非万无一失，且通常相当基础。操作系统对应用程序进程的工作了解非常有限，通常只能告诉我们应用程序是否已完全崩溃并返回错误代码给操作系统，或者它可以告诉我们应用程序是否使用了过多的资源，例如突然增加内存请求或消耗大量的CPU周期，但操作系统无法判断应用程序是否仍在运行，但却向最终用户抛出错误或乱码。  '
- en: For those unfamiliar, out of band management is actually an external *computer*
    that is housed inside of the chassis with the server hardware but has its own
    tiny CPU, RAM, and networking. Because it is a nearly completely separate computer
    from the server itself, the OOB (out of band) management system can report, either
    directly or to some monitoring system, if there are critical hardware failures
    on the server itself such as a failed motherboard, CPU, memory, storage, or other
    component that would normally make the server itself unable to send out its own
    alerts.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '对于不熟悉的人来说，带外管理实际上是一个外部*计算机*，它安装在机箱内，与服务器硬件同处一体，但它有自己的小型CPU、RAM和网络。由于它与服务器本身几乎是完全独立的计算机，因此带外（OOB）管理系统可以直接或通过某些监控系统报告服务器本身的关键硬件故障，例如主板、CPU、内存、存储或其他通常会导致服务器无法发送报警的组件故障。  '
- en: An OOB management system does share the chassis, location, and power with the
    server, though. This means that it still has limited ability to monitor a system
    for certain types of common failures. As with many things, for many businesses
    this might be adequate, for others it will not be enough.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，OOB管理系统确实与服务器共享机箱、位置和电源。这意味着它仍然只能有限地监控系统中某些类型的常见故障。正如许多事情一样，对于许多企业来说，这可能足够了，但对于其他企业来说则可能不够。
- en: Pushed and pulled alerts
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推送和拉取警报
- en: Alerting systems also have two basic ways of interacting with us, as the actors
    being alerted by the system. What we tend to think of is pushed alerts. That is,
    alerts that are sent to us with the intention of grabbing our attention when we
    are not thinking about alerts.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 警报系统与我们之间也有两种基本的交互方式，作为被警报的接收方。我们通常想到的是推送警报。也就是说，警报是以吸引我们注意力为目的，在我们没有想到警报时发送给我们的。
- en: Typically pushed alerts go out via email, text messages (SMS), telephone calls,
    WhatsApp, Telegram, Signal, RocketChat, Slack, Microsoft Teams, Zoho Cliq, MatterMost,
    or other, similar, real-time communications channel. Some alerting systems have
    their own applications that you install to desktops or smartphones so that they
    can push out alerts rapidly and reliably without having to integrate or depend
    on any additional infrastructure. You can easily imagine an organization running
    their own email and messaging platforms only to have those platforms be monitored
    by our alert system and also be the path by which we receive the alerts. Even
    if the alerting system itself does not fail, it is possible that it will be unable
    to tell us that something has failed because the systems that it monitors are
    also the systems that get the alerts to us. This is why having one fewer path
    to fail and one fewer dependency in alert delivery is sometimes approached.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，推送警报通过电子邮件、短信（SMS）、电话、WhatsApp、Telegram、Signal、RocketChat、Slack、Microsoft
    Teams、Zoho Cliq、MatterMost或其他类似的实时通讯渠道发出。有些警报系统拥有自己的应用程序，用户可以将其安装到桌面或智能手机上，这样它们就能快速可靠地推送警报，而无需集成或依赖其他基础设施。你可以想象一个组织运行自己的电子邮件和消息平台，而这些平台又被我们的警报系统监控，并且也成为我们接收警报的路径。即便警报系统本身没有失败，但它可能无法告诉我们发生了故障，因为它监控的系统也是将警报送到我们这里的系统。这就是为什么有时会采取减少失败路径和减少警报传递依赖的做法。
- en: Alerting is a surprisingly complex animal. If alerting was being handled by
    humans, rather than computers, we would quickly find that call centers have complex,
    multi-branch decision trees to follow for what to do when we cannot tell someone
    that something is wrong. With humans, though, we know that in an extreme emergency
    someone will start pulling out their personal cell phone and texting someone to
    call someone and knock on a door and wake someone up or whatever. Computers can
    do all of this, too, but they need access to those tools, algorithms to make those
    decisions, and knowledge of how to reach people. Easier said that done.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 警报系统实际上是一个令人惊讶的复杂系统。如果警报是由人工而非计算机处理的，我们会很快发现呼叫中心有复杂的多分支决策树，指引他们在无法告诉某人有问题时该怎么做。然而，依赖人工时，我们知道在极端紧急情况下，总会有人拿出个人手机，给某人发短信，叫某人打电话或敲门叫醒别人，或者做其他类似的事情。计算机也能做这一切，但它们需要访问这些工具、做出这些决策的算法，以及知道如何联系到人。这说起来容易，做起来难。
- en: To solve this particular problem, many companies opt to include humans in the
    communications path. An expensive, but effective, tool. Sometimes human decision
    making, and flexibility wins out. Human call centers that are always staffed and
    receive alerts on behalf of technical teams and managers and then manage the contact
    path to whomever needs to receive the alert can be a great option. And, obviously,
    hybrid options where computer systems alert end recipients directly but humans
    are always involved in verifying that alerts go out, acknowledgements are received,
    or whatever is possible.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个特定的问题，许多公司选择在通信路径中加入人工。虽然这是一种昂贵但有效的工具，有时候人类的决策和灵活性会占上风。总是有人值班的人工呼叫中心，代表技术团队和管理人员接收警报，并将联系路径管理到需要接收警报的人，是一个很好的选择。显然，混合选项也是可行的，其中计算机系统直接提醒最终接收者，但始终有人参与验证警报是否已发送、是否收到确认，或执行其他可行操作。
- en: The alternative to pushed alerts is pulled alerts. Pulled alerting refers to
    systems that display the status of any open or logged alerts when the end user
    logs in to look at them. These systems are vastly more reliable because the end
    user is looking at the system and knows if there is an inability to view the alert
    status or not. If the system has failed, then they can start working on the issue
    right away. If it has not failed, they see the alerts and know if action is needed
    or not.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 推送警报的替代方案是拉取警报。拉取警报指的是系统在最终用户登录查看时，显示任何已打开或记录的警报状态。这些系统要可靠得多，因为最终用户在查看系统时，能够知道是否存在无法查看警报状态的情况。如果系统出现故障，他们可以立即开始处理问题。如果没有故障，他们就能看到警报，并知道是否需要采取行动。
- en: Silence as success
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安静即成功
- en: The basic problem that arises with using purely pushed alerts is that we rely
    on silence to tell us that everything is okay. Rather than getting a confirmation
    that everything has been checked and that nothing is currently wrong, we depend
    on not having been reached to create an assumption of nothing being wrong. This
    is a dangerous approach.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 使用纯粹的推送警报所产生的基本问题是，我们依赖安静来告诉我们一切正常。我们并没有得到确认，表明一切都已检查且目前没有问题，而是依赖于没有被联系到来假设一切没有问题。这是一种危险的做法。
- en: We all know the feeling of waking up or having been on a long car ride or maybe
    being at a party and not actively watching our phones and mostly feeling good
    that the office has not reached out to us, no one has called, so everything must
    be fine. Then you look at your phone some hours later and realize that the battery
    has died, there was no service, or you had your phone on silence. Panic sets in.
    You plug in your phone, get service back, and turn on the ringer and find that
    you have been missing call after call, voicemail after voicemail, text after text
    telling you that there is a huge emergency, you left the office having changed
    a critical password and not telling anyone, the system is down, no one can get
    in except for you and you are not responding!
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都知道那种感觉：醒来后，或长时间开车后，或者在派对上没有积极查看手机，心里大致觉得办公室没联系我，没有人打电话，应该没问题。然后几个小时后你看看手机，发现电池没电了，没信号，或者手机处于静音状态。然后
    panic（恐慌）袭来。你插上手机，恢复信号，打开铃声，发现自己错过了一个又一个电话、语音邮件和短信，告诉你发生了大紧急，你离开办公室时更改了一个重要密码却没告诉任何人，系统崩溃了，除了你没人能登录，而你没有回应！
- en: Trusting that no one was able to get my attention, therefore nothing can be
    wrong just does not work. But neither does staring at a console and never being
    offline. There has to be a balance. It is clear that simply hoping that you will
    be able to be reached is a recipe for disaster. Maybe a disaster that takes many,
    many years to finally happen, but a disaster that is almost certainly going to
    happen eventually. There are just too many variables that can go wrong.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅相信没人能引起我的注意，因此没有问题是行不通的。但一直盯着控制台、不离线也同样不可行。必须找到一个平衡点。显然，仅仅希望自己能被联系到，这是一场灾难的食谱。也许这是一个需要很多年才会发生的灾难，但几乎可以肯定，这种灾难最终会发生。毕竟，出错的变量太多了。
- en: Pull monitoring and alert systems are therefore important as a means of verifying
    that pushed alerts are working currently or to work around known disconnects.
    Or to run an active monitoring site.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，拉取监控和警报系统非常重要，它们既能验证推送警报是否正常工作，也能用来绕过已知的断开问题，或者用于运行一个主动监控站点。
- en: Alerting's systems, too, struggle with defining a successful alert. Many mechanisms
    like email and SMS texting will confirm only that a message has been sent or possibly
    received by the recipient's infrastructure vendor, but they do not give any indication
    that the message has made it all of the way to the end user's device, or that
    the end user has been displayed the message. Even if a message does go end to
    end, does it get filtered into a spam folder and hidden? Unless we have a human
    actually acknowledge an alert there is very little, we can do to have confidence
    that an alert has truly been seen.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 警报系统也在努力定义成功的警报。许多机制，如电子邮件和短信，只会确认消息是否已发送，或者可能已被接收方的基础设施供应商接收，但它们并未表明消息是否已传送到最终用户的设备，或最终用户是否已看到该消息。即使消息从头到尾都传送了，它是否被过滤到垃圾邮件文件夹并隐藏了？除非有人工确认警报，否则我们几乎无法有信心确认警报确实已被看到。
- en: 'Pulled alert systems, generally displayed as dashboards, are typically what
    we picture as a red light, green light system. It is common to display monitored
    systems or components graphically and to show systems believed to be healthy shown
    as green, those experiencing problems, but not yet indicating an outage as yellow,
    and those that have failed whatever sensor test we are performing as red. This
    does not just give the humans the ability to quickly eyeball the range of alerts,
    but also makes it trivial for the system to roll up large groups of alerts into
    single displays. As long as those are green, you know everything in the group
    is healthy. If it is red, you can dig in to see exactly what is wrong. At the
    highest level you can, in theory, even have a single big indicator that shows
    as green or red. Green if systems are one hundred percent good and red if any
    system has failed. Simply: is action needed or is it not. If you can be green
    most of the time, this might be exactly what you need to combine reliable monitoring
    with low overhead in verification.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取警报系统，通常以仪表板的形式显示，通常我们将其想象为红绿灯系统。通常会以图形方式显示监控的系统或组件，并将被认为健康的系统显示为绿色，将遇到问题但尚未指示故障的系统显示为黄色，而将通过传感器测试失败的系统显示为红色。这不仅使人类能够快速浏览警报的范围，而且还使得系统能够轻松地将大量警报汇总为单个显示。只要显示为绿色，你就知道该组中的所有系统都健康。如果显示为红色，你可以深入查看具体问题所在。在最高层次上，理论上，你甚至可以有一个大的单一指示器，显示为绿色或红色。如果所有系统完全正常则为绿色，若有任何系统失败则为红色。简单来说：是否需要采取行动。如果大部分时间都能保持绿色，这可能正是你需要的，将可靠的监控与低验证开销相结合。
- en: Most alert systems will offer both a dashboard to show pulled alerts along with
    push notifications to improve response times and reach people who are not actively
    checking alerts. Pulled alert systems are often used at the core of a call center
    where humans on shifts watch the pulled alerts around the clock and either enact
    the push alerts to the concerned parties or follow up to ensure delivery of automated
    alerts. It is less common for organizations to open pulled alerts to many staff
    which can be a mistake as it can lower stress and increase alert reliability.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数警报系统都会提供仪表板来显示拉取的警报，同时也提供推送通知，以提高响应速度并联系那些没有主动检查警报的人。拉取警报系统通常用于呼叫中心的核心，在这里，值班的工作人员全天候监视拉取的警报，并将推送警报传达给相关方，或跟进确保自动警报的送达。很少有组织将拉取警报开放给许多员工，这可能是一个错误，因为这样会降低压力并提高警报的可靠性。
- en: Similarly, the interaction between the monitoring system and the end points
    that are being monitored can work in either direction or both. The monitoring
    system may have remote access to the end points and actively reach out to them
    to request their status. Or an agent running on the end points may reach out to
    the monitoring server to push their status over to it.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，监控系统与被监控端点之间的互动可以是双向的，也可以是单向的。监控系统可能拥有远程访问端点的能力，并主动请求端点的状态。或者，运行在端点上的代理程序可能主动联系监控服务器，将其状态推送过去。
- en: In house and hosted monitoring
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内部和托管监控
- en: Monitoring and alerting are, in some ways, two separate pieces and there is
    software and services that do either, and those that do both. The monitoring component
    determines if a series of sensors detects something that is wrong in our workloads.
    The alerting component takes the results of the monitoring and attempts to notify
    the correct parties. It used to be that the two components were always merged
    into single products, but in more recent years with more and more types of systems
    needing to be monitored (more than IT systems, that is) and as alerting needs
    have increased and have needed to become more robust, different vendors have started
    to build each independently in some cases.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 监控和警报在某些方面是两个独立的部分，有些软件和服务仅执行其中之一，也有些同时执行两者。监控组件决定一系列传感器是否检测到我们的工作负载中存在问题。警报组件则基于监控结果，尝试通知相关方。过去，这两个组件总是合并成单一的产品，但近年来，随着越来越多的系统类型需要被监控（不仅仅是
    IT 系统），以及警报需求的增加和需要变得更加稳健，某些供应商已开始分别独立构建这两个组件。
- en: Today monitoring solutions come in a good variety of packages and styles. You
    easily may decide that you would benefit from using more than one. Choosing a
    good package might be the hardest part of your monitoring puzzle. Monitoring software
    is available commercial and free, closed and open source, and built to run on
    nearly any platform.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，监控解决方案有很多种包和风格。你可能很容易决定，使用多个解决方案对你有帮助。选择一个合适的解决方案可能是你监控工作中最困难的部分。监控软件有商业版和免费版，有封闭源代码和开源版本，并且可以在几乎任何平台上运行。
- en: Monitoring is a function that you will generally want to host externally to
    your primary infrastructure as you want it be less quick and reliable, and more
    totally independent of your other systems compared to other workloads. You can
    host it yourself on your own equipment, go with third party cloud or VPS hosted
    infrastructure, or get a SaaS application from a provider. You can tackle this
    in any manner than makes sense for your organization. But rarely do you want your
    monitoring solution to sit on the same hardware, let alone the same datacenter,
    as your other workloads or you risk losing monitoring when you lose everything
    else.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 监控是一项功能，通常你会希望将其托管在你的主要基础设施之外，因为你希望它的响应速度较慢且更可靠，并且相比其他工作负载，它与其他系统的独立性更强。你可以在自己的设备上托管，选择第三方云或VPS托管的基础设施，或者从服务提供商处购买SaaS应用程序。你可以根据组织的需求选择任何合适的方式来处理这个问题。但很少有人希望将监控解决方案与其他工作负载共享同一硬件，更不用说共享同一个数据中心了，否则在你丧失其他系统时，也会失去监控功能。
- en: Whether to run and maintain your own monitoring or to go with a hosted product
    will mostly be a question of cost and politics within your organization. Even
    free and open-source monitoring solutions can be robust enough for the most demanding
    of organizations. You will need to determine if the cost of building, maintaining,
    and *monitoring* a monitoring solution makes sense for your organization or if
    simply buying that functionality ready to go makes sense for you. In most cases
    this is determined by scale. If you monitor a very large number of workloads or
    your monitoring needs are highly unique you may benefit from building the expertise
    in house and having full time specialists dedicated to this project. Generally
    for a project like this to be cost effective to keep in house you will want to
    have either fully dedicated staff or heavily dedicated staff who have the time
    and resources to really learn the products and maintain them properly. Often monitoring
    and logging will be bundled together whether as a single product or under a single
    person or team as they overlap so heavily, and logging can be thought of as a
    specialty function of monitoring. The two may be operated separately or combined.
    Using both through the same alerting channels generally makes sense as they can
    leverage the same effort and infrastructure.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 是否自行运行和维护监控系统，或选择托管产品，通常是由成本和组织内部的政治因素决定的。即使是免费的开源监控解决方案，对于最苛刻的组织也足够强大。你需要判断构建、维护和*监控*一个监控解决方案的成本是否对你的组织合理，还是直接购买现成的功能更划算。在大多数情况下，这取决于规模。如果你监控的工作负载数量非常大，或者你的监控需求非常独特，可能会受益于内部培养专业知识，并有全职专家专注于这个项目。通常，要让这样的项目在内部保持成本效益，你需要有完全专职的员工，或者有大量专职员工，他们有足够的时间和资源深入学习产品，并妥善维护它们。通常，监控和日志记录会捆绑在一起，无论是作为单一产品，还是由一个人或一个团队负责，因为它们有很大的重叠，而日志记录可以视为监控的一个专业功能。两者可以独立操作，也可以结合使用。通过相同的警报渠道使用它们通常是合理的，因为它们可以共享相同的工作和基础设施。
- en: Like most things in this chapter, the real struggle around best practices is
    finding what we can distill as being *best* as guidance here is very broad and
    mostly ambiguous. There is no one size fits all. It seems like cheating to say,
    but it is true that the real best practice here is to evaluate your business'
    needs based on cost, functionality, support, separation from your production environment
    and determine what monitoring and alerting mechanisms are right for you.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 就像本章中的大多数内容一样，最佳实践的真正难点在于找到我们能提炼出的*最佳*实践，因为这里的指导非常广泛且模糊。没有“一刀切”的方法。听起来像是作弊，但事实是，真正的最佳实践是根据成本、功能、支持、与生产环境的分离，评估你业务的需求，并确定适合你的监控和警报机制。
- en: RMMs and monitoring
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RMM 和监控
- en: If you work in internal IT then the term RMM might be something that you have
    never heard of, but if you have worked in the service provider sector then RMMs
    are the core tools expected to be used for customer support in that area.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在内部 IT 工作，可能从未听说过 RMM 这个术语，但如果您曾在服务提供商行业工作过，那么 RMM 就是客户支持中预期使用的核心工具。
- en: An RMM, which stands for Remote Monitoring and Management, is a tool category
    designed around the needs of service providers who almost always need to work
    remotely to their client sites and to be able to quickly monitor many disparate
    client systems at one time. This is generally quite different from internal IT
    needs where often they are not remote and even when they are, their systems are
    typically integrated.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: RMM（远程监控和管理）是一类工具，专为服务提供商设计，服务提供商几乎总是需要远程工作到客户站点，并能够同时快速监控多个不同的客户系统。这与内部 IT
    需求通常大不相同，内部 IT 通常不远程操作，即使是远程，系统也通常是集成的。
- en: A rare few non-service providers still lean on RMM tools as a monitoring mechanism.
    Typically RMMs are very light and inflexible but are, at their core, monitoring
    systems much like what we are discussing here. So you can certainly consider using
    an RMM that you purchase or run yourself, or if you have a service provider, this
    might be part of the service that you are already paying for. RMMs are even available
    as free, open-source products. So no company, of any size can say that they do
    not have the resources to at least do the most basic levels of monitoring.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 很少数非服务提供商仍然依赖 RMM 工具作为监控机制。通常 RMM 工具非常简洁且不灵活，但本质上，它们也是我们在这里讨论的那种监控系统。因此，您当然可以考虑使用购买的或自己运行的
    RMM，或者如果您有服务提供商，这可能是您已经支付的服务的一部分。RMM 甚至有免费的开源产品。因此，任何规模的公司都不能说他们没有资源至少进行最基本的监控。
- en: In some cases, traditional monitoring tools designed for internal IT teams are
    so robust that they actually displace RMMs in service providers. Or the two could
    be used in tandem, as well.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，专为内部 IT 团队设计的传统监控工具如此强大，以至于它们实际上取代了服务提供商中的 RMM。或者，这两者也可以并行使用。
- en: The rule of thumb is that more monitoring is better than less, hosting outside
    of your environment is generally best, make sure that alerts have many channels
    to find a way to get to a human, make sure that pull monitoring is available to
    at least verify that push is working, and consider having your monitoring system
    create actionable tickets for your support team automatically to track follow
    ups.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 经验法则是，监控越多越好，最好将托管放在外部环境中，确保警报有多个渠道，以便找到通向人工的方式，确保至少可以验证推送是否正常工作的拉取监控，并考虑让监控系统自动为支持团队创建可操作的工单，以便跟踪后续事项。
- en: 'Is there an actual best practice? Yes. The best practice here is simple and
    broad: if a workload has a purpose, then it should be monitored. Monitoring, because
    it does not directly stop production from running if it does not exist, can too
    easily be overlooked. Almost no one gets promoted for doing good monitoring or
    fired for lacking it, but implementing proper monitoring is effective in separating
    the good administrators from the run of the mill.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 是否有最佳实践？是的，最佳实践简单而广泛：如果工作负载有一个明确的目的，那么它就应该被监控。监控由于不直接影响生产的运行，所以如果不存在监控，容易被忽视。几乎没有人因为做好监控而获得晋升，也几乎没有人因为缺乏监控而被解雇，但实施适当的监控能有效地将优秀的管理员与普通管理员区分开来。
- en: Go set up some monitoring!
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 去设置一些监控吧！
- en: Summary
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we have looked at the range of key non-systems components that
    surround the systems themselves. Documentation, system measurement, data collection
    and planning, log collection and management, and finally monitoring sensors and
    alerting based on them. These could almost be considered soft skills within the
    systems administration realm.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们已经讨论了围绕系统本身的一系列关键非系统组件。文档编制、系统测量、数据收集与规划、日志收集与管理，以及最后的监控传感器和基于它们的警报。这些几乎可以视为系统管理领域的软技能。
- en: Consistently in environments that I have taken over we have found documentation
    to be practical non-existent, measuring systems to be all but unheard of, capacity
    planning being a process no one has ever so much as discussed, monitoring often
    minimal and unreliable at best, and log collection while well understood, simply
    a pipe dream when it comes to real world implementation. Yet a single system administrator
    with almost no resources could, with just some time, pull together some free,
    open-source software and tackle each of these projects on their own with little
    to no budgetary constraints and could often hide the workloads somewhere within
    the system if it was necessary to do so.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在我接管的环境中，我们发现文档几乎不存在，测量系统几乎没有人提及，容量规划是一个没人讨论过的过程，监控通常最小且可靠性差，日志收集虽然被理解，但在实际实施中依然是一个空想。然而，一位几乎没有资源的系统管理员，只需要一些时间，就能通过一些免费的开源软件独立解决这些问题，且几乎没有预算限制，如果需要的话，还能将工作负载隐藏在系统中的某个地方。
- en: This chapter has not been about how to make your systems run better; it has
    been about everything else. How do we know that they have been running better?
    How do we know that they are running right now? How do we know that we can pass
    the proverbial baton on to someone else should we win the lottery? How do we confidently
    say that we are doing what needs to be done to make a best effort against a malicious
    attack? The topics in this chapter have made us look at how to be better at all
    of the things that we do and not just the ones that are most visible.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 本章并不是关于如何让你的系统运行得更好，而是关于其他方面。我们如何知道它们运行得更好？我们如何知道它们现在在运行？我们如何知道，如果中了大奖，我们能将工作交接给别人？我们如何自信地说，我们正在做需要做的事情，以最好方式应对恶意攻击？本章的主题让我们思考如何在我们所做的一切中变得更好，而不仅仅是最显眼的部分。
- en: Up your visibility
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 提升你的可见度
- en: Too often what we do in IT is completely invisible to those on other teams,
    even those in management to whom we report. Maybe it is invisible because there
    is simply nothing to show. Or maybe what we do is too hard and complex for people
    outside of our realm to really understand. Or maybe we are invisible because we
    choose to accept being invisible.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在IT中的工作常常对其他团队的人，甚至是我们汇报的管理层来说是完全不可见的。也许是因为根本没有可以展示的东西。或者可能我们做的事情太难、太复杂，外部的人无法真正理解。又或者我们之所以不可见，是因为我们选择接受这种隐形的状态。
- en: Most of the topics in this section provide perfect opportunities to step out
    of the IT dungeon or closet and get in management's face(s) to do a little IT
    team self-promotion. From monitoring dashboard to beautiful documentation, to
    capacity charts, to log drill down examples there is almost always something that
    we can print out or show on a big screen and look pretty impressive for having
    implemented.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的大多数话题都为我们提供了完美的机会，走出IT的地下室或储藏室，走到管理层面前，做一点IT团队的自我宣传。从监控仪表板到漂亮的文档，再到容量图表、日志细节展示，几乎总有些东西我们可以打印出来或在大屏幕上展示，展示自己已实施的项目，给人留下深刻印象。
- en: Getting the attention of management and showing that we are being proactive,
    that we are following best practices, this is where we can make a sales pitch
    for just how amazing our value is to the organization. Do not be afraid to do
    some self-promotion, you deserve it. Make some noise and show off how you are
    preparing the business for the greatest success.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 吸引管理层的注意，并展示我们是积极主动的，遵循最佳实践，这正是我们可以为自己赢得组织价值的机会。不要害怕做自我宣传，你应得的。制造一些声音，展示你如何为企业的最大成功做好准备。
- en: Go out and make sure that all of these systems mentioned in this chapter are
    implemented in your environment. Keep it simple to get started, but do not skip
    systems.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 去确保本章中提到的所有系统都已在你的环境中实施。刚开始时保持简单，但不要跳过任何系统。
- en: In our next chapter we are going to move on to scripting and system automation
    including DevOps, which I know that you have been waiting for.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将进入脚本编写和系统自动化，包括DevOps，我知道你一直在期待这一部分。
