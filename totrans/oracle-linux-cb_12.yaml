- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigating Ansible Waters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ll walk through several recipes that will expand your knowledge
    on installing **Oracle Linux Automation Manager** (**OLAM**), managing its foundation,
    creating playbooks, maximizing those playbooks, and helping you understand the
    capabilities of OLAM. Each recipe will open your eyes to the full scope of what
    automation can accomplish; from patching to deploying fully functional hybrid
    cloud environments, OLAM can change the direction in which you think of computing
    and open your mind to a new world of rinse and repeat. The following are the touch
    points of a small subsection of what automation can simplify.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1 – Automation touch points](img/B18349_12_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.1 – Automation touch points
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will cover the installation, configuration,
    and usability of the OLAM platform:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing OLAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zip through configuring and managing OLAM from the foundation up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OLAM isn’t fantasy football, but they both use playbooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling the patching chaos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Look beyond automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set it and forget it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing OLAM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the dawn of time we, as the human race, have tried to make things easier,
    quicker, and more efficient. However, I’m sure most of us have heard from our
    parents, “*Never take shortcuts*," or “*When I was a kid, I had to walk to and
    from school uphill, in the snow, with one leg, both ways.*” These anecdotes really
    never change; they evolve as we get to our parent’s age, and we try to pass on
    our wisdom to the next generation. Well, what if I told you that you could have
    your cake and eat it too? Automation is the evolution of computing and the automation
    of repeatable tasks. Now, of course, we can’t automate everything, and there are
    certain tasks that aren’t worth the effort to automate, because they’re not repeatable
    or the factors change to the point that automation would break the process.
  prefs: []
  type: TYPE_NORMAL
- en: The dictionary definition of automation is “*the application of technology,
    programs, robotics, or process to achieve outcomes with minimal human input*."
    Note *process* – the process in which we change, execute, or alter the outcome
    of a result. Automation is that process change. We can automate the installation
    of an application, such as the installation of Microsoft Office, or an antivirus;
    we’ve been automating these processes since the beginning of the world of computing.
    Now, we carry automation to the next level. Take, for instance, Ansible Tower,
    Red Hat’s version of automation. Both Ansible and OLAM are built on AWX, which
    is a powerful and modern web UI and API that allows you to easily manage your
    organization’s Ansible playbook, inventories, vault, and credentials. With AWX,
    you can streamline your automation processes and simplify your infrastructure
    management tasks, all from a single, user-friendly interface. For instance, say
    that a university computer science professor has a lab to prepare every week;
    the lab has 50 students, and each one requires a separate virtual lab to participate.
    The professor wouldn’t want to sit there and rebuild the lab environment every
    week. With Ansible, a playbook (not the football playbook, but an outline and
    functional requirements) can be put together to execute a subset of commands automating
    the creation of that lab environment. By creating that playbook, an engineer can
    alter a few variables to change the number of virtual machines, memory, vCPU,
    or any other resource or application being used. Essentially, Ansible and the
    Ansible playbook shorten the process of creating that lab exponentially, making
    it repeatable and saving the professor from recreating it every week.
  prefs: []
  type: TYPE_NORMAL
- en: OLAM is an automation suite and comes bundled as an open source Linux distribution
    (Oracle Linux), based on AWX and Ansible Tower. OLAM is a configurable automation
    platform, much like Ansible, with the ability to create, manage and change playbooks.
    OLAM is installed with a UI, as you’ll see later in this recipe, as well as a
    CLI. Both the UI and CLI are fully functional and have all the granularity of
    Ansible Tower, available at no cost, with a premier support subscription. OLAM
    can be used, as shown in the following figure, to create playbooks that can automate
    processes within multiple arenas, from on-premise virtualization farms and HCI
    environments to application deployments, reaching into multiple cloud platforms
    and hybrid cloud distributions.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.2 – The playbook hierarchy](img/B18349_12_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.2 – The playbook hierarchy
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we’ll be installing OLAM. As with any application installation,
    we need to prepare a base environment to install the application on – in this
    case, Oracle Linux 8 of course. We’ll need to prepare and configure that OS, which
    we will not be walking through in detail, as that was covered in a previous recipe
    in this book. However, it is advisable that you install the OS with a GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll be installing OLAM in **Oracle Cloud Infrastructure** (**OCI**) as a
    virtual machine. Refer to *Chapters 3* and *4* on navigating and configuring OCI
    virtual machines. We’ll briefly walk through the creation of the VM in the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to OCI **Instances**, to create a host instance for OLAM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.3 – Instances for VM Creation](img/B18349_12_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.3 – Instances for VM Creation
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll want to create an instance, by clicking on **Create instance**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.4 – Instance Creation](img/B18349_12_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.4 – Instance Creation
  prefs: []
  type: TYPE_NORMAL
- en: 'You can name your instance, and select a compartment to host the VM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.5 – Name your instance](img/B18349_12_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.5 – Name your instance
  prefs: []
  type: TYPE_NORMAL
- en: 'After naming the VM, you can select the location, or **Availability Domain**
    (**AD**) you want to host the VM. The AD we’re using is the default AD for OCI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.6 – Availability Domain](img/B18349_12_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.6 – Availability Domain
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re giving our VM 8 GB of RAM and 2 vCPUs, so we’ll want to select the correct
    host configuration. You’ll want to edit and change the shape as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.7 – Image Size and Shape](img/B18349_12_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.7 – Image Size and Shape
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the shape by clicking on **Change shape** and select your shape as shown
    under **Shape name**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.8 – VM Shape Selection](img/B18349_12_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.8 – VM Shape Selection
  prefs: []
  type: TYPE_NORMAL
- en: 'The **VM.Standard.E3.FLEX** shape allows you to specify your resources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.9 – VM Resource Configuration](img/B18349_12_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.9 – VM Resource Configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re going to select 8 GB of RAM (memory) and 2 vCPUs. The minimal requirements
    for OLAM are 2 vCPU’s and 4 GB of RAM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.10 – VM Resource Selections](img/B18349_12_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.10 – VM Resource Selections
  prefs: []
  type: TYPE_NORMAL
- en: 'After configuring your VM resources, you’ll have to configure your access keys
    (public key):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.11 – SSH Key choices](img/B18349_12_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.11 – SSH Key choices
  prefs: []
  type: TYPE_NORMAL
- en: 'You can either create, upload, paste, or continue without a key. We’re going
    to paste our key, by selecting the key, and copying the pasted key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.12 – SSH Key Pasting](img/B18349_12_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.12 – SSH Key Pasting
  prefs: []
  type: TYPE_NORMAL
- en: 'After configuring your key, scroll down to the end of the instance screen,
    and click on **Create**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.13 – VM Creation](img/B18349_12_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.13 – VM Creation
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve created your instance, access the VM using SSH with the `opc` user
    and your key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Adding a YUM repository isn’t difficult at all, and it enables you to update,
    install, deinstall, or patch certain aspects at the OS and kernel levels, including
    applications. As mentioned earlier in the chapter, you can add these repositories,
    via DNF to the OS, while walking through the GUI, or later after the installation.
    Either way, you’ll have to either have access to the outside, meaning we’ll have
    to be able to reach out of the environment to Oracle repositories or a local mirror
    set up. We’re not going to walk through setting up a local mirror, but we will
    walk through adding the repos using DNF:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As shown in the preceding code, we’re adding several repos; most of these are
    required for either OS-level patches or installing OLAM.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'One of the most important aspects of all the prerequisites is the ability for
    an application to see outside of the internal system into the ecosystem; in order
    to do this, we need to open up a portal outside of the internal system – in other
    words, we open firewall ports, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After we open those ports, we’re going to have to enable the repo we just installed
    with DNF. This can be done before configuring the firewall as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After enabling that repo, we need to install and configure the OLAM repo, as
    shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As we did with the base repo, we need to enable the OLAM repo as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After enabling the newer OLAM repository, we need to disable the old one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once that is done, we’ve completed the prerequisites for the OLAM installation
    from an application perspective. However, we need to prepare the database for
    OLAM now. In order to do this, we need to install and configure the database module.
    OLAM uses a Postgres database, which is SQL-based. The following is the command
    to install that module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once we install the module, it needs to be enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we’ve installed and enabled the Postgres module, we can install the
    database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initiating the database is next. This prepares it for use and allows data to
    be overwritten if already present:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the initiation, you’ll want to change the password schema to match requirements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we will enable the database, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After enabling the database, we want to make sure everything is prepared for
    the OLAM installation, so we’ll want to get the status of the database. The following
    is the command to display the status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once this is done, we’re ready to get into the meat and potatoes – installing
    OLAM.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After we’ve completed the prerequisites, we’re ready to move on to the installation.
    Remember that the firewall ports, installing the YUM repositories and Postgres,
    and enabling them are important. Without these prerequisites, you will not be
    able to move forward and the installation will fail:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step to install OLAM is the creation of the AWX user. Remember that
    AWX is the foundation that OLAM is built on, so this is really important:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, that we’ve installed the database engine, we’re going to install the database,
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After we install the database, we want to edit the config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Do you remember when we defined the password variables? Here, we’re notating
    that in the host-based authentication config file, highlighted in the following
    snippet. After we’re finished, we’ll want to make sure to save and exit the configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[root@olam-test ~]# vi /var/lib/pgsql/data/postgresql.conf'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#------------------------------------------------------------------------------'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: CONNECTIONS AND AUTHENTICATION
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: '#------------------------------------------------------------------------------'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Connection Settings -'
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: listen_addresses = 'OCI NAT Address' – IP address in ifconfig
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#listen_addresses = ''localhost''         # what IP address(es) to listen on;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After editing that file, again, make sure to save and exit that configuration.
    After you have saved the file, you’ll want to restart Postgres to make sure all
    of your changes have been committed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After all these changes have been committed, I always like to update all the
    YUM repos and make sure we have all the updates loaded. In order to do this, we
    have to update our system. The following is the DNF command to update the repositories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After you’ve updated all of the YUM repositories, take a quick look at the
    preceding code, and note all of the repos we added and enabled in the previous
    section. You’ll want to restart your virtual machine to make sure all the changes
    are reflected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is the command and the output to install OLAM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you’ll want to exit root, which is very important; you cannot continue
    as root for AWX:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[opc@olam-test ~]# su -l awx -s /bin/bash'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since OLAM runs in a cloud-native environment, we’re using Podman to orchestrate
    the tuning and creation of that fabric. The following is the command to use the
    latest version of Podman to migrate to and create that environment within your
    virtual machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we’re going to pull down the latest version of OLAM from the Oracle Docker
    registry, by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we want to migrate our environment to the containers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we want to create our user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After we’ve created our environment and user, we need to configure that environment.
    This will write the encryption key and annotate the location, address, hostname,
    and other identifiers. However, the VM-specific data is necessary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[awx@olam-test ~]$ exit'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[awx@olam-test ~]$ sudo su - root'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we want to set up our web server. This is done with a typical, widely
    distributed, canned configuration, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[root@olam-test ~]# sudo su -l awx -s /bin/bash'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[awx@olam-test ~]$ awx-manage provision_instance --hostname=10.0.0.193 --node_type=hybrid'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Successfully registered instance 10.0.0.193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '(changed: True)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We’ll register the default environments by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[root@olam-test ~]# vi /etc/receptor/receptor.conf'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '---'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- node:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'id: 10.0.0.44'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- log-level: debug'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- tcp-listener:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'port: 27199'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#- work-signing:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#    privatekey: /etc/receptor/work_private_key.pem'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#    tokenexpiration: 1m'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#- work-verification:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#    publickey: /etc/receptor/work_public_key.pem'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#- tcp-peer:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#    address: 100.100.253.53:27199'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#    redial: true'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#- tls-server:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#    name: mutual-tls'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#    cert: /etc/receptor/certs/awx.crt'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#    key: /etc/receptor/certs/awx.key'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#    requireclientcert: true'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#    clientcas: /etc/receptor/certs/ca.crt'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- control-service:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'service: control'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'filename: /var/run/receptor/receptor.sock'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- work-command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'worktype: local'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'command: /var/lib/ol-automation-manager/venv/awx/bin/ansible-runner'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'params: worker'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'allowruntimeparams: true'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#    verifysignature: true'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we’re going to enable the OLAM service by running the following command;
    this begins the process of accessing OLAM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we want to preload our data by running the following command. Once this
    is done, we’ll be ready to log in to our OLAM instance, and our installation will
    be complete:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 12.14 – OLAM password creation](img/B18349_12_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.14 – OLAM password creation
  prefs: []
  type: TYPE_NORMAL
- en: Zip through configuring and managing OLAM from the foundation up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing OLAM can be done either through the UI or via the CLI. Here, we’ll
    be working through the UI. Think of it this way – OLAM is the platform on which
    you’ll be managing your projects, inventories, playbooks, and automation through
    either your UI or CLI. Projects are at the top layer, and the hierarchy descends
    from there to playbooks and, eventually, triggering automations. Whether you use
    the UI or CLI, you’ll have granular control over your key environments.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.15 – The OLAM hierarchy](img/B18349_12_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.15 – The OLAM hierarchy
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will walk you through viewing, understanding, and executing basic
    commands in your OLAM environment, creating projects, managing groups, and adding
    to inventories.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As shown in the following figure, and in the previous recipe, you’ll want to
    log in to your OLAM environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.16 – OLAM first-time login](img/B18349_12_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.16 – OLAM first-time login
  prefs: []
  type: TYPE_NORMAL
- en: 'The first and highest level in the OLAM hierarchy is the project. You must
    create a project, and that will be the host to all the playbooks and automation
    in that hierarchy. You can have multiple projects that are assigned to different
    assets and inventories. Let''s see how to do that in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create a project, you’ll want to go to the **Resources** tab and
    navigate to **Projects**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.17 – The OLAM Projects option](img/B18349_12_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.17 – The OLAM Projects option
  prefs: []
  type: TYPE_NORMAL
- en: Once in **Projects**, click **Add**. This will open up a window where you can
    define the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.18 – Adding a project](img/B18349_12_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.18 – Adding a project
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve opened up your project configuration page, you’ll want to strategize
    how you want your project to look. In this case, we’re creating a test environment,
    and we have set up two separate test nodes for lab purposes. Defaults are used
    for the playbook directory as well as the project path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.19 – The project variables](img/B18349_12_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.19 – The project variables
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve configured your project, you will want to save that information,
    which will bring you to a screen showing your fully configured project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.20 – The project configuration page](img/B18349_12_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.20 – The project configuration page
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve configured your project, you’ll want to configure your credentials,
    much like your project, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.21 – The Credentials option](img/B18349_12_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.21 – The Credentials option
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to add your credential data for your `opc` user and machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.22 – Credential addition](img/B18349_12_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.22 – Credential addition
  prefs: []
  type: TYPE_NORMAL
- en: You’ll want to either copy or create a key, which you’ll use to access machines.
    Paste it into the **SSH Private Key** section, and enter the names of your key
    and user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.23 – Credential variables and the SSH private key](img/B18349_12_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.23 – Credential variables and the SSH private key
  prefs: []
  type: TYPE_NORMAL
- en: 'After you save the credential, the configured credential will be displayed,
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.24 – Credential configuration page](img/B18349_12_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.24 – Credential configuration page
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll need to add an inventory. Remember that two test virtual machines
    were created for this, and in this recipe, they will be used as test environments.
    Select **Inventories**, and follow the next steps to define the inventory after
    selecting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.25 – The Inventories option](img/B18349_12_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.25 – The Inventories option
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Add** to create and define your new inventory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.26 – Adding an inventory](img/B18349_12_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.26 – Adding an inventory
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll define your inventory with a name, using the default organization:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.27 – Inventory variables](img/B18349_12_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.27 – Inventory variables
  prefs: []
  type: TYPE_NORMAL
- en: 'The configured test inventory is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.28 – The inventory configuration page](img/B18349_12_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.28 – The inventory configuration page
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating an inventory, we have to add hosts to it. This will involve
    adding machines that we can test automation on. Select **Hosts** in the menu selection,
    and then the host from the list, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.29 – The Hosts option](img/B18349_12_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.29 – The Hosts option
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then add your new host, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.30 – Adding a host](img/B18349_12_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.30 – Adding a host
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the configuration page to create your new host; make sure
    to select the inventory you just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.31 – The host variables](img/B18349_12_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.31 – The host variables
  prefs: []
  type: TYPE_NORMAL
- en: Make sure to save your configuration. Once you have done so, the host configuration
    will be displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.32 – The host configuration page](img/B18349_12_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.32 – The host configuration page
  prefs: []
  type: TYPE_NORMAL
- en: You’ll have to repeat this, as only one host was created here; to show multiplicity,
    two hosts need to be created to mimic a working environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.33 – Hosts](img/B18349_12_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.33 – Hosts
  prefs: []
  type: TYPE_NORMAL
- en: The setup and basic configuration of OLAM are complete. In the following recipes,
    we’ll review how to run playbooks and further advanced configurations of OLAM.
    In the next recipe, we’ll test our final configuration by running a command against
    the two test servers created.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After adding the two hosts, you can test-run a set of commands against them.
    To run the commands, you’ll need to navigate back to **Hosts** and click **Run
    Command**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.34 – Running simple commands on hosts](img/B18349_12_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.34 – Running simple commands on hosts
  prefs: []
  type: TYPE_NORMAL
- en: You’ll choose the module(s) you’ll want to run – in this case, `uptime` as the
    variable argument. This runs in a shell environment, much like you would run it
    in any Linux environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.35 – The command variables](img/B18349_12_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.35 – The command variables
  prefs: []
  type: TYPE_NORMAL
- en: We’ll have to define the environment we want to run in, which is **OLAM** **EE
    (latest)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.36 – The execution environment](img/B18349_12_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.36 – The execution environment
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the credentials we used before on the two test nodes we created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.37 – The credentials selection](img/B18349_12_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.37 – The credentials selection
  prefs: []
  type: TYPE_NORMAL
- en: The following is the output to the test; as you can see, the uptime is listed
    for each environment, `olam-target-1` and `olam-target-2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.38 – The command run output](img/B18349_12_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.38 – The command run output
  prefs: []
  type: TYPE_NORMAL
- en: OLAM isn’t fantasy football, but they both use playbooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of us know about fantasy football, where we follow teams, draft players,
    and bet on winners and losers. Well, we’re not betting anything here, other than
    whether our environment will work, but we are using something called a **playbook**.
    Consider a playbook much like that used by a football coach to train their team;
    it’s the same concept. We’re predefining an environment or event, and programmatically
    architecting it to behave in the way we tell it, creating or changing the environment
    we are defining, or even reclaiming resources (taking back CPU, RAM, and disk
    space from decommissioned environments). Whatever we define within the constraints
    of OLAM, we can execute.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create our playbook, we need to figure out who, what, where, when,
    and maybe even why:'
  prefs: []
  type: TYPE_NORMAL
- en: Who – What resources groups are we targeting?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What – What kind of resources are we targeting? A VM? A physical machine?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where – Where are these resources located? In a CSP, VM farm, or physical server?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When – When are we going to execute on the environment? Is it event-based (meaning
    do we clear disk space when a log fills up `/tmp`)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why – Why are we targeting this environment? Is it a database server and logs
    are maxing out disk space, a web server is over utilized, or an event is having
    a repeat affect?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A playbook can be triggered in many different ways, In AIOps, we focus on triggers;
    these can be an SNMP trap, agent-based triggers (such as a full disk, as shown
    previously), or a directed event from a platform. Let’s return to the other four
    variables – who, what, where, and when; *who* is which environment, *what* is
    what machines are used, *where* is the location of the environment(s), and *when*
    is when this playbook will run, and whether it will be triggered or run at a certain
    time. All or any of these are plausible and can be gradually defined.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.39 – Playbooks and their touch points](img/B18349_12_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.39 – Playbooks and their touch points
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Getting ready to build your own playbooks and/or utilize existing ones isn’t
    the monumental task it seems. In this recipe, we’ll explore adding a Git repository
    to your OLAM instance. This is done for a few reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Version control – control your code, who edits it, and the versions you’re on.
    Remember that things change, including infrastructure and OS versions. You want
    to keep track of what changes in your playbooks so that you can adjust to the
    changes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keeping track of your playbooks – save them, collaborate, and share. You can
    share your templates and reuse them. Remember that one of the most important reasons
    why automation is so useful is repetition, limiting the need for human interaction
    in repetitive steps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git gives you a pipeline into your templates and allows you to easily add playbooks
    you’ve written to templates that you’ve written and created.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to add a Git repository to OLAM, you’ll need to first create it and
    add it to your OLAM project:'
  prefs: []
  type: TYPE_NORMAL
- en: First, go to the **Projects** tab, as shown here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.40 – Projects menu](img/B18349_12_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.40 – Projects menu
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the test project we created, or create a new one – in this case,
    Oracle was created, since we’re going to add the Oracle sample playbooks to OLAM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.41 – Adding a project](img/B18349_12_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.41 – Adding a project
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the information for the project, including your Git data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.42 – Project configuration and variables for the Oracle Git repository](img/B18349_12_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.42 – Project configuration and variables for the Oracle Git repository
  prefs: []
  type: TYPE_NORMAL
- en: Then, save the project, which will bring you to your project’s **Details** screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.43 – The Oracle Git project details](img/B18349_12_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.43 – The Oracle Git project details
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you’ve added your Git account data, as well as the Oracle Ansible playbook
    samples, you can start to create a new template with your Oracle Hello World playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll need to, once again, navigate to **Templates**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.44 – The Templates option](img/B18349_12_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.44 – The Templates option
  prefs: []
  type: TYPE_NORMAL
- en: Click **Add** to create a new template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.45 – Adding a job template](img/B18349_12_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.45 – Adding a job template
  prefs: []
  type: TYPE_NORMAL
- en: Complete the worksheet with the correct variable, as we did in the previous
    recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.46 – The job template variables](img/B18349_12_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.46 – The job template variables
  prefs: []
  type: TYPE_NORMAL
- en: This time, we’re going to select a playbook from the Oracle samples we selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.47 – The Oracle Git sample playbook selection](img/B18349_12_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.47 – The Oracle Git sample playbook selection
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to select the Oracle Hello World playbook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.48 – The Hello World playbook](img/B18349_12_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.48 – The Hello World playbook
  prefs: []
  type: TYPE_NORMAL
- en: Make sure to assign **Privileged Escalation** access to the template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.49 – Job privilege credentials](img/B18349_12_49.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.49 – Job privilege credentials
  prefs: []
  type: TYPE_NORMAL
- en: Save your template, which will bring you to the **Details** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.50 – The job configuration details](img/B18349_12_50.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.50 – The job configuration details
  prefs: []
  type: TYPE_NORMAL
- en: You can launch the template to see the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.51 – The job launch](img/B18349_12_51.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.51 – The job launch
  prefs: []
  type: TYPE_NORMAL
- en: Remember that your results will appear under the **Output** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.52 – The job output and results](img/B18349_12_52.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.52 – The job output and results
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the patching chaos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Patching is a curse word to many, a comfort to some, and necessary to all. There
    is certainly a rational fear regarding patching on when to patch, how to patch,
    and what to patch. The who, what, where, when, and how words apply here too. These
    concerns are legitimate; I mean who wants to patch? It can be messy, and it’s
    time-consuming. We may not be able to mitigate the concerns, but we can shorten
    the time taken to automate. This is one aspect where automation helps to speed
    up operations, and it eases the frustration of having to patch multiple environments.
  prefs: []
  type: TYPE_NORMAL
- en: A common automation question is, "What can we do to minimize what we can, and
    what do we have to do manually?" The concept that we’ll be able to create a playbook
    for anything and automate everything is simply not realistic. Firstly, there are
    some things we wouldn’t want to automate, and that depends on who you work for,
    or your organization’s policies and **standard operating procedures** (**SOPs**)
    toward automation. I’ve worked with certain defense contractors and agencies that
    have multiple boards voting on what automations are allowed, and they were very
    particular on what was and wasn’t approved. However, overall, automation is a
    great equalizer in saving us time and energy.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will walk through patching at a high level and help you understand
    how automation can go beyond, saving time and energy by automating repeatable
    steps.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we institute any playbooks, we have to make sure we have all the prerequisites
    in place, including writing the playbook itself. In this case, we will write a
    basic playbook, update the YUM repository on two servers, and reboot those servers
    after the update is complete. This can be expanded into multiple OSs, kernels,
    and/or application patching – the sky’s the limit.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned previously, we need to first examine and create a new playbook
    for our patching effort here. In order to do that, we will navigate to our template
    (playbook):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.53 – The Templates option](img/B18349_12_53.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.53 – The Templates option
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned previously, we have the template we wrote earlier. However, we’re
    going to click on **Add** to create another.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.54 – Adding a template](img/B18349_12_54.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.54 – Adding a template
  prefs: []
  type: TYPE_NORMAL
- en: Select **Add** **job template**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.55 – Adding a job template](img/B18349_12_55.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.55 – Adding a job template
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll want to follow the same flow that we used for the initial template we
    created. However, this time, we’re going to select a different playbook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.56 – Adding job variables](img/B18349_12_56.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.56 – Adding job variables
  prefs: []
  type: TYPE_NORMAL
- en: We’ll name this one `Patching`, and we’ll select the updated YUM playbook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.57 – The playbook selection](img/B18349_12_57.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.57 – The playbook selection
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the following screenshot, the template is fully populated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.58 – Job variables](img/B18349_12_58.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.58 – Job variables
  prefs: []
  type: TYPE_NORMAL
- en: Make sure to give your template **Privileged Escalation** access, meaning admin
    access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.59 – Privilege Escalation](img/B18349_12_59.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.59 – Privilege Escalation
  prefs: []
  type: TYPE_NORMAL
- en: Save your template, which will bring you to your template’s **Details** screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.60 – The job configuration details and launch](img/B18349_12_60.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.60 – The job configuration details and launch
  prefs: []
  type: TYPE_NORMAL
- en: Execute your template and playbook by clicking on **Launch**. The output of
    your template will be under the **Output** tab and will show any errors, omissions,
    and/or success. Remember to read through the output because you can have successful
    output with errors and/or skipped/missed steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.61 – The job output and results](img/B18349_12_61.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.61 – The job output and results
  prefs: []
  type: TYPE_NORMAL
- en: Look beyond automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can create any resources, we need to have a place to create those
    resources. In this case, we’re using OCI as our incubator, so obviously, we need
    to add OCI to our OLAM instance. In order to do this, we need to create credentials
    to allow OLAM to access OCI. This doesn’t stop at OCI. OLAM is your doorway into
    hybrid cloud solutions. You can deploy on-premises solutions through virtualization
    fabrics and HCI solutions such as VxRail, VMware, and OpenStack. We won’t be covering
    hybrid cloud solutions in this recipe, although we did cover hybrid cloud in past
    recipes, such as migrating a virtual machine as a template into OCI or uploading
    an image to create an AMI image in AWS. These techniques can also be used in hybrid
    cloud scenarios, working with and moving workloads’ ingress and egress to **cloud
    service providers** (**CSPs**). As you can see, the possibilities are there, and
    they are endless.
  prefs: []
  type: TYPE_NORMAL
- en: To delve a little further into **IaC** (**Infrastructure as Code**), we have
    to look at the definition of infrastructure as a service. Take a step back and
    reframe the way you think about infrastructure, and then reconstitute that in
    your head as moving numbers, fields, and landscapes. That’s what IaC is; it’s
    an ever-evolving landscape that keeps on changing its definition to match what
    the end state is. Have you ever played the game *Tetris*? IaC looks and feels
    like *Tetris*, although, in this case, we win every time; we’re just fitting pieces
    next to one another, creating an environment that matches what we need it to look
    like. There are so many different variables we can use to transform our everyday
    tasks into IaC – for example, expanding compute, storage, and/or network. For
    example, imagine we have virtual machine A, an image for web servers. We have
    two web servers deployed for a small university. That university has challenges
    during general admissions periods and needs to expand seamlessly. We can use autoscaling
    or workload expansion to implement new web servers, supplementing the university’s
    needs until the requirement expires. These examples are a little more intensive
    than the example in this recipe, but it’s essential to see the value of code as
    we move along this freeway of change in an evolving IT landscape.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ansible provides building blocks for platform configuration and managing compute
    instances. In this recipe, we’re going to take a different look at Ansible, and
    we’ll see how to use it to write a playbook to instantiate a new virtual machine
    in OCI. We’re going to learn the basics of playbooks, beyond using the predefined
    Oracle basics we explored a couple of recipes ago, to discover the benefits of
    IaC through Ansible, and we’ll also learn how to create a foundation for Ansible
    to be used in the form of playbooks. Lastly, you’ll learn how to create playbooks
    and configure and manage resources on OCI.
  prefs: []
  type: TYPE_NORMAL
- en: To start, we need to configure our environment. This includes connecting our
    OLAM instance to OCI. This will allow us to execute our playbook in our OCI tenancy.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to go to **Credentials**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.62 – The Credentials option](img/B18349_12_62.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.62 – The Credentials option
  prefs: []
  type: TYPE_NORMAL
- en: You’ll want to add a credential for OCI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.63 – Adding credentials](img/B18349_12_63.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.63 – Adding credentials
  prefs: []
  type: TYPE_NORMAL
- en: You’ll have to collect the following information from your OCI tenancy – the
    user **Oracle Cloud Identifier** (**OCID**), fingerprint, tenant OCID, and region.
    All these can be found under **User** | **User settings** | **API Keys**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate and log in to your OCI console, and go to the user (the person icon
    on the right-hand side):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 12.64 – The user icon on the right-hand side](img/B18349_12_64.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.64 – The user icon on the right-hand side
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, navigate to **User settings**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.65 – The OCI User settings option](img/B18349_12_65.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.65 – The OCI User settings option
  prefs: []
  type: TYPE_NORMAL
- en: 'All the data will be under **API Keys**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.66 – The OCI API Keys menu](img/B18349_12_66.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.66 – The OCI API Keys menu
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure to select the **View Configuration** **file** option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.67 – Configuration file](img/B18349_12_67.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.67 – Configuration file
  prefs: []
  type: TYPE_NORMAL
- en: 'All the data you need for the OCI setting in OLAM will be in this configuration
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.68 – The configuration file details](img/B18349_12_68.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.68 – The configuration file details
  prefs: []
  type: TYPE_NORMAL
- en: Enter all the collected information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.69 – The credential variables for the OCI user OCID, fingerprint,
    and tenant OCID](img/B18349_12_69.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.69 – The credential variables for the OCI user OCID, fingerprint,
    and tenant OCID
  prefs: []
  type: TYPE_NORMAL
- en: Don’t forget to cut and paste in the private user key used to access your OCI
    account. This is the key you have on your system that you use to log in to OCI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.70 – The OCI private key](img/B18349_12_70.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.70 – The OCI private key
  prefs: []
  type: TYPE_NORMAL
- en: Save the credential, which will bring you to the **Details** page, showing you
    a summary of the credential you just configured.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.71 – The OCI OLAM credential configuration details](img/B18349_12_71.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.71 – The OCI OLAM credential configuration details
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Check the version of Ansible core:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an inventory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'View and confirm the inventory list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a group to the inventory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the inventory list again, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[opc@olam-target-1 ol-automation]$ ansible all -i inventory -m ping'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: olam-target-1 | SUCCESS => {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"ansible_facts": {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"discovered_interpreter_python": "/usr/bin/python"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"changed": false,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"ping": "pong"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create your playbook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run your playbook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set it and forget it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Ansible playbooks, loops provide flexibility and efficiency to automate Oracle
    Linux environments or any Linux environment through OLAM. Users can define dictionaries
    in their playbooks and use loop statements. Dictionaries are like books, with
    all your infrastructure or applications in lists, and they can be used to describe
    variables in an automation. This allows a set of tasks to be executed for each
    item in the loop, reducing the need for repetitive coding and making playbooks
    more concise and manageable.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, if you want to install multiple packages on a group of Oracle
    Linux servers without loops, you would need to write separate tasks for each package
    and server. However, by using loops in OLAM with Ansible, you can define a list
    of packages and a list of servers and iterate over them, installing the packages
    on each server in a single task.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous recipe, we’ve shown that OLAM has additional features and capabilities
    that enhance automation capabilities, through either the web-based UI or the command
    line. Users can granularly and visually define and manage their automation workflows,
    simplifying the process of creating and managing complex automation tasks. Furthermore,
    this provides a centralized platform to manage and monitor the execution of Ansible
    playbooks.
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, we have two sample servers, the same `target-1` and
    `target-2` servers from the previous recipe, and we need to change the permissions
    of a specific user on both servers. Without using loops, we would need to write
    separate tasks for each server, resulting in redundant code. However, by utilizing
    loops, we can simplify the playbook and make it more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we will start by defining the playbook’s name and the target
    hosts, using the `hosts` directive. We will also set `become` as `true`, indicating
    that the playbook should run with administrative privileges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]yaml'
  prefs: []
  type: TYPE_NORMAL
- en: '---'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Change User Permissions'
  prefs: []
  type: TYPE_NORMAL
- en: 'hosts: server_group'
  prefs: []
  type: TYPE_NORMAL
- en: 'become: true'
  prefs: []
  type: TYPE_NORMAL
- en: 'vars:'
  prefs: []
  type: TYPE_NORMAL
- en: 'target_users:'
  prefs: []
  type: TYPE_NORMAL
- en: '- user1'
  prefs: []
  type: TYPE_NORMAL
- en: '- user2'
  prefs: []
  type: TYPE_NORMAL
- en: 'tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Change user permissions'
  prefs: []
  type: TYPE_NORMAL
- en: 'file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'path: /home/{{ item }}/documents'
  prefs: []
  type: TYPE_NORMAL
- en: 'owner: {{ item }}'
  prefs: []
  type: TYPE_NORMAL
- en: 'group: {{ item }}'
  prefs: []
  type: TYPE_NORMAL
- en: 'mode: "0755"'
  prefs: []
  type: TYPE_NORMAL
- en: 'with_items: "{{ target_users }}"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Next, we define a variable, `target_users`, that contains a list of users for
    whom we want to change permissions. In this case, we have `user1` and `user2`
    as our target users.
  prefs: []
  type: TYPE_NORMAL
- en: The `tasks` section contains a single task named `Change user permissions`.
    This task uses the `file` module to change the ownership, group, and mode of the
    specified directory.
  prefs: []
  type: TYPE_NORMAL
- en: The `with_items` loop is used to iterate over the `target_users` list. Each
    iteration of the loop sets the `item` variable to the current user from the list.
    This variable is then used in the `path`, `owner`, and `group` parameters of the
    `file` module.
  prefs: []
  type: TYPE_NORMAL
- en: 'By using this loop, the playbook will execute the task for each user in the
    `target_users` list, effectively changing the permissions for both user and folder
    permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]yaml'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Change user permissions'
  prefs: []
  type: TYPE_NORMAL
- en: 'hosts: all'
  prefs: []
  type: TYPE_NORMAL
- en: 'tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Change permissions for users'
  prefs: []
  type: TYPE_NORMAL
- en: 'file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'path: /path/to/directory'
  prefs: []
  type: TYPE_NORMAL
- en: 'owner: "{{ item }}"'
  prefs: []
  type: TYPE_NORMAL
- en: 'state: directory'
  prefs: []
  type: TYPE_NORMAL
- en: 'loop: "{{ users }}"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, `file` is used to change the ownership of the specified
    directory to each user in the `users` list. The `item` variable represents the
    current user in the loop.
  prefs: []
  type: TYPE_NORMAL
- en: By following these steps, you can write and execute an Ansible loop in OLAM
    to change user permissions in different servers and the described directories.
    This will allow you to automate the process and ensure consistent permissions
    across multiple systems, among many other aspects of administering multiple environments.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You’ll need to write the playbook first; I have used the demo project for simplicity
    purposes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[opc@olam-target-2 tmp]$ ls -ltr'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: total 0
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: drwxr-xr-x. 2 root root 6 Oct 18 11:53 unified-monitoring-agent
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: drwxrwxr-x. 2 opc  opc  6 Oct 26 15:27 changedir
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'name: This is the name of the playbook.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: OLAM will run the playbook on the specified servers, changing the permissions
    of `/tmp/changedir` to `root:root`, with a mode of `0755`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the playbook file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure you have proper SSH connectivity to the target servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the OLAM web-based user interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new playbook in OLAM, or open an existing one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the content of the `change_permissions.yaml` playbook file into the playbook
    editor in OLAM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the playbook in OLAM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute the playbook by selecting the target servers (`olam-test-1` and `olam-test-2`)
    from the inventory, or by manually specifying their IP addresses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Run** button in OLAM to execute the playbook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OLAM will run the playbook on the specified servers, changing the permissions
    of `/tmp/changedir` to `root:root`, with port `0755`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
