- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Managing Installed Software
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理已安装的软件
- en: As you work in various Linux or Unix environments, you’ll need to add or remove
    software. This is usually done via package managers, although occasionally you’ll
    have to use other methods in a pinch.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在各种 Linux 或 Unix 环境中工作时，你需要添加或移除软件。通常通过包管理器完成，尽管在紧急情况下，你可能需要使用其他方法。
- en: You’re likely familiar with tools that manage libraries in your programming
    environment – `npm`, `gem`, `pip`, `go get`, `maven`, `gradle`, and so on. These
    package managers all operate on the same principles as the ones found in Linux
    and Unix.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你很可能熟悉在编程环境中管理库的工具——`npm`、`gem`、`pip`、`go get`、`maven`、`gradle` 等。这些包管理器都遵循与
    Linux 和 Unix 中的包管理器相同的原理。
- en: Software **package managers** abstract away the many configuration and binary
    files that make up a piece of software and let you work with a single, neat “package”
    instead. This should feel familiar if you’re coming from Windows (`.exe` or `.msi`
    installers) or macOS (`.dmg` installers).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 软件**包管理器**抽象了构成软件的众多配置和二进制文件，让你可以使用一个整洁的“包”来进行操作。如果你来自 Windows（`.exe` 或 `.msi`
    安装程序）或 macOS（`.dmg` 安装程序），这应该很熟悉。
- en: 'Additionally, most Linux package managers add a layer of security to the process,
    by:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，大多数 Linux 包管理器在过程中增加了一层安全性，通过：
- en: Using secure transport (TLS) for your download.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用安全传输（TLS）下载。
- en: Using cryptographic signing on the packages themselves, to prove that the authors
    are at least who they say they are (whether you implicitly trust them or not).
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用包本身的加密签名，以证明作者至少是他们所声称的那样（无论你是否信任他们）。
- en: Various Linux distributions also pioneered the idea of searchable package repositories
    that help users find software to download, which inspired the Apple and Microsoft
    “App Stores” that exist today.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 各种 Linux 发行版还开创了可搜索的软件包仓库的理念，帮助用户找到可以下载的软件，这一理念也启发了如今的 Apple 和 Microsoft “应用商店”。
- en: 'In this chapter, we’ll cover the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: What package managers are
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是包管理器
- en: The most common package managers you’ll see
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你最常见的包管理器
- en: The most important package management operations and the individual commands
    you’ll need to execute them, “translated” across package managers – this is 90%
    of what you’ll need to know in practice
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要执行的最重要的包管理操作和各个命令，跨包管理器“翻译”——这就是你在实践中需要知道的90%内容。
- en: A popular procedure for downloading and executing custom install scripts
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种常见的下载并执行自定义安装脚本的过程。
- en: A quick practical introduction to locally building and installing software yourself
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速的实际介绍，教你如何自己构建和安装软件。
- en: If you’re looking for instructions on installing software in Docker, please
    check out *Chapter 15*, *Containerizing Applications with Docker* instead.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在寻找 Docker 中安装软件的说明，请查阅*第15章*，*使用 Docker 容器化应用程序*。
- en: 'First things first: as a developer, you’ll reach for package management commands
    when you want to do a few common things:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先：作为开发者，当你想做一些常见的事情时，你会使用包管理命令：
- en: Install new software packages, for example, dependencies that your application
    expects to be available in its execution environment.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装新的软件包，例如，应用程序期望在其执行环境中可用的依赖项。
- en: Check for installed packages (for example, “Is the nginx web server already
    installed on this system?”).
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查已安装的软件包（例如，“nginx web 服务器是否已经安装在此系统上？”）。
- en: Update the currently installed set of packages, to make sure you’ve got the
    latest versions of everything. This is common for addressing vulnerabilities that
    are discovered, or ensuring you’ve got all the latest features of a piece of software.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新当前安装的软件包集合，确保你拥有所有软件的最新版本。这通常用于修复已发现的漏洞，或确保你拥有软件的所有最新功能。
- en: Remove a package – that is, uninstall it from the system.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除一个包——即从系统中卸载它。
- en: Let’s jump into how to achieve these practical goals and see the practical commands
    that you’ll be using.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解如何实现这些实际目标，并查看你将要使用的实际命令。
- en: Working with software packages
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用软件包
- en: 'Before we dive into practical commands, you should know that the exact commands
    you’ll use will differ based on the flavor of Unix (or distribution of Linux)
    that you’re using. Different Linux distributions use different package managers,
    and although their syntaxes diverge *just* enough to be annoying, they all work
    in an almost identical fashion. Common package managers include:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入实际命令之前，你应该了解，你将使用的确切命令会根据你使用的 Unix 版本（或 Linux 发行版）有所不同。不同的 Linux 发行版使用不同的包管理器，尽管它们的语法稍有差异，*恰好*足以让人感到烦恼，但它们的工作方式几乎完全相同。常见的包管理器包括：
- en: '`homebrew` (macOS)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`homebrew`（macOS）'
- en: '`apt` (reliably found on Ubuntu and Debian-based systems, even minimal ones
    that don’t have aptitude installed)'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apt`（可靠地出现在 Ubuntu 和基于 Debian 的系统中，即使是没有安装 aptitude 的最小系统）'
- en: '`pacman` (Arch)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pacman`（Arch）'
- en: '`apk` (Alpine)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apk`（Alpine）'
- en: In the rest of the practical sections that follow, we’ll introduce the high-level
    goal we want to achieve (such as “install a specific package”), and then show
    you the exact commands that accomplish that task, using the popular package managers
    we just named.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的实践部分中，我们将介绍我们想要实现的高级目标（例如“安装特定软件包”），然后展示使用我们刚才提到的流行包管理器来完成该任务的确切命令。
- en: Update your local cache of repository state
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新本地仓库状态缓存
- en: Before installing or deleting packages, you’ll want to make sure that your local
    package cache (your system’s record of the packages available on the internet)
    is up to date.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装或删除软件包之前，你需要确保本地软件包缓存（你系统中记录的可用软件包信息）是最新的。
- en: For example, if you’re trying to install the `nginx` web server, but the last
    time someone updated the local package cache was a month ago, you might unintentionally
    install an outdated version from last month, instead of the new release from this
    week.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你正在尝试安装 `nginx` 网页服务器，而上次更新本地软件包缓存的时间已经过去一个月，那么你可能会不小心安装一个过时的版本，而不是这周的新版本。
- en: 'To update the cache, find your package manager in the list below and run the
    corresponding command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新缓存，找到下面列表中的包管理器并运行相应的命令：
- en: '| **Package manager** | **Commands** |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| **包管理器** | **命令** |'
- en: '| `homebrew` | `brew update` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `homebrew` | `brew update` |'
- en: '| `apt` | `apt update` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `apt` | `apt update` |'
- en: '| `pacman` | `pacman -Sy` |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `pacman` | `pacman -Sy` |'
- en: '| `apk` | `apk update` |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `apk` | `apk update` |'
- en: Your local cache of available packages will be updated, and then you can move
    on to the exciting work of finding and installing a package.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 本地可用软件包缓存将被更新，更新完成后你就可以开始激动人心的工作——查找和安装软件包。
- en: Search for a package
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索软件包
- en: 'Not all packages have the same name as the software they contain. Firefox may
    be available in the `firefox` package, but you might be disappointed if you try
    to install `ag` (package name: `silversearcher-ag`). Search for a description
    of the package you’re considering installing with the following package manager
    commands:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有软件包的名称都与它们包含的软件相同。Firefox 可能在 `firefox` 包中提供，但如果你尝试安装 `ag`（包名：`silversearcher-ag`），你可能会失望。使用以下包管理器命令搜索你考虑安装的软件包的描述：
- en: '| **Package manager** | **Commands** |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| **包管理器** | **命令** |'
- en: '| `homebrew` | `brew search $PACKAGENAME` |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `homebrew` | `brew search $PACKAGENAME` |'
- en: '| `apt` | `apt-cache search $PACKAGENAME` |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `apt` | `apt-cache search $PACKAGENAME` |'
- en: '| `pacman` | `pacman -Ss $PACKAGENAME` |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `pacman` | `pacman -Ss $PACKAGENAME` |'
- en: '| `apk` | `apk search $PACKAGENAME` |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `apk` | `apk search $PACKAGENAME` |'
- en: This is a good way to confirm you’re getting what you expect but it can also
    be used to spread out your search and look for general software related to your
    problem. For example, on Ubuntu, I can search for grep-like tools with `apt-cache
    search grep`. Any package containing grep in the name or description will be shown.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个确认你所期望内容是否正确的好方法，但它也可以用来扩展你的搜索范围，寻找与问题相关的通用软件。例如，在 Ubuntu 上，我可以使用 `apt-cache
    search grep` 来搜索类似 grep 的工具。任何包含 grep 的软件包名称或描述都会显示出来。
- en: Install a package
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装软件包
- en: 'Finally, the main event! Now that our repository cache is up to date *and*
    we know exactly which package we want to install, let’s run an `install` command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的高潮！现在我们的仓库缓存已更新，*并且*我们已经明确知道要安装哪个软件包，让我们运行 `install` 命令：
- en: '| **Package manager** | **Commands** |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| **包管理器** | **命令** |'
- en: '| `homebrew` | `brew install $PACKAGENAME` |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `homebrew` | `brew install $PACKAGENAME` |'
- en: '| `apt` | `apt install $PACKAGENAME` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `apt` | `apt install $PACKAGENAME` |'
- en: '| `pacman` | `pacman -Sy $PACKAGENAME` |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `pacman` | `pacman -Sy $PACKAGENAME` |'
- en: '| `apk` | `apk add $PACKAGENAME` |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `apk` | `apk add $PACKAGENAME` |'
- en: If your package manager prompts you for confirmation, respond to the prompt
    and your package will be installed (along with any other packages it depends on).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的包管理器提示确认，回应提示后，你的包就会被安装（同时也会安装它依赖的其他包）。
- en: Because some of these commands prompt for confirmation before installing a package,
    these can block a script. When you’re automating tasks with scripts, and you need
    to install a package, make sure to read the appropriate package manager man page
    for how to install packages in a noninteractive way. This is often done via an
    environment variable or an extra argument to the command.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些命令在安装包之前会提示确认，它们可能会阻塞脚本。当你使用脚本自动化任务并且需要安装包时，确保阅读相应包管理器的手册，了解如何以非交互式的方式安装包。这通常通过环境变量或命令的额外参数来完成。
- en: Upgrade all packages that have available updates
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 升级所有有可用更新的包
- en: 'On a long-running system, you’ll want to occasionally upgrade the installed
    packages to their latest versions. This fixes known vulnerabilities, gets you
    the newest features, and keeps different systems from having their state drift
    apart just because they were provisioned a few months before or after another
    system:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在长期运行的系统上，你可能需要偶尔将已安装的包升级到最新版本。这可以修复已知的漏洞，获取最新的功能，并防止不同系统因配置时间的不同而导致状态不一致：
- en: '| **Package manager** | **Commands** |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| **包管理器** | **命令** |'
- en: '| `homebrew` | `brew upgrade` |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `homebrew` | `brew upgrade` |'
- en: '| `apt` | `apt dist-upgrade` |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `apt` | `apt dist-upgrade` |'
- en: '| `pacman` | `pacman -Syu` |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `pacman` | `pacman -Syu` |'
- en: '| `apk` | `apk upgrade` |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `apk` | `apk upgrade` |'
- en: These commands will also prompt for confirmation, so if you’re using them in
    scripts, the same advice about adding an option to make them noninteractive applies.
    For example, `apt –y dist-upgrade` will not wait for manual confirmation, and
    will just perform the upgrade.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令也会提示确认，因此如果你在脚本中使用它们，同样的建议是：可以添加一个选项让它们不再交互式。例如，`apt –y dist-upgrade` 将不会等待手动确认，而是直接执行升级。
- en: Remove a package (and any dependencies, provided other packages don’t need them)
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移除一个包（以及它的所有依赖，前提是其他包不再需要它们）
- en: 'Sometimes you want to uninstall a package: maybe you were just trying it out,
    your application requirements have changed, or it’s known to be vulnerable without
    a fix in sight. All package managers have a command for removing an installed
    package:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你可能想要卸载一个包：也许你只是试用它，或者你的应用需求发生了变化，亦或是它被认为存在漏洞且没有修复方案。所有包管理器都有用于移除已安装包的命令：
- en: '| **Package manager** | **Commands** |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| **包管理器** | **命令** |'
- en: '| `homebrew` | `brew remove $PACKAGENAME` |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `homebrew` | `brew remove $PACKAGENAME` |'
- en: '| `apt` | `apt remove $PACKAGENAME` |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `apt` | `apt remove $PACKAGENAME` |'
- en: '| `pacman` | `pacman -Rs $PACKAGENAME` |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `pacman` | `pacman -Rs $PACKAGENAME` |'
- en: '| `apk` | `apk del $PACKAGENAME` |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `apk` | `apk del $PACKAGENAME` |'
- en: One thing you may need to do before or after removing a package is verify that
    a package is even installed. Let’s see how to do that now.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在移除包之前或之后，你可能需要验证该包是否已经安装。让我们现在来看一下如何操作。
- en: Query installed packages
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询已安装的包
- en: 'If you need to list all packages that are currently installed on a system,
    you can do that with a single command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要列出当前系统上所有已安装的包，你可以通过一个命令完成：
- en: '| **Package manager** | **Commands** |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| **包管理器** | **命令** |'
- en: '| `homebrew` | `brew list` |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `homebrew` | `brew list` |'
- en: '| `apt` | `dpkg –l` |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `apt` | `dpkg –l` |'
- en: '| `pacman` | `pacman -Qi` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `pacman` | `pacman -Qi` |'
- en: '| `apk` | `apk info` |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `apk` | `apk info` |'
- en: 'Because this list is often hundreds or thousands of packages long, it’s a bit
    unwieldy. Narrow down the output by piping it into a search command like `grep`,
    to find just what you’re looking for:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这个列表通常有数百或数千个包，所以它可能有些笨重。通过将输出传递给像 `grep` 这样的搜索命令来缩小范围，找出你所需要的内容：
- en: '[PRE0]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you’re confused by how we’re using that pipe to feed the output of `dpkg`
    into the `grep` command, see *Chapter 1*, *How the Command Line Works* for the
    basics of chaining together commands with the pipe character (|). We’ll also take
    a much deeper dive into this mechanic in the upcoming *Chapter 11*, *Pipes and
    Redirection*.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不明白我们是如何使用管道将 `dpkg` 的输出传递给 `grep` 命令的，参见*第一章*，*命令行工作原理*，了解如何使用管道字符（|）将命令串联起来。我们还将在即将到来的*第十一章*，*管道与重定向*中深入探讨这一机制。
- en: Now that we’ve covered the basic package management commands that you’ll be
    using 90% of the time, it’s time to demonstrate a few patterns you’ll use when
    there is no pre-built package available for the software you want to install.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经介绍了你在 90% 时间内使用的基本包管理命令，现在是时候展示一些当你想安装的软件没有现成包时你会使用的模式。
- en: Caution required – curl | bash
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注意事项 – curl | bash
- en: 'Sometimes you won’t find a pre-built package for the software you need. And
    that’s okay! Many online sources – even trustworthy and popular ones like homebrew
    on macOS – recommend a command-line install process that looks like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你找不到需要的软件的预构建包。没关系！许多在线资源——即使是像 macOS 上的 homebrew 这样值得信赖且流行的资源——也推荐类似这样的命令行安装过程：
- en: '[PRE1]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This uses the `curl` command to download content from the web, and then uses
    that content as the input (`|`, the pipe character, which we covered in *Chapter
    1*, *How the Command Line Works*) for running Bash. When you do this, you’re essentially
    running a script on the web instead of as a local file. This can be an extremely
    convenient way of installing software, but please make *absolutely* sure that
    it’s coming from a trustworthy source.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用 `curl` 命令从网络上下载内容，然后将该内容作为输入（`|`，管道符号，我们在*第1章*《命令行工作原理》中讲过）来运行 Bash。当你这样做时，你实际上是在运行一个网络上的脚本，而不是一个本地文件。这可以是安装软件的一个非常方便的方法，但请*务必*确保它来自一个可信的来源。
- en: 'We recommend always at least *looking* at the script source, which you can
    see in the browser by visiting the script URL for this command (represented in
    the example below as `$SOMEURL`), or by splitting the single `curl $URL | bash`
    command into multiple commands, so that you can:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议始终至少*查看*脚本源代码，你可以通过访问该命令的脚本网址（在下面的示例中表示为`$SOMEURL`）在浏览器中查看，或者将单个 `curl $URL
    | bash` 命令拆分成多个命令，以便你可以：
- en: Download the script.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载脚本。
- en: Read through it in a local text editor to verify that it’s not doing anything
    malicious, and optionally edit the script to suit your requirements.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本地文本编辑器中阅读脚本，确认它没有做任何恶意操作，必要时编辑脚本以满足你的需求。
- en: Run the script, now that you’ve verified it does only what you want it to do.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行脚本，前提是你已经验证过它只会执行你想要它执行的操作。
- en: 'To split something like this `curl $URL | bash` pattern into multiple commands,
    you’d take the following steps:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要将类似 `curl $URL | bash` 的模式拆分成多个命令，你需要执行以下步骤：
- en: '[PRE2]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: By splitting this into multiple steps instead of just downloading an untrusted
    script and running it immediately, we give ourselves time to review the code we’re
    about to execute and verify that it’s safe. The end result is the same (the install
    script runs), but this approach gives us much more control and requires less blind
    trust.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将这一步骤拆分成多个步骤，而不是直接下载一个不可信的脚本并立即运行，我们给自己留出了时间来审查我们即将执行的代码并确认它是安全的。最终结果是一样的（安装脚本会运行），但这种方法使我们有更多的控制权，并且需要更少的盲目信任。
- en: There’s another way to get software installed on a system, even if there’s no
    pre-written install script available.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种在系统上安装软件的方法，即使没有现成的安装脚本可用。
- en: Compiling third-party software from source
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从源代码编译第三方软件
- en: This is the most manual, and most time-honored, way to install software on a
    system – manual compilation and installation! It doesn’t have the many advantages
    of a package manager, like speed, repeatability, ease of managing the installed
    software, and cryptographic validation of the software binary you’re installing.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在系统上安装软件最手动、最传统的方法——手动编译和安装！它没有像包管理器那样的许多优点，比如速度、可重复性、管理已安装软件的简便性以及对安装的二进制软件的加密验证。
- en: But in a pinch, it’s still the most reliable way to get something installed,
    with no real outside dependencies except for the basic software tools (compiler,
    linker, and make script) that you’re already familiar with as a developer.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 但在紧急情况下，它仍然是安装软件最可靠的方式，除了你作为开发者已经熟悉的基本软件工具（编译器、链接器和 make 脚本），没有其他真正的外部依赖。
- en: 'You’ll find yourself manually compiling and installing software when:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当你遇到以下情况时，你可能会手动编译和安装软件：
- en: There is no pre-packaged version of the software in the package manager you
    have available. For example, If you’re using a minimal container distribution
    (such as, Alpine), you might not find what you need in the package manager. In
    that case, you can compile your own binary from source, and get it into your container
    image that way.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包管理器中没有预打包版本的软件。例如，如果你使用的是轻量级容器发行版（如Alpine），可能在包管理器中找不到所需的软件。在这种情况下，你可以从源代码编译自己的二进制文件，并将其添加到容器镜像中。
- en: You need to add your own (or other custom) software to a Docker container.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要将自己的（或其他自定义的）软件添加到 Docker 容器中。
- en: You need the absolute latest, bleeding-edge version of a piece of software,
    for which a packaged version doesn’t yet exist. This can be the case for slower-moving
    projects that don’t always have new packages available, or for situations where
    a hotfix for a critical vulnerability needs to be rolled out *immediately*, before
    the hotfix has made its way through the packaging process.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你需要一个软件的绝对最新、前沿版本，而包管理器尚未提供时，你会选择这种方式。这种情况通常出现在进展较慢的项目中，这些项目不会及时提供新的软件包，或者在需要紧急修复关键漏洞之前，需要立即发布热补丁。*立即*，在热补丁通过打包流程之前。
- en: This process involves a few steps, with slight variations depending on the software.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程涉及几个步骤，具体步骤会因软件而异。
- en: 'Usually, this involves:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，这包括：
- en: '`curl` or `wget` to download the compressed software archive.'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `curl` 或 `wget` 下载压缩软件存档。
- en: '`tar zxf downloadname` or `unzip downloadname` to unarchive and decompress
    the source code directory you just downloaded.'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `tar zxf downloadname` 或 `unzip downloadname` 解压刚刚下载的源代码目录。
- en: Changing directory into the source directory you downloaded and reading any
    included `README` files. This is where you’ll be informed of the exact process
    you need to follow to build the software, as well as any deviations from the norms
    we’re describing here.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到你下载的源代码目录，并阅读包含的 `README` 文件。这里会告诉你构建软件所需的确切步骤，以及与我们描述的规范有所偏差的任何内容。
- en: Running `./configure`, followed by `make`, followed by `sudo make install` to
    build and install the binary.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `./configure`，然后是 `make`，再接着是 `sudo make install` 来构建并安装二进制文件。
- en: As with other ways of installing software, either manually or through a package
    manager, keep in mind that `configure` and `make` execute arbitrary code *by design*.
    This means that running `make install` as root will result in all of this arbitrary
    code running as `root`. This should worry you. Make sure to verify that the software’s
    source code is trustworthy and that you are downloading it from a trustworthy
    source.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他安装软件的方式一样，无论是手动还是通过包管理器，记住 `configure` 和 `make` 都会按设计执行任意代码。这意味着以 root 身份运行
    `make install` 将导致所有此类任意代码以 `root` 身份运行。这应该让你担心。确保验证软件源代码的可信度，并从可信任的来源下载。
- en: 'Example: compiling and installing htop'
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：编译和安装 htop
- en: To run through a real example of this, we’re going to download, compile, and
    install `htop`, which is a small, extremely useful system monitoring tool (similar,
    but superior, to the built-in `top` command). For the record, this is easily available
    via almost every Linux distribution’s package manager, but we’re going to pretend
    that it’s a hard-to-find, custom program that is not widely distributed through
    package managers.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这一过程，我们将下载、编译和安装 `htop`，这是一个小巧而非常实用的系统监视工具（类似于内置的 `top` 命令，但功能更强大）。需要说明的是，几乎所有
    Linux 发行版的包管理器都可以轻松获取到它，但我们将假装它是一个难以获取的自定义程序，不通过包管理器广泛分发。
- en: The system we’re doing this on is an Ubuntu 22.04 Linux server, so if you want
    to follow along without having to do any troubleshooting of your own, use that.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用的系统是 Ubuntu 22.04 Linux 服务器，如果你想跟随操作而不必自行解决问题，请使用该系统。
- en: 'First, we check for the latest release from the official GitHub repository
    here: [https://github.com/htop-dev/htop/releases](https://github.com/htop-dev/htop/releases)
    – at the time of this writing, that’s version 3.2.2.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在这里的官方 GitHub 仓库检查最新版本发布情况：[https://github.com/htop-dev/htop/releases](https://github.com/htop-dev/htop/releases)
    —— 在撰写本文时，最新版本是 3.2.2。
- en: 'Now you’ll want to make a directory for this build, just to keep things neat
    – I recommend something in the `/tmp` directory, which holds temporary files and
    has its contents deleted every time the system starts up:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该为这次构建创建一个目录，以保持整洁 —— 我建议在 `/tmp` 目录中创建一个，这个目录保存临时文件，在系统启动时会清空其内容：
- en: '[PRE3]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: That way, we can delete everything once the build is complete, to prevent cluttering
    our system with junk files from old builds. Now we’re ready to get started.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这样一来，一旦构建完成，我们可以删除所有文件，避免系统堆积旧构建的垃圾文件。现在我们准备好开始了。
- en: Install prerequisites
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装前提条件
- en: 'First, we need to install the basic C development toolchain (compiler, linker,
    make, and other tooling – all the stuff you need to compile C code on Linux).
    On Ubuntu, this is accomplished by installing a *metapackage* – a package that
    is a kind of alias for multiple other packages – called `build-essential`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装基本的C开发工具链（编译器、链接器、make及其他工具——你在Linux上编译C代码所需的所有东西）。在Ubuntu上，可以通过安装一个*元包*——一个多个其他软件包的别名——`build-essential`来实现：
- en: '[PRE4]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We’ll also install a few other tools that we’ll use: `wget` to download files
    from the web and the `ncurses` dev library, which `htop` uses for a responsive
    command-line interface:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将安装其他一些工具：`wget`用于从网络下载文件，`ncurses`开发库，`htop`用它来提供响应式的命令行界面：
- en: '[PRE5]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Download, verify, and unarchive the source code
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下载、验证并解压源代码
- en: 'First, we’re going to download the source code and verify its cryptographic
    signature to make sure it’s a genuine release signed with the developer’s key:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将下载源代码并验证其加密签名，以确保它是由开发者的密钥签署的正版发布：
- en: '[PRE6]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: That gets us the compressed, archived source code directory, which we’ll be
    compiling into a binary.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们提供了压缩的源代码目录，我们将把它编译成二进制文件。
- en: Let’s now ensure that we have a developer-sanctioned release by checking the
    signature, which is just a `sha256` hash of the source code.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过检查签名来确保我们有一个开发者批准的发布版本，签名就是源代码的`sha256`哈希值。
- en: 'Download the file containing the expected hash for this release and print it
    to the terminal:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 下载包含此版本预期哈希值的文件并将其打印到终端：
- en: '[PRE7]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Provided you’re working with the same version as we are in this example, you’ll
    see this hash:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你和我们在这个示例中使用的是相同版本，你会看到这个哈希值：
- en: '[PRE8]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now hash the source code we downloaded to verify that the hashes match, using
    the `sha256sum` tool:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用`sha256sum`工具对我们下载的源代码进行哈希处理，验证哈希值是否匹配：
- en: '[PRE9]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Wonderful! We now know that the software we have is the same as the official
    release that we meant to download. Let’s unarchive the source code directory and
    step inside it:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们现在知道我们拥有的软件与我们想要下载的官方版本是相同的。接下来，让我们解压源代码目录并进入其中：
- en: '[PRE10]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you’re interested, now is the time to read the `Readme` file (general information
    about the program) and the `INSTALL` file (instructions for how to build and install
    the program).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣，现在是时候阅读`Readme`文件（关于程序的一般信息）和`INSTALL`文件（关于如何构建和安装程序的说明）。
- en: Now we’re ready to start configuring and compiling this piece of software!
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备好开始配置和编译这个软件了！
- en: Configure and compile htop
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置并编译htop
- en: 'Inside the source code directory, it’s time to run the `./configure` script.
    This script ensures that we’ve got any dependencies required for compilation (shared
    libraries, tooling, and so on) installed, and configures things for the compilation
    we’re about to do:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在源代码目录内部，现在是时候运行`./configure`脚本了。这个脚本确保我们安装了编译所需的依赖项（共享库、工具等），并为接下来的编译做好配置：
- en: '[PRE11]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will produce output while the script runs, checking various dependencies
    and ensuring that your environment looks like it has everything needed for compilation.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在脚本运行时产生输出，检查各种依赖项，并确保你的环境满足编译所需的所有条件。
- en: 'If this script produces errors, read them carefully: usually, it will clearly
    tell you what’s wrong – a missing library or a problematic operating system setting.
    After fixing any problems it alerts you about, re-run it. When it has run successfully
    to completion, you’re ready to compile the `htop` binary:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个脚本产生错误，请仔细阅读：通常它会清楚地告诉你问题所在——可能是缺少库或操作系统设置有问题。在修复它报告的问题后，重新运行它。当它成功运行完毕后，你就可以开始编译`htop`二进制文件了：
- en: '[PRE12]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This will again produce reams of output while the compile script runs. If you’re
    totally new to makefiles, they are an extremely useful automation tool used widely
    by developers. Here’s an excellent tutorial: [https://makefiletutorial.com/](https://makefiletutorial.com/)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在编译脚本运行时产生大量输出。如果你对makefile完全陌生，它们是一个非常有用的自动化工具，开发者广泛使用。这里有一个很棒的教程：[https://makefiletutorial.com/](https://makefiletutorial.com/)
- en: 'Once the compilation is complete, we can install the `htop` binary we just
    created (it’ll be in the main source directory, named `htop`). Usually, there’s
    an automated way to do this:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦编译完成，我们就可以安装刚才创建的`htop`二进制文件（它会在主源目录中，名为`htop`）。通常，有一种自动化的方式可以完成此操作：
- en: '[PRE13]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`sudo` is required because you’re moving the compiled binary into a protected
    (root-owned) location. After that, you can verify that `htop` is installed and
    working by typing:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 需要使用`sudo`，因为你正在将编译好的二进制文件移动到一个受保护（root拥有）的目录。之后，你可以通过输入以下命令来验证`htop`是否已经安装并正常运行：
- en: '[PRE14]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You should see a beautiful terminal-based GUI (thanks to the `ncurses` library)
    showing you your system’s current CPU load, memory utilization, and process list.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到一个美观的基于终端的图形用户界面（得益于`ncurses`库），显示系统当前的CPU负载、内存使用情况和进程列表。
- en: 'For programs that don’t ship with a full-featured `install` command, you can
    rely on the fact that there’s no magic in Linux and simply install the binary
    by moving it into the `/user/local/bin/` directory, where locally compiled binaries
    belong:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 对于没有提供完整功能`install`命令的程序，你可以依赖Linux没有什么魔法的事实，直接通过将二进制文件移动到`/user/local/bin/`目录下来安装它，这里是本地编译的二进制文件的存放位置：
- en: '[PRE15]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Having seen how straightforward this process can be, you now have all the knowledge
    you need to go forth and compile!
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 通过看到这个过程有多么简单，你现在已经掌握了所有必要的知识，能够继续进行编译！
- en: Conclusion
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'In this chapter, you learned the basics of managing the software that’s installed
    in your Linux environment. First, we looked at how to accomplish this the easy
    way: software management via the package managers you’re most likely to encounter.
    Although this first approach should cover 90% of your needs, you then learned
    about the procedures you’ll need to apply to the last 10% of situations – careful
    vetting, followed by using custom install scripts or manual compilation and installation.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何管理已安装的Linux环境中的软件基础知识。首先，我们看到了如何通过你最有可能遇到的包管理器轻松完成这项工作。虽然这种方法应该能满足你90%的需求，但接着你还了解了针对最后10%的情况所需要采用的程序——谨慎筛选，接着使用自定义安装脚本或手动编译和安装。
- en: Hopefully you followed along with the practical compilation example and tried
    out the `htop` system monitor. Thankfully, `htop` is available via package managers
    everywhere – it’s a really useful tool that a lot of system administrators find
    invaluable on long-running production systems.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你跟随了实际的编译示例，并试用了`htop`系统监视器。幸运的是，`htop`在各大包管理器中都有提供——它是一个非常有用的工具，许多系统管理员在长期运行的生产系统中觉得它不可或缺。
- en: You should now be comfortable with the high-level concepts and practical commands
    you’ll need to effectively use many Unix and Linux systems, in both development
    and production environments.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该对有效使用许多Unix和Linux系统（无论是在开发还是生产环境中）所需的高层次概念和实用命令感到熟悉。
- en: Learn more on Discord
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Discord上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入本书的Discord社区——在这里你可以分享反馈、向作者提问并了解新版本——请扫描下面的二维码：
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/SecNet](https://packt.link/SecNet)'
- en: '![](img/QR_Code1768422420210094187.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code1768422420210094187.png)'
