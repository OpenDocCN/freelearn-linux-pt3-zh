["```\n[connection]\nid=net_connection\nuuid= 9cd8a444-f501-4179-900e-f3754dbbe7c0\ntype=ethernet\nautoconnect=true\n[ipv4]\nmethod=auto\n[ipv6]\nmethod=auto\n[ethernet]\nmac-address=48:2a:e3:8f:4b:aa\n```", "```\nnmcli [OPTIONS] OBJECT { COMMAND | help }\n```", "```\n[ipv4]\nmethod=192.168.122.100 instead of the one assigned by DHCP, follow these steps:\n\n1.  Back up the original configuration of the connection:\n\n    ```", "```\n\n![Figure 5.4 – Backing up network connection settings](img/B19121_05_04.jpg)\n\nFigure 5.4 – Backing up network connection settings\nNote\nRunning the **cat** command to redirect the output to a file lets us know about and identify the contents of the file.\n\n1.  Add the **enp1s0** connection as a new NetworkManager connection profile:\n\n    ```", "```\n\n![Figure 5.5 – Adding the new NetworkManager connection profile](img/B19121_05_05.jpg)\n\nFigure 5.5 – Adding the new NetworkManager connection profile\n\n1.  Set the IP address of this profile:\n\n    ```", "```\n\n![Figure 5.6 –  Setting the IP address](img/B19121_05_06.jpg)\n\nFigure 5.6 –  Setting the IP address\n\n1.  Set the connection method to **manual**:\n\n    ```", "```\n\n![Figure 5.7 – Setting the connection method](img/B19121_05_07.jpg)\n\nFigure 5.7 – Setting the connection method\n\n1.  Set the gateway to **192.168.122.1**:\n\n    ```", "```\n\n![Figure 5.8 – Setting the gateway](img/B19121_05_08.jpg)\n\nFigure 5.8 – Setting the gateway\n\n1.  Set **dns** to **192.168.122.1**:\n\n    ```", "```\n\n![Figure 5.9 – Setting dns](img/B19121_05_09.jpg)\n\nFigure 5.9 – Setting dns\n\n1.  Activate the new NetworkManager connection profile:\n\n    ```", "```\n\n![Figure 5.10 – Activating the NetworkManager profile](img/B19121_05_10.jpg)\n\nFigure 5.10 – Activating the NetworkManager profile\n\n1.  Check the device’s status:\n\n    ```", "```\n\n![Figure 5.11 – Reviewing the device’s status](img/B19121_05_11.jpg)\n\nFigure 5.11 – Reviewing the device’s status\n\n1.  Check the network configuration of the workstation. Confirm the changes in the IP address of the **enp1s0** device. Then, use the **ip** command:\n\n    ```", "```\n\n![Figure 5.12 – Verifying the network configuration](img/B19121_05_12.jpg)\n\nFigure 5.12 – Verifying the network configuration\n\n1.  Review the workstation connection’s keyfiles:\n\n    ```", "```\n\n![Figure 5.13 – Checking the keyfiles](img/B19121_05_13.jpg)\n\nFigure 5.13 – Checking the keyfiles\nNote that the *active configuration* is now highlighted in green.\nLet’s compare the original backup file with the created one. Use the `diff` command to highlight the differences:\n![Figure 5.14 – Keyfile differences](img/B19121_05_14.jpg)\n\nFigure 5.14 – Keyfile differences\nThe first difference is in the `id` value of the *connection name*. But also, notice that there is a change in the `uuid` value:\n\n```", "```\n< auto-connect, higher-priority connections are preferred. The default is 0. *A higher number means a* *higher priority*.\nAn interesting piece of data that can be found in the original keyfile is `timestamp`, in seconds since the **Unix Epoch**, when the connection was last successfully activated:\n\n```", "```\n< method=auto\n---\n> address1=192.168.122.100/24,192.168.122.1\n> dns=192.168.122.1;\n> auto. The current keyfile is set to manual, plus the configuration of the *IP address*, *gateway*, and *DNS*.\nA *wired connection* is the simplest example of network configuration, although several extra properties could be added.\nA *wireless connection*, which is used for the kind of work involved in managing Linux servers, is the type of connection we will use the most, given its inherent mobility advantages.\nNow, let’s see how, besides configuring our *wireless connection*, to optimize it with some fine-tuning settings.\nTuning wireless connectivity\nSometimes, the network’s devices are not recognized by the operating system. This is one of the common issues of using wireless networks.\nLet’s start this section by ensuring that the wireless network device has support from the operating system by identifying which chipset it uses and which drivers work best for its operation.\nIdentifying the device\nIn a network device, the main thing is to identify the *Vendor ID* (the 16-bit number of the vendor – that is, the **VID**) and the *Product ID* (the 16-bit number of the product number – that is, the **PID**). Use the following commands for each case, depending on the bus used by the device:\n\n*   PCI: **lspci -nn**\n*   USB: **lsusb**:\n\n![Figure 5.15 – Identifying the network device](img/B19121_05_15.jpg)\n\nFigure 5.15 – Identifying the network device\nAs shown in the preceding figure, the output of the `lspci` command provides the required chipset information:\n\n```", "```\n\n Now, go to Google and type the chipset information in the form:\n\n```", "```\n\n This search leads to a chipset match in **Linux Kernel Driver DataBase** ([https://cateee.net/lkddb/](https://cateee.net/lkddb/)), which allows us to identify whether the wireless network device has support and which driver is the correct one to use:\n![Figure 5.16 – LKDDb search](img/B19121_05_16.jpg)\n\nFigure 5.16 – LKDDb search\nIf you search for chipset information in the form – that is, `\"14e4:2711\"` – it leads to several useful sites that provide more detailed information. Click on the **Hardware for Linux** page link ([https://linux-hardware.org/](https://linux-hardware.org/)) and find the chipset’s details:\n![Figure 5.17 – The Hardware for Linux site](img/B19121_05_17.jpg)\n\nFigure 5.17 – The Hardware for Linux site\nWith the preceding tools, we can identify the wireless device in our computer. Follow these steps to identify the vendor and its product ID:\n\n1.  Run the **lspci** command to identify the card:\n\n    ```", "```\n\nNote\nIf the card is not integrated into the motherboard of the computer, use the **lsusb** command to identify this device.\nA bus number, a device number, and a function number can be identified at the beginning of the output:\n\n```", "```\n\n1.  Use this information to get detailed device information. To do so, run the **lspci** command:\n\n    ```", "```\n\n     2.  List the modules that were loaded in the kernel and search the identified chipset of the wireless card. Use the **lsmod** command:\n\n    ```", "```\n\n     3.  Use the **modinfo** command to display the module information:\n\n    ```", "```\n\nWith these simple steps, we can determine whether the wireless card is using the right, updated driver. This prevents any initial issues when connecting to a network.\nNow, let’s learn how to identify the available wireless networks and configure our wireless card to get the best connectivity performance.\nFinding the best quality network connection\nBy default, the `nmcli` command lists the available **Wi-Fi access points** that are no more than *30 seconds old* by enabling a network scan if necessary.\nTo list the available Wi-Fi access points, run the `nmcli dev wifi` `list` command:\n![Figure 5.18 – Listing the Wi-Fi access points](img/B19121_05_18.jpg)\n\nFigure 5.18 – Listing the Wi-Fi access points\nThe `nmcli` command shows the Wi-Fi access points in different colors. Each one represents different signal strengths.\nSoft colors, such as cyan, represent a weak signal (less than 30% intensity). A stronger signal (30-50%) is represented by a magenta color. Orange indicates a better signal (60-80%), whereas green represents an excellent signal (80-100%).\nWith the `--rescan` option, the scan could be forced to be disabled, regardless of the age of the access point list.\nUse the `nmcli device` command to identify the wireless network device:\n![Figure 5.19 – Identifying the wireless network device](img/B19121_05_19.jpg)\n\nFigure 5.19 – Identifying the wireless network device\nFrom the list of access points, select those that belong to the location of the workstation. Both have good signal quality:\n![Figure 5.20 – Selecting Wi-Fi access points](img/B19121_05_20.jpg)\n\nFigure 5.20 – Selecting Wi-Fi access points\nSelect the access point with the best signal quality and connect to it. Use the `nmcli` command with the following format:\n\n```", "```\n\n Note\nThis command preserves the **password** in the shell history. To remove it from the history, delete the corresponding line in the **~/.bash_history** file or run the **history -c** command to delete all entries.\nThen, use the `nmcli device` command to confirm the device status change:\n![Figure 5.21 – Connecting to the access point](img/B19121_05_21.jpg)\n\nFigure 5.21 – Connecting to the access point\nRepeat the same command and add the `show` and `device` options to display the connection details:\n![Figure 5.22 – Connection details](img/B19121_05_22.jpg)\n\nFigure 5.22 – Connection details\nThe **received signal strength indicator** (**RSSI**), which specifies how strong the received signal is, is measured in *decibels relative to one milliwatt* (**dBm**) or **10-3 W**.\nTo find the RSSI, it’s necessary to interpret the *raw value* given by `/proc/net/wireless` and then display it in the appropriate unit or greatest value (using 8-bit arithmetic).\nUse the `iw` command to get the device link information:\n\n```", "```\n\n The `iw` command grabs the information from the `/proc/net/wireless` file and interprets it. By combining this with the `watch` command, it is possible to directly monitor changes in the file. Here’s an example:\n\n```", "```\n\n ![Figure 5.23 – Monitoring the quality of the connection](img/B19121_05_23.jpg)\n\nFigure 5.23 – Monitoring the quality of the connection\nMonitoring the frequency of changes in quality values and comparing them on different networks could establish the optimal network to use for our system administration tasks. This will help us reduce connectivity interruptions in such tasks.\nIn the last section of this chapter, we will take a more in-depth look at monitoring connections for better performance and minimizing outages.\nThe `nm-connection-editor` is a *GTK-based* application for adding, deleting, and modifying network connections that NetworkManager stores. Let’s see how to do it.\nnm-connection-editor\nIn the top-right corner of the taskbar, there is the control panel for settings, including the network connection. If the workstation is not connected to any network, only the icons for keyboard language, volume, and system power will appear:\n![Figure 5.24 – The top-right corner of the taskbar](img/B19121_05_24.jpg)\n\nFigure 5.24 – The top-right corner of the taskbar\nClick on that area to display the control panel:\n![Figure 5.25 – Taskbar control panel](img/B19121_05_25.jpg)\n\nFigure 5.25 – Taskbar control panel\nFollow these steps to connect the workstation to the wireless network:\n\n1.  Click on the gear icon and select **Wi-Fi** to discover the available wireless networks:\n\n![Figure 5.26 – Wi-Fi – Visible Networks](img/B19121_05_26.jpg)\n\nFigure 5.26 – Wi-Fi – Visible Networks\n\n1.  Locate the desired wireless network and click on it. If required, you will be prompted to enter the access password:\n\n![Figure 5.27 – Requesting access to the wireless network](img/B19121_05_27.jpg)\n\nFigure 5.27 – Requesting access to the wireless network\n\n1.  If the password you’ve entered is correct, you will be able to access the wireless network and the connection details will be shown:\n\n![Figure 5.28 – Connection details](img/B19121_05_28.jpg)\n\nFigure 5.28 – Connection details\n\n1.  Now, the wireless connection icon will appear in the top-right corner of the taskbar:\n\n![Figure 5.29 – Wireless icon on the taskbar](img/B19121_05_29.jpg)\n\nFigure 5.29 – Wireless icon on the taskbar\nWhen we click on it, the control panel will show us an icon that we can use to disable the connection or view the available networks:\n![Figure 5.30 – Wireless direct access icon](img/B19121_05_30.jpg)\n\nFigure 5.30 – Wireless direct access icon\nNow, we can configure the network access to our workstation, either cable or wireless, depending on our needs.\nIn the examples shown in this chapter, we have focused on setting access and ensuring a healthy connection to the network.\nHowever, we cannot omit the security risks involved in connecting to a network, especially those with public access.\nLet’s talk about this and how we can mitigate these risks.\nWhat about security?\nThe use of wireless networks has boosted the mobility of jobs that rely on the use of computers.\nOpen wireless networks provide many facilities for remote work from anywhere in the world. However, they also include the risk of exposing confidential information about ourselves, our employers, or the clients we work with.\nThe most basic principle of security is to be aware of what we have open, such as ports, sockets, files, and/or processes. Some processes use the network’s open ports to maintain connectivity between the client and server machine. Applying security’s basic principle, we must be aware of the ports that have been opened and only allow those that we know must remain that way.\nThe tool that helps us in these cases is the **network firewall**.\nAs its name suggests, a network firewall is *a protective barrier that prevents unauthorized network communications*. Its main purpose is to prevent unauthorized access or use of the network services of our system.\n`firewalld`.\n`firewalld` provides dynamic firewall management with support for network/firewall zones. That support defines the *trust level* of network connections or interfaces. The `firewalld` D-Bus interface uses the `firewall-cmd`, `firewall-config`, and `firewall-applet` firewall configuration tools.\nThe following diagram shows the firewall management flow with `firewalld`:\n![Figure 5.31 – The firewall management flow with firewalld](img/B19121_05_31.jpg)\n\nFigure 5.31 – The firewall management flow with firewalld\nBy default, the `firewalld` service comes installed with Fedora. You can use the `firewall-cmd --``state` command:\n\n```", "```\n[root@workstation ~]# firewall-cmd --list-all\nFedoraWorkstation (active)\n  target: default\n  icmp-block-inversion: no\n  interfaces: wlan0\n  sources:\n  services: dhcpv6-client mdns samba-client ssh\n  ports: 1025-65535/udp 1025-65535/tcp\n  protocols:\n  forward: yes\n  masquerade: no\n  forward-ports:\n  source-ports:\n  icmp-blocks:\ndhcpv6-client, mdns, samba-client, and ssh services, as well as the 1025-65535/udp and 1025-65535/tcp dynamic ports.\nIn our workstation use case, it is likely that we do not need to have services or ports exposed to the network. So, the best practice is to close them all.\nBefore closing them, use the `ss` command to investigate the ports that have been opened by the processes to determine whether they refer to the services and ports allowed in the firewall:\n\n```", "```\n\n ![Figure 5.32 – Ports and services connections](img/B19121_05_32.jpg)\n\nFigure 5.32 – Ports and services connections\nAs a result of this analysis, it is clear that our network is not using the open services allowed in the firewall, so we should close them. Let’s look at the main reasons why we should do this:\n\n*   The network does not have **ipv6** (**dhcpv6-client**)\n*   DNS resolution does not use *multicast* on the network. (**mdns**)\n*   We do not use shared directories by **CIFS** or **samba** (**samba-client**)\n*   The workstation will be used to connect to other computers via **ssh**, but not in the opposite direction\n\nTo permanently remove the services from the configuration, use the `firewall-cmd` command:\n\n```", "```\n\n Note\nThese services come as part of the system and they cannot be removed from the configuration.\nThe fourth point (from the preceding list) is also optional. We can do this if we need to connect to the workstation and connect to the managed servers from there, either as a *pivot server* or a *jump box*.\nWith the same command, remove the dynamic ports:\n\n```", "```\n\n Note\nThe **firewall-cmd --permanent** command only affects the configuration files, not the firewall running in memory.\nThe service must reload its configuration to consider the changes.\nUse the `firewall-cmd --reload` command and verify the configuration change:\n\n```", "```\n\n Thus, by adding services and/or ports, we will have better control of the connections to our workstation.\nNote\nFor more information on the use of **firewalld**, refer to the service manual included in the operating system. Run the **man firewalld** command to access it.\nFrom our side, the workstation has a secure environment that knows and authorizes the services and ports exposed to the network. But, especially in a public network, this communication must have an extra level of security. This could come from using a VPN.\nLet’s learn how to use a VPN to secure the connection from our workstation to the managed computers.\nImproving network connectivity using a VPN\nA VPN is a way of connecting to a local network over the internet.\nA VPN connection creates a *single virtual private network between two points*. Each bit of data gets encrypted from point to point via **tunneling**. Tunneling refers to the process by which VPN packets reach their destination. VPNs operate at the operating system level, redirecting all their traffic through other servers. All traffic, including its physical location, remains hidden during network browsing. When using a VPN, the VPN router, called the *proxy server*, appears as the origin of the connection, not the real one. So, neither the site offering public access nor anyone else will be able to deduce who you are or what you are doing.\nThe following diagram shows, with a red line, the tunneling created by the VPN by connecting the workstation to the managed server through the public network:\n![Figure 5.33 – Virtual private network](img/B19121_05_33.jpg)\n\nFigure 5.33 – Virtual private network\nA VPN could be created with different types of tunneling using a variety of protocols, such as **Secure Shell** (**SSH**) or **Point-to-Point Protocol** (**PPP**). They also support different service providers, such as **Cisco**, **Juniper**, **NetScreen**, and **SonicWall**, and they are multi-compatible.\nNow, let’s provide an overview of their two most common services: an **IPSec-based VPN** and **OpenVPN**.\nIPSec-based VPN\n`Libreswan` is an `Libreswan` uses the `NSS` library.\nIn Fedora, by default, `Libreswan` is not installed. So, install the `NetworkManager-libreswan-gnome` package with the `dnf` command:\n\n```", "```\n\n Later, we will describe how to configure the VPN client with this protocol.\nOpenVPN\n**OpenVPN** supports client authentication methods based on certificates, smart cards, and/or two-factor authentication. It allows access control policies through firewall rules. OpenVPN *is not* a web application proxy and *does not work* through a web browser. It needs to be set up in the properties of the network connection.\nThe OpenVPN client integrates into `NetworkManager` as an *applet*.\nNow, let’s learn how to connect the workstation as a VPN client.\nConfiguring a VPN client with the Control Center\nFollow these steps to connect the workstation as a VPN client:\n\n1.  Go to the top-right corner, click on it, and click on the **gear** icon to open the **Control** **Center** area:\n\n![Figure 5.34 – Control Center](img/B19121_05_34.jpg)\n\nFigure 5.34 – Control Center\n\n1.  In **Settings**, in the left column, click **Network**:\n\n![Figure 5.35 – Network settings](img/B19121_05_35.jpg)\n\nFigure 5.35 – Network settings\n\n1.  In the **VPN** section, click on the *plus* (**+**) symbol to add a new connection.\n\nIf the workstation has the `NetworkManager-libreswan-gnome` package installed, the option to add an IPsec-based VPN will appear.\nThe following figure shows the difference. The `NetworkManager-libreswan-gnome` package installed, while the window on the right side does not have the package installed:\n![Figure 5.36 – Different VPN connection types available](img/B19121_05_36.jpg)\n\nFigure 5.36 – Different VPN connection types available\nLet’s look at each case.\nIPsec-based VPN\nThe following figure shows the window for adding the **IPsec-based** **VPN** connection:\n![Figure 5.37 – IPsec-based VPN](img/B19121_05_37.jpg)\n\nFigure 5.37 – IPsec-based VPN\nIn the **Identity** tab, add some general configuration properties for the connection:\n\n*   **Name**: This will identify the **VPN** connection.\n*   **General**:\n    *   **Gateway**: The *name* or IP address of the **VPN** gateway\n*   **Authentication**:\n    *   **Type**: IPsec supports two different types of authentication:\n        *   **IKEv2 (Certificate)**: This authentication uses a *certificate*, so it is the most secure option. This is the **default option** in the connection.\n        *   **IKEv1 (XAUTH)**: The authentication uses a *username and password* or a *pre-shared key*.\n*   **Certificate name**: The certificate’s filename\n*   **Remote ID**: This is used if the remote server requires a local identifier for the IKE exchange\n\nBy clicking on the **Advanced** button, you can access more specific configuration details. If more details for the connection are needed, they can be set up in this window:\n![Figure 5.38 – IPsec-based VPN – Advanced Properties](img/B19121_05_38.jpg)\n\nFigure 5.38 – IPsec-based VPN – Advanced Properties\nAfter filling in the required fields, click the **Apply** button. Returning to the previous **Add VPN** screen, click the **Add** button to add the VPN connection.\nOpenVPN\nClicking on **OpenVPN** displays a window similar to the IPsec-based screen:\n![Figure 5.39 – OpenVPN connection](img/B19121_05_39.jpg)\n\nFigure 5.39 – OpenVPN connection\nFilling in all the fields, as you did for the previous connection type, allows you to add the OpenVPN connection.\nHowever, adding an OpenVPN connection is typically done by *importing a certificate*. Let’s take a look at this process.\nIn the **Add VPN** connection window, click on the last option, **Import** **from file…**:\n![Figure 5.40 – Importing the .ovpn file certificate](img/B19121_05_40.jpg)\n\nFigure 5.40 – Importing the .ovpn file certificate\nBrowse to the `.ovpn` file and click the **Open** button. The configuration window will display the connection information.\nFor example, in this case, we will import the `/``home/acallejas/sample.ovpn` file.\nThe following figure shows the **sample vpn** connection information:\n![Figure 5.41 – Sample VPN connection](img/B19121_05_41.jpg)\n\nFigure 5.41 – Sample VPN connection\nRegarding the connection, note the following:\n\n*   The file contains the connection’s **Name** and the remote access **Gateway** details.\n*   Authentication requires **User name** and **Password.**\n*   **CA certificate** is a **.pem** file. This file could request a *dynamic passphrase* or **one-time password** (**OTP**). This is generated by a physical, virtual, or hybrid device to allow access.\n\nClick on the **Apply** button, if necessary. The OpenVPN connection will be added.\nAt the end of the VPN connection configuration, go to **Control Center** and select the VPN you want to access:\n![Figure 5.42 – Choosing a VPN connection](img/B19121_05_42.jpg)\n\nFigure 5.42 – Choosing a VPN connection\nAfter successfully authenticating, the login icon will appear in the top-right corner:\n![Figure 5.43 – Workstation connected to the VPN](img/B19121_05_43.jpg)\n\nFigure 5.43 – Workstation connected to the VPN\nNote\nOne of the best practices for secure communications is to have your own VPN. For more information on how to do this, visit the articles published in **Fedora Magazine** at [https://fedoramagazine.org/tag/vpn/](https://fedoramagazine.org/tag/vpn/).\nNow that we have improved our network connection, be it wired or wireless, using tuning or a VPN, let’s learn about some tools that will help us track the connection’s behavior.\nNetwork performance monitoring\nThere are different and varied network connection monitoring tools, but I prefer those that can be managed via the console. This allows for flexibility and, at the same time, can be used to run test batteries to verify the information that’s been received.\nThe first tool we’ll look at is basic but also has enough power to generate a quick analysis of the connection’s behavior.\nnmon\n`nmon`) was created for the **IBM AIX** operating system with *release 4.3* in 2006 and was ported to Linux in 2015 under the **GNU General Public License** for use.\n`nmon` is a benchmark tool. It collects operating system statistics, including the following:\n\n*   CPU (and CPU thread utilization or CPU frequency)\n*   GPU stats\n*   Memory use (physical and virtual, swap and paging)\n*   Disk (read and write, transfers plus service time and wait times, groups)\n*   Network (read and write and transfers), and more\n\nThis information can be displayed on the screen or saved in a *comma-separated file*. This allows for file backup and analysis to be performed with data extraction tools.\n`nmon` is available in Fedora’s repositories. Install `nmon` using the `dnf` command:\n\n```", "```\nnmon window:\n![Figure 5.44 – nmon](img/B19121_05_44.jpg)\n\nFigure 5.44 – nmon\nIn the case of network connection analysis, press `n` to display the connection statistics:\n![Figure 5.45 – Network stats](img/B19121_05_45.jpg)\n\nFigure 5.45 – Network stats\nNote\n**nmon** can collect a lot of useful information for workstation *performance benchmarking*. To learn more about its uses, refer to the **nmon for Linux** page at [https://nmon.sourceforge.net/](https://nmon.sourceforge.net/).\nAnother of my favorite tools is `bashtop`, but it is not included in the Fedora repositories at the time of writing. It must be installed by following the instructions on the project’s page on GitHub ([https://github.com/aristocratos/bashtop#installation](https://github.com/aristocratos/bashtop#installation)).\nA `bashtop` that’s included in the official `bpytop`.\nLet’s learn how to install and use it.\nbpytop\n`bpytop` is a *resource monitor* that displays usage and statistics for the processor, memory, disks, network, and processes.\nIt includes the most common features of resource monitors, such as ease of use and process manipulation at the touch of a key. However, it also has flexible features that allow data and processes to be manipulated simplistically. It can also be used to integrate themes that make it more attractive.\nTo install `bpytop`, follow these steps:\n\n1.  As the **root** user, use the **dnf** command to install **bpytop**:\n\n    ```", "```\n\n     2.  On the terminal, run **bpytop** as **root**:\n\n    ```", "```\n\nThe main monitor window will appear:\n![Figure 5.46 – bpytop monitor](img/B19121_05_46.jpg)\n\nFigure 5.46 – bpytop monitor\nNote\nTo learn more about **bpytop** monitor usage, refer to the **bpytop GitHub page** at [https://github.com/aristocratos/bpytop](https://github.com/aristocratos/bpytop).\nThese excellent monitoring tools allow us to track the performance of network connections.\nSummary\nIn this chapter, we reviewed how to connect our workstation to a network, by cable or wirelessly. Besides learning how to fine-tune this connection through best practices, we reviewed how to use VPNs in detail, as well as how to connect our workstation with an IPsec-based VPN and OpenVPN. Finally, we reviewed two monitoring tools that can help us track the performance of the network’s connection.\nIn the next chapter, we will start learning about applications. We will begin by looking at some modern ways of using them, such as using *sandbox containers*.\nFurther reading\nTo learn more about the topics that were covered in this chapter, take a look at the following resources:\n\n*   *Fedora Linux 36 no longer supports the ifcfg files to* *configure networking*:\n\n[https://fedoraproject.org/wiki/Releases/36/ChangeSet#No_ifcfg_by_default](https://fedoraproject.org/wiki/Releases/36/ChangeSet#No_ifcfg_by_default)\n\n*   *nm-settings-nmcli*:\n\n[https://developer-old.gnome.org/NetworkManager/stable/nm-settings-nmcli.html](https://developer-old.gnome.org/NetworkManager/stable/nm-settings-nmcli.html)\n\n*   *Ask Fedora –* *Wi-Fi*:\n\n[https://ask.fedoraproject.org/search?q=wifi%20tags%3Af37%2Cwifi%20order%3Aviews](https://ask.fedoraproject.org/search?q=wifi%20tags%3Af37%2Cwifi%20order%3Aviews)\n\n*   *Fedora Docs:* *Using firewalld*:\n\n[https://docs.fedoraproject.org/en-US/quick-docs/firewalld/](https://docs.fedoraproject.org/en-US/quick-docs/firewalld/)\n\n*   *Fedora* *Wiki: OpenVPN*:\n\n[https://fedoraproject.org/wiki/OpenVPN](https://fedoraproject.org/wiki/OpenVPN)\n\n```", "```\n\n```", "```\n\n```", "```\n\n```", "```\n\n```"]