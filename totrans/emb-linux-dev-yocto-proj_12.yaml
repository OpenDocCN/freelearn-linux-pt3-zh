- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating Custom Layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to using existing layers from the community or vendors, we will
    learn how to create layers for our products in this chapter. Additionally, we
    will discover how to create a machine definition and distribution and profit from
    them to organize our source code better.
  prefs: []
  type: TYPE_NORMAL
- en: Making a new layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before creating our layer, it’s always a good idea to check whether a similar
    one is already available at the following website: [http://layers.openembedded.org](http://layers.openembedded.org).'
  prefs: []
  type: TYPE_NORMAL
- en: If we are still looking for a layer suitable for our needs, the next step is
    to create the directory. Usually, the layer name starts with `meta-`, but this
    is not a technical restriction.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<layer>/conf/layer.conf` file is the layer configuration file required
    for every layer. The new layer can be created with a tool called `bitbake-layers`
    from BitBake, provided in Poky, as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1 – Creating a new layer using bitbake-layers](img/Figure_12.01_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.1 – Creating a new layer using bitbake-layers
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the layer, we need to include it in the `build/conf/bblayers.conf`
    file using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.2 – Adding meta-newlayer to build/conf/bblayers.conf](img/Figure_12.02_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.2 – Adding meta-newlayer to build/conf/bblayers.conf
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The `bitbake-layers` tool, by default, generates the layer with layer priority
    6\. We can still customize the priority using parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last command generates the layer, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.3 – The meta-newlayer layout when created](img/Figure_12.03_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.3 – The meta-newlayer layout when created
  prefs: []
  type: TYPE_NORMAL
- en: The default layer configuration file for `meta-newlayer` is the minimal configuration
    to get the layer working. However, it can be customized to include configurations
    required in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows the content of default `conf/layer.conf` for the
    `meta-newlayer` layer we just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.4 – The meta-newlayer/conf/layer.conf minimal configuration](img/Figure_12.04_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.4 – The meta-newlayer/conf/layer.conf minimal configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'Some commonly used variables that may need to be added or changed are `LAYERVERSION`
    and `LAYERDEPENDS`. Those are useful if our layer requires other layers to work.
    Both variables’ names must be suffixed with the layer’s name, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LAYERVERSION`: This is an optional variable that specifies the version of
    the layer in a single number. This variable is used within the `LAYERDEPENDS`
    variable to depend on a specific layer version – for example, `LAYERVERSION_meta-newlayer
    = "``1"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LAYERDEPENDS`: This lists the layers that the recipes depend upon, separated
    by spaces – for example, we add the dependency for version `2` of `meta-otherlayer`
    with `LAYERDEPENDS_meta-newlayer += "``meta-otherlayer:2"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An error is incurred if a dependency cannot be satisfied or the version numbers
    do not match. The base of the layer structure is now created. In the following
    sections, we will learn how to extend it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding metadata to the layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Layer metadata can serve two goals – add new software, or feature and modify
    existing metadata.
  prefs: []
  type: TYPE_NORMAL
- en: We can include several metadata files on a new layer, such as recipes, images,
    and `bbappend` files. There are several examples of `bbappend` files on `meta-yocto-bsp`
    and `meta-yocto`. We will explore some of their common uses in [*Chapter 13*](B19361_13.xhtml#_idTextAnchor158),
    *Customizing* *Existing Recipes*.
  prefs: []
  type: TYPE_NORMAL
- en: In the next sections, we will go through some common modifications to layer
    metadata.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Image files are, in essence, a set of packages grouped for a purpose and configured
    in a controlled way. We can create an image from scratch or create one by reusing
    an existing one and adding the extra necessary packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should reuse an existing image when possible, making code maintenance more
    manageable and highlighting the functional differences. For example, we may want
    to include an application and remove an image feature from the `core-image-full-cmdline`
    image file. In that case, we can create an image in the `recipes-mine/images/my-image-full-cmdline.bb`
    file with the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.5 – The content of my-image-full-cmdline.bb](img/Figure_12.05_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.5 – The content of my-image-full-cmdline.bb
  prefs: []
  type: TYPE_NORMAL
- en: 'The `core-image` class provides image features that offer helpful building
    blocks of commonly used functionality and should be used when creating an image
    from scratch. For example, we can create an image in the `recipes-mine/images/my-image-strace.bb`
    file consisting of the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.6 – The content of my-image-strace.bb](img/Figure_12.06_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.6 – The content of my-image-strace.bb
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The list appending operator (`+=`) guarantees that a new `EXTRA_IMAGE_FEATURES`
    variable can be added by `build/conf/local.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: '`CORE_IMAGE_EXTRA_INSTALL` is the variable we should use to include extra packages
    in the image when we inherit the `core-image` class, which facilitates image creation.
    The class adds support for the `IMAGE_FEATURES` variable, which avoids duplication
    of code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, the following image features are supported, as detailed in the *Image
    Features* section of the *Yocto Project Reference* *Manual* ([https://docs.yoctoproject.org/4.0.4/ref-manual/features.html#image-features](https://docs.yoctoproject.org/4.0.4/ref-manual/features.html#image-features)):'
  prefs: []
  type: TYPE_NORMAL
- en: '`allow-empty-password`: Allows Dropbear and OpenSSH to accept logins from accounts
    that have an empty password string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`allow-root-login`: Allows Dropbear and OpenSSH to accept `root` logins.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dbg-pkgs`: Installs debug symbol packages for all packages installed in a
    given image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`debug-tweaks`: Makes an image suitable for development (for example, allows
    root logins, logins without passwords – including root ones, and enables post-installation
    logging).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dev-pkgs`: Installs development packages (headers and extra library links)
    for all packages installed in a given image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`doc-pkgs`: Installs documentation packages for all packages installed in a
    given image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`empty-root-password`: This feature, or `debug-tweaks`, is required if you
    want to allow root login with an empty password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hwcodecs`: Installs hardware acceleration codecs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lic-pkgs`: Installs license packages for all packages installed in a given
    image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nfs-server`: Installs an NFS server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`overlayfs-etc`: Configures the `/etc` directory to be in `overlayfs`. This
    allows you to store device-specific information elsewhere, especially if the root
    filesystem is configured as read-only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package-management`: Installs package management tools and preserves the package
    manager database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`perf`: Installs profiling tools such as `perf`, `systemtap`, and **LTTng**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`post-install-logging`: Enables you to log postinstall script runs in the `/var/log/postinstall.log`
    file on the first boot of the image on the target system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ptest-pkgs`: Installs `ptest` packages for all ptest-enabled recipes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read-only-rootfs`: Creates an image whose root filesystem is read-only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read-only-rootfs-delayed-postinsts`: When specified in conjunction with `read-only-rootfs`,
    it specifies that post-install scripts are still permitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`serial-autologin-root`: When specified in conjunction with `empty-root-password`,
    it will automatically login as `root` on the serial console.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`splash`: Enables you to show a splash screen during boot. By default, this
    screen is provided by `psplash`, which does allow customization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ssh-server-dropbear`: Installs the Dropbear minimal SSH server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ssh-server-openssh`: Installs the OpenSSH SSH server, which is more full-featured
    than Dropbear. Note that if both the OpenSSH SSH server and the Dropbear minimal
    SSH server are present in `IMAGE_FEATURES`, then OpenSSH will take precedence
    and Dropbear will not be installed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stateless-rootfs`: Specifies that an image should be created as stateless
    – when using `systemd`, `systemctl-native` will not be run on the image, leaving
    the image to be populated at runtime by `systemd`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`staticdev-pkgs`: Installs static development packages, which are static libraries
    (for example, `*.a` files), for all packages installed in a given image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tools-debug`: Installs debugging tools such as `strace` and `gdb`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tools-sdk`: Installs a full SDK that runs on a device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tools-testapps`: Installs device testing tools (for example, touchscreen debugging).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`weston`: Installs Weston (a reference Wayland environment).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x11-base`: Installs the X server with a minimal environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x11`: Installs the X server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x11-sato`: Installs the OpenedHand Sato environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a package recipe
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Poky includes several classes that makes the process for the most common development
    tools as projects abstract, based on Autotools, CMake, and Meson. A package recipe
    is how we can instruct BitBake to perform the `fetch`, `unpack`, `patch`, `configure`,
    `compile`, and `install` tasks on our application, kernel module, or any software
    a project provides. In addition, a list of classes included in Poky can be seen
    in the *Classes* section in the *Yocto Project Reference* *Manual* ([https://docs.yoctoproject.org/4.0.4/ref-manual/classes.html](https://docs.yoctoproject.org/4.0.4/ref-manual/classes.html)).
  prefs: []
  type: TYPE_NORMAL
- en: 'A straightforward recipe that executes the `compile` and `install` tasks explicitly
    is provided as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.7 – A manually crafted helloworld recipe](img/Figure_12.07_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.7 – A manually crafted helloworld recipe
  prefs: []
  type: TYPE_NORMAL
- en: 'The `do_compile` and `do_install` code blocks provide the Shell Script command
    for us to build and install the resulting binary into the destination directory,
    referenced as `${D}`, which aims to relocate the installation directory to a path
    inside the `build/tmp/work/` directory. Suppose that we are working on an Autotools-based
    project. If so, we can avoid a lot of code duplication by using the `autotools`
    class in the stripped example, extracted from the recipe in the `poky/meta/recipes-core/dbus-wait/dbus-wait_git.bb`
    file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.8 – The content of poky/meta/recipes-core/dbus-wait/dbus-wait_git.bb](img/Figure_12.08_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.8 – The content of poky/meta/recipes-core/dbus-wait/dbus-wait_git.bb
  prefs: []
  type: TYPE_NORMAL
- en: 'The simple act of inheriting the `autotools` class in *line 19* is to provide
    all the code required to do the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Update the `configure` script code and artifacts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the `libtool` scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the `configure` script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run `make`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run `make install`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The same concepts apply to other building tools, as is the case for **CMake**
    and **Meson**. Additionally, the number of supported classes is growing in every
    release to support new build systems and avoid code duplication.
  prefs: []
  type: TYPE_NORMAL
- en: Automatically creating a base package recipe using devtool
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we learned in the *Creating a recipe from an external Git repository* section
    in [*Chapter 9*](B19361_09.xhtml#_idTextAnchor115), *Developing with the Yocto
    Project*, `devtool` automates the process of creating a recipe based on an existing
    project with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.9 – The command line to generate the recipe for bbexample](img/Figure_12.09_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.9 – The command line to generate the recipe for bbexample
  prefs: []
  type: TYPE_NORMAL
- en: 'Behind the scenes, `devtool` ran the `recipetool` to generate a recipe and
    automatically configure all pre-built information into the new recipe file. The
    end result is stored in the `workspace` directory, a layer maintained by `devtool`.
    To copy the recipe file to the target layer, we can use the `devtool` command,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.10 – The command line to deploy the bbexample recipe to meta-newlayer](img/Figure_12.10_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.10 – The command line to deploy the bbexample recipe to meta-newlayer
  prefs: []
  type: TYPE_NORMAL
- en: 'The created `meta-newlayer/recipes-bbexample/bbexample/bbexample_git.bb` file
    is shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.11 – The content of bbexamle_git.bb](img/Figure_12.11_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.11 – The content of bbexamle_git.bb
  prefs: []
  type: TYPE_NORMAL
- en: The `devtool` has created a base recipe, which should not be taken as a final
    recipe. You should check for compilation options, extra metadata information,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Adding support to a new machine definition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even though creating a new machine definition for use in Poky is a straightforward
    task, it shouldn’t be underestimated. Depending on the set of features we need
    to support at the BSP layer, it can involve checking the bootloader, kernel, and
    hardware support drivers.
  prefs: []
  type: TYPE_NORMAL
- en: The Yocto Project supports ARM, ARM64, x86, x86-64, PowerPC, PowerPC 64, MIPS,
    MIPS64, RISC-V 32, and RISC-V 64, representing the most currently used embedded
    architectures.
  prefs: []
  type: TYPE_NORMAL
- en: 'The prevailing set of variables used in a machine definition is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TARGET_ARCH`: This sets the machine architecture – for example, ARM and x86-64'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PREFERRED_PROVIDER_virtual/kernel`: This overrides the default kernel (`linux-yocto`)
    if you need to use a specific one'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SERIAL_CONSOLES`: This defines serial consoles and their speeds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MACHINE_FEATURES`: This describes hardware features, so the software stack
    required is included in the images by default'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`KERNEL_IMAGETYPE`: This is used to choose the kernel image type – for example,
    `bzImage` or `Image`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IMAGE_FSTYPES`: This sets the generated filesystem image types – for example,
    `tar.gz`, `ext4`, and `ubifs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can see examples of machine definition files inside the Poky source code
    in the `meta-yocto-bsp/conf/machine/` directory. When describing a new machine,
    we should pay special attention to specific features supported by it in `MACHINE_FEATURES`.
    This way, the software needed to help these features is installed into the images.
    The values currently available for `MACHINE_FEATURES` are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`acpi`: The hardware has ACPI (x86/x86-64 only)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`alsa`: The hardware has ALSA audio drivers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`apm`: The hardware uses APM (or APM emulation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bluetooth`: The hardware has integrated BT'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`efi`: Support for booting through EFI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ext2`: The hardware HDD or microdrive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keyboard`: The hardware has a keyboard'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`numa`: The hardware has non-uniform memory access'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pcbios`: Support for booting through BIOS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pci`: The hardware has a PCI bus'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pcmcia`: The hardware has PCMCIA or CompactFlash sockets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`phone`: Mobile phone (voice) support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qemu-usermode`: QEMU can support user-mode emulation for this machine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qvga`: The machine has a QVGA (320x240) display'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rtc`: The machine has a real-time clock'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`screen`: The hardware has a screen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`serial`: The hardware has serial support (usually RS232)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`touchscreen`: The hardware has a touchscreen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`usbgadget`: The hardware is USB gadget device-capable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`usbhost`: The hardware is USB host-capable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vfat`: FAT filesystem support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wifi`: The hardware has integrated Wi-Fi'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrapping an image for your machine
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Creating a ready-to-use image for a machine should be addressed at the end of
    any BSP support layer development. The type of image depends on the processor,
    peripherals included on the board, and project restrictions.
  prefs: []
  type: TYPE_NORMAL
- en: The `wic`, which provides a flexible way to generate this image. It allows the
    creation of partitioned images based on a template file (`.wks`), written in a
    common language that describes the target image layout. The language definition
    can be found in the *OpenEmbedded Kickstart (.wks) Reference* section from *The
    Yocto Project Reference* *Manual* ([https://docs.yoctoproject.org/4.0.4/ref-manual/kickstart.html#openembedded-kickstart-wks-reference](https://docs.yoctoproject.org/4.0.4/ref-manual/kickstart.html#openembedded-kickstart-wks-reference)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `.wks` file is placed in our layer inside the `wic` directory. It is common
    to have multiple files in this directory to specify different image layouts. However,
    it is essential to remember that the chosen structure must match the machine –
    for example, when considering the use of an i.MX-based machine that boots using
    U-Boot from an SD card with two partitions, one for the boot files and the other
    for `rootfs`. The respective `.wks` file is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.12 – An example of a .wks file for an i.MX device using SPL](img/Figure_12.12_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.12 – An example of a .wks file for an i.MX device using SPL
  prefs: []
  type: TYPE_NORMAL
- en: To enable the `wic`-based image generation, it is a matter of adding `wic` to
    `IMAGE_FSTYPES`. We can also define the `.wks` file to be used by setting the
    `WKS_FILE` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Using a custom distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The creation of a distribution is a mix of simplicity and complexity. Creating
    the distribution file is straightforward but significantly impacts Poky’s behavior.
    Depending on our options, it may cause a binary incompatibility with previously
    built binaries.
  prefs: []
  type: TYPE_NORMAL
- en: The distribution is where we define global options, such as the toolchain version,
    graphical backends, and support for **OpenGL**. We should make a distribution
    only if the default settings provided by Poky fail to fulfill our requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, we intend to change a small set of options from Poky. For example,
    we remove the `<layer>/conf/distro/my-distro.conf` file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.13 – An example of a custom distribution file](img/Figure_12.13_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.13 – An example of a custom distribution file
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the distribution just created, we need to add the following piece of
    code to the `build/conf/local.conf` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.14 – The line to set DISTRO on build/conf/local.conf](img/Figure_12.14_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.14 – The line to set DISTRO on build/conf/local.conf
  prefs: []
  type: TYPE_NORMAL
- en: 'The `DISTRO_FEATURES` variable may influence how the recipes are configured
    and the packages are installed in images – for example, if we want to use sound
    in any machine and image, the `alsa` features must be present. The following list
    shows the present state for the `DISTRO_FEATURES`-supported values, as detailed
    in the *Distro Features* section in the *Yocto Project Reference* *Manual* ([https://docs.yoctoproject.org/4.0.4/ref-manual/features.html#distro-features](https://docs.yoctoproject.org/4.0.4/ref-manual/features.html#distro-features)):'
  prefs: []
  type: TYPE_NORMAL
- en: '`3g`: Includes support for cellular data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`acl`: Includes Access Control List support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`alsa`: Includes Advanced Linux Sound Architecture support (OSS compatibility
    kernel modules are installed if available)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`api-documentation`: Enables the generation of API documentation during recipe
    builds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bluetooth`: Includes Bluetooth support (integrated BT only)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cramfs`: Includes CramFS support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`debuginfod`: Includes support for getting ELF debugging information through
    a `debuginfod` server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ext2`: Includes tools to support devices with an internal HDD/Microdrive for
    storing files (instead of Flash-only devices)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gobject-introspection-data`: Includes data to support GObject introspection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ipsec`: Includes IPSec support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ipv4`: Includes IPv4 support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ipv6`: Includes IPv6 support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keyboard`: Includes keyboard support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ldconfig`: Includes support for `ldconfig` and `ld.so.conf` on the target'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ld-is-gold`: Uses the gold linker instead of the standard GNU linker (`bfd`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lto`: Enables Link-Time Optimization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`multiarch`: Enables you to build applications with multiple architecture support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nfc`: Includes support for Near Field Communication'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nfs`: Includes NFS client support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nls`: Includes **Native Language** **Support** (**NLS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`opengl`: Includes the Open Graphics Library, a cross-language, multi-platform
    API, used to render two- and three-dimensional graphics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`overlayfs`: Includes OverlayFS support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pam`: Includes **Pluggable Authentication Module** (**PAM**) support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pci`: Includes PCI bus support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pcmcia`: Includes PCMCIA/CompactFlash support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`polkit`: Includes Polkit support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ppp`: Includes PPP dial-up support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ptest`: Enables you to build the package tests that were supported by individual
    recipes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pulseaudio`: Includes support for PulseAudio'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`seccomp`: Enables you to build applications with `seccomp` support, allowing
    the applications to strictly restrict the system calls that they are allowed to
    invoke'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`selinux`: Includes support for `meta-selinux`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`smbfs`: Includes SMB network client support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`systemd`: Includes support for this `init` manager, a full replacement for
    `init`, with parallel starting of services, reduced shell overhead, and other
    features'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`usbgadget`: Includes USB Gadget Device support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`usbhost`: Includes USB Host support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`usrmerge`: Merges the `/bin`, `/sbin`, `/lib`, and `/lib64` directories into
    their respective counterparts in the `/usr` directory to provide better package
    and application compatibility'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vfat`: Includes FAT filesystem support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vulkan`: Includes support for the Vulkan API'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wayland`: Includes the Wayland display server protocol and the library that
    supports it'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wifi`: Includes Wi-Fi support (integrated only)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x11`: Includes the X server and libraries'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xattr`: Includes support for extended file attributes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zeroconf`: Includes support for zero-configuration networking'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MACHINE_FEATURES versus DISTRO_FEATURES
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `DISTRO_FEATURES` and `MACHINE_FEATURES` variables work together to provide
    feasible support for the final system. When a machine supports a feature, this
    does not imply that the target system supports it because the distribution must
    provide its underlying base.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if a machine supports Wi-Fi but the distribution does not, the
    applications used by the operating system will be built with Wi-Fi support disabled
    so that the outcome will be a system without Wi-Fi support. On the other hand,
    if the distribution provides Wi-Fi support and a machine does not, the modules
    and applications needed for the Wi-Fi will not be installed in images built for
    this machine. However, the operating system and its modules have support for Wi-Fi
    enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the scope of a variable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The BitBake metadata has thousands of variables, but the scope where these
    variables are available depends on where it is defined. There are two kinds of
    variables, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Variables defined in configuration files are global to every recipe, also referred
    to as configuration metadata. The parsing order of the main configuration files
    is shown as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build/conf/local.conf`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<``layer>/conf/machines/<machine>.conf`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<``layer>/conf/distro/<distro>.conf`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Variables defined within recipe files have recipe visibility scope that is local
    to the specific recipe only during the execution of its tasks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered how to create a new layer and metadata. First, we
    saw how to create a machine configuration, a distribution definition, and recipe
    files. Then, we learned how to make images and include our application in an image.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will access some examples of the most common customization
    cases used by an additional layer, such as modifying existing packages, adding
    extra options to `autoconf`, applying a new patch, and including a new file to
    a package. We will see how to configure `BusyBox` and `linux-yocto`, the two packages
    commonly customized when making an embedded system.
  prefs: []
  type: TYPE_NORMAL
