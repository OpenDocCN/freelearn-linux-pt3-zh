- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux in the Cloud
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The advent of cloud computing has revolutionized the world of IT infrastructure,
    and Linux has been at the forefront of this transformative journey. Linux’s integration
    into the cloud ecosystem has not only reshaped the way businesses and organizations
    manage their computing resources but has also empowered system administrators
    with a dynamic and scalable environment. This introduction delves into the pivotal
    role of Linux in the cloud and how it has redefined the landscape of system administration.
    Linux, renowned for its open source nature and versatility, has seamlessly adapted
    to the cloud environment. In doing so, it has provided a stable and flexible foundation
    for cloud-based solutions. One of the key reasons for Linux’s prominence in the
    cloud is its ability to offer various distributions tailored to specific cloud
    service providers, such as **Amazon Web Services** (**AWS**), Microsoft Azure,
    and Google Cloud Platform. For system administrators, this means they can harness
    the power of Linux in a way that aligns perfectly with the chosen cloud infrastructure,
    streamlining resource management and deployment.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: One of the major roles Linux plays in the cloud is enabling system administrators
    to create and manage virtual instances effortlessly. Linux distributions such
    as CentOS offer robust and secure platforms for administrators to deploy a wide
    array of cloud services, from web hosting to data analytics. While CentOS is known
    for its stability, compatibility, and strong community support, it’s important
    to note that Ubuntu and various other Linux-based servers are widely utilized
    in the cloud as well. When conducting an internet search, you’ll find diverse
    opinions on these platforms’ suitability for your specific needs. This not only
    simplifies the process of launching virtual machines but also allows administrators
    to scale resources up or down as needed, providing a responsive and cost-effective
    solution for businesses.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'Linux also offers a wide range of features and tools that are essential for
    system administration in the cloud, such as the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '**Resource virtualization**: Linux allows system administrators to create and
    manage **virtual machines** (**VMs**), which are isolated computing environments
    that can run multiple operating systems and applications on a single physical
    server. This enables efficient utilization of resources and facilitates dynamic
    scaling of cloud-based services.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Containerization**: Linux is also a popular platform for containerization,
    which is a lightweight virtualization technology that allows applications to be
    packaged and deployed in isolated environments called containers. Containers are
    highly portable and scalable, making them ideal for running cloud-native applications.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: Linux is known for its security features, such as **Security-Enhanced
    Linux** (**SELinux**), which provides granular control over system access and
    permissions. This makes Linux a secure platform for running cloud-based workloads,
    even in multi-tenant environments.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automation**: Linux offers a wide range of tools and frameworks for automating
    system administration tasks, such as configuration management, deployment, and
    monitoring. This enables system administrators to manage large and complex cloud
    environments efficiently and effectively.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, Linux distributions such as CentOS prioritize security and stability
    in the cloud environment. System administrators rely on Linux’s rigorous security
    protocols and prompt updates to protect cloud-based assets from threats. The open
    source nature of Linux further empowers administrators to tailor security configurations
    to meet specific organizational requirements, ensuring the safety of data and
    applications hosted in the cloud.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will delve into the following main topics within the scope
    of AWS services:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Creating EC2 instances on AWS
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to a created EC2 instance using PuTTY
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working on our EC2 instance
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating EC2 instances on AWS
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating **Elastic Compute Cloud** (**EC2**) instances on AWS represents a foundational
    step in building and deploying scalable and flexible computing resources in the
    cloud. An EC2 instance can be thought of as a virtual server in the AWS cloud,
    and understanding how to create one is crucial for harnessing the full power of
    AWS. The importance of this skill lies in the unparalleled agility and cost-efficiency
    it offers to businesses and organizations. By creating EC2 instances, users can
    provision computing capacity on-demand, scale resources vertically or horizontally
    to meet changing workloads, and achieve operational efficiencies by paying only
    for what they consume. The primary reason for creating EC2 instances is the flexibility
    and versatility they bring to the cloud computing landscape. EC2 instances can
    be customized to meet specific application requirements, whether it’s running
    a web server, hosting a database, performing data analytics, or running machine
    learning workloads. The ability to choose from a wide range of instance types,
    each optimized for different use cases, allows users to tailor their virtual servers
    to the exact needs of their applications. Additionally, users can select the operating
    system, configure network settings, and choose storage options, providing an unparalleled
    level of control over their cloud infrastructure.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: The use of creating EC2 instances extends beyond mere resource allocation; it
    encompasses high availability, fault tolerance, and scalability. EC2 instances
    can be integrated with AWS services such as **Elastic Load Balancing** (**ELB**),
    Auto Scaling, and Amazon RDS to build resilient and scalable applications. The
    flexibility to start, stop, and terminate instances at will ensures optimal resource
    utilization and cost management. Moreover, EC2 instances are the foundation of
    many cloud-based solutions, including web hosting, data processing, and content
    delivery, making them a fundamental component of AWS’s vast ecosystem. In summary,
    mastering the creation of EC2 instances is pivotal for anyone seeking to leverage
    AWS’s cloud capabilities fully. It empowers users with the ability to design and
    deploy robust, scalable, and cost-effective cloud solutions that meet the unique
    demands of modern businesses and organizations.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Before creating an instance, visit the AWS website ([https://aws.amazon.com/](https://aws.amazon.com/))
    to create your account. Please note that initial account activation may take up
    to 24 hours, so it’s essential to plan accordingly. In the context of AWS Free
    Tier, it’s important to understand that it offers users the opportunity to explore
    AWS services at no cost with specific usage limitations. You can find further
    information in the FAQ section as shown in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1 – AWS Free Tier information](img/B18212_13_1.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
- en: Figure 13.1 – AWS Free Tier information
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can proceed to log into our AWS account and initiate the creation
    of EC2 instances on the AWS platform:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'We can locate EC2 on our dashboard, as illustrated in the screenshot provided:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.2 – Searching for EC2 virtual servers](img/B18212_13_2.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: Figure 13.2 – Searching for EC2 virtual servers
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'This action will take us to the EC2 Dashboard. In the **Resources** section,
    we currently have zero instances running, zero dedicated hosts, and zero instances,
    as depicted in the next screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.3 – The EC2 Dashboard and Resources panel](img/B18212_13_3.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: Figure 13.3 – The EC2 Dashboard and Resources panel
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'The AWS console offers a user-friendly interface for handling your EC2 instances.
    Clicking the **Instances** button grants access to a page displaying your active
    EC2 instances. From here, you can perform various actions such as halting or terminating
    running instances and establishing connections to them. On the other hand, the
    **Launch Instances** button directs you to a dedicated page for creating new EC2
    instances. Here, you can choose from a variety of instance types and customize
    the instance with your preferred operating system, applications, and other necessary
    settings:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 13.4 – Viewing active EC2 \uFEFFinstances](img/B18212_13_4.jpg)"
  id: totrans-28
  prefs: []
  type: TYPE_IMG
- en: Figure 13.4 – Viewing active EC2 instances
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we give our instance a name. Then, we click the **Browse more** **AMIs**
    link:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.5 – Selecting an AMI (1)](img/B18212_13_5.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
- en: Figure 13.5 – Selecting an AMI (1)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will navigate to the `CentOS 8` in the Marketplace area and choose
    the one shown in the following screenshot:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.6 – Selecting an AMI (2)](img/B18212_13_6.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: Figure 13.6 – Selecting an AMI (2)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: The AMIs within AWS serve as ready-made templates or virtual machine images.
    They encompass the essential components, such as the operating system, application
    server, and other necessary software, required for launching a virtual instance.
    These AMIs simplify and expedite the process of creating virtual machines by eliminating
    the need for manual installation and setup. Furthermore, AMIs are versatile, available
    in diverse configurations, and compatible with various operating systems, making
    them a cornerstone for rapidly deploying virtual instances in the AWS cloud. For
    more in-depth information about AMIs, visit [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html?tag=buylocal0e8-20](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html?tag=buylocal0e8-20).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we are presented with a pop-up showing the CentOS 8 information and a
    **Continue** button. Click it:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.7 – Selecting an AMI (3)](img/B18212_13_7.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: Figure 13.7 – Selecting an AMI (3)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Next is **Key** **pair (login)**.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A key pair consists of two cryptographic keys: a public key and a private key.
    The public key is employed to encrypt data, while the private key is employed
    to decrypt data. When a key pair is utilized to log in to an instance, the instance
    employs the public key to encrypt your login credentials. Subsequently, you utilize
    the private key to decrypt the login credentials.'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Additional information about the key pair login screen includes the following:'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **Select a key pair** drop-down menu displays a list of all key pairs linked
    to your account
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Create a new key pair** button enables you to generate a new key pair
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Download your key pair** button permits you to download the private key
    associated with the selected key pair
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: It is important to keep your private key secret. If someone else gains access
    to your private key, they will be able to log in to your instances and access
    your data.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.8 – The Key pair (login) window](img/B18212_13_8.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: Figure 13.8 – The Key pair (login) window
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create a new key pair. You will have to click on the `connect`.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Key pair type**: This field allows you to choose the type of key pair you
    want to create. You have two options: **RSA** or **ED25519**. RSA is the more
    common key pair type and is supported by all AWS services. ED25519 is a newer
    and more secure key pair type compared to RSA, but we’ll make use of the RSA.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Private key file format**: In this field, you can select the format in which
    you want to save the private key. You have two choices: **.pem** or **.ppk**.
    **.pem** is the standard format for private keys and is supported by all SSH clients.
    **.ppk** is a format specific to the PuTTY SSH client. We’ll select the **.ppk**
    option and then click the **Create key** **pair** button:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**私钥文件格式**：在此字段中，您可以选择希望保存私钥的格式。您有两种选择：**.pem** 或 **.ppk**。**.pem** 是私钥的标准格式，所有
    SSH 客户端都支持它。**.ppk** 是 PuTTY SSH 客户端特有的格式。我们将选择**.ppk**选项，然后点击**创建密钥** **对**按钮：'
- en: '![Figure 13.9 – Create key pair](img/B18212_13_9.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.9 – 创建密钥对](img/B18212_13_9.jpg)'
- en: Figure 13.9 – Create key pair
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.9 – 创建密钥对
- en: 'After clicking on the `Downloads` folder:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 `Downloads` 文件夹后：
- en: '![Figure 13.10 – The downloaded .ppk key](img/B18212_13_10.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.10 – 下载的 .ppk 密钥](img/B18212_13_10.jpg)'
- en: Figure 13.10 – The downloaded .ppk key
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.10 – 下载的 .ppk 密钥
- en: Next, we will do the network settings. The Security Groups page provides a comprehensive
    view of all security groups associated with your AWS account. Each security group
    entry on this page includes information such as the security group name, description,
    and its **virtual private cloud** (**VPC**) association. On the Security Groups
    page, you have the flexibility to perform various actions, including creating
    new security groups, modifying existing ones, and deleting those no longer needed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将进行网络设置。安全组页面提供了与您的 AWS 账户关联的所有安全组的综合视图。该页面上每个安全组条目包括安全组名称、描述及其**虚拟私有云**（**VPC**）关联等信息。在安全组页面，您可以执行多种操作，包括创建新安全组、修改现有的安全组以及删除不再需要的安全组。
- en: Let’s delve into what a VPC is.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解什么是 VPC。
- en: A VPC is a fundamental component of AWS and similar cloud computing platforms.
    It is a virtual network environment that allows users to create and manage a logically
    isolated section of the AWS cloud infrastructure. VPCs provide an additional layer
    of security and control over the cloud resources, allowing users to design their
    own network architecture, define IP address ranges, create subnets, and configure
    routing tables.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: VPC 是 AWS 及类似云计算平台的基本组成部分。它是一个虚拟网络环境，允许用户创建和管理 AWS 云基础设施的逻辑隔离部分。VPC 提供了对云资源的额外安全层和控制权限，允许用户设计自己的网络架构，定义
    IP 地址范围，创建子网，并配置路由表。
- en: Within a VPC, users can launch and manage a wide range of cloud-based resources,
    including virtual machines (EC2 instances), databases, load balancers, and more.
    By segmenting the cloud environment into VPCs, organizations can establish isolated
    networks that mimic traditional data center infrastructures with the added flexibility
    and scalability of the cloud. This isolation enables users to implement fine-grained
    security policies, ensuring that only authorized traffic can access resources
    within the VPC. VPCs also support the creation of VPNs and direct connections
    to on-premises data centers, facilitating secure hybrid cloud deployments. In
    summary, VPCs are a cornerstone of cloud networking, offering a flexible and controlled
    environment for deploying and managing cloud resources while enhancing security
    and network segmentation.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 VPC 内，用户可以启动和管理广泛的云资源，包括虚拟机（EC2 实例）、数据库、负载均衡器等。通过将云环境划分为 VPC，组织可以建立与传统数据中心架构相似的隔离网络，同时享有云的灵活性和可扩展性。这种隔离使用户能够实施精细化的安全策略，确保只有授权流量能够访问
    VPC 内的资源。VPC 还支持创建 VPN 和与本地数据中心的直接连接，促进安全的混合云部署。总之，VPC 是云网络的基石，为部署和管理云资源提供了一个灵活且受控的环境，同时增强了安全性和网络隔离。
- en: 'To initiate the creation of a new security group, click the **Edit** button
    on the **Network** **settings** page:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动创建新安全组的过程，请在**网络** **设置**页面点击**编辑**按钮：
- en: '![Figure 13.11 – Editing security groups (1)](img/B18212_13_11.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.11 – 编辑安全组（1）](img/B18212_13_11.jpg)'
- en: Figure 13.11 – Editing security groups (1)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.11 – 编辑安全组（1）
- en: On the next page, click the **Create Security Group** button to create a new
    security group.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页，点击**创建安全组**按钮以创建一个新的安全组。
- en: 'To edit an existing security group, click on the respective security group
    name:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要编辑现有的安全组，请点击相应的安全组名称：
- en: '![Figure 13.12 – Editing security groups (2)](img/B18212_13_12.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.12 – 编辑安全组（2）](img/B18212_13_12.jpg)'
- en: Figure 13.12 – Editing security groups (2)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.12 – 编辑安全组（2）
- en: If you wish to remove a security group, click on the security group name and
    follow it up by clicking the **Delete Security** **Group** button.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你希望删除一个安全组，点击安全组名称，然后点击**删除安全组**按钮。
- en: 'Here are some valuable tips for effectively utilizing security groups:'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里有一些有效利用安全组的有用技巧：
- en: '**Keep restrictive rules**: Maintain your security groups with the principle
    of least privilege in mind. Only permit the traffic that is essential for the
    functionality of your EC2 instances.'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持限制规则**：在设置安全组时，遵循最小权限原则。仅允许对EC2实例功能至关重要的流量。'
- en: '**Isolate traffic**: Create distinct security groups for different types of
    traffic. For instance, separating security groups for web servers and database
    servers can enhance your network security.'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隔离流量**：为不同类型的流量创建独立的安全组。例如，将Web服务器和数据库服务器的安全组分开，可以增强你的网络安全性。'
- en: '**Review regularly**: Periodically assess your security groups to ensure they
    align with your evolving needs and security requirements.'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定期审核**：定期评估你的安全组，以确保它们与你不断变化的需求和安全要求相符。'
- en: 'Lastly, we take a look at the rules. They permit SSH traffic from any source
    on the internet to connect to port `22` on the specified security group:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们来看一下规则。它们允许来自互联网任何来源的SSH流量连接到指定安全组的端口`22`：
- en: '![Figure 13.13 – Inbound Security Group Rules](img/B18212_13_13.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.13 – 入站安全组规则](img/B18212_13_13.jpg)'
- en: Figure 13.13 – Inbound Security Group Rules
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.13 – 入站安全组规则
- en: 'Let’s break down the various components of this rule:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下这个规则的各个组件：
- en: '**Type**: This indicates the type of traffic allowed by the rule. In this instance,
    it’s **ssh**.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型**：这表示规则允许的流量类型。在此实例中，它是**ssh**。'
- en: '`TCP`.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TCP`。'
- en: '`22`.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`22`。'
- en: '`0.0.0.0/0`, signifying that traffic from anywhere on the internet is permitted.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0.0.0.0/0`，表示允许来自互联网任何地方的流量。'
- en: '**Description**: This is a brief description of the rule, which, in this case,
    is SSH access.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：这是规则的简要描述，在此情况下为SSH访问。'
- en: Next, we will configure the storage.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将配置存储。
- en: The root volume type pertains to the storage used for an instance’s root device,
    which houses the operating system and essential files.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根卷类型是指用于实例根设备的存储，该设备包含操作系统和必要文件。
- en: 'There are two primary root volume types:'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有两种主要的根卷类型：
- en: '`30` GB:'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`30` GB：'
- en: '![Figure 13.14 – Configuring the storage](img/B18212_13_14.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.14 – 配置存储](img/B18212_13_14.jpg)'
- en: Figure 13.14 – Configuring the storage
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.14 – 配置存储
- en: '**Instance Store**: These volumes provide temporary storage for EC2 instances
    but lack persistence. Data on instance store volumes is not retained when the
    instance is terminated.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实例存储**：这些卷为EC2实例提供临时存储，但不具备持久性。实例存储卷中的数据在实例终止时不会保留。'
- en: Selection of the root volume type for an EC2 instance is made during the instance’s
    launch. While it is possible to change the root volume type post-launch, doing
    so necessitates stopping the instance.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动EC2实例时选择根卷类型。虽然启动后可以更改根卷类型，但这样做需要停止实例。
- en: 'The majority of EC2 instances opt for EBS volumes as their root storage due
    to the following advantages:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数EC2实例选择EBS卷作为其根存储，原因如下：
- en: '**Persistence**: EBS volumes retain data even after instance termination, making
    them ideal for storing crucial data such as operating system files and application
    data.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持久性**：EBS卷即使在实例终止后也会保留数据，因此非常适合存储关键数据，如操作系统文件和应用程序数据。'
- en: '**Scalability**: EBS volumes can be adjusted in size, accommodating applications
    with varying storage requirements.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：EBS卷可以调整大小，适应具有不同存储需求的应用程序。'
- en: '`General Purpose` (`SSD`), `Provisioned IOPS` (`SSD`), and `Magnetic`, enabling
    users to select the appropriate performance level for their applications.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`通用用途`（`SSD`）、`预置IOPS`（`SSD`）和`磁性`，使用户能够根据其应用程序选择适当的性能级别。'
- en: 'After making these selections, we move to the summary area to launch our instance.
    The summary includes the following information (see also *Figure 10**.15*):'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在做出这些选择后，我们进入摘要区域以启动实例。摘要包含以下信息（另见*图 10.15*）：
- en: '**Number of** **instances**: **1**'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实例数量**：**1**'
- en: '**Software Image (AMI)**: **CentOS-7-2111-20220825_1.x86_64 ami-002070d43b0a4f171**'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件镜像（AMI）**：**CentOS-7-2111-20220825_1.x86_64 ami-002070d43b0a4f171**'
- en: '**Virtual server type (instance** **type)**: **t2.micro**'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟服务器类型（实例类型）**：**t2.micro**'
- en: '**Firewall (security** **group)**: **INS-Security-Group**'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**防火墙（安全组）**：**INS-Security-Group**'
- en: '**Storage (volumes)**: **1 volume(s) -** **30 GB**'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The summary also shows that the instance is eligible for the AWS Free Tier.
    This means that you can use the instance for free for up to 750 hours per month
    in your first year.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.15 – Summary](img/B18212_13_15.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
- en: Figure 13.15 – Summary
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Launch instance**. When you see that the launching instance progress
    was successful, click **EC2** beside **Instances**:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.16 – The successful launch of an instance](img/B18212_13_16.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: Figure 13.16 – The successful launch of an instance
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking **EC2** in the preceding step, we’ll be redirected to the **EC2**
    **Dashboard** page. The following screenshot displays an AWS EC2 instance with
    a **Running** status and a **2/2 checks passed** status check:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.17 – 2/2 checks passed](img/B18212_13_17.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: Figure 13.17 – 2/2 checks passed
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: This indicates that the instance is currently operational and that both of the
    status checks conducted by AWS EC2 have been successfully completed.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'AWS EC2 conducts two types of status checks for each running instance:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: System status checks, which monitor the AWS systems supporting the instance
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instance status checks, which identify issues within the EC2 instance itself
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If one of these status checks fails, the overall status of the instance is marked
    as **Impaired**. In such cases, the instance may not function as expected.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: The **Impaired** status indicates that there might be issues with the instance’s
    health, but it doesn’t automatically mean that the instance is irreparably damaged.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on the nature of the issue, you may be able to troubleshoot and resolve
    it without recreating the entire AMI. The specific steps to take to resolve the
    issue would depend on the nature of the failure.Here are examples of types of
    issues:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '**System status check fails**: If this check fails, it often indicates problems
    with the underlying infrastructure. AWS may automatically attempt to recover the
    instance. In some cases, you might need to stop and start the instance or you
    may need to contact AWS support for assistance.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Instance status check fails**: When this check fails, it generally points
    to issues within the instance itself, such as software or configuration problems.
    You can usually access the instance, identify the problem, and apply fixes without
    creating a new AMI.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the context of the previous screenshot, a **2/2 checks passed** status confirms
    that both system and instance checks have been successfully cleared, signifying
    that the instance is in a healthy and fully operational state.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to a created EC2 instance using PuTTY
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Establishing a connection to an EC2 instance within AWS is a fundamental step
    in harnessing the capabilities of cloud computing. It involves creating a remote
    link to a virtual server hosted in the AWS cloud infrastructure. This connection
    allows users to access, manage, and configure the virtual server, taking advantage
    of the adaptability, scalability, and cost-efficiency provided by AWS.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: The primary motivation for connecting to an EC2 instance is to gain secure and
    efficient remote access to a cloud-based server environment. This connectivity
    is invaluable for system administrators, developers, and DevOps practitioners,
    empowering them to perform critical tasks relating to server setup, software installation,
    real-time monitoring, troubleshooting, and routine maintenance. It enables the
    seamless administration of server resources and file transfers and the timely
    implementation of system updates, all without any physical presence at the server’s
    location. Connecting to an EC2 instance is crucial for deploying and managing
    web applications, databases, and other cloud-native services. It streamlines collaborative
    efforts and ensures that cloud resources are accessible from any location, making
    it an essential component of modern cloud infrastructure management.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of connecting to an EC2 instance is multifaceted. System administrators
    use remote access to oversee server configurations, apply security patches, and
    monitor performance metrics. Developers leverage these connections for deploying
    and testing applications, debugging procedures, and managing development environments
    in the cloud. DevOps teams rely on remote connections to streamline server provisioning,
    configure extensive server fleets, and efficiently orchestrate complex **continuous
    integration/continuous deployment** (**CI/CD**) pipelines. Organizations embracing
    **Infrastructure as Code** (**IaC**) principles depend on remote access for programmatically
    managing their cloud infrastructure systematically and efficiently.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we can connect to our created instance, please visit [https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html](https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html)
    to download PuTTY. Depending on your system’s architecture, you can choose either
    the 64-bit or 32-bit version:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.18 – PuTTY 64-bit version or 32-bit version](img/B18212_13_18.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
- en: Figure 13.18 – PuTTY 64-bit version or 32-bit version
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing PuTTY, we can proceed to check our created Linux instance.
    We will examine the instance summary, which includes the public IPv4 address,
    as well as details related to security, networking, storage, status checks, monitoring,
    tags, and private IPv4 addresses:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.19 – View of the instance summary](img/B18212_13_19.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
- en: Figure 13.19 – View of the instance summary
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: 'We can try quickly connecting to our instance using PuTTY:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.20 – PuTTY Configuration](img/B18212_13_20.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
- en: Figure 13.20 – PuTTY Configuration
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the public IP address from your instance summary into the `22` and click
    **Open**. Subsequently, you’ll receive a PuTTY output. The information in the
    screenshot shows that our user is attempting to log into the EC2 instance as the
    root user using a public key. This is because, by default, root login is disabled
    on EC2 instances:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.21 – PuTTY output](img/B18212_13_21.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
- en: Figure 13.21 – PuTTY output
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'The user is prompted to log in as the user `centos` instead, but first, let’s
    check how to load our `.pkk` key on PuTTY. Locate the key:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.22 – Adding the .pkk key to PuTTY](img/B18212_13_22.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
- en: Figure 13.22 – Adding the .pkk key to PuTTY
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'We can call it any name. Have a look at the following example:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.23 – Saved session settings](img/B18212_13_23.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
- en: Figure 13.23 – Saved session settings
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'The arrows in the image are pointing to the default settings for a PuTTY session.
    They are located in the following places:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '`centos@35.172.201.164`.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Saved Sessions**: This button allows you to save the current PuTTY session
    settings to a file. This can be useful if you connect to the same server on a
    regular basis, as you can simply load the saved session settings instead of having
    to enter them each time like with **Linux-AWS** in the image.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Load**: This button allows you to load a saved PuTTY session. To do this,
    simply select the session file that you want to load and click the **Load** button.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.``pkk` key:'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 13.24 – Authenticating with the public key](img/B18212_13_24.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
- en: Figure 13.24 – Authenticating with the public key
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: After successfully establishing a connection, you’ll gain access to a terminal
    window, allowing you to efficiently manage the instance.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: In the process of verifying available free space on the system, we employ the
    `df` command to display information about the file systems. This command provides
    insights into disk usage and available space. Additionally, we execute the `whoami
    && hostname && uname -a` command sequence. The `whoami` command retrieves the
    current user’s username, `hostname` displays the system’s hostname, and `uname
    -a` provides you with comprehensive system information, including the kernel version
    and architecture.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: In summary, connecting to an EC2 instance is a pivotal step that unlocks the
    full potential of cloud computing, facilitating server administration, cloud-native
    application development, and infrastructure automation, all seamlessly integrated
    within the AWS cloud environment.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Working on our EC2 instance
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to make use of some commands similar to those
    used in CentOS and apply them to perform some short tasks. So, let’s begin:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '**Updating** **and upgrading**:'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You’ve just launched your CentOS 8 Linux instance on AWS. To ensure it’s up
    to date, use the following commands:'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.25 – Updating and upgrading](img/B18212_13_25.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
- en: Figure 13.25 – Updating and upgrading
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the transaction summary:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.26 – Transaction summary](img/B18212_13_26.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
- en: Figure 13.26 – Transaction summary
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: The summary indicates that one package is in the process of being installed,
    42 packages are undergoing updates, and the cumulative download size amounts to
    110 MB. The user is prompted to decide whether to continue with the installation
    process.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to updating software packages, package managers serve as essential
    tools for users to effortlessly manage software installation, updates, and removal
    on their systems. These utilities offer the flexibility to install software from
    diverse sources, encompassing official repositories, third-party repositories,
    and local files, providing users with versatile options for software management.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '**Package installation**:'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following shows the installation of an Apache web server on a CentOS 8
    instance:'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.27 – Installing a package](img/B18212_13_27.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
- en: Figure 13.27 – Installing a package
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '**Service management**:'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is how to start the Apache service and enable it to start on
    boot:'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.28 – Starting Apache on boot](img/B18212_13_28.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
- en: Figure 13.28 – Starting Apache on boot
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a breakdown of the command:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '`sudo systemctl status httpd`: This command checks the status of the Apache
    HTTP Server (`httpd`). It displays information about the service, such as its
    description, whether it’s loaded or active, and its related documentation. In
    this case, it shows that the service is loaded but inactive (dead).'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sudo systemctl start httpd`: This command starts the Apache HTTP Server. It
    initiates the service, making it active and running.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sudo systemctl enable httpd`: This command enables the automatic start of
    the Apache HTTP Server at boot. It creates a symbolic link from the multi-user
    target to the httpd service, ensuring that the service starts when the system
    boots up.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sudo systemctl status httpd`: After starting and enabling the service, this
    command checks the status of the Apache HTTP Server again. Now, it shows that
    the service is loaded, enabled, and active (running). It provides additional details
    about the service, including its main **process ID** (**PID**) and current status.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`journalctl` is used to access and view the `systemd` journal on a Linux system.
    The `systemd` journal is a system log that contains various log entries and messages
    generated by the system and its components. The output of `journalctl` displays
    a chronological list of log entries, providing information about the system’s
    activities and events.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the provided output, we can observe the following details:'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The command shows logs that can begin at a specific timestamp (e.g., `Mon 2023-10-16
    21:22:47 UTC`) and end at another timestamp (e.g., `Mon 2023-10-16 23:15:01 UTC`)
    with the understanding that the timestamps may vary.
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The logs display various system events, including messages from `systemd` components
    and kernel-related activities.
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: These events may include system initialization, SELinux policy loading, hardware
    and kernel configuration, virtualization detection, hostname configuration, and
    more.
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The log entries also include details about `systemd` processes and their status,
    such as whether they started successfully or encountered issues.
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `journalctl` command provides a comprehensive view of system activities,
    aiding in system administration, debugging, and troubleshooting.
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 13.29 – Tracking system activities](img/B18212_13_29.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
- en: Figure 13.29 – Tracking system activities
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '`journalctl` is a valuable tool that helps system administrators monitor system
    health and diagnose issues. The provided output represents a portion of the system
    log with events and timestamps, allowing users to track system activities and
    diagnose problems effectively.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '`sudo find / -size +100M` command is used to search the entire filesystem (`/`)
    for files that are larger than 100 megabytes (+100 MB). It begins at the root
    directory and searches through all directories and subdirectories. The output
    displays the paths of any files found that meet the size criteria:'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 13.30 – Finding files (1)](img/B18212_13_30.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
- en: Figure 13.30 – Finding files (1)
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: 'The provided output shows that it has located several files that are larger
    than 100 megabytes, including the following:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '`/proc/kcore`: This file represents the core memory of the kernel, which is
    a virtual file and not an actual file on disk'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/cache/yum/x86_64/7/updates/gen/primary_db.sqlite`: This file is a database
    used by the YUM package manager to store information about available packages
    and updates'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/usr/lib/locale/locale-archive`: This file contains system locale information
    used for internationalization and localization'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The error messages following the file paths indicate that the `find` command
    couldn’t access certain directories within the `/proc` directory, which is expected
    because `/proc` is a virtual filesystem that doesn’t contain actual files on disk.
    The errors can be safely ignored in this context.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: 'The `sudo find / -user root -o -group root | less` command is used to search
    the entire filesystem (`/`) for files and directories that either belong to the
    `root` user or the `root` group:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.31 – Finding files (2)](img/B18212_13_31.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
- en: Figure 13.31 – Finding files (2)
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: The `| less` part of the command pipes the output to the `less` command, which
    allows for easier navigation and viewing of the results one screen at a time.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: 'The provided output shows that it has located various files and directories
    within the `/dev` directory that either have the owner set to `root` or belong
    to the `root` group. These include the following:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '`/dev/vhci`: This is a virtual host controller interface'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/dev/vfio`: This is a virtual function I/O interface'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/dev/vfio/vfio`: This is a subdirectory under `/dev/vfio`'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/dev/ppp`: This is related to **Point-to-Point Protocol** (**PPP**) devices'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/dev/uinput`: This is a virtual input device'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/dev/mqueue`: These are message queue devices'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/dev/hugepages`: These are files related to huge pages in memory management'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/dev/initctl`: This is a **First In, First Out** (**FIFO**) special file used
    for communication with the init process'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The command is helpful for system administrators when identifying files and
    directories with specific ownership or group membership, which can be useful for
    managing system security and access control. The `less` command is used to make
    the output more readable and navigable, especially when dealing with large sets
    of search results.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you were guided through the comprehensive process of creating
    Amazon EC2 instances on AWS. The chapter explores the key steps required to establish
    virtual servers in the cloud while delving into the multitude of instance types
    and configurations available on AWS. With a focus on practicality, you also gained
    valuable knowledge of configuring instance details, changing their storage, and
    setting up security groups for both performance and security. This chapter equipped
    you with the knowledge and skills to manage EC2 instances in a cloud environment.
    It provided a step-by-step guide on establishing secure connections to AWS EC2
    instances following successful creation. This chapter also introduced PuTTY, a
    widely used SSH client, and elaborated on its effective use in connecting to Linux-based
    EC2 instances. The journey begins with an overview of PuTTY and the essential
    concept of SSH key pairs for secure authentication. Furthermore, you were provided
    with detailed guidance on installing and configuring PuTTY, including setting
    up a session, configuring credential locations, and loading the session. Finally,
    in the *Working on our EC2 Instance* section, we explored hands-on administrative
    tasks users can perform on AWS EC2 instances. The chapter underscored the importance
    of updating and upgrading EC2 instances to ensure that they run optimally and
    have the latest software packages installed. It offered step-by-step guidance
    on leveraging package managers for effective software installation, updates, and
    upgrades. You were also introduced to service management, enabling you to start
    and manage services using `systemd`. The chapter then introduced you to `journalctl`,
    a powerful tool for accessing system logs to monitor activities, troubleshoot
    issues, and gather essential system health information. It concluded with insights
    into directory management using the `find` command, rounding out your comprehensive
    understanding of EC2 instance administration in a dynamic cloud environment.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
