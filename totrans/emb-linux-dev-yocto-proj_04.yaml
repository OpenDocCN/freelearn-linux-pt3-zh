- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Meeting the BitBake Tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this chapter, we will now begin our journey of learning how the Yocto Project’s
    engine works behind the scenes. As is the case with every journey, communication
    is critical, so we need to understand the language used by the Yocto Project’s
    tools and learn how to get the best out of these tools to accomplish our goals.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding chapters introduced us to the standard Yocto Project workflow
    for creating and emulating images. Now, in this chapter, we will explore the concept
    of metadata and how BitBake reads this metadata to make its internal data collections.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the BitBake tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The BitBake task scheduler started as a fork from Portage, the package management
    system used in the Gentoo distribution. However, the two projects diverged significantly
    due to different use cases. The Yocto Project and the OpenEmbedded Project are
    intensive users of BitBake. It remains a separate and independent project with
    its own development cycle and mailing list ([bitbake-devel@lists.openembedded.org](mailto:bitbake-devel@lists.openembedded.org)).
  prefs: []
  type: TYPE_NORMAL
- en: BitBake is a tool similar to GNU Make. As discussed in [*Chapter 1*](B19361_01.xhtml#_idTextAnchor013),
    *Meeting the Yocto Project*, BitBake is a task executor and scheduler that parses
    Python and Shell Script mixed code.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, BitBake is responsible for running as many tasks as possible in parallel
    while ensuring they are run respecting their dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: BitBake metadata collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For BitBake, there is no metadata outside a metadata collection. Instead, a
    metadata collection has a unique name, and the common term the Yocto Project uses
    for those collections is **Layer**.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B19361_01.xhtml#_idTextAnchor013), *Meeting the Yocto Project*,
    explains that we have the following layers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`meta` directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`meta-poky` directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`meta-yocto-bsp` directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The preceding list describes real examples of layers. Every layer contains
    a file called `conf/layer.conf`. This file defines several layer properties, such
    as the collection name and priority. The following figure shows the `conf/layer.conf`
    file for the `meta-poky` layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – The conf/layer.conf file for the meta-poky layer](img/Figure_4.1_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – The conf/layer.conf file for the meta-poky layer
  prefs: []
  type: TYPE_NORMAL
- en: The preceding example is relatively simple but serves as a base for us to illustrate
    the `conf/layer.conf` file principles.
  prefs: []
  type: TYPE_NORMAL
- en: In line 8, `BBFILE_COLLECTIONS`, we tell BitBake to create a new metadata collection
    called `yocto`. Next, in line 9, `BBFILE_PATTERN_yocto`, we define the rule to
    match all paths starting with the `LAYERDIR` variable to identify the metadata
    belonging to the `yocto` collection. Finally, in line 10, `BBFILE_PRIORITY_yocto`
    establishes the priority (the higher the number, the higher the priority) of the
    `yocto` collection against the other metadata collections.
  prefs: []
  type: TYPE_NORMAL
- en: The dependency relation between the layers is vital as it ensures that all required
    metadata is available for use. An example is in line 18 as `LAYERDEPENDS_yocto`,
    from the `conf/layer.conf` file, adds a dependency to the `core`, provided by
    the OpenEmbedded Core layer.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4**.2* shows Poky’s layers using the `bitbake-layers` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Results of bitbake-layers show-layers for Poky](img/Figure_4.2_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 – Results of bitbake-layers show-layers for Poky
  prefs: []
  type: TYPE_NORMAL
- en: Metadata types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three major areas where we can classify the metadata used by BitBake.
    They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration (the `.``conf` files)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classes (the `.``bbclass` files)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recipes (the `.bb` and `.``bbappend` files)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The configuration files define the global content to provide information and
    configure how the recipes work. One typical example of a configuration file is
    the machine file, which has a list of settings that describes the hardware.
  prefs: []
  type: TYPE_NORMAL
- en: The whole system uses the classes that recipes can `inherit` according to their
    needs or by default. They define the commonly used system’s behavior and provide
    the base methods. For example, `kernel.bbclass` abstracts tasks related to building
    and packaging the Linux kernel independently of version or vendor changes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The recipes and classes mix Python and Shell Script code.
  prefs: []
  type: TYPE_NORMAL
- en: The classes and recipes describe the tasks to be run and provide the information
    needed to allow BitBake to generate the required task list and its dependencies.
    The inheritance mechanism permits a recipe to inherit one or more classes to promote
    code reuse, improve accuracy, and make maintenance easier. A Linux kernel recipe
    example is `linux-yocto_5.15.bb`, which inherits a set of classes, including `kernel.bbclass`.
  prefs: []
  type: TYPE_NORMAL
- en: BitBake’s most commonly used aspects across all types of metadata (`.conf`,
    `.bb`, and `.bbclass`) are covered in [*Chapter 5*](B19361_05.xhtml#_idTextAnchor077),
    *Grasping the BitBake Tool*, while the metadata grammar and syntax are detailed
    in [*Chapter 8*](B19361_08.xhtml#_idTextAnchor110), *Diving into* *BitBake Metadata*.
  prefs: []
  type: TYPE_NORMAL
- en: Taking *Figure 4**.1* into consideration, we need to pay attention to two other
    variables – `BBPATH` and `BBFILES`.
  prefs: []
  type: TYPE_NORMAL
- en: '`BBPATH`, on line 2, is analogous to `PATH` but adds a directory to the search
    list for metadata files; the `BBFILES` variable, on line 5, lists the pattern
    used to index the collection recipe files.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about metadata, metadata collection concepts, and
    the importance of `conf/layer.conf`, which are the base for the understanding
    of the Yocto Project. In the next chapter, we will examine metadata knowledge,
    understand how recipes depend on each other, and how BitBake deals with dependencies.
    Additionally, we will also get a better view of the tasks managed by BitBake,
    download all the required source code, build and generate packages, and see how
    these packages fit into generated images.
  prefs: []
  type: TYPE_NORMAL
