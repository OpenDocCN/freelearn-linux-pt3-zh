- en: 27\. Creating an Ubuntu 23.04 KVM Networked Bridge Interface
  prefs: []
  type: TYPE_NORMAL
- en: By default, the KVM virtualization environment on Ubuntu creates a virtual network
    to which virtual machines may connect. It is also possible to configure a direct
    connection using a MacVTap driver. However, as outlined in the chapter entitled
    [“An Overview of Virtualization Techniques”](Virtualization_Overview.xhtml#_idTextAnchor361),
    this approach does not allow the host and guest systems to communicate.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will cover the steps involved in creating a network bridge on Ubuntu,
    enabling guest systems to share one or more of the host system’s physical network
    connections while still allowing the guest and host systems to communicate.
  prefs: []
  type: TYPE_NORMAL
- en: In the remainder of this chapter, we will explain how to configure an Ubuntu
    network bridge for KVM-based guest operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: 27.1 Getting the Current Network Manager Settings
  prefs: []
  type: TYPE_NORMAL
- en: A network bridge can be created using the NetworkManager command-line interface
    tool (nmcli). The NetworkManager is installed and enabled by default on Ubuntu
    systems and is responsible for detecting and connecting to network devices and
    providing an interface for managing networking configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of current network connections on the host system can be displayed as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con show
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NAME UUID TYPE DEVICE
  prefs: []
  type: TYPE_NORMAL
- en: Wired connection 1 daae7adc-2a52-3fa0-9085-25748531e1b6 ethernet eno1
  prefs: []
  type: TYPE_NORMAL
- en: virbr0 299e0d95-4f39-4e65-aace-c7abbd8b018d bridge virbr0
  prefs: []
  type: TYPE_NORMAL
- en: vnet2 bcb3cd6e-dae4-4545-b98b-e8f90c86dadb tun vnet2
  prefs: []
  type: TYPE_NORMAL
- en: The above output shows that the host has an Ethernet network connection established
    via a device named eno1 and the default bridge interface named virbr0, which provides
    access to the NAT-based virtual network to which KVM guest systems are connected
    by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, the following command can be used to identify the devices (both
    virtual and physical) that are currently configured on the system:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli device show
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GENERAL.DEVICE: eno1'
  prefs: []
  type: TYPE_NORMAL
- en: 'GENERAL.TYPE: ethernet'
  prefs: []
  type: TYPE_NORMAL
- en: 'GENERAL.HWADDR: 00:23:24:52:52:57'
  prefs: []
  type: TYPE_NORMAL
- en: 'GENERAL.MTU: 1500'
  prefs: []
  type: TYPE_NORMAL
- en: 'GENERAL.STATE: 100 (connected)'
  prefs: []
  type: TYPE_NORMAL
- en: 'GENERAL.CONNECTION: Wired connection 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'GENERAL.CON-PATH: /org/freedesktop/NetworkManager/ActiveC>'
  prefs: []
  type: TYPE_NORMAL
- en: 'WIRED-PROPERTIES.CARRIER: on'
  prefs: []
  type: TYPE_NORMAL
- en: 'IP4.ADDRESS[1]: 192.168.86.39/24'
  prefs: []
  type: TYPE_NORMAL
- en: 'IP4.GATEWAY: 192.168.86.1'
  prefs: []
  type: TYPE_NORMAL
- en: 'IP4.ROUTE[1]: dst = 169.254.0.0/16, nh = 0.0.0.0, mt >'
  prefs: []
  type: TYPE_NORMAL
- en: 'IP4.ROUTE[2]: dst = 192.168.86.0/24, nh = 0.0.0.0, mt>'
  prefs: []
  type: TYPE_NORMAL
- en: 'IP4.ROUTE[3]: dst = 0.0.0.0/0, nh = 192.168.86.1, mt >'
  prefs: []
  type: TYPE_NORMAL
- en: 'IP4.DNS[1]: 192.168.86.1'
  prefs: []
  type: TYPE_NORMAL
- en: 'IP4.DOMAIN[1]: lan'
  prefs: []
  type: TYPE_NORMAL
- en: 'IP6.ADDRESS[1]: fda8:b48c:1079:0:5f:670e:a693:9ae2/64'
  prefs: []
  type: TYPE_NORMAL
- en: 'IP6.ADDRESS[2]: fda8:b48c:1079:0:c734:89bd:8384:992d/64'
  prefs: []
  type: TYPE_NORMAL
- en: 'IP6.ADDRESS[3]: fda8:b48c:1079:0:ec7b:35d8:8253:3739/64'
  prefs: []
  type: TYPE_NORMAL
- en: 'IP6.ADDRESS[4]: fe80::1e40:b04c:3de4:5fe0/64'
  prefs: []
  type: TYPE_NORMAL
- en: 'IP6.GATEWAY: --'
  prefs: []
  type: TYPE_NORMAL
- en: 'IP6.ROUTE[1]: dst = fda8:b48c:1079::/64, nh = ::, mt >'
  prefs: []
  type: TYPE_NORMAL
- en: 'IP6.ROUTE[2]: dst = fe80::/64, nh = ::, mt = 1024'
  prefs: []
  type: TYPE_NORMAL
- en: 'IP6.ROUTE[3]: dst = fd56:6a14:af59:1::/64, nh = fe80:>'
  prefs: []
  type: TYPE_NORMAL
- en: 'GENERAL.DEVICE: virbr0'
  prefs: []
  type: TYPE_NORMAL
- en: 'GENERAL.TYPE: bridge'
  prefs: []
  type: TYPE_NORMAL
- en: 'GENERAL.HWADDR: 52:54:00:00:A8:CA'
  prefs: []
  type: TYPE_NORMAL
- en: 'GENERAL.MTU: 1500'
  prefs: []
  type: TYPE_NORMAL
- en: 'GENERAL.STATE: 100 (connected (externally))'
  prefs: []
  type: TYPE_NORMAL
- en: 'GENERAL.CONNECTION: virbr0'
  prefs: []
  type: TYPE_NORMAL
- en: 'GENERAL.CON-PATH: /org/freedesktop/NetworkManager/ActiveC>'
  prefs: []
  type: TYPE_NORMAL
- en: 'IP4.ADDRESS[1]: 192.168.122.1/24'
  prefs: []
  type: TYPE_NORMAL
- en: 'IP4.GATEWAY: --'
  prefs: []
  type: TYPE_NORMAL
- en: 'IP4.ROUTE[1]: dst = 192.168.122.0/24, nh = 0.0.0.0, m>'
  prefs: []
  type: TYPE_NORMAL
- en: 'IP6.GATEWAY: --'
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: The above partial output indicates that the host system on which the command
    was executed contains a physical Ethernet device (eno1) and a virtual bridge (virbr0).
  prefs: []
  type: TYPE_NORMAL
- en: 'The virsh command may also be used to list the virtual networks currently configured
    on the system:'
  prefs: []
  type: TYPE_NORMAL
- en: virsh net-list --all
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Name State Autostart Persistent
  prefs: []
  type: TYPE_NORMAL
- en: '----------------------------------------------------------'
  prefs: []
  type: TYPE_NORMAL
- en: default active yes yes
  prefs: []
  type: TYPE_NORMAL
- en: Currently, the only virtual network present is the default network provided
    by virbr0\. Now that some basic information about the current network configuration
    has been obtained, the next step is to create a network bridge connected to the
    physical network device (in this case, eno1).
  prefs: []
  type: TYPE_NORMAL
- en: 27.2 Creating a Network Manager Bridge from the Command-Line
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step in creating the network bridge is adding a new connection to
    the configuration. This can be achieved using the nmcli tool, specifying that
    the connection is to be a bridge and providing names for both the connection and
    the interface:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con add ifname br0 type bridge con-name br0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the connection has been added, a bridge slave interface needs to be established
    between physical device eno1 (the slave) and the bridge connection br0 (the master)
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con add type bridge-slave ifname eno1 master br0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, the NetworkManager connection list should read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con show
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: br0 8680c281-6d49-4f76-93b1-902c42514ca5 bridge br0
  prefs: []
  type: TYPE_NORMAL
- en: Wired connection 1 126ab0e8-d4d3-3326-bd5e-1fea169c5635 ethernet eno1
  prefs: []
  type: TYPE_NORMAL
- en: virbr0 556042d4-2e5d-45fe-9c78-a24259e07265 bridge virbr0
  prefs: []
  type: TYPE_NORMAL
- en: bridge-slave-eno1 e6ba8ead-8fa9-4434-a884-d39225ecda20 ethernet --
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to start up the bridge interface. If the steps to configure
    the bridge are being performed over a network connection (i.e., via SSH) this
    step can be problematic because the current "Wired connection 1" connection must
    be closed down before the bridge connection can be brought up. This means the
    current connection will be lost before the bridge connection can be enabled to
    replace it, potentially leaving the remote host unreachable.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are accessing the host system remotely, this problem can be avoided
    by creating a shell script to perform the network changes. This will ensure that
    the bridge interface is enabled after the ”Wired connection 1” interface is brought
    down, allowing you to reconnect to the host after the changes are complete. Begin
    by creating a shell script file named bridge.sh containing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '#!/bin/bash'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con down "Wired connection 1"
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con up br0
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the script has been created, execute it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: sh ./bridge.sh
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the script executes, the connection will be lost when the ”Wired connection
    1” connection is brought down. After waiting a few seconds, however, it should
    be possible to reconnect to the host once the br0 connection has been activated.
    Note that in some cases, the bridge interface may be assigned a different IP address
    than the one previously assigned to the system. Keep this in mind while attempting
    to reconnect via ssh.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are working locally on the host, the two nmcli commands can be run within
    a terminal window without any risk of losing connectivity:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con down "Wired connection 1"
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: nmcli con up br0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the bridge is up and running, the connection list should now include both
    the bridge and the bridge-slave connections:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con show
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NAME UUID TYPE DEVICE
  prefs: []
  type: TYPE_NORMAL
- en: br0 8680c281-6d49-4f76-93b1-902c42514ca5 bridge br0
  prefs: []
  type: TYPE_NORMAL
- en: virbr0 556042d4-2e5d-45fe-9c78-a24259e07265 bridge virbr0
  prefs: []
  type: TYPE_NORMAL
- en: bridge-slave-eno1 e6ba8ead-8fa9-4434-a884-d39225ecda20 ethernet eno1
  prefs: []
  type: TYPE_NORMAL
- en: Wired connection 1 126ab0e8-d4d3-3326-bd5e-1fea169c5635 ethernet --
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the ”Wired connection 1” connection is still listed but is no longer
    active. To exclude inactive connections from the list, use the --active flag when
    requesting the list:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con show --active
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NAME UUID TYPE DEVICE
  prefs: []
  type: TYPE_NORMAL
- en: br0 8680c281-6d49-4f76-93b1-902c42514ca5 bridge br0
  prefs: []
  type: TYPE_NORMAL
- en: virbr0 556042d4-2e5d-45fe-9c78-a24259e07265 bridge virbr0
  prefs: []
  type: TYPE_NORMAL
- en: bridge-slave-eno1 e6ba8ead-8fa9-4434-a884-d39225ecda20 ethernet eno1
  prefs: []
  type: TYPE_NORMAL
- en: 27.3 Declaring the KVM Bridged Network
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, the bridge connection is on the system but is not visible to
    the KVM environment. Running the virsh command should still list the default network
    as being the only available network option:'
  prefs: []
  type: TYPE_NORMAL
- en: virsh net-list --all
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Name State Autostart Persistent
  prefs: []
  type: TYPE_NORMAL
- en: '----------------------------------------------------------'
  prefs: []
  type: TYPE_NORMAL
- en: default active yes yes
  prefs: []
  type: TYPE_NORMAL
- en: Before a virtual machine can use the bridge, it must be declared and added to
    the KVM network configuration. This involves the creation of a definition file
    and, once again, using the virsh command-line tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by creating a definition file for the bridge network named bridge.xml
    that reads as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: <network>
  prefs: []
  type: TYPE_NORMAL
- en: <name>br0</name>
  prefs: []
  type: TYPE_NORMAL
- en: <forward mode="bridge"/>
  prefs: []
  type: TYPE_NORMAL
- en: <bridge name="br0" />
  prefs: []
  type: TYPE_NORMAL
- en: </network>
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, use the file to define the new network:'
  prefs: []
  type: TYPE_NORMAL
- en: virsh net-define ./bridge.xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the network has been defined, start it and, if required, configure it
    to autostart each time the system reboots:'
  prefs: []
  type: TYPE_NORMAL
- en: virsh net-start br0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: virsh net-autostart br0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once again, list the networks to verify that the bridge network is now accessible
    within the KVM environment:'
  prefs: []
  type: TYPE_NORMAL
- en: virsh net-list --all
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Name State Autostart Persistent
  prefs: []
  type: TYPE_NORMAL
- en: '----------------------------------------------------------'
  prefs: []
  type: TYPE_NORMAL
- en: br0 active yes yes
  prefs: []
  type: TYPE_NORMAL
- en: default active yes yes
  prefs: []
  type: TYPE_NORMAL
- en: 27.4 Using a Bridge Network in a Virtual Machine
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a virtual machine that uses the bridge network, use the virt-install
    --network option and specify the br0 bridge name. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: virt-install --name demo_vm_guest --memory 1024 --disk path=/tmp/demo_vm_guest.img,size=10
    --network network=br0 --cdrom /home/demo/ubuntu-23.04-desktop-amd64.iso
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the guest operating system runs, it will appear on the same physical network
    as the host system and will no longer be on the NAT-based virtual network.
  prefs: []
  type: TYPE_NORMAL
- en: 'The bridge may also be selected for virtual machines within the Cockpit interface
    by editing the virtual machine, locating the Network interfaces section, and clicking
    the Edit button as highlighted in [Figure 27-1](KVM_Network_Bridge.xhtml#_idTextAnchor412)
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ubuntu_cockpit_edit_network.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 27-1
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the resulting interface settings dialog, change the Interface type menu
    to Bridge to LAN and set the Source to br0 as shown in [Figure 27-2](KVM_Network_Bridge.xhtml#_idTextAnchor413):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cockpit_kvm_bridge.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 27-2
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, when creating a new virtual machine using the virt-manager tool,
    the bridge will be available within the Network selection menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ubuntu_virt-manager_bridge.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 27-3
  prefs: []
  type: TYPE_NORMAL
- en: 'To modify an existing virtual machine so that it uses the bridge, use the virsh
    edit command. This command loads the XML definition file into an editor where
    changes can be made and saved:'
  prefs: []
  type: TYPE_NORMAL
- en: virsh edit GuestName
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, the file will be loaded into the vi editor. To use a different
    editor, change the $EDITOR environment variable, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: export EDITOR=gedit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To change from the default virtual network, locate the <interface> section
    of the file, which will read as follows for a NAT-based configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: <interface type='network'>
  prefs: []
  type: TYPE_NORMAL
- en: <mac address='<your mac address here>'/>
  prefs: []
  type: TYPE_NORMAL
- en: <source network='default'/>
  prefs: []
  type: TYPE_NORMAL
- en: <model type='virtio'/>
  prefs: []
  type: TYPE_NORMAL
- en: <address type='pci' domain='0x0000' bus='0x01' slot='0x00' function='0x0'/>
  prefs: []
  type: TYPE_NORMAL
- en: </interface>
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, if the virtual machine was using a direct connection, the entry
    may read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: <interface type='direct'>
  prefs: []
  type: TYPE_NORMAL
- en: <mac address='<your mac address here>'/>
  prefs: []
  type: TYPE_NORMAL
- en: <source dev='eno1' mode='vepa'/>
  prefs: []
  type: TYPE_NORMAL
- en: <model type='virtio'/>
  prefs: []
  type: TYPE_NORMAL
- en: <address type='pci' domain='0x0000' bus='0x01' slot='0x00' function='0x0'/>
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the bridge, change the source network property to read as follows before
    saving the file:'
  prefs: []
  type: TYPE_NORMAL
- en: <interface type='network'>
  prefs: []
  type: TYPE_NORMAL
- en: <mac address='<your mac address here>'/>
  prefs: []
  type: TYPE_NORMAL
- en: <source network='br0'/>
  prefs: []
  type: TYPE_NORMAL
- en: <model type='virtio'/>
  prefs: []
  type: TYPE_NORMAL
- en: <address type='pci' domain='0x0000' bus='0x01' slot='0x00' function='0x0'/>
  prefs: []
  type: TYPE_NORMAL
- en: </interface>
  prefs: []
  type: TYPE_NORMAL
- en: If the virtual machine is already running, the change will not take effect until
    it is restarted.
  prefs: []
  type: TYPE_NORMAL
- en: 27.5 Creating a Bridge Network using nm-connection-editor
  prefs: []
  type: TYPE_NORMAL
- en: 'If either local or remote desktop access is available on the host system, much
    of the bridge configuration process can be performed using the nm-connection-editor
    graphical tool. To use this tool, open a Terminal window within the desktop and
    enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: nm-connection-editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When the tool has loaded, the window shown in [Figure 27-4](KVM_Network_Bridge.xhtml#_idTextAnchor415)
    will appear, listing the currently configured network connections (essentially
    the same output as that generated by the nmcli con show command):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ubuntu_nm-connection_editor_home.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 27-4
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new connection, click on the ‘+’ button in the window’s bottom
    left-hand corner. Then, from the resulting dialog ([Figure 27-5](KVM_Network_Bridge.xhtml#_idTextAnchor416)),
    select the Bridge option from the menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ubuntu_new_bridge.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 27-5
  prefs: []
  type: TYPE_NORMAL
- en: 'With the bridge option selected, click the Create button to proceed to the
    bridge configuration screen. Begin by changing both the connection and interface
    name fields to br0 before clicking on the Add button located to the right of the
    Bridge connections list, as highlighted in [Figure 27-6](KVM_Network_Bridge.xhtml#_idTextAnchor417):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ubuntu_edit_bridge.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 27-6
  prefs: []
  type: TYPE_NORMAL
- en: 'From the connection type dialog ([Figure 27-7](KVM_Network_Bridge.xhtml#_idTextAnchor418)),
    change the menu setting to Ethernet before clicking on the Create button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ubuntu_new_ethernet.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 27-7
  prefs: []
  type: TYPE_NORMAL
- en: 'Another dialog will now appear in which the bridge slave connection needs to
    be configured. Within this dialog, select the physical network to which the bridge
    is to connect (for example, eno1) from the Device menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ubuntu_edit_ethernet.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 27-8
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Save button to apply the changes and return to the Editing br0
    dialog (as illustrated in [Figure 27-6](KVM_Network_Bridge.xhtml#_idTextAnchor417)
    above). Within this dialog, click on the Save button to create the bridge. On
    returning to the main window, the new bridge and slave connections should now
    be listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ubuntu_br0_ready.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 27-9
  prefs: []
  type: TYPE_NORMAL
- en: 'All that remains is to bring down the original ”Wired connection 1” connection
    and bring up the br0 connection using the steps outlined in the previous chapter
    (remembering to perform these steps in a shell script if the host is being accessed
    remotely):'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con down "Wired connection 1"
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: nmcli con up br0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It will also be necessary, as it was when creating the bridge using the command-line
    tool, to add this bridge to the KVM network configuration. To do so, repeat the
    steps outlined in the [“Declaring the KVM Bridged Network”](KVM_Network_Bridge.xhtml#_idTextAnchor410)
    section above. Once this step has been taken, the bridge is ready to be used by
    guest virtual machines.
  prefs: []
  type: TYPE_NORMAL
- en: 27.6 Summary
  prefs: []
  type: TYPE_NORMAL
- en: By default, KVM virtual machines are connected to a virtual network that uses
    NAT to provide access to the network to which the host system is connected. If
    the guests are required to appear on the network with their own IP addresses,
    they need to be configured to share the physical network interface of the host
    system. This chapter outlines that this can be achieved using the nmcli or nm-connection-editor
    tools to create a networked bridge interface.
  prefs: []
  type: TYPE_NORMAL
