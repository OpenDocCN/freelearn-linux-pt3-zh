- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security Guidelines and Best Practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the modern world, where almost all computers are connected to the internet
    and online applications play an increasingly larger role in all aspects of our
    lives, information security is also becoming more and more important. When information
    stored in digital form becomes more valuable and malicious actors constantly devise
    new attacks, every system administrator must make a conscious effort to keep their
    machines secure.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, following security guidelines and best practices can prevent most attacks
    and limit the impact of successful attacks if they occur.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Information security components and types of breaches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common types of attacks and threats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attack vectors and security vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ways to keep your system secure and stable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common threats and attack types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many reasons why attackers may target a system, many ways to attack
    targets, and multiple possible consequences for the operator of the compromised
    system. Let’s examine them in detail.
  prefs: []
  type: TYPE_NORMAL
- en: The motivation of attackers and the possible consequences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The picture of an attack on computer systems that movies, literature, and video
    games tend to show is usually an attack on a carefully selected target with a
    specific goal – most often, to steal some valuable information, modify it, or
    perhaps destroy it.
  prefs: []
  type: TYPE_NORMAL
- en: Such attacks certainly exist in the real world and they are a huge concern for
    high-profile companies and government agencies. However, that popular depiction
    often misleads people into believing that security is not important for them because
    they do not have any valuable information and are not high-profile targets.
  prefs: []
  type: TYPE_NORMAL
- en: That perception might have been correct in the early days of the internet but,
    these days, it is a very dangerous assumption. In reality, most attacks are no
    longer targeted and carefully prepared, but rather automated and opportunistic.
    Every machine connected to the internet is constantly probed by automated tools
    that attempt to exploit known security weaknesses.
  prefs: []
  type: TYPE_NORMAL
- en: Worse yet, automated attacks often rely on the availability of compromised third-party
    machines – running automated attack tools on machines that belong to the attackers
    themselves would be expensive and easy to detect and mitigate. To avoid paying
    for hosting and evade detection and blocking, attackers often gain unauthorized
    access to a few machines and use them to facilitate further attacks. A group of
    machines controlled by a malicious entity is often called a **botnet**. Botnets
    are used to probe more machines and take control of them, distribute malware,
    send unsolicited messages (spam), and perform other types of attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, a careless system administrator can become not only a victim of an attack
    but also an unintentional and unknowing accomplice of the attacker. In some cases,
    owners of compromised systems can come under investigation from law enforcement
    agencies and be suspected of conducting the attack because it came from their
    machines. Such cases are rare but even if the owner is not held legally liable,
    there are still many possible consequences of allowing an attacker to control
    your machine: cost of electricity (for on-premises machines or co-location) or
    CPU time on cloud platforms, bandwidth use fees, and system overload that takes
    resources away from legitimate users.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, a machine that was identified as a source of attacks or spam can be
    added to blacklists. Multiple blacklists are maintained by various companies,
    so if your IP address or a domain name ends up in those lists, removing it from
    every list can be a very time-consuming endeavor. Moreover, blacklist maintainers
    are not required to remove your address since they are private companies, and
    blacklist inclusion and removal are not governed by any laws, and they may refuse
    to remove entries of repeat offenders or demand extensive proof that the current
    owner significantly improved its security practices.
  prefs: []
  type: TYPE_NORMAL
- en: Information security properties and attacks on them
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The three components of information security are usually defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Availability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Confidentiality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrity (or authenticity)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information availability means that authorized users can access it when they
    need it. Confidentiality means that users can only access the information they
    are authorized to access. Finally, integrity means that there are no accidental
    or deliberate modifications that are performed or authorized by legitimate users.
  prefs: []
  type: TYPE_NORMAL
- en: Attacks can have different goals – either to compromise information availability
    or to gain control of the target to compromise the confidentiality and authenticity
    of information stored on it. In the modern world, many attackers are also interested
    solely in the resources of the machine and not in any information stored on it.
    Let’s look at these attacks in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Denial of service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An attack on information availability is called a **Denial of Service** (**DoS**)
    attack. On the surface, it may look like the most benign type of attack because
    its effects are usually temporary. However, such attacks still can have severe
    consequences – for example, an online store whose website becomes unavailable
    can experience a significant loss of revenue, while an attack on a phone system
    may leave subscribers unable to make emergency calls and lead to loss of life
    as well. Some DoS attacks are performed simply as acts of vandalism but many such
    attacks are launched to extort money from the target system operator in exchange
    for stopping the attack, harm its reputation by rendering the service unreliable,
    or prevent it from making information available to users (the last goal is especially
    common for politically-motivated attacks).
  prefs: []
  type: TYPE_NORMAL
- en: There are two possible ways to perform a DoS attack. The classic way involves
    exploiting a flaw in the system software to crash it or make it repeatedly perform
    complex operations and thus slow it down. These attacks can be prevented by proper
    software development and configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The other, increasingly more common, type is the **Distributed Denial of Service**
    (**DDoS**) attack. Such attacks use large numbers of machines to saturate the
    network link of the target system or overload it with requests beyond its capacity.
    The attacker can either generate attack traffic from a large botnet or use an
    amplification attack – that is, they can send DNS or NTP requests to public servers
    and specify the address of the attack target as the source address to make them
    send unsolicited reply packets to the target that the target never requested.
    Since replies are typically larger than requests, an amplification attack can
    save the attacker considerable bandwidth and computational resources by involving
    well-intentioned third parties in the attack.
  prefs: []
  type: TYPE_NORMAL
- en: The worst part of a DDoS attack is that if an attacker generates enough traffic
    to saturate the network link of the target, there is nothing the administrator
    of the target machine itself can do to mitigate it – if the attack traffic has
    reached the target, its damage is already done. Such attacks can only be mitigated
    by the hosting or internet service provider, or a dedicated DDoS protection service
    that filters out malicious packets and forwards legitimate requests to the target
    machine. However, DDoS attacks are always targeted and never opportunistic since
    they require sending traffic from multiple machines to a single designated target,
    and most systems never become DDoS attack targets.
  prefs: []
  type: TYPE_NORMAL
- en: Credential theft and brute-force attacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Taking full control of a target machine is one of the most attractive goals
    for any attacker because it allows them to easily compromise the integrity and
    confidentiality of any information stored on it and use the machine itself for
    their purposes.
  prefs: []
  type: TYPE_NORMAL
- en: The cleanest way to gain access is to impersonate a legitimate user. If attackers
    somehow gain possession of a password, a cryptographic key, or an API key used
    for authentication, their use of the system will look indistinguishable from normal
    access.
  prefs: []
  type: TYPE_NORMAL
- en: Even credentials for access to small servers can be valuable in the modern world
    if the attacker can steal enough of them – one of the most common attacker actions
    after gaining access is to run cryptocurrency mining software on the compromised
    machine and thus directly convert its CPU and GPU power into money. Stealing credentials
    for access to cloud platforms, email services, or **Voice over Internet Protocol**
    (**VoIP**) is even more lucrative because attackers can use them to spawn new
    virtual machines, send spam, or make international calls – some even go as far
    as selling such illegally acquired resources to third parties who are unaware
    of their origin. The cost of those services, of course, has to be paid by the
    lawful owner of those credentials.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of malware is programmed to steal passwords and keys from end user computers.
    This method is ideal for attackers because it leaves no traces on the target machines
    that they access using those stolen credentials.
  prefs: []
  type: TYPE_NORMAL
- en: However, many other attacks exploit the fact that end users often use weak passwords
    that are easy to guess. This is the basis for brute-force attacks, which are conducted
    by attempting to log in repeatedly with different passwords from a password dictionary
    that contains common words, commonly used passphrases, and often passwords stolen
    from other machines in the hope that someone used them for more than one machine
    or service (which is often the case).
  prefs: []
  type: TYPE_NORMAL
- en: Brute-force attacks can be made significantly harder to execute by using strong
    passwords, encrypted keys, and setting up rate limiting to give the attacker fewer
    chances to log in and guess the password.
  prefs: []
  type: TYPE_NORMAL
- en: Attacks using configuration and software vulnerabilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, in some cases, attackers can perform actions that logically must be
    denied to them by exploiting flaws in the system itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two classes of such flaws: configuration issues and software vulnerabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: For an example of a configuration flaw, consider that the standard protocol
    for email submission – **Simple Mail Transport Protocol** (**SMTP**) – does not
    require mandatory authentication. For this reason, every SMTP server implementation
    can be configured to allow anyone to send mail through it and act as an open relay.
    If a server with such a configuration is exposed to the public internet, attackers
    can use it to send large amounts of spam through it simply because it does not
    check whether the sender is a legitimate user of the system or not.
  prefs: []
  type: TYPE_NORMAL
- en: In other cases, the flaw is in the software itself. For a contrived example,
    suppose a web application implements user authentication and correctly redirects
    users to their account pages upon login – say, a user with a login name of `bob`
    gets redirected from `https://example.com/login` to `https://example.com/users/bob`
    when they enter their login and password. However, due to a programming mistake,
    the application never checks the user account when someone tries to access an
    account page, so anyone who knows that there is a user named `bob` in that system
    can access their account page simply by typing `https://example.com/users/bob`
    in the address bar.
  prefs: []
  type: TYPE_NORMAL
- en: This example may sound egregious but it is not very far from vulnerabilities
    sometimes found in real software, even if their exploitation method might be more
    complex than typing a URL into the address bar.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, most vulnerabilities are not as dangerous. When security researchers
    publish their findings and when software maintainers release fixes for discovered
    vulnerabilities, they use a set of terms for vulnerability types and severity
    levels that you should be familiar with to estimate how important a fix is.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability reports are published by individual researchers and software vendors
    and also aggregated in databases such as the National Vulnerability Database,
    which is maintained by the United States **National Institute of Standards and
    Technology** (**NIST**). Every known vulnerability in those databases is assigned
    a unique identifier such as CVE-2023-28531 ([https://nvd.nist.gov/vuln/detail/CVE-2023-28531](https://nvd.nist.gov/vuln/detail/CVE-2023-28531)),
    where **CVE** stands for **Common Vulnerabilities** **and Exposures**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The usual set of severity levels is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Critical**: Usually, this allows any attacker who can connect to the system
    to gain complete control of it. Vulnerable systems should be patched immediately
    or, if a patch is not available yet, isolated to make them inaccessible to attackers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High and medium**: These may allow the attacker to significantly compromise
    the system but require special circumstances (for example, certain features enabled
    in the system) or difficult exploitation procedures. Affected systems should always
    be patched as soon as possible and may need temporary mitigation methods if a
    patch is not available (such as disabling the affected feature).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Low**: This does not give significant advantages to attackers as exploitation
    is only possible under rare circumstances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Databases assign these levels based on multiple factors such as risk level,
    the skill required of an attacker to exploit the vulnerability, the impact, and
    more. For details, you may want to read about the Common Vulnerability Scoring
    System used by NIST or the OWASP Risk Rating Methodology.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some common vulnerability types:'
  prefs: []
  type: TYPE_NORMAL
- en: Arbitrary code execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privilege escalation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Denial of service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Arbitrary code execution** attacks tend to be the most dangerous because
    they allow attackers to introduce new program logic to the target system rather
    than merely use or abuse the software already running on it. However, there can
    be many mitigating factors. A vulnerability that allows remote unauthenticated
    attackers to execute arbitrary code by sending a specially crafted request to
    the target system over the network is the worst threat of all and may warrant
    taking the affected systems offline completely until they can be patched. However,
    if the user must be authenticated to execute the attack, it limits its impact
    greatly – to get to the arbitrary code execution stage, the attacker needs to
    steal valid user credentials first. Moreover, executing arbitrary code from a
    process that is running with highly restricted privileges and does not have access
    to any sensitive information may not benefit the attacker much.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Privilege escalation** attacks allow legitimate users to perform actions
    that are not supposed to be available to them. Their impact can be severe – for
    example, if a vulnerability allows any authenticated user to read every file on
    the system regardless of its permissions, any machine where non-administrator
    users are allowed to log in is at risk of privacy breaches. However, before attackers
    outside of your organization can take advantage of it, they first need to find
    a way to log in. For systems where only administrators are allowed, such a vulnerability
    is not a concern at all, unless it is present at the same time with a remote arbitrary
    code execution vulnerability or credential theft.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, **denial of service** vulnerabilities merely allow the attacker to
    compromise the availability of the system, as we already discussed.
  prefs: []
  type: TYPE_NORMAL
- en: With this in mind, let’s discuss how to protect your system from those types
    of attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping your system secure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common joke in information security circles is that the only perfectly secure
    system is one that is powered off. Such a system is only secure in the sense of
    integrity and confidentiality, of course – at the cost of availability. Any realistic
    scenario is always a compromise and there is always a risk; the system administrator’s
    goal is to prevent known attacks and reduce the impact of unknown ones, and every
    administrator must always be ready to respond to new threats and mitigate them.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, following simple guidelines can considerably reduce the risk – let’s
    discuss the general strategies and tactics to prevent specific attack types.
  prefs: []
  type: TYPE_NORMAL
- en: Reducing the attack surface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A system’s attack surface is, roughly speaking, the set of all ways to access
    it. For example, a machine that is running a web server and also a mail server
    has a larger attack surface than a system that only runs one of those. If we assume
    that vulnerabilities and configuration issues are equally probable in those services
    and can arise independently, then a system running both is twice as likely to
    be vulnerable.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, many real systems need to provide both services – for example, an
    email provider needs mail servers and a website for customers. Reducing the attack
    surface is not about running fewer services, but rather about isolating services
    from one another and, ideally, from attackers.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a typical web application stack involves application servers and
    database servers. Most of the time, there is no reason for database servers to
    be publicly accessible – it is always a good idea to restrict access to them to
    the internal network. Moreover, application servers do not need to be *directly*
    publicly accessible either – as we discussed in [*Chapter 13*](B18575_13.xhtml#_idTextAnchor216),
    *High Availability*, they can be kept behind a load balancer. Not only will a
    load balancer improve the system’s availability but it will also reduce the attack
    surfaces that are available to attackers from the public internet. Additionally,
    it can provide rate limiting and a threat detection system and shield application
    servers from at least some attack traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Compartmentalization and privilege separation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A long time ago, the only way to isolate different components of a system from
    one another was to run them on different physical machines. This approach is very
    expensive and is only practiced when there are also significant reasons to do
    so – for example, applications designed to handle high loads have to use separate
    databases and application servers simply to meet their performance requirements,
    rather than solely to reduce the attack surface of the system.
  prefs: []
  type: TYPE_NORMAL
- en: However, in the last two decades, there have been many more granular methods
    to isolate processes, even on commodity hardware. Virtualization allows you to
    run multiple instances of operating systems on a single physical machine, and
    modern virtual machine managers make it easy to spawn them – not to mention cloud
    platforms that allow VMs to be spawned with your operating system of choice with
    a single click or API call.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from full virtualization, there are many ways to isolate applications
    on a single machine from one another. Those include `chroot` environments, containers,
    and mandatory access control systems.
  prefs: []
  type: TYPE_NORMAL
- en: Using chroot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The oldest way to completely separate processes is `chroot`. Technically, `chroot`
    (change root) is a system call in the kernel that changes the root directory for
    a process. A process whose root directory was changed no longer has access to
    any files outside of it – to that process, it looks as if its directory is all
    that exists in the system. Setting up a `chroot` environment for a process by
    hand may be a time-consuming task, so many distributions provide special packages
    to simplify the process.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, Fedora provides an easy way to run ISC BIND (also known as `named`),
    a popular DNS server, in `chroot`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the directory that will serve as a limited root for the BIND
    process mimics the real root in that it also has `/dev` and `/proc` hierarchies
    – global versions of those directories become unavailable to the process.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, even if attackers manage to inject malicious code into the BIND process
    using a remote code execution vulnerability, they will be unable to read any files
    outside `/var/named/chroot`. However, they will still be free to interact with
    other processes on the system. If deeper isolation is required, you can use containers
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: Using containers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Linux kernel provides a container technology named **LXC**. It consists
    of multiple sub-components such as process groups, control groups, and network
    namespaces. Creating container environments and launching them by hand is a laborious
    process, so people created tools that automated the process, as well as registries
    of ready-to-use container images.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this time, the most popular tool for managing containers on Linux is Docker,
    although there are alternatives to it, such as Podman. We will demonstrate process
    isolation by launching a Fedora image using Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, when we start a `bash` shell process in a container, from inside
    the container, it looks as if it is the only process in the system. None of the
    processes of the host system, such as systemd or the Docker daemon process, are
    visible and processes inside the container cannot interact with them in any way.
  prefs: []
  type: TYPE_NORMAL
- en: Using mandatory access control
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, there are ways to grant users and processes different capabilities
    – ideally, only the capabilities they need to function. Such mechanisms are known
    as **Mandatory Access Control** (**MAC**) systems – as opposed to the classic
    **Discretionary Access Control** – that is, the Unix file permission system.
  prefs: []
  type: TYPE_NORMAL
- en: The most popular MAC system for Linux these days is **Security Enhanced Linux**
    (**SELinux**), although there are less common alternatives as well – most notably,
    the AppArmor kernel module.
  prefs: []
  type: TYPE_NORMAL
- en: These days, many Linux distributions enable SELinux by default and include capabilities
    and object contexts for popular services.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check whether SELinux is enabled on your system with the `getenforce`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In `Enforcing` mode, SELinux disallows actions not permitted by capabilities
    granted to a user or a process – for example, a process without the `can_network_connect`
    capability will not be able to initiate any network connections. In `Permissive`
    mode, SELinux will generate alerts in the system log but not enforce capabilities
    – this mode is ideal for testing. Finally, if the mode is `Disabled`, SELinux
    does not perform any capability checks at all.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring SELinux policies is a subject far beyond the scope of an introductory
    book. However, if you choose to keep SELinux enabled, you will often need to know
    how to grant processes access to files.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in the Apache HTTPd configuration files, it is possible to specify
    any directory as a website root. That is also a possible security problem if an
    attacker gains control of the Apache process. That is why, in Fedora, the maintainers
    of that package introduced a set of special SELinux contexts for files that must
    be accessible to the web server.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can view the SELinux contexts of a file by adding the `-Z` option to the
    `ls` command. For example, the `/var/lib/httpd` directory has the `httpd_var_lib_t`
    context, which grants read access:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Website directories that may be writable use a different context – `httpd_sys_content_t`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you set a website root to a newly created directory elsewhere, the Apache
    process will not have access to it because it lacks the required context, even
    if it should be readable to it according to Unix permissions. You can grant it
    access using the `chcon` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: There are many more possibilities for creating flexible and fine-grained security
    policies with SELinux, but beginners should certainly start by using the distribution
    defaults first.
  prefs: []
  type: TYPE_NORMAL
- en: Preventing credential theft and brute-force attacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Credential theft must be addressed at user workstations. There is no definitive
    way to prevent credential theft, so you should strive to protect your laptop or
    desktop system from attacks in general – keep it up to date, protect it from malware,
    and avoid falling for social engineering attacks such as phishing letters that
    contain malicious links.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to brute-force attacks, there are two complementary approaches
    – keeping passwords hard to guess and limiting authentication attempts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most Linux distributions have a PAM module named `pam_pwquality.so` enabled
    by default, which prevents unprivileged users from using insecure passwords. You
    can verify this by trying to set your password to something way too short or a
    simple dictionary word:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The backend that it uses for password strength checking is called `cracklib`.
    It normally keeps its data in `/usr/share/cracklib`. Its dictionary is in a binary
    format but it offers tools for manipulating those dictionary files and checking
    password strength without actually trying to set a password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note that the root user is exempt from password quality checking and is free
    to set any password for any user.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also a tool for generating secure random passwords named **pwgen**
    that is present in the package repositories of most Linux distributions. It allows
    you to specify whether passwords should be completely random, what characters
    they should contain, how long they should be, and how many passwords to generate
    at once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Rate limiting is a broad subject and its setup varies between services and applications.
    However, there are also general integrated solutions that support multiple services,
    such as **fail2ban**.
  prefs: []
  type: TYPE_NORMAL
- en: Reducing the risk of software vulnerabilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The best way to ensure that your system does not have vulnerable software in
    it is to use software from your distribution repositories and install updates
    on time. Installing packages by hand should be avoided because such packages will
    not automatically receive updates from the distribution maintainers. If they are
    required, you should make sure you subscribe to their release announcements and
    check for updates yourself.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of the time, vulnerabilities are found in already released software versions
    rather than during development – this situation is called a **zero-day vulnerability**
    (often shortened to **0day**). Sometimes, they turn out to have existed for months
    or even years before their discovery. Updated packages that fix such vulnerabilities
    may appear later than malicious actors start exploiting them. In that case, software
    maintainers often suggest a temporary mitigation strategy that may involve changing
    configuration options, disabling specific features, or making other changes in
    the system to make the attack harder to execute. For this reason, it is also a
    good idea to follow the blogs or mailing lists or the distribution and software
    projects that you use often.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about various types of attacks on computer systems,
    attackers’ motivation to execute them, and possible consequences for users.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned about common strategies for keeping your systems protected from
    attacks. However, we only scratched the surface – information security is a large
    field, and keeping your knowledge of it up to date and your systems safe is a
    life-long pursuit for every system administrator.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NIST vulnerability database: [https://nvd.nist.gov/](https://nvd.nist.gov/%0D)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Common Vulnerability Scoring System: [https://nvd.nist.gov/vuln-metrics/cvss](https://nvd.nist.gov/vuln-metrics/cvss%0D)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OWASP Risk Rating Methodology: [https://owasp.org/www-community/OWASP_Risk_Rating_Methodology](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology%0D)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fail2Ban rate limiting daemon: [https://www.fail2ban.org](https://www.fail2ban.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
