- en: 25\. An Introduction to Linux Containers
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 25. Linux 容器简介
- en: The preceding chapters covered the concept of virtualization with a particular
    emphasis on creating and managing virtual machines using KVM. This chapter will
    introduce a related technology in the form of Linux Containers. While there are
    some similarities between virtual machines and containers, there are also some
    key differences that will be outlined in this chapter along with an introduction
    to the concepts and advantages of Linux Containers. The chapter will also provide
    an overview of some of the CentOS 8 container management tools. Once the basics
    of containers have been covered in this chapter, the next chapter will work through
    some practical examples of creating and running containers on CentOS 8.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 前几章介绍了虚拟化的概念，特别强调了使用 KVM 创建和管理虚拟机。本章将介绍与之相关的技术——Linux 容器。尽管虚拟机和容器之间有一些相似之处，但也有一些关键区别，本章将概述这些区别，并介绍
    Linux 容器的概念和优势。本章还将提供一些 CentOS 8 容器管理工具的概览。在本章介绍完容器的基本知识后，下一章将通过一些实际示例讲解如何在 CentOS
    8 上创建和运行容器。
- en: 25.1 Linux Containers and Kernel Sharing
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 25.1 Linux 容器和内核共享
- en: In simple terms, Linux containers can be thought of as a lightweight alternative
    to virtualization. In a virtualized environment, a virtual machine is created
    that contains and runs the entire guest operating system. The virtual machine,
    in turn, runs on top of an environment such as a hypervisor that manages access
    to the physical resources of the host system.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，Linux 容器可以被看作是虚拟化的一种轻量级替代方案。在虚拟化环境中，会创建一个虚拟机，虚拟机中包含并运行整个来宾操作系统。虚拟机又运行在像是虚拟机管理程序（hypervisor）之类的环境上，管理对宿主系统物理资源的访问。
- en: Containers work by using a concept referred to as kernel sharing which takes
    advantage of the architectural design of Linux and UNIX-based operating systems.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 容器通过使用一个被称为内核共享的概念来工作，这一概念利用了 Linux 和 UNIX 基础操作系统的架构设计。
- en: In order to understand how kernel sharing and containers work it helps to first
    understand the two main components of Linux or UNIX operating systems. At the
    core of the operating system is the kernel. The kernel, in simple terms, handles
    all the interactions between the operating system and the physical hardware. The
    second key component is the root file system which contains all the libraries,
    files and utilities necessary for the operating system to function. Taking advantage
    of this structure, containers each have their own root file system but share the
    kernel of the host operating system. This structure is illustrated in the architectural
    diagram in [Figure 25-1](../Text/Containers_Overview.xhtml#_idTextAnchor310) below.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解内核共享和容器是如何工作的，首先需要理解 Linux 或 UNIX 操作系统的两个主要组件。在操作系统的核心部分是内核。简单来说，内核处理操作系统与物理硬件之间的所有交互。第二个关键组件是根文件系统，它包含操作系统正常运行所需的所有库、文件和工具。利用这一结构，容器每个都有自己的根文件系统，但共享宿主操作系统的内核。这个结构在下图中的[图
    25-1](../Text/Containers_Overview.xhtml#_idTextAnchor310)架构图中有所展示。
- en: This type of resource sharing is made possible by the ability of the kernel
    to dynamically change the current root file system (a concept known as change
    root or chroot) to a different root file system without having to reboot the entire
    system. Linux containers are essentially an extension of this capability combined
    with a container runtime, the responsibility of which is to provide an interface
    for executing and managing the containers on the host system. A number of container
    runtimes are available including Docker, lxd, containerd and CRI-O. Earlier versions
    of CentOS used Docker by default but this has been supplanted by Podman as the
    default in CentOS 8.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这种资源共享得以实现，是因为内核能够动态地将当前的根文件系统（这一概念被称为 change root 或 chroot）更改为不同的根文件系统，而不需要重启整个系统。Linux
    容器本质上是这种能力的扩展，并结合了容器运行时，后者的职责是为在宿主系统上执行和管理容器提供接口。现有多个容器运行时可供选择，包括 Docker、lxd、containerd
    和 CRI-O。早期版本的 CentOS 默认使用 Docker，但在 CentOS 8 中，Docker 已被 Podman 替代，成为默认选项。
- en: '![](img/linux_container_diagram.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](img/linux_container_diagram.png)'
- en: Figure 25-1
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图 25-1
- en: 25.2 Container Uses and Advantages
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 25.2 容器的用途与优势
- en: The main advantage of containers is that they require considerably less resource
    overhead than virtualization allowing many container instances to be run simultaneously
    on a single server, and can be started and stopped rapidly and efficiently in
    response to demand levels. Containers run natively on the host system providing
    a level of performance that cannot be matched by a virtual machine.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 容器的主要优势在于，它们比虚拟化占用的资源开销要少得多，因此可以在单台服务器上同时运行多个容器实例，并且可以快速高效地根据需求的变化启动和停止容器。容器原生运行在主机系统上，提供了虚拟机无法比拟的性能水平。
- en: Containers are also extremely portable and can be migrated between systems quickly
    and easily. When combined with a container management system such as Docker, OpenShift
    and Kubernetes, it is possible to deploy and manage containers on a vast scale
    spanning multiple servers and cloud platforms, potentially running thousands of
    containers.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 容器还具有极高的可移植性，可以在系统之间快速轻松地迁移。当与容器管理系统（如 Docker、OpenShift 和 Kubernetes）结合使用时，可以在多个服务器和云平台之间大规模部署和管理容器，潜在地运行数千个容器。
- en: Containers are frequently used to create lightweight execution environments
    for applications. In this scenario, each container provides an isolated environment
    containing the application together with all of the runtime and supporting files
    required by that application to run. The container can then be deployed to any
    other compatible host system that supports container execution and run without
    any concerns that the target system may not have the necessary runtime configuration
    for the application - all of the application’s dependencies are already in the
    container.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 容器常用于为应用程序创建轻量级的执行环境。在这种情况下，每个容器提供一个隔离的环境，其中包含应用程序以及应用程序运行所需的所有运行时和支持文件。容器可以部署到任何支持容器执行的兼容主机系统上，并且无需担心目标系统是否具有应用程序所需的运行时配置——应用程序的所有依赖项都已包含在容器中。
- en: Containers are also useful when bridging the gap between development and production
    environments. By performing development and QA work in containers, those containers
    can then be passed to production and launched safe in the knowledge that the applications
    are running in the same container environments in which they were developed and
    tested.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 容器还在弥合开发环境和生产环境之间的差距时发挥作用。通过在容器中进行开发和质量保证工作，这些容器随后可以传递到生产环境中，并且可以放心地启动，因为应用程序在与开发和测试过程中相同的容器环境中运行。
- en: Containers also promote a modular approach to deploying large and complex solutions.
    Instead of developing applications as single monolithic entities, containers can
    be used to design applications as groups of interacting modules, each running
    in a separate container.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 容器还促进了以模块化方式部署大型复杂解决方案的方式。容器可以被用来将应用程序设计为一组相互作用的模块，而不是作为单一的庞大实体，每个模块都运行在一个独立的容器中。
- en: One possible drawback of containers is the fact that the guest operating systems
    must be compatible with the version of the kernel which is being shared. It is
    not, for example, possible to run Microsoft Windows in a container on a Linux
    system. Nor is it possible for a Linux guest system designed for the 2.6 version
    of the kernel to share a 2.4 version kernel. These requirements are not, however,
    what containers were designed for. Rather than being seen as limitations, therefore,
    these restrictions should be viewed as some of the key advantages of containers
    in terms of providing a simple, scalable and reliable deployment platform.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 容器的一个潜在缺点是，客户操作系统必须与共享的内核版本兼容。例如，无法在 Linux 系统上的容器中运行 Microsoft Windows。也不能让设计为
    2.6 版本内核的 Linux 客户系统共享 2.4 版本内核。然而，这些要求并不是容器设计的初衷。因此，这些限制不应被视为局限性，而应当看作是容器在提供简单、可扩展和可靠的部署平台方面的一些关键优势。
- en: 25.3 CentOS 8 Container Tools
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 25.3 CentOS 8 容器工具
- en: 'CentOS 8 provides a number of tools for creating, inspecting and managing containers.
    The main tools are as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: CentOS 8 提供了多种用于创建、检查和管理容器的工具。主要工具如下：
- en: •buildah – A command-line tool for building container images.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: •buildah – 一款用于构建容器镜像的命令行工具。
- en: •podman – A command-line based container runtime and management tool. Performs
    tasks such as downloading container images from remote registries and inspecting,
    starting and stopping images.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: •podman – 一款基于命令行的容器运行时和管理工具。执行从远程注册表下载容器镜像、检查、启动和停止镜像等任务。
- en: •skopeo – A command-line utility used to convert container images, copy images
    between registries and inspect images stored in registries without the need to
    download them.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: •skopeo – 一个命令行工具，用于转换容器镜像、在注册表之间复制镜像以及检查存储在注册表中的镜像，无需下载它们。
- en: •runc – A lightweight container runtime for launching and running containers
    from the command-line.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: •runc – 一个轻量级的容器运行时，用于从命令行启动和运行容器。
- en: •OpenShift – An enterprise level container application management platform consisting
    of command-line and web-based tools.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: •OpenShift – 一个企业级容器应用管理平台，包含命令行工具和基于 Web 的工具。
- en: All of the above tools are compliant with the Open Container Initiative (OCI),
    a set of specifications designed to ensure that containers conform to the same
    standards between competing tools and platforms.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 上述所有工具都符合开放容器倡议（Open Container Initiative，OCI），该倡议是一组规范，旨在确保容器在不同的工具和平台之间遵循相同的标准。
- en: 25.4 The Docker Registry
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 25.4 Docker 注册表
- en: 'Although CentOS is provided with a set of tools designed to be used in place
    of those provided by Docker, those tools still need access to CentOS images for
    use when building containers. For this purpose, the CentOS project maintains a
    set of CentOS container images within the Docker Hub. The Docker Hub is an online
    container registry made of multiple repositories, each containing a wide range
    of container images available for download when building containers. The images
    within a repository are each assigned a repository tag (for example, centos8,
    centos7.7, latest etc) which can be referenced when performing an image download.
    The following, for example, is the URL of the centos8 image contained within the
    Docker Hub:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 CentOS 提供了一组旨在替代 Docker 提供的工具，这些工具仍然需要访问 CentOS 镜像，以便在构建容器时使用。为此，CentOS 项目在
    Docker Hub 中维护了一组 CentOS 容器镜像。Docker Hub 是一个在线容器注册表，由多个仓库组成，每个仓库包含一系列可用于构建容器时下载的容器镜像。仓库中的每个镜像都分配了一个仓库标签（例如，centos8、centos7.7、latest
    等），该标签可以在执行镜像下载时引用。例如，以下是 Docker Hub 中 centos8 镜像的 URL：
- en: docker://docker.io/library/centos:centos8
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: docker://docker.io/library/centos:centos8
- en: In addition to downloading (referred to as “pulling” in container terminology)
    container images from Docker and other third party hosts registries, you can also
    use registries to store your own images. This can be achieved either by hosting
    your own registry, or by making use of existing services such as those provided
    by Docker, Amazon AWS, Google Cloud, Microsoft Azure and IBM Cloud to name a few
    of the many options.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除了从 Docker 和其他第三方主机注册表下载（在容器术语中称为“拉取”）容器镜像外，你还可以使用注册表存储自己的镜像。这可以通过托管自己的注册表，或利用
    Docker、Amazon AWS、Google Cloud、Microsoft Azure 和 IBM Cloud 等现有服务来实现，以上仅列举了众多选项中的一些。
- en: 25.5 Container Networking
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 25.5 容器网络
- en: By default, containers are connected to a network using a Container Networking
    Interface (CNI) bridged network stack. In the bridged configuration, all the containers
    running on a server belong to the same subnet (10.88.0.0/16 by default) and, as
    such, are able to communicate with each other. The containers are also connected
    to the external network by bridging the host system’s network connection. Similarly,
    the host is able to access the containers via a virtual network interface (usually
    named cni0) which will have been created as part of the container tool installation.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，容器通过容器网络接口（Container Networking Interface，CNI）桥接网络堆栈连接到网络。在桥接配置中，服务器上运行的所有容器都属于同一子网（默认为
    10.88.0.0/16），因此，它们能够相互通信。容器还通过桥接宿主系统的网络连接与外部网络连接。同样，宿主机也可以通过虚拟网络接口（通常命名为 cni0）访问容器，该接口会在容器工具安装时创建。
- en: 25.6 Summary
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 25.6 总结
- en: Linux Containers offer a lightweight alternative to virtualization and take
    advantage of the structure of the Linux and Unix operating systems. Linux Containers
    essentially share the kernel of the host operating system, with each container
    having its own root file system containing the files, libraries and applications.
    Containers are highly efficient and scalable and provide an ideal platform for
    building and deploying modular enterprise level solutions. A number of tools and
    platforms are available for building, deploying and managing containers including
    third-party solutions and those provided with CentOS.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 容器提供了一种轻量级的虚拟化替代方案，并充分利用了 Linux 和 Unix 操作系统的结构。Linux 容器本质上共享宿主操作系统的内核，每个容器都有自己的根文件系统，包含文件、库和应用程序。容器具有高效性和可扩展性，是构建和部署模块化企业级解决方案的理想平台。现在有许多工具和平台可用于构建、部署和管理容器，包括第三方解决方案和
    CentOS 提供的工具。
