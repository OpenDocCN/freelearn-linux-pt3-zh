- en: '*Chapter 1*: Understanding the Need for systemd'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 1 章*：理解 systemd 的需求'
- en: 'In this first chapter, we''ll first briefly look at the history of Linux `init`
    systems. We''ll then look at the shortcomings of the legacy `init` systems and
    why certain Linux engineers felt the need to develop a new type of `init` system.
    Finally, we''ll look at the controversy that has surrounded `systemd`. For easy
    reference, here''s a list of the topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先简要回顾一下 Linux `init` 系统的历史。然后，我们将讨论传统 `init` 系统的不足之处，以及为什么某些 Linux
    工程师觉得有必要开发一种新型的 `init` 系统。最后，我们将讨论围绕 `systemd` 的争议。为了方便参考，以下是本章的主题列表：
- en: The history of Linux `init` systems
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux `init` 系统的历史
- en: The shortcomings of SysV `init` and upstart
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SysV `init` 和 upstart 的不足之处
- en: The advantages of `systemd`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`systemd` 的优点'
- en: The `systemd` controversy
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`systemd` 的争议'
- en: So, with the introductory comments out of the way, let's jump in.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，介绍性内容就到这里，我们进入正题。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, all you need is a Linux virtual machine that runs `systemd`.
    As you read through this chapter, you might want to look at some of the files
    on the virtual machine.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，你只需要一台运行 `systemd` 的 Linux 虚拟机。在阅读本章时，你可能想查看一下虚拟机上的一些文件。
- en: The history of Linux init systems
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux `init` 系统的历史
- en: So, what is an `init` system? Well, `init` is short for *initialization*. An
    `init` system, then, initializes the operating system upon bootup. After the bootup
    has completed, the `init` system will continue working, managing system processes
    and services. Each system process is assigned a process ID number, or *PID*. The
    `init` process is always PID 1, and every other process that gets started on the
    system is either a child or a grandchild of the `init` process.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么是 `init` 系统呢？`init` 是 *初始化*（initialization）的缩写。因此，`init` 系统就是在系统启动时初始化操作系统的系统。启动完成后，`init`
    系统会继续工作，管理系统的进程和服务。每个系统进程都会被分配一个进程 ID（PID）。`init` 进程的 PID 总是 1，所有其他在系统上启动的进程都是
    `init` 进程的子进程或孙进程。
- en: For many years, the `init` system for Linux-based operating systems (SysV is
    short for *System 5*. The *V* is the Roman numeral for 5). SysV `init` was originally
    developed by Bell Labs engineers for the Unix operating system, all the way back
    in the early 1970s. (At that time, I was a young pup in junior high school, and
    I still had a full head of hair.)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，Linux 基础操作系统的 `init` 系统一直是 SysV（*System 5* 的简称，其中 *V* 是罗马数字 5）。SysV `init`
    最初是由贝尔实验室的工程师为 Unix 操作系统开发的，最早可以追溯到 1970 年代初期。（那时，我还是初中的小伙子，头发也还是满头茂盛。）
- en: Note
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There are actually a few more Linux `init` systems besides the ones that I'm
    mentioning here. But these were the most commonly used ones in the pre-`systemd`
    days.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 其实，除了我在这里提到的几种 Linux `init` 系统外，还有一些其他的系统。但这些是在 `systemd` 时代之前最常用的。
- en: SysV `init` worked well in its day, but it was never perfect. Nowadays, with
    new high-performance hardware, SysV `init` has shown both its age and its deficiencies.
    The first attempt to come up with something better occurred in July 2009, when
    Ubuntu engineers released the first version of the `init` system. Although it
    was better than SysV, it still had its share of problems, especially the early
    versions which were quite buggy.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: SysV `init` 在其时代运行得很好，但它从未是完美的。如今，随着新一代高性能硬件的出现，SysV `init` 显示出了它的年代感和不足之处。首次尝试提出更好的方案是在
    2009 年 7 月，当时 Ubuntu 工程师发布了第一个版本的 `init` 系统。尽管它比 SysV 更好，但仍然存在一些问题，尤其是早期版本有不少
    BUG。
- en: The shortcomings of SysV Init and upstart
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SysV Init 和 upstart 的不足之处
- en: The first problem with SysV is that of its rather lengthy boot-up times. When
    you boot up a SysV machine, all of its services have to start up in sequential
    order. That might not be so bad on a normal desktop machine, but it can be a bit
    problematic on a server that needs to run lots of services. In that case, each
    service would have to wait its turn to start, which could take a while.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: SysV 的第一个问题是启动时间相对较长。当你启动一个 SysV 系统时，所有服务都必须按顺序启动。对于普通的桌面机器来说，这可能不算什么大问题，但对于需要运行多个服务的服务器来说，这就可能会成为一个问题。在这种情况下，每个服务都必须等着自己的轮次启动，这可能会耗费不少时间。
- en: 'The next problem with SysV is its complexity. Instead of simple, easy-to-understand
    configuration files, SysV does everything with complex Bash shell scripts. The
    `init` scripts that control system services all have to be assigned a priority
    number, so that services will start and stop in the proper order. Take, for example,
    the `init` script that starts the Apache web server on a CentOS 5 machine. First,
    we can see that it''s a fairly lengthy script, as shown here:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: SysV 的下一个问题是它的复杂性。SysV 并不是通过简单易懂的配置文件来完成一切，而是通过复杂的 Bash shell 脚本来实现。控制系统服务的
    `init` 脚本必须为每个服务分配一个优先级数字，以确保服务按正确的顺序启动和停止。以在 CentOS 5 机器上启动 Apache Web 服务器的 `init`
    脚本为例。首先，我们可以看到它是一个相当长的脚本，如下所示：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can see from the `wc -l` output that it consists of 131 lines. As you can
    see here, 37 of those lines are comments, which still leaves us with 94 lines
    of actual code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从 `wc -l` 输出中看到，它由 131 行组成。如你所见，其中 37 行是注释，这仍然剩下 94 行实际的代码：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Look inside, and you''ll see that it''s quite complex and convoluted. Here''s
    just the first part of it:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 打开来看，你会发现它非常复杂且繁琐。这只是它的第一部分：
- en: '![](img/Figure_1.1_B17491.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_1.1_B17491.jpg)'
- en: Figure 1.1 – An old-fashioned SysV Init script
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 一个老式的 SysV Init 脚本
- en: 'Toward the end of the script, you''ll see the code that stops, starts, restarts,
    and reloads the Apache daemon, as shown here:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的结尾部分，你会看到控制 Apache 守护进程停止、启动、重启和重载的代码，如下所示：
- en: '![](img/Figure_1.2_B17491.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_1.2_B17491.jpg)'
- en: Figure 1.2 – The start, stop, restart, reload section of an init script
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – `init` 脚本的启动、停止、重启、重载部分
- en: This code, or code similar to this, has to be in every `init` script so that
    the human user can control the daemon. To complicate things even more, developers
    didn't always write this code consistently for different programs. So, for example,
    a status display for one daemon didn't always look the same as the status display
    for another daemon.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码，或类似的代码，必须出现在每个 `init` 脚本中，以便人类用户能够控制守护进程。更复杂的是，开发者并不总是为不同的程序编写一致的代码。例如，一个守护进程的状态显示并不总是和另一个守护进程的状态显示相同。
- en: Then, there's the problem of inconsistent implementation across the different
    families of Linux distros. With SysV, there were at least three different methods
    of implementation. Red Hat-type distros used one method, Debian-type distros used
    another method, and Slackware-type distros use yet another. For example, the Red
    Hat way of controlling services required using the `service` and `chkconfig` commands.
    When working with Debian-type systems, I always used to have to look up the service
    management commands, because I could never remember them. With Slackware, you
    don't have any service management commands. To enable or disable a service on
    a Slackware machine, you just set or remove the executable permission from the
    appropriate `init` script.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，不同 Linux 发行版家族之间的不一致实现又带来了问题。使用 SysV 时，至少有三种不同的实现方式。红帽类发行版使用一种方法，Debian 类发行版使用另一种方法，而
    Slackware 类发行版则使用第三种方法。例如，红帽控制服务的方法需要使用 `service` 和 `chkconfig` 命令。每次在 Debian
    类系统上工作时，我总是需要查找服务管理命令，因为我总是记不住它们。而在 Slackware 上，则没有任何服务管理命令。要在 Slackware 机器上启用或禁用服务，只需要为相应的
    `init` 脚本设置或移除可执行权限。
- en: 'Runlevels were also a source of confusion, because each family of distro had
    its own set of runlevel definitions. For example, here are the definitions for
    the graphical runlevel:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 运行级别也是一个混淆源，因为每个发行版家族都有自己的一套运行级别定义。例如，以下是图形运行级别的定义：
- en: The Red Hat family used runlevel 5.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 红帽系列使用了运行级别 5。
- en: The Slackware family uses runlevel 4.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Slackware 系列使用了运行级别 4。
- en: The Debian family used no specific runlevel for either text mode or graphical
    mode. Instead, you enabled or disabled graphical mode by enabling or disabling
    the X server daemon.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Debian 系列没有为文本模式或图形模式指定特定的运行级别。相反，你通过启用或禁用 X 服务器守护进程来启用或禁用图形模式。
- en: So, you can see that this was all quite confusing, especially for anyone who
    worked in a mixed environment. It should be fairly obvious that we needed something
    that was a bit less confusing.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你可以看到这一切都相当混乱，尤其是对于在混合环境中工作的人来说。显而易见，我们需要一些稍微不那么混乱的东西。
- en: As if this weren't enough, there was also the issue of performance. SysV worked
    well in its day, when computing hardware was more primitive. But, on modern hardware
    with multiple CPUs that each have multiple cores, we need something a bit more
    robust. Ubuntu's upstart was supposed to fix this, but it didn't quite live up
    to its promise. Nowadays, Upstart is completely dead, but there are still some
    diehards who refuse to give up SysV. In the enterprise, `systemd` is king.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这还不够，性能问题也摆在了面前。SysV 在其时代表现良好，当时计算硬件还较为原始。但在现代硬件上，尤其是那些拥有多个 CPU 每个还拥有多个核心的机器，我们需要一些更加健壮的东西。Ubuntu
    的 upstart 本应解决这一问题，但它并没有完全实现承诺。如今，Upstart 已经完全死掉，但仍然有一些死忠粉丝拒绝放弃 SysV。在企业中，`systemd`
    是王者。
- en: The advantages of systemd
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`systemd` 的优点'
- en: We've just seen the problems with SysV and upstart. Now, let's look at what
    makes `systemd` better.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到了 SysV 和 Upstart 的问题。现在，让我们来看看是什么让 `systemd` 更好。
- en: systemd's simplicity
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`systemd` 的简洁性'
- en: 'In contrast to SysV, `systemd` is really quite simple to configure. For example,
    look at how short the Apache service file is on a CentOS 7 machine with `systemd`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 与 SysV 相比，`systemd` 的配置确实简单得多。例如，看看在 CentOS 7 上使用 `systemd` 的 Apache 服务文件是多么简短：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There are only 22 lines, and 5 of those lines are comments, as you can see
    here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 只有 22 行，其中 5 行是注释，如下所示：
- en: '![](img/Figure_1.3_B17491.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_1.3_B17491.jpg)'
- en: Figure 1.3 – A systemd service file
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 一个 `systemd` 服务文件
- en: I'll explain everything in the `systemd` files later. For now, I just want to
    show you that a `systemd` service file is much simpler than a SysV `init` script.
    (As we'll soon see in the upcoming chapters, it's easier to learn how to use the
    `systemd` directives than it is to learn how to write shell-scripting code for
    `init` scripts.)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我稍后会解释 `systemd` 文件中的所有内容。目前，我只想向你展示，`systemd` 服务文件比 SysV 的 `init` 脚本简单得多。（正如我们在接下来的章节中将看到的，学习如何使用
    `systemd` 指令比学习如何为 `init` 脚本编写 shell 脚本代码要容易得多。）
- en: systemd's consistency
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`systemd` 的一致性'
- en: The next `systemd` advantage is its consistency. Yes, boys and girls, you no
    longer have to remember multiple sets of system management commands for multiple
    families of Linux distros. Instead, you'll now use the same commands on all Linux
    distros that use `systemd`. So, this eliminates a major source of frustration
    for administrators, and for anyone who's studying to take a Linux certification
    exam.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个 `systemd` 优点是它的一致性。是的，朋友们，你们不再需要记住多套针对不同 Linux 发行版的系统管理命令了。相反，你现在只需在所有使用
    `systemd` 的 Linux 发行版上使用相同的命令。因此，这消除了管理员的主要困扰来源，也为那些正在学习参加 Linux 认证考试的人们省去了麻烦。
- en: systemd's performance
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`systemd` 的性能'
- en: In contrast to SysV, `systemd` can start services in parallel, rather than just
    one at a time in sequence. This makes for much quicker boot-up times than for
    SysV. Once the machine is booted, performance is more robust than that of SysV.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 与 SysV 相比，`systemd` 可以并行启动服务，而不是像 SysV 那样一次启动一个。这使得启动时间比 SysV 更快。一旦机器启动，性能也比
    SysV 更加稳定。
- en: With `systemd`, we have a much cleaner way of killing processes. For example,
    if you needed to use the `kill` command to forcefully terminate the Apache web
    server service on a SysV machine, you would only terminate the Apache process
    itself. If the web server process had spawned any child processes due to running
    CGI scripts, for example, those processes would continue on for a while longer
    as *zombie* processes. But, when you kill a service with `systemd`, all processes
    that are associated with that service will also get terminated.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `systemd`，我们有了一种更清洁的方式来终止进程。例如，如果你需要使用 `kill` 命令强制终止一个 SysV 机器上的 Apache Web
    服务器服务，你只能终止 Apache 进程本身。如果 Web 服务器进程由于运行 CGI 脚本而产生了任何子进程，这些进程会继续一段时间，成为 *僵尸* 进程。但当你使用
    `systemd` 杀死服务时，与该服务相关的所有进程也会被终止。
- en: systemd security
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`systemd` 安全性'
- en: 'An added bonus is that you can configure `systemd` service files to control
    certain aspects of system security. Here are some of the things that you can do:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一个额外的好处是，你可以配置 `systemd` 服务文件来控制系统安全的某些方面。以下是你可以做的一些操作：
- en: You can create a `systemd` service that can restrict access to or from certain
    directories, or that can only access or be accessed from certain network addresses.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以创建一个 `systemd` 服务，限制某些目录的访问，或者只能从特定网络地址访问或被访问。
- en: By using namespaces, you can effectively isolate services from the rest of the
    system. This also allows you to create containers without having to run Docker.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用命名空间，你可以有效地将服务与系统的其他部分隔离开。这也允许你在不运行 Docker 的情况下创建容器。
- en: You can use `cgroups` to limit resource usage. This can help prevent certain
    types of denial-of-service attacks.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用 `cgroups` 来限制资源使用。这有助于防止某些类型的拒绝服务攻击。
- en: You can specify which root-level kernel capabilities a service is allowed to
    have.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以指定服务允许拥有的哪些根级内核能力。
- en: With all this, you can make `systemd` somewhat emulate a mandatory access control
    system, such as SELinux or AppArmor.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这一切，你可以使 `systemd` 在某种程度上模拟一个强制访问控制系统，如 SELinux 或 AppArmor。
- en: All the way around, `systemd` is much better than any `init` system that came
    before it. But it hasn't made everyone happy.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，`systemd` 比任何之前的 `init` 系统要好得多。但它并没有让所有人都满意。
- en: The systemd controversy
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`systemd` 的争议'
- en: If you've been in the computer world for any length of time, you may have seen
    that we geeks can get quite passionate about our operating systems. In the early
    1990s, I finally replaced my text mode-only 8088 machine with one that could run
    a graphical interface. I first gave Windows 3.1 a try, and quickly decided that
    I really hated it. So, I bought a copy of OS/2, which I liked much better and
    ran for quite a few years on my home-built 486 machine. But, all of my geek buddies
    at work were big Windows fans, and they kept arguing with me about how much better
    Windows is. I thought that they were all crazy, and we kept getting into some
    rather heated arguments.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在计算机领域待了有一段时间，可能会发现我们这些极客在操作系统问题上常常表现得非常激烈。上世纪90年代初，我终于将我的8088机器（只能运行文本模式）替换为能够运行图形界面的机器。我第一次尝试了
    Windows 3.1，迅速决定我非常讨厌它。于是，我购买了 OS/2，并且它让我更加满意，我在自己组装的486机器上运行了好几年。但我所有的极客朋友都非常喜欢
    Windows，他们不断和我争论 Windows 比其他操作系统好。我认为他们都疯了，我们常常因此发生激烈的争执。
- en: 'Then, when I got into Linux, I quickly learned that you don''t want to go into
    any Linux forum and ask which Linux distro is the best for a newbie to start with.
    All that does is start fights, leaving the poor newbie more confused than ever.
    And now, the fight is over whether or not `systemd` is a *good thing*. Here are
    some of the objections:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当我接触 Linux 时，我很快就意识到，你不应该去任何 Linux 论坛问哪个 Linux 发行版最适合新手入门。那样做只会引发争吵，让可怜的新手更加困惑。现在，争论的焦点是
    `systemd` 是否是一个 *好东西*。以下是一些反对意见：
- en: By trying to do too much, `systemd` violates the Unix concept of having each
    utility just do one thing but having it do it well.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`systemd` 尝试做得太多，违反了 Unix 的理念——每个工具只做一件事，并且做到最好。'
- en: It's controlled by a large corporation (Red Hat).
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它由一个大公司（Red Hat）控制。
- en: It's a security problem.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是一个安全问题。
- en: Its `journald` component saves system logs to a binary format, which some people
    believe is more easily corrupted than the plain-text files that `rsyslog` creates.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的 `journald` 组件将系统日志保存为二进制格式，一些人认为这比 `rsyslog` 创建的纯文本文件更容易损坏。
- en: 'If you look at things objectively, you might see that the objections aren''t
    so bad:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你客观看待这些问题，可能会发现反对意见并没有那么严重：
- en: Yes, the `systemd` ecosystem includes more than just the `init` system. It also
    includes network, bootloader, logging, and log-in components. But those components
    are all optional, and not all Linux distros use them in a default setup.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是的，`systemd` 生态系统不仅仅包含 `init` 系统。它还包括网络、引导加载器、日志记录和登录组件。但这些组件都是可选的，并不是所有的 Linux
    发行版在默认设置中都使用它们。
- en: It was created primarily by Red Hat, and the project leader is a Red Hat employee.
    But Red Hat released it under a free-as-in-speech software license, which means
    that no one company can ever take full control of it. Even if Red Hat were to
    suddenly decide that future versions of `systemd` were to be proprietary, the
    free code is still out there, and someone would fork it into a new free version.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它主要是由 Red Hat 创建的，项目负责人是 Red Hat 的一名员工。但 Red Hat 将其发布在一个自由软件许可证下，这意味着没有任何一家公司能够完全控制它。即便
    Red Hat 突然决定未来版本的 `systemd` 要变成专有软件，免费代码仍然存在，某人会将其分叉成一个新的免费版本。
- en: Yes, there have been some security bugs in `systemd`. But that's also true of
    OpenSSL, the Bash shell, and even the Linux kernel itself. To complain about `systemd's`
    security would only be valid if the bugs hadn't gotten fixed.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是的，`systemd` 确实存在一些安全漏洞。但这同样适用于 OpenSSL、Bash shell，甚至是 Linux 内核本身。只有在这些漏洞没有被修复的情况下，才有理由抱怨
    `systemd` 的安全性。
- en: The `journald` component does create log files in a binary format. But it's
    still possible to run `rsyslog` on `systemd` distros, and most do. Some distros,
    such as the Red Hat Enterprise Linux 8 family, use `journald` to gather system
    information and then just have `journald` pass the information to `rsyslog` in
    order to create normal text files. So, with RHEL 8, we have the best of both worlds.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`journald`组件确实会创建二进制格式的日志文件。但仍然可以在`systemd`发行版上运行`rsyslog`，而且大多数都在运行。某些发行版，例如Red
    Hat Enterprise Linux 8系列，使用`journald`收集系统信息，然后让`journald`将信息传递给`rsyslog`，以创建正常的文本文件。因此，在RHEL
    8中，我们获得了两全其美的方案。'
- en: Soon after the release of `systemd`, some people who had never even tried it
    put up blog posts that explained why `systemd` was pure evil and that they would
    never use it. A few years ago, I created a `systemd` tutorial playlist on my BeginLinux
    Guru channel on YouTube. The first video is called *Why systemd?*. Quite a few
    people left comments about why they would never use `systemd` and said that they
    would change to either a non-`systemd` Linux distro or to a FreeBSD-type distro
    in order to avoid it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在`systemd`发布不久后，一些从未尝试过它的人发布了博文，解释为什么`systemd`是纯粹的邪恶，并表示他们永远不会使用它。几年前，我在我的BeginLinux
    Guru频道上创建了一个`systemd`教程播放列表。第一个视频叫做*为什么选择systemd？* 很多人在评论中说他们永远不会使用`systemd`，并表示他们会切换到非`systemd`的Linux发行版或FreeBSD类型的发行版，以避免使用它。
- en: 'The bottom line is this: all enterprise-grade Linux distros now use `systemd`.
    So, I think that it might be here to stay.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 底线是：所有企业级Linux发行版现在都使用`systemd`。所以，我认为它可能会长期存在。
- en: Summary
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this first chapter, we've looked at the history of the most common Linux
    init systems. We've seen the ways in which the legacy init systems are deficient,
    and we've seen why `systemd` is a much better replacement. We wrapped things up
    by looking at the objections against `systemd`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了最常见的Linux初始化系统的历史。我们看到了遗留初始化系统的不足之处，也了解了为什么`systemd`是一个更好的替代品。最后，我们讨论了反对`systemd`的观点。
- en: One of the challenges of learning `systemd` is that, until now, there hasn't
    been any real comprehensive documentation about it. There's basic usage documentation
    on the Red Hat website, but it doesn't even cover all components of the `systemd`
    ecosystem. There are only two `systemd`-specific books that I could find, which
    are a few years old. (One book is specific to Fedora, the other is specific to
    Ubuntu.) Even those books leave some things out. So, the challenge I've set for
    myself is to create a comprehensive, hands-on guide for all things `systemd`.
    In the chapters that follow, I'll do my best to accomplish that goal.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 学习`systemd`的挑战之一是，直到现在，关于它并没有任何真正的全面文档。Red Hat网站上有基本的使用文档，但甚至没有覆盖`systemd`生态系统的所有组件。我能找到的只有两本关于`systemd`的书，已经有几年历史了。（一本书是关于Fedora的，另一本是关于Ubuntu的。）即使这些书也遗漏了一些内容。所以，我给自己设定的挑战是创建一本全面的、实用的`systemd`指南。在接下来的章节中，我会尽力完成这个目标。
- en: In the next chapter, we'll go on a quick tour of the `systemd` directories and
    files. I'll see you there.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将快速浏览`systemd`的目录和文件。我在那里等你。
- en: Questions
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Who created the original SysV `init` system?
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 谁创建了最初的SysV `init`系统？
- en: a. Bell Labs
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 贝尔实验室
- en: b. Red Hat
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. 红帽
- en: c. Debian
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. Debian
- en: d. Ubuntu
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. Ubuntu
- en: Which of the following is true about SysV?
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下关于SysV哪个是正确的？
- en: a. It's a modern, robust `init` system.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 它是一个现代化、强大的`init`系统。
- en: b. When booting a machine, it can start services in parallel.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. 启动机器时，它可以并行启动服务。
- en: c. When booting a machine, it can only start services sequentially.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. 启动机器时，它只能按顺序启动服务。
- en: d. It has security features that `systemd` doesn't have.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. 它具有`systemd`所没有的安全功能。
- en: Which of the following is *not* true about `systemd`?
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下关于`systemd`哪个*不是*正确的？
- en: a. It has security features that can somewhat emulate a mandatory access control
    system.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 它具有可以在某种程度上模拟强制访问控制系统的安全功能。
- en: b. It can start services in parallel.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. 它可以并行启动服务。
- en: c. It can use `cgroups` to limit resource usage.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. 它可以使用`cgroups`限制资源使用。
- en: d. It's a legacy system that needs to be replaced.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. 它是一个需要被替换的遗留系统。
- en: Answers
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: A
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: A
- en: C
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C
- en: D
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: D
- en: Further reading
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'An overview of Linux `init` systems:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux `init`系统概述：
- en: '[https://www.tecmint.com/best-linux-init-systems/](https://www.tecmint.com/best-linux-init-systems/)'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.tecmint.com/best-linux-init-systems/](https://www.tecmint.com/best-linux-init-systems/)'
- en: 'Why `init` needed to be replaced with `systemd`:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么`init`需要被`systemd`替换：
- en: '[https://www.tecmint.com/systemd-replaces-init-in-linux/](https://www.tecmint.com/systemd-replaces-init-in-linux/)'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.tecmint.com/systemd-replaces-init-in-linux/](https://www.tecmint.com/systemd-replaces-init-in-linux/)'
- en: 'Red Hat''s `systemd` documentation:'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Red Hat的`systemd`文档：
- en: '[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_basic_system_settings/index](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_basic_system_settings/index)'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_basic_system_settings/index](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_basic_system_settings/index)'
- en: 'Some arguments against `systemd`:'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些反对`systemd`的观点：
- en: '[https://textplain.net/blog/2015/problems-with-systemd-and-why-i-like-bsd-init/](https://textplain.net/blog/2015/problems-with-systemd-and-why-i-like-bsd-init/)'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://textplain.net/blog/2015/problems-with-systemd-and-why-i-like-bsd-init/](https://textplain.net/blog/2015/problems-with-systemd-and-why-i-like-bsd-init/)'
- en: '[https://www.theregister.com/2014/10/21/unix_greybeards_threaten_debian_fork_over_systemd_plan/](https://www.theregister.com/2014/10/21/unix_greybeards_threaten_debian_fork_over_systemd_plan/)'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.theregister.com/2014/10/21/unix_greybeards_threaten_debian_fork_over_systemd_plan/](https://www.theregister.com/2014/10/21/unix_greybeards_threaten_debian_fork_over_systemd_plan/)'
