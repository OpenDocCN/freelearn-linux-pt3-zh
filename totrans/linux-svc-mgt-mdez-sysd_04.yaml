- en: '*Chapter 3*: Understanding Service, Path, and Socket Units'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第3章*：理解服务单元、路径单元和套接字单元'
- en: In this chapter, we'll examine the inner workings of the service, path, and
    socket unit files. We'll examine the parts that are in each and look at some of
    the parameters that you can set. Along the way, I'll give you some pointers about
    how to find information about what the various parameters are doing for you.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将检查服务单元、路径单元和套接字单元文件的内部工作原理。我们将检查每个文件中的部分内容，并查看你可以设置的一些参数。在这个过程中，我还会给你一些提示，教你如何查找有关各个参数的使用信息。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将讨论以下主题：
- en: Understanding service units
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解服务单元
- en: Understanding socket units
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解套接字单元
- en: Understanding path units
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解路径单元
- en: At some point in your Linux administrator career, you could be tasked with modifying
    existing units or creating new ones. The knowledge in this chapter can help you
    with that. So, if you're ready, let's go.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在你成为Linux管理员的过程中，你可能会被要求修改现有单元或创建新的单元。本章的知识可以帮助你实现这一点。所以，如果你准备好了，就开始吧。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: As always, I'll be doing the demos on an Ubuntu Server 20.04 virtual machine
    and an Alma Linux 8 virtual machine. Feel free to fire up your own virtual machines
    to follow along.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，我将在Ubuntu Server 20.04虚拟机和Alma Linux 8虚拟机上进行演示。你可以随时启动自己的虚拟机来跟着做。
- en: 'Check out the following link to see the Code in Action video: [https://bit.ly/2ZQBHh6](https://bit.ly/2ZQBHh6)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接以观看《代码实战》视频：[https://bit.ly/2ZQBHh6](https://bit.ly/2ZQBHh6)
- en: Understanding service units
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解服务单元
- en: 'Service units are the equivalent of init scripts on old SysV systems. We''ll
    use them to configure our various services, which we used to call *daemons* in
    the old days. A service can be pretty much anything that you want to start automatically
    and run in the background. Examples of services include Secure Shell, your web
    server of choice, a mail server, and various services that are required for proper
    system operation. While some service files can be short and sweet, others can
    be fairly lengthy, with more options enabled. To read about all of these options,
    just type the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 服务单元相当于旧版SysV系统中的init脚本。我们将使用它们来配置我们的各种服务，这些服务在过去我们称之为*守护进程*。服务几乎可以是任何你希望自动启动并在后台运行的东西。服务的例子包括安全外壳（SSH）、你选择的Web服务器、邮件服务器以及系统正常运行所需的各种服务。虽然有些服务文件可能简短明了，其他则可能相当长，包含更多启用的选项。要了解所有这些选项，只需输入以下命令：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The descriptions for all of the parameters that you can set are spread over
    several different man pages. This `systemd.directives` man page is an index that
    will direct you to the proper man page for each parameter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以设置的所有参数的描述分布在多个不同的手册页中。这个`systemd.directives`手册页是一个索引，它会引导你找到每个参数的正确手册页。
- en: Rather than trying to explain every parameter that service files can use, let's
    look through a few example files and explain what they're doing.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与其尝试解释服务文件可以使用的每个参数，不如让我们通过一些示例文件来解释它们的作用。
- en: Understanding the Apache service file
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Apache服务文件
- en: 'We''ll start with the service file for the Apache web server. On my Ubuntu
    Server 20.04 virtual machine, it is the `/lib/systemd/system/apache2.service`
    file. The first thing to note is that service unit files are divided into three
    sections. The top section is the `[Unit]` section, which contains parameters that
    can be placed in any type of unit file. It looks like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从Apache Web服务器的服务文件开始。在我的Ubuntu Server 20.04虚拟机中，它是`/lib/systemd/system/apache2.service`文件。首先需要注意的是，服务单元文件被分为三个部分。顶部部分是`[Unit]`部分，它包含可以放入任何类型单元文件中的参数。它看起来像这样：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here, we see these three parameters:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到这三个参数：
- en: '`Description=`: Okay, this one should be fairly self-explanatory. All it does
    is tell the human user what the service is. The `systemctl status` command pulls
    its description information from this line.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Description=`：好吧，这个应该是相当自解释的。它的作用是告诉用户这个服务是什么。`systemctl status`命令从这一行获取其描述信息。'
- en: '`After=`: We don''t want Apache to start until certain other things have happened.
    We haven''t talked about `target` files yet, but that''s okay. For now, just know
    that we want to prevent Apache from starting until after the network, any possible
    attached remote filesystems, and the Name Switch Service are available.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`After=`：我们不希望Apache在某些其他事情发生之前启动。我们还没有讨论`target`文件，但没关系。现在，只需知道我们希望阻止Apache启动，直到网络、任何可能的附加远程文件系统和名称切换服务可用之后。'
- en: '`Documentation=`: Here''s another one that''s self-explanatory. It just shows
    where to find the Apache documentation.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Documentation=`：这是另一个不言自明的参数。它只是显示了Apache文档的位置。'
- en: 'To read about the options that you can place in the `[Unit]` section of any
    unit file, just type the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解可以放置在任何单元文件`[Unit]`部分的选项，请输入以下内容：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, we have the `[Service]` section, where things get a bit more interesting.
    It contains parameters that can only be placed in a service unit file, and looks
    like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有`[Service]`部分，这里有些更有趣的参数可以放在服务单元文件中，看起来像这样：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In this particular file, we see these parameters:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定的文件中，我们看到了这些参数：
- en: '`Type=`: There are several different service types that you''ll see described
    in the `systemd.service` man page. In this case, we have the `forking` type, which
    means that the first Apache process that starts will spawn a child process. When
    Apache startup is complete and the proper communication channels have been set
    up, the original process—the *parent* process—will exit and the child process
    will carry on as the main service process. When the parent process exits, the
    `systemd` service manager will finally recognize the service as having fully started.
    According to the man page, this is the traditional behavior for Unix services,
    and `systemd` just carries on the tradition.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Type=`：在`systemd.service`手册页面上描述了几种不同的服务类型。在这种情况下，我们有`forking`类型，这意味着第一个启动的Apache进程将生成一个子进程。当Apache启动完成并且建立了适当的通信通道后，原始进程——*父*进程将退出，子进程将继续作为主服务进程运行。当父进程退出时，`systemd`服务管理器最终将认为服务已完全启动。根据手册页面的说法，这是Unix服务的传统行为，`systemd`只是延续了这一传统。'
- en: '`Environment=`: This sets an environmental variable that affects the behavior
    of the service. In this case, it tells Apache that it was started by `systemd`.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Environment=`：这设置了一个影响服务行为的环境变量。在这种情况下，它告诉Apache它是由`systemd`启动的。'
- en: '`ExecStart=`, `ExecStop=`, and `ExecReload=`: These three lines just point
    the way to the Apache executable file, and specify the command arguments for starting,
    stopping, and reloading the service.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExecStart=`, `ExecStop=`和`ExecReload=`：这三行指向Apache可执行文件的位置，并指定了启动、停止和重新加载服务的命令参数。'
- en: '`PrivateTmp=`: Many services write temporary files for various reasons, and
    you''re probably used to seeing them in the `/tmp/` directory that everyone can
    access. Here though, we see a cool `systemd` security feature. When set to `true`,
    this parameter forces the Apache service to write its temporary files to a private
    `/tmp/` directory that nobody else can access. So, if you''re concerned that Apache
    might write sensitive information to its temporary files, you''ll want to use
    this feature. (You can read more about this feature, as well as other security
    features, on the `systemd.exec` man page.) Also, note that if you leave this parameter
    out altogether, it will default to `false`, which means that you won''t have this
    protection.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PrivateTmp=`：许多服务因各种原因而写入临时文件，你可能习惯于在每个人都可以访问的`/tmp/`目录中看到它们。在这里，我们看到了一个很酷的`systemd`安全特性。当设置为`true`时，这个参数会强制Apache服务将其临时文件写入一个私有的`/tmp/`目录，其他人无法访问。因此，如果你担心Apache可能会将敏感信息写入其临时文件，你会想使用这个特性。（你可以在`systemd.exec`手册页面上阅读更多关于这个特性以及其他安全特性的信息。）另外，请注意，如果你完全不设置这个参数，它将默认为`false`，这意味着你将不会得到这种保护。'
- en: '`Restart=`: Sometimes, you might want a service to automatically restart if
    it stops. In this case, we''re using the `on-abort` parameter, which just means
    that if the Apache service were to crash with an unclean signal, `systemd` would
    automatically restart it.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Restart=`：有时候，如果服务停止了，你可能希望它自动重新启动。在这种情况下，我们使用了`on-abort`参数，这意味着如果Apache服务因不正常的信号而崩溃，`systemd`会自动重新启动它。'
- en: 'Okay, that''s it for the `[Service]` section. Let''s move on to the `[Install]`
    section, which looks like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，`[Service]`部分就到此为止。让我们继续`[Install]`部分，看起来像这样：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The nomenclature for this seems a bit weird because it doesn't seem like we're
    installing anything here. What this actually does is control what happens when
    you enable or disable a unit. In this case, we're saying that we want the Apache
    service to be enabled for the `multi-user.target` unit, which will cause the service
    to automatically start when the machine boots into the multi-user target. (We'll
    cover targets and the boot-up process later. For now, just understand that the
    multi-user target is when the machine is fully booted and ready for use. For you
    SysV veterans, the target in this case is akin to a SysV runlevel.)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命名法看起来有点奇怪，因为我们似乎并没有在这里安装什么东西。实际上，它的作用是控制在启用或禁用某个单元时会发生什么。在这种情况下，我们表示希望Apache服务在`multi-user.target`单元中启用，这将导致服务在机器启动到多用户目标时自动启动。（我们稍后会介绍目标和启动过程。现在，只需要理解多用户目标是指机器完全启动并准备好使用的时候。对于老一辈的SysV用户来说，这里的目标相当于SysV的运行级别。）
- en: Understanding the Secure Shell service file
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解安全外壳服务文件
- en: 'For something a bit different, let''s look at the service file for the Secure
    Shell service, which on this Ubuntu machine is the `/lib/systemd/system/ssh.service`
    file. Here''s the `[Unit]` section:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些不同的内容，让我们看看安全外壳服务的服务文件，在这台Ubuntu机器上，它是`/lib/systemd/system/ssh.service`文件。这里是`[Unit]`部分：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the `[Unit]` section, we see the `ConditionPathExists=` parameter, which
    we didn''t see before. It checks for either the existence or non-existence of
    a file. In this case, we see an exclamation point (`!`) in front of the path to
    the file, which means that we''re checking for the non-existence of the named
    file. If `systemd` finds it there, it won''t start the Secure Shell service. If
    we were to remove the exclamation point, then `systemd` would only start the service
    if the file *were* there. So, if we wanted to prevent the Secure Shell service
    from starting, all we''d have to do is create a dummy file in the `/etc/ssh/`
    directory, like so:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在`[Unit]`部分，我们看到`ConditionPathExists=`参数，这是之前没有看到的。它检查文件是否存在或不存在。在这种情况下，我们在文件路径前面看到一个感叹号（`!`），这意味着我们在检查指定文件的不存在。如果`systemd`发现该文件，它将不会启动安全外壳服务。如果我们去掉感叹号，`systemd`只有在该文件*存在*时才会启动服务。所以，如果我们想防止安全外壳服务启动，所需要做的就是在`/etc/ssh/`目录中创建一个虚拟文件，如下所示：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: I'm not sure how useful this feature really is, because it's just as easy to
    simply disable the service if you don't want it to run. But, if you think that
    you might ever need this, it's there for you.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我不确定这个功能到底有多有用，因为如果你不希望服务运行，直接禁用它也一样简单。但是，如果你觉得以后可能会用到这个功能，它就在那里为你提供。
- en: 'Next up is the `[Service]` section:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是`[Service]`部分：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the `[Service]` section, we see a few new parameters:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在`[Service]`部分，我们看到了一些新的参数：
- en: '`EnvironmentFile=`: This parameter causes `systemd` to read a list of environmental
    variables from the specified file. The minus sign (`-`) in front of the path to
    the file tells `systemd` that if the file doesn''t exist, don''t worry about it
    and start the service anyway.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EnvironmentFile=`：这个参数会让`systemd`从指定的文件中读取环境变量列表。路径前的减号（`-`）告诉`systemd`如果文件不存在，不用担心，还是照常启动服务。'
- en: '`ExecStartPre=`: This tells `systemd` to run a specified command before it
    starts the service with the `ExecStart=` parameter. In this case, we want to run
    the `sshd -t` command, which tests the Secure Shell configuration to ensure that
    it''s valid.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExecStartPre=`：这告诉`systemd`在启动服务之前执行一个指定的命令，通过`ExecStart=`参数来启动服务。在这个例子中，我们希望运行`sshd
    -t`命令，它会测试安全外壳配置，以确保其有效。'
- en: '`KillMode=`: I''ve already told you that one of the beauties of `systemd` is
    its ability to stop all processes of a service if you have to send a kill signal
    to it. That''s the default behavior if you don''t include this parameter in your
    service file. Sometimes though, you might not want that. By setting this parameter
    to `process`, a kill signal will only kill the main process for the service. All
    other associated processes will remain running. (You can read more about this
    parameter on the `systemd.kill` man page.)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KillMode=`：我之前已经告诉过你，`systemd`的一个优点是它能在你需要向服务发送杀死信号时，停止该服务的所有进程。如果你没有在服务文件中包含这个参数，它就是默认行为。不过，有时你可能并不想这样。通过将此参数设置为`process`，杀死信号将只会终止服务的主进程，所有其他关联进程将继续运行。（你可以在`systemd.kill`手册页中阅读更多关于此参数的内容。）'
- en: '`Restart=`: This time, instead of automatically restarting a stopped service
    `on-abort`, it will now restart it `on-failure`. So, in addition to restarting
    the service because of an unclean signal, `systemd` will also restart this service
    because of an unclean exit code, a timeout, or a watchdog event. (A watchdog,
    in case you''re wondering, is a kernel feature that can restart a service upon
    some sort of unrecoverable error.)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Restart=`：这次，它将不再因为`on-abort`自动重启停止的服务，而是因为`on-failure`重新启动。因此，除了因为异常信号重新启动服务外，`systemd`还会因不正常的退出代码、超时或看门狗事件重新启动该服务。（如果你在想，看门狗是一种内核特性，它可以在发生某些无法恢复的错误时重新启动服务。）'
- en: '`RestartPreventExitStatus=`: This prevents the service from automatically restarting
    if a certain exit code is received. In this case, we don''t want the service to
    restart if the exit code is `255`. (For more information about exit codes, see
    the `$EXIT_CODE, $EXIT_STATUS_` section of the `systemd.exec` man page.)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RestartPreventExitStatus=`：当接收到某个退出代码时，这会防止服务自动重启。在这个例子中，我们不希望服务在退出代码为`255`时重启。（有关退出代码的更多信息，请参见`systemd.exec`手册页中的`$EXIT_CODE,
    $EXIT_STATUS_`部分。）'
- en: '`Type=`: For this service, the type is `notify`, instead of `forking` as we
    saw in the previous example. This means that the service will send a notification
    message when the service has finished starting. After it sends the notification
    message, `systemd` will continue loading the follow-up units.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Type=`：对于此服务，类型为`notify`，而不是我们在前一个示例中看到的`forking`。这意味着当服务启动完成后，服务将发送一个通知消息。发送通知消息后，`systemd`将继续加载后续单元。'
- en: '`RuntimeDirectory=` and `RuntimeDirectoryMode=`: These two directives create
    a runtime directory under the `/run/` directory, and then set the permissions
    value for that directory. In this case, we''re setting the `0755` permission on
    the directory, which means that it will have read, write, and execute permissions
    for the directory''s owner. Everyone else will only have read and execute permissions.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RuntimeDirectory=`和`RuntimeDirectoryMode=`：这两个指令会在`/run/`目录下创建一个运行时目录，然后设置该目录的权限值。在这个例子中，我们将目录的权限设置为`0755`，这意味着目录的所有者将拥有读、写和执行权限，而其他人将仅有读和执行权限。'
- en: 'Finally, here''s the `[Install]` section:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这里是`[Install]`部分：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the `[Install]` section, we see the `Alias=` parameter, which can be quite
    handy. That's because certain services can have different names on different Linux
    distros. For example, the Secure Shell service is `sshd` on Red Hat-type systems
    and just `ssh` on Debian/Ubuntu systems. By including this `Alias=sshd.service`
    line, we can control the service by specifying either name.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在`[Install]`部分，我们看到`Alias=`参数，这非常实用。因为某些服务在不同的Linux发行版上可能有不同的名称。例如，安全外壳服务在Red
    Hat类型的系统上是`sshd`，而在Debian/Ubuntu系统上是`ssh`。通过包含`Alias=sshd.service`这一行，我们可以通过指定任意一个名称来控制服务。
- en: Understanding the timesyncd service file
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解timesyncd服务文件
- en: 'For the last example, I want to show you the service file for the `timesyncd`
    service. This is the `/lib/systemd/system/systemd-timesyncd.service` file. First,
    the `[Unit]` section:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于最后一个示例，我想向你展示`timesyncd`服务的服务文件。它是`/lib/systemd/system/systemd-timesyncd.service`文件。首先是`[Unit]`部分：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For this file, I mainly just want to focus on the security-related parameters.
    In the `[Unit]` section, there's the `ConditionCapability=` parameter, which I'll
    explain in a moment. The `Wants=` line, which isn't security-related, defines
    the dependency units for this service. If these dependency units aren't running
    when this service gets started, then `systemd` will attempt to start them. If
    they fail to start, this service will still go ahead and start anyway.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个文件，我主要想关注与安全相关的参数。在`[Unit]`部分，有`ConditionCapability=`参数，稍后我将解释。`Wants=`行与安全无关，它定义了该服务的依赖单元。如果这些依赖单元在该服务启动时未运行，`systemd`将尝试启动它们。如果它们未能启动，该服务仍将继续启动。
- en: 'Next, we''ll look at the `[Service]` section, where we''ll see more security-related
    parameters. (For space reasons, I can only place part of the file here, so feel
    free to view it on your own virtual machine.):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将查看`[Service]`部分，在这里我们将看到更多与安全相关的参数。（由于篇幅限制，这里只展示文件的一部分，欢迎在您自己的虚拟机上查看完整文件。）
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `AmbientCapabilities=` and the `CapabilityBoundingSet=` parameters are all
    set to `CAP_SYS_TIME`, as is the `ConditionCapability=` parameter in the `[Unit]`
    section. Toward the end of the `[Service]` section, we see the `User=systemd-timesync`
    line, which tells `systemd` to run this service under a non-privileged account.
    But, setting the system time requires root privileges, which the `systemd-timesync`
    user doesn't have. We can fix that by assigning a root-level kernel capability
    to this user. In this case, we're allowing this user to set the system time, but
    nothing else. Some systems though, might not be able to implement the `AmbientCapabilities=`
    directive. So, the double-exclamation points (`!!`) in the `ExecStart=` line tell
    `systemd` to run the indicated service with minimum privileges. Be aware that
    this double-exclamation point option only takes effect if the system can't deal
    with the `AmbientCapabilities=` directive.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`AmbientCapabilities=` 和 `CapabilityBoundingSet=` 参数都设置为 `CAP_SYS_TIME`，`[Unit]`
    部分的 `ConditionCapability=` 参数也是如此。在 `[Service]` 部分的末尾，我们看到 `User=systemd-timesync`
    行，这告诉 `systemd` 以非特权帐户运行此服务。但是，设置系统时间需要 root 权限，而 `systemd-timesync` 用户没有该权限。我们可以通过为此用户分配一个根级别的内核能力来解决这个问题。在这种情况下，我们允许此用户设置系统时间，但不允许做其他操作。不过，一些系统可能无法实现
    `AmbientCapabilities=` 指令。因此，`ExecStart=` 行中的双重感叹号 (`!!`) 告诉 `systemd` 以最小权限运行指定的服务。请注意，只有在系统无法处理
    `AmbientCapabilities=` 指令时，这个双重感叹号选项才会生效。'
- en: Note
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can read more about kernel capabilities by typing `man capabilities`. An
    important thing to understand about kernel capabilities is that they can vary
    across different CPU architectures. So, the set of capabilities that can be used
    with an ARM CPU won't be the same as the set of capabilities on an x86_64 CPU.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过输入 `man capabilities` 了解更多关于内核能力的信息。了解内核能力的一个重要点是，它们在不同的 CPU 架构之间可能有所不同。因此，适用于
    ARM CPU 的能力集合与适用于 x86_64 CPU 的能力集合不同。
- en: Read down through the rest of the `[Service]` section, and you'll see a lot
    of parameters that are obviously for enhancing security. I'm not going to go over
    all of them, because for most of them, you can tell what they're doing just by
    looking at their names. For the few that aren't so obvious, I would encourage
    you to consult the man pages. These security settings are a powerful feature,
    and you can see here that they're pretty much doing the same job as a mandatory
    access control system.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读 `[Service]` 部分的其余内容，你会看到很多显然是为了增强安全性的参数。我不会一一讲解，因为大多数参数你仅从名称就能大致知道它们的作用。对于那些不太明显的参数，我建议你查阅手册页。这些安全设置是一个强大的功能，你可以看到它们几乎在做与强制访问控制系统相同的工作。
- en: 'And finally, we have the `[Install]` section:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有 `[Install]` 部分：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The main thing to see here is that this service is wanted by the `sysinit.target`,
    which means that it will come up during the system initialization process.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这里要注意的主要一点是，这个服务是 `sysinit.target` 所需要的，这意味着它会在系统初始化过程中启动。
- en: We've only scratched the surface for what we can do with service files. But
    there are so many different parameters that scratching the surface is all we can
    reasonably expect to do. Your best bet is to skim over the man pages to get a
    good feel for things and to consult the man pages whenever you have questions.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是略微触及了服务文件的应用范围。但由于有如此多不同的参数，我们只能合理地期望做一些简单的探索。你最好的做法是浏览手册页，熟悉相关内容，并在有问题时查阅手册页。
- en: Next, we'll cover socket units. (Fortunately, that section won't need to be
    quite as long.)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论套接字单元。（幸运的是，这一部分不需要太长。）
- en: Understanding socket units
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解套接字单元
- en: 'The socket unit files are also in the `/lib/systemd/system/` directory, and
    their filenames end with `.socket`. Here''s a partial list of them on one of my
    Ubuntu Server machines:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 套接字单元文件也位于 `/lib/systemd/system/` 目录下，文件名以 `.socket` 结尾。以下是我在一台 Ubuntu 服务器机器上的部分文件列表：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The socket units can do a couple of things for us. First, they can take the
    place of the legacy `inetd` and `xinetd` *superserver* daemons that were on the
    old SysV systems. This means that instead of having a server daemon run full-time,
    even when it isn''t needed, we can leave it shut down most of the time, and only
    start it when the system detects an incoming network request for it. For a simple
    example, let''s look at the `ssh.socket` file on an Ubuntu machine:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Socket 单元可以为我们做几件事情。首先，它们可以代替旧的 SysV 系统上的 `inetd` 和 `xinetd` *超级服务器* 守护进程。这意味着，我们可以避免让一个服务器守护进程一直运行，即使在不需要的时候也要一直运行。相反，我们可以大部分时间将它关闭，只在系统检测到一个进来的网络请求时才启动它。我们来看一个简单的例子，看看
    Ubuntu 机器上的`ssh.socket`文件：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Even though this socket file gets installed by default, it''s not enabled by
    default. On a default configuration of Ubuntu, the Secure Shell service runs all
    the time. In the `[Unit]` section, we see these two interesting directives:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 即使这个 socket 文件默认情况下会被安装，但它并不会默认启用。在 Ubuntu 的默认配置下，Secure Shell 服务是一直在运行的。在`[Unit]`部分，我们可以看到这两个有趣的指令：
- en: '`Before=ssh.service`: This tells `systemd` to start the socket before starting
    the Secure Shell service.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Before=ssh.service`：这告诉`systemd`在启动 Secure Shell 服务之前先启动这个 socket。'
- en: '`Conflicts=ssh.service`: This tells `systemd` to not allow the Secure Shell
    service to run normally if this socket is enabled. If you were to enable this
    socket, the normal SSH service would get shut down.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Conflicts=ssh.service`：这告诉`systemd`，如果启用了这个 socket，就不允许 Secure Shell 服务正常运行。如果你启用这个
    socket，正常的 SSH 服务会被关闭。'
- en: In the `[Socket]` section, we see that the socket listens on port `22/tcp`,
    which is the default port for Secure Shell. The `Accept=yes` line is a bit deceiving
    because it doesn't mean exactly what you would think. It really means that the
    service will spawn a new instance for every incoming connection. According to
    the `systemd.socket` man page, this setting should only be used for services that
    were designed to work under the old `inetd` and `xinetd` schemes. For better performance,
    new services should be designed to not behave like this.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在`[Socket]`部分，我们看到这个 socket 监听在端口`22/tcp`，这是 Secure Shell 的默认端口。`Accept=yes`这一行有点具有误导性，因为它并不完全意味着你想象的那样。它实际上是指每当有新的连接请求时，服务会为每个请求生成一个新的实例。根据`systemd.socket`的手册页面，这个设置应该仅用于设计时考虑到旧的`inetd`和`xinetd`方案的服务。为了更好的性能，新的服务应该设计成不以这种方式运行。
- en: 'To demonstrate how this works, I first want to show you that the `ssh` service
    on my Ubuntu VM is running normally:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这个是如何工作的，我首先想向你展示一下我在 Ubuntu 虚拟机上运行的`ssh`服务是否正常：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'So, it''s `active`, which means that it''s running as a normal daemon. Now,
    let''s enable `ssh.socket`, and then look at the difference:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，它是`active`的，这意味着它作为一个正常的守护进程在运行。现在，让我们启用`ssh.socket`，然后看一下差异：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: So, as soon as I enable this socket, the `Conflicts=` line automatically shuts
    down the `ssh` service. But I can still connect to this machine because the socket
    will automatically start the SSH service just long enough to service the connection
    request. When the service is no longer needed, it will automatically go back to
    sleep.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，一旦我启用这个 socket，`Conflicts=`这一行就会自动关闭`ssh`服务。但是我仍然可以连接到这台机器，因为这个 socket 会自动启动
    SSH 服务，恰好足够长的时间来处理连接请求。当服务不再需要时，它会自动进入休眠状态。
- en: Secondly, note that this socket doesn't mention which service to start, or where
    its executable file is. That's because the socket, when activated, will just pull
    that information from the `ssh.service` file. You don't have to tell it to do
    that, because the default behavior for any socket file is to get its information
    from a service file that has the same prefix in the filename.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，注意到这个 socket 并没有提到启动哪个服务，或者它的可执行文件在哪。这是因为，当该 socket 被激活时，它会从`ssh.service`文件中自动获取这些信息。你不需要告诉它怎么做，因为任何
    socket 文件的默认行为是从一个文件名相同前缀的服务文件中获取它的信息。
- en: 'Finally, socket units can enable communication between operating system processes.
    For example, a socket can take messages from various system processes and pass
    them to the logging system, as we see here in this `systemd-journald.socket` file:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，socket 单元可以启用操作系统进程之间的通信。例如，一个 socket 可以从各种系统进程接收消息并将它们传递给日志系统，正如我们在这个`systemd-journald.socket`文件中看到的那样：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We see here that instead of listening to a network port, this socket listens
    for TCP output from `/run/systemd/journal/stdout`, and for UDP output from `/run/systemd/journal/socket`.
    (The `ListenStream=` directive is for TCP sources, and the `ListenDatagram=` directive
    is for UDP sources. The `systemd.socket` man page doesn't make that clear, so
    you have to do some DuckDuckGo searching to find this out.)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里看到的是，这个套接字并没有监听网络端口，而是监听来自 `/run/systemd/journal/stdout` 的 TCP 输出，以及来自
    `/run/systemd/journal/socket` 的 UDP 输出。（`ListenStream=` 指令用于 TCP 源，`ListenDatagram=`
    指令用于 UDP 源。`systemd.socket` 手册页没有明确说明这一点，所以你需要通过 DuckDuckGo 搜索来了解这一点。）
- en: There's no `Accept=yes` directive here, because, unlike the Secure Shell service
    that we saw earlier, the `journald` service doesn't need to spawn a new instance
    for every incoming connection. By leaving this setting out, it defaults to a value
    of `no`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有 `Accept=yes` 指令，因为与我们之前看到的安全 shell 服务不同，`journald` 服务不需要为每个传入连接生成一个新的实例。省略此设置时，它的默认值为
    `no`。
- en: The `PassCredentials=yes` line and the `PassSecurity=yes` line cause the sending
    process to pass security credentials and security context information to the receiving
    socket. These parameters also default to `no` if you leave them out. To enhance
    performance, the `ReceiveBuffer=` line sets aside 8 MB of buffer memory.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`PassCredentials=yes` 行和 `PassSecurity=yes` 行使发送过程将安全凭证和安全上下文信息传递给接收套接字。如果省略这两个参数，它们的默认值为
    `no`。为了提高性能，`ReceiveBuffer=` 行为缓冲区分配了 8 MB 的内存。'
- en: Finally, the `Service=` line specifies the service. According to the `systemd.socket`
    man page, this can only be used if `Accept=no` is set. The man page also says
    that this usually isn't needed, because by default the socket will still reference
    the service file that has the same name as the socket. But if you do use this,
    it might pull in some extra dependencies that it might not otherwise pull in.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`Service=` 行指定了服务。根据 `systemd.socket` 的手册页，只有在设置了 `Accept=no` 时才能使用此选项。手册页还指出，通常不需要此项，因为默认情况下，套接字仍会引用与套接字同名的服务文件。但如果使用此项，它可能会引入一些额外的依赖项，原本不会引入这些依赖。
- en: Understanding path units
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解路径单元
- en: You can use a path unit to have `systemd` monitor a certain file or directory
    to see when it changes. When `systemd` detects that the file or directory has
    changed, it will activate the specified service. We'll use the **Common Unix Printing
    System** (**CUPS**) as an example.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用路径单元让 `systemd` 监控特定文件或目录，以查看它们何时发生变化。当 `systemd` 检测到文件或目录发生变化时，它将激活指定的服务。我们将以**通用
    Unix 打印系统**（**CUPS**）为例。
- en: 'In the `/lib/systemd/system/cups.path` file, we see this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `/lib/systemd/system/cups.path` 文件中，我们看到：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `PathExists=` line tells `systemd` to monitor a specific file for changes,
    which in this case is the `/var/cache/cups/org.cups.cupsd` file. If `systemd`
    detects any changes to this file, it will activate the printing service.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`PathExists=` 行告诉 `systemd` 监控特定文件的变化，在这个例子中是 `/var/cache/cups/org.cups.cupsd`
    文件。如果 `systemd` 检测到此文件的变化，它将激活打印服务。'
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: All right, we've made it through another chapter, which is a good thing. In
    this chapter, we examined the structure of the service, socket, and path unit
    files. We saw the three sections of each type of unit and looked at some of the
    parameters that we can define for each of those sections. Of course, it's pretty
    much impossible to explain every single available parameter, so I've just shown
    you a few examples. And I'll show you more examples in the next few chapters.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，我们又完成了一个章节，这是件好事。在本章中，我们研究了服务、套接字和路径单元文件的结构。我们看到了每种类型单元的三个部分，并查看了一些可以为这些部分定义的参数。当然，解释每个可用参数几乎是不可能的，所以我只展示了几个例子。接下来的几个章节中，我会给你更多的例子。
- en: An important skill for any IT administrator is knowing how to look up things
    that you don't know. That can be a bit of a challenge with `systemd`, because
    things are spread out over quite a few man pages. I've given you some tips on
    how to use the man pages to find what you need, which will hopefully be of some
    help.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 任何 IT 管理员都应该具备的一个重要技能是知道如何查找自己不知道的内容。对于 `systemd` 来说，这可能有点挑战性，因为相关信息分布在多个手册页中。我已经为你提供了一些查阅手册页的技巧，希望能帮到你。
- en: The next skill you'll want to acquire is that of controlling service units,
    which is the topic of the next chapter. I'll see you there.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来你需要掌握的技能是控制服务单元，这是下一章的主题。我们在那里见。
- en: Questions
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which kind of unit monitors files and directories for changes?
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪种单元用于监控文件和目录的变化？
- en: a. system
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. system
- en: b. file
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. 文件
- en: c. path
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. 路径
- en: d. timer
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. 定时器
- en: e. service
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: e. 服务
- en: 'A socket unit can:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 套接字单元可以：
- en: a. automatically notify the user if a network request comes in
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 如果有网络请求进入，自动通知用户
- en: b. automatically set up communication between Linux and Windows machines
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. 自动设置Linux和Windows机器之间的通信
- en: c. listen for network connections, and act as a firewall
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. 监听网络连接，并充当防火墙
- en: d. automatically start a network service when it detects a connection request
    for that service
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. 在检测到对该服务的连接请求时自动启动网络服务
- en: What is the purpose of the `[Install]` section?
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[Install]` 部分的目的是什么？'
- en: a. It defines what other packages are to be installed when you install a service.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 它定义了在安装服务时需要安装的其他软件包。
- en: b. It defines what happens when you enable or disable a unit.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. 它定义了启用或禁用单元时发生的情况。
- en: c. It defines parameters that are specific to an install unit.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. 它定义了特定于安装单元的参数。
- en: d. It defines parameters that are specific to a service unit.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. 它定义了特定于服务单元的参数。
- en: Answers
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: c
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: c
- en: d
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: d
- en: b
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: b
- en: Further reading
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: '`Systemd` socket units:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`Systemd` 套接字单元：'
- en: '[https://www.linux.com/training-tutorials/end-road-systemds-socket-units/](https://www.linux.com/training-tutorials/end-road-systemds-socket-units/)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.linux.com/training-tutorials/end-road-systemds-socket-units/](https://www.linux.com/training-tutorials/end-road-systemds-socket-units/)'
- en: 'The difference between `ListenStream``ListenDatagram=`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`ListenStream` 和 `ListenDatagram=` 的区别：'
- en: '[https://unix.stackexchange.com/questions/517240/systemd-socket-listendatagram-vs-listenstream](https://unix.stackexchange.com/questions/517240/systemd-socket-listendatagram-vs-listenstream)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://unix.stackexchange.com/questions/517240/systemd-socket-listendatagram-vs-listenstream](https://unix.stackexchange.com/questions/517240/systemd-socket-listendatagram-vs-listenstream)'
- en: 'Monitoring paths and directories:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 监控路径和目录：
- en: '[https://www.linux.com/topic/desktop/systemd-services-monitoring-files-and-directories/](https://www.linux.com/topic/desktop/systemd-services-monitoring-files-and-directories/)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.linux.com/topic/desktop/systemd-services-monitoring-files-and-directories/](https://www.linux.com/topic/desktop/systemd-services-monitoring-files-and-directories/)'
