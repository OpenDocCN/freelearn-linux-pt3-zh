- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exploring External Layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most charming features of Poky is the flexibility of using external
    layers. In this chapter, we will examine why this is a vital capability and how
    we can take advantage of it. We will also look at the different types of layers
    and their directory trees layout. Finally, at the end of this chapter, we will
    learn to include a new layer in our project.
  prefs: []
  type: TYPE_NORMAL
- en: Powering flexibility with layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Poky contains metadata spread over configuration definition files such as machine
    and distro files, classes, and recipes, covering everything from simple applications
    to full graphical stacks and frameworks. There are multiple places that BitBake
    can load metadata collection from, which are known as metadata layers.
  prefs: []
  type: TYPE_NORMAL
- en: The biggest strength of using layers is the ability to split metadata into logical
    units, which enables users to pick only the metadata collection needed for a project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using metadata layers enables us to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Improve code reuse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Share and scale work across different teams, communities, and vendors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increase the Yocto Project community’s code quality, as multiple developers
    and users focus together on a particular metadata layer that is of interest to
    them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can configure the system for different reasons, such as the need to enable/disable
    a feature or change build flags to enable architecture-specific optimizations.
    These are examples of customizations that can be done using layers.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, we should organize metadata in different layers instead of creating
    our custom project environment, changing recipes, and modifying files in the Poky
    layer. The more separated an organization is, the easier it is to reuse the layers
    in future projects, as the Poky source code is split into different layers as
    well. It contains three layers by default, as we can see in the output of the
    following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – The result of bitbake-layers show-layers](img/Figure_11.1_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – The result of bitbake-layers show-layers
  prefs: []
  type: TYPE_NORMAL
- en: 'The command-line output shows the following three essential properties of any
    layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '`meta` string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BBPATH` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.bbappend` files should be concatenated. It means that if two layers include
    the same recipe file (`.bb`), the one with the highest priority is used. In the
    case of `.bbappend`, every `.bbappend` file is included in the original recipe.
    The layer priority determines the order of inclusion, so the `.bbappend` files
    within the highest priority layers are appended first, followed by the others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking Poky as an example, it has three central individual layers. The `meta-yocto-bsp`
    layer is the Poky reference **Board Support Package** (**BSP**) layer. It contains
    machine configuration files and recipes to configure packages for the machines.
    As it is a reference BSP layer, it can be used as an example.
  prefs: []
  type: TYPE_NORMAL
- en: The `meta-poky` layer is the Poky reference distribution layer. It contains
    a distribution configuration used in Yocto Project by default. This default distribution
    is described in the `poky.conf` file, and it is widely used for testing products.
    It can be used as a starting point when designing your own distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Another kind of layer is the software layer, which includes only applications
    or configuration files for applications and can be used on any architecture. There
    is a massive list of software layers. To name only a few, we have `meta-java`,
    `meta-qt5`, and `meta-browser`. The `meta-java` layer provides Java runtime and
    SDK support, the `meta-qt5` layer includes Qt5 support, and `meta-browser` supports
    web browsers such as Firefox and Chrome.
  prefs: []
  type: TYPE_NORMAL
- en: The `meta` layer is the OpenEmbedded Core metadata, which contains the recipes,
    classes, and the QEMU machine configuration files. It can be considered a mixed
    layer type, as it has software collection, BSP definition, and the distribution
    used by Yocto Project as the baseline.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, your product may have special requirements, and changes in the `build/conf/local.conf`
    file will need to be made as required. The most adequate and maintainable solution
    is to create a distribution layer to place the distribution definition file.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The `build/conf/local.conf` file is a volatile file that is not supposed to
    be tracked by Git.
  prefs: []
  type: TYPE_NORMAL
- en: We should not rely on it to set package versions, providers, and the system
    features for products but use it instead just as a shortcut for testing purposes
    during development.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding adding custom settings in `build/conf/local.conf` helps to make our
    builds reproducible afterward.
  prefs: []
  type: TYPE_NORMAL
- en: Detailing a layer’s source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Usually, a layer has a directory tree, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2 – The standard layer layout](img/Figure_11.2_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – The standard layer layout
  prefs: []
  type: TYPE_NORMAL
- en: Inside this directory are two files, `<layer>/COPYING` and `<layer>/README`,
    a license and a message to a user respectively. In `<layer>/README`, we must specify
    any other dependency and information that the layer’s users need to know. The
    `meta-` prefix for the layer is not a requirement but a commonly used naming convention.
  prefs: []
  type: TYPE_NORMAL
- en: The `classes` folder should hold the classes specific to that layer (the `.bbclass`
    files). It is an optional directory.
  prefs: []
  type: TYPE_NORMAL
- en: The `<layer>/conf` folder is mandatory and should provide the configuration
    files (the `.conf` files). The layer configuration file, `<layer>/conf/layer.conf`,
    which will be covered in detail in the next chapter, is the file with the layer
    definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of the directory layout of the `<layer>/conf` folder is shown in
    *Figure 11**.2*, where **(a)** shows the structure for a BSP layer and **(b)**
    shows the structure for a distribution layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.3 – The <layer>/conf layout for BSP and distribution layers](img/Figure_11.3_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 – The <layer>/conf layout for BSP and distribution layers
  prefs: []
  type: TYPE_NORMAL
- en: 'The `recipe-*` folder is a cluster of recipes separated by category – for example,
    `recipes-core`, `recipes-bsp`, `recipes-graphic`, `recipes-multimedia`, and `recipes-kernel`.
    Inside each folder, starting with the `recipes-` prefix, there is a directory
    with the recipe name or a group of recipes. Inside it, the recipe files are placed,
    whose names end with `.bb` or `.bbappend`. For example, we can find the following
    screenshot from `meta` layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.4 – An example of the recipes-* layout](img/Figure_11.4_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.4 – An example of the recipes-* layout
  prefs: []
  type: TYPE_NORMAL
- en: Adding meta layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can find the most of available meta layers at [http://layers.openembedded.org](http://layers.openembedded.org).
    There are hundreds of meta layers from the Yocto Project, OpenEmbedded, communities,
    and companies that can be manually cloned inside the project source directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'To include, for example, `meta-oe` (one of the several meta layers inside the
    `meta-openembedded` repository) in our project, we can change the content of the
    configuration files or use BitBake command lines. However, we first need to fetch
    the layer’s source code. Run the following command from your Poky source directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.5 – Cloning the meta-openembedded layer](img/Figure_11.5_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.5 – Cloning the meta-openembedded layer
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to modify the `build/conf/bblayer.conf` file to add the layer location,
    using its absolute path. See **line 12** in *Figure 11**.6* as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.6 – The content of build/conf/bblayers.conf after including the
    meta-openembedded layer](img/Figure_11.6_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.6 – The content of build/conf/bblayers.conf after including the meta-openembedded
    layer
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, we can use the `bitbake-layers` tool to perform the inclusion
    for us. This can be done using the following command from the `build` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.7 – The command line to add the layer location](img/Figure_11.7_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.7 – The command line to add the layer location
  prefs: []
  type: TYPE_NORMAL
- en: The Yocto Project layer ecosystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is convenient to create a layer. To make all the available layers easier
    to access, the OpenEmbedded community has developed an index, available at http://layers.openembedded.org,
    where most of them can be found. An example of its **Layers** tab is shown as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.8 – The OpenEmbedded Layer Index for Kirkstone](img/Figure_11.8_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.8 – The OpenEmbedded Layer Index for Kirkstone
  prefs: []
  type: TYPE_NORMAL
- en: 'Another convenient use case for the OpenEmbedded Layer Index website is to
    search for a specific software type or recipe. The OpenEmbedded Layer Index can
    save the day by allowing us to search for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `bitbake-layers` tool also supports the use of the OpenEmbedded Layer Index.
    For example, to add the `meta-oe` layer, we can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.9 – Fetching a layer from the OpenEmbedded Layer index](img/Figure_11.9_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.9 – Fetching a layer from the OpenEmbedded Layer index
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced the concept of layering. We learned about the
    directory structure in detail and the content in each layer type. In addition,
    we saw how to add an external layer to our project manually or by using the BitBake
    command line, as well as how to use the OpenEmbedded Layer index to find the available
    layers we need easily.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn more about why we need to create new layers
    and what the common metadata included in them is (such as machine definition files,
    recipes, and images). We will wrap it all up with an example of distribution customization.
  prefs: []
  type: TYPE_NORMAL
