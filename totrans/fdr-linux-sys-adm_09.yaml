- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Network and Connectivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it’s time to review the basics of network configuration and management
    on our workstation. This will lead to us knowing about the fundamental points
    that can be adjusted and fine-tuned in the network configuration. We will get
    to know in depth about the **NetworkManager** administration tool, as well as
    the most common tips and examples regarding its use.
  prefs: []
  type: TYPE_NORMAL
- en: We will also walk through the wired and wireless network configuration. In the
    next section, we will review how to access a **virtual private network** (**VPN**).
    Finally, we will learn about the tools for monitoring network performance and
    connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Walking through the basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tuning wireless connectivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving network connectivity using a VPN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network performance monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s get to it!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The configurations mentioned in this chapter require access to the local network,
    either wired or wireless. It is not necessary to have a dedicated network interface
    for these tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the templates and example files used in this chapter in this book’s
    GitHub repository: [https://github.com/PacktPublishing/Fedora-Linux-System-Administration/tree/main/chapter5](https://github.com/PacktPublishing/Fedora-Linux-System-Administration/tree/main/chapter5)'
  prefs: []
  type: TYPE_NORMAL
- en: Walking through the basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NetworkManager uses the concept of *connection profiles*, which contain the
    network configuration. These profiles support a variety of formats for storing
    properties, such as `int32`, `boolean`, `uint32`, `string`, `array of string`,
    `uint64`, and many more. As NetworkManager’s usage and features grow, `ifcfg`
    files may no longer be supported.
  prefs: []
  type: TYPE_NORMAL
- en: NetworkManager uses plugins to read and write this data. NetworkManager added
    support for new connection types and finally settled on using a more streamlined
    configuration file format for it, known as the `keyfile` plugin.
  prefs: []
  type: TYPE_NORMAL
- en: The `keyfile` plugin supports all connection types and capabilities that NetworkManager
    has. NetworkManager uses the *INI-key* file format to store connection profile
    data.
  prefs: []
  type: TYPE_NORMAL
- en: This plugin always remains active and stores any connection that no other active
    plugin supports. For security, it ignores files that could be read or written
    by any *non-root* user since private keys and passwords might be stored in plain
    text inside the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take an example of an Ethernet connection profile to understand plugins
    better:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: It consists of sections (groups) of key-value pairs that correspond to a configuration
    name, which is described as a property. Most of the properties in the specification
    are also written in the same format in the key file. However, some values are
    unfriendly to use. These are stored in the files listed at `/etc/NetworkManager/system-connections/`,
    `/usr/lib/NetworkManager/system-connections/` and `/run/NetworkManager/system-connections/`,
    in a more readable form.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the **Description of keyfile settings** plugin, refer
    to the *GNOME Developer Documentation* at [https://developer-old.gnome.org/NetworkManager/stable/nm-settings-keyfile.html](https://developer-old.gnome.org/NetworkManager/stable/nm-settings-keyfile.html).
  prefs: []
  type: TYPE_NORMAL
- en: Like any file in Linux, keyfiles can be modified, but NetworkManager must know
    about these changes so that they can be considered.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s review the utility that helps us handle NetworkManager and network
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: NetworkManager command-line interface (nmcli)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NetworkManager can be managed by the `nmcli` command-line utility (`nmcli` allows
    us to create, display, edit, delete, activate, and deactivate network connections.
    Besides controlling and displaying the status of network devices, it can run as
    a command from the terminal or be invoked from a script.
  prefs: []
  type: TYPE_NORMAL
- en: As a command running from the terminal, `nmcli` can create, edit, start, and
    stop network connections or display a network device’s status, without the need
    for the GUI or desktop applet.
  prefs: []
  type: TYPE_NORMAL
- en: For scripts, `nmcli` provides a simple output format that can be adapted to
    data processing, which integrates network configurations into a process rather
    than managing network connections manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic `nmcli` command run format is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For a complete list of options, from the terminal, run the **man** **nmcli**
    command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, to get the connection overview, run the `nmcli -o` `conn` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Overview of network connections](img/B19121_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – Overview of network connections
  prefs: []
  type: TYPE_NORMAL
- en: 'To get an overview of the `enp1s0` network device, run the `nmcli -o dev show`
    `enp1s0` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Overview of the network device](img/B19121_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – Overview of the network device
  prefs: []
  type: TYPE_NORMAL
- en: 'You can list the `nmcli -f TYPE,FILENAME,NAME` `conn` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Checking the network connection keyfiles](img/B19121_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – Checking the network connection keyfiles
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, observe that the *IP address* of the workstation is set to `auto`,
    meaning that it uses DHCP as the boot-time protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: cat /run/NetworkManager/system-connections/Wired\ connection\ 1.nmconnection
    >>  wired_connection_1.bkp.txt
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: nmcli connection add con-name wired-conn1
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: ifname enp1s0 type ethernet
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: nmcli connection modify wired-conn1
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: ipv4.addresses 192.168.122.100/24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: nmcli connection modify wired-conn1
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: ipv4.method manual
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: nmcli connection modify wired-conn1  ipv4.gateway 192.168.122.1
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: nmcli connection modify wired-conn1  ipv4.dns 192.168.122.1
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[root@workstation ~]# nmcli connection up wired-conn1'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[root@workstation ~]# nmcli device status'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[root@workstation ~]# ip a'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: nmcli -f TYPE,FILENAME,NAME conn
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: < id=Wired connection 1
  prefs: []
  type: TYPE_NORMAL
- en: < uuid=0938b01a-f879-3f76-a796-b3f856dc27ac
  prefs: []
  type: TYPE_NORMAL
- en: '---'
  prefs: []
  type: TYPE_NORMAL
- en: id=wired-conn1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: uuid=uuid) for this connection profile. This allows multiple connections to
    be applied to the same device, but only one of these can be activated at a time.
    Extra connections allow you to quickly switch between different networks or configurations.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The connection was *auto-configured* during installation as DHCP. Since this
    parameter remained unchanged during installation, one of the properties that were
    assigned by the boot-time protocol was *auto-connection priority*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '< ipv4 configuration section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '00:00.0 PCI bridge [0604]: Broadcom Inc. and subsidiaries BCM2711 PCIe Bridge
    [14e4:2711] (rev 10)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '"14e4 2711" site:cateee.net/lkddb/'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[root@workstation ~]# lspci | grep -i broadcom'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '00:00.0 PCI bridge: Broadcom Inc. and subsidiaries BCM2711 PCIe Bridge (rev
    10)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '00:00.0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[root@workstation ~]# lspci -vv -s 00:00.0'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '00:00.0 PCI bridge: Broadcom Inc. and subsidiaries BCM2711 PCIe Bridge (rev
    10) (prog-if 00 [Normal decode])'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Device tree node: /sys/firmware/devicetree/base/scb/pcie@7d500000/pci@0,0'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Control: I/O- Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr- Stepping-
    SERR- FastB2B- DisINTx-'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Status: Cap+ 66MHz- UDF- FastB2B- ParErr- DEVSEL=fast >TAbort- <TAbort- <MAbort-
    >SERR- <PERR- INTx-'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Latency: 0'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Interrupt: pin A routed to IRQ 38'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...output omitted...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: root@workstation ~]# lsmod | grep -i broadcom
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: broadcom               28672  1
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: bcm_phy_ptp            24576  1 broadcom
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: bcm_phy_lib            28672  2 bcm_phy_ptp,broadcom
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[root@workstation ~]# modinfo broadcom'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: filename:       /lib/modules/6.1.12-200.fc37.aarch64/kernel/drivers/net/phy/broadcom.ko.xz
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: license:        GPL
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: author:         Maciej W. Rozycki
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: description:    Broadcom PHY driver
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...output omitted...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: depends:        bcm-phy-lib,bcm-phy-ptp
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: intree:         Y
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: name:           broadcom
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: vermagic:       6.1.12-200.fc37.aarch64 SMP preempt
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mod_unload aarch64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sig_id:         PKCS#7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: signer:         Fedora kernel signing key
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sig_key:        4C:FF:C2:28:93:D4:32:A9:E6:E0:32:6A:D9:B0
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...output omitted...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: nmcli device wifi connect [SSID] password [SSID-password]
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[root@workstation ~]# iw wlan0 link'
  prefs: []
  type: TYPE_NORMAL
- en: Connected to 2c:58:4f:7c:4a:1b (on wlan0)
  prefs: []
  type: TYPE_NORMAL
- en: 'SSID: innsmouth'
  prefs: []
  type: TYPE_NORMAL
- en: 'freq: 2462'
  prefs: []
  type: TYPE_NORMAL
- en: 'RX: 1817351 bytes (8922 packets)'
  prefs: []
  type: TYPE_NORMAL
- en: 'TX: 806585 bytes (3517 packets)'
  prefs: []
  type: TYPE_NORMAL
- en: 'signal: -38 dBm'
  prefs: []
  type: TYPE_NORMAL
- en: 'rx bitrate: 58.5 MBit/s'
  prefs: []
  type: TYPE_NORMAL
- en: 'tx bitrate: 72.2 MBit/s'
  prefs: []
  type: TYPE_NORMAL
- en: bss flags:     short-preamble
  prefs: []
  type: TYPE_NORMAL
- en: dtim period:     1
  prefs: []
  type: TYPE_NORMAL
- en: beacon int:     100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: watch -n 1 cat /proc/net/wireless
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[root@workstation ~]# firewall-cmd --state'
  prefs: []
  type: TYPE_NORMAL
- en: 'firewall-cmd --list-all command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: ss -tulpn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[root@workstation ~]# firewall-cmd --permanent  --delete-service={dhcpv6-client,mdns,samba-client}'
  prefs: []
  type: TYPE_NORMAL
- en: 'Error: BUILTIN_SERVICE: ''dhcpv6-client'' is built-in service'
  prefs: []
  type: TYPE_NORMAL
- en: 'Error: BUILTIN_SERVICE: ''mdns'' is built-in service'
  prefs: []
  type: TYPE_NORMAL
- en: 'Error: BUILTIN_SERVICE: ''samba-client'' is built-in service'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[root@workstation ~]# firewall-cmd --permanent  --remove-port={1025-65535/udp,1025-65535/tcp}'
  prefs: []
  type: TYPE_NORMAL
- en: Success
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[root@workstation ~]# firewall-cmd --reload'
  prefs: []
  type: TYPE_NORMAL
- en: success
  prefs: []
  type: TYPE_NORMAL
- en: '[root@workstation ~]# firewall-cmd --list-all'
  prefs: []
  type: TYPE_NORMAL
- en: FedoraWorkstation (active)
  prefs: []
  type: TYPE_NORMAL
- en: 'target: default'
  prefs: []
  type: TYPE_NORMAL
- en: 'icmp-block-inversion: no'
  prefs: []
  type: TYPE_NORMAL
- en: 'interfaces: wlan0'
  prefs: []
  type: TYPE_NORMAL
- en: 'sources:'
  prefs: []
  type: TYPE_NORMAL
- en: 'services: dhcpv6-client mdns samba-client ssh'
  prefs: []
  type: TYPE_NORMAL
- en: 'ports:'
  prefs: []
  type: TYPE_NORMAL
- en: 'protocols:'
  prefs: []
  type: TYPE_NORMAL
- en: 'forward: yes'
  prefs: []
  type: TYPE_NORMAL
- en: 'masquerade: no'
  prefs: []
  type: TYPE_NORMAL
- en: 'forward-ports:'
  prefs: []
  type: TYPE_NORMAL
- en: 'source-ports:'
  prefs: []
  type: TYPE_NORMAL
- en: 'icmp-blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'rich rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[root@workstation ~]# dnf install NetworkManager-libreswan-gnome'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[root@workstation ~]# nmon command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[root@workstation ~]# dnf -y install bpytop'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[root@workstation ~]# bpytop'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
