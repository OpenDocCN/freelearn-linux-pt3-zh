- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Grasping the BitBake Tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about metadata, metadata collection concepts,
    and the importance of `conf/layer.conf`. In this chapter, we will examine metadata
    more deeply, understand how recipes depend on each other, and see how BitBake
    deals with dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, we will cover a massive list of tasks, from downloading source
    code to generating images and other artifacts. Some examples of these tasks are
    storing the source code in the directory used for the build, patching, configuring,
    compiling, installing, and generating packages, and determining how the packages
    fit into the generated images, which we will introduce in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Parsing metadata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Usually, our projects include multiple layers that provide different metadata
    to fulfill specific needs. For example, when we initialize a build directory,
    using `source oe-init-build-env build`, a set of files is generated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – A list of files created with source oe-init-build-env build](img/Figure_5.01_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – A list of files created with source oe-init-build-env build
  prefs: []
  type: TYPE_NORMAL
- en: The `build/conf/templateconf.cfg` file points to the directory used as the template
    to create the `build/conf` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: A user can provide a different template directory using the `TEMPLATECONF` environment
    variable – for example, `TEMPLATECONF=/some/dir source` `oe-init-build-env build`.
  prefs: []
  type: TYPE_NORMAL
- en: The `build/conf/local.conf` file is the placeholder for the local configurations.
    We used this file in [*Chapter 2*](B19361_02.xhtml#_idTextAnchor031), *Baking
    Our First Poky-Based System*, and we will use it throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'BitBake uses the `build/conf/bblayers.conf` file to list the layers considered
    in the build environment. An example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 5.2 – The build/conf/bblayer.conf content after \uFEFFthe source oe-init-build-env\
    \ build](img/Figure_5.02_B19361.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – The build/conf/bblayer.conf content after the source oe-init-build-env
    build
  prefs: []
  type: TYPE_NORMAL
- en: 'The `BBLAYERS` variable, on line 8, is a space-delimited list of layer directories.
    BitBake parses each layer to load its content to the metadata collection. There
    are three major categories that the metadata used by BitBake can be classified
    into. They are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration (the `.``conf` files)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classes (the `.``bbclass` files)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recipes (the `.bb` and `.``bbappend` files)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The order of the listed layers in the `BBLAYERS` variable is followed from left
    to right by BitBake when parsing the metadata. Therefore, if your layer needs
    to be parsed first, have it listed in the right place in the `BBLAYERS` variable.
  prefs: []
  type: TYPE_NORMAL
- en: After parsing all the layers in use, BitBake starts to parse the metadata. The
    first parsed metadata in BitBake is configuration metadata, identified by the
    `.conf` file extension. This metadata is global and, therefore, affects all executed
    recipes and tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: One typical example of the configuration file is the machine file, which has
    a list of settings that describes the hardware.
  prefs: []
  type: TYPE_NORMAL
- en: BitBake first loads `meta/conf/bitbake.conf` from one of the paths included
    in the `BBPATH` list. The `meta/conf/bitbake.conf` file uses `include` directives
    to pull in metadata, such as architecture-specific metadata, machine configuration
    files, and the `build/conf/local.conf` file. One significant restriction of BitBake
    configuration files (`.conf`) is that only variable definitions and `include`
    directives are allowed.
  prefs: []
  type: TYPE_NORMAL
- en: BitBake’s classes (`.bbclass`) are a rudimentary inheritance mechanism in the
    `classes/` directories. When an `inherit` directive appears during parsing, BitBake
    immediately parses the linked class. The class content is searched based on the
    order of the `BBPATH` variable list.
  prefs: []
  type: TYPE_NORMAL
- en: The `BBFILES` variable is a space-separated list of the `.bb` and `.bbappend`
    files and can use wildcards. It is required in every layer inside `conf/layer.conf`,
    so BitBake knows where to look for recipes. A BitBake recipe (`.bb`) is a logical
    unit of tasks to be executed; typically, it refers to a package.
  prefs: []
  type: TYPE_NORMAL
- en: Dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the BitBake point of view, there are three different dependency types:'
  prefs: []
  type: TYPE_NORMAL
- en: Build time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execution time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An application that needs some other package, such as a library, has a build
    dependency for a successful compilation. Build dependencies include compilers.
    libraries, and native build tools (such as **CMake**). In addition, a build dependency
    has an execution dependency whenever an application is needed only during execution
    time. Runtime dependencies include fonts, icons, dynamically opened libraries,
    and language interpreters.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The convention inside Poky is to use `-native` suffixes for recipe names. This
    is because those tools are aimed to be run during the build process, in the host
    building system, and are not deployed into the target.
  prefs: []
  type: TYPE_NORMAL
- en: The task dependencies create order in the chaos of task execution – for example,
    to compile a package, the source code needs to be downloaded. Under the hood,
    all the dependencies are task dependencies. This means that when package `B` has
    a build-time dependency on package `A`, the tasks from package `A` need to be
    completed before package `B` starts.
  prefs: []
  type: TYPE_NORMAL
- en: Metadata expresses all the dependencies. OpenEmbedded Core provides a vast set
    of classes to handle the default task dependencies commonly used – for example,
    a recipe can express a build-time dependency with the `DEPENDS` variable and an
    execution-time dependence with the `RDEPENDS` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Knowing the recipe dependencies chain, BitBake can sort all the recipes for
    the build in a feasible order. BitBake organizes tasks in the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Recipe tasks that do not have a dependency relation are built in parallel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependent recipes are built in serial order and sorted in a way that satisfies
    the dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Every recipe included in the runtime dependencies is added to the build list.
    This sounds obvious, but even though they have no role during the build, they
    need to be ready for use so that the resulting binary packages are installable.
    This will be required when building images or populating feeds.
  prefs: []
  type: TYPE_NORMAL
- en: Preferring and providing recipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dependency is a relation between two things; one side can only be fulfilled
    if the other side exists. However, a dependency only specifies that some functionality
    or characteristic is needed to be fulfilled, not precisely how it must be fulfilled.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, when a recipe depends on `A`, the first thought is that it depends
    on a recipe called `A`. However, there are two possible ways to satisfy the dependency
    requirement of `A`:'
  prefs: []
  type: TYPE_NORMAL
- en: A recipe called `A`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A recipe that provides a functionality or characteristic called `A`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a recipe to communicate to BitBake that it can fulfill a functionality or
    characteristic requirement, it must use the `PROVIDES` keyword. A subtle consequence
    is that two or more recipes can deliver the same functionality or characteristic.
    We must inform BitBake which recipe should fulfill that requirement using the
    `PREFERRED_PROVIDER` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, if a recipe called `foo_1.0.bb` depends on `bar`, BitBake lists all recipes
    providing `bar`. The `bar` dependency can be satisfied by the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A recipe with the `bar_<version>.bb` format because every recipe provides itself
    by default
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A recipe where the `PROVIDES` variable includes `bar`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `virtual/kernel` provider is a clear example of this mechanism. The `virtual/`
    namespace is the convention adopted when we have a set of commonly overridden
    providers.
  prefs: []
  type: TYPE_NORMAL
- en: 'All recipes that require the kernel to be built can add `virtual/kernel` to
    the dependency list (`DEPENDS`), and BitBake satisfies the dependency. When we
    have more than one recipe with an alternative provider, we must choose one to
    be used – for example, the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – An example of how to set a preferred provider for virtual/kernel](img/Figure_5.03_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – An example of how to set a preferred provider for virtual/kernel
  prefs: []
  type: TYPE_NORMAL
- en: The `virtual/kernel` provider is commonly set in the machine definition file,
    as it can vary from machine to machine. We will see how to create a machine definition
    file in [*Chapter 12*](B19361_12.xhtml#_idTextAnchor147), *Creating* *Custom Layers*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: BitBake raises an error when a dependency cannot be satisfied due to a missing
    provider.
  prefs: []
  type: TYPE_NORMAL
- en: When BitBake has two providers with different versions, it uses the highest
    version by default. However, we can force BitBake to use a different version by
    using `PREFERRED_VERSION`. This is common in BSPs, such as bootloaders, where
    vendors may use specific versions for a board.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can avoid using a development or an unreliable recipe version, by default,
    lowering the version preference by using the `DEFAULT_PREFERENCE` keyword in a
    recipe file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – How to lower the version preference in a recipe](img/Figure_5.04_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.4 – How to lower the version preference in a recipe
  prefs: []
  type: TYPE_NORMAL
- en: So, even if the version is higher, the recipe is not choosen without `PREFERRED_VERSION`
    being explicitly set to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching the source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we download the Poky source code, we download the metadata collection and
    the BitBake tool. One of the main features supported by BitBake is additional
    source code fetching.
  prefs: []
  type: TYPE_NORMAL
- en: The ability of fetching external source code is as modular and flexible as possible.
    For example, every Linux-based system includes the Linux kernel and several other
    utilities that form the `root` filesystem, such as OpenSSH or BusyBox.
  prefs: []
  type: TYPE_NORMAL
- en: The OpenSSH source code is available from its upstream website as a `tar.gz`
    file hosted on an HTTP server, while the Linux kernel release is in a Git repository.
    Therefore, BitBake can easily fetch those two different instances of source code.
  prefs: []
  type: TYPE_NORMAL
- en: 'BitBake offers support for many different fetcher modules that allow the retrieval
    of tarball files and several other SCM systems, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Amazon AWS S3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android repo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bazaar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ClearCase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CVS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git Annex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git submodules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP(S)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mercurial
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NPM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NPMSW (`npm` `shrinkwrap` implementation)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: openSUSE Build Service client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perforce
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rust Crate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SFTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subversion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mechanism used by BitBake to fetch the source code is internally called
    a fetcher backend, which is configurable to align a user’s requirements and optimize
    fetching the source code.
  prefs: []
  type: TYPE_NORMAL
- en: Remote file downloads
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: BitBake supports several methods for remote file downloads. The most commonly
    used are `http://`, `https://`, and `git://`. We won’t cover the internal details
    of how BitBake handles remote file downloads and will instead focus on its visible
    effects.
  prefs: []
  type: TYPE_NORMAL
- en: 'When BitBake executes the `do_fetch` task in a recipe, it checks the `SRC_URI`
    contents. Let’s look at, for example, the `pm-utils` recipe (available at `meta/recipes-bsp/pm-utils/pm-utils_1.4.1.bb`).
    The processed variables are shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 5.5 – \uFEFF\uFEFFSRC_URI for the pm-utils_1.4.1.bb recipe \uFEFF\
    ](img/Figure_5.05_B19361.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 5.5 – SRC_URI for the pm-utils_1.4.1.bb recipe
  prefs: []
  type: TYPE_NORMAL
- en: BitBake expands the `PV` variable to the package version (`1.4.1` in this example
    is taken from the `pm-utils_1.4.1.bb` recipe filename) to download the file from
    [http://pm-utils.freedesktop.org/releases/pm-utils-1.4.1.tar.gz](http://pm-utils.freedesktop.org/releases/pm-utils-1.4.1.tar.gz),
    and then saves it as `DL_DIR`, which points to the download storage directory.
  prefs: []
  type: TYPE_NORMAL
- en: After the download is complete, BitBake compares the `sha256sum` value of the
    downloaded file with the value from the recipe. If the value matches, it creates
    a `${DL_DIR}/pm-utils-1.4.1.tar.gz.done` file to mark the file as successfully
    downloaded and checked, allowing BitBake to reuse it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: By default, the `DL_DIR` variable points to `build/downloads`. You can override
    this by adding to the `build/conf/local.conf` file the following line – `DL_DIR
    = "/my/download-cache"`. Using this, we can share the same download cache among
    several build directories, thus saving download time and bandwidth.
  prefs: []
  type: TYPE_NORMAL
- en: Git repositories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the most commonly used source control management systems is Git. BitBake
    has solid support for Git, and the Git backend is used when the `do_fetch` task
    is run and finds a `git://` URL at the beginning of the `SRC_URI` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default way for BitBake’s Git backend to handle the repositories is to
    clone the repository in `${DL_DIR}/git2/<git URL>` – for example, check the following
    quote from the `lz4_1.9.4.bb` recipe found in `meta/recipes-support/lz4/lz4_1.9.4.bb`
    inside Poky:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Source code download configuration for the lz4_1.9.4.bb recipe](img/Figure_5.06_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6 – Source code download configuration for the lz4_1.9.4.bb recipe
  prefs: []
  type: TYPE_NORMAL
- en: Here, the `lz4.git` repository is cloned in `${DL_DIR}/git2/ github.com.lz4.lz4.git`.
    This directory name avoids conflicts between possible Git repositories with the
    same project name.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two cases where the `SRCREV` variable has an impact. They are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`do_fetch`: This task uses the `SRCREV` variable to ensure the repository has
    the required Git revision'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_unpack`: This task uses `SRCREV` to set up the working directory with the
    necessary source revision'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We need to use the `branch=<branch name>` parameter as follows – `SRC_URI =
    "git://myserver/myrepo.git;branch=mybranch"` – to specify the branch that contains
    the revision we want to use. In cases when the hash used points to a tag that
    is not available on a branch, we need to use the `nobranch=1` option as follows
    – `SRC_URI = "``git://myserver/myrepo.git;nobranch=1"`.
  prefs: []
  type: TYPE_NORMAL
- en: The remote file and the Git repository are the most commonly used fetch backends
    of BitBake. The other source code management-supported systems vary in their implementations,
    but the general ideas and concepts are the same.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing the source code download
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To improve the robustness of source code download, Poky provides a mirror mechanism
    that can provide the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A centrally preferred server for download
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A set of fallback servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To provide this robust download mechanism, BitBake follows defined logic steps.
    During the build, the first BitBake step is to search for the source code within
    the local download directory (specified by `DL_DIR`). If this fails, the next
    step is to try the locations defined by the `PREMIRRORS` variable. Finally, BitBake
    searches the locations specified in the `MIRRORS` variable in a failure case.
    In summary, these steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DL_DIR`: Look for the download on the host machine.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`MIRRORS`: Search for the download in a list of mirrors.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`PREMIRRORS`: This is used to reduce the download from external servers and
    is usually used inside companies to reduce or forbid internet use.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For example, when configuring a local server, `https://mylocalserver`, as `PREMIRROR`,
    we can add the following code to a global configuration file, such as `build/conf/local.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – An example of the PREMIRRORS configuration](img/Figure_5.07_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.7 – An example of the PREMIRRORS configuration
  prefs: []
  type: TYPE_NORMAL
- en: The preceding code prepends the `PREMIRRORS` variable to change and instructs
    the build system to intercept any download requests. It redirects them to the
    `https://mylocalserver` source’s mirror.
  prefs: []
  type: TYPE_NORMAL
- en: This use of `PREMIRRORS` is so common that there is a class to help its configuration.
    To make it easier, we inherit the `own-mirror` class and then set the `SOURCE_MIRROR_URL`
    variable to `https://mylocalserver` in any global configuration file, such as
    `build/conf/local.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – How to configure own-mirror](img/Figure_5.08_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.8 – How to configure own-mirror
  prefs: []
  type: TYPE_NORMAL
- en: 'If the desired component is unavailable in the source mirror, BitBake falls
    back to the `MIRRORS` variable. An example of the content of this variable is
    shown in the following figure. It shows some servers used in `mirrors.bbclass`,
    inherited by default in Poky:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9 – An example of how to use the MIRRORS variable](img/Figure_5.09_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.9 – An example of how to use the MIRRORS variable
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Let’s suppose the goal is to have a shareable download cache. In that case,
    it is advisable to enable the tarball generation for the SCM backends (for example,
    Git) in the download folder with `BB_GENERATE_MIRROR_TARBALLS = "1"` in `build/conf/local.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling network access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, we need to ensure that we don’t connect to the internet during the
    build process. There are several valid reasons for this, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Policy**: Our company does not allow the inclusion of external sources in
    a product without proper legal validation and review.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network cost**: When we are on the road using mobile broadband, the cost
    of data may be too high because the data to download may be extensive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Download and build decoupling**: This setup is typical in continuous integration
    environments, where a job is responsible for downloading all the required source
    code. In contrast, the build jobs have internet access disabled. The decoupling
    between downloading and building ensures that no source code is downloaded in
    duplication and that we have cached all the necessary source code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lack of network access**: Sometimes, we do not have access to a network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To disable the network connection, we need to add the following code in the
    `build/conf/local.conf` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10 – How to disable network access during the build](img/Figure_5.10_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.10 – How to disable network access during the build
  prefs: []
  type: TYPE_NORMAL
- en: Understanding BitBake’s tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: BitBake uses execution units, which are, in essence, a set of clustered instructions
    that run in sequence. These units are known as **tasks**. During every recipe’s
    build, BitBake, schedules, executes, and checks many tasks provided by classes
    to form the framework we use to build a recipe. Therefore, it is essential to
    understand some of these, as we often use, extend, implement, or replace them
    ourselves when writing a recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we run the following command, BitBake runs a set of scheduled tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11 – How to run all tasks for a recipe](img/Figure_5.11_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.11 – How to run all tasks for a recipe
  prefs: []
  type: TYPE_NORMAL
- en: 'When we wish to run a specific task, we can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.12  – How to run a particular task for a recipe](img/Figure_5.12_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.12 – How to run a particular task for a recipe
  prefs: []
  type: TYPE_NORMAL
- en: 'To list the tasks defined for a recipe, we can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.13  – How to list all tasks for a recipe](img/Figure_5.13_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.13 – How to list all tasks for a recipe
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of `listtasks` for the `wget` recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.14 – The list of tasks for the wget recipe](img/Figure_5.14_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.14 – The list of tasks for the wget recipe
  prefs: []
  type: TYPE_NORMAL
- en: 'We will briefly describe the most commonly used tasks here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`do_fetch`: The first step when building a recipe is fetching the required
    source using the fetching backends feature, which we discussed previously in this
    chapter. It is essential to note that fetching a source or a file does not mean
    it is a remote source.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_unpack`: The subsequent natural task after the `do_fetch` task is `do_unpack`.
    This is responsible for unpacking source code or checking out the requested revision
    or branch in case the referenced source uses an SCM system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_patch`: Once the source code is properly unpacked, BitBake initiates adapting
    the source code. Every file fetched by `do_fetch`, with the `.patch` extension,
    is assumed to be a patch to be applied. This task applies the list of patches
    needed. The final modified source code will be used to build the package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_configure`, `do_compile`, and `do_install`: The `do_configure`, `do_compile`,
    and `do_install` tasks are performed in this order. It is important to note that
    the environment variables defined in the tasks are different from one task to
    another. Poky provides a rich collection of predefined tasks in the classes, which
    we ought to use when possible – for example, when a recipe inherits the `autotools`
    class, it provides a known implementation of the `do_configure`, `do_compile`,
    and `do_install` tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_package`: The `do_package` task splits the files installed by the recipe
    into logical components, such as debugging symbols, documentation, and libraries.
    We will cover packaging details in more depth in [*Chapter 7*](B19361_07.xhtml#_idTextAnchor097),
    *Assimilating* *Package Support*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how recipes depend on each other and how Poky deals
    with dependencies. We understood how a download is configured and how to optimize
    it. In addition, we got a better view of the tasks managed by BitBake to download
    all the required source code and use it to build and generate packages.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see the contents of the build directory after complete
    image generation and learn how BitBake uses it in the baking process, including
    the contents of the temporary build directory and its generated files.
  prefs: []
  type: TYPE_NORMAL
