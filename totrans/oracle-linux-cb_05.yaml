- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Software Management with DNF
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 DNF 进行软件管理
- en: Without packages, a fresh Linux installation is about as useful as a car with
    no tires! You need to be able to add software to the system to make it useful.
    This can be done in several ways. Back in the old days (hey, I am a true gray-bearded
    Unix/Linux guy), you used to download the source files and then build and install
    them manually. On occasion, you could get prebuilt packages but, often, the dependencies
    that were required would take hours to run down manually. Then, in 1997, along
    came **Red Hat Package Manager** (**RPM**) files. These really simplified the
    process, as all you needed to do was track down all the RPM files needed to install
    an application, and off you went.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 没有包，一个全新的 Linux 安装几乎和没有轮胎的汽车一样没用！你需要能够为系统添加软件，使它变得有用。这可以通过几种方式来完成。回到旧时光（嘿，我可是个真正的灰胡子
    Unix/Linux 人），你曾经需要下载源文件，然后手动构建和安装。有时你可以获得预构建的包，但通常，所需的依赖关系需要花费数小时才能手动追踪下来。然后，在
    1997 年，**Red Hat Package Manager**（**RPM**）文件问世了。它们简化了这个过程，因为你所需要做的就是找到安装应用程序所需的所有
    RPM 文件，然后就能开始了。
- en: Then, the applications started getting more complex; an example is the Apache
    HTTP server – all of its optional features went from 2-3 RPMs to a dozen, plus
    all the required dependencies. Tracking down all the RPMs and their dependencies
    became a chore… and due to mismatched versions, chaos quickly took control. This
    came to a screeching halt when **Yellowdog Updater, Modified** (**YUM**) was released
    in 2003\. Now you could have a centralized location for all of the RPMs, with
    an easy way to install and patch the packages and all of the dependencies. **Red
    Hat Enterprise Linux** (**RHEL**) moved to YUM, and life was good.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，应用程序开始变得更加复杂；以 Apache HTTP 服务器为例——它的所有可选功能从 2-3 个 RPM 包增加到十多个，还有所有的依赖关系。追踪所有的
    RPM 包及其依赖关系变得非常繁琐……由于版本不匹配，混乱迅速占据了主导地位。这一切在 2003 年 **Yellowdog Updater, Modified**（**YUM**）发布时戛然而止。现在，你可以为所有
    RPM 包设置一个集中位置，轻松安装和修补这些包及所有依赖关系。**Red Hat Enterprise Linux**（**RHEL**）迁移到了 YUM，生活变得美好。
- en: Note
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: YUM replaced **Yellowdog Update Program** (**YUP**), which was the original
    tool used by Yellowdog Linux for the installer. Yellowdog Linux was a Linux distribution
    built for the POWER7 CPU used on the PlayStation 3 and IBM systems and was CentOS/RHEL
    based. While it died in 2012, it lives on with YUM.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: YUM 替代了**Yellowdog Update Program**（**YUP**），后者是 Yellowdog Linux 使用的原始安装工具。Yellowdog
    Linux 是一款为 PlayStation 3 和 IBM 系统上的 POWER7 CPU 构建的 Linux 发行版，基于 CentOS/RHEL。尽管它在
    2012 年停止更新，但它仍通过 YUM 继续存在。
- en: Linux distributions (such as RHEL and Oracle Linux) maintained YUM servers specific
    to their distribution online, but what if you could build your own RPM packages
    and maintain your own RPM repositories? What if these custom RPMs could be used
    to deploy internally built applications, and also make the required configuration
    changes so they run as expected? This chapter covers the management of RPM files,
    from moving from the `yum` command to the `dnf` command to managing RPMs, creating
    private RPM repositories, and making new RPMs.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 发行版（如 RHEL 和 Oracle Linux）为特定的发行版在线维护 YUM 服务器，但如果你能够构建自己的 RPM 包并维护自己的
    RPM 仓库呢？如果这些自定义 RPM 包可以用来部署内部构建的应用程序，并且进行所需的配置更改，使它们按预期运行呢？本章讲解了 RPM 文件的管理，从 `yum`
    命令到 `dnf` 命令的过渡，管理 RPM 包，创建私人 RPM 仓库，并制作新的 RPM 包。
- en: 'This chapter contains the following recipes:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含以下内容：
- en: What have they done to YUM, moving to DNF?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们对 YUM 做了什么，转向 DNF？
- en: Using the DNF time machine
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 DNF 时间机器
- en: Building a DNF/YUM mirror from ULN
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 ULN 构建 DNF/YUM 镜像
- en: Creating a new RPM package
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新的 RPM 包
- en: What have they done to YUM, moving to DNF?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 他们对 YUM 做了什么，转向 DNF？
- en: YUM was good – it worked and it allowed admins to easily install and patch software.
    You could even use it to roll back a bad installation. So, what happened to it?
    Why was DNF released? What is DNF and how hard will it be to learn a new tool?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: YUM 很好——它有效，且允许管理员轻松安装和修补软件。你甚至可以用它来回滚一个不良的安装。那么，发生了什么？为什么会发布 DNF？什么是 DNF，学习新工具会有多难？
- en: First, **DNF** stands for **Dandified YUM** and is a rewrite of the YUM software.
    It was released in 2013 in Fedora 18 and was built to address many issues that
    YUM was starting to face.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，**DNF** 代表 **Dandified YUM**，是对 YUM 软件的重写。它在 2013 年的 Fedora 18 中发布，旨在解决 YUM
    开始面临的许多问题。
- en: 'The two most common problems with YUM were performance and RAM usage:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: YUM 的两个最常见问题是性能和内存使用：
- en: '**Poor performance**: YUM had performance issues. A lot of this was caused
    by dependency resolution, the process in which all the packages and their dependencies
    are put together. This process could take as long as 10 minutes. DNF moved to
    libsolv, which significantly decreased the time to resolve complex dependencies.
    This is now more common that ever, with some applications requiring 30+ RPMs.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能差**：YUM 存在性能问题。许多问题是由依赖关系解析引起的，这一过程将所有包及其依赖项组合在一起。这个过程可能需要长达 10 分钟。DNF
    切换到 libsolv，大大减少了解决复杂依赖关系的时间。如今，这种情况越来越普遍，有些应用程序需要 30 个以上的 RPM。'
- en: '**High RAM usage**: YUM uses a lot of RAM; this really started to become an
    issue with RHEL/CentOS 7, with smaller servers often running out of RAM while
    updating.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高内存使用**：YUM 使用大量内存；这个问题在 RHEL/CentOS 7 中变得尤为明显，较小的服务器在更新时经常会耗尽内存。'
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: DNF changes are not just in performance; there are also some key differences
    in its behavior. In order to test these changes, you will need an Oracle Linux
    8 system and access to at least the free public repos, such as [https://yum.oracle.com](https://yum.oracle.com).
    You may also want to be running Oracle Linux in a virtualized environment where
    you can leverage snapshots to keep copies of the OS before and after a change.
    Oracle VM VirtualBox is a great way to do this.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: DNF 的变化不仅体现在性能上，还有一些行为上的关键差异。为了测试这些变化，你需要一个 Oracle Linux 8 系统，并访问至少免费的公共仓库，例如
    [https://yum.oracle.com](https://yum.oracle.com)。你还可以考虑在虚拟化环境中运行 Oracle Linux，这样可以利用快照在更改前后保留操作系统的副本。Oracle
    VM VirtualBox 是实现这一目标的好方法。
- en: How to do it…
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'For the most part, DNF and YUM work the same: `dnf install` and `yum install`
    appear to work the same way, but with DNF being faster. The same applies to `dnf
    upgrade` and `yum upgrade`, so you probably already know the basics.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，DNF 和 YUM 的工作方式相同：`dnf install` 和 `yum install` 看起来一样，但 DNF 更快。`dnf
    upgrade` 和 `yum upgrade` 也一样，所以你可能已经了解了基本的用法。
- en: In YUM, `update` and `upgrade` have slightly different behaviors, with `yum
    update` removing the older packages from the system. With DNF, both `update` and
    `upgrade` will update the installed software but the `upgrade` option will also
    remove the obsolete packages. Additionally, the `auto-remove` option will remove
    packages that are no longer required on the system.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在 YUM 中，`update` 和 `upgrade` 有略微不同的行为，`yum update` 会从系统中删除旧版包。而在 DNF 中，`update`
    和 `upgrade` 都会更新已安装的软件，但 `upgrade` 还会删除过时的包。此外，`auto-remove` 选项会删除系统中不再需要的包。
- en: Note
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Starting with Oracle Linux 8, the `yum` command is a `dnf` command.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Oracle Linux 8 开始，`yum` 命令变成了 `dnf` 命令。
- en: At this point in the development of DNF, most of the commands are the same,
    but DNF does have a few tricks up its sleeve, such as automatically running an
    update.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DNF 的开发过程中，大多数命令都是一样的，但 DNF 确实有一些特别的功能，比如自动运行更新。
- en: DNF automatic updates
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DNF 自动更新
- en: 'You can set up DNS to run automatically. To do this, install the `dnf-automatic`
    package, and enable the service with the following commands:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以设置 DNS 使其自动运行。为此，安装 `dnf-automatic` 包，并通过以下命令启用该服务：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, edit the `/etc/dnf/automatic.conf` file. There are a few tricks in this
    file. You can override whether patches are applied when downloaded by setting
    the `apply_updates` parameter to `yes`. This will force patches to be applied
    when the job runs.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，编辑 `/etc/dnf/automatic.conf` 文件。这个文件里有一些技巧。你可以通过将 `apply_updates` 参数设置为
    `yes` 来覆盖是否在下载时应用补丁。这样，当任务运行时，补丁就会被强制应用。
- en: Don’t forget to set the `system_name` parameter so that emails and notifications
    will have the correct name.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了设置 `system_name` 参数，这样电子邮件和通知中就会显示正确的名称。
- en: You can also set up the system to email you a report of what was installed.
    Set up email in the `[email]` stanza. If using an email relay, make sure it does
    not require authentication, or add that to the configuration if needed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以设置系统，通过电子邮件报告安装了哪些内容。在 `[email]` 配置段中设置电子邮件。如果使用邮件中继，确保它不需要身份验证，或者如果需要，添加相应的配置。
- en: 'As a final trick, you can change the `emit_via` parameter from `stdio` to `motd`.
    When set to `motd`, the system `motd` file is updated to reflect what patches
    were installed. When users log in to the system, they will see a complete list
    of what patches were installed and when, as shown in the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的技巧是，你可以将 `emit_via` 参数从 `stdio` 更改为 `motd`。设置为 `motd` 时，系统的 `motd` 文件会更新，显示已安装的补丁内容。用户登录系统时，会看到已安装的补丁列表和安装时间，示例如下截图：
- en: '![Figure 5.1 – MOTD on login](img/B18349_05_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – 登录时的MOTD](img/B18349_05_01.jpg)'
- en: Figure 5.1 – MOTD on login
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – 登录时的MOTD
- en: 'By default, the service checks for updates at 6 A.M. This can be changed by
    editing the `/``etc/systemd/system/timers.target.wants/dnf-automatic.timer` file:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，服务会在早上6点检查更新。你可以通过编辑`/etc/systemd/system/timers.target.wants/dnf-automatic.timer`文件来修改这个时间：
- en: '![Figure 5.2 – The dnf-automatic.timer file](img/B18349_05_02.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – dnf-automatic.timer 文件](img/B18349_05_02.jpg)'
- en: Figure 5.2 – The dnf-automatic.timer file
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – dnf-automatic.timer 文件
- en: In this file, the `[Timer]` stanza controls the time, as well as a randomized
    delay. To change when this runs, replace `6:00` with whatever time you want, in
    a 24-hour format. For example, if you want the check to run at 10 P.M., the time
    should be 22:00.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，`[Timer]` 段控制时间以及随机延迟。要更改运行时间，只需将`6:00`替换为你想要的时间，使用24小时制格式。例如，如果你希望检查时间为晚上10点，那么时间应该是22:00。
- en: 'Since this uses the standard `OnCalendar` function, you have other options.
    `OnCalendar` is a very flexible method; the following are some of the most commonly
    used examples:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于使用了标准的`OnCalendar`函数，你有更多的选择。`OnCalendar`是一个非常灵活的方法；以下是一些最常用的示例：
- en: '| **OnCalendar Example** | **Description** |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| **OnCalendar 示例** | **描述** |'
- en: '| --- | --- |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| DOW YYYY-MM-DD HH:MM:SS | Generic time formatting methods. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| DOW YYYY-MM-DD HH:MM:SS | 通用的时间格式方法。 |'
- en: '| *-*-* 2:00 | Runs every day at 2:00 A.M. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| *-*-* 2:00 | 每天凌晨2点运行。 |'
- en: '| Weekly | Every Monday at midnight. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| Weekly | 每周一的午夜。 |'
- en: '| Sat *-*-* 2:00 | Every Saturday at 2:00 A.M. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| Sat *-*-* 2:00 | 每周六凌晨2点运行。 |'
- en: '| Sat | Every Saturday at midnight. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| Sat | 每周六的午夜。 |'
- en: '| Sun 2022-*-* | Every Sunday in 2022 at midnight. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| Sun 2022-*-* | 2022年每个星期日的午夜。 |'
- en: '| *-*-1,15 22:15 | The 1st and 15th of every month at 10:15 P.M. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| *-*-1,15 22:15 | 每月的1号和15号晚上10:15运行。 |'
- en: '| *-05-03/2 | Runs on the third day of the month in May, and then on the second
    day of every other month. Runs every year with the same cycle. This date format
    expression uses the dash for formatting. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| *-05-03/2 | 每年五月的第三天运行，然后每隔一个月的第二天运行。每年都按照相同的周期运行。这个日期格式表达式使用了连字符来进行格式化。
    |'
- en: Table 5.1 – OnCalendar example date rules
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 表 5.1 – OnCalendar 示例日期规则
- en: '`RandomizedDelaySec` is also an important setting. This will add a random delay
    to the clock, which is helpful in enterprise environments where large numbers
    of systems are running. Having 200 servers hitting a YUM repo at 6 A.M. can be
    a little overwhelming to the server. Adding a randomized delay in `/etc/dnf/automatic.conf`
    of maybe 600 seconds would spread the load across a few minutes.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`RandomizedDelaySec` 也是一个重要的设置。它会给时钟增加一个随机的延迟，这在许多系统运行的企业环境中非常有用。比如，200台服务器在早上6点访问YUM仓库时，可能会让服务器压力过大。在`/etc/dnf/automatic.conf`中加入一个随机延迟，比如600秒，可以将负载分散到几分钟内。'
- en: DNF is an upgraded version of YUM, with a few enhancements. As seen in the recipe,
    it does have a few tricks up its sleeve, but it still does a great job of providing
    an easy way for admins to install and patch software on an Oracle Linux system.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: DNF是YUM的升级版，具有一些增强功能。正如在本章节中所看到的，它确实有一些巧妙的技巧，但它仍然为管理员提供了一种简便的方式，用于在Oracle Linux系统上安装和修补软件。
- en: Using the DNF time machine
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用DNF时间机器
- en: DNF has a time machine built into it! This isn’t just a way to look back through
    the cosmos; it actually allows you to see the history of what was installed and
    also allows you to roll back a single change, or all changes up to a point.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: DNF内置了时间机器！这不仅仅是回顾宇宙的方式，它实际上允许你查看安装的历史记录，还能回滚某一项更改，或者回滚所有更改直到某个时间点。
- en: Getting ready
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To do this, you will need a test system, running Oracle Linux 8, with access
    to an RPM repo.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，你需要一台运行Oracle Linux 8并能够访问RPM仓库的测试系统。
- en: How to do it…
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'When DNF installs software, it keeps a history of all the actions performed.
    This includes upgrades to the software, installed software, and removal of the
    software. The `dnf history` command shows this history:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当DNF安装软件时，它会保留所有执行操作的历史记录，包括软件的升级、已安装的软件和已删除的软件。`dnf history` 命令显示这个历史记录：
- en: '![Figure 5.3 – The dnf history command](img/B18349_05_03.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – dnf history 命令](img/B18349_05_03.jpg)'
- en: Figure 5.3 – The dnf history command
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – dnf history 命令
- en: 'There are five columns – `ID`, `Command line`, `Date and time`, `Action(s)`,
    and `Altered`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有五列：`ID`、`命令行`、`日期和时间`、`操作`和`修改`：
- en: '`ID`: This is the identifier for the history, and is used in commands that
    will show info, roll back, undo, or store a transaction'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ID`：这是历史记录的标识符，用于在命令中显示信息、回滚、撤销或存储事务。'
- en: '`Command line`: This is the option passed to DNF when the command was run that
    added to the transaction history'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`命令行`: 这是在执行命令时传递给 DNF 的选项，已添加到事务历史中'
- en: '`Date and time`: This is the timestamp of when the transaction was run'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`日期和时间`: 这是事务执行时的时间戳'
- en: '`Action(s)`: This is what actions were taken; multiple actions can performed
    in the same transaction:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Action(s)`: 这是执行的操作；在同一事务中可以执行多个操作：'
- en: '(`D`) `Downgrade`: A package was downgraded'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '(`D`) `降级`: 一个软件包被降级'
- en: '(`E`) `Erase`: A package was removed'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '(`E`) `删除`: 一个软件包已被移除'
- en: '(`I`) `Installed`: A package was installed'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '(`I`) `安装`: 一个软件包已安装'
- en: '(`R`) `Reinstall`: A package was reinstalled'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '(`R`) `重新安装`: 一个软件包已重新安装'
- en: '(`O`) `Obsoleting`: A package was flagged as obsolete'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '(`O`) `废弃`: 一个软件包被标记为废弃'
- en: '(`U`) `Update`: A package was updated'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '(`U`) `更新`: 一个软件包已更新'
- en: '`Altered`: This is the number of packages altered when the command was run,
    in addition to several exception flags:'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`变更`: 这是命令执行时所更改的软件包数量，并附带几个例外标志：'
- en: '`E`/`EE`: The transaction was completed but had an output generated. Not all
    outputs are errors!'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`E`/`EE`: 事务已完成，但产生了输出。并非所有输出都是错误！'
- en: '`P`: The transaction was completed but problems exist in the `rpm` database.'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`P`: 事务已完成，但在 `rpm` 数据库中存在问题。'
- en: '`s`: The transaction was completed but since the `--skip-broken` parameter
    was enabled, some packages were skipped.'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s`: 事务已完成，但由于启用了 `--skip-broken` 参数，一些软件包被跳过。'
- en: '`>`: The `rpm` database was changed outside of DNF after the transaction ran.'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`>`: 事务执行后，`rpm` 数据库在 DNF 外部被更改。'
- en: '`<`: The `rpm` database was changed outside of DNF before the transaction ran.'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<`: 事务执行前，`rpm` 数据库在 DNF 外部被更改。'
- en: '`*`: The transaction was aborted before completion.'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*`: 事务在完成之前被中止。'
- en: '`#`: The transaction was completed but returned a non-zero status.'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#`: 事务已完成，但返回了非零状态。'
- en: 'When there are error codes, you can see the details with the `dnf history info
    {ID}` command, as seen in *Figure 5**.4*:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当出现错误代码时，可以使用 `dnf history info {ID}` 命令查看详细信息，如 *图 5.4* 所示：
- en: '![Figure 5.4 – The dnf history info command](img/B18349_05_04.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.4 – dnf history info 命令](img/B18349_05_04.jpg)'
- en: Figure 5.4 – The dnf history info command
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – dnf history info 命令
- en: In this example, the output is more informational, with no actual errors. This
    is not uncommon.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，输出更多的是信息性内容，没有实际错误。这并不罕见。
- en: 'You can also use `dnf history` to uninstall a package. There are two ways to
    do this: `rollback` or `undo`. A `rollback` command attempts to reverse out all
    of the DNF transactions from the current point to the transaction ID specified.
    An `undo` command simply undoes the transactions in the ID identified.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 `dnf history` 来卸载一个软件包。有两种方法可以做到这一点：`rollback` 或 `undo`。`rollback` 命令尝试从当前点回滚所有
    DNF 事务，直到指定的事务 ID。`undo` 命令只是撤销指定 ID 中的事务。
- en: 'On the test system, let’s undo the installation of Nmap from 4/17/2022, which
    was ID 34, using the `dnf history undo` `34` command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试系统上，让我们使用 `dnf history undo` `34` 命令撤销 2022 年 4 月 17 日安装的 Nmap，事务 ID 为 34：
- en: '![Figure 5.5 – The dnf history undo command](img/B18349_05_05.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.5 – dnf history undo 命令](img/B18349_05_05.jpg)'
- en: Figure 5.5 – The dnf history undo command
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – dnf history undo 命令
- en: 'This was a fairly simple undo, with Nmap being uninstalled. When the DNF history
    is looked at after the transaction, you will see a new ID of `40`, showing the
    `undo` command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相对简单的撤销操作，Nmap 被卸载。当查看事务后的 DNF 历史时，会看到一个新的 ID `40`，显示 `undo` 命令。
- en: '![Figure 5.6 – DNF history after the undo](img/B18349_05_06.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.6 – 撤销后的 DNF 历史](img/B18349_05_06.jpg)'
- en: Figure 5.6 – DNF history after the undo
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6 – 撤销后的 DNF 历史
- en: Now, if the goal was to roll back all of the changes, let’s say to ID `37`,
    the command would be `dnf history rollback 37`. This will roll back the system
    to match the state it was in when transaction 37 was completed.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果目标是回滚所有更改，比如回滚到 ID `37`，那么命令将是 `dnf history rollback 37`。这将使系统回滚到事务 37
    完成时的状态。
- en: '![Figure 5.7 – DNF rollback](img/B18349_05_07.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.7 – DNF 回滚](img/B18349_05_07.jpg)'
- en: Figure 5.7 – DNF rollback
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7 – DNF 回滚
- en: 'The `rollback` command rolls back the transitions, so Nmap is actually reinstalled,
    and the `oracle-cloud-agent` RPM is downgraded. This is reflected in the new history
    summary as ID `41` (shown in the following screenshot) where we see the install
    and downgrade actions in ID 41:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`rollback` 命令会回滚事务，因此 Nmap 实际上会重新安装，而 `oracle-cloud-agent` RPM 会被降级。这将在新的历史摘要中反映为
    ID `41`（如下图所示），在 ID 41 中我们可以看到安装和降级操作：'
- en: '![Figure 5.8 – DNF history post rollback](img/B18349_05_08.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图5.8 – DNF回滚后的历史记录](img/B18349_05_08.jpg)'
- en: Figure 5.8 – DNF history post rollback
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.8 – DNF回滚后的历史记录
- en: Note
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: While the `rollback` and `undo` commands often work well, it is still good practice
    to keep OS snapshots using hypervisor or cloud-native tooling. You can also take
    snapshots using Btrfs. Sometimes, the `rollback` scripts in the RPMs do not undo
    all the changes to the system. When leveraging a storage-based snapshot, you reduce
    the risk of having issues due to this.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`rollback`和`undo`命令通常可以很好地工作，但保持使用虚拟化程序或云原生工具进行操作系统快照仍然是一个好的做法。你还可以使用Btrfs来创建快照。有时候，RPM包中的`rollback`脚本无法撤销系统的所有更改。通过利用基于存储的快照，你可以减少由于此类问题带来的风险。
- en: The DNF system maintains a database of all transactions, with the `dnf history`
    command and its options giving you access to the database to examine what happened,
    as well as the ability to undo a single transaction or roll back from the latest
    transaction to a specific ID in the history. This is a very helpful tool for admins
    when they need to back out of patches and software installation.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: DNF系统维护了所有事务的数据库，`dnf history`命令及其选项使你能够访问该数据库，检查发生了什么，并且能够撤销单个事务或从最新的事务回滚到历史中的某个特定ID。这是管理员在需要撤销补丁和软件安装时非常有用的工具。
- en: Building a DNF/YUM mirror from ULN
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从ULN构建DNF/YUM镜像
- en: It is very common for admins to not enable internet access for the systems running
    in a secure network, like banking of Government networks. A local mirror of Oracle’s
    **Unbreakable Linux Network** (**ULN**) is a great way to allow systems to access
    patches without having to reach out across the internet to access them.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于运行在安全网络中的系统（如银行或政府网络），管理员常常不会启用互联网访问。Oracle的**不可破坏Linux网络**（**ULN**）的本地镜像是一个极好的方式，允许系统访问补丁，而无需通过互联网进行远程访问。
- en: Getting ready
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To do this, you will need a YUM server system running Oracle Linux 8\. The local
    system should have internet access to be able to reach the ULN servers via direct
    access or a proxy server. Only the system (often called a YUM server) synchronizing
    to ULN will require this access; all the systems using this system will not need
    access to the internet, they will use this system to access patches.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，你需要一台运行Oracle Linux 8的YUM服务器系统。该本地系统应具备互联网访问能力，以便能够通过直接访问或代理服务器连接到ULN服务器。只有同步到ULN的系统（通常称为YUM服务器）需要此访问权限；所有使用该系统的其他系统不需要访问互联网，它们将通过该系统来访问补丁。
- en: The system is not CPU- or RAM-intensive – 2 cores and 4 GB of RAM are often
    more than enough for the server, but the system will use a lot of disk space.
    You can check how much space is needed by running the `dnf repolist -``v` command.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 该系统不会占用大量CPU或内存——通常2个核心和4 GB内存就足够了，但该系统会使用大量磁盘空间。你可以通过运行`dnf repolist -v`命令来检查所需的空间。
- en: A terabyte can go quickly, depending on how many repos the server is subscribed
    to. The good news on space is that high-performance storage is not required. You
    will also need a valid support contract with Oracle, which is included with the
    hardware support contract if you are running on Oracle servers. On my local repos,
    I keep the repo in `/var/www` and mount it as a separate filesystem under **Logical
    Volume Management** (**LVM**). This way, additional space can easily be added
    when needed.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一个TB的空间可能会很快用完，这取决于服务器订阅了多少个仓库。关于空间的好消息是，性能高的存储并不是必需的。如果你在Oracle服务器上运行，还需要一个有效的Oracle支持合同，该合同已包含在硬件支持合同中。在我的本地仓库中，我将仓库保存在`/var/www`目录下，并将其作为**逻辑卷管理**（**LVM**）下的一个独立文件系统挂载。这样，当需要更多空间时，可以轻松地进行扩展。
- en: Additionally, an HTTP server should be installed and you must ensure that the
    firewall ports are opened. If you need help doing that, go back to [*Chapter 2*](B18349_02.xhtml#_idTextAnchor052),
    *Installing with and without Automation Magic*, where setting up a HTTP server
    is covered.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，应该安装一个HTTP服务器，并且你必须确保防火墙端口已打开。如果你需要帮助，请回到[*第2章*](B18349_02.xhtml#_idTextAnchor052)，*使用与不使用自动化工具进行安装*，该章节中涵盖了如何设置HTTP服务器。
- en: How to do it…
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To build the mirror, follow these steps:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建镜像，请按照以下步骤操作：
- en: The first step is to validate that enough space is in `/var/www`. For even a
    small mirror, 600 GB is recommended as a starting point. Watch the disk space
    carefully, as more will be needed down the road. Larger mirrors can easily consume
    2 TB.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是验证`/var/www`中是否有足够的空间。即使是一个小型镜像，也建议从600 GB开始。要密切关注磁盘空间，因为未来可能需要更多空间。较大的镜像很容易消耗掉2
    TB的空间。
- en: 'Next, install the `uln-yum-mirror` package using the `dnf install uln-yum-mirror
    -y` command. The `uln-yum-mirror` package includes the scripts that automate the
    replication of the Oracle ULN repository to a local server. Make sure that the
    system has access to the `ol8_addons` repo:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用 `dnf install uln-yum-mirror -y` 命令安装 `uln-yum-mirror` 包。`uln-yum-mirror`
    包包括自动化复制 Oracle ULN 仓库到本地服务器的脚本。确保系统能够访问 `ol8_addons` 仓库：
- en: '![Figure 5.9 – The uln-yum-mirror install](img/B18349_05_09.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.9 – uln-yum-mirror 安装](img/B18349_05_09.jpg)'
- en: Figure 5.9 – The uln-yum-mirror install
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9 – uln-yum-mirror 安装
- en: 'This will install the scripts from Oracle. Next, let’s register the system
    with ULN. This is done using the `uln_register` command. You will need to know
    the `uln_register` command. From there, you will get the main screen:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将安装来自 Oracle 的脚本。接下来，让我们使用 `uln_register` 命令将系统注册到 ULN。你需要知道 `uln_register`
    命令。从那里，你将看到主界面：
- en: '![Figure 5.10 – The uln_register start screen](img/B18349_05_10.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.10 – uln_register 启动界面](img/B18349_05_10.jpg)'
- en: Figure 5.10 – The uln_register start screen
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10 – uln_register 启动界面
- en: Click **Next** to continue. On the next screen, you will be prompted to put
    in your Oracle SSO credentials. The CSI is the support identifier. Use the CSI
    assigned to you with your Premier hardware support, or your Oracle Linux subscription.
    Do *not* use a CSI for the Oracle database, WebLogic, E-Business Suite, and so
    on. The CSI should be for Oracle Linux.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **下一步** 继续。在下一个界面中，你将被提示输入 Oracle SSO 凭据。CSI 是支持标识符。请使用与你的 Premier 硬件支持或
    Oracle Linux 订阅关联的 CSI。*不要*使用 Oracle 数据库、WebLogic、E-Business Suite 等的 CSI。CSI
    应该是针对 Oracle Linux 的。
- en: Note
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In production environments, you may want to consider creating a shared account
    to register all your servers using ULN directly. This makes it easier to manage
    the servers as staff members come and go.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，你可能会考虑创建一个共享账户，直接使用 ULN 注册所有服务器。这将使得在员工进出时更容易管理服务器。
- en: '![Figure 5.11 – The uln_register credentials](img/B18349_05_11.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.11 – uln_register 凭据](img/B18349_05_11.jpg)'
- en: Figure 5.11 – The uln_register credentials
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.11 – uln_register 凭据
- en: Next, you will need to identify the server for ULN. Normally, you would use
    the **Fully Qualified Domain Name** (**FQDN**) of the server, but the choice is
    yours. You can also choose to upload the hardware details, but this is optional.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你需要为 ULN 确定服务器的身份。通常，你会使用服务器的 **完全合格域名**（**FQDN**），但选择权在你。你也可以选择上传硬件详细信息，但这是可选的。
- en: '![Figure 5.12 – The uln_register system name](img/B18349_05_12.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.12 – uln_register 系统名称](img/B18349_05_12.jpg)'
- en: Figure 5.12 – The uln_register system name
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.12 – uln_register 系统名称
- en: 'Next, the system will update ULN with the software installed on the server,
    which will let you track installed RPMs via ULN but *only* for systems directly
    registered with ULN. When using a local repository, you may want to consider using
    a tool such as Oracle Linux Manager to track software installed on systems not
    registered with ULN:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，系统将更新 ULN 以同步服务器上安装的软件，这将使你能够通过 ULN 跟踪已安装的 RPM，但*仅限*直接注册到 ULN 的系统。当使用本地仓库时，你可能会考虑使用像
    Oracle Linux Manager 这样的工具来跟踪未注册到 ULN 的系统上的软件：
- en: '![Figure 5.13 – The uln_register initial packages](img/B18349_05_13.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.13 – uln_register 初始包](img/B18349_05_13.jpg)'
- en: Figure 5.13 – The uln_register initial packages
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.13 – uln_register 初始包
- en: 'Registering the server with ULN is almost complete. The last step is to send
    the info to ULN to register the server, this is done automatically in the next
    step:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器在 ULN 上的注册几乎完成。最后一步是将信息发送到 ULN 以注册服务器，这将在下一步自动完成：
- en: '![Figure 5.14 – uln_register send](img/B18349_05_14.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.14 – uln_register 发送](img/B18349_05_14.jpg)'
- en: Figure 5.14 – uln_register send
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.14 – uln_register 发送
- en: The upload can take up to a minute, depending on your internet speed.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 上传可能需要最多一分钟，具体取决于你的网络速度。
- en: After the upload, the system is now registered in ULN. The next step is optional.
    It will set up Ksplice for the server. If you do not want to use Ksplice, you
    are done. Ksplice also requires that you have an Oracle Linux Premier Support
    subscription. This is included with Oracle hardware support and Oracle Cloud VMs.
    You can also purchase this for third-party systems, often at a cheaper price than
    other commercial Linux distributions.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 上传完成后，系统现在已在 ULN 中注册。下一步是可选的。它将为服务器设置 Ksplice。如果你不想使用 Ksplice，可以跳过此步骤。Ksplice
    还要求你拥有 Oracle Linux Premier Support 订阅。这个订阅包含在 Oracle 硬件支持和 Oracle Cloud 虚拟机中。你也可以为第三方系统购买此订阅，通常价格比其他商业
    Linux 发行版便宜。
- en: '![Figure 5.15 – uln_register ksplice](img/B18349_05_15.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图5.15 – uln_register ksplice](img/B18349_05_15.jpg)'
- en: Figure 5.15 – uln_register ksplice
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.15 – uln_register ksplice
- en: 'Ksplice is a quick step; just review the settings, as seen in the following
    screenshot, and click **OK**:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ksplice是一个快速步骤；只需查看设置，如下截图所示，然后点击**确定**：
- en: '![Figure 5.16 – The uln_register settings](img/B18349_05_16.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图5.16 – uln_register设置](img/B18349_05_16.jpg)'
- en: Figure 5.16 – The uln_register settings
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.16 – uln_register设置
- en: 'The registration is now complete. You should now patch the server with `dnf
    -y update` (as recommended in the tool) before continuing:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册现已完成。您应该在继续之前使用`dnf -y update`（工具推荐的命令）来修补服务器：
- en: '![Figure 5.17 – Completed uln_register](img/B18349_05_17.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图5.17 – 完成的uln_register](img/B18349_05_17.jpg)'
- en: Figure 5.17 – Completed uln_register
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.17 – 完成的uln_register
- en: Next, go ahead and patch the system with `dnf update -y` and reboot the system.
    As a note, the position of the `-y` option does not matter for the command. Once
    the system is back online, you need to log in to [https://linux.oracle.com/](https://linux.oracle.com/).
    While this server is registered to ULN now, it is not a local repo yet! We need
    to tell ULN this is a local repo and select what repos we need to mirror.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用`dnf update -y`修补系统并重启系统。需要注意的是，`-y`选项的位置对命令没有影响。系统重启后，您需要登录[https://linux.oracle.com/](https://linux.oracle.com/)。虽然此服务器现在已注册到ULN，但它还不是本地仓库！我们需要告诉ULN这是一个本地仓库，并选择我们需要镜像的仓库。
- en: 'To do this, head over to [https://linux.oracle.com](https://linux.oracle.com)
    and click the **Sign** **In** button:'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为此，访问[https://linux.oracle.com](https://linux.oracle.com)并点击**登录**按钮：
- en: '![Figure 5.18 – ULN main page](img/B18349_05_18.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图5.18 – ULN主页](img/B18349_05_18.jpg)'
- en: Figure 5.18 – ULN main page
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.18 – ULN主页
- en: When managing the server, use the same login used to register the server.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在管理服务器时，使用与注册服务器时相同的登录信息。
- en: 'Once you are logged in to ULN, you will see all the servers registered to your
    account. You will also see what channels have been recently updated and added
    to the system:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录ULN后，您将看到所有注册到您账户下的服务器。您还会看到最近更新和添加到系统中的通道：
- en: '![Figure 5.19 – Managed servers](img/B18349_05_19.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图5.19 – 管理的服务器](img/B18349_05_19.jpg)'
- en: Figure 5.19 – Managed servers
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.19 – 管理的服务器
- en: 'From here, we need to promote a server to be a YUM repo. This will tell ULN
    to allow this server to have any channel assigned to it, allowing it to download
    RPMs not required by the specific servers. This includes patches for different
    major versions of Oracle Linux, different CPU architectures such as AArch64, and
    special patches for platforms such as Exadata. To do this, click on the server
    name, and then the **Edit** button:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这里开始，我们需要将服务器提升为YUM仓库。这将告诉ULN允许该服务器分配任何通道，从而使其能够下载不属于特定服务器所需的RPM包。这包括不同Oracle
    Linux主版本的补丁、不同CPU架构（如AArch64）的补丁，以及针对Exadata等平台的特殊补丁。为此，点击服务器名称，然后点击**编辑**按钮：
- en: '![Figure 5.20 – Editing the server](img/B18349_05_20.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图5.20 – 编辑服务器](img/B18349_05_20.jpg)'
- en: Figure 5.20 – Editing the server
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.20 – 编辑服务器
- en: 'On this page, we will update the server properties to make it a YUM server.
    Select the **Yum Server** checkbox and then click **Apply Changes**:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此页面上，我们将更新服务器属性以使其成为YUM服务器。勾选**Yum Server**复选框，然后点击**应用更改**：
- en: '![Figure 5.21 – Making it a repo](img/B18349_05_21.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图5.21 – 将其设为仓库](img/B18349_05_21.jpg)'
- en: Figure 5.21 – Making it a repo
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.21 – 将其设为仓库
- en: 'Next, we need to assign additional channels to the server. This will allow
    the server to serve up any channel it is subscribed to. To manage the RPM channels
    that contain a grouping of related RPMs, click the **Manage** **Subscriptions**
    button:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要为服务器分配额外的通道。这将允许服务器提供它所订阅的任何通道。要管理包含相关RPM包的RPM通道，请点击**管理** **订阅**按钮：
- en: '![Figure 5.22 – Manage Subscriptions](img/B18349_05_22.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图5.22 – 管理订阅](img/B18349_05_22.jpg)'
- en: Figure 5.22 – Manage Subscriptions
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.22 – 管理订阅
- en: Next, you will see all the available channels on the left and the channels assigned
    to the server on the right. While you can bulk-select all channels, it is better
    to only select the channels you need. In this example, **Oracle Linux 8 Addons
    x86_64** is being added. You can also add channels for a different major release
    number, such as Oracle Linux 7\. When selecting a channel, make sure to select
    the **<** or **>** symbol to subscribe to or unsubscribe from the local server.
    This is seen in step 2 in the following figure. Also, once you are done with the
    selection, you must click on the **Save Subscriptions** option to update the subscription.
    Exiting without saving the subscription will cause any changes made to be lost.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您将看到左侧是所有可用的频道，右侧是分配给服务器的频道。虽然您可以批量选择所有频道，但最好只选择您需要的频道。在此示例中，**Oracle Linux
    8 Addons x86_64** 正在被添加。您还可以为不同的主版本号添加频道，例如 Oracle Linux 7。当选择频道时，请确保选择 **<**
    或 **>** 符号来订阅或取消订阅本地服务器。如以下图中的第 2 步所示。另外，一旦完成选择，您必须点击 **保存订阅** 选项来更新订阅。如果在未保存订阅的情况下退出，所做的任何更改都将丢失。
- en: '![Figure 5.23 – Adding more repos](img/B18349_05_23.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.23 – 添加更多仓库](img/B18349_05_23.jpg)'
- en: Figure 5.23 – Adding more repos
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.23 – 添加更多仓库
- en: Note
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When adding channels, only add what you need to conserve space and bandwidth.
    You can easily download a few terabytes if not careful. Also, the archived channels
    can be very large and are normally not needed for most sites, as they contain
    older releases. Expect multiple terabytes of disk space if you start using these
    channels locally.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 添加频道时，只添加您需要的频道，以节省空间和带宽。如果不小心，您可能会轻松下载几个 TB 的数据。另外，归档频道可能非常大，并且通常不适用于大多数站点，因为它们包含较旧的版本。如果开始在本地使用这些频道，预计会占用多个
    TB 的磁盘空间。
- en: 'Make sure you see the **Subscriptions** **saved** message:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您看到 **订阅** **已保存** 消息：
- en: '![Figure 5.24 – Saving the config](img/B18349_05_24.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.24 – 保存配置](img/B18349_05_24.jpg)'
- en: Figure 5.24 – Saving the config
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.24 – 保存配置
- en: Now, we finally have that local repo set. Next up is to run the `uln-yum-mirror`
    command as root, and the repo will start to sync. This process can take several
    hours, depending on your internet speed and how many channels you are subscribed
    to. The system will also run daily automatically, keeping your local copy current.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们终于完成了本地仓库的设置。接下来，作为 root 用户运行 `uln-yum-mirror` 命令，仓库将开始同步。这个过程可能需要几个小时，具体取决于您的互联网速度和您订阅的频道数量。系统也会每天自动运行，保持本地副本的最新状态。
- en: Note
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When doing your first sync, watch your disk space closely. You may need to add
    more space quickly the first time. If this happens, add the space, and manually
    restart the `uln-yum-mirror` command.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行第一次同步时，请密切关注磁盘空间。第一次时，您可能需要快速增加空间。如果发生这种情况，增加空间并手动重新启动 `uln-yum-mirror` 命令。
- en: 'When you finish a manual run, the script will let you know how much data was
    copied for each repo:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当您完成手动运行时，脚本会告诉您每个仓库复制了多少数据：
- en: '![Figure 5.25 – Completed mirror](img/B18349_05_25.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.25 – 完成的镜像](img/B18349_05_25.jpg)'
- en: Figure 5.25 – Completed mirror
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.25 – 完成的镜像
- en: Once configured, the system will automatically synchronize your local repository
    with ULN. As you add new channels, they will automatically be downloaded when
    the `cron` job runs.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 配置完成后，系统将自动将本地仓库与 ULN 同步。随着您添加新的频道，它们将在 `cron` 作业运行时自动下载。
- en: Creating a new RPM package
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新的 RPM 包
- en: While Oracle provides a large number of RPMs, sometimes you just need to create
    a custom RPM package that allows you to easily deploy your own software. Creating
    an RPM file is easy to do!
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Oracle 提供了大量的 RPM 文件，但有时您可能需要创建自定义的 RPM 包，以便轻松部署自己的软件。创建一个 RPM 文件是非常简单的！
- en: Getting ready
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To do this, you will need a development system, running Oracle Linux 8, with
    access to the **Extra Packages for Enterprise Linux** (**EPEL**) channel. It is
    highly recommended to have a dedicated system to build RPMs on, and to not build
    RPMs on production systems. You will also need a system to test installing the
    RPM on.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，您将需要一个运行 Oracle Linux 8 的开发系统，并且可以访问 **企业 Linux 的额外软件包** (**EPEL**)
    频道。强烈建议使用专用系统来构建 RPM，而不是在生产系统上构建 RPM。您还需要一个系统来测试安装 RPM。
- en: Note
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Depending on the package being built, you may need additional channels, such
    as CodeReady or Distro Builder.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 根据构建的包，您可能需要额外的频道，如 CodeReady 或 Distro Builder。
- en: There are a few things we need to do first – mainly, installing the RPM developer
    tools. In order to do this, we also need to add the EPEL repo to the system.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之前，我们需要做一些准备工作——主要是安装RPM开发工具。为了做到这一点，我们还需要将EPEL仓库添加到系统中。
- en: While most of the recipes in this book use the `root` user for most of the work,
    this recipe will only use root for the installation of the software. Perform the
    next few steps as `root`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本书中的大多数配方使用`root`用户进行大部分工作，但本配方仅在安装软件时使用root。接下来的几步请使用`root`用户执行。
- en: 'To add the EPEL repo, run the following command:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加EPEL仓库，请运行以下命令：
- en: '[PRE1]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, run the following commands to enable EPEL and the `codeready` and `distro_builder`
    repos. Having all of these on your build system will make it easier down the road
    to take advantage of more advanced build tools such as Mock:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，运行以下命令来启用EPEL以及`codeready`和`distro_builder`仓库。将所有这些工具安装到你的构建系统中，将来能更方便地利用更高级的构建工具，如Mock：
- en: '[PRE2]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, we will install the basic utilities to build `rpm` files. Run the following
    command to install these:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将安装构建`rpm`文件的基本工具。运行以下命令来安装这些工具：
- en: '[PRE3]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you are pulling software from Git, you may need to install `git` and `git-lfs`
    (`gcc`, `make` and `python3-service-identity` RPMs are also common. You can install
    all of these with the following command:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从Git拉取软件，可能需要安装`git`和`git-lfs`（`gcc`、`make`和`python3-service-identity` RPM包也很常见。你可以使用以下命令安装所有这些：
- en: '[PRE4]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How to do it…
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'Now that we have all the tools installed, switch to your non-root user:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了所有工具，切换到非root用户：
- en: Make a directory for the RPM. Here, we will have a source file for the software,
    plus all of the files and directories required to make it an RPM. In my case,
    I am putting everything in `/home/erik/`.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为RPM创建一个目录。在这里，我们将有一个软件源文件，以及所有将其制作成RPM所需的文件和目录。以我的情况为例，我将所有内容放在`/home/erik/`中。
- en: 'Next, we need to make the RPM directory tree. This is done by running the `rpmdev-setuptree`
    command. Once you run the command, the tree is created in your `$HOME` under `rpmbuild`:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建RPM目录树。可以通过运行`rpmdev-setuptree`命令来完成此操作。运行该命令后，树状结构将在`$HOME`下的`rpmbuild`目录中创建：
- en: '![Figure 5.26 – The rpmbuild directories](img/B18349_05_26.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图5.26 – rpmbuild目录](img/B18349_05_26.jpg)'
- en: Figure 5.26 – The rpmbuild directories
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.26 – rpmbuild目录
- en: 'Five directories are also built, each with a specific purpose:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 还会构建五个目录，每个目录都有特定的用途：
- en: '`BUILD`: This is where binaries are saved after being compiled.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BUILD`：这是编译后的二进制文件保存的地方。'
- en: '`RPMS`: RPMs are created here, with `rpm` files ready for use. There will be
    subdirectories for different CPU architectures.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RPMS`：在这里创建RPM，生成可以使用的`rpm`文件。这里会有针对不同CPU架构的子目录。'
- en: '`SOURCES`: This is where the source code is put, usually a tar file.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SOURCES`：这是放置源代码的地方，通常是一个tar文件。'
- en: '`SPECS`: This is where the `.spec` files live.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SPECS`：这是`.spec`文件所在的目录。'
- en: '`SRPMS`: Source RPMs are built here – usually, packages containing the source
    code for the software.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SRPMS`：源RPM文件将在这里构建——通常是包含软件源代码的包。'
- en: 'Create a simple Bash shell script to distribute as an RPM. This will live in
    the `xyzzy` directory in the `rpmbuild` directory. A simple Bash script is also
    created:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个简单的Bash脚本，作为RPM发布。它将位于`rpmbuild`目录下的`xyzzy`目录中。同时还创建了一个简单的Bash脚本：
- en: '![Figure 5.27 – The xyzzy.sh script](img/B18349_05_27.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图5.27 – xyzzy.sh脚本](img/B18349_05_27.jpg)'
- en: Figure 5.27 – The xyzzy.sh script
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.27 – xyzzy.sh脚本
- en: 'Next, create a compressed tar file with the contents of the `xyzzy` directory:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个包含`xyzzy`目录内容的压缩tar文件：
- en: '[PRE5]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: rpmdev-newspec SPECS/xyzzy.spec
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: rpmdev-newspec SPECS/xyzzy.spec
- en: '[PRE6]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Figure 5.28 – Basic .spec file](img/B18349_05_28.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图5.28 – 基本.spec文件](img/B18349_05_28.jpg)'
- en: Figure 5.28 – Basic .spec file
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.28 – 基本.spec文件
- en: Much has to be done to make this functional.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使其功能正常工作，需要做很多事情。
- en: The `Version` and `Summary` sections need to be filled in, as well as the `License`
    details and a URL for the project. Additionally, set the build architecture to
    `noarch`, as this will install on both ARM and X64 systems. It is important to
    make sure that you include the **Name, Epoch, Version, Release, and Architecture**
    (**NEVRA**) information. This is used to help make sure the correct RPMs are installed
    on the system.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`Version`和`Summary`部分需要填写，另外还需要填写`License`信息和项目的URL。此外，将构建架构设置为`noarch`，因为这将同时安装在ARM和X64系统上。重要的是确保包含**Name、Epoch、Version、Release和Architecture**（**NEVRA**）信息。这有助于确保正确的RPM安装到系统中。'
- en: A description is set, and the `%install` section is updated to reflect the script
    being installed in the normal binary directory.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 已设置描述，并且更新了 `%install` 部分以反映脚本安装到正常的二进制目录中。
- en: The `%files` section shows that `/usr/bin/xyzzy.sh` because all `.sh` files
    are added to the installer. Unused sections are also removed.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`%files` 部分显示了 `/usr/bin/xyzzy.sh`，因为所有 `.sh` 文件都被添加到安装程序中。未使用的部分也会被移除。'
- en: 'The final result is as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果如下：
- en: '![Figure 5.29 – Finished .spec file](img/B18349_05_29.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.29 – 完成的 .spec 文件](img/B18349_05_29.jpg)'
- en: Figure 5.29 – Finished .spec file
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.29 – 完成的 .spec 文件
- en: 'The `rpm` file will be built using the `rpmbuild` command, passing it the location
    of the `.spec` file. The `rpmbuild -bb -v SPECS/xyzzy.spec` command is used, with
    the following output:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`rpm` 文件将通过 `rpmbuild` 命令构建，并传入 `.spec` 文件的路径。使用的命令是 `rpmbuild -bb -v SPECS/xyzzy.spec`，其输出如下：'
- en: '![Figure 5.30 – The output of rpmbuild](img/B18349_05_30.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.30 – rpmbuild 的输出](img/B18349_05_30.jpg)'
- en: Figure 5.30 – The output of rpmbuild
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.30 – rpmbuild 的输出
- en: 'The RPM file is now in the `RPMS` directory, under the `noarch` directory:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RPM 文件现在位于 `RPMS` 目录下的 `noarch` 目录中：
- en: '![Figure 5.31 – The RPM file](img/B18349_05_31.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.31 – RPM 文件](img/B18349_05_31.jpg)'
- en: Figure 5.31 – The RPM file
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.31 – RPM 文件
- en: This RPM file can now be copied over to systems to be manually installed, or
    it can be added to a YUM repo.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 该 RPM 文件现在可以复制到其他系统上手动安装，或者添加到 YUM 仓库中。
- en: 'Once installed, you can use the `rpm -qi xyzzy-1.0` command to see the details
    from the `.spec` file for license, description, and so on:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装后，您可以使用 `rpm -qi xyzzy-1.0` 命令查看来自 `.spec` 文件的详细信息，例如许可证、描述等：
- en: '![Figure 5.32 – RPM file details](img/B18349_05_32.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.32 – RPM 文件详细信息](img/B18349_05_32.jpg)'
- en: Figure 5.32 – RPM file details
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.32 – RPM 文件详细信息
- en: The RPM tool allows you to easily build custom RPM files for distribution. This
    is driven by the `.spec` file, which contains all the dependencies, descriptions,
    file locations, and even build info to create the RPM file.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: RPM 工具使您能够轻松构建自定义的 RPM 文件进行分发。这是通过 `.spec` 文件驱动的，该文件包含了所有的依赖关系、描述、文件位置，甚至是构建信息，用于创建
    RPM 文件。
