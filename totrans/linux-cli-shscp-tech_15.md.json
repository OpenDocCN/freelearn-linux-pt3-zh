["```\ndemo@ubuntu:~/Desktop/allscripts$ bash dos.sh \ndos.sh: line 2: $'\\r': command not found\ndos.sh: line 4: $'\\r': command not found\ndos.sh: line 26: syntax error near unexpected token 'else'\n'os.sh: line 26: '    else\n```", "```\ndemo@ubuntu:~/Desktop/allscripts$ bash backupexample.sh \nbackupexample.sh: line 4: unexpected EOF while looking for matching '''\nbackupexample.sh: line 8: syntax error: unexpected end of file\n```", "```\ndemo@ubuntu:~/Desktop/allscripts$ du -a | sort\n0           ./errorfile\n0           ./settings\n264      .\n4           ./arrayops.sh\n4           ./array.sh\n4           ./associative.sh\n4           ./auxscript.sh\n4           ./backupexample.sh\n4           ./dialogdate.sh\n4           ./dos.sh\n4           ./doublevar.sh\n4           ./echoline1.sh\n4           ./echoline.sh\n```", "```\ndemo@ubuntu:~/Desktop/allscripts$ du -a | sort -n\n0           ./errorfile\n0           ./settings\n4           ./arrayops.sh\n4           ./array.sh\n4           ./associative.sh\n4           ./auxscript.sh\n.\n.\n.\n264       .\n```", "```\ndemo@ubuntu:~/Desktop/allscripts$ bash errpairs.sh \nName:Luke number:12344\nName:Ivan from work number:113312\nName:Ida number:11111\nName:That guy number:122222\nName: number:\n```", "```\nsudo apt install shellcheck\n```", "```\ndemo@ubuntu:~/Desktop/allscripts$ shellcheck testif3.sh \ndemo@ubuntu:~/Desktop/allscripts$\n```", "```\n#!/bin/bash\n#shell script that automates common tasks\nfunction rsyn {\n    rsync -avzh $1 $2 \n}\nfunction usage {\necho In order to use this script you can:\necho \"$0 copy <source> <destination> to copy files from source\\ to destination\"\necho \"$0 newuser <name> to createuser with the username\\ <username>\"\necho \"$0 group <username> <group> to add user to a group\"\necho \"$0 weather to check local weather\"\necho \"$0 weather <city> to check weather in some city on earth\"\necho \"$0 help for this help\"\n}\nif [ \"$1\" != \"\" ] \n             then\n    case $1 in\n         help)\n            usage\n            exit\n            ;;\n        copy)\n            if [ \"$2\" != \"\" && \"$3\" != \"\" ]\n            then \n            rsyn $2 $3\n            fi\n            ;;\n\n        group)\n            if [ \"$2\" != \"\" && \"$3\" != \"\" ]\n                  then \n                       usermod -a -G $3 $2\n            fi              \n                       ;;\n               newuser) \n                          if [ \"$2\" != \"\" ]\n                          then\n                                       useradd $2\n                          fi\n                          ;;\n              weather)\n                          if [ \"$2\" != \"\" ]\n                                     then \n                                               curl wttr.in/$2\n                                     else \n                                                  curl wttr.in\n                          fi\n                          ;;\n\n        *)\n            echo \"ERROR: unknown parameter $1\\\"\"\n            usage\n            exit 1\n            ;;\n    esac\n             else\n             usage\nfi\n```", "```\ndemo@ubuntu:~/Desktop/allscripts$ bash funcglobal.sh \nDeclaring global variable as Global Variable\nIn the main script before function is executed variable has the value of: Global variable\nNow calling the function\nEntered Function\ndeclaring local variable as Local Variable\nInside the function variable has the value of: Local variable\nleaving function\nreturned from function\nIn the main script after function is executed value is: Global variable\nscript end\n```", "```\ndemo@ubuntu:~/Desktop/allscripts$ bash echoline.sh \nCan you please input a word?: dsasd^CScript was interrupted\ndemo@ubuntu:~/Desktop/allscripts$ bash echoline.sh \nCan you please input a word?: nointerrupt\nI got: nointerrupt\nScript cleanly finished executing\n```", "```\ntrap \"some command\" EXIT\n```", "```\nbash -options <scriptname>\n```", "```\ndemo@ubuntu:~/Desktop/allscripts$ bash -v testif3.sh \n#!/usr/bin/bash\n# testing premissions and paths \nif [ -d root ]\n               then\n                     echo root directory exists!\n                     if [ -r root ]\n                                   then\n                       echo Script can read from the directory!\n                                   else\n                   echo Script can NOT read from the directory!    \n                          fi\n                          if [ -w root ]\n                          then\n                       echo Script can write to the directory!\n                          else\n                                       echo Script can not write to the directory!    \n                          fi\n                   else \n                          echo root directory does NOT exists!\nfi          \nroot directory exists!\nScript can read from the directory!\nScript can write to the directory!\n```", "```\ndemo@ubuntu:~/Desktop/allscripts$ bash -x testif3.sh \n+ '[' -d root ']'\n+ echo root directory 'exists!'\nroot directory exists!\n+ '[' -r root ']'\n+ echo Script can read from the 'directory!'\nScript can read from the directory!\n+ '[' -w root ']'\n+ echo Script can write to the 'directory!'\nScript can write to the directory!\n```", "```\ndemo@ubuntu:~/Desktop/allscripts$ bash -x forloop1.sh \n+ for name in {user1,user2,user3,user4}\n+ for server in {srv1,srv2,srv3,srv4}\n+ echo 'Trying to ssh user1@srv1'\nTrying to ssh user1@srv1\n+ for server in {srv1,srv2,srv3,srv4}\n+ echo 'Trying to ssh user1@srv2'\nTrying to ssh user1@srv2\n+ for server in {srv1,srv2,srv3,srv4}\n+ echo 'Trying to ssh user1@srv3'\nTrying to ssh user1@srv3\n+ for server in {srv1,srv2,srv3,srv4}\n+ echo 'Trying to ssh user1@srv4'\n```", "```\nset -x \n```", "```\nset +x \n```", "```\ndemo@ubuntu:~/Desktop/allscripts$ bash forbreak.sh \nrunning command1, number is 1\nrunning command2, number is 1\n+ '[' 1 -eq 4 ']'\n+ set +xv\nrunning command3, number is 1\nrunning command1, number is 2\nrunning command2, number is 2\n+ '[' 2 -eq 4 ']'\n+ set +xv\nrunning command3, number is 2\nrunning command1, number is 3\nrunning command2, number is 3\n+ '[' 3 -eq 4 ']'\n+ set +xv\nrunning command3, number is 3\nrunning command1, number is 4\nrunning command2, number is 4\n+ '[' 4 -eq 4 ']'\n+ echo breaking out of loop, number is 4\nbreaking out of loop, number is 4\n+ break\n```"]