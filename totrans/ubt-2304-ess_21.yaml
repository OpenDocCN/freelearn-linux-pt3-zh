- en: 22\. An Overview of Virtualization Techniques
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 22. 虚拟化技术概述
- en: Virtualization is the ability to run multiple operating systems simultaneously
    on a single computer system. While not necessarily a new concept, Virtualization
    has come to prominence in recent years because it provides a way to fully utilize
    the CPU and resource capacity of a server system while providing stability (in
    that if one virtualized guest system crashes, the host and any other guest systems
    continue to run).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化是指在单一计算机系统上同时运行多个操作系统的能力。尽管这不一定是一个新概念，但虚拟化在近年来逐渐受到关注，因为它提供了一种充分利用服务器系统 CPU
    和资源容量的方式，同时提供稳定性（即如果某个虚拟化的客机系统崩溃，主机和其他任何客机系统仍然能够继续运行）。
- en: Virtualization is also helpful in trying out different operating systems without
    configuring dual boot environments. For example, you can run Windows in a virtual
    machine without re-partitioning the disk, shut down Ubuntu, and boot from Windows.
    Instead, you start up a virtualized version of Windows as a guest operating system.
    Similarly, virtualization allows you to run other Linux distributions within an
    Ubuntu system, providing concurrent access to both operating systems.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化还有助于在不配置双启动环境的情况下尝试不同的操作系统。例如，你可以在虚拟机中运行 Windows，而无需重新分区硬盘，关闭 Ubuntu，然后从
    Windows 启动。相反，你启动一个虚拟化的 Windows 版本作为客机操作系统。同样，虚拟化允许你在 Ubuntu 系统中运行其他 Linux 发行版，实现对两个操作系统的同时访问。
- en: When deciding on the best approach to implementing virtualization, clearly understanding
    the different virtualization solutions currently available is essential. Therefore,
    this chapter’s purpose is to describe in general terms the virtualization techniques
    in common use today.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在决定实现虚拟化的最佳方法时，清楚地了解当前可用的不同虚拟化解决方案至关重要。因此，本章的目的是概括地描述当前普遍使用的虚拟化技术。
- en: 22.1 Guest Operating System Virtualization
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 22.1 客机操作系统虚拟化
- en: Guest OS virtualization, also called application-based virtualization, is the
    most straightforward concept to understand. In this scenario, the physical host
    computer runs a standard unmodified operating system such as Windows, Linux, UNIX,
    or macOS. Running on this operating system is a virtualization application that
    executes in much the same way as any other application, such as a word processor
    or spreadsheet, would run on the system. Within this virtualization application,
    one or more virtual machines are created to run the guest operating systems on
    the host computer.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 客机操作系统虚拟化，也叫做基于应用程序的虚拟化，是最容易理解的概念。在这种场景中，物理主机计算机运行的是标准的未修改操作系统，如 Windows、Linux、UNIX
    或 macOS。在这个操作系统上运行的是一个虚拟化应用程序，该程序的执行方式与其他任何应用程序（如文字处理器或电子表格）在系统上运行的方式基本相同。在这个虚拟化应用程序内，创建了一个或多个虚拟机，用来在主机计算机上运行客机操作系统。
- en: The virtualization application is responsible for starting, stopping, and managing
    each virtual machine and essentially controlling access to physical hardware resources
    on behalf of the individual virtual machines. The virtualization application also
    engages in a process known as binary rewriting, which involves scanning the instruction
    stream of the executing guest system and replacing any privileged instructions
    with safe emulations. This makes the guest system think it is running directly
    on the system hardware rather than in a virtual machine within an application.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化应用程序负责启动、停止和管理每个虚拟机，并实质上代表各个虚拟机控制对物理硬件资源的访问。虚拟化应用程序还进行一项叫做二进制重写的过程，这涉及扫描正在执行的客机系统的指令流，并将任何特权指令替换为安全的模拟指令。这使得客机系统认为它是在直接运行在系统硬件上，而不是在应用程序中的虚拟机内。
- en: 'The following figure illustrates guest OS-based virtualization:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了基于客机操作系统的虚拟化：
- en: '![](img/guest_os_virtualization.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/guest_os_virtualization.jpg)'
- en: Figure 22-1
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图 22-1
- en: As outlined in the above diagram, the guest operating systems operate in virtual
    machines within the virtualization application, which, in turn, runs on top of
    the host operating system in the same way as any other application. The multiple
    layers of abstraction between the guest operating systems and the underlying host
    hardware are not conducive to high levels of virtual machine performance. However,
    this technique has the advantage that no changes are necessary to host or guest
    operating systems, and no special CPU hardware virtualization support is required.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如上图所示，来宾操作系统在虚拟化应用程序内以虚拟机的形式运行，而虚拟化应用程序则像其他应用程序一样运行在主机操作系统之上。来宾操作系统与底层主机硬件之间的多层抽象不利于虚拟机的高性能。然而，这种技术的优点是主机或来宾操作系统无需做任何修改，也不需要特殊的CPU硬件虚拟化支持。
- en: 22.2 Hypervisor Virtualization
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 22.2 虚拟机管理程序虚拟化
- en: In hypervisor virtualization, the task of a hypervisor is to handle resource
    and memory allocation for the virtual machines and provide interfaces for higher-level
    administration and monitoring tools. Hypervisor-based solutions are categorized
    as being either Type-1 or Type-2\.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟机管理程序虚拟化中，虚拟机管理程序的任务是处理虚拟机的资源和内存分配，并为更高层次的管理和监控工具提供接口。基于虚拟机管理程序的解决方案分为Type-1和Type-2两种。
- en: 'Type-2 hypervisors (sometimes called hosted hypervisors) are installed as software
    applications that run on top of the host operating system, providing virtualization
    capabilities by coordinating access to resources such as the CPU, memory, and
    network for guest virtual machines. Figure 21-2 illustrates the typical architecture
    of a system using Type-2 hypervisor virtualization:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Type-2虚拟机管理程序（有时称为托管虚拟机管理程序）作为软件应用程序安装，并运行在主机操作系统之上，通过协调对资源（如CPU、内存和网络）的访问来为来宾虚拟机提供虚拟化功能。图21-2展示了使用Type-2虚拟机管理程序虚拟化的典型系统架构：
- en: '![](img/type-2_hypervisor_virtualization.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/type-2_hypervisor_virtualization.jpg)'
- en: Figure 22-2
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图22-2
- en: To understand how Type-1 hypervisors work, it helps to understand Intel x86
    processor architecture. The x86 family of CPUs provides a range of protection
    levels known as rings in which code can execute. Ring 0 has the highest level
    privilege, and it is in this ring that the operating system kernel normally runs.
    Code executing in ring 0 is said to be running in system space, kernel mode, or
    supervisor mode. All other code, such as applications running on the operating
    system, operate in less privileged rings, typically ring 3.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解Type-1虚拟机管理程序如何工作，首先需要了解Intel x86处理器架构。x86系列CPU提供了一系列保护级别，称为环，其中代码可以执行。环0具有最高的特权，操作系统内核通常在该环中运行。在环0中执行的代码被认为是在系统空间、内核模式或主管模式下运行的。所有其他代码，如在操作系统上运行的应用程序，都是在权限较低的环中运行，通常是环3。
- en: 'In contrast to Type-2 hypervisors, Type-1 hypervisors (also referred to as
    metal or native hypervisors) run directly on the hardware of the host system in
    ring 0\. With the hypervisor occupying ring 0 of the CPU, the kernels for any
    guest operating systems running on the system must run in less privileged CPU
    rings. Unfortunately, most operating system kernels are written explicitly to
    run in ring 0 because they need to perform tasks only available in that ring,
    such as the ability to execute privileged CPU instructions and directly manipulate
    memory. Several different solutions to this problem have been devised in recent
    years, each of which is described below:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 与Type-2虚拟机管理程序不同，Type-1虚拟机管理程序（也称为裸金属虚拟机管理程序或本地虚拟机管理程序）直接在主机系统的硬件上运行，处于环0。由于虚拟机管理程序占据了CPU的环0，任何在该系统上运行的来宾操作系统内核必须在权限较低的CPU环上运行。不幸的是，大多数操作系统内核是明确为在环0中运行而编写的，因为它们需要执行只有在该环中才可以完成的任务，如执行特权CPU指令和直接操作内存。近年来，已经提出了几种不同的解决方案，每种解决方案都将在下面描述：
- en: 22.2.1 Paravirtualization
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 22.2.1 半虚拟化
- en: Under paravirtualization, the kernel of the guest operating system is modified
    specifically to run on the hypervisor. This typically involves replacing privileged
    operations that only run in ring 0 of the CPU with calls to the hypervisor (known
    as hypercalls). The hypervisor, in turn, performs the task on behalf of the guest
    kernel. Unfortunately, this typically limits support to open-source operating
    systems such as Linux, which may be freely altered, and proprietary operating
    systems where the owners have agreed to make the necessary code modifications
    to target a specific hypervisor. These issues notwithstanding, the ability of
    the guest kernel to communicate directly with the hypervisor results in greater
    performance levels than other virtualization approaches.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在准虚拟化下，来宾操作系统的内核被专门修改以便在虚拟机管理程序上运行。这通常涉及将仅能在 CPU 的环 0 中运行的特权操作替换为对虚拟机管理程序的调用（称为超调用）。虚拟机管理程序则代表来宾内核执行任务。不幸的是，这通常将支持范围限制为开源操作系统（如
    Linux），这些操作系统可以自由修改，以及已经同意进行必要代码修改以面向特定虚拟机管理程序的专有操作系统。尽管存在这些问题，来宾内核能够直接与虚拟机管理程序通信，使得准虚拟化方法比其他虚拟化方法提供更高的性能。
- en: 22.2.2 Full Virtualization
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 22.2.2 完全虚拟化
- en: Full virtualization provides support for unmodified guest operating systems.
    The term unmodified refers to operating system kernels that have not been altered
    to run on a hypervisor and, therefore, still execute privileged operations as
    though running in ring 0 of the CPU. In this scenario, the hypervisor provides
    CPU emulation to handle and modify privileged and protected CPU operations made
    by unmodified guest operating system kernels. Unfortunately, this emulation process
    requires both time and system resources to operate, resulting in inferior performance
    levels when compared to those provided by paravirtualization.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 完全虚拟化支持未修改的来宾操作系统。未修改指的是那些没有被修改以便在虚拟机管理程序上运行的操作系统内核，因此它们仍然像在 CPU 的环 0 中运行一样执行特权操作。在这种情况下，虚拟机管理程序提供
    CPU 仿真，以处理和修改未修改的来宾操作系统内核所执行的特权和保护 CPU 操作。不幸的是，这一仿真过程需要时间和系统资源来操作，因此与准虚拟化提供的性能相比，其性能较差。
- en: 22.2.3 Hardware Virtualization
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 22.2.3 硬件虚拟化
- en: Hardware virtualization leverages virtualization features built into the latest
    generations of CPUs from both Intel and AMD. These technologies, called Intel
    VT and AMD-V, respectively, provide extensions necessary to run unmodified guest
    virtual machines without the overheads inherent in full virtualization CPU emulation.
    In very simplistic terms, these processors provide an additional privilege mode
    (ring -1) above ring 0 in which the hypervisor can operate, thereby leaving ring
    0 available for unmodified guest operating systems.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件虚拟化利用了英特尔和 AMD 最新一代 CPU 中内建的虚拟化功能。这些技术分别称为 Intel VT 和 AMD-V，提供了运行未修改的来宾虚拟机所需的扩展，而不会像完全虚拟化的
    CPU 仿真那样产生开销。简单来说，这些处理器在环 0 之上提供了一个额外的特权模式（环 -1），使得虚拟机管理程序可以在其中操作，从而将环 0 留给未修改的来宾操作系统。
- en: 'The following figure illustrates the Type-1 hypervisor approach to virtualization:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下图说明了 Type-1 虚拟机管理程序的虚拟化方法：
- en: '![](img/type-1_hypervisor_virtualization.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/type-1_hypervisor_virtualization.jpg)'
- en: Figure 22-3
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 22-3
- en: As outlined in the above illustration, in addition to the virtual machines,
    an administrative operating system or management console also runs on top of the
    hypervisor allowing the virtual machines to be managed by a system administrator.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如上图所示，除了虚拟机外，一个管理操作系统或管理控制台也运行在虚拟机管理程序上，允许系统管理员管理虚拟机。
- en: 22.3 Virtual Machine Networking
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 22.3 虚拟机网络
- en: Virtual machines will invariably need to be connected to a network to be of
    any practical use. One option is for the guest to be connected to a virtual network
    running within the host computer’s operating system. In this configuration, any
    virtual machines on the virtual network can see each other, but Network Address
    Translation (NAT) provides access to the external network. When using the virtual
    network and NAT, each virtual machine is represented on the external network (the
    network to which the host is connected) using the IP address of the host system.
    This is the default behavior for KVM virtualization on Ubuntu and generally requires
    no additional configuration. Typically, a single virtual network is created by
    default, represented by the name default and the device virbr0.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机通常需要连接到网络才能发挥实际作用。一种选择是让虚拟机连接到运行在主机操作系统内的虚拟网络。在这种配置下，虚拟网络上的任何虚拟机都能看到彼此，但网络地址转换（NAT）提供了对外部网络的访问。当使用虚拟网络和NAT时，每个虚拟机在外部网络（即主机连接的网络）上使用主机系统的IP地址进行表示。这是Ubuntu上KVM虚拟化的默认行为，通常不需要额外配置。通常，默认情况下会创建一个名为default的虚拟网络，并由设备virbr0表示。
- en: For guests to appear as individual and independent systems on the external network
    (i.e., with their own IP addresses), they must be configured to share a physical
    network interface on the host. The quickest way to achieve this is to configure
    the virtual machine to use the “direct connection” network configuration option
    (also called MacVTap), which will provide the guest system with an IP address
    on the same network as the host. Unfortunately, while this gives the virtual machine
    access to other systems on the network, it is not possible to establish a connection
    between the guest and the host when using the MacVTap driver.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 若要让来宾在外部网络上表现为独立的系统（即拥有自己的IP地址），它们必须配置为共享主机上的物理网络接口。实现这一点的最快方法是将虚拟机配置为使用“直接连接”网络配置选项（也称为MacVTap），这将为来宾系统提供与主机相同网络上的IP地址。不幸的是，尽管这样可以让虚拟机访问网络中的其他系统，但在使用MacVTap驱动程序时，无法建立来宾与主机之间的连接。
- en: A better option is to configure a network bridge interface on the host system
    to which the guests can connect. This provides the guest with an IP address on
    the external network while also allowing the guest and host to communicate, a
    topic covered in the chapter entitled [“Creating an Ubuntu 23.04 KVM Networked
    Bridge Interface”](KVM_Network_Bridge.xhtml#_idTextAnchor407).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的选择是配置主机系统上的网络桥接接口，让来宾连接到该接口。这将为来宾提供外部网络上的IP地址，同时也允许来宾与主机之间进行通信，具体内容可参考章节[“创建Ubuntu
    23.04 KVM网络桥接接口”](KVM_Network_Bridge.xhtml#_idTextAnchor407)。
- en: 22.4 Summary
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 22.4 小结
- en: Virtualization is the ability to run multiple guest operating systems within
    a single host operating system. Several approaches to virtualization have been
    developed, including a guest operating system and hypervisor virtualization. Hypervisor
    virtualization falls into two categories known as Type-1 and Type-2\. Type-2 virtualization
    solutions are categorized as paravirtualization, full virtualization, and hardware
    virtualization, the latter using special virtualization features of some Intel
    and AMD processor models.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化是指在单个主机操作系统中运行多个来宾操作系统的能力。已经开发出了几种虚拟化方法，包括来宾操作系统虚拟化和虚拟机监控程序虚拟化。虚拟机监控程序虚拟化分为两类，称为Type-1和Type-2。Type-2虚拟化解决方案被归类为准虚拟化、完全虚拟化和硬件虚拟化，后者使用一些Intel和AMD处理器模型的特殊虚拟化功能。
- en: Virtual machine guest operating systems have several options in terms of networking,
    including NAT, direct connection (MacVTap), and network bridge configurations.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机来宾操作系统在网络配置方面有几种选择，包括NAT、直接连接（MacVTap）和网络桥接配置。
