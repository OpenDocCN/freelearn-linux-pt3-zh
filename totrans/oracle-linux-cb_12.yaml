- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Navigating Ansible Waters
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Ansible 的世界
- en: In this chapter, we’ll walk through several recipes that will expand your knowledge
    on installing **Oracle Linux Automation Manager** (**OLAM**), managing its foundation,
    creating playbooks, maximizing those playbooks, and helping you understand the
    capabilities of OLAM. Each recipe will open your eyes to the full scope of what
    automation can accomplish; from patching to deploying fully functional hybrid
    cloud environments, OLAM can change the direction in which you think of computing
    and open your mind to a new world of rinse and repeat. The following are the touch
    points of a small subsection of what automation can simplify.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过几个食谱来扩展你对安装**Oracle Linux 自动化管理器**（**OLAM**）、管理其基础设施、创建剧本、最大化这些剧本的理解，并帮助你了解
    OLAM 的功能。每个食谱都会让你看到自动化能实现的完整范围；从补丁管理到部署完全功能的混合云环境，OLAM 能改变你对计算的思维方式，打开你通向一个新世界的门，那里充满了“重复与清洗”的操作。以下是自动化可以简化的一个小子集的接触点。
- en: '![Figure 12.1 – Automation touch points](img/B18349_12_01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.1 – 自动化接触点](img/B18349_12_01.jpg)'
- en: Figure 12.1 – Automation touch points
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.1 – 自动化接触点
- en: 'In this chapter, the following recipes will cover the installation, configuration,
    and usability of the OLAM platform:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，以下食谱将涵盖 OLAM 平台的安装、配置和可用性：
- en: Installing OLAM
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 OLAM
- en: Zip through configuring and managing OLAM from the foundation up
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从基础开始快速配置和管理 OLAM
- en: OLAM isn’t fantasy football, but they both use playbooks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OLAM 不是幻想足球，但它们都使用剧本
- en: Controlling the patching chaos
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制补丁混乱
- en: Look beyond automation
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超越自动化
- en: Set it and forget it
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置后就忘记它
- en: Installing OLAM
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 OLAM
- en: Since the dawn of time we, as the human race, have tried to make things easier,
    quicker, and more efficient. However, I’m sure most of us have heard from our
    parents, “*Never take shortcuts*," or “*When I was a kid, I had to walk to and
    from school uphill, in the snow, with one leg, both ways.*” These anecdotes really
    never change; they evolve as we get to our parent’s age, and we try to pass on
    our wisdom to the next generation. Well, what if I told you that you could have
    your cake and eat it too? Automation is the evolution of computing and the automation
    of repeatable tasks. Now, of course, we can’t automate everything, and there are
    certain tasks that aren’t worth the effort to automate, because they’re not repeatable
    or the factors change to the point that automation would break the process.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 自从人类出现以来，我们作为一个物种，一直在努力让事情变得更简单、更快速、更高效。然而，我敢肯定我们大多数人都听过父母说过：“*永远不要走捷径*”，或者“*我小时候得在雪地里单腿走路上学，还是上坡，两边都要走*。”这些轶事从未改变；它们随着我们年纪的增长而演变，我们也试图将智慧传给下一代。好吧，如果我告诉你，你可以一举两得呢？自动化是计算机技术的进化，是可重复任务的自动化。当然，我们不能自动化所有事情，有些任务不值得去自动化，因为它们不是可重复的，或者某些因素变化到自动化会使得流程崩溃的程度。
- en: The dictionary definition of automation is “*the application of technology,
    programs, robotics, or process to achieve outcomes with minimal human input*."
    Note *process* – the process in which we change, execute, or alter the outcome
    of a result. Automation is that process change. We can automate the installation
    of an application, such as the installation of Microsoft Office, or an antivirus;
    we’ve been automating these processes since the beginning of the world of computing.
    Now, we carry automation to the next level. Take, for instance, Ansible Tower,
    Red Hat’s version of automation. Both Ansible and OLAM are built on AWX, which
    is a powerful and modern web UI and API that allows you to easily manage your
    organization’s Ansible playbook, inventories, vault, and credentials. With AWX,
    you can streamline your automation processes and simplify your infrastructure
    management tasks, all from a single, user-friendly interface. For instance, say
    that a university computer science professor has a lab to prepare every week;
    the lab has 50 students, and each one requires a separate virtual lab to participate.
    The professor wouldn’t want to sit there and rebuild the lab environment every
    week. With Ansible, a playbook (not the football playbook, but an outline and
    functional requirements) can be put together to execute a subset of commands automating
    the creation of that lab environment. By creating that playbook, an engineer can
    alter a few variables to change the number of virtual machines, memory, vCPU,
    or any other resource or application being used. Essentially, Ansible and the
    Ansible playbook shorten the process of creating that lab exponentially, making
    it repeatable and saving the professor from recreating it every week.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化的字典定义是“*应用技术、程序、机器人或流程以最小的人工输入实现预定的结果*。” 注意*流程*——这是我们改变、执行或改变结果的过程。自动化就是这种过程的改变。我们可以自动化应用程序的安装，比如安装
    Microsoft Office 或者杀毒软件；自计算机时代开始，我们就已经在自动化这些过程了。现在，我们将自动化带入了一个新的层级。例如，Red Hat
    的自动化版本 Ansible Tower就是如此。Ansible 和 OLAM 都是基于 AWX 构建的，AWX 是一个强大且现代化的 Web 用户界面和
    API，能够让你轻松管理组织的 Ansible 剧本、库存、保险库和凭证。通过 AWX，你可以简化自动化流程，并简化基础设施管理任务，所有这些都能通过一个简单易用的界面进行操作。例如，假设某大学的计算机科学教授每周都需要准备实验室；这个实验室有
    50 名学生，每个学生都需要一个独立的虚拟实验室来参与。教授肯定不想每周都坐在那里重建实验环境。通过 Ansible，一个剧本（不是足球战术书，而是一个大纲和功能需求）可以编写，用来执行一系列命令，自动化创建实验环境。通过创建这个剧本，工程师可以更改一些变量，调整虚拟机数量、内存、vCPU
    或者其他资源或应用程序的使用。实际上，Ansible 和 Ansible 剧本极大地缩短了创建实验环境的过程，使其变得可重复，从而节省了教授每周重建的时间。
- en: OLAM is an automation suite and comes bundled as an open source Linux distribution
    (Oracle Linux), based on AWX and Ansible Tower. OLAM is a configurable automation
    platform, much like Ansible, with the ability to create, manage and change playbooks.
    OLAM is installed with a UI, as you’ll see later in this recipe, as well as a
    CLI. Both the UI and CLI are fully functional and have all the granularity of
    Ansible Tower, available at no cost, with a premier support subscription. OLAM
    can be used, as shown in the following figure, to create playbooks that can automate
    processes within multiple arenas, from on-premise virtualization farms and HCI
    environments to application deployments, reaching into multiple cloud platforms
    and hybrid cloud distributions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: OLAM 是一款自动化套件，作为开源的 Linux 发行版（Oracle Linux）捆绑发布，基于 AWX 和 Ansible Tower。OLAM
    是一个可配置的自动化平台，非常类似于 Ansible，具有创建、管理和更改剧本的能力。OLAM 安装时附带了一个 UI，如你将在后续食谱中看到的，还有一个
    CLI。UI 和 CLI 都是完全功能的，并且具备 Ansible Tower 的所有细致功能，并且提供免费使用，配合高级支持订阅。OLAM 可以如以下图所示，用来创建剧本，自动化多个领域的流程，从本地虚拟化农场和
    HCI 环境，到应用程序部署，再到多个云平台和混合云分发的应用。
- en: '![Figure 12.2 – The playbook hierarchy](img/B18349_12_02.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.2 – 自动化剧本层级](img/B18349_12_02.jpg)'
- en: Figure 12.2 – The playbook hierarchy
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.2 – 自动化剧本层级
- en: In this recipe, we’ll be installing OLAM. As with any application installation,
    we need to prepare a base environment to install the application on – in this
    case, Oracle Linux 8 of course. We’ll need to prepare and configure that OS, which
    we will not be walking through in detail, as that was covered in a previous recipe
    in this book. However, it is advisable that you install the OS with a GUI.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本指南中，我们将安装 OLAM。与任何应用程序安装一样，我们需要准备一个基础环境来安装应用程序——当然，这里是 Oracle Linux 8。我们需要准备并配置该操作系统，虽然本书中的前一个指南已经详细介绍了这一部分内容，但我们不会在此重复。然而，建议您安装带
    GUI 的操作系统。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'We’ll be installing OLAM in **Oracle Cloud Infrastructure** (**OCI**) as a
    virtual machine. Refer to *Chapters 3* and *4* on navigating and configuring OCI
    virtual machines. We’ll briefly walk through the creation of the VM in the following
    steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 **Oracle Cloud Infrastructure**（**OCI**）中作为虚拟机安装 OLAM。请参考 *第 3 章* 和 *第
    4 章* 了解如何浏览和配置 OCI 虚拟机。接下来，我们将简要介绍 VM 创建的步骤：
- en: 'Navigate to OCI **Instances**, to create a host instance for OLAM:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 OCI **实例**，以为 OLAM 创建主机实例：
- en: '![Figure 12.3 – Instances for VM Creation](img/B18349_12_03.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.3 – 创建 VM 实例](img/B18349_12_03.jpg)'
- en: Figure 12.3 – Instances for VM Creation
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.3 – 创建 VM 实例
- en: 'You’ll want to create an instance, by clicking on **Create instance**:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要通过点击 **创建实例** 来创建一个实例：
- en: '![Figure 12.4 – Instance Creation](img/B18349_12_04.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.4 – 实例创建](img/B18349_12_04.jpg)'
- en: Figure 12.4 – Instance Creation
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.4 – 实例创建
- en: 'You can name your instance, and select a compartment to host the VM:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以为实例命名，并选择一个隔离的区域来托管 VM：
- en: '![Figure 12.5 – Name your instance](img/B18349_12_05.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.5 – 为实例命名](img/B18349_12_05.jpg)'
- en: Figure 12.5 – Name your instance
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.5 – 为实例命名
- en: 'After naming the VM, you can select the location, or **Availability Domain**
    (**AD**) you want to host the VM. The AD we’re using is the default AD for OCI:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命名 VM 后，您可以选择您希望托管 VM 的位置或 **可用性域**（**AD**）。我们使用的 AD 是 OCI 的默认 AD：
- en: '![Figure 12.6 – Availability Domain](img/B18349_12_06.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.6 – 可用性域](img/B18349_12_06.jpg)'
- en: Figure 12.6 – Availability Domain
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.6 – 可用性域
- en: 'We’re giving our VM 8 GB of RAM and 2 vCPUs, so we’ll want to select the correct
    host configuration. You’ll want to edit and change the shape as shown in the following
    screenshot:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为 VM 配置了 8 GB 的 RAM 和 2 个 vCPU，因此我们需要选择正确的主机配置。您可以按照以下屏幕截图编辑并更改形状：
- en: '![Figure 12.7 – Image Size and Shape](img/B18349_12_07.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.7 – 镜像大小和形状](img/B18349_12_07.jpg)'
- en: Figure 12.7 – Image Size and Shape
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.7 – 镜像大小和形状
- en: 'Edit the shape by clicking on **Change shape** and select your shape as shown
    under **Shape name**:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **更改形状** 来编辑形状，并在 **形状名称** 下选择您的形状：
- en: '![Figure 12.8 – VM Shape Selection](img/B18349_12_08.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.8 – VM 形状选择](img/B18349_12_08.jpg)'
- en: Figure 12.8 – VM Shape Selection
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.8 – VM 形状选择
- en: 'The **VM.Standard.E3.FLEX** shape allows you to specify your resources:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**VM.Standard.E3.FLEX** 形状允许您指定您的资源：'
- en: '![Figure 12.9 – VM Resource Configuration](img/B18349_12_09.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.9 – VM 资源配置](img/B18349_12_09.jpg)'
- en: Figure 12.9 – VM Resource Configuration
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.9 – VM 资源配置
- en: 'We’re going to select 8 GB of RAM (memory) and 2 vCPUs. The minimal requirements
    for OLAM are 2 vCPU’s and 4 GB of RAM:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将选择 8 GB 的 RAM（内存）和 2 个 vCPU。OLAM 的最低要求是 2 个 vCPU 和 4 GB 的 RAM：
- en: '![Figure 12.10 – VM Resource Selections](img/B18349_12_10.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.10 – VM 资源选择](img/B18349_12_10.jpg)'
- en: Figure 12.10 – VM Resource Selections
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.10 – VM 资源选择
- en: 'After configuring your VM resources, you’ll have to configure your access keys
    (public key):'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置完 VM 资源后，您需要配置访问密钥（公钥）：
- en: '![Figure 12.11 – SSH Key choices](img/B18349_12_11.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.11 – SSH 密钥选择](img/B18349_12_11.jpg)'
- en: Figure 12.11 – SSH Key choices
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.11 – SSH 密钥选择
- en: 'You can either create, upload, paste, or continue without a key. We’re going
    to paste our key, by selecting the key, and copying the pasted key:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以创建、上传、粘贴密钥，或者选择不使用密钥。我们将通过选择密钥并复制粘贴密钥来进行粘贴：
- en: '![Figure 12.12 – SSH Key Pasting](img/B18349_12_12.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.12 – SSH 密钥粘贴](img/B18349_12_12.jpg)'
- en: Figure 12.12 – SSH Key Pasting
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.12 – SSH 密钥粘贴
- en: 'After configuring your key, scroll down to the end of the instance screen,
    and click on **Create**:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置完密钥后，滚动到实例页面的底部，并点击 **创建**：
- en: '![Figure 12.13 – VM Creation](img/B18349_12_13.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.13 – VM 创建](img/B18349_12_13.jpg)'
- en: Figure 12.13 – VM Creation
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.13 – VM 创建
- en: 'Once you’ve created your instance, access the VM using SSH with the `opc` user
    and your key:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建实例后，您可以使用 SSH 以 `opc` 用户和您的密钥访问 VM：
- en: '[PRE0]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Adding a YUM repository isn’t difficult at all, and it enables you to update,
    install, deinstall, or patch certain aspects at the OS and kernel levels, including
    applications. As mentioned earlier in the chapter, you can add these repositories,
    via DNF to the OS, while walking through the GUI, or later after the installation.
    Either way, you’ll have to either have access to the outside, meaning we’ll have
    to be able to reach out of the environment to Oracle repositories or a local mirror
    set up. We’re not going to walk through setting up a local mirror, but we will
    walk through adding the repos using DNF:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加YUM仓库非常简单，它使你能够在操作系统和内核级别更新、安装、卸载或修补某些方面，包括应用程序。如本章前面所提到的，你可以通过DNF将这些仓库添加到操作系统中，同时也可以在GUI界面中或安装后进行添加。无论哪种方式，你必须能够访问外部环境，这意味着我们需要能够连接到Oracle仓库或设置本地镜像。我们不会详细说明如何设置本地镜像，但我们会演示如何使用DNF添加这些仓库：
- en: '[PRE1]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As shown in the preceding code, we’re adding several repos; most of these are
    required for either OS-level patches or installing OLAM.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如前面的代码所示，我们正在添加多个仓库；其中大多数仓库是用于操作系统级别的补丁或安装OLAM所必需的。
- en: 'One of the most important aspects of all the prerequisites is the ability for
    an application to see outside of the internal system into the ecosystem; in order
    to do this, we need to open up a portal outside of the internal system – in other
    words, we open firewall ports, as shown here:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有前提条件中最重要的一点是应用程序能否看到外部环境；为了做到这一点，我们需要打开一个外部门户——换句话说，就是打开防火墙端口，如下所示：
- en: '[PRE2]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After we open those ports, we’re going to have to enable the repo we just installed
    with DNF. This can be done before configuring the firewall as well:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在打开这些端口后，我们需要启用我们刚刚使用DNF安装的仓库。这个步骤也可以在配置防火墙之前完成：
- en: '[PRE3]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After enabling that repo, we need to install and configure the OLAM repo, as
    shown here:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用该仓库后，我们需要安装并配置OLAM仓库，如下所示：
- en: '[PRE4]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As we did with the base repo, we need to enable the OLAM repo as well:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像我们做的基础仓库一样，我们也需要启用OLAM仓库：
- en: '[PRE5]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After enabling the newer OLAM repository, we need to disable the old one:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用更新的OLAM仓库后，我们需要禁用旧的仓库：
- en: '[PRE6]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once that is done, we’ve completed the prerequisites for the OLAM installation
    from an application perspective. However, we need to prepare the database for
    OLAM now. In order to do this, we need to install and configure the database module.
    OLAM uses a Postgres database, which is SQL-based. The following is the command
    to install that module:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦完成这些，我们就完成了从应用程序角度来看安装OLAM的前提条件。然而，我们现在需要为OLAM准备数据库。为了做到这一点，我们需要安装并配置数据库模块。OLAM使用Postgres数据库，它是基于SQL的。以下是安装该模块的命令：
- en: '[PRE7]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once we install the module, it needs to be enabled:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装模块后，它需要启用：
- en: '[PRE8]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now that we’ve installed and enabled the Postgres module, we can install the
    database:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经安装并启用了Postgres模块，接下来可以安装数据库：
- en: '[PRE9]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Initiating the database is next. This prepares it for use and allows data to
    be overwritten if already present:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是初始化数据库。这一步为使用数据库做准备，并允许在已有数据时进行覆盖：
- en: '[PRE10]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After the initiation, you’ll want to change the password schema to match requirements:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在初始化之后，你需要更改密码模式以符合要求：
- en: '[PRE11]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, we will enable the database, as shown here:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将启用数据库，如下所示：
- en: '[PRE12]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After enabling the database, we want to make sure everything is prepared for
    the OLAM installation, so we’ll want to get the status of the database. The following
    is the command to display the status:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用数据库后，我们需要确保一切为OLAM安装做好准备，因此我们需要查看数据库的状态。以下是显示状态的命令：
- en: '[PRE13]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Once this is done, we’re ready to get into the meat and potatoes – installing
    OLAM.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们就准备进入重点内容——安装OLAM。
- en: How to do it…
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'After we’ve completed the prerequisites, we’re ready to move on to the installation.
    Remember that the firewall ports, installing the YUM repositories and Postgres,
    and enabling them are important. Without these prerequisites, you will not be
    able to move forward and the installation will fail:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 完成前提条件后，我们可以继续进行安装。请记住，防火墙端口、安装YUM仓库和Postgres并启用它们是非常重要的。如果没有这些前提条件，你将无法继续，安装会失败：
- en: 'The first step to install OLAM is the creation of the AWX user. Remember that
    AWX is the foundation that OLAM is built on, so this is really important:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装OLAM的第一步是创建AWX用户。记住，AWX是OLAM的基础，所以这一步非常重要：
- en: '[PRE14]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, that we’ve installed the database engine, we’re going to install the database,
    as shown here:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，安装完数据库引擎后，我们将安装数据库，如下所示：
- en: '[PRE15]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'After we install the database, we want to edit the config file:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Do you remember when we defined the password variables? Here, we’re notating
    that in the host-based authentication config file, highlighted in the following
    snippet. After we’re finished, we’ll want to make sure to save and exit the configuration:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[root@olam-test ~]# vi /var/lib/pgsql/data/postgresql.conf'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#------------------------------------------------------------------------------'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: CONNECTIONS AND AUTHENTICATION
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: '#------------------------------------------------------------------------------'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Connection Settings -'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: listen_addresses = 'OCI NAT Address' – IP address in ifconfig
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#listen_addresses = ''localhost''         # what IP address(es) to listen on;'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'After editing that file, again, make sure to save and exit that configuration.
    After you have saved the file, you’ll want to restart Postgres to make sure all
    of your changes have been committed:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After all these changes have been committed, I always like to update all the
    YUM repos and make sure we have all the updates loaded. In order to do this, we
    have to update our system. The following is the DNF command to update the repositories:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After you’ve updated all of the YUM repositories, take a quick look at the
    preceding code, and note all of the repos we added and enabled in the previous
    section. You’ll want to restart your virtual machine to make sure all the changes
    are reflected:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following is the command and the output to install OLAM:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, you’ll want to exit root, which is very important; you cannot continue
    as root for AWX:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[opc@olam-test ~]# su -l awx -s /bin/bash'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Since OLAM runs in a cloud-native environment, we’re using Podman to orchestrate
    the tuning and creation of that fabric. The following is the command to use the
    latest version of Podman to migrate to and create that environment within your
    virtual machine:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, we’re going to pull down the latest version of OLAM from the Oracle Docker
    registry, by running the following command:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, we want to migrate our environment to the containers:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, we want to create our user:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'After we’ve created our environment and user, we need to configure that environment.
    This will write the encryption key and annotate the location, address, hostname,
    and other identifiers. However, the VM-specific data is necessary:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[awx@olam-test ~]$ exit'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[awx@olam-test ~]$ sudo su - root'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, we want to set up our web server. This is done with a typical, widely
    distributed, canned configuration, as shown here:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[root@olam-test ~]# sudo su -l awx -s /bin/bash'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[awx@olam-test ~]$ awx-manage provision_instance --hostname=10.0.0.193 --node_type=hybrid'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Successfully registered instance 10.0.0.193
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '(changed: True)'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We’ll register the default environments by running the following command:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[root@olam-test ~]# vi /etc/receptor/receptor.conf'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '---'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- node:'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'id: 10.0.0.44'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- log-level: debug'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- tcp-listener:'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'port: 27199'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#- work-signing:'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#    privatekey: /etc/receptor/work_private_key.pem'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#    tokenexpiration: 1m'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#- work-verification:'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#- work-verification:'
- en: '#    publickey: /etc/receptor/work_public_key.pem'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#    publickey: /etc/receptor/work_public_key.pem'
- en: '#- tcp-peer:'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#- tcp-peer:'
- en: '#    address: 100.100.253.53:27199'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#    address: 100.100.253.53:27199'
- en: '#    redial: true'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#    redial: true'
- en: '#- tls-server:'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#- tls-server:'
- en: '#    name: mutual-tls'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#    name: mutual-tls'
- en: '#    cert: /etc/receptor/certs/awx.crt'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#    cert: /etc/receptor/certs/awx.crt'
- en: '#    key: /etc/receptor/certs/awx.key'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#    key: /etc/receptor/certs/awx.key'
- en: '#    requireclientcert: true'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#    requireclientcert: true'
- en: '#    clientcas: /etc/receptor/certs/ca.crt'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#    clientcas: /etc/receptor/certs/ca.crt'
- en: '- control-service:'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- control-service:'
- en: 'service: control'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'service: control'
- en: 'filename: /var/run/receptor/receptor.sock'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'filename: /var/run/receptor/receptor.sock'
- en: '- work-command:'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- work-command:'
- en: 'worktype: local'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'worktype: local'
- en: 'command: /var/lib/ol-automation-manager/venv/awx/bin/ansible-runner'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'command: /var/lib/ol-automation-manager/venv/awx/bin/ansible-runner'
- en: 'params: worker'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'params: worker'
- en: 'allowruntimeparams: true'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'allowruntimeparams: true'
- en: '#    verifysignature: true'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#    verifysignature: true'
- en: '[PRE34]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, we’re going to enable the OLAM service by running the following command;
    this begins the process of accessing OLAM:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将通过运行以下命令来启用 OLAM 服务；这将开始访问 OLAM 的过程：
- en: '[PRE35]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now, we want to preload our data by running the following command. Once this
    is done, we’ll be ready to log in to our OLAM instance, and our installation will
    be complete:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们希望通过运行以下命令来预加载我们的数据。一旦完成，我们就可以登录到 OLAM 实例，安装将会完成：
- en: '[PRE36]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '![Figure 12.14 – OLAM password creation](img/B18349_12_14.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.14 – OLAM 密码创建](img/B18349_12_14.jpg)'
- en: Figure 12.14 – OLAM password creation
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.14 – OLAM 密码创建
- en: Zip through configuring and managing OLAM from the foundation up
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从基础开始快速配置和管理 OLAM
- en: Managing OLAM can be done either through the UI or via the CLI. Here, we’ll
    be working through the UI. Think of it this way – OLAM is the platform on which
    you’ll be managing your projects, inventories, playbooks, and automation through
    either your UI or CLI. Projects are at the top layer, and the hierarchy descends
    from there to playbooks and, eventually, triggering automations. Whether you use
    the UI or CLI, you’ll have granular control over your key environments.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 管理 OLAM 可以通过 UI 或 CLI 完成。在这里，我们将通过 UI 操作。可以这样理解——OLAM 是一个平台，你将在其上管理你的项目、库存、playbooks
    和自动化，无论是通过 UI 还是 CLI。项目位于最顶层，层级结构从项目开始，向下延伸至 playbooks，最终触发自动化。无论使用 UI 还是 CLI，你都可以对你的关键环境进行精细控制。
- en: '![Figure 12.15 – The OLAM hierarchy](img/B18349_12_15.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.15 – OLAM 层级结构](img/B18349_12_15.jpg)'
- en: Figure 12.15 – The OLAM hierarchy
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.15 – OLAM 层级结构
- en: This recipe will walk you through viewing, understanding, and executing basic
    commands in your OLAM environment, creating projects, managing groups, and adding
    to inventories.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南将带你了解如何在 OLAM 环境中查看、理解和执行基本命令，创建项目，管理组以及添加到库存中。
- en: Getting ready
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'As shown in the following figure, and in the previous recipe, you’ll want to
    log in to your OLAM environment:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，并在之前的步骤中，你需要登录到你的 OLAM 环境：
- en: '![Figure 12.16 – OLAM first-time login](img/B18349_12_16.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.16 – OLAM 首次登录](img/B18349_12_16.jpg)'
- en: Figure 12.16 – OLAM first-time login
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.16 – OLAM 首次登录
- en: 'The first and highest level in the OLAM hierarchy is the project. You must
    create a project, and that will be the host to all the playbooks and automation
    in that hierarchy. You can have multiple projects that are assigned to different
    assets and inventories. Let''s see how to do that in the following steps:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: OLAM 层级结构中的第一个也是最高层级是项目。你必须创建一个项目，它将作为该层级中所有 playbooks 和自动化的宿主。你可以有多个项目，分配给不同的资产和库存。接下来让我们看看如何在以下步骤中完成这项操作：
- en: 'In order to create a project, you’ll want to go to the **Resources** tab and
    navigate to **Projects**:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个项目，你需要进入 **资源** 标签页并导航到 **项目**：
- en: '![Figure 12.17 – The OLAM Projects option](img/B18349_12_17.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.17 – OLAM 项目选项](img/B18349_12_17.jpg)'
- en: Figure 12.17 – The OLAM Projects option
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.17 – OLAM 项目选项
- en: Once in **Projects**, click **Add**. This will open up a window where you can
    define the project.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦进入 **项目**，点击 **添加**。这将打开一个窗口，在这里你可以定义项目。
- en: '![Figure 12.18 – Adding a project](img/B18349_12_18.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.18 – 添加项目](img/B18349_12_18.jpg)'
- en: Figure 12.18 – Adding a project
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.18 – 添加项目
- en: Once you’ve opened up your project configuration page, you’ll want to strategize
    how you want your project to look. In this case, we’re creating a test environment,
    and we have set up two separate test nodes for lab purposes. Defaults are used
    for the playbook directory as well as the project path.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦打开你的项目配置页面，你需要规划你的项目外观。在这个例子中，我们正在创建一个测试环境，并且已为实验室用途设置了两个独立的测试节点。默认设置用于 playbook
    目录和项目路径。
- en: '![Figure 12.19 – The project variables](img/B18349_12_19.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.19 – 项目变量](img/B18349_12_19.jpg)'
- en: Figure 12.19 – The project variables
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.19 – 项目变量
- en: After you’ve configured your project, you will want to save that information,
    which will bring you to a screen showing your fully configured project.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置完项目后，你需要保存这些信息，这将带你进入一个显示已完全配置项目的屏幕。
- en: '![Figure 12.20 – The project configuration page](img/B18349_12_20.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.20 – 项目配置页面](img/B18349_12_20.jpg)'
- en: Figure 12.20 – The project configuration page
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.20 – 项目配置页面
- en: 'Once you’ve configured your project, you’ll want to configure your credentials,
    much like your project, as shown here:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置好项目后，你需要配置凭证，方式与项目类似，如下所示：
- en: '![Figure 12.21 – The Credentials option](img/B18349_12_21.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.21 – 凭证选项](img/B18349_12_21.jpg)'
- en: Figure 12.21 – The Credentials option
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.21 – 凭证选项
- en: The next step is to add your credential data for your `opc` user and machine.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是添加你 `opc` 用户和机器的凭证数据。
- en: '![Figure 12.22 – Credential addition](img/B18349_12_22.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.22 – 凭证添加](img/B18349_12_22.jpg)'
- en: Figure 12.22 – Credential addition
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.22 – 凭证添加
- en: You’ll want to either copy or create a key, which you’ll use to access machines.
    Paste it into the **SSH Private Key** section, and enter the names of your key
    and user.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要复制或创建一个密钥，用于访问机器。将其粘贴到**SSH 私钥**部分，并输入你的密钥名称和用户。
- en: '![Figure 12.23 – Credential variables and the SSH private key](img/B18349_12_23.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.23 – 凭证变量和 SSH 私钥](img/B18349_12_23.jpg)'
- en: Figure 12.23 – Credential variables and the SSH private key
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.23 – 凭证变量和 SSH 私钥
- en: 'After you save the credential, the configured credential will be displayed,
    as shown here:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存凭证后，配置好的凭证将会显示，如下所示：
- en: '![Figure 12.24 – Credential configuration page](img/B18349_12_24.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.24 – 凭证配置页面](img/B18349_12_24.jpg)'
- en: Figure 12.24 – Credential configuration page
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.24 – 凭证配置页面
- en: Next, you’ll need to add an inventory. Remember that two test virtual machines
    were created for this, and in this recipe, they will be used as test environments.
    Select **Inventories**, and follow the next steps to define the inventory after
    selecting.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你需要添加一个库存。记住，已经创建了两个测试虚拟机，在这个示例中，它们将作为测试环境使用。选择**库存**，然后按照接下来的步骤在选择后定义库存。
- en: '![Figure 12.25 – The Inventories option](img/B18349_12_25.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.25 – 库存选项](img/B18349_12_25.jpg)'
- en: Figure 12.25 – The Inventories option
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.25 – 库存选项
- en: 'Click on **Add** to create and define your new inventory:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**来创建并定义你的新库存：
- en: '![Figure 12.26 – Adding an inventory](img/B18349_12_26.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.26 – 添加库存](img/B18349_12_26.jpg)'
- en: Figure 12.26 – Adding an inventory
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.26 – 添加库存
- en: 'You’ll define your inventory with a name, using the default organization:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将使用默认组织定义库存名称：
- en: '![Figure 12.27 – Inventory variables](img/B18349_12_27.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.27 – 库存变量](img/B18349_12_27.jpg)'
- en: Figure 12.27 – Inventory variables
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.27 – 库存变量
- en: 'The configured test inventory is shown here:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置好的测试库存如下所示：
- en: '![Figure 12.28 – The inventory configuration page](img/B18349_12_28.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.28 – 库存配置页面](img/B18349_12_28.jpg)'
- en: Figure 12.28 – The inventory configuration page
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.28 – 库存配置页面
- en: 'After creating an inventory, we have to add hosts to it. This will involve
    adding machines that we can test automation on. Select **Hosts** in the menu selection,
    and then the host from the list, as shown here:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建库存后，我们需要向其中添加主机。这将涉及添加可以进行自动化测试的机器。在菜单中选择**主机**，然后从列表中选择主机，如下所示：
- en: '![Figure 12.29 – The Hosts option](img/B18349_12_29.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.29 – 主机选项](img/B18349_12_29.jpg)'
- en: Figure 12.29 – The Hosts option
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.29 – 主机选项
- en: 'You can then add your new host, as shown here:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你可以添加新的主机，如下所示：
- en: '![Figure 12.30 – Adding a host](img/B18349_12_30.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.30 – 添加主机](img/B18349_12_30.jpg)'
- en: Figure 12.30 – Adding a host
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.30 – 添加主机
- en: 'The following is the configuration page to create your new host; make sure
    to select the inventory you just created:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是创建新主机的配置页面；确保选择你刚创建的库存：
- en: '![Figure 12.31 – The host variables](img/B18349_12_31.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.31 – 主机变量](img/B18349_12_31.jpg)'
- en: Figure 12.31 – The host variables
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.31 – 主机变量
- en: Make sure to save your configuration. Once you have done so, the host configuration
    will be displayed.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保保存你的配置。完成后，主机配置将会显示。
- en: '![Figure 12.32 – The host configuration page](img/B18349_12_32.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.32 – 主机配置页面](img/B18349_12_32.jpg)'
- en: Figure 12.32 – The host configuration page
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.32 – 主机配置页面
- en: You’ll have to repeat this, as only one host was created here; to show multiplicity,
    two hosts need to be created to mimic a working environment.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要重复此操作，因为这里只有一台主机被创建；为了展示多样性，必须创建两台主机以模拟一个工作环境。
- en: '![Figure 12.33 – Hosts](img/B18349_12_33.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.33 – 主机](img/B18349_12_33.jpg)'
- en: Figure 12.33 – Hosts
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.33 – 主机
- en: The setup and basic configuration of OLAM are complete. In the following recipes,
    we’ll review how to run playbooks and further advanced configurations of OLAM.
    In the next recipe, we’ll test our final configuration by running a command against
    the two test servers created.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: OLAM 的设置和基本配置已经完成。在接下来的几项操作中，我们将回顾如何运行战术手册并进一步配置 OLAM。在下一个操作中，我们将通过对创建的两台测试服务器运行命令来测试最终配置。
- en: How to do it…
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何执行……
- en: 'After adding the two hosts, you can test-run a set of commands against them.
    To run the commands, you’ll need to navigate back to **Hosts** and click **Run
    Command**:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加了这两台主机后，你可以对它们执行一组命令进行测试。要运行这些命令，你需要返回到**主机**并点击**运行命令**：
- en: '![Figure 12.34 – Running simple commands on hosts](img/B18349_12_34.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.34 – 在主机上运行简单命令](img/B18349_12_34.jpg)'
- en: Figure 12.34 – Running simple commands on hosts
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.34 – 在主机上运行简单命令
- en: You’ll choose the module(s) you’ll want to run – in this case, `uptime` as the
    variable argument. This runs in a shell environment, much like you would run it
    in any Linux environment.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将选择要运行的模块，在这种情况下，`uptime` 是作为变量参数。这个命令在一个 shell 环境中运行，就像你在任何 Linux 环境中运行它一样。
- en: '![Figure 12.35 – The command variables](img/B18349_12_35.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.35 – 命令变量](img/B18349_12_35.jpg)'
- en: Figure 12.35 – The command variables
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.35 – 命令变量
- en: We’ll have to define the environment we want to run in, which is **OLAM** **EE
    (latest)**.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要定义我们希望运行的环境，即**OLAM** **EE（最新版本）**。
- en: '![Figure 12.36 – The execution environment](img/B18349_12_36.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.36 – 执行环境](img/B18349_12_36.jpg)'
- en: Figure 12.36 – The execution environment
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.36 – 执行环境
- en: 'These are the credentials we used before on the two test nodes we created:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些是我们之前在两个测试节点上使用的凭据：
- en: '![Figure 12.37 – The credentials selection](img/B18349_12_37.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.37 – 凭据选择](img/B18349_12_37.jpg)'
- en: Figure 12.37 – The credentials selection
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.37 – 凭据选择
- en: The following is the output to the test; as you can see, the uptime is listed
    for each environment, `olam-target-1` and `olam-target-2`.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是测试的输出；如你所见，`olam-target-1` 和 `olam-target-2` 的每个环境的正常运行时间都列出在内。
- en: '![Figure 12.38 – The command run output](img/B18349_12_38.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.38 – 命令运行输出](img/B18349_12_38.jpg)'
- en: Figure 12.38 – The command run output
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.38 – 命令运行输出
- en: OLAM isn’t fantasy football, but they both use playbooks
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OLAM 不是幻想足球，但它们都使用战术手册
- en: Most of us know about fantasy football, where we follow teams, draft players,
    and bet on winners and losers. Well, we’re not betting anything here, other than
    whether our environment will work, but we are using something called a **playbook**.
    Consider a playbook much like that used by a football coach to train their team;
    it’s the same concept. We’re predefining an environment or event, and programmatically
    architecting it to behave in the way we tell it, creating or changing the environment
    we are defining, or even reclaiming resources (taking back CPU, RAM, and disk
    space from decommissioned environments). Whatever we define within the constraints
    of OLAM, we can execute.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们大多数人都知道幻想足球，在其中我们跟随球队，选拔球员，并对赢家和输家进行下注。嗯，在这里我们并没有下注什么，除了我们的环境是否能够正常工作，但我们确实使用了一种叫做**战术手册**的东西。可以把战术手册看作是足球教练用来训练球队的工具；这是相同的概念。我们在预定义一个环境或事件，并且以编程的方式构建它，使其按照我们指定的方式行为，创建或更改我们所定义的环境，甚至回收资源（从已废弃的环境中回收
    CPU、RAM 和磁盘空间）。无论我们在 OLAM 的约束下定义什么，我们都可以执行。
- en: 'In order to create our playbook, we need to figure out who, what, where, when,
    and maybe even why:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建我们的战术手册，我们需要弄清楚谁、什么、哪里、何时，甚至可能是为什么：
- en: Who – What resources groups are we targeting?
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Who – 我们针对哪些资源组？
- en: What – What kind of resources are we targeting? A VM? A physical machine?
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: What – 我们针对什么样的资源？是虚拟机？物理机？
- en: Where – Where are these resources located? In a CSP, VM farm, or physical server?
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Where – 这些资源位于哪里？是在 CSP、虚拟机农场，还是物理服务器上？
- en: When – When are we going to execute on the environment? Is it event-based (meaning
    do we clear disk space when a log fills up `/tmp`)?
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: When – 我们何时执行这个环境？是基于事件的（例如，当日志填满 `/tmp` 时我们清理磁盘空间）？
- en: Why – Why are we targeting this environment? Is it a database server and logs
    are maxing out disk space, a web server is over utilized, or an event is having
    a repeat affect?
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么 – 为什么我们要针对这个环境？是数据库服务器磁盘空间满了，网页服务器过度利用，还是某个事件反复发生影响了系统？
- en: A playbook can be triggered in many different ways, In AIOps, we focus on triggers;
    these can be an SNMP trap, agent-based triggers (such as a full disk, as shown
    previously), or a directed event from a platform. Let’s return to the other four
    variables – who, what, where, and when; *who* is which environment, *what* is
    what machines are used, *where* is the location of the environment(s), and *when*
    is when this playbook will run, and whether it will be triggered or run at a certain
    time. All or any of these are plausible and can be gradually defined.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 一个剧本可以通过多种方式触发，在 AIOps 中，我们关注触发条件；这些可以是 SNMP Trap、基于代理的触发条件（例如前面提到的磁盘已满），或来自平台的定向事件。让我们回到其他四个变量——谁、什么、哪里和何时；*谁*是哪个环境，*什么*是使用了哪些机器，*哪里*是环境的地点，*何时*是这个剧本将运行的时间，是否会在特定时间触发或运行。这些都可以逐步定义。
- en: '![Figure 12.39 – Playbooks and their touch points](img/B18349_12_39.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.39 – 剧本和它们的触发点](img/B18349_12_39.jpg)'
- en: Figure 12.39 – Playbooks and their touch points
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.39 – 剧本和它们的触发点
- en: Getting ready
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备开始
- en: 'Getting ready to build your own playbooks and/or utilize existing ones isn’t
    the monumental task it seems. In this recipe, we’ll explore adding a Git repository
    to your OLAM instance. This is done for a few reasons:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 准备构建你自己的剧本和/或使用现有剧本并不像看起来那么庞大。在这份指南中，我们将探讨如何将 Git 仓库添加到 OLAM 实例中。这么做有几个原因：
- en: Version control – control your code, who edits it, and the versions you’re on.
    Remember that things change, including infrastructure and OS versions. You want
    to keep track of what changes in your playbooks so that you can adjust to the
    changes.
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制 – 管理你的代码，谁编辑了它，以及你当前的版本。记住，事物会发生变化，包括基础设施和操作系统版本。你需要追踪剧本中的变化，以便适应这些变化。
- en: Keeping track of your playbooks – save them, collaborate, and share. You can
    share your templates and reuse them. Remember that one of the most important reasons
    why automation is so useful is repetition, limiting the need for human interaction
    in repetitive steps.
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪你的剧本 – 保存它们，协作，并共享。你可以共享你的模板并重新使用它们。记住，自动化如此有用的一个重要原因是它的重复性，限制了在重复步骤中对人工交互的需求。
- en: Git gives you a pipeline into your templates and allows you to easily add playbooks
    you’ve written to templates that you’ve written and created.
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git 为你的模板提供了一个管道，并允许你轻松地将你编写的剧本添加到你编写并创建的模板中。
- en: 'In order to add a Git repository to OLAM, you’ll need to first create it and
    add it to your OLAM project:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将 Git 仓库添加到 OLAM，你需要先创建它并将其添加到你的 OLAM 项目中：
- en: First, go to the **Projects** tab, as shown here.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，进入**项目**标签页，如图所示。
- en: '![Figure 12.40 – Projects menu](img/B18349_12_40.jpg)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.40 – 项目菜单](img/B18349_12_40.jpg)'
- en: Figure 12.40 – Projects menu
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.40 – 项目菜单
- en: Navigate to the test project we created, or create a new one – in this case,
    Oracle was created, since we’re going to add the Oracle sample playbooks to OLAM.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入我们创建的测试项目，或创建一个新项目 – 在这个例子中，Oracle 已创建，因为我们将把 Oracle 示例剧本添加到 OLAM。
- en: '![Figure 12.41 – Adding a project](img/B18349_12_41.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.41 – 添加项目](img/B18349_12_41.jpg)'
- en: Figure 12.41 – Adding a project
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.41 – 添加项目
- en: 'Enter the information for the project, including your Git data:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入项目的信息，包括你的 Git 数据：
- en: '![Figure 12.42 – Project configuration and variables for the Oracle Git repository](img/B18349_12_42.jpg)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.42 – Oracle Git 仓库的项目配置和变量](img/B18349_12_42.jpg)'
- en: Figure 12.42 – Project configuration and variables for the Oracle Git repository
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.42 – Oracle Git 仓库的项目配置和变量
- en: Then, save the project, which will bring you to your project’s **Details** screen.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，保存项目，这将带你进入项目的**详情**页面。
- en: '![Figure 12.43 – The Oracle Git project details](img/B18349_12_43.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.43 – Oracle Git 项目详情](img/B18349_12_43.jpg)'
- en: Figure 12.43 – The Oracle Git project details
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.43 – Oracle Git 项目详情
- en: How to do it…
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Once you’ve added your Git account data, as well as the Oracle Ansible playbook
    samples, you can start to create a new template with your Oracle Hello World playbook:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你添加了 Git 账户数据，以及 Oracle Ansible 示例剧本，你可以开始创建一个新模板，使用你的 Oracle Hello World
    剧本：
- en: 'You’ll need to, once again, navigate to **Templates**:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要再次进入**模板**：
- en: '![Figure 12.44 – The Templates option](img/B18349_12_44.jpg)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.44 – 模板选项](img/B18349_12_44.jpg)'
- en: Figure 12.44 – The Templates option
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.44 – 模板选项
- en: Click **Add** to create a new template.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**以创建一个新模板。
- en: '![Figure 12.45 – Adding a job template](img/B18349_12_45.jpg)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.45 – 添加作业模板](img/B18349_12_45.jpg)'
- en: Figure 12.45 – Adding a job template
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.45 – 添加作业模板
- en: Complete the worksheet with the correct variable, as we did in the previous
    recipe.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照我们在之前配方中所做的那样，完成工作表并填写正确的变量。
- en: '![Figure 12.46 – The job template variables](img/B18349_12_46.jpg)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.46 – 作业模板变量](img/B18349_12_46.jpg)'
- en: Figure 12.46 – The job template variables
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.46 – 作业模板变量
- en: This time, we’re going to select a playbook from the Oracle samples we selected.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这次，我们将从我们选择的 Oracle 示例中选择一个 playbook。
- en: '![Figure 12.47 – The Oracle Git sample playbook selection](img/B18349_12_47.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.47 – 选择 Oracle Git 示例 playbook](img/B18349_12_47.jpg)'
- en: Figure 12.47 – The Oracle Git sample playbook selection
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.47 – 选择 Oracle Git 示例 playbook
- en: 'We want to select the Oracle Hello World playbook:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们要选择 Oracle Hello World playbook：
- en: '![Figure 12.48 – The Hello World playbook](img/B18349_12_48.jpg)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.48 – Hello World playbook](img/B18349_12_48.jpg)'
- en: Figure 12.48 – The Hello World playbook
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.48 – Hello World playbook
- en: Make sure to assign **Privileged Escalation** access to the template.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保将**特权提升**访问权限分配给模板。
- en: '![Figure 12.49 – Job privilege credentials](img/B18349_12_49.jpg)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.49 – 作业权限凭证](img/B18349_12_49.jpg)'
- en: Figure 12.49 – Job privilege credentials
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.49 – 作业权限凭证
- en: Save your template, which will bring you to the **Details** page.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的模板，这将带您到**详细信息**页面。
- en: '![Figure 12.50 – The job configuration details](img/B18349_12_50.jpg)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.50 – 作业配置详情](img/B18349_12_50.jpg)'
- en: Figure 12.50 – The job configuration details
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.50 – 作业配置详情
- en: You can launch the template to see the results.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以启动模板以查看结果。
- en: '![Figure 12.51 – The job launch](img/B18349_12_51.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.51 – 作业启动](img/B18349_12_51.jpg)'
- en: Figure 12.51 – The job launch
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.51 – 作业启动
- en: Remember that your results will appear under the **Output** tab.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请记得，您的结果将显示在**输出**选项卡下。
- en: '![Figure 12.52 – The job output and results](img/B18349_12_52.jpg)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.52 – 作业输出和结果](img/B18349_12_52.jpg)'
- en: Figure 12.52 – The job output and results
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.52 – 作业输出和结果
- en: Controlling the patching chaos
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制补丁管理混乱
- en: Patching is a curse word to many, a comfort to some, and necessary to all. There
    is certainly a rational fear regarding patching on when to patch, how to patch,
    and what to patch. The who, what, where, when, and how words apply here too. These
    concerns are legitimate; I mean who wants to patch? It can be messy, and it’s
    time-consuming. We may not be able to mitigate the concerns, but we can shorten
    the time taken to automate. This is one aspect where automation helps to speed
    up operations, and it eases the frustration of having to patch multiple environments.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 对许多人来说，打补丁是一个脏字，对一些人来说是安慰，对所有人来说都是必要的。关于什么时候打补丁、如何打补丁以及打什么补丁，确实存在理性的恐惧。这里也适用谁、什么、哪里、何时和如何这些词。这些担忧是合理的；我的意思是，谁愿意打补丁呢？它可能很混乱，而且费时。我们可能无法消除这些担忧，但我们可以缩短自动化所需的时间。这就是自动化有助于加快操作速度的一个方面，它减轻了必须为多个环境打补丁的挫败感。
- en: A common automation question is, "What can we do to minimize what we can, and
    what do we have to do manually?" The concept that we’ll be able to create a playbook
    for anything and automate everything is simply not realistic. Firstly, there are
    some things we wouldn’t want to automate, and that depends on who you work for,
    or your organization’s policies and **standard operating procedures** (**SOPs**)
    toward automation. I’ve worked with certain defense contractors and agencies that
    have multiple boards voting on what automations are allowed, and they were very
    particular on what was and wasn’t approved. However, overall, automation is a
    great equalizer in saving us time and energy.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的自动化问题是：“我们能做些什么来最小化工作量，哪些必须手动完成？”我们能够为任何事情创建 playbook 并自动化一切的想法显然是不现实的。首先，有些事情我们不希望自动化，这取决于你为谁工作，或者你所在组织的政策和**标准操作程序**（**SOPs**）对自动化的态度。我曾与一些防务承包商和机构合作，他们有多个委员会投票决定允许哪些自动化，他们对哪些可以批准，哪些不能批准非常严格。不过，总体来说，自动化在节省时间和精力方面是一个伟大的平衡器。
- en: This recipe will walk through patching at a high level and help you understand
    how automation can go beyond, saving time and energy by automating repeatable
    steps.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方将简要介绍补丁管理，并帮助你理解自动化如何超越传统，节省时间和精力，通过自动化可重复的步骤。
- en: Getting ready
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Before we institute any playbooks, we have to make sure we have all the prerequisites
    in place, including writing the playbook itself. In this case, we will write a
    basic playbook, update the YUM repository on two servers, and reboot those servers
    after the update is complete. This can be expanded into multiple OSs, kernels,
    and/or application patching – the sky’s the limit.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned previously, we need to first examine and create a new playbook
    for our patching effort here. In order to do that, we will navigate to our template
    (playbook):'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.53 – The Templates option](img/B18349_12_53.jpg)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
- en: Figure 12.53 – The Templates option
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned previously, we have the template we wrote earlier. However, we’re
    going to click on **Add** to create another.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.54 – Adding a template](img/B18349_12_54.jpg)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
- en: Figure 12.54 – Adding a template
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: Select **Add** **job template**.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.55 – Adding a job template](img/B18349_12_55.jpg)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
- en: Figure 12.55 – Adding a job template
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll want to follow the same flow that we used for the initial template we
    created. However, this time, we’re going to select a different playbook:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.56 – Adding job variables](img/B18349_12_56.jpg)'
  id: totrans-326
  prefs: []
  type: TYPE_IMG
- en: Figure 12.56 – Adding job variables
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: We’ll name this one `Patching`, and we’ll select the updated YUM playbook.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.57 – The playbook selection](img/B18349_12_57.jpg)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
- en: Figure 12.57 – The playbook selection
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the following screenshot, the template is fully populated.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.58 – Job variables](img/B18349_12_58.jpg)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
- en: Figure 12.58 – Job variables
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: Make sure to give your template **Privileged Escalation** access, meaning admin
    access.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.59 – Privilege Escalation](img/B18349_12_59.jpg)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
- en: Figure 12.59 – Privilege Escalation
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: Save your template, which will bring you to your template’s **Details** screen.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.60 – The job configuration details and launch](img/B18349_12_60.jpg)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
- en: Figure 12.60 – The job configuration details and launch
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: Execute your template and playbook by clicking on **Launch**. The output of
    your template will be under the **Output** tab and will show any errors, omissions,
    and/or success. Remember to read through the output because you can have successful
    output with errors and/or skipped/missed steps.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.61 – The job output and results](img/B18349_12_61.jpg)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
- en: Figure 12.61 – The job output and results
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: Look beyond automation
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can create any resources, we need to have a place to create those
    resources. In this case, we’re using OCI as our incubator, so obviously, we need
    to add OCI to our OLAM instance. In order to do this, we need to create credentials
    to allow OLAM to access OCI. This doesn’t stop at OCI. OLAM is your doorway into
    hybrid cloud solutions. You can deploy on-premises solutions through virtualization
    fabrics and HCI solutions such as VxRail, VMware, and OpenStack. We won’t be covering
    hybrid cloud solutions in this recipe, although we did cover hybrid cloud in past
    recipes, such as migrating a virtual machine as a template into OCI or uploading
    an image to create an AMI image in AWS. These techniques can also be used in hybrid
    cloud scenarios, working with and moving workloads’ ingress and egress to **cloud
    service providers** (**CSPs**). As you can see, the possibilities are there, and
    they are endless.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建任何资源之前，我们需要有一个创建这些资源的地方。在本例中，我们使用OCI作为我们的孵化器，因此显然，我们需要将OCI添加到我们的OLAM实例中。为了做到这一点，我们需要创建凭据，以允许OLAM访问OCI。这不仅仅局限于OCI。OLAM是你进入混合云解决方案的大门。你可以通过虚拟化平台和HCI解决方案，如VxRail、VMware和OpenStack，部署本地解决方案。我们在本食谱中不会涉及混合云解决方案，尽管我们在之前的食谱中讨论过混合云，例如将虚拟机作为模板迁移到OCI，或上传镜像以在AWS中创建AMI镜像。这些技术也可以用于混合云场景，处理和移动工作负载的进出到**云服务提供商**（**CSPs**）。正如你所看到的，可能性是存在的，而且是无尽的。
- en: To delve a little further into **IaC** (**Infrastructure as Code**), we have
    to look at the definition of infrastructure as a service. Take a step back and
    reframe the way you think about infrastructure, and then reconstitute that in
    your head as moving numbers, fields, and landscapes. That’s what IaC is; it’s
    an ever-evolving landscape that keeps on changing its definition to match what
    the end state is. Have you ever played the game *Tetris*? IaC looks and feels
    like *Tetris*, although, in this case, we win every time; we’re just fitting pieces
    next to one another, creating an environment that matches what we need it to look
    like. There are so many different variables we can use to transform our everyday
    tasks into IaC – for example, expanding compute, storage, and/or network. For
    example, imagine we have virtual machine A, an image for web servers. We have
    two web servers deployed for a small university. That university has challenges
    during general admissions periods and needs to expand seamlessly. We can use autoscaling
    or workload expansion to implement new web servers, supplementing the university’s
    needs until the requirement expires. These examples are a little more intensive
    than the example in this recipe, but it’s essential to see the value of code as
    we move along this freeway of change in an evolving IT landscape.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 要深入了解**IaC**（**基础设施即代码**），我们需要查看作为服务的基础设施定义。退后一步，重新框定你对基础设施的思考方式，然后将其在脑海中重新构建为移动的数字、字段和景观。这就是IaC；它是一个不断演变的景观，始终在不断变化其定义，以匹配最终状态。你玩过*俄罗斯方块*吗？IaC看起来和感觉就像*俄罗斯方块*，不过在这种情况下，我们每次都赢；我们只是将各个部分拼接在一起，创建出一个符合我们需求的环境。我们可以使用许多不同的变量将日常任务转化为IaC——例如，扩展计算、存储和/或网络。例如，假设我们有虚拟机A，这是一个用于Web服务器的镜像。我们为一所小型大学部署了两个Web服务器。该大学在普通招生期间面临挑战，需要无缝扩展。我们可以使用自动扩展或工作负载扩展来实施新的Web服务器，补充大学的需求，直到需求过期。这些示例比本食谱中的示例更复杂，但在我们走在这条不断变化的IT景观高速公路上时，理解代码的价值是至关重要的。
- en: Getting ready
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Ansible provides building blocks for platform configuration and managing compute
    instances. In this recipe, we’re going to take a different look at Ansible, and
    we’ll see how to use it to write a playbook to instantiate a new virtual machine
    in OCI. We’re going to learn the basics of playbooks, beyond using the predefined
    Oracle basics we explored a couple of recipes ago, to discover the benefits of
    IaC through Ansible, and we’ll also learn how to create a foundation for Ansible
    to be used in the form of playbooks. Lastly, you’ll learn how to create playbooks
    and configure and manage resources on OCI.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible为平台配置和管理计算实例提供了构建模块。在本食谱中，我们将以不同的方式来看待Ansible，并学习如何使用它编写剧本来在OCI中实例化一个新的虚拟机。我们将学习剧本的基础知识，超越我们之前在几篇食谱中探索过的Oracle基本预定义内容，发现通过Ansible实现IaC的好处，并且我们还将学习如何为Ansible创建一个以剧本形式使用的基础。最后，你将学习如何创建剧本，并在OCI上配置和管理资源。
- en: To start, we need to configure our environment. This includes connecting our
    OLAM instance to OCI. This will allow us to execute our playbook in our OCI tenancy.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to go to **Credentials**.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.62 – The Credentials option](img/B18349_12_62.jpg)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
- en: Figure 12.62 – The Credentials option
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: You’ll want to add a credential for OCI.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.63 – Adding credentials](img/B18349_12_63.jpg)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
- en: Figure 12.63 – Adding credentials
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: You’ll have to collect the following information from your OCI tenancy – the
    user **Oracle Cloud Identifier** (**OCID**), fingerprint, tenant OCID, and region.
    All these can be found under **User** | **User settings** | **API Keys**.
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate and log in to your OCI console, and go to the user (the person icon
    on the right-hand side):'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 12.64 – The user icon on the right-hand side](img/B18349_12_64.jpg)'
  id: totrans-357
  prefs: []
  type: TYPE_IMG
- en: Figure 12.64 – The user icon on the right-hand side
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, navigate to **User settings**:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.65 – The OCI User settings option](img/B18349_12_65.jpg)'
  id: totrans-360
  prefs: []
  type: TYPE_IMG
- en: Figure 12.65 – The OCI User settings option
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: 'All the data will be under **API Keys**:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.66 – The OCI API Keys menu](img/B18349_12_66.jpg)'
  id: totrans-363
  prefs: []
  type: TYPE_IMG
- en: Figure 12.66 – The OCI API Keys menu
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure to select the **View Configuration** **file** option:'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.67 – Configuration file](img/B18349_12_67.jpg)'
  id: totrans-366
  prefs: []
  type: TYPE_IMG
- en: Figure 12.67 – Configuration file
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: 'All the data you need for the OCI setting in OLAM will be in this configuration
    file:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.68 – The configuration file details](img/B18349_12_68.jpg)'
  id: totrans-369
  prefs: []
  type: TYPE_IMG
- en: Figure 12.68 – The configuration file details
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: Enter all the collected information.
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.69 – The credential variables for the OCI user OCID, fingerprint,
    and tenant OCID](img/B18349_12_69.jpg)'
  id: totrans-372
  prefs: []
  type: TYPE_IMG
- en: Figure 12.69 – The credential variables for the OCI user OCID, fingerprint,
    and tenant OCID
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: Don’t forget to cut and paste in the private user key used to access your OCI
    account. This is the key you have on your system that you use to log in to OCI.
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.70 – The OCI private key](img/B18349_12_70.jpg)'
  id: totrans-375
  prefs: []
  type: TYPE_IMG
- en: Figure 12.70 – The OCI private key
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: Save the credential, which will bring you to the **Details** page, showing you
    a summary of the credential you just configured.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.71 – The OCI OLAM credential configuration details](img/B18349_12_71.jpg)'
  id: totrans-378
  prefs: []
  type: TYPE_IMG
- en: Figure 12.71 – The OCI OLAM credential configuration details
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-380
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Check the version of Ansible core:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create an inventory:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'View and confirm the inventory list:'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Add a group to the inventory:'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Run the inventory list again, as shown here:'
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[opc@olam-target-1 ol-automation]$ ansible all -i inventory -m ping'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: olam-target-1 | SUCCESS => {
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"ansible_facts": {'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"discovered_interpreter_python": "/usr/bin/python"'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"changed": false,'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"ping": "pong"'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Create your playbook:'
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Run your playbook:'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Set it and forget it
  id: totrans-404
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Ansible playbooks, loops provide flexibility and efficiency to automate Oracle
    Linux environments or any Linux environment through OLAM. Users can define dictionaries
    in their playbooks and use loop statements. Dictionaries are like books, with
    all your infrastructure or applications in lists, and they can be used to describe
    variables in an automation. This allows a set of tasks to be executed for each
    item in the loop, reducing the need for repetitive coding and making playbooks
    more concise and manageable.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: For instance, if you want to install multiple packages on a group of Oracle
    Linux servers without loops, you would need to write separate tasks for each package
    and server. However, by using loops in OLAM with Ansible, you can define a list
    of packages and a list of servers and iterate over them, installing the packages
    on each server in a single task.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-407
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous recipe, we’ve shown that OLAM has additional features and capabilities
    that enhance automation capabilities, through either the web-based UI or the command
    line. Users can granularly and visually define and manage their automation workflows,
    simplifying the process of creating and managing complex automation tasks. Furthermore,
    this provides a centralized platform to manage and monitor the execution of Ansible
    playbooks.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, we have two sample servers, the same `target-1` and
    `target-2` servers from the previous recipe, and we need to change the permissions
    of a specific user on both servers. Without using loops, we would need to write
    separate tasks for each server, resulting in redundant code. However, by utilizing
    loops, we can simplify the playbook and make it more efficient.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we will start by defining the playbook’s name and the target
    hosts, using the `hosts` directive. We will also set `become` as `true`, indicating
    that the playbook should run with administrative privileges:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]yaml'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: '---'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Change User Permissions'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: 'hosts: server_group'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: 'become: true'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: 'vars:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: 'target_users:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: '- user1'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: '- user2'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: 'tasks:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Change user permissions'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: 'file:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: 'path: /home/{{ item }}/documents'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: 'owner: {{ item }}'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: 'group: {{ item }}'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: 'mode: "0755"'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: 'with_items: "{{ target_users }}"'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Next, we define a variable, `target_users`, that contains a list of users for
    whom we want to change permissions. In this case, we have `user1` and `user2`
    as our target users.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: The `tasks` section contains a single task named `Change user permissions`.
    This task uses the `file` module to change the ownership, group, and mode of the
    specified directory.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: The `with_items` loop is used to iterate over the `target_users` list. Each
    iteration of the loop sets the `item` variable to the current user from the list.
    This variable is then used in the `path`, `owner`, and `group` parameters of the
    `file` module.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: 'By using this loop, the playbook will execute the task for each user in the
    `target_users` list, effectively changing the permissions for both user and folder
    permissions:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]yaml'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Change user permissions'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: 'hosts: all'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: 'tasks:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Change permissions for users'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: 'file:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: 'path: /path/to/directory'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: 'owner: "{{ item }}"'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: 'state: directory'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: 'loop: "{{ users }}"'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: In the preceding example, `file` is used to change the ownership of the specified
    directory to each user in the `users` list. The `item` variable represents the
    current user in the loop.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: By following these steps, you can write and execute an Ansible loop in OLAM
    to change user permissions in different servers and the described directories.
    This will allow you to automate the process and ensure consistent permissions
    across multiple systems, among many other aspects of administering multiple environments.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-446
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You’ll need to write the playbook first; I have used the demo project for simplicity
    purposes:'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[opc@olam-target-2 tmp]$ ls -ltr'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: total 0
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: drwxr-xr-x. 2 root root 6 Oct 18 11:53 unified-monitoring-agent
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: drwxrwxr-x. 2 opc  opc  6 Oct 26 15:27 changedir
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'name: This is the name of the playbook.'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '```'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: OLAM will run the playbook on the specified servers, changing the permissions
    of `/tmp/changedir` to `root:root`, with a mode of `0755`.
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the playbook file.
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure you have proper SSH connectivity to the target servers.
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the OLAM web-based user interface.
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new playbook in OLAM, or open an existing one.
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the content of the `change_permissions.yaml` playbook file into the playbook
    editor in OLAM.
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the playbook in OLAM.
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute the playbook by selecting the target servers (`olam-test-1` and `olam-test-2`)
    from the inventory, or by manually specifying their IP addresses.
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Run** button in OLAM to execute the playbook.
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OLAM will run the playbook on the specified servers, changing the permissions
    of `/tmp/changedir` to `root:root`, with port `0755`.
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
