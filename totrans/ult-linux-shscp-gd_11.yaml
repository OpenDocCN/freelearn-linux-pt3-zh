- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Performing Mathematical Operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The various operating system shells all have means of performing mathematical
    operations either from the command-line, or from within a shell script. In this
    chapter, we’ll look at how to perform operations with both integer and floating
    point math.
  prefs: []
  type: TYPE_NORMAL
- en: 'Topics in this chapter include:'
  prefs: []
  type: TYPE_NORMAL
- en: Performing integer math with expressions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing integer math with integer variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing floating point math with `bc`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you’re ready, let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: Technical Requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use any of your Linux virtual machines for this. And, as always, you can download
    the scripts by doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Performing Integer Math with Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can do integer math directly in `bash`, which is sometimes handy. But, `bash`
    doesn’t have the capability of doing floating point math. For that, you’ll need
    to use a separate utility, which we’ll look at later.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you ever try to use `echo` to perform math on the command-line, you’ll find
    that it doesn’t work. What you’ll get will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is because `echo` treats your math problem as just a normal text string.
    So, you’ll need some other way to solve your math problems. Fortunately, there
    are a few different ways to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Using the expr Command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `expr` command is for evaluating expressions. These expressions can be
    normal text strings, regular expressions, or mathematical expressions. For now,
    I’ll just talk about using it to evaluate math expressions. Here’s an example
    of its basic usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that you need a blank space between the operator and each operand, or
    else you’ll get this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Without the blank spaces, `expr` just echos back whatever you type in.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use `expr` with the `+`, `-`, `/`, `*`, and `%` operators to perform
    addition, subtraction, division, multiplication, or modulus operations. (Modulus
    operations show you the remainder after a division operation.) Special care is
    needed for using the `*` operator, because a shell will interpret it as a wild
    card. So, when performing multiplication, you’ll need to escape the `*` with a
    `\`, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Without the backslash in front of the `*`, you will receive an error, which
    will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'For more complex problems, the normal rules of math apply, as you see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The laws of math dictate that division and multiplication always take precedence
    over subtraction and addition. So, you see here that the `2 \* 3` operation gets
    performed before adding `1`. But, just as in normal math, you can change the order
    in which operations are performed by placing a pair of parentheses around the
    operation that you want to perform first. Here’s what that looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Notice how I had to escape each parenthesis symbol with a backslash, and leave
    a blank space between the `(` and the `1`, and between the `2` and the `\`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use `expr` with variables. To demo that, create the `math1.sh`
    script, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the script with 88 and 23 as the input values looks something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Remember that `expr` can only work with integers. So, any results that involve
    a decimal get rounded up or down to the nearest integer.
  prefs: []
  type: TYPE_NORMAL
- en: 'And of course, you can also use `expr` with command substitution, as you see
    here in this `math2.sh` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: That’s all there is to it for `expr`. Next, let’s take another look at `echo`.
  prefs: []
  type: TYPE_NORMAL
- en: Using echo with Math Expressions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I know, I just told you that you can’t use `echo` to perform math. Well, you
    actually can, but there’s a special way to do it. You’ll just have to place your
    math problem within either a `$(( ))` construct or a `$[ ]` construct, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Both constructs give the same results, so—on `bash` at least—whichever you use
    is a matter of personal preference.
  prefs: []
  type: TYPE_NORMAL
- en: 'A very cool thing about these two constructs is that you don’t have to use
    a `$` to call back the values of any variables that are within them. Likewise,
    you don’t have to escape the `*` character with a backslash. Here’s the `math3.sh`
    script to show you that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You also see that in the second `echo` command, I surrounded `val1+val2` with
    its own set of parentheses in order to give the addition operation precedence
    over the multiplication operation. Anyway, here’s what happens when I run the
    script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If you find the use of nested parentheses too confusing, you might want to
    use the square bracket construct instead, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Either way, you’ll get the same results.
  prefs: []
  type: TYPE_NORMAL
- en: There is a catch to this, though. It’s just that the square bracket construct
    doesn’t work on certain other shells, such as `/bin/sh` on FreeBSD and OpenIndiana,
    and `/bin/dash` on Debian and its derivatives. So, to make your scripts more portable,
    you’ll need to use the `((..))` construct for your math problems, even though
    it can get a bit confusing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a more practical example of using parentheses to change the precedence
    of operations. In this `new_year.sh` script, I’m calculating the number of weeks
    left until the New Year. I start by using the `date +%j` command to calculate
    the numbered day of the year. Here’s the output of that command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'I’m writing this on 31 October, which is the 304^(th) day of the year 2023\.
    I’ll then subtract that result from the number of days in a year, and divide that
    by 7 to give me the final answer. Here’s what the script looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You see that I used the square bracket construct in order to avoid the confusion
    of having so many nested parentheses. But, as I said before, that won’t work on
    certain other non-`bash` shells.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what I get when I run the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Of course, you might be reading this in 2024, 2028, or even 2032, which are
    all leap years with 366 days, but that’s okay. That extra day won’t matter with
    this particular math problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, how about one more example of a script with math expressions? Create
    the `math4.sh` script, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This script begins with the number 0 as the initial value of `start`. It then
    prints out the value of `start`, increments it by 1, and then prints the next
    value. The loop continues until the value of `limit` is reached. Here’s what that
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This pretty much covers it for using math expressions. Let’s now see about using
    a new type of variable.
  prefs: []
  type: TYPE_NORMAL
- en: Performing Integer Math with Integer Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of using mathematical expressions, you can use **integer variables**.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ve already seen the kind of thing that doesn’t work, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'That’s because by default, the values of variables are text strings, rather
    than numbers. To make this work, use the `declare -i` command to create integer
    variables, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s how it look in the `math5.sh` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `declare -i` commands, you don’t need to precede variable names with
    a `$` to call their values. You also don’t need to use command substitution to
    assign the results of a math operation to a variable. Anyway, here’s how it looks
    when I run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: And, since this is integer math, any results that contain a decimal get rounded
    up or down to the nearest integer.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, integer math is all you need. But, what if you need more? That’s
    in the next section, so stay tuned.
  prefs: []
  type: TYPE_NORMAL
- en: Performing Floating Point Math with bc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The methods you’ve just seen for performing math operations from the shell all
    have two limitations. First, these methods can only work with integers. Secondly,
    when using these methods, you’re limited to just basic math. Fortunately, the
    `bc` utility solves both of those problems. In fact, you’d need to be an expert
    mathematician to take full advantage of `bc`'s features. (I don’t fall into that
    category, but I can still show you the basics of using `bc`.)
  prefs: []
  type: TYPE_NORMAL
- en: You should find that `bc` is already installed on your Linux or Unix system,
    so you likely won’t have to mess around with installing it.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three ways to use `bc`, which are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Interactive mode: You’ll just open `bc`, and enter math commands on its own
    command-line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Program files: Create programs in the `bc` language, and use `bc` to execute
    them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pipe math problems into bc: You can do this either from the shell command-line,
    or from within shell scripts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s look at interactive mode first.
  prefs: []
  type: TYPE_NORMAL
- en: Using bc in Interactive Mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can start `bc` in interactive mode by entering `bc` at the command-line,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you just type a math problem at the `bc` command prompt. Let’s start by
    dividing 3 by 4, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You see that this gives us 0 as the result. But wait, isn’t `bc` supposed to
    be floating point-capable? Well, it is, but you have to start it with the `-l`
    option to bring in the optional math libraries. So, let’s type `quit` to shut
    it down and start over, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don’t want to see this many decimal places, use the `scale` command.
    Let’s say that you only want to see two decimal places. Just set it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s do something a bit more practical, by solving some geometry problems.
    As you likely know, a triangle has three angles, and the number of degrees in
    all three angles always adds up to 180 degrees, as you see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21693_11_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.1: A triangle with three 60-degree angles'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, for example, you could have a triangle with a 40-degree angle, a 50-degree
    angle, and a 90-degree angle. At times though, you might only know the number
    of degrees in two of the angles, and will want to find the number of degrees for
    the third angle. You can do that by adding together the number of degrees for
    the two known angles, and subtracting the sum from 180\. Here’s what it looks
    like in `bc` interactive mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This also demonstrates how you can use variables in `bc`. This is handy, because
    if I want to run the calculation again on another set of values, I only have to
    type in the new variable assignments. Then, I’ll just use the up-arrow key on
    the keyboard to get back to the formula.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we’ll look at a circle with a diameter of 25 and a radius of 12.5\. (The
    unit-of-measure doesn’t matter. It could be inches, centimeters, miles, or kilometers.
    It really doesn’t matter.) To calculate the circumference of a circle, we need
    to multiply the circle’s diameter by the value of `pi` (Π), like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'To calculate the area of a circle, multiply П by the squared value of the radius,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: You see here that the `^` is used to denote an exponent, which in this case
    is 2\. You also see that there’s no `echo` command in the `bc` language. Instead,
    you’ll use `print`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll find many useful functions in the optional libraries, besides just the
    ability to deal with floating point math. For example, you can use the `ibase`
    and `obase` functions to convert numbers from one number system to another. Here,
    you see me converting a decimal number to a hexadecimal number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The `obase=16` line tells `bc` that I want all numbers to be output in hexadecimal
    format. I don’t have to use an `ibase` line to specify the input number system,
    because it already defaults to decimal. When I entered 10 as the number to convert,
    I got A as a result, which is the hexadecimal equivalent of decimal number 10\.
    I can also convert from hexadecimal back to decimal, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Again, since decimal is the default, I didn’t have to specify it for the `obase`.
    (Well, I would have had to, if I hadn’t closed and reopened `bc` after setting
    the `obase` to 16 for the previous example.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of setting both the `ibase` and the `obase`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In this one, I chose to convert a binary number to hexadecimal.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also set the `ibase` and the `obase` to the same value in order to
    perform math in a different number system. Here’s an example of how to perform
    binary math:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Yeah, I wish that I would have had this back in the 1980s, when I had to learn
    binary math in my early computer classes. It would have made things so much easier.
    But seriously, note that in the division command, there are so many trailing zeros
    that a `\` was used to continue them on the next line.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use a `scale=` command to change that, but you’ll get some rather surprising
    results when using it in binary mode. Here’s what I mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: I don’t know why that is, but that’s okay.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that if you decide to convert a hexadecimal number to another format,
    the digits A through F must be typed in upper-case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other functions in the `bc` libraries include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`s (x)`: The sine of x, in radians.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`c (x)`: The cosine of x, in radians.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a (x)`: The arctangent of x, in radians.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`l (x)`: The natural logarithm of x.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`e (x)`: The exponential function of raising e to the value x.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`j (n,x)`: The Bessel function of integer order n of x.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, let’s say that you need to find the natural logarithm of the number
    80\. Just do it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Okay, I think that that should cover it for interactive mode. Let’s now look
    some `bc` programs.
  prefs: []
  type: TYPE_NORMAL
- en: Using bc Program Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The main problem with using interactive mode is that as soon as you shut down
    `bc`, all of your work will disappear. One way to make your work permanent is
    to create a program file. Let’s begin by creating the `geometry1.txt` file, which
    will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'You’ve already seen how to do the math, so I won’t go over that again. But,
    I do want you to notice that the `print` command doesn’t automatically insert
    a newline character at the end of lines. So, you’ll have to do that yourself by
    adding a `\n` sequence at the end of your `print` commands. Also, notice on line
    3 how I used the `read()` function to take the user’s input and assign it to the
    `radius` variable. The last command must be `quit`, or else the program won’t
    exit. To run this program, just type `bc -l`, followed by the name of the program
    file, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '**Tip**'
  prefs: []
  type: TYPE_NORMAL
- en: 'I cheated a bit here, by copying the value of П from a website where it had
    already been calculated. If you’d rather calculate the value of П yourself, you
    can do it with this formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The next example is a checkbook balancing program that I borrowed from the
    `bc` documentation page. Here’s what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you see that the `bc` language has the same programming constructs that
    you’ve already seen in normal shell scripting. (In this case, you see a `while`
    loop.) The `bc` language implements them a bit differently, but that’s okay. The
    next things to note are the `scale=2` and the `bal /= 1` lines. These two commands
    ensure that the program’s output will always have two digits after the decimal
    point, even when you only enter an integer without any decimals. To show what
    I mean, open `bc` in interactive mode and type in these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: You see that before I invoked the `bal /= 1` command, `print bal` only shows
    1000, without any decimals. So, why does this work? Well, it’s just that the `bal
    /= 1` command is just a shorthand way of expressing a division by 1\. In other
    words, it does the same thing that the `bal=(bal/1)` command does, except with
    less typing. In this case, we’re dividing 1000 by 1, which still gives us 1000\.
    But, because we set the scale to 2, printing any number that’s a result of a math
    operation will now always show two decimal places.
  prefs: []
  type: TYPE_NORMAL
- en: The next thing to note in the program file is the `bal -= trans` line. The `-=`
    operator causes the balance to decrement by the amount of the financial transaction
    that’s represented by `trans`. Now, I really don’t know why the program’s author
    did this, because it means that the user has to enter a positive number to reduce
    the balance, and a negative number to add to the balance.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the line to `bal +=` trans would make much more sense. That way a negative
    number would represent a debit, a positive number would represent a deposit, and
    all would be right with the world. Anyway, I digress.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the program looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Now, just enter your transactions, and then enter 0 to quit.
  prefs: []
  type: TYPE_NORMAL
- en: There’s a lot more that you can do with `bc` program files, but I think you
    get the overall idea. Let’s now look at using `bc` in normal shell scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Using bc in Shell Scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The third and final way to use `bc` is to run `bc` commands from a normal shell
    environment. So, you can either run `bc` commands from the shell command-line,
    or place them into normal shell scripts. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Here, I’m using command substitution to assign a value to `pi`. Within the command
    substitution construct, I’m echoing a `bc`-style math formula into `bc`. The first
    thing you see is that I’ve set the scale to 10\. The `4*a(1)` means that I’m taking
    the arctangent of 1 and multiplying it by 4, which is one of the many formulas
    that you can use to approximate the value of `pi` (П). (Remember that П is an
    irrational number, which means that you will never find its exact value.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s put this into the `pi_bc.sh` shell script, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'I’ve fancied things up a bit, by allowing you to specify your own scaling value
    when you invoke the script. You see that if you don’t enter a scaling value, it
    will return a message that tells you to do so. Running the script looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Of course, you can enter even larger scaling values if you’d like.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use `bc` to create your own function libraries. For example, check
    out this `baseconv.lib` library file that I created in my `/usr/local/lib/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: The `bc-func_demo.sh` script that uses this library is too long to show here
    in its entirety. But, you can download it from the GitHub repository. For now,
    I’ll just show you a few snippets and provide some explanation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The top part of the script looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The first thing you see is that I’m sourcing the library file with the `. /usr/local/lib/baseconv.lib`
    command. After that, you see a construct that I’ve neglected to show you before.
    The `until. .do` construct will keep showing you a menu until you hit the *q*
    key. I mean, if you make any of the other choices, you’ll be prompted to enter
    a number that you want to convert. When the conversion is done, the menu will
    pop right back up, and will stay there until you hit the *q*. The next bit of
    code is a `case. .esac` construct, which performs the task that you choose from
    the menu. Here’s the first part of that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the script looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Below this, which is beyond the point where I can show you here, the menu re-appears,
    waiting for your next response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, this does work, but it uses global variables to pass values from the functions
    back to the main script. I’ve already told you that this isn’t the safest way
    of doing business, and that it’s better to use a combination of local variables
    and command substitution. The modified library file is also too long to show here
    in its entirety, but here’s a snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'You can download this entire `baseconv_local.lib` file, as well as the `bc-func_local_demo.sh`
    script that uses it, from Github. The script is mostly the same as the previous
    one, except for the code in the `case. .esac` construct that invokes the functions.
    Here’s a snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: I’ve already explained this construction in *Chapter 10--Understanding Functions*,
    so I won’t say anything more about it here.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final example I’ll show you uses one of the many text stream filters that
    you thought you’d never use. This involves using the `paste` command to help calculate
    the total combined market share for the various versions of the Windows operating
    system. To see what I mean, take a look at this `os_combined-ww-monthly-202209-202309-bar.csv`
    file that you can download from Github:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: These market share stats are for the various desktop operating systems, as reported
    by the *Statcounter Global Stats* site.
  prefs: []
  type: TYPE_NORMAL
- en: Well, kind of. That’s because many years ago when I first created this demo
    for a shell scripting class that I was teaching, the Statcounter people broke
    down the Windows share by its different versions, as you see here. Now though,
    they only list the overall Windows market share in this combined report, and break
    down the market share for the various versions of Windows in a separate Windows-only
    report. So, I had to doctor up this file a bit to recreate how the report used
    to be so that the demo can work. (But hey, whatever works, right?) The demo script
    for this is the `report_os.sh` script, which you can also download from Github.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first `echo` command in the script is what adds the market share for all
    of the various versions of Windows together, in order to calculate the total combined
    market share for Windows. Here’s how that looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: So, after I cut the second field out of all of the Windows lines, I use `paste`
    in serial mode, with the `+` as the `paste` field delimiter. I’ll pipe all that
    into `bc` and then redirect the output to a text file with today’s date in the
    filename.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `echo` commands for the rest of the operating systems are more straightforward,
    since they don’t require any math calculations. Here’s the one for macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Yes, I do know that Apple changed the name of their operating system to macOS.
    But, the Statcounter people still list it as OS X, so that’s what I need for the
    search term in the script. Anyway, running the script looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The resultant report file looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: When I doctored the input file to have it list the various versions of Windows,
    I took care to ensure that the total Windows share still adds up to what it’s
    supposed to be. So yes, as I’m writing this in October 2023, the total Windows
    market share really is 69.73%.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the way, if you’re interested in seeing more statistics about operating
    system usage, check out the Statcounter Global Stats site here: [https://gs.statcounter.com/](https://gs.statcounter.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: I do believe that this about covers it for shell scripting math. Let’s summarize
    and move on.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, I’ve shown you several ways to perform math operations in `bash`,
    and even provided a couple of tips on how to ensure that your math scripts can
    run on non-`bash` shells. I started with the various methods of performing integer
    math, and then showed you various ways to use `bc` to perform floating point math.
    As I said before, you’d need to be a math expert to take full advantage of all
    of `bc`'s features. But, even if you aren’t, there’s still a lot you can do with
    it. And, there are plenty of math tutorials online that can help. Just use your
    favorite search engine to find them.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, I’ll show you how to use here documents. I’ll see you there.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of the following methods would you used to perform integer math from the
    command-line?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`echo 1+1`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`echo 1 + 1`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`echo $(bc 1+1)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`expr 1+1`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`expr 1 + 1`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You want to ensure that your shell script works on `bash`, as well as on non-`bash`
    shells. Which of the following commands could you use in your script?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`echo $((1+2+3+4))`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`echo $[1+2+3+4]`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`echo $[[1+2+3+4]]`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`echo $(1+2+3+4)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You want to perform floating point math. Which of the following commands would
    you use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`bc`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`bc -f`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`bc -l`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`bc --float`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to find the natural logarithm of 8\. How would you do it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`expr log(8)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`echo [log(8)]`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `l(8)` with `bc`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `log(8)` with `bc`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of these commands would you use to find the approximate value of П?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pi=$("scale=10; 4*a(1)" | bc -l)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pi=$(echo "scale=10; 4*a(1)" | bc -l)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pi=$(bc -l "scale=10; 4*a(1)" )`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pi=$(echo "scale=10; 4*arc(1)" | bc -l)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bash Math Operations (Bash Arithmetic) Explained: [https://phoenixnap.com/kb/bash-math](https://phoenixnap.com/kb/bash-math)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'bc Command Manual: [https://www.gnu.org/software/bc/manual/html_mono/bc.html](https://www.gnu.org/software/bc/manual/html_mono/bc.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What is a good command-line calculator on Linux: [https://www.xmodulo.com/command-line-calculator-linux.html](https://www.xmodulo.com/command-line-calculator-linux.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Geometry Cheat Sheet: [https://s3-us-west-1.amazonaws.com/math-salamanders/Geometry/Geometry-Information-Pages/Geometry-Cheat-Sheets/geometry-cheat-sheet-4-2d-shapes-formulas.pdf](https://s3-us-west-1.amazonaws.com/math-salamanders/Geometry/Geometry-Information-Pages/Geometry-Cheat-Sheets/geometry-cheat-sheet-4-2d-shapes-formulas.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mathematics LibreTexts: [https://math.libretexts.org/](https://math.libretexts.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Statcounter Global Stats: [https://gs.statcounter.com/](https://gs.statcounter.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: e
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: c
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: c
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: b
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Join our community on Discord!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, Linux experts, and the author himself.
  prefs: []
  type: TYPE_NORMAL
- en: Ask questions, provide solutions to other readers, chat with the author via
    Ask Me Anything sessions, and much more. Scan the QR code or visit the link to
    join the community.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code10596186092701843.png)'
  prefs: []
  type: TYPE_IMG
