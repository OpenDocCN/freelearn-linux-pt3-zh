- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Linux Permissions Commands
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux 权限命令
- en: Linux permissions commands are a fundamental aspect of Linux system administration,
    providing a powerful mechanism to control access to files and directories. These
    commands, including `chmod`, `chown`, and more, play a crucial role in maintaining
    security, protecting sensitive data, and managing user privileges. They allow
    Linux system administrators to define who can read, write, and execute files,
    as well as specify access permissions for different users and groups. The importance
    of Linux permissions commands lies in their ability to enforce the principle of
    least privilege, ensuring that users and processes have only the necessary permissions
    to perform their intended tasks. By assigning appropriate permissions, system
    administrators can safeguard critical files and prevent unauthorized access, minimizing
    the risk of data breaches and unauthorized modifications. Additionally, these
    commands enable administrators to allocate privileges based on user roles, maintaining
    a well-defined security model within the system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 权限命令是 Linux 系统管理的基本组成部分，提供了一个强大的机制来控制对文件和目录的访问。这些命令，包括`chmod`、`chown`等，在保持安全性、保护敏感数据和管理用户权限方面发挥着重要作用。它们允许
    Linux 系统管理员定义谁可以读取、写入和执行文件，并为不同的用户和组指定访问权限。Linux 权限命令的重要性在于它们能够执行最小权限原则，确保用户和进程只有执行其预定任务所需的权限。通过分配适当的权限，系统管理员可以保护关键文件，防止未经授权的访问，减少数据泄露和未经授权修改的风险。此外，这些命令使管理员能够根据用户角色分配权限，在系统中保持一个明确的安全模型。
- en: 'The purpose of Linux permissions commands is twofold: security and organization.
    From a security perspective, they allow administrators to restrict access to sensitive
    files, directories, and system resources. By granting or revoking permissions,
    administrators can limit the exposure of critical data and prevent malicious activities.
    On an organizational front, these commands facilitate the management of files
    and directories, ensuring that they are properly categorized, protected, and accessible
    to the intended users. Linux permissions commands are widely used by Linux system
    administrators due to their versatility and effectiveness in maintaining system
    security and managing user access. They provide granular control over permissions,
    allowing administrators to set different access levels for owners, groups, and
    other users. Furthermore, these commands can be applied recursively, allowing
    for efficient management of permissions across directories and subdirectories.
    With the use of symbolic and absolute modes, administrators can easily modify
    permissions based on specific requirements.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 权限命令的目的是双重的：安全性和组织性。从安全角度看，它们允许管理员限制对敏感文件、目录和系统资源的访问。通过授予或撤销权限，管理员可以限制关键数据的暴露，防止恶意活动。在组织方面，这些命令有助于文件和目录的管理，确保它们被适当地分类、保护，并且能被目标用户访问。由于其多功能性和在维护系统安全性以及管理用户访问方面的有效性，Linux
    系统管理员广泛使用这些命令。它们提供了对权限的精细控制，允许管理员为所有者、用户组和其他用户设置不同的访问级别。此外，这些命令还可以递归地应用，便于跨目录和子目录高效地管理权限。通过使用符号模式和绝对模式，管理员可以根据特定要求轻松修改权限。
- en: Linux permissions commands are essential for managing file and directory access
    permissions. System administrators can use these commands to enforce security
    measures, control user access, and safeguard sensitive data. By the end of this
    chapter, you will have a comprehensive understanding of Linux permissions commands,
    enabling you to effectively manage file and directory permissions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 权限命令对于管理文件和目录的访问权限至关重要。系统管理员可以使用这些命令执行安全措施，控制用户访问，并保护敏感数据。在本章结束时，你将全面了解
    Linux 权限命令，使你能够有效地管理文件和目录权限。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Why permission commands?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么使用权限命令？
- en: Types of permissions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 权限类型
- en: chmod
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: chmod
- en: chown
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: chown
- en: Utilizing absolute paths in commands
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在命令中使用绝对路径
- en: chgrp
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: chgrp
- en: umask
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: umask
- en: sudo
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: sudo
- en: Why permission commands?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用权限命令？
- en: By utilizing permission commands, administrators can enforce the principle of
    least privilege, granting users only the necessary permissions required to perform
    their tasks. This practice reduces the risk of unauthorized access or accidental
    modifications to critical files, minimizing the potential for data breaches and
    system compromises. With proper permissions in place, organizations can maintain
    control over their sensitive information and prevent unauthorized disclosure or
    alteration. Moreover, permission commands enable administrators to implement security
    policies that align with industry best practices and compliance regulations. For
    example, by restricting access to configuration files or system directories, administrators
    can protect system files from unauthorized modifications, ensuring system stability
    and preventing malicious activities. Additionally, by assigning appropriate ownership
    and group permissions, administrators can facilitate collaboration among authorized
    users while maintaining data privacy and segregation.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用权限命令，管理员可以实施最小权限原则，仅授予用户执行任务所需的必要权限。这种做法减少了未经授权访问或意外修改关键文件的风险，最大限度地降低了数据泄露和系统危害的可能性。正确的权限设置可以帮助组织控制敏感信息，防止未经授权的披露或篡改。此外，权限命令使管理员能够实施与行业最佳实践和合规规定一致的安全策略。例如，通过限制对配置文件或系统目录的访问，管理员可以保护系统文件免受未经授权的修改，确保系统的稳定性并防止恶意活动。此外，通过分配适当的所有权和组权限，管理员可以促进授权用户之间的协作，同时保持数据隐私和隔离。
- en: However, despite their importance, lapses in the proper configuration and management
    of Linux permissions can lead to security vulnerabilities. Misconfigurations,
    such as granting excessive permissions or neglecting to revoke access rights when
    no longer needed, can expose sensitive data to unauthorized individuals or increase
    the risk of insider threats. Administrators must regularly review and audit permission
    settings to identify and rectify any inconsistencies or misalignments with organizational
    security policies.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，尽管权限重要，Linux权限配置和管理不当仍可能导致安全漏洞。配置错误，如授予过多权限或在不再需要时未撤销访问权限，可能会使敏感数据暴露给未经授权的人，或增加内部威胁的风险。管理员必须定期审查和审核权限设置，以发现并纠正任何与组织安全政策不一致或偏离的地方。
- en: Furthermore, the complexity of managing permissions in large-scale environments
    can pose challenges. Ensuring the appropriate permissions for numerous files and
    directories across multiple users and groups can be time-consuming and prone to
    human errors. It is crucial for administrators to implement proper access control
    frameworks, utilize automation tools, follow standardized procedures to mitigate
    the risk of misconfigurations, and maintain a secure environment. Permission commands
    serve as a fundamental pillar of securing organizational and administrative files.
    They provide the means to enforce access control, maintain data confidentiality,
    and mitigate security risks. However, it is essential for administrators to diligently
    configure, monitor, and manage permissions to avoid lapses and ensure the ongoing
    integrity and security of their systems and data.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在大规模环境中管理权限的复杂性可能带来挑战。确保跨多个用户和组为众多文件和目录设置适当的权限，可能既耗时又容易出错。管理员必须实施适当的访问控制框架，利用自动化工具，遵循标准化程序，以减轻配置错误的风险，并维持一个安全的环境。权限命令是保护组织和管理文件的基本支柱。它们提供了执行访问控制、维护数据机密性以及减轻安全风险的手段。然而，管理员必须认真配置、监控和管理权限，以避免疏漏并确保系统和数据的持续完整性与安全。
- en: Types of permissions
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 权限类型
- en: 'In Linux, three types of permissions can be assigned to files and directories:
    `r`), `w`), and `x`). These permissions define the level of access and control
    users have over files and directories. Let’s explore each type of permission and
    understand their meanings and implications:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中，可以为文件和目录分配三种类型的权限：`r`、`w`和`x`。这些权限定义了用户对文件和目录的访问和控制级别。让我们逐一探讨每种权限及其含义和影响：
- en: 'Read (`r`) permission:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取（`r`）权限：
- en: The read permission allows a user to view and read the contents of a file or
    list the contents of a directory
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取权限允许用户查看和读取文件内容，或列出目录内容。
- en: For directories, the read permission enables the user to see the names of files
    and subdirectories within the directory
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于目录，读权限使用户能够查看目录内文件和子目录的名称。
- en: It’s important to note that having read permission allows users to open and
    view the contents of a file. However, they cannot modify or delete it unless they
    possess additional permissions.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 需要注意的是，拥有读权限允许用户打开并查看文件的内容。然而，他们无法修改或删除文件，除非拥有额外的权限。
- en: 'Write (`w`) permission:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写（`w`）权限：
- en: The write permission allows a user to modify or delete a file’s content or create
    new files within a directory
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写权限允许用户修改或删除文件的内容，或在目录中创建新文件。
- en: For directories, the write permission enables users to add, delete, and rename
    files and subdirectories within the directory
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于目录，写权限使得用户能够在目录内添加、删除和重命名文件和子目录。
- en: 'Execute (`x`) permission:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行（`x`）权限：
- en: The execute permission allows a user to execute or run a file if it is a program
    or script
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行权限允许用户执行或运行文件，前提是它是程序或脚本。
- en: For directories, the execute permission enables users to access and enter the
    directory, allowing them to navigate through its contents. Unlike the read permission,
    the execute permission specifically grants the ability to traverse or navigate
    the directory structure and access its subdirectories. With the execute permission,
    users can execute programs, scripts, and commands within the directory, provided
    they have the necessary read permission to view the file’s content. This means
    they can run executable files within the directory, but listing its contents with
    commands such as `ls` might not be allowed without read permission.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于目录，执行权限使得用户能够访问并进入目录，允许他们浏览目录的内容。与读权限不同，执行权限特别授予遍历或导航目录结构并访问其子目录的能力。有了执行权限，用户可以在目录中执行程序、脚本和命令，前提是他们拥有查看文件内容所需的读权限。这意味着他们可以运行目录中的可执行文件，但如果没有读权限，使用`ls`等命令列出目录内容可能不被允许。
- en: 'Permissions are assigned separately for three different entities: *the file
    owner (also known as “user”)*, *the group associated with the file*, and *all
    other users (others)* who are not the owner or part of the group. These permissions
    can be set individually or combined into a three-digit numeric representation
    (for example, `755`) to represent the permissions for the owner, group, and others.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 权限分别分配给三种不同的实体：*文件所有者（也称为“用户”）*、*与文件关联的组*，以及*所有其他非所有者或非组成员的用户（其他人）*。这些权限可以单独设置，也可以组合成一个三位数字的表示形式（例如，`755`），用以表示所有者、组和其他用户的权限。
- en: 'When a user attempts to access a file or directory, Linux follows a specific
    order to check permissions:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户尝试访问文件或目录时，Linux 会按照特定的顺序检查权限：
- en: '**User ownership** (**owner**): Initially, Linux checks whether the accessing
    user is the owner of the file. If the user is the owner, the system evaluates
    the permissions configured for the owner.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户所有权**（**所有者**）：首先，Linux 会检查访问的用户是否是文件的所有者。如果是所有者，系统将评估为所有者配置的权限。'
- en: '**Group ownership** (**group**): If the accessing user is not the owner, Linux
    proceeds to examine whether the user belongs to the group associated with the
    file. If the user is part of the group, the system considers the permissions specified
    for the group.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组所有权**（**组**）：如果访问的用户不是所有者，Linux 会继续检查用户是否属于与文件关联的组。如果用户是组成员，系统会考虑为该组指定的权限。'
- en: '**Others**: If neither of the previous two conditions applies, Linux assesses
    the permissions granted to “others,” which encompasses all users not falling into
    the owner or group categories.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**其他人**：如果前两种条件都不适用，Linux 会评估授予“其他人”的权限，这包括所有不属于所有者或组的用户。'
- en: This sequential approach to permission checking allows Linux to determine access
    rights with precision. It ensures that file access and actions (such as read,
    write, and execute) are granted or denied based on the user’s relationship with
    the file’s owner and group, facilitating robust access control.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这种顺序的权限检查方法使得 Linux 能够精确地确定访问权限。它确保了文件的访问和操作（如读取、写入和执行）是根据用户与文件所有者和组的关系来授予或拒绝的，从而促进了强有力的访问控制。
- en: Let’s delve into the various tools employed for granting permissions, beginning
    with the widely utilized command known as `chmod`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨授予权限时使用的各种工具，从广泛使用的命令`chmod`开始。
- en: chmod
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: chmod
- en: Short for `chmod` is a command in Linux and Unix-like operating systems that
    allows users to modify the permissions of files and directories. It plays a fundamental
    role in controlling access to files and ensuring data security. The importance
    of `chmod` lies in its ability to define who can read, write, and execute files,
    thus determining the level of interaction and control that different users have
    over the system resources.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`chmod`是Linux和类Unix操作系统中的一个命令，允许用户修改文件和目录的权限。它在控制文件访问和确保数据安全方面起着基础作用。`chmod`的重要性在于它能够定义谁可以读取、写入和执行文件，从而决定不同用户对系统资源的交互和控制级别。'
- en: One of the primary reasons why `chmod` is essential is that it can enforce security
    measures within an organization. By setting appropriate file permissions, system
    administrators can restrict unauthorized access to sensitive data and prevent
    unauthorized modifications. For example, critical system configuration files or
    confidential documents may require strict read-only permissions to ensure that
    only authorized personnel can view and access them. `chmod` empowers administrators
    to establish granular access controls, allowing them to strike a balance between
    accessibility and security. Another crucial use of `chmod` is in managing user
    access privileges. Different users or groups may have different levels of permissions
    based on their roles and responsibilities. `chmod` enables administrators to assign
    specific permissions to individuals or groups, ensuring that each user has the
    appropriate level of access required to perform their tasks. This level of control
    helps maintain data integrity and prevents accidental or intentional damage to
    files by unauthorized users. By using `chmod`, administrators can ensure that
    only trusted individuals or groups have the necessary permissions to modify critical
    files or execute certain programs.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`chmod`至关重要的原因之一是它可以在组织内部强制执行安全措施。通过设置适当的文件权限，系统管理员可以限制对敏感数据的未授权访问，并防止未经授权的修改。例如，关键的系统配置文件或机密文件可能需要严格的只读权限，以确保只有授权人员才能查看和访问这些文件。`chmod`使管理员能够建立精细的访问控制，从而在可访问性和安全性之间找到平衡。`chmod`的另一个重要作用是在管理用户访问权限时，不同的用户或组可以根据其角色和职责拥有不同级别的权限。`chmod`使管理员能够将特定的权限分配给个人或组，确保每个用户拥有执行任务所需的适当访问级别。这种控制有助于保持数据的完整性，防止未经授权的用户对文件进行意外或故意的损坏。通过使用`chmod`，管理员可以确保只有受信任的个人或组拥有修改关键文件或执行某些程序的必要权限。'
- en: Furthermore, `chmod` serves a vital purpose in the administrative aspect of
    file management. It allows administrators to organize and control file permissions
    efficiently, making it easier to manage access rights across a complex directory
    structure. By using `chmod` in conjunction with other tools such as `chown` (**change
    owner**), administrators can effectively assign ownership and permissions to files
    and directories, streamlining the administrative tasks associated with user management.
    This capability is particularly crucial in large organizations with multiple users
    and diverse filesystems, where efficient management of permissions is paramount
    to maintaining order and security. Let’s explore and observe several scenarios
    that illustrate how to utilize this command effectively.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`chmod`在文件管理的行政方面也起着至关重要的作用。它允许管理员高效地组织和控制文件权限，使得在复杂的目录结构中管理访问权限更加容易。通过将`chmod`与其他工具如`chown`（**更改所有者**）一起使用，管理员可以有效地为文件和目录分配所有权和权限，从而简化与用户管理相关的行政任务。在多个用户和多样化文件系统的大型组织中，这一功能尤其关键，因为高效的权限管理对于维护秩序和安全至关重要。让我们探索并观察一些场景，展示如何有效使用此命令。
- en: '**Scenario 1**: Granting read and write permissions to a file:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景 1**：授予文件读写权限：'
- en: Identify the file for which you want to grant read and write permissions.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定要授予读写权限的文件。
- en: 'Use the `chmod` command with the appropriate options to set the desired permissions:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用带有适当选项的`chmod`命令设置所需的权限：
- en: '![Figure 5.1 – Granting permission to files](img/B18212_05_1.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – 授予文件权限](img/B18212_05_1.jpg)'
- en: Figure 5.1 – Granting permission to files
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – 授予文件权限
- en: This command grants read and write permissions to the `Management.txt` file,
    allowing users to both read from and write to the file.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令授予对`Management.txt`文件的读写权限，允许用户既能读取文件，也能写入文件。
- en: '**Scenario 2**: Revoking execute permission for a group:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景 2**: 撤销组的执行权限：'
- en: Determine the file or directory from which you want to remove execute permission
    for a specific group.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定你想要从中撤销特定组执行权限的文件或目录。
- en: 'Use the `chmod` command with the appropriate options to revoke the execute
    permission:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `chmod` 命令和适当的选项来撤销执行权限：
- en: '`g-w`: This option removes the write permission for the group that the file
    belongs to.'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`g-w`: 这个选项移除文件所属组的写权限。'
- en: '`g-x`: This option removes the execute permission for the group that the file
    belongs to. This means that the members of the group can no longer execute the
    file, even if they have read and write access to it:'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`g-x`: 这个选项移除文件所属组的执行权限。这意味着该组成员即使有读和写权限，也无法执行文件：'
- en: '![Figure 5.2 – Revoking execute permission](img/B18212_05_2.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – 撤销执行权限](img/B18212_05_2.jpg)'
- en: Figure 5.2 – Revoking execute permission
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – 撤销执行权限
- en: This command removes the execute permission for the group from the `ChgMod.sh`
    file, ensuring that group members cannot execute the script.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将 `ChgMod.sh` 文件的组执行权限移除，确保组成员无法执行该脚本。
- en: '**Scenario 3**: Setting specific permissions using numeric mode:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景 3**: 使用数字模式设置特定权限：'
- en: Determine the file or directory for which you want to set specific permissions.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定你想要为其设置特定权限的文件或目录。
- en: 'Calculate the numeric value for the desired permissions – for example, read
    (`4`), write (`2`), and execute (`1`):'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算所需权限的数字值——例如，读（`4`）、写（`2`）和执行（`1`）：
- en: '[PRE0]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In Linux, file and directory permissions are often represented as a three-digit
    numeric code, where each digit corresponds to a specific permission type. The
    three digits represent permissions for the owner, the group, and others, in that
    order. Each digit is a combination of values that signify read, write, and execute
    permissions, as follows:'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Linux 中，文件和目录的权限通常用三位数字代码表示，其中每个数字对应一个特定的权限类型。三个数字分别表示所有者、组和其他用户的权限，顺序如下。每个数字是一个值的组合，表示读、写和执行权限，如下所示：
- en: '`4`: This digit represents read permission. It allows the user (or entity)
    to view the contents of a file or list the files in a directory.'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`4`: 这个数字表示读权限。它允许用户（或实体）查看文件内容或列出目录中的文件。'
- en: '`2`: This digit represents write permission. It grants the user the ability
    to modify or delete the file’s contents or create new files within a directory.'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2`: 这个数字表示写权限。它赋予用户修改或删除文件内容的能力，或在目录中创建新文件。'
- en: '`1`: This digit signifies execute permission. It enables the user to run executable
    files and scripts or traverse (enter) directories.'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1`: 这个数字表示执行权限。它使用户能够运行可执行文件和脚本，或进入（进入）目录。'
- en: 'To create the three-digit numeric permission code, you can combine these values
    based on the desired permissions for the owner, group, and others. Here’s an example:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要创建三位数字的权限代码，你可以根据所有者、组和其他用户的所需权限来组合这些值。以下是一个示例：
- en: '`6`: This code means that the owner has read and write permissions (`4` + `2`),
    but no execute permission'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`6`: 这个代码表示所有者拥有读和写权限（`4` + `2`），但没有执行权限'
- en: '`7`: In this code, the owner has read, write, and execute permissions (`4`
    + `2` + `1`)'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`7`: 在这个代码中，所有者拥有读、写和执行权限（`4` + `2` + `1`）'
- en: '`4`: This code represents read-only permissions for the group, with no write
    or execute permissions'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`4`: 这个代码表示该组只有只读权限，没有写入或执行权限。'
- en: '`5`: Here, the group has read and execute permissions (`4` + `1`), but no write
    permission'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`5`: 在这里，组拥有读和执行权限（`4` + `1`），但没有写权限'
- en: '`0`: This code indicates no permissions for a particular entity (owner, group,
    or others)'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`: 这个代码表示某个实体（所有者、组或其他人）没有任何权限'
- en: By understanding the meaning of each digit in the permission code, you can precisely
    control who can read, write, and execute files and directories, ensuring the security
    and integrity of your system.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过理解权限代码中每个数字的含义，你可以精确控制谁可以读、写和执行文件和目录，从而确保系统的安全性和完整性。
- en: 'Use the `chmod` command with the appropriate numeric mode to set the permissions:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `chmod` 命令和适当的数字模式来设置权限：
- en: '![Figure 5.3 – Numeric permissions modes](img/B18212_05_3.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – 数字权限模式](img/B18212_05_3.jpg)'
- en: Figure 5.3 – Numeric permissions modes
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – 数字权限模式
- en: This command sets the permissions of the `Approvals.txt` file to read and write
    for the owner, read for the group, and read for others.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将 `Approvals.txt` 文件的权限设置为所有者可读写，组可读，其他人可读。
- en: '**Scenario 4**: Applying recursive permissions to a directory and its subdirectories:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景 4**：为目录及其子目录应用递归权限：'
- en: Identify the directory for which you want to apply permissions recursively.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定你想要递归应用权限的目录。
- en: 'Use the `chmod` command with the appropriate options to apply the desired permissions
    recursively:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `chmod` 命令和适当的选项来递归地应用所需的权限：
- en: '![Figure 5.4 – Applying recursive permissions to a directory](img/B18212_05_4.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.4 – 为目录应用递归权限](img/B18212_05_4.jpg)'
- en: Figure 5.4 – Applying recursive permissions to a directory
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – 为目录应用递归权限
- en: This command applies the permissions of `755` (read, write, and execute for
    the owner, and read and execute for the group and others) to the `ConfigFile`
    directory and all its subdirectories.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将权限 `755`（所有者具有读取、写入和执行权限，组和其他用户具有读取和执行权限）应用于 `ConfigFile` 目录及其所有子目录。
- en: '`chmod` is a powerful command that plays a vital role in controlling file and
    directory permissions in Linux and Unix-like systems. Its importance lies in its
    ability to enforce security measures, manage user access privileges, and streamline
    administrative tasks. By utilizing `chmod` effectively, system administrators
    can ensure the confidentiality, integrity, and availability of data within an
    organization while maintaining a structured and secure filesystem.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`chmod` 是一个强大的命令，在 Linux 和类 Unix 系统中，负责控制文件和目录的权限。它的重要性在于能够执行安全措施，管理用户访问权限，并简化管理员的任务。通过有效地使用
    `chmod`，系统管理员可以确保组织内数据的机密性、完整性和可用性，同时保持结构化和安全的文件系统。'
- en: chown
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: chown
- en: Short for `chown` command is a powerful tool in Linux and Unix-based operating
    systems that’s used to change the ownership of files and directories. However,
    it’s important to note that in many cases, you need superuser privileges (often
    obtained via the `sudo` command) to execute `chown`. This command allows system
    administrators to assign new ownership to files, determining both the user and
    group that have control over them.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`chown` 命令是 Linux 和基于 Unix 的操作系统中的一个强大工具，用于更改文件和目录的所有权。然而，需要注意的是，在许多情况下，你需要超级用户权限（通常通过
    `sudo` 命令获得）来执行 `chown`。此命令允许系统管理员为文件分配新的所有权，确定哪些用户和组对文件有控制权。'
- en: '`chown` plays a crucial role in managing file permissions, enforcing security
    measures, and organizing administrative files. One of its key purposes is to ensure
    proper access control and security within a Linux system.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`chown` 在管理文件权限、执行安全措施和组织管理文件方面起着至关重要的作用。它的一个关键用途是确保在 Linux 系统内有适当的访问控制和安全性。'
- en: By specifying the correct user and group ownership for files and directories,
    system administrators can maintain security and control over who can access, modify,
    or delete specific resources. This is particularly important in multi-user and
    multi-group environments where precise control over file access is essential for
    system integrity and data protection.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通过为文件和目录指定正确的用户和组所有权，系统管理员可以维护安全性，控制谁可以访问、修改或删除特定资源。在多用户和多组环境中，这一点尤其重要，因为对文件访问的精确控制对于系统完整性和数据保护至关重要。
- en: By changing the ownership of files and directories, administrators can restrict
    access to sensitive information and prevent unauthorized users from modifying
    or accessing critical files. This is particularly important in multi-user environments
    and organizations where data confidentiality is paramount. `chown` enables administrators
    to assign ownership to specific users and groups, ensuring that only authorized
    individuals have the necessary privileges.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更改文件和目录的所有权，管理员可以限制对敏感信息的访问，并防止未经授权的用户修改或访问重要文件。在多用户环境和数据机密性至关重要的组织中，这一点尤其重要。`chown`
    使管理员能够为特定用户和组分配所有权，确保只有授权的个人拥有必要的权限。
- en: Furthermore, `chown` is essential for system administration tasks and file management.
    It allows administrators to transfer ownership of files when users are added or
    removed from the system. When a user account is deleted, for example, it is crucial
    to assign ownership of their files to another user or a system account to ensure
    continuity and prevent data loss. `chown` also facilitates efficient collaboration
    within teams by enabling the transfer of file ownership between group members,
    allowing them to work on shared projects or documents.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`chown` 对于系统管理任务和文件管理至关重要。它允许管理员在用户被添加或从系统中删除时转移文件的所有权。例如，当用户帐户被删除时，必须将他们的文件所有权分配给另一个用户或系统帐户，以确保连续性并防止数据丢失。`chown`
    还通过允许组成员之间的文件所有权转移，促进了团队内的高效协作，使他们能够在共享项目或文档上共同工作。
- en: In addition to its security and administrative benefits, `chown` is a fundamental
    tool for organizing and maintaining filesystems. It enables administrators to
    categorize files and directories by assigning ownership to specific users or groups
    based on their role or purpose. This helps streamline file management, simplifies
    permission management, and ensures files are properly organized and accessible
    to the right individuals. `chown` plays a vital role in maintaining a well-structured
    and efficient filesystem, enhancing productivity and ease of use for both administrators
    and users.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 除了其安全性和管理优势外，`chown` 是组织和维护文件系统的基础工具。它使管理员能够通过根据角色或目的将所有权分配给特定用户或组，来对文件和目录进行分类。这有助于简化文件管理，简化权限管理，并确保文件正确地组织和可供合适的人访问。`chown`
    在维护结构良好且高效的文件系统中发挥着至关重要的作用，增强了管理员和用户的生产力和易用性。
- en: 'The `chown` command allows for various types of ownership changes, enabling
    administrators to modify the ownership of files and directories based on different
    criteria. Here are the types of ownership changes that are commonly used in Linux
    permissions:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`chown` 命令允许进行多种类型的所有权变更，使管理员能够根据不同的标准修改文件和目录的所有权。以下是 Linux 权限中常用的所有权变更类型：'
- en: '`chown` command can be used to change the user ownership of a file or directory.
    By specifying a new user as the owner, administrators can transfer ownership to
    a different user account.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chown` 命令可用于更改文件或目录的用户所有权。通过指定一个新用户作为所有者，管理员可以将所有权转移给另一个用户帐户。'
- en: '`chown` also supports changing the group ownership of a file or directory.
    Administrators can assign a new group to a file, allowing members of that group
    to access and modify the file.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chown` 还支持更改文件或目录的组所有权。管理员可以将文件分配给一个新组，使该组的成员可以访问和修改该文件。'
- en: '`chown` also provides the flexibility to change both user and group ownership
    simultaneously. This allows administrators to completely modify the ownership
    of a file or directory, assigning both a new user and a new group.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chown` 还提供了同时更改用户和组所有权的灵活性。这使得管理员能够完全修改文件或目录的所有权，分配新的用户和新组。'
- en: '`-R` option in the `chown` command enables recursive ownership change, ensuring
    that ownership is modified for all files and directories within the specified
    directory.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chown` 命令中的 `-R` 选项启用递归所有权更改，确保对指定目录中的所有文件和目录进行所有权修改。'
- en: '`-h` option in the `chown` command ensures that the file context remains unchanged.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chown` 命令中的 `-h` 选项确保文件上下文保持不变。'
- en: 'Let’s explore different scenarios that illustrate how to utilize this command
    effectively:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索不同的场景，展示如何有效地使用此命令：
- en: 'Changing ownership of a directory and its contents:'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改目录及其内容的所有权：
- en: '![Figure 5.5 – Changing ownership of a directory](img/B18212_05_5.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.5 – 更改目录的所有权](img/B18212_05_5.jpg)'
- en: Figure 5.5 – Changing ownership of a directory
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – 更改目录的所有权
- en: In this scenario, we pass the ownership of the `backup` directory and all its
    contents to the `tester1` user, including files and subdirectories. The group
    ownership is also changed to `instructor`. This is useful when transferring ownership
    of a project to a new team lead or when organizing files under a specific user
    and group.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在此场景中，我们将 `backup` 目录及其所有内容的所有权转交给 `tester1` 用户，包括文件和子目录。组所有权也更改为 `instructor`。当将项目的所有权转交给新的团队负责人，或将文件按特定用户和组组织时，这非常有用。
- en: 'Restoring ownership of system files:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恢复系统文件的所有权：
- en: '![Figure 5.6 – Restoring ownership of a file](img/B18212_05_6.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.6 – 恢复文件的所有权](img/B18212_05_6.jpg)'
- en: Figure 5.6 – Restoring ownership of a file
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6 – 恢复文件的所有权
- en: This command recursively changes the ownership of all files and directories
    under the `backup` directory back to the `root` user and `root` group. This is
    important for maintaining the integrity and security of system configuration files,
    ensuring that only the `root` user has the necessary privileges to modify them.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令递归地将`backup`目录下的所有文件和目录的所有权更改回`root`用户和`root`组。这对于保持系统配置文件的完整性和安全性非常重要，确保只有`root`用户具有修改它们的必要权限。
- en: 'Assigning ownership to a specific user in a shared directory:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在共享目录中将所有权分配给特定用户：
- en: '![Figure 5.7 – Assigning ownership to a specific user in a shared directory](img/B18212_05_7.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.7 – 在共享目录中将所有权分配给特定用户](img/B18212_05_7.jpg)'
- en: Figure 5.7 – Assigning ownership to a specific user in a shared directory
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7 – 在共享目录中将所有权分配给特定用户
- en: Here, the ownership of the `project/backup/` directory is changed to the `instructor`
    user and the `tester1` group. This is useful in scenarios where multiple users
    need access to a shared directory, but specific ownership is required for certain
    files or folders within that directory.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`project/backup/`目录的所有权被更改为`instructor`用户和`tester1`组。这在多个用户需要访问共享目录，但要求对目录内某些文件或文件夹具有特定所有权的场景中非常有用。
- en: By customizing the user and group names and applying the appropriate options,
    you can effectively manage ownership and permissions in various situations.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过自定义用户和组名称并应用适当的选项，您可以在各种情况下有效地管理所有权和权限。
- en: Finally, `chown` is a crucial command for system administrators. Its ability
    to change file ownership allows for proper access control, enhances security,
    facilitates administrative tasks, and contributes to a well-organized filesystem.
    By leveraging `chown` effectively, administrators can ensure data confidentiality,
    maintain system integrity, and promote efficient collaboration among users and
    groups.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`chown`是系统管理员的一个关键命令。它更改文件所有权的能力使得适当的访问控制成为可能，增强了安全性，简化了管理任务，并有助于保持文件系统的良好组织。通过有效地利用`chown`，管理员可以确保数据机密性，维护系统完整性，并促进用户和组之间的高效协作。
- en: Utilizing absolute paths in commands
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在命令中使用绝对路径
- en: Utilizing absolute paths in commands is a crucial aspect of working with the
    Linux operating system. An absolute path refers to the complete and exact location
    of a file or directory in the filesystem hierarchy. It starts from the `root`
    directory (`/`) and includes all the necessary directories to specify the location
    precisely. The primary reason for using absolute paths in commands is to provide
    an unambiguous and reliable way to refer to files or directories. By using an
    absolute path, you eliminate any dependency on the current working directory.
    This ensures that the command will consistently target the intended file or directory,
    regardless of your current location in the filesystem. Absolute paths eliminate
    confusion and prevent potential errors that may occur when relying on relative
    paths.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令中使用绝对路径是操作 Linux 操作系统时的一个关键方面。绝对路径指的是文件或目录在文件系统层次结构中的完整精确位置。它从`root`目录（`/`）开始，并包含所有必要的目录，以精确指定位置。使用绝对路径的主要原因是提供一种明确且可靠的方式来引用文件或目录。通过使用绝对路径，您消除了对当前工作目录的依赖。这确保了命令将始终准确地指向目标文件或目录，无论您在文件系统中的位置如何。绝对路径消除了混淆，并防止了依赖相对路径时可能出现的潜在错误。
- en: 'The importance of utilizing absolute paths becomes evident in scenarios where
    scripts or commands need to be executed from different directories or by different
    users. Absolute paths guarantee that the same file or directory is accessed, regardless
    of the executing environment. This is especially crucial when dealing with system
    administration tasks, automation scripts, or shared environments where multiple
    users interact with the same filesystem. The use of absolute paths is widespread
    in various Linux operations. It is especially vital when executing commands that
    require precise file or directory targeting, such as file manipulation, data backups,
    system configuration, or application deployment. Absolute paths are commonly used
    in commands such as file copying, moving, deletion, permissions modification,
    and program execution. By utilizing absolute paths, you can ensure the accuracy
    and predictability of these operations, minimizing the risk of unintended consequences
    or errors. To better understand what we’re talking about, we’ll be focusing on
    scenario-based examples that demonstrate the use of the absolute command in different
    situations:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在需要从不同目录或不同用户执行脚本或命令的场景中，使用绝对路径的重要性变得显而易见。绝对路径可以确保无论执行环境如何，都能访问到相同的文件或目录。在进行系统管理任务、自动化脚本或多个用户共享环境操作时，尤其需要注意这一点。绝对路径在各种Linux操作中被广泛使用，尤其在执行需要精确指定文件或目录的命令时，如文件操作、数据备份、系统配置或应用程序部署。绝对路径常用于文件复制、移动、删除、权限修改和程序执行等命令中。通过使用绝对路径，你可以确保这些操作的准确性和可预测性，最大限度减少意外后果或错误的风险。为了更好地理解我们所说的内容，我们将重点展示不同场景下使用绝对路径命令的示例：
- en: '`document.txt` located in your home directory, and you want to copy it to the
    `/var/www/html` directory. You can use the following absolute command:'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位于你主目录中的`document.txt`，你希望将其复制到`/var/www/html`目录。你可以使用以下绝对路径命令来完成此操作：
- en: '![Figure 5.8 – Copying a file to a specific directory](img/B18212_05_8.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.8 – 将文件复制到指定目录](img/B18212_05_8.jpg)'
- en: Figure 5.8 – Copying a file to a specific directory
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8 – 将文件复制到指定目录
- en: '`document.txt` in the current working directory, and you want to move it to
    the `/home/instructor/Documents` directory. You can accomplish this using the
    following absolute command:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前工作目录中的`document.txt`，你希望将其移动到`/home/instructor/Documents`目录。你可以使用以下绝对路径命令来完成此操作：
- en: '![Figure 5.9 – Moving a directory to another location](img/B18212_05_9.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.9 – 将目录移动到另一个位置](img/B18212_05_9.jpg)'
- en: Figure 5.9 – Moving a directory to another location
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9 – 将目录移动到另一个位置
- en: '`/usr/local/bin` directory, and it needs to access a configuration file named
    `config.ini` located in the `/etc` directory. You can use the following absolute
    command to reference the file:'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/usr/local/bin`目录，并且需要访问位于`/etc`目录下名为`config.ini`的配置文件。你可以使用以下绝对路径命令来引用该文件：'
- en: '![Figure 5.10 – Accessing a file in a different directory](img/B18212_05_10.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.10 – 访问另一个目录中的文件](img/B18212_05_10.jpg)'
- en: Figure 5.10 – Accessing a file in a different directory
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10 – 访问另一个目录中的文件
- en: These examples demonstrate how absolute commands are used to specify the exact
    location of files and directories, regardless of the current working directory.
    By providing the complete path, you ensure precise file operations and avoid any
    ambiguity in file references.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这些示例展示了如何使用绝对路径命令来指定文件和目录的确切位置，无论当前工作目录在哪里。通过提供完整路径，可以确保文件操作的准确性，避免文件引用的模糊性。
- en: In conclusion, absolute commands enable accurate and reliable referencing of
    files and directories using their complete paths from the `root` directory. It
    is important for maintaining consistency, facilitating system administration tasks,
    enabling precise file access and manipulation in scripts and programs, and ensuring
    the portability of scripts across different environments. By understanding and
    leveraging the power of absolute paths, system administrators can effectively
    navigate the filesystem and perform tasks with confidence and precision.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，绝对命令通过使用从`root`目录开始的完整路径来精确可靠地引用文件和目录。这对于保持一致性、简化系统管理任务、在脚本和程序中进行精确文件访问和操作，以及确保脚本在不同环境中的可移植性非常重要。通过理解并利用绝对路径的优势，系统管理员可以有效地浏览文件系统，并自信且精确地执行任务。
- en: chgrp
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: chgrp
- en: The `chgrp` command in Linux is used to change the group ownership of files
    and directories. It stands for `chgrp` is to ensure proper access control and
    facilitate group-based permissions management in a Linux system. One of the key
    reasons for using `chgrp` is to align file or directory ownership with a specific
    group. This is particularly important in multi-user environments where different
    groups of users require varying levels of access to files and directories. By
    changing the group ownership using `chgrp`, administrators can ensure that files
    are accessible to the appropriate group and restrict access to others, enhancing
    the security and integrity of sensitive data.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 中，`chgrp` 命令用于更改文件和目录的组所有权。`chgrp`的作用是确保适当的访问控制，并促进 Linux 系统中基于组的权限管理。使用
    `chgrp` 的一个关键原因是将文件或目录的所有权与特定组对齐。在多用户环境中，不同的用户组需要对文件和目录有不同的访问权限，通过使用 `chgrp` 更改组所有权，管理员可以确保文件对适当的组可访问，并限制其他组的访问，从而增强敏感数据的安全性和完整性。
- en: The importance of `chgrp` lies in its role in managing file permissions effectively.
    It works hand in hand with other permission-related commands, such as `chmod`,
    to define access rights and maintain proper ownership. By using `chgrp`, administrators
    can assign ownership to a specific group, allowing members of that group to collaborate
    on files and directories while maintaining control over access privileges. The
    use of `chgrp` is widespread in various scenarios.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`chgrp` 的重要性在于其在有效管理文件权限中的作用。它与其他与权限相关的命令（如 `chmod`）协同工作，定义访问权限并保持正确的所有权。通过使用
    `chgrp`，管理员可以将所有权分配给特定组，允许该组的成员协作处理文件和目录，同时保持对访问权限的控制。`chgrp` 在各种场景中都得到了广泛应用。'
- en: 'Both `chown` and `chgrp` are used to modify ownership attributes of files and
    directories in Linux. However, they serve different purposes:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`chown` 和 `chgrp` 都用于修改文件和目录的所有权属性。然而，它们的用途不同：'
- en: '`chown` is used to change both the owner and group owner of a file or directory.
    It allows you to transfer full ownership of a file or directory from one user
    to another, including the associated group ownership.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chown` 用于更改文件或目录的所有者和组所有者。它允许你将文件或目录的完全所有权从一个用户转移到另一个用户，包括相关的组所有权。'
- en: '`chgrp`, on the other hand, is specifically used to change the group ownership
    of a file or directory while keeping the owner intact. It doesn’t affect the user
    owner, only the group owner.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chgrp`则专门用于更改文件或目录的组所有权，同时保持文件所有者不变。它不会影响用户所有者，只会更改组所有者。'
- en: When to use `chown` versus `chgrp` depends on your specific needs. If you want
    to change both the owner and group owner of a file or directory, use `chown`.
    If you only need to modify the group ownership while preserving the user owner,
    then `chgrp` is the appropriate choice.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `chown` 还是 `chgrp` 取决于你的具体需求。如果你想更改文件或目录的所有者和组所有者，请使用 `chown`。如果你只需要修改组所有权并保留用户所有者，则
    `chgrp` 是合适的选择。
- en: For example, in a project-based environment, administrators can create different
    groups for each project and assign the appropriate group ownership to project-related
    files and directories. This ensures that only members of the relevant project
    group can access and modify those resources. `chgrp` is also valuable when managing
    shared directories where multiple users need to collaborate on files as it simplifies
    the process of granting or revoking group-based permissions.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在基于项目的环境中，管理员可以为每个项目创建不同的组，并为与项目相关的文件和目录分配适当的组所有权。这样，只有相关项目组的成员才能访问和修改这些资源。在管理共享目录时，`chgrp`
    也很有价值，因为多个用户需要在文件上进行协作，它简化了授予或撤销基于组的权限的过程。
- en: 'Let’s take a look at some examples:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些示例：
- en: Assigning group ownership to a directory.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将组所有权分配给目录。
- en: 'Suppose you have a directory named `project` that needs to be accessed and
    modified by the `tester1` group. You can use the following command:'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设你有一个名为 `project` 的目录，需要由 `tester1` 组进行访问和修改。你可以使用以下命令：
- en: '![Figure 5.11 – Assigning group ownership to a directory with chgrp](img/B18212_05_11.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.11 – 使用 chgrp 分配组所有权给目录](img/B18212_05_11.jpg)'
- en: Figure 5.11 – Assigning group ownership to a directory with chgrp
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.11 – 使用 chgrp 分配组所有权给目录
- en: Recursive group ownership change.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 递归更改组所有权。
- en: 'You want to change the group ownership of all files and directories within
    a directory named `data` to the `tester1` group. You can use the following command:'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你希望将名为 `data` 的目录内所有文件和目录的组所有权更改为 `tester1` 组。你可以使用以下命令：
- en: '![Figure 5.12 – Using chgrp -R recursively](img/B18212_05_12.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.12 – 使用 chgrp -R 递归](img/B18212_05_12.jpg)'
- en: Figure 5.12 – Using chgrp -R recursively
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.12 – 使用 chgrp -R 递归
- en: By using `chgrp`, administrators can enforce group-based permissions, streamline
    collaboration among users, and ensure that files and directories are accessible
    only to authorized individuals or groups. It is crucial for managing group ownership
    in Linux. It provides a means to align file and directory ownership with specific
    groups, facilitating proper access control and enhancing security.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 `chgrp`，管理员可以强制基于组的权限，简化用户之间的协作，并确保文件和目录仅对授权的个人或组可访问。这对于 Linux 中的组所有权管理至关重要。它提供了一种将文件和目录所有权与特定组对齐的方法，从而促进正确的访问控制并增强安全性。
- en: umask
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: umask
- en: The `umask` command is used to set the default file permissions for newly created
    files and directories. The term `umask` stands for `umask` value is subtracted
    from the maximum permissions (usually represented as `666` for files and `777`
    for directories) to derive the effective permissions. This change reflects the
    more accurate terminology for the permissions being modified by the `umask` value.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`umask` 命令用于设置新创建的文件和目录的默认文件权限。术语 `umask` 表示将 `umask` 值从最大权限中减去（通常文件权限为 `666`，目录权限为
    `777`），从而得出实际权限。这个变化反映了 `umask` 值所修改的权限更准确的术语。'
- en: The importance of the `umask` command lies in enhancing security and controlling
    file permissions in a multi-user environment. By setting the appropriate `umask`
    value, system administrators can ensure that new files and directories have the
    desired permissions. This helps in enforcing security policies, preventing unauthorized
    access, and maintaining the integrity of sensitive data.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`umask` 命令的重要性在于增强安全性并在多用户环境中控制文件权限。通过设置适当的 `umask` 值，系统管理员可以确保新文件和目录拥有所需的权限。这有助于执行安全策略、防止未经授权的访问，并保持敏感数据的完整性。'
- en: The `umask` command is particularly useful in scenarios where multiple users
    share the same system or when creating scripts and applications that generate
    files dynamically. By defining a specific `umask` value, system administrators
    can establish a consistent permission scheme across the system, reducing the risk
    of accidental exposure of sensitive information.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`umask` 命令在多个用户共享同一系统或创建动态生成文件的脚本和应用程序时特别有用。通过定义特定的 `umask` 值，系统管理员可以在整个系统中建立一致的权限方案，从而减少敏感信息意外暴露的风险。'
- en: It’s important to note that setting a more restrictive `umask` can have certain
    consequences. For example, if a highly restrictive `umask` is applied system-wide,
    newly installed libraries and their associated files may not be readable by certain
    applications, potentially causing compatibility issues. System administrators
    should carefully consider the impact of `umask` settings and strike a balance
    between security and functionality when configuring `umask` values.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，设置更严格的 `umask` 可能会带来一定的后果。例如，如果全系统应用了非常严格的 `umask`，新安装的库及其相关文件可能无法被某些应用程序读取，从而可能导致兼容性问题。系统管理员应仔细考虑
    `umask` 设置的影响，并在配置 `umask` 值时，在安全性和功能性之间找到平衡。
- en: 'Let’s look at some examples:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看一些示例：
- en: 'Restricting file permissions for newly created files:'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制新创建文件的文件权限：
- en: '![Figure 5.13 – Restricting file permissions for newly created files](img/B18212_05_13.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.13 – 限制新创建文件的文件权限](img/B18212_05_13.jpg)'
- en: Figure 5.13 – Restricting file permissions for newly created files
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.13 – 限制新创建文件的文件权限
- en: 'In this scenario, the `umask` command is used to calculate the default permissions
    for newly created files. The `umask` value of `027` is applied as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`umask` 命令用于计算新创建文件的默认权限。应用 `umask` 值 `027` 如下：
- en: '`0` in the leftmost position represents the user’s maximum permission, which
    remains unchanged'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最左边的 `0` 代表用户的最大权限，保持不变
- en: '`2` in the middle position (masking writing permission) subtracts the group’s
    write permission (`2`), effectively removing it'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中间位置的 `2`（屏蔽写权限）会减去组的写权限（`2`），从而有效地移除它
- en: '`7` in the rightmost position (masking all permissions for others) subtracts
    all permissions for others (`4` for read, `2` for write, and `1` for execute),
    leaving only read permissions'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右侧位置的 `7`（屏蔽了所有其他用户的权限）减去了所有其他用户的权限（`4` 代表读权限，`2` 代表写权限，`1` 代表执行权限），只保留读权限
- en: The `touch` command is then used to create a new file called `systemconfig.txt`.
    Finally, the `ls -l` command is used to list the file’s permissions, which should
    reflect the permissions specified by the `umask` value.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，使用 `touch` 命令创建一个名为 `systemconfig.txt` 的新文件。最后，使用 `ls -l` 命令列出该文件的权限，权限应与
    `umask` 值指定的权限一致。
- en: 'Allowing group members to read and write files within a directory:'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许组成员对目录中的文件进行读写操作：
- en: '![Figure 5.14 – Allowing group read/write permissions](img/B18212_05_14.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.14 – 允许组读/写权限](img/B18212_05_14.jpg)'
- en: Figure 5.14 – Allowing group read/write permissions
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.14 – 允许组读/写权限
- en: In this scenario, the `umask` command sets the default permission mask to `002`,
    allowing group members to have read and write permissions for newly created files
    within a directory. The `mkdir` command creates a new directory called `dir_files`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个场景中，`umask` 命令将默认权限掩码设置为 `002`，允许组成员对目录中创建的新文件具有读写权限。`mkdir` 命令用于创建一个名为 `dir_files`
    的新目录。
- en: 'Now, let’s dive into the significance of the `setgid` bit. The `chmod g+s`
    command is used to set the `setgid` bit on the directory. This bit serves a specific
    purpose: it ensures that newly created files within the directory inherit not
    only the group ownership of the parent directory but also the group permissions.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入探讨 `setgid` 位的意义。`chmod g+s` 命令用于在目录上设置 `setgid` 位。这个位具有特定的功能：它确保新创建的文件不仅继承父目录的组所有权，还会继承组权限。
- en: For example, if a user creates a new file inside `dir_files`, that file will
    automatically be assigned the group ownership of `dir_files`, and it will have
    the same group permissions as `dir_files`, even if the user is not a member of
    that group. This is particularly useful in collaborative environments where multiple
    users need access to shared directories, ensuring that files within those directories
    maintain the correct group ownership and permissions.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果用户在 `dir_files` 目录中创建一个新文件，该文件将自动被分配为 `dir_files` 的组所有权，并且会具有与 `dir_files`
    相同的组权限，即使该用户不是该组的成员。这在协作环境中尤其有用，在这种环境下，多个用户需要访问共享目录，确保这些目录中的文件保持正确的组所有权和权限。
- en: 'Setting restrictive permissions for newly created executable files:'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为新创建的可执行文件设置限制性权限：
- en: '![Figure 5.15 – Setting restrictive permissions for newly created executable
    files](img/B18212_05_15.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.15 – 为新创建的可执行文件设置限制性权限](img/B18212_05_15.jpg)'
- en: Figure 5.15 – Setting restrictive permissions for newly created executable files
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.15 – 为新创建的可执行文件设置限制性权限
- en: In this scenario, the `umask` command is used to set the default permission
    mask to `077`, which means that newly created files will have no permissions for
    the group and others. The `touch` command is used to create a new file called
    `devportal.sh`. The `chmod +x` command is then used to make the file executable.
    Since the `umask` value restricts permissions for the group and others, the resulting
    file will only have executed permissions for the owner.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个场景中，`umask` 命令将默认权限掩码设置为 `077`，这意味着新创建的文件对于组和其他用户没有任何权限。使用 `touch` 命令创建一个名为
    `devportal.sh` 的新文件。然后使用 `chmod +x` 命令使该文件变为可执行文件。由于 `umask` 值限制了组和其他用户的权限，生成的文件将仅对所有者具有执行权限。
- en: sudo
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: sudo
- en: The `sudo` command in Linux stands for `sudo` command is an essential tool for
    system administrators as it enhances security, restricts access to critical operations,
    and promotes the principle of least privilege. The importance of the `sudo` command
    lies in its ability to control and limit access to privileged operations. By using
    `sudo`, administrators can grant specific users or groups the ability to execute
    certain commands with elevated privileges, while still keeping a record of their
    actions. This helps mitigate the risks associated with unrestricted access to
    the root account as it provides a controlled and auditable way to perform administrative
    tasks.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo`命令在Linux中是一个至关重要的工具，系统管理员通过它可以增强安全性、限制对关键操作的访问，并促进最小权限原则。`sudo`命令的重要性在于它能够控制和限制对特权操作的访问。通过使用`sudo`，管理员可以授予特定用户或用户组以提升权限执行某些命令的能力，同时仍保留其操作记录。这有助于减轻与对根账户无限制访问相关的风险，因为它提供了一种受控且可审计的方式来执行管理任务。'
- en: The primary use of the `sudo` command is to execute commands as the root user
    or another specified user with elevated privileges. It requires users to authenticate
    themselves using their credentials, such as a password, before executing the privileged
    command. This adds an extra layer of security by ensuring that only authorized
    users can perform administrative actions, reducing the chances of accidental or
    malicious system modifications. The purpose of `sudo` is to promote the principle
    of least privilege, which states that users should only be given the minimum privileges
    necessary to perform their tasks. By using `sudo`, administrators can grant temporary
    administrative privileges to regular users on an as-needed basis, without exposing
    the system to unnecessary risk. This helps maintain the overall security and stability
    of the system, as well as prevent unauthorized modifications or misuse of privileged
    commands.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo`命令的主要用途是以根用户或其他指定的具有提升权限的用户身份执行命令。它要求用户在执行特权命令之前，通过其凭据（如密码）进行身份验证。通过确保只有授权的用户才能执行管理员操作，这增加了额外的安全层，减少了意外或恶意修改系统的可能性。`sudo`的目的是促进最小权限原则，即用户应仅被授予完成任务所需的最小权限。通过使用`sudo`，管理员可以根据需要授予普通用户临时管理员权限，而不暴露系统于不必要的风险。这有助于维护系统的整体安全性和稳定性，并防止未经授权的修改或滥用特权命令。'
- en: 'Let’s look at some examples:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些例子：
- en: Installing software as a privileged user.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以特权用户身份安装软件。
- en: 'In this scenario, the `sudo` command is used to run the `yum install` (yum
    stands for `sudo`, the user is prompted to enter their password and, if authorized,
    the command is executed with elevated privileges. This allows the user to install
    software or make system-wide changes that require administrative access:'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下，`sudo`命令用于运行`yum install`（yum代表`sudo`，用户会被提示输入密码，如果授权，则该命令会以提升的权限执行）。这允许用户安装软件或进行需要管理员权限的系统级更改：
- en: '![Figure 5.16 – Installing software with a privileged user](img/B18212_05_16.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图5.16 – 以特权用户安装软件](img/B18212_05_16.jpg)'
- en: Figure 5.16 – Installing software with a privileged user
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.16 – 以特权用户安装软件
- en: Restarting the system and checking services.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重启系统并检查服务。
- en: 'In this scenario, the `sudo` command is employed to restart and verify the
    status of the `sshd` system service. By executing the `systemctl restart`/`status`
    command with administrative privileges, users gain the ability to restart and
    monitor the status of essential services that necessitate root access. This guarantees
    that any modifications made to the service configuration or updates applied to
    it are properly implemented and activated:'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下，使用`sudo`命令来重新启动并验证`sshd`系统服务的状态。通过以管理员权限执行`systemctl restart`/`status`命令，用户可以重新启动并监控需要根用户权限的关键服务的状态。这保证了对服务配置所做的任何修改或应用的更新都能正确实施并激活：
- en: '![Figure 5.17 – Using sudo to restart and verify the service’s status](img/B18212_05_17.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图5.17 – 使用sudo重新启动并验证服务状态](img/B18212_05_17.jpg)'
- en: Figure 5.17 – Using sudo to restart and verify the service’s status
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.17 – 使用sudo重新启动并验证服务状态
- en: In conclusion, Linux permissions commands play a crucial role in managing access
    to files and directories in Linux systems. These commands allow system administrators
    to control and enforce permissions, ensuring that only authorized users can read,
    write, or execute specific files. Understanding the different types of permissions
    and how to manipulate them is essential for maintaining the security and integrity
    of the system.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，Linux 权限命令在管理 Linux 系统中文件和目录的访问方面起着至关重要的作用。这些命令允许系统管理员控制和执行权限，确保只有授权用户才能读取、写入或执行特定文件。理解不同类型的权限以及如何操作它们对于维护系统的安全性和完整性至关重要。
- en: Summary
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter delved into the realm of Linux permissions commands, exploring
    various tools and techniques to manage file and directory access permissions effectively.
    This chapter began with an introduction to the `chmod` command, which allows users
    to modify the permissions of files and directories. Understanding `chmod` is crucial
    for enforcing security measures, controlling user access, and safeguarding sensitive
    data. Through the use of numeric and symbolic representation, administrators can
    assign specific permissions to users, groups, and others. Next, we explored the
    `chown` command, which is used to change the ownership of files and directories.
    By assigning ownership to specific users and groups, administrators can control
    access and ensure appropriate responsibility for files and directories. Understanding
    `chown` is essential for managing file permissions, facilitating collaboration,
    and maintaining data integrity. Another important topic that was covered in this
    chapter was utilizing absolute paths in commands. Absolute paths provide the precise
    location of a file or directory within the filesystem hierarchy. This knowledge
    enables administrators to navigate and manipulate files and directories with accuracy
    and efficiency. Understanding how to work with absolute paths is vital for executing
    commands, managing permissions, and performing file operations. Additionally,
    this chapter explored the `chgrp` command, which is used to change the group ownership
    of files and directories. By assigning files and directories to specific groups,
    administrators can control access permissions and group-level collaboration. We
    also covered the `umask` command, which plays a significant role in setting default
    file permissions for newly created files and directories. By defining the `umask`
    value, administrators can specify the initial permissions applied to files, ensuring
    consistency and adherence to security standards. Finally, we delved into the `sudo`
    command, a powerful tool that grants users the ability to execute commands with
    elevated privileges. By using `sudo`, administrators can perform administrative
    tasks that require root access, while maintaining security by limiting the scope
    of administrative permissions.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入探讨了 Linux 权限命令的领域，探索了各种工具和技术，以有效管理文件和目录的访问权限。本章首先介绍了 `chmod` 命令，该命令允许用户修改文件和目录的权限。理解
    `chmod` 对于执行安全措施、控制用户访问和保护敏感数据至关重要。通过使用数字和符号表示，管理员可以为用户、组和其他人分配特定权限。接下来，我们探讨了
    `chown` 命令，它用于更改文件和目录的所有权。通过将所有权分配给特定的用户和组，管理员可以控制访问权限并确保文件和目录的适当责任。理解 `chown`
    对于管理文件权限、促进协作和维护数据完整性至关重要。本章还涉及了在命令中使用绝对路径的问题。绝对路径提供了文件或目录在文件系统层次结构中的精确位置。这一知识使管理员能够准确高效地浏览和操作文件和目录。理解如何使用绝对路径对于执行命令、管理权限和执行文件操作至关重要。此外，本章还探讨了
    `chgrp` 命令，它用于更改文件和目录的组所有权。通过将文件和目录分配给特定的组，管理员可以控制访问权限和组级协作。我们还介绍了 `umask` 命令，它在为新创建的文件和目录设置默认权限时发挥着重要作用。通过定义
    `umask` 值，管理员可以指定应用于文件的初始权限，确保一致性并遵守安全标准。最后，我们深入探讨了 `sudo` 命令，这是一种强大的工具，授予用户以提升权限执行命令的能力。通过使用
    `sudo`，管理员可以执行需要 root 权限的管理任务，同时通过限制管理权限的范围来维护安全性。
- en: In summary, this chapter covered a comprehensive range of Linux permissions
    commands, including `chown`, `chmod`, `chgrp`, `umask`, and `sudo`. These commands
    are instrumental in managing group permissions, facilitating collaboration, establishing
    standardized file permissions, and executing administrative tasks with elevated
    privileges.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，本章涵盖了 Linux 权限命令的广泛内容，包括 `chown`、`chmod`、`chgrp`、`umask` 和 `sudo`。这些命令在管理组权限、促进协作、建立标准化文件权限以及以提升的权限执行管理任务方面起着至关重要的作用。
- en: 'In the next chapter, we will delve into essential tools and techniques that
    enable system administrators to manage mounted filesystems and perform file manipulation
    tasks. We will cover four key topics: the `mount` command, the `umount` command,
    the `fuser` command, and file manipulation using commands such as `cat`, `grep`,
    and more.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨使系统管理员能够管理挂载文件系统并执行文件操作任务的基本工具和技术。我们将涵盖四个关键主题：`mount` 命令、`umount`
    命令、`fuser` 命令，以及使用 `cat`、`grep` 等命令进行文件操作。
