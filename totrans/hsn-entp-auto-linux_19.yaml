- en: Auditing Security Policy with OpenSCAP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用OpenSCAP审计安全策略
- en: Throughout the two chapters that preceded this one, we established the value
    of applying a security policy such as the CIS Benchmark to your Enterprise Linux
    infrastructure. We have discussed a variety of methods for both applying it and
    ensuring it remains enforced; the latter point is especially important in an infrastructure
    where a wide array of people have superuser access to your Linux servers. Although
    we have established ways that both shell scripting and Ansible can assist with
    auditing the compliance of your infrastructure with your chosen security policy,
    we have also established that neither of these are particularly suited to providing
    readable and actionable reports of a large infrastructure. For example, it is
    entirely reasonable that an infrastructure security team might want a readable
    report showing the compliance of the infrastructure with the security policy,
    and neither shell scripting nor Ansible immediately lend themselves to this task.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两章中，我们已经阐明了将安全策略（如CIS基准）应用于企业Linux基础设施的价值。我们讨论了多种方法来应用该策略，并确保其持续执行；尤其是在有大量人员拥有Linux服务器超级用户权限的基础设施中，确保策略持续执行显得尤为重要。虽然我们已经确定了Shell脚本和Ansible在审计基础设施是否符合所选安全策略方面的作用，但我们也指出，这两者都不太适合提供易读且具有可操作性的报告，尤其是当基础设施规模较大时。例如，基础设施安全团队可能需要一个易读的报告，展示基础设施与安全策略的符合情况，而Shell脚本和Ansible并不立即适合这个任务。
- en: Although there are a wide variety of infrastructure scanning tools available
    on the market, most of these are commercial and the focus of this book is on open
    source solutions that are accessible to any enterprise, regardless of their budget.
    Hence, in this chapter, we will consider the freely available OpenSCAP tool. **SCAP**
    stands for **Security Content Automation Protocol**, and it is a standardized
    solution for checking a Linux infrastructure for compliance against a given security
    policy (in our case, CIS). OpenSCAP is hence an open source implementation of
    SCAP that has been widely adopted by Enterprise Linux vendors including Red Hat.
    We will hence explore the process for setting up your own OpenSCAP infrastructure
    for compliance scanning and reporting. This, in turn, will enable all teams with
    a vested interest in infrastructure security to get oversight of the levels of
    compliance.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管市场上有多种基础设施扫描工具可供选择，但大多数是商业工具，本书的重点是那些任何企业都能使用的开源解决方案，无论其预算如何。因此，在本章中，我们将介绍免费的OpenSCAP工具。**SCAP**代表**安全内容自动化协议**，它是一个标准化的解决方案，用于检查Linux基础设施是否符合给定的安全策略（在我们的案例中是CIS）。OpenSCAP因此是SCAP的一个开源实现，已被包括Red
    Hat在内的多个企业Linux厂商广泛采用。因此，我们将探讨如何设置自己的OpenSCAP基础设施，以便进行合规扫描和报告。这将使所有关心基础设施安全的团队能够监督合规性水平。
- en: 'Specifically, we will cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将具体涵盖以下主题：
- en: Installing your OpenSCAP server
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装你的OpenSCAP服务器
- en: Evaluating and selecting policies
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估和选择策略
- en: Scanning the enterprise with OpenSCAP
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OpenSCAP扫描企业
- en: Interpreting results
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释结果
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter includes examples based on the following technologies:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包括基于以下技术的示例：
- en: Ubuntu Server 18.04 LTS
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu Server 18.04 LTS
- en: CentOS 7.6
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CentOS 7.6
- en: Ansible 2.8
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible 2.8
- en: To run through these examples, you will need access to two servers or virtual
    machines running one each of the operating systems listed previously and Ansible.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行这些示例，您需要访问两台服务器或虚拟机，每台运行前面列出的操作系统之一，以及Ansible。
- en: All example code discussed in this book is available from GitHub at: [https://github.com/PacktPublishing/Hands-On-Enterprise-Automation-on-Linux](https://github.com/PacktPublishing/Hands-On-Enterprise-Automation-on-Linux).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中讨论的所有示例代码均可从GitHub获取：[https://github.com/PacktPublishing/Hands-On-Enterprise-Automation-on-Linux](https://github.com/PacktPublishing/Hands-On-Enterprise-Automation-on-Linux)。
- en: Installing your OpenSCAP server
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装你的OpenSCAP服务器
- en: When it comes to scanning your infrastructure, we have a few decisions to make,
    as the OpenSCAP project provides a few tools that have overlapping functions.
    The reason for this is that they are targeted at different audiences—some are
    purely command line-driven and so lend themselves extremely well to scheduled,
    scripted tasks such as a monthly compliance report. At the time of writing, there
    are a total of five OpenSCAP tools available, and we will look at each of these
    in more detail in the following sections to enable you to make an educated decision
    as to which tool (or tools) are right for your enterprise.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在扫描您的基础设施时，我们需要做出一些决策，因为OpenSCAP项目提供了一些功能重叠的工具。原因是它们面向不同的用户群体——有些工具纯粹是命令行驱动，因此非常适合定时、脚本化的任务，比如每月的合规性报告。到目前为止，共有五个OpenSCAP工具可用，我们将在接下来的章节中详细介绍每个工具，帮助您做出明智的决策，选择适合您企业的工具（或工具组合）。
- en: In the following subsection, we will start by looking at the most fundamental
    tool, OpenSCAP Base.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下小节中，我们将从最基本的工具——OpenSCAP Base开始。
- en: Running OpenSCAP Base
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行OpenSCAP Base
- en: The OpenSCAP Base tool provides the very fundamentals required to scan a single
    Linux machine and report on its compliance against a given policy. It actually
    consists of two components and so is a requirement for some of the other tools
    we will look at in the following subsections.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: OpenSCAP Base工具提供了扫描单台Linux机器并报告其是否符合给定政策所需的基本功能。它实际上由两个组件组成，因此是我们在接下来的子章节中将要介绍的其他工具的前提要求。
- en: The first component of this tool is a command-line utility called `oscap`. This
    tool can be run on the local machine using an appropriate security policy and
    profile to produce a report of compliance. The report is generated in HTML and
    so although the process of report creation is very much manual, the final report
    is very easy to read and so is well suited for sending to a security or compliance
    team for audit or evaluation.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具的第一个组件是一个名为`oscap`的命令行工具。这个工具可以在本地机器上使用适当的安全政策和配置文件运行，以生成合规性报告。报告生成时采用HTML格式，因此尽管报告创建过程相当手动，但最终报告非常易于阅读，非常适合发送给安全或合规团队进行审计或评估。
- en: The second component of OpenSCAP Base includes a library that is used as a building
    block for other OpenSCAP services such as SCAP Workbench and the OpenSCAP Daemon—we
    will cover these in greater detail later in this section.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: OpenSCAP Base的第二个组件包括一个库，它作为构建其他OpenSCAP服务的基础，比如SCAP Workbench和OpenSCAP Daemon——我们将在本节稍后的部分详细介绍这些内容。
- en: In this book, we will only make use of the library when we use other OpenSCAP
    tools. We will see these tools in action later in this chapter in the section
    entitled* Scanning the enterprise with OpenSCAP*. For now, though, we will concern
    ourselves with the installation of OpenSCAP Base.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中，我们只会在使用其他OpenSCAP工具时利用这个库。我们将在本章名为*使用OpenSCAP扫描企业*的部分看到这些工具的实际应用。不过，目前我们先关注OpenSCAP
    Base的安装。
- en: 'Installing OpenSCAP Base by hand on a single machine is incredibly easy—it
    already comes pre-packaged for the two key Linux distributions we have explored
    in this book—Ubuntu Server and CentOS (and hence, by extension, Red Hat Enterprise
    Linux). To install it on CentOS 7 or RHEL 7, you would simply run the following
    command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在单台机器上手动安装OpenSCAP Base非常简单——它已经为本书中讨论的两大主要Linux发行版预打包——Ubuntu Server和CentOS（因此，间接适用于Red
    Hat Enterprise Linux）。要在CentOS 7或RHEL 7上安装它，您只需运行以下命令：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Similarly, on Ubuntu Server 18.04 LTS, you would run this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在Ubuntu Server 18.04 LTS上，您可以运行以下命令：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It is important to remember that these packages include both the `oscap` command-line
    tool and the library as stated earlier in this section. Hence, even if you never
    intend to run OpenSCAP using the `oscap` CLI tool, the libraries that these packages
    contain could still be required for your given use case (for example, performing
    remote scans using SCAP Workbench).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的是，这些包不仅包括`oscap`命令行工具，还包括本节前面提到的库。因此，即使您从不打算使用`oscap`命令行工具运行OpenSCAP，这些包所包含的库仍可能是您某些用例所需要的（例如，使用SCAP
    Workbench进行远程扫描）。
- en: As a result, it is important to consider deploying these packages using Ansible,
    and it may even be desirable to include them in your standard build image so that
    you know that you can remotely scan any given Linux server for compliance without
    needing to perform any prerequisite steps. We will look at how to run scans with
    the `oscap` tool in a subsequent section, entitled *Scanning the enterprise with
    OpenSCAP*—however, for now, it is sufficient to understand what this package is
    and why it might be required.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，考虑使用Ansible部署这些包非常重要，甚至可能希望将它们包含在你的标准构建镜像中，这样你就能确保可以远程扫描任何给定的Linux服务器以检查合规性，而无需执行任何前提步骤。我们将在后续部分*使用OpenSCAP扫描企业*中介绍如何使用`oscap`工具运行扫描——不过现在，理解这个包是什么以及为什么可能需要它就足够了。
- en: In the next section, we will look at installing the OpenSCAP Daemon, another
    part of the OpenSCAP toolset.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍如何安装OpenSCAP守护进程，这是OpenSCAP工具集的另一个组成部分。
- en: Installing the OpenSCAP Daemon
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装OpenSCAP守护进程
- en: Security auditing is not a one-time task—given administrator-level (that is,
    root) access in a Linux environment, someone could make a Linux server non-compliant
    at any given time, either deliberately or through a well-meaning change. Hence,
    the results of a security scan really only guarantee that the server being scanned
    was compliant (or not) at the time of the scan itself.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 安全审计并非一次性的任务——在Linux环境中，拥有管理员级别（即root）访问权限的人，随时可能故意或通过良好的意图改变，使得Linux服务器变得不合规。因此，安全扫描的结果实际上只能保证被扫描的服务器在扫描时是否合规（或不合规）。
- en: Hence, regular scanning of the environment is extremely important. There is
    a myriad of ways to achieve this, and you could even run the `oscap` command-line
    tool using a scheduler such as `cron` or via a scheduled Ansible playbook in AWX
    or Ansible Tower. However, the OpenSCAP Daemon is a native tool provided as part
    of the suite of OpenSCAP tools. Its purpose is to run in the background and perform
    scheduled scans against a given target or set of targets. This might be the local
    machine running the daemon, or it might be a set of remote machines, all accessed
    over SSH.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，定期扫描环境至关重要。实现这一目标有许多方法，你甚至可以使用调度程序（如`cron`）运行`oscap`命令行工具，或者通过AWX或Ansible
    Tower中的计划Ansible playbook来实现。然而，OpenSCAP守护进程是作为OpenSCAP工具套件的一部分提供的原生工具。它的作用是在后台运行并对指定的目标或目标集进行定期扫描。这些目标可能是运行守护进程的本地机器，或者是一组通过SSH访问的远程机器。
- en: 'The process of installation is again extremely simple—if you were to do this
    manually, you would, on an EL7 system (for example, RHEL7 or CentOS 7), run the
    following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程同样非常简单——如果你手动执行此操作，在EL7系统（例如RHEL7或CentOS 7）上，你需要运行以下命令：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'On Ubuntu systems, the package name is identical, so you would run the following
    to install it:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu系统上，包名相同，你可以运行以下命令进行安装：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Although you could set up every machine in your Linux environment with this
    daemon and configure a job for each to scan itself regularly, this is prone to
    abuse as it would be easy for someone with root access to disable or otherwise
    tamper with the scan. As a result, we recommend that you consider setting up a
    centralized scanning architecture, with one central secure server performing remote
    scans across your network.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你可以在每台机器上设置这个守护进程，并为每台机器配置一个任务定期扫描自身，但这种方式容易被滥用，因为拥有root权限的人很容易禁用或篡改扫描。因此，我们建议你考虑设置一个集中式扫描架构，通过一台中央安全服务器在你的网络中执行远程扫描。
- en: It is upon such a server that you would install the OpenSCAP Daemon and, once
    completed, you can use the `oscapd-cli` utility to configure your regular scans.
    We will take a more detailed look at this later in this chapter, in the section
    entitled *Scanning the enterprise with OpenSCAP*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在这样的服务器上安装OpenSCAP守护进程，安装完成后，可以使用`oscapd-cli`工具来配置定期扫描。我们将在本章稍后的*使用OpenSCAP扫描企业*部分中详细介绍这一过程。
- en: Although both of the tools we have considered so far are extremely powerful
    and can perform all of your auditing needs, they are entirely command-line-based
    and so might not be suited to users who are not comfortable in a shell environment
    or who are responsible for auditing scan results but not necessarily running them.
    This requirement is fulfilled by another tool in the OpenSCAP armory—**SCAP Workbench**.
    We shall look at installing this in the next section.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们到目前为止考虑的两个工具都非常强大，可以满足你的所有审计需求，但它们完全基于命令行，因此可能不适合那些不习惯在 shell 环境中操作的用户，或者那些负责审计扫描结果但不一定运行它们的用户。这个需求可以通过
    OpenSCAP 工具库中的另一个工具——**SCAP Workbench**来满足。我们将在下一节中讨论如何安装它。
- en: Running SCAP Workbench
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 SCAP Workbench
- en: SCAP Workbench is a graphical user interface to the SCAP toolset that is designed
    to provide users with an easy, intuitive way of performing common scanning tasks.
    Hence, it is well suited to less technical users or those who are more comfortable
    in a graphical environment.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: SCAP Workbench 是 SCAP 工具集的图形用户界面，旨在为用户提供一种简单、直观的方式来执行常见的扫描任务。因此，它非常适合技术要求较低的用户或那些更习惯于图形环境的用户。
- en: 'One thing of consideration is that SCAP Workbench is a graphical tool, and
    in many environments, Linux servers are run headless and without the graphical
    X environment installed. Hence, if you install it on an ordinary Linux server
    without a graphical environment, you will see an error such as the one shown in
    the following screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 需要考虑的一点是，SCAP Workbench 是一个图形工具，在许多环境中，Linux 服务器都是无头运行的，并且没有安装图形 X 环境。因此，如果你在没有图形环境的普通
    Linux 服务器上安装它，你将看到类似下面截图中显示的错误：
- en: '![](img/659c0283-2e74-4022-a35d-6153a717b584.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/659c0283-2e74-4022-a35d-6153a717b584.png)'
- en: Thankfully there are several ways to run SCAP Workbench. First of all, it is
    worth noting that it is a true cross-platform application, with downloads available
    for Windows, macOS, and most common Linux platforms, and as a result, the easiest
    path for most users will be to run it in their native operating system.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有几种方法可以运行 SCAP Workbench。首先，值得注意的是，它是一个真正的跨平台应用程序，提供适用于 Windows、macOS 和大多数常见
    Linux 平台的下载，因此，对于大多数用户来说，最简单的路径是直接在他们的本地操作系统中运行它。
- en: If, for consistency, you wish to run SCAP Workbench on Linux, you would either
    need to set up a remote X11 session or set up a dedicated scanning host that includes
    the graphical desktop environment. There is no right or wrong approach here—it
    really is up to you to decide which path suits your environment and working patterns
    best.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为了保持一致性，你希望在 Linux 上运行 SCAP Workbench，你需要设置一个远程 X11 会话，或者设置一个包含图形桌面环境的专用扫描主机。这里没有对错之分——真正的关键是你决定哪种路径最适合你的环境和工作模式。
- en: 'If you choose to run from Linux, the installation of SCAP Workbench is no more
    difficult than for any of the other OpenSCAP tools we have considered:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择在 Linux 上运行，安装 SCAP Workbench 和我们考虑的其他 OpenSCAP 工具一样并不难：
- en: '1\. To install it on RHEL7/CentOS 7, you would run the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 1. 要在 RHEL7/CentOS 7 上安装它，你需要运行以下命令：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'On Ubuntu Server, you would run this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu Server 上，你需要运行以下命令：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once this is complete, you can then open SCAP Workbench using the appropriate
    method for your chosen operating system. If you are running it on a Linux server
    using a remote X session, it is as simple as running this command:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦完成，你就可以使用适合你选择的操作系统的方法打开 SCAP Workbench。如果你是在使用远程 X 会话的 Linux 服务器上运行它，只需运行以下命令：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We will explore how to set up and run a scan from this graphical environment
    later in this chapter, in the section entitled *Scanning the enterprise with OpenSCAP*.
    Before we complete this part of this chapter, though, we will discuss two of the
    other tools on offer from the OpenSCAP project—SCAPTimony and the Anaconda Addon.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章的《使用 OpenSCAP 扫描企业》一节中探讨如何在这个图形环境中设置并运行扫描。不过，在完成本章这一部分之前，我们将讨论 OpenSCAP
    项目提供的另外两个工具——SCAPTimony 和 Anaconda Addon。
- en: Considering other OpenSCAP tools
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考虑其他 OpenSCAP 工具
- en: So far in this chapter, we have considered a variety of OpenSCAP tools for scanning
    and auditing your infrastructure. There are, however, two further tools available
    to you that we have not yet considered, though neither are truly interactive tools
    in the way that the ones we have considered so far are, and so they are not within
    the scope of this book. Nonetheless, they deserve a mention as you may choose
    to integrate them into your environment in the future.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经考虑了各种用于扫描和审计基础设施的OpenSCAP工具。然而，还有两个工具我们尚未考虑，尽管它们并不像我们之前提到的那些工具那样是交互式工具，因此不在本书的范围内。尽管如此，它们值得一提，因为你可能会选择将它们集成到未来的环境中。
- en: One of these tools is called **SCAPTimony**. Rather than being an end user application
    such as SCAP Workbench or `oscap`, this is a middleware, Ruby-on-Rails engine
    that is designed for you to integrate into your own Rails-based application. The
    benefit that SCAPTimony brings is that it provides both a database and storage
    platform for your SCAP scan results. Hence, if you do decide to write your own
    Rails application to handle your OpenSCAP scanning, this can be written to provide
    centralized reporting on OpenSCAP scans. It also enables your Rails application
    to manipulate and aggregate the data gathered and so is an incredibly powerful
    tool in managing your scan data.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个工具叫做**SCAPTimony**。它不同于SCAP Workbench或`oscap`这样的最终用户应用程序，而是一个中间件、基于Ruby-on-Rails的引擎，旨在供你集成到自己的Rails应用程序中。SCAPTimony的优势在于，它提供了一个数据库和存储平台，用于存储你的SCAP扫描结果。因此，如果你决定编写自己的Rails应用程序来处理OpenSCAP扫描，它可以为你提供集中报告OpenSCAP扫描的功能。它还使你的Rails应用程序能够操作和汇总收集的数据，因此在管理扫描数据方面是一个非常强大的工具。
- en: Although developing a Rails application to make use of SCAPTimony is beyond
    the scope of this book, it is worth considering that the Katello project (and
    hence Red Hat Satellite 6) already makes use of SCAPTimony and so would form a
    good basis for you to make use of this tool without the need to create your own
    application.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然开发一个Rails应用程序以使用SCAPTimony超出了本书的范围，但值得注意的是，Katello项目（因此包括Red Hat Satellite
    6）已经在使用SCAPTimony，因此你可以在不需要自己创建应用程序的情况下，利用这个工具。
- en: The final tool available at the time of writing is the OSCAP Anaconda Addon.
    For those who are not familiar, Anaconda is the installation environment used
    by Linux distributions such as CentOS and Red Hat Enterprise Linux. Although this
    add-on cannot help us with our Ubuntu-based servers, it does provide a way to
    build Red Hat-based servers that are compliant from the point of installation.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，最后一个可用的工具是OSCAP Anaconda Addon。对于不熟悉的人来说，Anaconda是CentOS和Red Hat Enterprise
    Linux等Linux发行版使用的安装环境。虽然这个插件无法帮助我们处理基于Ubuntu的服务器，但它提供了一种方法，可以在安装时构建符合要求的基于Red
    Hat的服务器。
- en: As we have already considered ways to apply security policy using Ansible (see
    [Chapter 14](faae70c3-4f5a-4177-b6ae-011df0cc54f8.xhtml), *CIS Hardening with
    Ansible*) and have heavily advocated the use of standard images for your Linux
    environment, which we created in [Chapter 5](3802fb48-9f14-4a52-98c5-280d381260a4.xhtml),
    *Using Ansible to Build Virtual Machine Templates for Deployment*, and [Chapter
    6](0c3b40ef-5f31-4fd1-b05f-d549444db163.xhtml), *Custom Builds with PXE Booting*,
    we will not be exploring this add-on as it duplicates functionality we have already
    provided cross-platform solutions for elsewhere.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经讨论过如何使用Ansible应用安全策略（参见[第14章](faae70c3-4f5a-4177-b6ae-011df0cc54f8.xhtml)，*使用Ansible进行CIS硬化*），并且我们强烈推荐为你的Linux环境使用标准镜像，这些镜像我们在[第5章](3802fb48-9f14-4a52-98c5-280d381260a4.xhtml)，*使用Ansible构建虚拟机模板进行部署*，以及[第6章](0c3b40ef-5f31-4fd1-b05f-d549444db163.xhtml)，*使用PXE启动进行自定义构建*中创建过，因此我们不会探讨这个插件，因为它与我们已经提供的跨平台解决方案功能重复。
- en: By now, you should hopefully have a good feel for the OpenSCAP tools, and which
    might be the best fit for your environment. Before we can proceed with our first
    scan, however, we need an OpenSCAP security policy to utilize. In the next section,
    we will look at where to download these policies and how to select the right one
    for your environment.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该已经对OpenSCAP工具有了较好的了解，并且知道哪些工具可能最适合你的环境。然而，在我们进行第一次扫描之前，我们需要一个OpenSCAP安全策略来使用。在下一节中，我们将讨论在哪里下载这些策略以及如何选择适合你环境的策略。
- en: Evaluating and selecting policies
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估和选择策略
- en: OpenSCAP and its related tools are by themselves engines—they cannot actually
    help you to audit your environment without a security policy against which to
    scan. As we explored in [Chapter 13](3d4a9c0a-452f-4fbb-85c8-372149303613.xhtml),
    *Using CIS Benchmarks*, there are numerous security standards for Linux, and in
    this book, we have considered in depth the CIS Benchmarks. Sadly, this standard
    is not currently available for audit through OpenSCAP, though many other security
    policies are that would be well suited to securing your infrastructure. Also,
    as OpenSCAP and its policies are entirely open source, there is nothing to stop
    you from creating your own policy for whatever requirements you have.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: OpenSCAP及其相关工具本身是引擎——没有安全策略作为扫描标准，它们无法实际帮助你审计环境。正如我们在[第13章](3d4a9c0a-452f-4fbb-85c8-372149303613.xhtml)中探讨的，*使用CIS基准*，Linux有许多安全标准，在本书中，我们深入讨论了CIS基准。不幸的是，目前这个标准不能通过OpenSCAP进行审计，尽管许多其他安全策略可以用于保护你的基础设施。此外，由于OpenSCAP及其策略完全是开源的，完全没有障碍阻止你根据自己的需求创建自己的安全策略。
- en: There are plenty of security standards available for you to freely download
    and audit your infrastructure against, and in the next section, we will look at
    the primary one that you will most likely wish to consider—SCAP Security Guide.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多安全标准可以供你自由下载，并用于审计你的基础设施，接下来的章节我们将讨论你最有可能考虑的主要标准——SCAP安全指南。
- en: Installing SCAP Security Guide
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装SCAP安全指南
- en: Some of the most comprehensive, ready-made security policies can be found as
    part of the **SCAP Security Guide** (**SSG**) project, and you will often find
    reference to the `ssg` acronym in the directory and sometimes even package names.
    These policies, just like the CIS Benchmark we explored previously, cover many
    facets of Linux security and offer remediation steps. Hence, OpenSCAP can be used
    not just for auditing, but also for enforcing a security policy. However, it must
    be stated that given its nature, it is my opinion that Ansible is best suited
    for this task, and it is notable that, in recent upstream releases of SCAP Security
    Guide, Ansible playbooks are now being provided alongside the XML formatted SCAP
    policies themselves.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一些最全面、现成的安全策略可以在**SCAP安全指南**（**SSG**）项目中找到，你会经常看到`ssg`缩写出现在目录中，有时甚至出现在包名中。这些策略就像我们之前探讨的CIS基准一样，涵盖了Linux安全的许多方面，并提供了修复步骤。因此，OpenSCAP不仅可以用于审计，还可以用于执行安全策略。然而，必须指出的是，鉴于其性质，我认为Ansible最适合执行此任务，值得注意的是，在SCAP安全指南的最近的上游版本中，Ansible剧本与XML格式的SCAP策略一起提供。
- en: OpenSCAP policies, like any security definition, will evolve and change over
    time as new vulnerabilities and attacks are discovered. Hence, when considering
    which version of SSG you wish to work with, you will need to take into account
    how up to date the copy you are using is and whether this meets your needs. It
    might seem obvious to state that you should always use the latest version, but
    there are exceptions as we shall see shortly.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: OpenSCAP策略与任何安全定义一样，随着新漏洞和攻击的发现会不断演变和变化。因此，在考虑使用哪个版本的SSG时，你需要考虑所使用版本的更新程度，以及它是否符合你的需求。虽然看似显而易见的说法是你应该始终使用最新版本，但正如我们稍后会看到的，还是有一些例外情况。
- en: This decision requires careful consideration, and it is not as obvious as it
    might at first seem to state, *just go and download the latest copy*. Although
    the versions that are included with most major Linux distributions tend to lag
    behind the versions available from the SSG project's GitHub page (see [https://github.com/ComplianceAsCode/content/releases](https://github.com/ComplianceAsCode/content/releases)),
    in some cases (especially on Red Hat Enterprise Linux), they have been tested
    and are known to work on the Linux distribution they are provided with.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个决定需要仔细考虑，正如最初看起来可能并不明显的那样，*仅仅去下载最新的版本*并不是最好的做法。尽管大多数主要Linux发行版中包含的版本通常落后于SSG项目GitHub页面上的版本（见[https://github.com/ComplianceAsCode/content/releases](https://github.com/ComplianceAsCode/content/releases)），但在某些情况下（尤其是在Red
    Hat Enterprise Linux上），它们经过测试并已知在提供的Linux发行版中有效。
- en: On other distributions, however, your mileage may vary. For example, at the
    time of writing, the latest publicly available version of the SSG policies is 0.1.47,
    while the version included with Ubuntu Server 18.04.3 is 0.1.31\. This version
    of SSG does not even support Ubuntu 18.04, and if you attempt to run a scan against
    Ubuntu Server 18.04 using the Ubuntu 16.04 policy, all of the scan results will
    be `notapplicable`. All scans validate the host on which they are run and ensure
    it matches the one they were intended to be run against, and so if they detect
    a mismatch, they will report `notapplicable` rather than applying the tests.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在其他发行版上，结果可能有所不同。例如，在写作时，SSG策略的最新公开版本是0.1.47，而Ubuntu Server 18.04.3中包含的版本是0.1.31。此版本的SSG甚至不支持Ubuntu
    18.04，如果您尝试使用Ubuntu 16.04策略对Ubuntu Server 18.04进行扫描，所有扫描结果将显示为`notapplicable`。所有扫描都会验证运行扫描的主机，并确保其与原定要扫描的主机匹配，因此，如果检测到不匹配，它们将报告`notapplicable`，而不是应用测试。
- en: There is also a bug in the `libopenscap8` package on Ubuntu 18.04, which results
    in errors regarding the `/usr/share/openscap/cpe/openscap-cpe-dict.xml` file as
    missing. It is hoped that, in due course, the Ubuntu OpenSCAP packages are updated
    and fixed so that they can be used reliably.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu 18.04的`libopenscap8`包中也存在一个错误，导致关于`/usr/share/openscap/cpe/openscap-cpe-dict.xml`文件缺失的错误。希望Ubuntu的OpenSCAP软件包能够在适当的时候更新并修复，以便能够可靠使用。
- en: Users of Red Hat Enterprise Linux will need to find that Red Hat will only support
    users with their OpenSCAP scanning if they are using the SSG policies that ship
    with RHEL, and so in this scenario, it is even more important to make use of the
    vendor-provided policy files.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Red Hat Enterprise Linux的用户需要注意，Red Hat仅支持使用RHEL附带的SSG策略进行OpenSCAP扫描的用户，因此在这种情况下，更加需要使用供应商提供的策略文件。
- en: As with any open source environment, the beauty is that the choice is up to
    you—if you wish to evaluate the newer policies available, then you are free to
    do so, and for Ubuntu 18.04, you must do this or the scans will not work! However,
    if you wish to take advantage of a commercially-supported environment, then that
    is available too, especially if you use RHEL.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何开源环境一样，关键在于选择权在于您——如果您希望评估可用的更新策略，您可以自由选择这样做，而对于Ubuntu 18.04，您必须这样做，否则扫描将无法正常工作！不过，如果您希望利用商业支持的环境，那么RHEL就是一个不错的选择。
- en: 'To install the vendor-provided SSG packages on CentOS 7 or RHEL 7, you would
    run this command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要在CentOS 7或RHEL 7上安装供应商提供的SSG软件包，您需要运行以下命令：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This package contains the SSG policies for all operating systems and applications
    that Red Hat directly supports (bearing in mind that CentOS is based on RHEL).
    Hence, you will only find policies for RHEL 6 and 7, CentOS 6 and 7, the **Java
    Runtime Environment** (**JRE**), and Firefox when you install this package. At
    the time of writing, this installs version 0.1.43 of the SSG.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 此软件包包含了所有由Red Hat直接支持的操作系统和应用程序的SSG策略（请注意，CentOS是基于RHEL的）。因此，您在安装此软件包时，只会找到RHEL
    6和7、CentOS 6和7、**Java运行时环境**（**JRE**）以及Firefox的策略。写作时，此软件包安装了SSG版本0.1.43。
- en: 'On Ubuntu Server, SSG is split across multiple packages but offers cross-platform
    support. To install the complete set of SSG packages on Ubuntu Server 18.04, you
    would run the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu Server上，SSG分布在多个软件包中，但提供跨平台支持。要在Ubuntu Server 18.04上安装完整的SSG软件包，您需要运行以下命令：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'These packages provide policies for the following systems:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这些软件包提供以下系统的策略：
- en: '| `ssg-base` | SSG Base content and documentation files |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `ssg-base` | SSG基础内容和文档文件 |'
- en: '| `ssg-debderived` | SSG policies for Debian-derived operating systems such
    as Ubuntu Server |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `ssg-debderived` | 针对Debian衍生操作系统（如Ubuntu Server）的SSG策略 |'
- en: '| `ssg-debian` | SSG policies for Debian operating systems |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `ssg-debian` | 针对Debian操作系统的SSG策略 |'
- en: '| `ssg-nondebian` | SSG policies for other Linux operating systems such as
    RHEL and SuSE Enterprise Linux |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `ssg-nondebian` | 针对其他Linux操作系统（如RHEL和SuSE企业版Linux）的SSG策略 |'
- en: '| `ssg-applications` | SSG policies for securing applications such as the **Java
    Runtime Environment** (**JRE**), Firefox, and Webmin |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `ssg-applications` | 用于保护应用程序的SSG策略，如**Java运行时环境**（**JRE**）、Firefox和Webmin
    |'
- en: Hence, it is fair to say that, at the time of writing, although Ubuntu Server
    ships a much older package version (0.1.13), it offers support for a wider range
    of platforms.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，可以公平地说，在写作时，尽管Ubuntu Server发布了一个较旧的包版本（0.1.13），但它支持更多的操作平台。
- en: The choice of which SSG you wish to install is up to you, or if you are feeling
    bold, you may even choose to write your own! The most important thing is that
    you make an informed choice and retain support from your operating system vendor
    if that is a requirement for you. Before we proceed to explore other policies
    you might also download, it is worth looking in greater detail at two of the security
    policy file formats you may come across when you are searching for and implementing
    your OpenSCAP auditing architecture. We shall proceed with this in the next section.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你选择安装哪种SSG是由你决定的，或者如果你敢于尝试，你甚至可以选择编写自己的SSG！最重要的是，你要做出明智的选择，并在需要时获得操作系统供应商的支持。我们在继续探索你可能下载的其他策略之前，值得详细了解一下你在搜索和实现OpenSCAP审计架构时可能遇到的两种安全策略文件格式。我们将在下一节进行详细讲解。
- en: Understanding the purpose of XCCDF and OVAL policies
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解XCCDF和OVAL策略的目的
- en: When you download policies, you will often find that you see the terms **Open
    Vulnerability and Assessment Language** (**OVAL**) and **eXtensible Configuration
    Checklist Description Format** (**XCCDF**). Some security policies you will come
    across are only available in OVAL format. Hence, we must take a moment to consider
    these different file types.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当你下载策略时，你经常会看到**开放漏洞评估语言**（**OVAL**）和**可扩展配置检查表描述格式**（**XCCDF**）这两个术语。你遇到的一些安全策略只有在OVAL格式下才可用。因此，我们需要花点时间来考虑这些不同的文件类型。
- en: First of all, it is important to state that they are not interchangeable—instead,
    they should be thought of as hierarchical in nature. At the lower level in the
    hierarchy is the OVAL file, which in essence describes all of the system-level
    checks that the OpenSCAP scanning engine should perform. This might, for example,
    consist of checking whether a given package is newer than a given version as a
    known vulnerability might exist in the older one. Or it might be a check to ensure
    that an important system file such as `/etc/passwd` is owned by root.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，重要的是要声明它们不是可以互换的——相反，它们应该被视为具有层级性质。在层级结构的较低层次是OVAL文件，本质上描述了OpenSCAP扫描引擎应该执行的所有系统级检查。例如，这可能包括检查某个给定的包是否比某个版本更新，因为旧版本中可能存在已知漏洞。或者，它可能是一个检查，确保像`/etc/passwd`这样的关键系统文件的所有者是root。
- en: These checks are all incredibly valuable when it comes to auditing a system's
    compliance against your security policy, but they might not be very readable for
    managers or security teams. They would be more interested in a high-level security
    policy, such as *Verify Permissions on Important Files and Directories*. Indeed,
    this check would almost certainly encompass the check on the ownership of `/etc/passwd`,
    along with a whole set of other vital system files such as `/etc/group` and `/etc/shadow`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这些检查在审计系统是否符合你的安全策略时非常有价值，但它们可能对于经理或安全团队来说不太易读。他们可能更感兴趣的是高级别的安全策略，例如*验证重要文件和目录的权限*。实际上，这个检查几乎肯定会包括对`/etc/passwd`的所有权检查，以及一整套其他关键系统文件，例如`/etc/group`和`/etc/shadow`。
- en: This is where the XCCDF format becomes relevant—this can be thought of as the
    next level in the hierarchy as it provides a set of human-readable security policies
    (along with valuable documentation and references) that would be useful to an
    audience such as a manager or information security team. These describe the state
    of a system in reference to the checks performed by the OVAL definition. The XCCDF
    files do not contain any check definitions for the scanning engine (for example, `oscap`)—instead,
    they reference the checks that have been written in the OVAL file and hence can
    be thought of as sitting on top of the OVAL files in the hierarchy.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是XCCDF格式变得相关的地方——它可以被看作是层级结构中的下一级，因为它提供了一组可供人类阅读的安全策略（以及有价值的文档和参考资料），这对于经理或信息安全团队这样的观众来说会非常有用。这些策略描述了系统的状态，参考了OVAL定义执行的检查。XCCDF文件不包含扫描引擎的任何检查定义（例如`oscap`），而是引用了在OVAL文件中编写的检查，因此可以被看作位于OVAL文件之上的一层。
- en: Therefore, an OVAL file can be used for auditing purposes in isolation, but
    an XCCDF file cannot be used unless its corresponding OVAL file is present.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，OVAL文件可以单独用于审计目的，但除非相应的OVAL文件存在，否则无法使用XCCDF文件。
- en: XCCDF files also contain a selection of scanning profiles that tell the scanning
    engine what your policy looks like, and hence what it should scan for. This will
    almost certainly mean only scanning for a subset of the checks that are present
    in the OVAL file.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'The profiles available can easily be listed using the graphical SCAP Workbench
    tool or on the command line by using the `oscap info` command. An example of this
    command run against SSG for CentOS 7 is shown in the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e8b0efd-b9a5-4716-a92b-f821185b4cce.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
- en: Although the output has been truncated in the interests of space, you can clearly
    see the wide array of security profiles available for CentOS 7\. You will notice
    in the screenshot that (for example) there are different profiles for CentOS 7
    servers that run graphical user interfaces and for those that don't. This is because
    additional security measures are required on a graphical system to ensure that
    the X Windows subsystem is properly secured. There is a profile suitable for **Payment
    Card Industry** (**PCI**) environments and at the top, the most basic profile,
    which should be the minimum viable security policy suitable for just about any
    CentOS 7 server.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Once you know which profile you wish to use from your XCCDF policy file, you
    will specify it when you run the scan, and we shall explore this in greater detail
    in a later section, entitled *Scanning the enterprise with OpenSCAP*.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Before we conclude this section, it is important to state that OVAL files do
    not have profiles, and if you run an OVAL scan, you will automatically run all
    tests defined in the OVAL file on your system regardless of its purpose. This
    may be problematic because, taking the CentOS 7 SSG OVAL file as an example, this
    contains tests for the security of the X Windows graphical subsystem. These tests
    will fail on a system that does not have a GUI installed, and so might present
    false positives in your scan results.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that SCAP Workbench only supports scanning with XCCDF
    policies, and so if you are using a profile that only includes an OVAL file, you
    will need to use a different scanning tool.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand more about the file formats of the various security policies
    you might download, let's take a look at some of the other security profiles you
    may wish to download.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Installing other OpenSCAP policies
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is highly possible that the SSG security policies will form the core of your
    auditing framework with OpenSCAP—however, given the open source nature of OpenSCAP,
    it is entirely possible for anyone, including you, to write a policy file.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: The most likely policies you would wish to supplement your SSG ones with are
    ones that can check the patch level of your servers. Given the frequent nature
    at which patches are released for Linux operating systems, integrating such policies
    with SSG would create a headache for the maintainers, and so they are generally
    kept separate.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, on your CentOS 7 server, you can download the following security
    policy (note that it is available in OVAL format only):'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This contains checks for all CentOS 7 (and RHEL 7) package vulnerabilities that
    have been found to date and checks the installed versions to ensure that they
    are newer than the versions where known vulnerabilities existed. Hence, this can
    very easily generate a report that can show you whether you need to patch your
    CentOS 7 or RHEL 7 systems urgently.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'A similar list is available from Canonical for Ubuntu Server 18.04, which can
    be downloaded as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Once again, this contains a list of all packages vulnerabilities that have been
    found on Ubuntu Server 18.04 and again checks to ensure that the package versions
    installed on your system are newer than the vulnerable versions. For both of these
    security policies, all checks are run every time as they are in OVAL format—however,
    tests only report a failure if a package is installed and is older than the version
    containing the fix for the given vulnerability. Hence, you should not receive
    any false positives resulting from running these scans.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the SSG policies, these policies are updated regularly—at the time of
    writing, the Ubuntu package vulnerability scanning profile we downloaded using
    the preceding commands was only one hour old! As a result, part of your auditing
    process must involve downloading the latest package vulnerability OVAL policies
    and scanning against these—possibly a good job for Ansible (though this is left
    as an exercise for you).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: By now, you should have a good understanding of the types of policies you can
    download, the formats you may come across them in, and what their intended purposes
    are. Hence, in the next section, we will proceed to demonstrate how they can be
    used to scan your Linux hosts and audit your compliance against your chosen security
    policies.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Scanning the enterprise with OpenSCAP
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this chapter, we have covered the various tools available from the
    OpenSCAP project and the security policies you might wish to employ to scan your
    Enterprise Linux environment. Now that we have completed that groundwork, it's
    time to take a look at how to make use of these to actually scan your infrastructure.
    As we have discussed, there are three key tools that you might use to scan your
    infrastructure. We will start off this process by exploring the `oscap` command-line
    tool in the next section.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Scanning the Linux infrastructure with OSCAP
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discussed earlier in this chapter, the `oscap` tool is a command-line
    utility designed for scanning the local machine that it is installed on. The security
    policies that you wish to audit the host against must also be on the filesystem
    of the host that it runs on. If you have completed the steps in the section entitled
    *Evaluating and selecting policies*, then you should already have everything you
    need.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: With that said, if using the `oscap` tool to scan your infrastructure is going
    to be your way forward, you may wish to consider Ansible as a tool to both install
    it and gather the results when the scan is complete.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we come to this, let''s look at how we might scan a single host:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming that we are working on our Ubuntu 18.04 server and that we have unpacked
    the latest upstream SSG into our current working directory so that we have the
    required Ubuntu 18.04 support, we would use the `oscap info` command to query
    the XCCDF policy file to see which policies are available to us:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output of the `info` command will yield something like that shown in the
    following screenshot:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1754f8e8-3150-4791-baf8-e11d722c64c5.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
- en: 'From here, we will choose the profile (or profiles—after all, you could always
    run more than one scan) that you wish to audit against. In our case, we are running
    a g*eneral-purpose* server, so we will choose the profile with `Id: xccdf_org.ssgproject.content_profile_standard`.'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To run this scan, and save the output in a human-readable HTML report, you
    would then run a command such as the following:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We must run this command using `sudo`, as it requires access to some core system
    files that would not otherwise be accessible. The scan runs and produces a nice
    human-readable output on the screen, an example of which is shown in the following
    screenshot:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3bef98e0-dfaa-42f0-b4e0-e91412f11b37.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
- en: As you can see, the XCCDF policy produces a highly readable output, with a clear
    pass/fail result for each test. Hence, even within these first few lines of the
    output, you can see that our test system is not compliant in several areas.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the `oscap` command has also generated a nice HTML report that
    we have put into the web root of this server. Of course, you wouldn't do this
    in a production environment—the last thing you'd want to do is publicize any security
    issues with your server! However, you could send this report to your IT Security
    team, and if you were running OSCAP using an Ansible playbook, Ansible could copy
    the report from the remote server to a known place where the reports can be collated.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'A portion of this HTML report is shown in the following screenshot—you can
    see how readable it is. Further, even at a quick glance, someone non-technical
    can see that this system fails compliance tests and needs remedial steps:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/075d3e95-b566-4abf-99a9-16abc5066392.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
- en: 'Suddenly, it becomes apparent how powerful this tool is, and why you would
    wish to use it to scan your infrastructure! In addition to this report, we can
    also check the patch status of our test system using the `com.ubuntu.bionic.cve.oval.xml`
    policy that we downloaded in the section entitled *Installing other OpenSCAP policies*.
    As we discussed, OVAL policies do not produce reports that are as readable as
    XCCDF reports, but nonetheless they are still incredibly valuable. To scan our
    Ubuntu system to see whether it is missing any critical security patches, you
    would run this:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As shown in the following screenshot, the output is not as readable as the
    XCCDF output and needs a little more interpretation. In short, the `false` result
    means that the machine being scanned does not fail the compliance test, and so
    infers that the requisite patch has already been applied, whereas `true` means
    that a patch is missing from the system:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e73ec3a7-6ada-415f-b50a-3f576430c6a6.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
- en: 'Once again, however, the HTML report comes to our rescue—to start with, it
    has a summary section at the top, which shows that our system has a total of 432
    detected package vulnerabilities, but also 8,468 test passes. Hence, we urgently
    need to apply patches to fix known security vulnerabilities, as we understood
    by the policy file we ran the audit against:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/583449b4-3286-409b-ba3a-6014defc532c.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
- en: 'Of course, it is highly important to download an updated copy of this policy
    regularly to ensure that it is up to date. If you drill down into the report,
    you will see that, for each check, there is a cross-reference CVE vulnerability
    report so you can find out which vulnerabilities your system exhibits:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/74fe0aab-a944-4b8c-b9fa-59b50069d735.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
- en: Just through these few examples, I'm sure you can see how valuable these reports
    are and how they could be easily reviewed by an IT Security team without any specific
    Linux command-line knowledge.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'The process for running OSCAP-based scans on CentOS or RHEL is broadly similar:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming that you are using the SSG policy packaged by your operating system
    vendor and included with the OS, you would query the XCCDF profiles so that you
    know which to run against:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can then run an XCCDF-based scan in exactly the same way as we did on Ubuntu—here,
    we are choosing the standard profile to scan our system with:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You will observe the presence of the `--fetch-remote-resources` flag here too—this
    is used because the CentOS 7 policy requires some additional content that it downloads
    directly from Red Hat so that it is always working with the most up-to-date copy.
    The scan runs in much the same way as before, producing the same human-readable
    report. One thing you will see as the scan runs is that many of the tests return
    `notapplicable`—unfortunately, the CentOS 7 security policy is very much a work
    in progress and the version included with CentOS 7 at the time of writing does
    not include complete support for this operating system. This demonstrates how
    pedantic OpenSCAP policies can be—most CentOS 7 security requirements will apply
    equally to RHEL 7 and vice versa, yet the policies are coded to work very specifically
    with certain operating systems. The following screenshot shows the scan in progress
    and the aforementioned `notapplicable` test results:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34e54a51-56b9-4eb4-8421-205293844cea.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
- en: 'In spite of this, the audit still reveals some valuable insights—for example,
    as we can see from the following screenshot of the HTML report, we have accidentally
    allowed accounts with empty passwords to log in:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d72d3741-90ff-477e-945a-a0b0afd2e5c1.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
- en: 'If you are running CentOS 7 specifically, you will not receive vendor support
    from Red Hat, and so it is worth trying the upstream SSG policy as the support
    for operating systems such as CentOS and Ubuntu is improving all the time (as
    we saw earlier in this section when we audited our Ubuntu Server 18.04 host).
    Rerunning the exact same scan but using SSG 0.1.47, our scan results look quite
    different:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb95f90c-e187-4435-b0fe-4d08f4e3267d.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
- en: 'This just highlights the importance of understanding the policy you are using
    and making sure that you download the right version for your situation. If you
    are using RHEL 7, you would be advised to make use of the packages supplied by
    Red Hat, whereas with CentOS 7 and Ubuntu Server 18.04, you would be better off
    trying the latest version from the upstream GitHub repository. Indeed, the following
    screenshot shows the results of the exact same scan on our CentOS 7 test system
    using the version 0.1.47 SSG, and we can see that this time, we have run a total
    of 958 tests and have a much clearer understanding of the security of our server:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cdf6cc0e-2c47-4361-811b-00504f18f487.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
- en: 'On CentOS 7, you can also run the OVAL scan for package vulnerabilities in
    the same manner that we did with Ubuntu Server, but using the `com.redhat.rhsa-RHEL7.xml`
    file that we downloaded previously. Just as we did on Ubuntu Server, we would
    run this scan with this command:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The report is interpreted in exactly the same way as on Ubuntu, and if we refer
    directly to the HTML report, we can see that this system is fully patched against
    known package vulnerabilities at this time:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7fb6d19-36ad-4a5c-acc4-07e3e83acbae.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
- en: 'This wraps up our look at the `oscap` command-line tool, but by now you should
    have all of the information you need to run your own scans regularly. Automating
    this process is left as an exercise for you, but here are some tips on what I
    would consider a good Ansible solution:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Use the `yum` or `apt` modules to install the required OpenSCAP packages on
    the server before performing any other tasks.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `get_url` module to download SSG and/or the package vulnerability OVAL
    definition file to ensure you have the most up-to-date copy (except on RHEL 7,
    where you would use the version supplied by Red Hat). Use the `unarchive` module
    to unzip the file you downloaded.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the OSCAP scan using the `shell` module.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `fetch` module to grab a copy of the HTML report(s) for distribution
    and analysis.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will look at running scheduled regular scans using the
    OpenSCAP Daemon.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Running regular scans with the OpenSCAP Daemon
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have now understood the basis of scanning with the `oscap` command-line
    tool, it will be easy to set up regular scanning with the OpenSCAP Daemon as the
    techniques involved are the same. Assuming that you have already installed the
    daemon, as we discussed earlier, it is fairly easy to create automated scans,
    although, at the time of writing, the OpenSCAP Daemon does not run on Ubuntu Server
    18.04\. This is a result of a missing CPE file, which, to date, has not been rectified,
    and although this did not impact our use of the `oscap` command-line tool (though
    those of who are eagle-eyed will have noticed an error relating to this file at
    the end of the scan), it does prevent the OpenSCAP Daemon from starting.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: As a result, the examples in this section will be based on CentOS 7 only—however,
    the procedure would be broadly similar on Ubuntu Server 18.04 when the OpenSCAP
    packages are fixed. In fact, this issue, which was first reported in October 2017
    according to the `ComplianceAsCode` GitHub project, seems to be relatively long-standing
    and so is an excellent reason to make use of Ansible in conjunction with the `oscap`
    tool for your scanning needs.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: When this Ubuntu related issue is fixed, you will be able to schedule scans
    for both CentOS and Ubuntu hosts from one central scanning host using the process
    outlined in this chapter. Note that the SSG files for all of your hosts (be they
    CentOS, RHEL, or Ubuntu) must live on the same host as the OpenSCAP Daemon – they
    are copied across to each host to be scanned whenever a scan is run by the OpenSCAP
    Daemon, and so do not need to be deployed on every host.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'Nonetheless, if you want to set up a scheduled scan using the OpenSCAP Daemon,
    the easiest way to do this is by using the `oscapd-cli` tool in interactive mode:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'This is achieved by invoking `oscapd-cli` with the following parameters:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This launches a text-based guided configuration that you can easily complete—the
    following screenshot shows an example of how I set up the daemon to run a daily
    scan on my CentOS 7 test system:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/52ddaa69-f83c-442e-88d2-2b4ee1795fe7.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
- en: Most of the steps in that interactive setup should be self-explanatory—however,
    you will note a step that asks about `Online remediation`. The OpenSCAP profiles
    include the capability to automatically rectify any compliance issues they find
    as they go through the scan. It is up to you whether you wish to enable this or
    not, as this will depend on whether you feel happy with an automated process making
    changes to your systems, even for security purposes. You may want to separate
    your audit tasks from your policy enforcement tasks, in which case you would use
    Ansible for the remediation steps.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: If you do enable remediation, be sure that you have tested this in an isolated
    environment first to ensure that the remediation steps do not break any of your
    existing applications. This testing must be performed not only when your application
    code changes, but also when new versions of SSG are downloaded as each new version
    might contain new remediation steps. This is the same as the guidance we explored
    in [Chapter 13](3d4a9c0a-452f-4fbb-85c8-372149303613.xhtml), *Using CIS Benchmarks*,
    only now applied to OpenSCAP SSG.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Once you have enabled the scan, you will find that, at the scheduled time, it
    deposits the scan results in `/var/lib/oscapd/results`. Under this, you will find
    a numbered subdirectory that corresponds to the task ID you were given when you
    created the task (`1`, in the preceding screenshot), and then under another numbered
    directory, which is the scan number. Hence, the results for the first scan for
    task ID `1` will be found in `/var/lib/oscapd/results/1/1`.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you examine the contents of this directory, you will notice that the results
    are only stored in an XML file, which, while suited for further processing, is
    not very readable. Fortunately, the `oscap` tool that we looked at previously
    can easily convert scan results into human-readable HTML—for this result, we would
    run the following command:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Once this command has run, you can view the HTML report in your web browser
    just as we did earlier in this chapter. Of course, if you aren't running a web
    server on this machine, you can simply copy the HTML report to a host that has
    one (or even open it locally on your computer).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: The beauty of setting up the OpenSCAP Daemon is that, unlike the `oscap` tool,
    it can scan remote hosts as well as the local one. This scanning is performed
    over SSH, and you must ensure that you have set up passwordless SSH access from
    the server running the OpenSCAP Daemon to the remote host. If you are using an
    unprivileged account to log in, you should also ensure that the account has sudo
    access, again without requiring a password. This should be quite easy for any
    experienced system administrator to set up.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: On CentOS 7, the default SELinux policy prevented the remote scan from running
    on my test system. I had to disable SELinux temporarily for the remote scan to
    run. Obviously, this is not an ideal solution—if you encounter this issue, it
    would be better to build an SELinux policy that enables the remote scan to run.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have set up the remote access, configuring the OpenSCAP Daemon through
    the interactive task creation process is no more complex than for the local machine—the
    only difference this time around is that you need to specify the remote connection
    in this format:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you are logging in directly as `root` (not recommended), you can leave out
    the `+sudo` part of the preceding string. Hence, to set up add another remote
    scan from my test server, I ran through the commands shown in the following screenshot:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/96e924b9-fcab-4c4a-ab1d-8e2ad16d483a.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
- en: As you can see, this creates task number `2` for this purpose. The advantage
    of this setup is that, once you have set up the SSH and sudo access, you can have
    one designated host that is responsible for scanning your entire estate of Linux
    servers. Also, the hosts being scanned only need the OpenSCAP libraries present—they
    do not need the OpenSCAP Daemon or the security policy files—these are automatically
    transferred to the hosts as part of the remote scanning process.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: The results of the scheduled scan are stored in XML format in the `/var/lib/oscapd/results`
    directory exactly as before and can be analyzed or converted into HTML as required.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: The OpenSCAP Daemon is almost certainly your quickest and easiest route to scanning
    your infrastructure, and the fact that it collects and stores all of the results
    locally as well as uses security policies stored on its own filesystem means it
    is fairly resistant to tampering. For automated, ongoing SCAP-based scanning of
    your environment, the OpenSCAP Daemon is almost certainly your best choice, and
    you could always create a `cron` job to automatically convert the XML results
    into HTML and put them into your web server root directory so that they can be
    viewed.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, in the next section, we will look at the SCAP Workbench
    tool and see how that can help you with your security auditing.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Scanning with SCAP Workbench
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SCAP Workbench tool is an interactive, GUI-based tool for running SCAP scans.
    It has almost the same capabilities as the `oscap` command-line tool, except that
    it can scan both remote hosts over SSH (similarly to the OpenSCAP Daemon). The
    high-level process for using SCAP Workbench is the same as for `oscap`—you select
    your policy file from the policy you downloaded, select the profile from within
    it, and then run the scan.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: 'This time, however, the results are displayed in the GUI and are easily interpretable
    without the need to generate an HTML report and load it in a browser. The following
    screenshot shows the equivalent of running the following on the command line with
    `oscap`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'It is important to state that no report file is generated by the scan, but
    you can generate either an HTML- or XML-based one by clicking on the Save Results
    button at the bottom of the screen:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa3b0d5e-9dcb-41b2-b277-dd613882e0b0.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
- en: As you can clearly see, if you need to run an interactive and immediate scan
    of a system, SCAP Workbench is the easiest way to do it. The only limitation is
    that it can only process XCCDF files, so the OVAL files used to establish whether
    you have package vulnerabilities cannot be used here.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this section, we have explored ways that you can use the various
    OpenSCAP tools to scan your infrastructure. We have also shown a variety of scans,
    and their output is generally quite easy to interpret. However, in the next section,
    we will explore these in a little more depth before we complete our work on OpenSCAP.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Interpreting results
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have seen that the OpenSCAP scans, especially the XCCDF-based ones,
    produce nice, easy-to-read reports that you can easily take action on. However,
    if the reports are not clear to you, then you would not know what needs fixing
    to rectify the lack of compliance.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, both the OVAL policies we used earlier to check for vulnerable
    packages and the XCCDF-based reports contain enough information for you to do
    both things.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take an example from our earlier scan of our CentOS 7 server using the
    SSG version 0.1.47\. In this, we failed, among other things, a check called `Disable
    ntpdate Service (ntpdate)`. Suppose that this result was not obvious to you, and
    you were unsure what the underlying problem was or why it was an issue. Fortunately,
    in the HTML report generated from this scan, you can click on the check title.
    A screen should pop up that looks like the one in the following screenshot:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/629d2232-a270-4784-9f8c-5ce79729481d.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
- en: Here, you can see all the detail you could ever need—from the details of the
    scan through to the references and identifiers from the various security standards
    that make this recommendation, and even the manual commands that could be used
    to rectify the issue so that the system becomes compliant for the next scan.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: 'Even better, if you scroll down this screen, you will find that many of the
    latest versions of the SSG (version 0.1.47 included) actually include a great
    deal of Ansible code that can be applied to remedy this situation, as shown in
    the following screenshot:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89ead6bd-8594-48ba-a853-4ce935fce09b.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
- en: Hence, through a little exploration, you really can use these scan results not
    only to find out why your infrastructure is not compliant but to also produce
    the exact set of fixes you require.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: OpenSCAP can also remediate (that is, fix) problems that it finds while scanning
    to help you to both audit and maintain compliance. However, we have not explored
    this here because it is vital that you understand the scans and what they will
    do before attempting automatic remediation. Hence, this is left as an exercise
    for you—however, you will see that in both the OpenSCAP Daemon and SCAP Workbench,
    there is a simple option you can enable that will not just perform the scan but
    attempt remediation.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: 'While we have established how powerful and user-friendly the XCCDF profiles
    are, we have seen that reports generated by OVAL profiles are a little less readable.
    Fortunately, if you refer to the following screenshot, you will notice that the
    CVE numbers for the identified vulnerabilities are, in fact, hyperlinks:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90b92cdc-3997-49a5-8fc6-46166f4fcad5.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
- en: Clicking on these will take you to the operating system vendor's website, directly
    to a page that details the vulnerability, the affected package(s), and when the
    fix was implemented. As a result, you can find out exactly which packages you
    need to update to remedy the situation.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: That concludes our look at auditing your Linux environment with OpenSCAP—it
    is hoped that you have found this useful and that you will be able to apply this
    to your environment for the benefit of your security and auditing processes.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Keeping an eye on the security compliance of your Linux infrastructure is ever
    more important, and given the large number of security recommendations, coupled
    with the large number of Linux servers that might exist in a modern enterprise,
    it is clear that a tool that can audit for compliance is needed. OpenSCAP provides
    exactly such a framework and with a little care and attention (and application
    of the right security profiles) can easily audit your entire Linux estate and
    provide you with valuable, easy to read and interpret reports of your compliance
    levels.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you gained hands-on experience of installing OpenSCAP tools
    for server audit and understood the available policies and how to make effective
    use of them in OpenSCAP. You then learned how to audit your Linux servers with
    the various OpenSCAP tools, and finally explored how to interpret the scan reports
    to take appropriate action.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: In the next and final chapter of this book, we will look at some tips and tricks
    to make your automation tasks easier.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What does SCAP stand for?
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why are SCAP policies a valuable tool in auditing your Linux infrastructure?
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which OpenSCAP tool would you use to centrally perform scanning of several Linux
    hosts regularly?
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between an XCCDF file and an OVAL file?
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When would you use the vendor-supplied SSG policies, even if they are older
    than the currently available ones?
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why might the scan results for a CentOS 7 host show `notapplicable` when using
    a RHEL 7 policy file?
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you generate an HTML report from the XML results generated by the OpenSCAP
    Daemon?
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the requirements for a remote SSH scan to be performed by SCAP Workbench
    or the OpenSCAP Daemon?
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Learn Ansible* by *Russ McKendrick*: [https://www.packtpub.com/gb/virtualization-and-cloud/learn-ansible](https://www.packtpub.com/gb/virtualization-and-cloud/learn-ansible)'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenSCAP website: [https://www.open-scap.org/](https://www.open-scap.org/)
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
