- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting to Know Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Linux is a family of operating systems based on the same kernel. Since it’s
    a family of independently developed systems that have different design principles,
    goals, and implementation details, it’s important to understand what makes that
    very situation possible and how those systems are structured. In this chapter,
    we will discuss the concept of Linux distributions and open source software licensing
    and see how Linux-based systems are used. We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The structure of a Linux system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open source software licenses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux usage in the modern world
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The structure of a Linux system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux and its multiple distributions often seem complicated for beginners. To
    clarify this, let’s examine the structure and evolution of operating systems in
    general.
  prefs: []
  type: TYPE_NORMAL
- en: The Linux kernel and Linux-based operating systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When people say *Linux*, they may mean different things. In the narrow sense,
    Linux is an operating system kernel that was created in the early 90s by Linus
    Torvalds and is now developed and maintained by a large international community.
    However, when people say they are using Linux, they usually mean a family of operating
    systems that use that kernel and usually (but not always) a set of system libraries
    and utilities created by the GNU project, which is why some insist that such systems
    should be referred to as GNU/Linux instead.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The GNU project is a free software project that was launched in 1983 by Richard
    Stallman. His goal was to create a complete Unix-like operating system composed
    entirely of free software. **GNU** stands for **GNU’s Not Unix**, which reflects
    the project’s goal of creating a free software alternative to the proprietary
    Unix operating system.
  prefs: []
  type: TYPE_NORMAL
- en: To fully understand how that unusual situation became possible, let’s briefly
    discuss the history of operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Kernel versus user space
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The earliest computers had very low computational power, so they would only
    have one program in their memory at a time, and that program had complete control
    over the hardware. As computing power increased, it became feasible to have multiple
    users use the same computer at the same time and run multiple programs – an idea
    known as time-sharing or multitasking. Shared computers would run a program known
    as a supervisor that would allocate resources to end user programs. A set of supervisor
    programs and system utilities became known as an operating system. The earliest
    time-sharing systems used cooperative multitasking, where programs were expected
    to transfer control back to the supervisor on their own. However, if a programming
    mistake made a program run into an endless loop or write data to a wrong memory
    address, such a program could cause the entire computer to hang or corrupt the
    memory of another program, including the supervisor.
  prefs: []
  type: TYPE_NORMAL
- en: To make multitasking more reliable, newer generations of hardware introduced
    protection mechanisms that allowed a supervisor program to take control of the
    CPU back from end user programs and forcibly terminate programs that tried to
    write something to memory that belonged to other programs or the supervisor itself.
  prefs: []
  type: TYPE_NORMAL
- en: That brought a separation between the operating system kernel and user space
    programs. End user programs physically couldn’t control the hardware directly
    anymore, and neither could they access memory that wasn’t explicitly allocated
    to them. Those privileges were reserved for the kernel – the code that includes
    a process scheduler (serving the same purpose as old supervisor programs) and
    device drivers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside a single program, programmers are free to organize their code as they
    see fit. However, when multiple independently developed components need to work
    together, there needs to be a well-defined interface between them. Since no one
    writes directly in machine code anymore, for modern systems, this means two interfaces:
    the **Application Programming Interface** (**API**) and the **Application Binary
    Interface** (**ABI**). The API is for programmers who write source code and define
    function names they can call and parameter lists for those functions. After compilation,
    such function calls are translated into executable code that loads parameters
    into the correct places in memory and transfers control to the code to be called
    – where to load those parameters and how to transfer control is defined by the
    ABI.'
  prefs: []
  type: TYPE_NORMAL
- en: Interfaces between user space programs and libraries are heavily influenced
    by the programming language they are written in.
  prefs: []
  type: TYPE_NORMAL
- en: On the contrary, interfaces between kernels and user space programs look more
    similar to hardware interfaces. They are completely independent of the programming
    language and use software interrupts or dedicated *system call* CPU instructions
    rather than the function calls familiar to application programmers.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: A system call in Linux is a mechanism that allows user-level processes to request
    services from the kernel, which is the core of the operating system. These services
    can access hardware devices, manage processes and threads, allocate memory, and
    perform other low-level tasks that require privileged access.
  prefs: []
  type: TYPE_NORMAL
- en: 'Those interfaces are also very low-level: for example, if you want to use the
    `write()` system call to print a string to standard output, you must always specify
    how many bytes to write – it has no concept of a *string variable* or a convention
    for determining its length.'
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, operating systems include standard libraries for one or more
    programming languages, which provide an abstraction layer and a stable API for
    end user programs.
  prefs: []
  type: TYPE_NORMAL
- en: Most operating systems have the kernel, the standard libraries for programming
    languages, and often the basic system utilities developed by a single group of
    people in close collaboration, and all those components are versioned and distributed
    together. In that case, the kernel interface is usually treated as purely internal
    and isn’t guaranteed to remain stable.
  prefs: []
  type: TYPE_NORMAL
- en: The Linux kernel and the GNU project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linux is unique in that it was developed to provide a replacement kernel for
    an existing user space part of an operating system. Linus Torvalds, the founder
    of the project, originally developed it to improve the functionality of MINIX
    – an intentionally simplified Unix-like operating system meant for instruction
    rather than production use. He’s since been using the GNU C compiler and user
    space programs from the GNU project – the project that Richard Stallman started
    with the goal to create a complete Unix-like operating system that would be free
    (as in freedom) and open source, and thus available for everyone to use, improve,
    and redistribute.
  prefs: []
  type: TYPE_NORMAL
- en: At the time, the GNU project had all the user space parts of an operating system,
    but not a usable kernel. There were other open source Unix projects, but they
    were derived from the BSD Unix code base, and in the early 90s, they were targets
    of lawsuits for alleged copyright infringement. The Linux kernel came at a perfect
    time since Linus Torvalds and various contributors developed it completely independently
    and published it under the same license as the GNU project software – the GNU
    **General Public License** (**GPL**). Due to this, a set of GNU software packages,
    plus the Linux kernel, became a possible basis for a completely open source operating
    system.
  prefs: []
  type: TYPE_NORMAL
- en: However, Linus Torvalds wasn’t a GNU project member, and the Linux kernel remained
    independent from the **Free Software Foundation** (**FSF**) – it just used a license
    that the FSF developed for the GNU project, but that any other person could also
    use, and many did.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, to keep new Linux kernel versions useful together with the GNU C library
    and software that relied on that library, developers had to keep the kernel interface
    stable.
  prefs: []
  type: TYPE_NORMAL
- en: The GNU C library wasn’t developed to work with a specific kernel either – when
    that project started, there wasn’t a working GNU kernel, and GNU software was
    usually run on other Unix-like operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, both Linux and the GNU software can be and still are used together
    and in different combinations. The GNU user space software set can also be used
    with the still-experimental GNU hard kernel, and other operating systems use it
    as system or add-on software. For example, Apple macOS used GNU Bash as its system
    shell for a long time, until it was replaced by zsh.
  prefs: []
  type: TYPE_NORMAL
- en: The stability guarantees of the Linux kernel interface make it attractive to
    use as a basis for custom operating systems that may be nothing like Unix – some
    of them just have a single program run on top of the kernel. People have also
    created alternative standard libraries for different programming languages to
    use with Linux, such as Musl and Bionic for the C programming language, which
    use more permissive licenses and facilitate static linking. But to understand
    those licensing differences, we need to discuss the concept of software licenses.
  prefs: []
  type: TYPE_NORMAL
- en: Open source software licenses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A software license is an agreement between a copyright holder and a recipient
    of the software. Modern copyright laws are designed to give authors complete control
    over the use and distribution of their work – copyright automatically exists from
    the moment a piece of work is fixed on any medium and no one can use or copy that
    work without explicit permission from the author. Thus, a license agreement is
    required to grant a user some of the permissions that are reserved for the author
    by default. Authors are free to specify any conditions, and many individuals and
    companies use that to restrict what users can do – for example, only permit non-commercial
    use. A license agreement is also normally made between an author or a copyright
    holder and a specific person.
  prefs: []
  type: TYPE_NORMAL
- en: However, in the late 1980s, programmers and lawyers came up with the idea to
    use authors’ unlimited control over their works to ensure that anyone can use,
    distribute, and modify them rather than prevent that. They introduced *public
    licenses*, which grant permissions to everyone rather than just people who signed
    or otherwise accepted the agreement, and wrote several reusable license agreements
    that anyone could apply to their software. That concept became known as **copyleft**
    – a reversal of copyright. Those licenses became known as open source licenses
    because they explicitly permit the distribution and modification of software source
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the *classic* licenses were born in that period: the MIT license, the BSD
    license, the GNU GPL, and the GNU **Lesser/Library General Public License** (**LGPL**).
    None of those licenses limit users’ rights to use software distributed under them.
    Conditions, if any, apply only to the distribution and modification of executables
    and source code.'
  prefs: []
  type: TYPE_NORMAL
- en: Permissive and copyleft licenses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When it comes to distribution, two schools of thought differ in their approach
    to distribution conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Proponents of permissive licenses believe that recipients of software must have
    absolute freedom to do anything with it, even to incorporate it into other software
    that isn’t open source or to create closed source derivatives. The MIT and BSD
    licenses are typical examples of permissive open source licenses.
  prefs: []
  type: TYPE_NORMAL
- en: Proponents of copyleft believe that it’s important to protect open source software
    from attempts to appropriate the work of its authors and create a closed source
    derivative. The GNU GPL is the purest example of this – if anyone distributes
    executables of programs under the GPL or programs that link with libraries under
    the GPL, they must also distribute the source code of that program under that
    license. This is the most radical approach and is known as *strong copyleft*.
  prefs: []
  type: TYPE_NORMAL
- en: Licenses that allow you to link libraries to programs under any other license
    but require library code modifications to be under the same license are known
    as *weak copyleft* licenses. The most widely used example is the GNU LGPL.
  prefs: []
  type: TYPE_NORMAL
- en: Patent grant, tivoization, and SaaS concerns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The GNU GPL was created as a response to the rise of proprietary software distributed
    without source code, which prevented end users from improving it and sharing their
    improvements. However, the software industry is evolving, and new trends are appearing
    that some see as threats to the existence or financial sustainability of open
    source software.
  prefs: []
  type: TYPE_NORMAL
- en: One such threat is *patent trolling* – the use of software patents (in jurisdictions
    where they exist) in bad faith. As a response to it, some newer licenses and new
    versions of old licenses, such as the Apache license and the GNU GPLv3, introduced
    a patent grant clause. Such a clause prevents contributors to the source code
    of software from making patent claims against its users. If they make such legal
    threats, their licenses are revoked.
  prefs: []
  type: TYPE_NORMAL
- en: A more controversial point of the GPLv3 is its attempts to protect users’ rights
    to run modified versions on their hardware. The practice of preventing hardware
    from running custom software through digital signatures and similar mechanisms
    is sometimes called *tivoization*, after a Linux-based digital video recorder
    named TiVo that was an early example of such lock-in. While some projects supported
    the idea to prevent it, for others, the GPLv3 clause was a reason not to switch
    from GPLv2 – the Linux kernel is among those projects that stayed at the old GPL
    version.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, all classic licenses were written in a time when all software was deployed
    on-premises, while in the modern world, a lot of software is delivered over a
    network and its executables aren’t accessible to end users – an approach known
    as **Software-as-a-Service** (**SaaS**). Since the GPL says that every recipient
    of a binary executable is entitled to receive its source code, it does not apply
    to SaaS since the user never receives any executables. This allows vendors to
    create modified versions of the software under the GPL without sharing their improvements
    with the community. Several licenses were developed in response to that trend,
    such as the Affero GPL.
  prefs: []
  type: TYPE_NORMAL
- en: In the last few years, big technology companies that provide hosted versions
    of open source software started to be seen as undermining project maintainers’
    ability to earn money from services since it’s very difficult to compete on price
    with effective monopolies. In response, some projects started switching to licenses
    that have restrictions on usage, which many argue are no longer open source licenses,
    even though the source code is still available. The future of such licenses is
    an open question.
  prefs: []
  type: TYPE_NORMAL
- en: Linux distributions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The fact that software under open source licenses is free to modify and distribute
    made it possible to assemble complete operating systems with kernels, system libraries,
    and utilities, as well as a selection of application software. Since open source
    licenses have no restrictions on usage, there is no need to make the user accept
    a license agreement for each component.
  prefs: []
  type: TYPE_NORMAL
- en: In the early days of Linux, setting up a usable Linux environment was a complicated
    and tedious endeavor. To make that process simpler, Linux enthusiasts started
    preparing the first *distributions* – sets of packages and scripts to automate
    their installation. Many of those early distributions, such as Softlanding Linux
    System and Yggdrasil, are now defunct, but some are still maintained – Slackware
    Linux is a prominent example.
  prefs: []
  type: TYPE_NORMAL
- en: Package managers and package repositories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Early distributions had a relatively humble goal, which was to provide users
    with a working barebones system that they could then install their application
    software on. However, later distributions set out to rethink the process of software
    installations. The number of open source software projects was growing, and CD
    drives and internet connections were also becoming more affordable, so it was
    feasible to include much more software in a distribution than ever before.
  prefs: []
  type: TYPE_NORMAL
- en: However, many applications depend on shared libraries or other applications.
    Traditionally, installation packages would either include all dependencies or
    leave that dependency management to the user. Since distribution is managed by
    a single group of maintainers, developers came up with the idea of sharing dependencies
    between all packages that need them and automatically installing all dependencies
    when a user requested the installation of a package. That gave rise to package
    managers and package repositories – collections of files in a special format,
    including compiled binaries and metadata such as the package version and its dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: The two most popular package formats and package managers that work with them
    were developed in the mid-90s and are still in use today. One is the DEB format,
    which is used with the dpkg utility, developed by Debian. The other is **Red Hat
    Package Manager** (**RPM**), which is used with the rpm utility and is developed
    by Red Hat.
  prefs: []
  type: TYPE_NORMAL
- en: 'The dpkg and rpm tools are responsible for installing package files on local
    machines. To install a package, the user needs to retrieve the package itself
    and all packages it depends on. To automate that process, distributions developed
    high-level package managers that can automatically download packages from online
    repositories, check for updates, search metadata, and more. Those high-level package
    managers usually rely on low-level ones to manage the installation. Debian’s **Advanced
    Packaging Tool** (**APT**) usually works with DEB packages, although it’s technically
    possible to use it with RPM. High-level package managers that primarily use the
    RPM format are more numerous: YUM and DNF, which are maintained by Red Hat, zypper
    from openSUSE, and urpmi, which is developed for the now-defunct Mandrake Linux
    and still used by its forks.'
  prefs: []
  type: TYPE_NORMAL
- en: Many of the currently existing distributions have either been actively maintained
    since the 90s or are forks that split off at different points in time. For example,
    Ubuntu Linux was forked from Debian GNU/Linux in the early 2000s, while Rocky
    Linux is a Red Hat Enterprise Linux derivative that started in 2021.
  prefs: []
  type: TYPE_NORMAL
- en: However, completely independent distributions also appear once in a while. Some
    of them are special-purpose systems that have requirements that classic general-purpose
    distributions cannot fulfill. For example, OpenWrt is a Linux-based system for
    consumer routers, originally developed for the Linksys WRT-54G device, hence the
    name. Such devices often have just a few megabytes of flash drive space, so operating
    systems for them have to be very compact, and they also have to use special filesystems
    such as JFFS that are designed for NAND flash drives.
  prefs: []
  type: TYPE_NORMAL
- en: Other independent distributions experiment with different package management
    and installation principles. For example, NixOS and GNU Guix use an approach that
    allows the user to revert system updates if anything goes wrong with new package
    versions.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will focus on Debian/Ubuntu and Red Hat-based systems because
    they have been the most popular distributions for a long time and remain popular.
  prefs: []
  type: TYPE_NORMAL
- en: Differences between distributions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The differences between distributions do not stop at package managers. Configuration
    file locations may differ, and default configurations for the same packages may
    also differ dramatically. For example, the configuration file directory for the
    Apache HTTP server is `/etc/httpd` on Red Hat Linux derivatives, but `/etc/apache2`
    on Debian derivatives.
  prefs: []
  type: TYPE_NORMAL
- en: Some distributions also use high-level configuration tools and you may take
    them into account.
  prefs: []
  type: TYPE_NORMAL
- en: The choice of software and its ease of installation may also differ. Debian,
    Fedora, and many other distributions leave the choice of a desktop environment
    to the user and make it easy to install multiple different desktop environments
    on the same system so that you can switch between GNOME3, KDE, MATE, or anything
    else for different login sessions. In contrast, the Ubuntu family of distributions
    includes multiple flavors for different desktop environments and expects that
    if you don’t like its default choice (the Unity desktop environment), you should
    use Kubuntu for KDE, for example, rather than the default Ubuntu. Finally, some
    distributions come with a custom desktop environment and don’t support anything
    else, such as elementary OS.
  prefs: []
  type: TYPE_NORMAL
- en: However, experienced Linux users can usually find their way around any distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Linux usage in the modern world
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The open source nature of the Linux kernel and its support for multiple hardware
    architectures made it a very popular choice for custom operating systems, while
    general-purpose Linux distributions also found wide use in every niche where proprietary
    Unix systems were used before.
  prefs: []
  type: TYPE_NORMAL
- en: The most popular Linux-based operating system in the world is Android. While
    most Android applications are written for a custom runtime and never use any functionality
    of the Linux kernel directly, it’s still a Linux distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Network devices are usually managed through a web GUI or a custom command-line
    interface, but they still often have Linux under the hood. This applies to consumer-grade
    Wi-Fi routers, as well as high-performance enterprise and data center routers
    and switches alike.
  prefs: []
  type: TYPE_NORMAL
- en: General-purpose Linux distributions are also everywhere. Thanks to built-in
    support for running virtual machines (through Xen or KVM hypervisors), Linux powers
    the largest cloud computing platforms, including Amazon EC2, Google Cloud Platform,
    and DigitalOcean. A lot of guest systems are also Linux machines running web servers,
    database systems, and many other applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Linux is also widely used in high-performance computing: all of the most powerful
    supercomputers in the world are now running Linux on their control and I/O nodes.'
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, the author of this chapter typed these words on a Linux
    desktop.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Linux distribution is a complete operating system that includes the Linux
    kernel and a set of libraries and programs developed by various people and companies.
    The Linux kernel and core system libraries are not developed by the same group.
    Instead, the Linux kernel provides a stable ABI that allows anyone to develop
    a standard library for a programming language to run on top of it.
  prefs: []
  type: TYPE_NORMAL
- en: Open source licenses come with different conditions, but they all allow anyone
    to use the software for any purpose and distribute its copies, and that’s what
    makes the existence of Linux distributions possible.
  prefs: []
  type: TYPE_NORMAL
- en: Different distributions use different approaches to package management and configuration,
    but experienced users can learn how to use a new distribution fairly quickly if
    they know the fundamentals. These days, Linux can be found everywhere, from mobile
    phones to the most powerful supercomputers.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about the various shells available on Linux
    systems, as well as basic commands.
  prefs: []
  type: TYPE_NORMAL
