["```\n$ cp /var/lib/selinux/targeted/active/modules/400/pgpool/hll pgpool.hll.bz2\n$ bunzip2 pgpool.hll.bz2\n$ sha512sum pgpool.pp pgpool.hll\nb81ba4ac...c0db pgpool.pp\nb81ba4ac...c0db pgpool.hll\n```", "```\n$ /usr/libexec/selinux/hll/pp pgpool.pp\n(type pgpool_t)\n(roletype object_r pgpool_t)\n(type pgpool_exec_t)\n...\n(filecon \"/var/run/pgpool(/.*)?\" any (system_u object_r pgpool_var_run_t ((s0) (s0))))\n```", "```\n(filecon\n  \"/var/run/pgpool(/.*)?\"\n  any\n  (\n    system_u\n    object_r\n    pgpool_var_run_t\n    (\n      (s0)\n      (s0)\n    )\n  )\n)\n```", "```\n/var/run/pgpool(/.*)?  gen_context(system_u:object_r:pgpool_var_run_t,s0)\n```", "```\n(roleattributeset cil_gen_require system_r)\n(typeattributeset cil_gen_require direct_run_init)\n```", "```\n; Port type\n(type pgpool_port_t)\n; Some attributes to match the current SELinux policy requirements\n(typeattributeset defined_port_type pgpool_port_t)\n(typeattributeset reserved_port_type pgpool_port_t)\n(typeattributeset port_type pgpool_port_t)\n; Our dependency mappings\n(roleattributeset cil_gen_require object_r)\n(typeattributeset cil_gen_require pgpool_port_t)\n; Make sure object_r is allowed for pgpool_port_t\n(roletype object_r pgpool_port_t)\n; The port mapping itself\n(portcon tcp 50123 (system_u object_r pgpool_port_t ((s0) (s0))))\n```", "```\n# seinfo --port 50123 | grep tcp\n portcon tcp 32768-60999 system_u:object_r:ephemeral_port_t:s0\n```", "```\n# semodule -i pgpool_port.cil\n```", "```\n# seinfo --port 50123 | grep tcp\n portcon tcp 50123 system_u:object_r:pgpool_port_t:s0\n portcon tcp 32768-60999 system_u:object_r:ephemeral_port_t:s0\n# semanage port -l | grep 50123\npgpool_port_t     tcp    50123\n```", "```\n(constrain (file (read))\n  (or\n    (and\n      (eq t1 staff_t)\n      (not (eq t2 passwd_file_t))\n    )\n    (not (eq t1 staff_t))\n  )\n)\n```", "```\n# seinfo --constrain | grep passwd_file_t\nconstrain file read (t1 == staff_t and not ( ( t2 == passwd_file_t ) ) or not ( t1 == staff_t ) ));\n```", "```\n$ cat /etc/passwd\ncat: /etc/passwd: Permission denied\n```", "```\n# sesearch -A -s staff_t -t passwd_file_t -c file -p read;\nallow nsswitch_domain passwd_file_t:file { ... read };\nallow staff_t passwd_file_t:file { ... read };\n```", "```\n; Dependencies\n; Pgpool support\n(block pgpool\n  ; Declarations\n  (type domain)\n  ; Local policy\n  ; Behavior\n  ; File contexts\n)\n```", "```\n(roleattributeset cil_gen_require system_r)\n(block pgpool\n  (type domain)\n  (roletype .system_r domain)\n)\n```", "```\n(typeattributeset cil_gen_require daemon)\n(block pgpool\n  (type domain)\n  (typeattributeset .daemon domain)\n)\n```", "```\n# seinfo -t postgresql_t -x\nTypes: 1\n  type postgresql_t, nsswitch_domain, can_change_object_identity, corenet_unlabeled_type, domain, kernel_system_state_reader, netlabel_peer_type, daemon, syslog_client_type, pcmcia_typeattr_1;\n```", "```\n(roleattributeset cil_gen_require object_r)\n(typeattributeset cil_gen_require file_type)\n(typeattributeset cil_gen_require direct_init_entry)\n(block pgpool\n  (type exec)\n  (roletype .object_r exec)\n  (typeattributeset .file_type exec)\n  (typeattributeset .direct_init_entry exec)\n  (allow domain exec (file (entrypoint ioctl read getattr lock map execute open)))\n  (typetransition .initrc_domain exec process domain)\n)\n```", "```\n(block pgpool\n  (filecon \"/usr/bin/pgpool\" file \n    (.system_u .object_r exec ((s0) (s0)))\n  )\n)\n```", "```\n# restorecon -v /usr/bin/pgpool\nRelabeled /usr/bin/pgpool from system_u:object_r:bin_t:s0 to system_u:object_r:pgpool.exec:s0\n```", "```\n# ausearch -i -m avc -ts recent\n(Output reformatted for readability)\navc: denied { map } for scontext=pgpool.domain \n                        tcontext=ld_so_t\n                        tclass=file\navc: denied { read write open } for scontext=pgpool.domain \n                                    tcontext=null_device_t\n                                    tclass=chr_file\n```", "```\n# sesearch -A -s postgresql_t -t ld_so_t -c file -p map\nallow domain file_type:file map; [ domain_can_mmap_files ]:True\nallow domain ld_so_t:file { execute getattr ioctl map open read };\n```", "```\n(typeattributeset cil_gen_require domain)\n(block pgpool\n  (type domain)\n  (typeattributeset .domain domain)\n)\n```", "```\n(typeattributeset cil_gen_require postgresql_t)\n(block pgpool\n  (allow domain .postgresql_t (process (signal)))\n)\n```", "```\n(allow domain exec \n  (file \n    (entrypoint ioctl read getattr lock map execute open)\n  )\n)\n```", "```\n(classpermission exec_file_perms)\n(classpermissionset exec_file_perms (file (ioctl read getattr lock map execute open)))\n(block pgpool\n  (allow domain exec (file (entrypoint)))\n  (allow domain exec exec_file_perms)\n)\n```", "```\n(block pgpool\n  (macro domtrans ((type SOURCEDOMAIN))\n    (allow SOURCEDOMAIN exec exec_file_perms)\n    (allow SOURCEDOMAIN domain (process (transition)))\n    (typetransition SOURCEDOMAIN exec process domain)\n  )\n)\n```", "```\n; Equivalent to \"pgpool_domtrans(postgresql_t)\" in refpolicy\n(typeattributeset cil_gen_require postgresql_t)\n(call pgpool.domtrans (postgresql_t))\n```"]