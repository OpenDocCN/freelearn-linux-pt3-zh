- en: '*Chapter 15*: Using systemd-networkd and systemd-resolved'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第15章*：使用systemd-networkd和systemd-resolved'
- en: The systemd ecosystem has its own networking components. Using these components
    is purely optional, and you might even find that you'll never need to use them.
    However, there are times when using systemd's networking components might help
    you do things that you can't do with the traditional Linux NetworkManager.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: systemd生态系统有其自己的网络组件。使用这些组件完全是可选的，甚至你可能会发现自己根本不需要使用它们。然而，有时候使用systemd的网络组件可以帮助你做一些传统Linux的NetworkManager做不到的事情。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将覆盖以下主题：
- en: Understanding `networkd` and `resolved`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解`networkd`和`resolved`
- en: Understanding Netplan on Ubuntu
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Ubuntu上的Netplan
- en: Understanding networkd and resolved on RHEL-type machines
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解RHEL类型机器上的networkd和resolved
- en: Using `networkctl` and `resolvectl`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`networkctl`和`resolvectl`
- en: Viewing the networkd and resolved unit files
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看networkd和resolved单元文件
- en: All right, let's jump in!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们开始吧！
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: We'll start with the Ubuntu Server virtual machine. (Note that you need to use
    Ubuntu *Server* because the desktop versions of Ubuntu still use the old NetworkManager
    by default.) Later in this chapter, we'll work with AlmaLinux.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从Ubuntu Server虚拟机开始。（请注意，你需要使用Ubuntu *Server*，因为Ubuntu的桌面版本仍然默认使用旧版的NetworkManager。）在本章的后面，我们将与AlmaLinux一起操作。
- en: So, let's start by providing a brief explanation of networkd and resolved.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们从简单介绍networkd和resolved开始吧。
- en: 'Check out the following link to see the Code in Action video: [https://bit.ly/31mmXXZ](https://bit.ly/31mmXXZ)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接，观看《代码实战》视频：[https://bit.ly/31mmXXZ](https://bit.ly/31mmXXZ)
- en: Understanding networkd and resolved
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解networkd和resolved
- en: The traditional NetworkManager has been around for quite some time, and it's
    still the most appropriate solution for most Linux desktops and laptops. The main
    reason that Red Hat developed it was to enable Linux-powered laptops to instantly
    switch back and forth between wired and wireless networks, or from one wireless
    domain to another. NetworkManager also still works well for just normal Linux
    servers. All RHEL-type distros and all desktop versions of Ubuntu still use NetworkManager
    by default.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的NetworkManager已经存在了相当长的时间，它仍然是大多数Linux桌面和笔记本的最佳解决方案。Red Hat开发它的主要原因是为了使得Linux笔记本能够在有线和无线网络之间，或者从一个无线域切换到另一个无线域时立即切换。NetworkManager对于普通Linux服务器来说也仍然运行良好。所有RHEL类型的发行版和所有Ubuntu桌面版本仍然默认使用NetworkManager。
- en: Note
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: I'm not always going to type `systemd-networkd` or `systemd-resolved`. Unless
    I'm typing actual commands, I'm just going to shorten the names to `networkd`
    and `resolved`, which is what most people do anyway.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我并不总是会输入`systemd-networkd`或`systemd-resolved`。除非我输入的是实际命令，否则我会将它们简写为`networkd`和`resolved`，这也是大多数人通常做的事。
- en: You already know that I have this creepy habit of reading your mind. So, I know
    that you're thinking, *But Donnie, if NetworkManager is so good, why do we need
    networkd and resolved?* Ah, I'm glad you asked. It's just that you can do certain
    things with `networkd` and `resolved` that you can't do quite as easily with NetworkManager.
    For example, you can use networkd to set up a bridged network for running containers.
    This allows you to directly assign IP addresses to your containers so that they
    can be directly accessed from the outside world. With resolved, you can set up
    split DNS resolution, obtain DNS server addresses from either a DHCP server or
    an IPv6 router advertisement, and use DNSSEC, MulticastDNS, and DNS-over-TLS.
    On the other hand, NetworkManager is still the best solution for normal desktop
    and laptop usage, due to its ability to instantly switch between networks whenever
    needed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经知道我有一个很怪异的习惯，就是读懂你的心思。所以，我知道你在想，*但是Donnie，如果NetworkManager这么好，为什么我们还需要networkd和resolved呢？*
    啊，我很高兴你问了这个问题。其实，使用`networkd`和`resolved`你可以做一些NetworkManager做不到的事。例如，你可以使用networkd为运行容器设置一个桥接网络，这样你可以直接给容器分配IP地址，让它们能够从外部直接访问。而使用resolved，你可以设置分割DNS解析，从DHCP服务器或IPv6路由广告中获取DNS服务器地址，并使用DNSSEC、MulticastDNS和DNS-over-TLS。另一方面，由于NetworkManager能在需要时即时切换网络，它依然是最适合普通桌面和笔记本使用的解决方案。
- en: On a system that's running a pure networkd environment, the network configuration
    would be stored in one or more `.network` files in the `/etc/systemd/network/`
    directory. However, as I've already said, the RHEL distros don't use networkd
    by default, so at this point, there are no `.network` files on the AlmaLinux machine
    to show you. Ubuntu Server does use networkd by default, but the Ubuntu engineers
    have done something that makes things a bit more interesting. Instead of configuring
    either networkd or NetworkManager in the normal way, they created Netplan, which
    we'll look at next.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行纯 networkd 环境的系统上，网络配置会存储在 `/etc/systemd/network/` 目录中的一个或多个 `.network` 文件中。然而，正如我之前所说，RHEL
    系统默认并不使用 networkd，所以目前在 AlmaLinux 机器上没有 `.network` 文件可供展示。Ubuntu Server 默认使用 networkd，但
    Ubuntu 工程师做了一些使事情变得更加有趣的工作。他们并没有按照常规方式配置 networkd 或 NetworkManager，而是创建了 Netplan，我们接下来会详细看一下。
- en: Understanding Netplan on Ubuntu
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Ubuntu 上的 Netplan
- en: Netplan is the new network configuration tool for Ubuntu. On a desktop machine,
    it doesn't do much except tell the system to use NetworkManager. On a server,
    you would create the networkd configuration in a `.yaml` file in the `/etc/netplan/`
    directory. Netplan will take this `.yaml` file and translate its contents into
    networkd format.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Netplan 是 Ubuntu 新的网络配置工具。在桌面机器上，它的作用不大，仅仅是告诉系统使用 NetworkManager。在服务器上，你会在 `/etc/netplan/`
    目录下创建一个 `.yaml` 文件来配置 networkd。Netplan 会将这个 `.yaml` 文件的内容转换成 networkd 格式。
- en: Viewing installer-generated Netplan configurations
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看安装程序生成的 Netplan 配置
- en: 'To begin, I''d like to show you the default configuration on an Ubuntu desktop
    machine. (Yeah, I know. I didn''t tell you that you''d need an Ubuntu desktop
    virtual machine, but that''s okay. This is the only time we''ll need it, so you
    can just look at what I''m showing you here.) In the `/etc/netplan/` directory,
    we have the default configuration file that was created when I created the virtual
    machine:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我想给你展示一下 Ubuntu 桌面机器上的默认配置。（是的，我知道，我没有告诉你需要一个 Ubuntu 桌面虚拟机，但没关系。这是唯一一次我们需要它，所以你只需要看我在这里展示的内容。）在
    `/etc/netplan/` 目录下，我们有一个在我创建虚拟机时生成的默认配置文件：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Inside the `01-network-manager-all.yaml` file, we have this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `01-network-manager-all.yaml` 文件中，我们有如下内容：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here''s the breakdown:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是详细说明：
- en: The `network:` line is flush with the left-hand side of the screen, which means
    that this is a new node. The next two lines are indented by one space, which means
    that they are part of this node definition.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`network:` 这一行与屏幕左边对齐，这意味着这是一个新节点。接下来的两行缩进了一个空格，这意味着它们是该节点定义的一部分。'
- en: 'What the `version: 2` line means is unclear. The `netplan` man page says that
    it''s a *network mapping*, but doesn''t explain it further, other than to indicate
    that it *might* have something to do with the version of YAML that Netplan uses.
    Or, it could be the syntax version of the `netplan` configuration. It''s hard
    to say for sure because there appears to be no documentation that clears up the
    mystery. At any rate, the man page does indicate that this `version: 2` line always
    has to be present in the definition for a `network:` node.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version: 2` 这一行的含义不明确。`netplan` 手册页表示它是一个 *网络映射*，但并没有进一步解释，只是指出它 *可能* 与 Netplan
    使用的 YAML 版本有关。或者，它可能是 `netplan` 配置的语法版本。由于似乎没有文档能解决这个谜团，所以很难确定。无论如何，手册页确实表明，这个
    `version: 2` 这一行在定义 `network:` 节点时始终必须存在。'
- en: The `renderer:` line tells the system to use NetworkManager, and all the other
    configuration is done within the normal NetworkManager files. Since this is a
    desktop machine, most people would just use the GUI management utilities to reconfigure
    the network. (Most GUI-type utilities are self-explanatory, so we won't say anything
    more about them.) If no `renderer:` line is present, then the system will use
    networkd instead of NetworkManager.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`renderer:` 这一行告诉系统使用 NetworkManager，所有其他的配置则是在普通的 NetworkManager 文件中完成的。由于这是台桌面机器，大多数人会使用
    GUI 管理工具来重新配置网络。（大多数 GUI 类型的工具都是显而易见的，所以我们不会再多说了。）如果没有 `renderer:` 这一行，系统则会使用
    networkd 而非 NetworkManager。'
- en: Note
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: When creating or editing `.yaml` files, remember that proper indentation is
    very important. If the indentation isn't correct, things won't work. Also, tab
    characters aren't allowed in `.yaml` files, so you'll need to use the spacebar
    to do the indentation.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建或编辑 `.yaml` 文件时，记住正确的缩进非常重要。如果缩进不正确，配置将无法正常工作。而且 `.yaml` 文件中不允许使用制表符，因此你需要使用空格键来进行缩进。
- en: 'In contrast, Ubuntu Server is configured to use networkd. So, the Netplan configuration
    that was created by the Ubuntu Server installer looks like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，Ubuntu Server 被配置为使用 `networkd`。因此，由 Ubuntu Server 安装程序创建的 Netplan 配置看起来是这样的：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `network:` node is always the top-level node. Under that, we see the `ethernets:`
    node, which defines the network interface. (In this case, the interface''s name
    is `enp0s3`.) The `dhcp4: true` line tells the system to obtain an IPv4 address
    from a *DHCP* server. (In this case, the DHCP server is built into my internet
    gateway router.)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`network:` 节点总是顶级节点。在它下面，我们可以看到 `ethernets:` 节点，它定义了网络接口。（在这个例子中，接口的名称是 `enp0s3`。）`dhcp4:
    true` 这一行告诉系统从 *DHCP* 服务器获取 IPv4 地址。（在这种情况下，DHCP 服务器内置在我的互联网网关路由器中。）'
- en: 'When the network starts, Netplan will take this `.yaml` file and translate
    it into networkd format. However, it doesn''t store a permanent copy of the `.network`
    file. Instead, it creates a transient `.network` file in the `/run/systemd/network/`
    directory, as we see here:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当网络启动时，Netplan 会将这个 `.yaml` 文件转换成 `networkd` 格式。然而，它并不会存储 `.network` 文件的永久副本。相反，它会在
    `/run/systemd/network/` 目录下创建一个临时的 `.network` 文件，就像我们在这里看到的：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Inside this file, we can see this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，我们可以看到如下内容：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: At long last, we get to see what an actual networkd configuration file looks
    like, and we see that's it's divided into the `[Match]`, `[Network]`, and `[DHCP]`
    sections. As I mentioned previously, though, this isn't a permanent file. It will
    disappear when you shut down or reboot the machine, and reappear when the machine
    boots back up. (On a non-Ubuntu machine that doesn't use Netplan, you would have
    a permanent copy of this file in the `/etc/systemd/network/` directory.) Most
    of this file is self-explanatory, but there are a couple of interesting things.
    Under the `[Network]` section, we see that IPv6 `.yaml` file. Under the `[DHCP]`
    section, we see that the value for the *Maximum Transmission Unit* for this network
    link will be obtained from the DHCP server. (Most of the time, that value will
    be set to `1500`.) `RouteMetric=100` defines the priority that will be given to
    this network link. (Of course, there's only one network link here, so this isn't
    doing anything for us.)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们终于可以看到一个实际的 `networkd` 配置文件是什么样子的，并且我们看到它被划分为 `[Match]`、`[Network]` 和 `[DHCP]`
    部分。如我之前所提到的，这个文件并不是永久性的。它会在你关机或重启时消失，并在机器重新启动时重新出现。（在不使用 Netplan 的非 Ubuntu 系统中，你会在
    `/etc/systemd/network/` 目录下找到这个文件的永久副本。）这个文件大部分内容是自解释的，但也有一些有趣的地方。在 `[Network]`
    部分，我们看到的是 IPv6 `.yaml` 文件。在 `[DHCP]` 部分，我们看到此网络链路的 *最大传输单元* 的值将从 DHCP 服务器获取。（大多数情况下，该值会被设置为
    `1500`。）`RouteMetric=100` 定义了将给予此网络链路的优先级。（当然，这里只有一个网络链路，所以这对我们来说并没有什么作用。）
- en: 'To show what a static IP address configuration looks like, I created a new
    Ubuntu Server machine and told the installer to create a static configuration.
    The Netplan `.yaml` file on that machine looks like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示静态 IP 地址配置的样子，我创建了一台新的 Ubuntu Server 机器，并告诉安装程序创建一个静态配置。那台机器上的 Netplan `.yaml`
    文件是这样的：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The generated transient `.network` file looks like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的临时 `.network` 文件看起来是这样的：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This time, all we have is just the `[Match]` and `[Network]` sections. Since
    we're not using DHCP on this machine, there's no `[DHCP]` section.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们只有 `[Match]` 和 `[Network]` 两个部分。由于我们在这台机器上没有使用 DHCP，所以没有 `[DHCP]` 部分。
- en: Now, keep in mind that you don't have to use the default Netplan configuration
    that was created when you installed the operating system. You can edit or replace
    the default `.yaml` configuration file as your needs dictate. Let's look at that
    next.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，请记住，你不必使用在安装操作系统时创建的默认 Netplan 配置。你可以根据需要编辑或替换默认的 `.yaml` 配置文件。接下来我们来看看这个。
- en: Creating Netplan configurations
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Netplan 配置
- en: 'Now, let''s say that we want to convert our first Ubuntu Server machine from
    DHCP addressing into static addressing. The first thing I''ll do is rename the
    current `.yaml` file to keep it as a backup in case I ever want to revert back:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们想将第一台 Ubuntu Server 机器从 DHCP 地址转换为静态地址配置。我做的第一件事是重命名当前的 `.yaml` 文件，保留它作为备份，以防将来想恢复：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, I''ll create the new `00-static-config.yaml` file, like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我将创建新的 `00-static-config.yaml` 文件，如下所示：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s make this new file look like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这个新文件调整为如下所示：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Okay, I''ll confess that I cheated a bit by copying and pasting this from the
    other virtual machine. I then changed the IP address and added the addresses for
    two other DNS servers. For the record, the DNS servers I''m using here are:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我得承认，我稍微作弊了一下，将这个内容从另一个虚拟机上复制并粘贴过来。然后我修改了 IP 地址，并添加了另外两个 DNS 服务器的地址。顺便提一下，我在这里使用的
    DNS 服务器地址是：
- en: '`192.168.0.1`: This is the address of my internet gateway router. This router
    has been configured to use the DNS servers that are run by my ISP, which is TDS
    Telecom. So, the `192.168.0.1` address isn''t the real DNS server.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`192.168.0.1`：这是我的互联网网关路由器的地址。该路由器已配置为使用由我的 ISP（TDS Telecom）运行的 DNS 服务器。因此，`192.168.0.1`
    地址并不是真正的 DNS 服务器。'
- en: '`8.8.8.8`: This is one of the addresses for Google''s DNS servers.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`8.8.8.8`：这是 Google 的一个 DNS 服务器地址。'
- en: '`208.67.222.222` and `208.67.220.220`: These addresses are for the DNS servers
    that are maintained by the OpenDNS organization.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`208.67.222.222` 和 `208.67.220.220`：这些地址是由 OpenDNS 组织维护的 DNS 服务器地址。'
- en: So, the more the merrier when it comes to `nameservers:` addresses. If one nameserver
    goes down, we'll just use another one, which eliminates one single-point-of network
    failure.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，关于 `nameservers:` 地址，越多越好。如果一个 DNS 服务器宕机，我们只需要使用另一个，从而消除了单一网络故障点。
- en: 'After saving the new file, you need to *apply* it, like so:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 保存新文件后，你需要 *应用* 它，像这样：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Be aware that if you do this from a remote terminal, you might not ever see
    the command prompt come back, which will make you think that things got stuck.
    It's not that, it's just that if you assign a different IP address from what the
    machine had to begin with, you'll break the SSH connection. (In fact, that's what
    just happened for me.) So, in real life, you might want to do this from the server's
    local terminal instead of remotely.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果你从远程终端执行此操作，可能永远看不到命令提示符返回，这会让你以为系统卡住了。其实并不是这样，而是因为如果你分配了与机器原始 IP 地址不同的地址，你会断开
    SSH 连接。（事实上，这就是我刚才遇到的情况。）所以，实际上，你可能想从服务器的本地终端而不是远程执行这个操作。
- en: 'When you use the apply operation, you''re generating the new networkd configuration
    and restarting the networkd service. The generated networkd configuration should
    now look something like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 apply 操作时，你是在生成新的 networkd 配置并重新启动 networkd 服务。生成的 networkd 配置现在应该类似于这样：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, let''s try something else. Let''s pretend that our virtual machine has
    multiple network interfaces, and we want to make doubly sure that this network
    configuration always gets applied to the correct interface. We''ll do that by
    assigning this configuration to the MAC address of the desired interface. First,
    we''ll use `ip a` to get the MAC address, like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试一些不同的操作。假设我们的虚拟机有多个网络接口，我们希望确保这个网络配置始终应用于正确的接口。我们可以通过将这个配置分配给目标接口的 MAC
    地址来实现这一点。首先，我们使用 `ip a` 来获取 MAC 地址，像这样：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As you likely already know, the hardware address of a network interface goes
    by many names. Most of us know it as the *MAC address*. It''s also known as the
    *physical address*, the *hardware address*, or, as we see here, the *link/ether*
    address. Anyway, let''s copy that address so that we can paste it into the `.yaml`
    file. Under the `enp0s3:` node of the configuration file that we just created,
    we''ll insert a new `match:` node with the `macaddress:` property of the desired
    network interface. The modified file should now look like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，网络接口的硬件地址有很多种称呼。我们大多数人都叫它 *MAC 地址*。它也被称为 *物理地址*、*硬件地址*，或者像我们这里看到的，*link/ether*
    地址。无论如何，我们复制那个地址，然后粘贴到 `.yaml` 文件中。在我们刚创建的配置文件的 `enp0s3:` 节点下，我们插入一个新的 `match:`
    节点，里面包含所需网络接口的 `macaddress:` 属性。修改后的文件现在应该是这样的：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This time, instead of using an `apply` operation, we''ll try a `try` operation,
    like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们不使用 `apply` 操作，而是尝试使用 `try` 操作，像这样：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `netplan try` command does the same thing as `netplan apply`, except that
    it gives you a chance to revert back to the old configuration if the new one doesn't
    work.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`netplan try` 命令与 `netplan apply` 做的事情相同，不同之处在于它让你有机会在新配置不起作用时，恢复到旧的配置。'
- en: Okay, I've shown you a few examples of how to set up networking with the combination
    of Netplan and networkd. There's a lot more to this, of course. If you want to
    see some more complex network setups, your best bet is to consult the `netplan`
    man page. Toward the bottom, you'll see some really good examples.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我已经向你展示了如何使用 Netplan 和 networkd 组合来设置网络的几个例子。当然，这里还有很多内容。如果你想查看一些更复杂的网络设置，最好的办法是查阅
    `netplan` 的手册页。在手册页的底部，你会看到一些非常好的示例。
- en: Okay, let's move on and learn how to use networkd in the Red Hat world.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们继续前进，学习如何在Red Hat环境中使用networkd。
- en: Understanding networkd and resolved on RHEL-type machines
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在RHEL类型机器上理解networkd和resolved
- en: 'We''ve already established that all RHEL-type machines, such as our AlmaLinux
    machine, use NetworkManager by default. Now, let''s say that we have an AlmaLinux
    server and that we need the added capabilities of networkd. The `systemd-networkd`
    package isn''t installed by default, and it isn''t in the normal Alma repositories.
    However, it is in the third-party EPEL repository, so we''ll install it by doing:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经确定，所有RHEL类型的机器（例如我们的AlmaLinux机器）默认使用NetworkManager。现在，假设我们有一台AlmaLinux服务器，并且需要networkd的附加功能。`systemd-networkd`包默认没有安装，并且不在普通的Alma软件仓库中。但是，它在第三方EPEL仓库中，因此我们可以通过以下命令来安装它：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, we can install the `systemd-networkd` package, which includes both networkd
    and resolved:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以安装`systemd-networkd`包，其中包括networkd和resolved：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, disable NetworkManager and enable networkd and resolved. Note that I''m
    not stopping NetworkManager or starting networkd and resolved just yet (I''m logged
    in remotely and don''t want to break my network connection. Besides, I still haven''t
    created a networkd configuration):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，禁用NetworkManager并启用networkd和resolved。请注意，我暂时不停止NetworkManager，也不启动networkd和resolved（因为我通过远程登录，不想断开网络连接。再者，我还没有创建networkd配置）：
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'When configuring networkd, we can''t use the `systemctl edit` command because
    it will create the `.network` files in the wrong location. Instead, we''ll just
    `cd` into the `/etc/systemd/network/` directory and use a normal text editor.
    Let''s name this file `99-networkconfig.network` and add the following content:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置networkd时，我们不能使用`systemctl edit`命令，因为它会将`.network`文件创建在错误的位置。相反，我们将进入`/etc/systemd/network/`目录，并使用普通的文本编辑器。我们将此文件命名为`99-networkconfig.network`，并添加以下内容：
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The networkd `.network` files are set up the same way as any other systemd unit
    file. Instead of having to worry about proper indentation as you would with the
    Netplan `.yaml` files, you just place all the parameters into the proper sections.
    In the `[Match]` section, we have the name of the network adapter. In the `[Network]`
    section, we're saying that we want to get an IP address from DHCP and accept IPv6
    router advertisements.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: networkd的`.network`文件与其他systemd单元文件的设置方式相同。你不需要像处理Netplan的`.yaml`文件那样担心正确的缩进，只需将所有参数放入正确的部分即可。在`[Match]`部分，我们指定了网络适配器的名称。在`[Network]`部分，我们表示希望通过DHCP获取IP地址，并接受IPv6路由器广告。
- en: 'The next step is to get rid of the static `/etc/resolv.conf` file and create
    a symbolic link to the one that gets generated by resolved. We''ll do that with
    these two commands:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是摆脱静态的`/etc/resolv.conf`文件，并创建一个符号链接指向resolved生成的文件。我们可以通过这两个命令来实现：
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you do an `ls -l /etc/resolv.conf` command at this point, it will appear
    that the symbolic link is broken. That's because we haven't started `systemd-resolved.service`
    yet. So, resolved still hasn't generated the dynamic `resolv.conf` file in the
    `/run/systemd/resolve/` directory.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此时你执行`ls -l /etc/resolv.conf`命令，你会发现符号链接已损坏。原因是我们还没有启动`systemd-resolved.service`。因此，resolved还没有在`/run/systemd/resolve/`目录中生成动态的`resolv.conf`文件。
- en: The final step is to reboot the machine and then test for proper network operation.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是重启机器，然后测试网络是否正常运行。
- en: 'Now, let''s say that we want to convert this machine into a static configuration,
    and we also want to add a few features. Let''s edit the `/etc/systemd/network/99-networkconfig.network`
    file and make it look like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们想将这台机器转换为静态配置，并且还想添加一些功能。让我们编辑`/etc/systemd/network/99-networkconfig.network`文件，并使其如下所示：
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the `[Match]` section, I've added the `MACAddress=` equal line to ensure
    that this configuration will always apply to this specific network adapter. As
    I did previously, I obtained the MAC address by doing an `ip a` command.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在`[Match]`部分，我添加了`MACAddress=`等号行，以确保此配置始终适用于此特定网络适配器。就像我之前做的那样，我通过执行`ip a`命令来获取MAC地址。
- en: In the `[Network]` section, I assigned the IP address with its netmask, the
    default gateway address, and four DNS server addresses. I'm also forcing this
    machine to use `DNSSEC`, as well as to use `DNSOverTLS` whenever it's available.
    Once you save this file, either reboot the machine or do a `sudo networkctl reload`
    command. Then, verify that the networking works. (Note that you don't need to
    do a `daemon-reload` when configuring networkd.)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在`[Network]`部分，我为其分配了IP地址及其子网掩码、默认网关地址和四个DNS服务器地址。我还强制这台机器使用`DNSSEC`，并且在可用时使用`DNSOverTLS`。保存此文件后，重启机器或执行`sudo
    networkctl reload`命令。然后，验证网络是否正常工作。（请注意，在配置networkd时无需执行`daemon-reload`。）
- en: Before we move on, I want to talk about those two strange DNS options that you
    can see here. `yes`, be sure to test things thoroughly to ensure that you can
    access everything that you need to access. So far, it's working well here. That
    surprises me because most websites still aren't set up with DNSSEC cryptographic
    keys. However, the public DNS root servers and the top-level domain servers are
    set up with DNSSEC keys, so we can at least verify the responses from them.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我想谈谈你在这里看到的两个奇怪的DNS选项。`yes`，一定要彻底测试，以确保你能访问到所有需要访问的内容。到目前为止，这里运行得很好。让我感到惊讶的是，因为大多数网站仍然没有设置DNSSEC加密密钥。然而，公共DNS根服务器和顶级域名服务器已配置了DNSSEC密钥，因此我们至少可以验证它们的响应。
- en: Note
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: To get a good idea of how widely DNSSEC is used on the public internet, go to
    [https://dnssec-analyzer.verisignlabs.com/](https://dnssec-analyzer.verisignlabs.com/)
    and enter a domain name of a website. This will show you a simple graphic of what
    uses DNSSEC and what doesn't.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地了解DNSSEC在公共互联网中的使用范围，访问[https://dnssec-analyzer.verisignlabs.com/](https://dnssec-analyzer.verisignlabs.com/)，并输入一个网站的域名。这将显示一个简单的图表，展示哪些使用了DNSSEC，哪些没有。
- en: The `opportunistic`, which allows this machine to use it if it's available.
    (Your IT team will need to get together with company management to determine if
    the advantages of **DNSOverTLS** outweigh the disadvantages.)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`opportunistic`，这允许机器在可用时使用它。（你的IT团队需要与公司管理层合作，确定**DNSOverTLS**的优点是否超过其缺点。）'
- en: 'When you use networkd without Netplan, there will be no dynamic `.network`
    file in the `/run/systemd/network/` directory, as you saw on the Ubuntu machine.
    However, resolved will create a dynamic `resolv.conf` file in the `/run/systemd/resolve/`
    directory. We don''t need to go there to see it because we created a symbolic
    link for it in the `/etc/` directory. Let''s see what''s in it:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在没有Netplan的情况下使用networkd时， `/run/systemd/network/`目录下不会有动态的`.network`文件，正如你在Ubuntu机器上看到的那样。然而，resolved会在`/run/systemd/resolve/`目录中创建一个动态的`resolv.conf`文件。我们不需要去查看它，因为我们已经在`/etc/`目录中为它创建了一个符号链接。让我们来看看里面有什么内容：
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Oh, dear. It appears that resolved only wants to see up to three DNS servers
    in its configuration. For now, that's okay. This will enable us to see something
    else that we need to see a bit later.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀，看来resolved只想在其配置中看到最多三个DNS服务器。目前，这样就可以了。这将帮助我们稍后看到一些其他需要关注的内容。
- en: Okay, I've shown you a couple of simple examples of what you can do with networkd
    and resolved. If you want to be truly amazed, open the `systemd.network` man page
    and look at all that's there. (And yes, that is *systemd.network*, without the
    *d* after *network*.) You can create some very complex setups, and you can view
    some examples toward the bottom of the man page. What I find especially interesting
    is that with networkd, you can do some things that you used to have to do with
    either `iptables` or `nftables`. It seems to me that doing these things with networkd
    would be somewhat simpler. You'll also see that by adding a `[DHCPSERVER]` section,
    networkd can function as a simple DHCP server. Adding a `[CAN]` section allows
    you to control the `[BRIDGE]` configuration allows you to assign normal IP addresses
    to containers so that the outside world can access them without having to use
    port forwarding. Well, the list of what you can do with networkd is quite long,
    and there's no way that I can cover it all here.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我已经给你展示了几个使用 networkd 和 resolved 的简单示例。如果你想真正震惊一下，可以打开 `systemd.network`
    的手册页，看看里面的内容。（是的，就是 *systemd.network*，而不是 *network* 后面加上 *d*。）你可以创建一些非常复杂的设置，并且可以在手册页的底部查看一些示例。我特别感兴趣的是，使用
    networkd 你可以做一些过去必须通过 `iptables` 或 `nftables` 完成的事情。在我看来，使用 networkd 做这些事会更简单一些。你还会看到，通过添加
    `[DHCPSERVER]` 部分，networkd 可以作为一个简单的 DHCP 服务器工作。添加 `[CAN]` 部分允许你控制 `[BRIDGE]`
    配置，从而为容器分配普通 IP 地址，这样外部世界就能访问它们，而不需要使用端口转发。嗯，关于使用 networkd 可以做的事情的列表相当长，我在这里无法涵盖所有内容。
- en: Finally, I'd like you to open the `netplan` man page on your Ubuntu Server machine.
    Even though Netplan is supposed to be a frontend for networkd, you'll see that
    what you can do with Netplan is only a subset of what you can do when working
    directly with networkd.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我想让你打开 Ubuntu 服务器机器上的 `netplan` 手册页。尽管 Netplan 应该是 networkd 的前端，但你会发现通过 Netplan
    你能做的事情只是直接使用 networkd 时能够做的一部分。
- en: Now that we've seen the basics of configuring networkd and resolved, let's look
    at a pair of network diagnostic utilities.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看过了配置 networkd 和 resolved 的基础知识，让我们来看一对网络诊断工具。
- en: Using networkctl and resolvectl
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 networkctl 和 resolvectl
- en: 'On both the Ubuntu and the Alma machines, you can try out two cool utilities
    that can help you see what''s going on with your network configuration. To see
    the list of network links and their statuses, use either `networkctl` or `networkctl
    list`. (The `list` option is the default, so you don''t have to type it.) What
    you will see on the Alma machine should look something like this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 和 Alma 机器上，你可以尝试两个很酷的工具，它们可以帮助你查看网络配置的状态。要查看网络链接及其状态，可以使用 `networkctl`
    或 `networkctl list`。(`list` 选项是默认的，因此你不必输入它。) 在 Alma 机器上，你应该能看到类似这样的内容：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: On this machine, we only have two links. The `OPERATIONAL` status of the loopback
    link shows as `carrier`, which means that this link is operational but that it's
    not routable. `SETUP` shows that the loopback is `unmanaged`, which means that
    we can't reconfigure it. The `enp0s3` link is our normal Ethernet link, which
    shows as `routable` and `configured`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这台机器上，我们只有两个链接。回环链接的 `OPERATIONAL` 状态显示为 `carrier`，这意味着该链接是可操作的，但不可路由。`SETUP`
    显示回环链接是 `unmanaged`，这意味着我们无法重新配置它。`enp0s3` 链接是我们的正常以太网链接，显示为 `routable` 且已 `configured`。
- en: 'On the Ubuntu Server machine, things are a bit more interesting. As shown here,
    there are a few more links:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 服务器机器上，情况有点更有趣。如图所示，这里有更多的链接：
- en: '[PRE23]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In addition to the two normal links, we have three links that were created when
    the `docker` package was installed. The `docker0` link is an `unmanaged` bridge
    that's currently in a `no-carrier` `OPERATIONAL` status. I don't have any containers
    running, so nothing is using it. The bottom two links are for Kubernetes, which
    is an orchestration manager for Docker containers. (The *calico* reference comes
    from *Project Calico*, the maintainer of this Kubernetes networking code.) The
    `cali659bb8bc7b1` link is listed as `degraded`, which means that it is online
    with a `carrier`, but it's only valid for link-local addresses.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 除了两个正常的链接外，还有三个是在安装 `docker` 软件包时创建的链接。`docker0` 链接是一个 `unmanaged` 桥接，目前处于 `no-carrier`
    `OPERATIONAL` 状态。我没有运行任何容器，所以没有人使用它。底部的两个链接是 Kubernetes 的链接，Kubernetes 是 Docker
    容器的编排管理器。（*calico* 是来自 *Project Calico* 的引用，Project Calico 是维护该 Kubernetes 网络代码的团队。）`cali659bb8bc7b1`
    链接被标记为 `degraded`，这意味着它处于在线状态，且有 `carrier`，但仅对链路本地地址有效。
- en: 'The `status` option shows you the links with their associated IP addresses,
    the default gateway address, and the addresses of the DNS servers that we want
    to use. Here''s what that looks like on the Ubuntu Server machine:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`status` 选项显示与其关联的 IP 地址、默认网关地址以及我们希望使用的 DNS 服务器的地址。以下是在 Ubuntu 服务器机器上显示的内容：'
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Of course, we've already seen how to reload a modified network configuration.
    On Ubuntu with Netplan, you'd do either `sudo netplan apply` or `sudo netplan
    try`. On the Alma machine, you'd do `sudo networkctl reload`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们已经了解了如何重新加载修改后的网络配置。在 Ubuntu 使用 Netplan 时，你可以执行 `sudo netplan apply` 或
    `sudo netplan try`。在 Alma 机器上，你可以执行 `sudo networkctl reload`。
- en: 'To look at DNS server information, we''d use `resolvectl`. The main thing to
    note here is that the output is divided into sections. First, there''s the `Global`
    section, which shows the settings from the `/etc/systemd/resolved.conf` file.
    On the Alma machine, these settings look like this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 DNS 服务器信息，我们可以使用 `resolvectl`。这里需要注意的主要内容是输出被分成了几个部分。首先是 `Global` 部分，显示的是
    `/etc/systemd/resolved.conf` 文件中的设置。在 Alma 机器上，这些设置如下所示：
- en: '[PRE25]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'After the `Global` section, each link has its own settings, which can override
    the `Global` settings. Here are the settings for the `enp0se` link on the Alma
    machine:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Global` 部分之后，每个链接都有自己的设置，这些设置可以覆盖 `Global` 设置。以下是 Alma 机器上 `enp0se` 链接的设置：
- en: '[PRE26]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Look carefully, and you'll see a few `Link` settings that override the `Global`
    settings. Previously, we saw that the `resolv.conf` file for this machine has
    a warning about how we've listed too many nameservers, and that resolved might
    ignore the fourth one. But we see all four nameservers here, so everything is
    good.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细查看，你会看到一些 `Link` 设置覆盖了 `Global` 设置。之前我们看到，当前机器的 `resolv.conf` 文件有一个警告，提示我们列出了太多的
    nameserver，resolved 可能会忽略第四个。但在这里我们看到所有四个 nameserver，因此一切正常。
- en: There are lots more options for both networkctl and resolvectl. I'll let you
    read about them in the `networkctl` and `resolvectl` man pages.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: networkctl 和 resolvectl 都有很多更多的选项。我会让你在 `networkctl` 和 `resolvectl` 的手册页中阅读它们。
- en: Next, let's take a brief look at the networkd and resolved unit files.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们简要了解一下 networkd 和 resolved 单元文件。
- en: Viewing the networkd and resolved unit files
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看 networkd 和 resolved 单元文件
- en: 'Before we go, I''d like you to take a quick look at the unit files for networkd
    and resolved. Here''s the list of them:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们离开之前，我希望你快速查看一下 networkd 和 resolved 的单元文件。以下是它们的列表：
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: I'm not going to take the time to trace through them for you because by now,
    you should be able to do that yourself. I mean, it's mainly a matter of looking
    everything up in the `systemd.directives` man page, as we've done quite a few
    times before. Once you've done that, we'll wrap this baby up.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会花时间为你一一追踪它们，因为现在你应该能够自己完成这项工作了。我的意思是，主要还是要查阅 `systemd.directives` 手册页，就像我们之前做过的那样。做完这些后，我们就可以结束这部分内容了。
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: As always, we've covered a lot of ground in this chapter. We started by comparing
    NetworkManager to systemd-networkd and systemd-resolved. Next, we looked at how
    to deal with the Netplan tool on Ubuntu. The RHEL-type distros use NetworkManager
    by default and don't use Netplan, so we looked at how to convert your Alma machine
    over to use networkd and resolved. After that, we worked with a couple of diagnostic
    utilities, and then wrapped things up by briefly looking at the networkd and resolved
    unit files.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，在本章中我们涵盖了很多内容。我们首先对比了 NetworkManager 与 systemd-networkd 和 systemd-resolved。接下来，我们看了如何处理
    Ubuntu 上的 Netplan 工具。RHEL 类型的发行版默认使用 NetworkManager，而不使用 Netplan，因此我们查看了如何将 Alma
    机器转换为使用 networkd 和 resolved。然后，我们使用了几个诊断工具，最后简要地查看了 networkd 和 resolved 的单元文件。
- en: Now, it's time to talk about *time*, which we'll do in the next chapter. I'll
    see you there!
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候谈谈 *时间* 了，我们将在下一章讨论。到时见！
- en: Questions
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Answer the following questions to test your knowledge of this chapter:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题，测试你对本章内容的理解：
- en: Which of the following statements is true?
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪项说法是正确的？
- en: A. NetworkManager is better for servers because it can instantly switch between
    networks.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: A. NetworkManager 更适合服务器，因为它可以快速在网络间切换。
- en: B. NetworkManager is better for servers because it's more versatile.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: B. NetworkManager 更适合服务器，因为它更具多功能性。
- en: C. NetworkManager is better for desktops and laptops because it can instantly
    switch between networks.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C. NetworkManager 更适合桌面和笔记本电脑，因为它可以快速在网络间切换。
- en: D. networkd is better for desktops and laptops because it can instantly switch
    between networks.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: D. networkd 更适合桌面和笔记本电脑，因为它可以快速在网络间切换。
- en: 'True or False: If there''s no `renderer:` line in a Netplan `.yaml` file, the
    system will default to using NetworkManager.'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 判断正误：如果Netplan `.yaml` 文件中没有`renderer:`行，系统将默认使用NetworkManager。
- en: On an Ubuntu Server machine, which of the following would you do after you've
    edited the network configuration file?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一台Ubuntu服务器机器上，编辑完网络配置文件后，以下哪项操作你会执行？
- en: A. `sudo netplan reload`
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: A. `sudo netplan reload`
- en: B. `sudo networkctl reload`
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: B. `sudo networkctl reload`
- en: C. `sudo netplan restart`
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C. `sudo netplan restart`
- en: D. `sudo networkctl restart`
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: D. `sudo networkctl restart`
- en: E. `sudo netplan apply`
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: E. `sudo netplan apply`
- en: What does it mean when a `networkctl` command shows a link as `degraded`?
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当`networkctl`命令显示一个链接为`degraded`时，这意味着什么？
- en: A. The link is offline.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: A. 链接处于离线状态。
- en: B. The link is online, but not operating at full speed.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: B. 链接在线，但未以全速运行。
- en: C. The link is online, but is only valid for link-local addresses.
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C. 链接在线，但仅对链路本地地址有效。
- en: D. The link is unreliable.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: D. 链接不可靠。
- en: Answers
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: C
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C
- en: 'False'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: E
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: E
- en: C
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C
- en: Further reading
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'Configuring the network with Netplan on Ubuntu:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu上使用Netplan配置网络：
- en: '[https://ubuntu.com/server/docs/network-configuration](https://ubuntu.com/server/docs/network-configuration)'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://ubuntu.com/server/docs/network-configuration](https://ubuntu.com/server/docs/network-configuration)'
- en: 'How to configure networking on Ubuntu 20.04 with Netplan:'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在Ubuntu 20.04上使用Netplan配置网络：
- en: '[https://www.serverlab.ca/tutorials/linux/administration-linux/how-to-configure-networking-in-ubuntu-20-04-with-netplan/](https://www.serverlab.ca/tutorials/linux/administration-linux/how-to-configure-networking-in-ubuntu-20-04-with-netplan/)'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.serverlab.ca/tutorials/linux/administration-linux/how-to-configure-networking-in-ubuntu-20-04-with-netplan/](https://www.serverlab.ca/tutorials/linux/administration-linux/how-to-configure-networking-in-ubuntu-20-04-with-netplan/)'
- en: 'YAML Tutorial:'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YAML教程：
- en: '[https://www.tutorialspoint.com/yaml/index.htm](https://www.tutorialspoint.com/yaml/index.htm)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.tutorialspoint.com/yaml/index.htm](https://www.tutorialspoint.com/yaml/index.htm)'
- en: 'YAML for Beginners:'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初学者的YAML教程：
- en: '[https://www.redhat.com/sysadmin/yaml-beginners](https://www.redhat.com/sysadmin/yaml-beginners)'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.redhat.com/sysadmin/yaml-beginners](https://www.redhat.com/sysadmin/yaml-beginners)'
- en: '`systemd-resolved`: Introduction to split DNS:'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`systemd-resolved`: Split DNS介绍：'
- en: '[https://fedoramagazine.org/systemd-resolved-introduction-to-split-dns/](https://fedoramagazine.org/systemd-resolved-introduction-to-split-dns/)'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://fedoramagazine.org/systemd-resolved-introduction-to-split-dns/](https://fedoramagazine.org/systemd-resolved-introduction-to-split-dns/)'
- en: 'Multicast DNS: Name resolution on a small scale:'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多播DNS：小规模的名称解析：
- en: '[https://www.ionos.com/digitalguide/server/know-how/multicast-dns/](https://www.ionos.com/digitalguide/server/know-how/multicast-dns/)'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.ionos.com/digitalguide/server/know-how/multicast-dns/](https://www.ionos.com/digitalguide/server/know-how/multicast-dns/)'
- en: 'DNS over TLS: An improved security concept:'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过TLS的DNS：一种改进的安全概念：
- en: '[https://www.ionos.com/digitalguide/server/security/dns-over-tls/](https://www.ionos.com/digitalguide/server/security/dns-over-tls/)'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.ionos.com/digitalguide/server/security/dns-over-tls/](https://www.ionos.com/digitalguide/server/security/dns-over-tls/)'
- en: 'Project Calico:'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Calico项目：
- en: '[https://www.tigera.io/project-calico/](https://www.tigera.io/project-calico/)'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.tigera.io/project-calico/](https://www.tigera.io/project-calico/)'
