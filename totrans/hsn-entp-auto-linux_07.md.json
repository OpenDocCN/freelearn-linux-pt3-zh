["```\n$ wget https://download.fedoraproject.org/pub/fedora/linux/releases/30/Cloud/x86_64/images/Fedora-Cloud-Base-30-1.2.x86_64.qcow2\n```", "```\n$ curl https://getfedora.org/static/fedora.gpg | gpg --import\n```", "```\n$ wget https://alt.fedoraproject.org/en/static/checksums/Fedora-Cloud-30-1.2-x86_64-CHECKSUM\n$ gpg --verify-files *-CHECKSUM\n```", "```\n$ sha256sum -c *-CHECKSUM\n```", "```\n$ sudo apt-get install libvirt-bin libvirt-doc libvirt-clients virtinst libguestfs-tools libosinfo-bin\n$ sudo gpasswd -a <your account> libvirt\n$ sudo gpasswd -a <your account> kvm\n$ logout\n```", "```\n$ wget http://vault.centos.org/7.6.1810/isos/x86_64/CentOS-7-x86_64-Minimal-1810.iso\n```", "```\n$ qemu-img create -f qcow2 centos76-soe.qcow2 20G\n```", "```\n$ qemu-img create -f vmdk centos76-soe.vmdk 20G\n```", "```\n$ virt-install --virt-type kvm \\\n--name centos-76-soe \\\n--ram 1024 \\\n--cdrom=CentOS-7-x86_64-Minimal-1810.iso \\\n--disk path=/home/james/centos76-soe.qcow2,size=20,format=qcow2 \\\n--network network=default \\\n--graphics vnc,listen=0.0.0.0 \\\n--noautoconsole \\\n--os-type=linux \\\n--os-variant=centos7.0 \\\n--wait=-1\n```", "```\n$ virt-viewer centos-76-soe\n```", "```\n$ virsh undefine centos-76-soe\n$ virt-install --virt-type kvm \\\n--name centos-76-soe \\\n--ram 1024 \\\n--disk path=/home/james/centos76-soe.qcow2,size=20,format=qcow2 \\\n--network network=default \\\n--graphics vnc,listen=0.0.0.0 \\\n--noautoconsole \\\n--os-type=linux \\\n--os-variant=centos7.0 \\\n--boot=hd\n```", "```\n$ yum -y install epel-release\n$ yum -y install cloud-init cloud-utils-growpart dracut-modules-growroot\n```", "```\n$ sudo virt-sysprep -a centos76-soe.qcow2\n$ sudo virt-sparsify --compress centos76-soe.qcow2 centos76-soe-final.qcow2\n```", "```\n[imagesetup]\n192.168.81.141\n\n[imagesetup:vars]\nansible_user=imagebuild\nansible_password=password\nansible_sudo_pass=password\n```", "```\n$ mkdir -p roles/filecopyexample/tasks\n$ mkdir -p roles/filecopyexample/files\n```", "```\n------------------------\nEnteprise Linux Template\nCreated with Ansible\n------------------------\n```", "```\npool ntp.example.com iburst maxsources 4\n\nkeyfile /etc/chrony/chrony.keys\n\ndriftfile /var/lib/chrony/chrony.drift\n\nlogdir /var/log/chrony\n\nmaxupdateskew 100.0\n\nrtcsync\n\nmakestep 1 3\n```", "```\n---\n- name: Copy new MOTD file, and backup any existing file if it             exists\n  copy:\n    src: files/motd\n    dest: /etc/motd\n    owner: root\n    group: root\n    mode: '0644'\n    backup: yes\n- name: Copy across new chrony configuration, and backup any existing file if it exists\n  copy:\n    src: files/chrony.conf\n    dest: /etc/chrony.conf\n    owner: root\n    group: root\n    mode: '0644'\n    backup: yes\n```", "```\n- name: Install docker-compose 1.18.0\n  get_url:\n    url: https://github.com/docker/compose/releases/download/1.18.0/docker-compose-Linux-x86_64\n    dest: /usr/local/bin/docker-compose\n    mode: 0755\n    owner: root\n    group: root\n```", "```\n---\n- name: Run example roles\n  hosts: all\n  become: yes\n\n  roles:\n    - filecopyexample\n```", "```\n---\n- name: Install the epel-release package\n  yum:\n    name: epel-release\n    state: present\n\n- name: Install cloud-init and docker\n  yum:\n    name: \"{{ item }}\"\n    state: present\n  loop:\n    - cloud-init\n    - docker\n```", "```\n---\n- name: Install cloud-init and docker\n  apt:\n    name: \"{{ item }}\"\n    state: present\n  loop:\n    - cloud-init\n    - docker.io\n```", "```\n---\n- name: Install cloud-init and docker\n  apt:\n    name: \"{{ item }}\"\n    state: present\n  loop:\n    - cloud-init\n    - docker.io\n  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'\n```", "```\n- name: Install the epel-release package\n  yum:\n    name: epel-release\n    state: present\n  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat enterprise Linux'\n\n- name: Install cloud-init and docker\n  yum:\n    name: \"{{ item }}\"\n    state: present\n  loop:\n    - cloud-init\n    - docker\n  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat enterprise Linux'\n```", "```\n---\n- name: Disable root logins over SSH\n  lineinfile:\n    dest: /etc/ssh/sshd_config\n    regexp: \"^PermitRootLogin\"\n    line: \"PermitRootLogin no\"\n    state: present\n```", "```\npool {{ ntpserver }} iburst maxsources 4\n\nkeyfile /etc/chrony/chrony.keys\n\ndriftfile /var/lib/chrony/chrony.drift\n\nlogdir /var/log/chrony\n\nmaxupdateskew 100.0\n\nrtcsync\n\nmakestep 1 3\n```", "```\n---\n- name: Deploy chrony configuration template\n  template:\n    src: templates/chrony.conf.j2\n    dest: /etc/chrony.conf\n    owner: root\n    group: root\n    mode: '0644'\n    backup: yes\n```", "```\n---\n- name: Run example roles\n  hosts: all\n  become: yes\n\n  vars:\n    ntpserver: time.example.com\n\n  roles:\n    - templatentp\n```", "```\n---\n- name: Ensure bzip2 is installed\n  yum:\n    name: bzip2\n    state: present\n```", "```\n---\n- name: Check for the existence of bzip2\n  stat:\n    path: /bin/bzip2\n  register: bzip2result\n  failed_when: bzip2result.stat.exists == false\n\n- name: Display a message if bzip2 exists\n  debug:\n    msg: bzip2 installed.\n```", "```\n---\n- name: Check root login setting in sshd_config\n  command: grep -e \"^PermitRootLogin no\" /etc/ssh/sshd_config\n  register: grepresult\n  failed_when: grepresult.rc != 0\n\n- name: Display a message if root login is disabled\n  debug:\n    msg: root login disabled for SSH\n```", "```\n~/hands-on-automation/chapter05/example09/roles> tree -d\n.\n├── checkbzip2\n│   └── tasks\n├── checksshdroot\n│   └── tasks\n├── filecopyexample\n│   ├── files\n│   └── tasks\n├── installbzip2\n│   └── tasks\n├── packageinstall\n│   └── tasks\n├── securesshd\n│   └── tasks\n└── templatentp\n    ├── tasks\n    └── templates\n```", "```\n---\n- name: Run example roles\n  hosts: all\n  become: yes\n\n  roles:\n    - filecopyexample\n    - packageinstall\n    - templatentp\n    - installbzip2\n    - securesshd\n    - checkbzip2\n    - checksshdroot\n```", "```\n---\n- name: Clean out yum cache\n  shell: yum clean all\n```", "```\n- name: Stop syslog\n  shell: service rsyslog stop\n\n- name: Force log rotation\n  shell: /sbin/logrotate -f /etc/logrotate.conf\n  ignore_errors: yes\n\n- name: Clean out logs\n  shell: /bin/rm -f /var/log/*-???????? /var/log/*.gz /var/log/*.[0-9] /var/log/**/*.gz /var/log/**/*.[0-9]\n\n- name: Truncate log files\n  shell: truncate -s 0 /var/log/*.log\n\n- name: Truncate more logs\n  shell: truncate -s 0 /var/log/**/*.log\n\n- name: Clear the audit log\n  shell: /bin/cat /dev/null > /var/log/audit/audit.log\n\n- name: Clear wtmp\n  shell: /bin/cat /dev/null > /var/log/wtmp\n```", "```\n- name: Remove the udev persistent device rules\n  shell: /bin/rm -f /etc/udev/rules.d/70*\n\n- name: Remove network related MAC addresses and UUID's\n  shell: /bin/sed -i '/^\\(HWADDR\\|UUID\\)=/d' /etc/sysconfig/network-scripts/ifcfg-*\n```", "```\n- name: Clear out /tmp\n  shell: /bin/rm -rf /tmp/* /var/tmp/*\n\n- name: Remove user history\n  shell: /bin/rm -f ~root/.bash_history /home/**/.bash_history\n\n- name: Remove any viminfo files\n  shell: rm -f /root/.viminfo /home/**/.viminfo\n\n- name: Remove .ssh directories\n  shell: rm -rf ~root/.ssh m -rf /home/**/.ssh\n```", "```\n- name: Remove SSH keys and shut down the VM (this kills SSH connection)\n  shell: /bin/rm -f /etc/ssh/*key* && shutdown -h now\n  ignore_errors: yes\n```"]