- en: '*Chapter 10*: Using Xen Security Modules with FLASK'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 10 章*：使用 Xen 安全模块与 FLASK'
- en: In [*Chapter 9*](B16276_09_Final_VK.xhtml#_idTextAnchor257), *Secure Virtualization*,
    we saw that libvirt is able to apply sVirt protection measures, based upon SELinux
    domains and category assignation, to several supported hypervisors. Xen, another
    popular open source hypervisor, is also supported by libvirt, but it is much more
    common to use Xen on its own, independent from libvirt.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 9 章*](B16276_09_Final_VK.xhtml#_idTextAnchor257) *安全虚拟化* 中，我们看到 libvirt
    能够基于 SELinux 域和类别分配，对几个支持的虚拟机监控器应用 sVirt 保护措施。Xen 作为另一种流行的开源虚拟机监控器，也受 libvirt
    支持，但更常见的做法是单独使用 Xen，而不依赖 libvirt。
- en: Xen itself has a security framework called **Xen Security Modules** (**XSM**),
    similar to **Linux Security Modules** (**LSM**), and an access control system
    called XSM-FLASK, which is their SELinux-based security framework. We'll see how
    Xen uses XSM, how to build Xen with XSM support, and finally, how we can apply
    policies to Xen domains.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Xen 本身有一个名为 **Xen 安全模块**（**XSM**）的安全框架，类似于 **Linux 安全模块**（**LSM**），以及一个名为 XSM-FLASK
    的访问控制系统，这是基于 SELinux 的安全框架。我们将了解 Xen 如何使用 XSM，如何构建支持 XSM 的 Xen，最后，如何将策略应用于 Xen
    域。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主要主题：
- en: Understanding Xen and XSM
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Xen 和 XSM
- en: Running XSM-enabled Xen
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行支持 XSM 的 Xen
- en: Applying custom XSM policies
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用自定义 XSM 策略
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/3kcCePl](https://bit.ly/3kcCePl)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，了解代码演示：[https://bit.ly/3kcCePl](https://bit.ly/3kcCePl)
- en: Understanding Xen and XSM
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Xen 和 XSM
- en: The Xen Project is a Linux Foundation project that maintains the Xen hypervisor.
    While the Xen Project manages multiple security and virtualized-related software
    titles, our focus is on the Xen hypervisor.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Xen 项目是一个由 Linux 基金会维护的项目，负责维护 Xen 虚拟机监控器（hypervisor）。虽然 Xen 项目管理多个与安全性和虚拟化相关的软件，但我们的重点是
    Xen 虚拟机监控器。
- en: Introducing the Xen hypervisor
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍 Xen 虚拟机监控器
- en: The Xen hypervisor runs directly on top of hardware and sits in between the
    various virtual machines and the hardware itself. Unlike QEMU or KVM, which run
    as a process within Linux to offer the virtualization functionality, Xen works
    more independently. As a result, administrators will not see the running instances
    as separate processes. Instead, they need to rely on Xen commands and APIs to
    get more information and to interact with the Xen hypervisor.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Xen 虚拟机监控器直接运行在硬件之上，位于各种虚拟机和硬件之间。与在 Linux 中作为进程运行以提供虚拟化功能的 QEMU 或 KVM 不同，Xen
    工作得更加独立。因此，管理员不会将运行的实例视为独立的进程。相反，他们需要依赖 Xen 命令和 API 来获取更多信息并与 Xen 虚拟机监控器交互。
- en: Important note
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: As with libvirt, the Xen hypervisor uses the term *domain* to point to its guests.
    As we use the term *domain* frequently in SELinux to mean the SELinux type of
    a running process, and thus also the SELinux type of a running guest, we will
    use *guest* wherever possible. However, there will be some terminology associated
    with Xen where we will have to keep the *domain* terminology in place.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与 libvirt 类似，Xen 虚拟机监控器使用 *domain* 这个术语来指代其虚拟机。由于我们在 SELinux 中经常使用 *domain*
    来表示正在运行的进程的 SELinux 类型，因此也表示正在运行的虚拟机的 SELinux 类型，我们将在可能的情况下使用 *guest*（来宾）一词。然而，也会有一些与
    Xen 相关的术语，我们需要保留 *domain* 术语。
- en: Xen always has at least one virtual guest defined, called `xend`). It is through
    dom0 that administrators will create and operate virtual guests running within
    Xen. These regular guests are unprivileged, and therefore abbreviated as **domU**—**unprivileged
    domains**.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Xen 总是至少定义了一个虚拟来宾，称为 `xend`。管理员通过 dom0 来创建和操作运行在 Xen 中的虚拟来宾。这些常规来宾是非特权的，因此简称为
    **domU**——**非特权域**。
- en: When administrators boot a Xen host, they boot into Xen's *dom0* instance, through
    which they then further interact with Xen. The Linux kernel has included support
    for running both within *dom0* as well as *domU* for quite some time now (with
    complete support, including backend drivers, since Linux kernel 3.0).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当管理员启动 Xen 主机时，他们会启动 Xen 的 *dom0* 实例，然后通过该实例与 Xen 进行进一步的交互。Linux 内核已经支持在 *dom0*
    和 *domU* 中运行很长时间了（自 Linux 内核 3.0 起，包括完整的支持，如后端驱动程序）。
- en: Let's use an existing Linux deployment to install Xen, and use this existing
    deployment as Xen's dom0 guest.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用现有的 Linux 部署来安装 Xen，并使用这个现有的部署作为 Xen 的 dom0 来宾。
- en: Installing Xen
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Xen
- en: While many Linux distributions offer Xen out of the box, it is very likely that
    these deployments do not support XSM (which we will enable in the *Running XSM-enabled
    Xen* section). So, rather than fiddling with prebuilt Xen environments first,
    we want to build it from source as released by the Xen Project immediately.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然许多Linux发行版开箱即用提供Xen支持，但这些发行版很可能不支持XSM（我们将在*启用XSM的Xen运行*部分启用它）。因此，在不急于调整预构建的Xen环境的情况下，我们希望直接从Xen项目发布的源代码开始构建它。
- en: Before we start using Xen, let alone its XSM support, we first need to make
    sure that we are running with a Xen-enabled Linux kernel.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用Xen之前，更不用说启用它的XSM支持，我们首先需要确保正在运行一个启用Xen的Linux内核。
- en: Running with a Xen-enabled Linux kernel
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用启用Xen的Linux内核
- en: The Linux kernel on the system must have support for running (at least) inside
    a dom0 guest. Without this support, not only will the dom0 guest not be able to
    interact with the Xen hypervisor, it will also not be able to boot the Xen hypervisor
    itself (the Xen-enabled kernel needs to bootstrap the Xen hypervisor before launching
    itself as the dom0 guest).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 系统上的Linux内核必须支持（至少）在dom0客户机中运行。没有此支持，dom0客户机不仅无法与Xen虚拟机监控程序交互，还无法启动Xen虚拟机监控程序本身（Xen启用内核需要在启动自己作为dom0客户机之前引导Xen虚拟机监控程序）。
- en: If you build your own Linux kernel, you need to configure the kernel with the
    settings as documented at [https://wiki.xenproject.org/wiki/Mainline_Linux_Kernel_Configs](https://wiki.xenproject.org/wiki/Mainline_Linux_Kernel_Configs).
    Some Linux distributions provide more in-depth build instructions (such as Gentoo
    at [https://wiki.gentoo.org/wiki/Xen](https://wiki.gentoo.org/wiki/Xen)). On CentOS,
    however, out-of-the-box Xen support is currently missing from the last release
    (as CentOS focuses more on libvirt and related technologies for its virtualization
    support).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你构建自己的Linux内核，必须根据[https://wiki.xenproject.org/wiki/Mainline_Linux_Kernel_Configs](https://wiki.xenproject.org/wiki/Mainline_Linux_Kernel_Configs)中的文档配置内核。一些Linux发行版提供了更深入的构建说明（如Gentoo的[https://wiki.gentoo.org/wiki/Xen](https://wiki.gentoo.org/wiki/Xen)）。然而，在CentOS中，当前的最后版本缺少开箱即用的Xen支持（因为CentOS更专注于libvirt及其相关技术的虚拟化支持）。
- en: 'Luckily, the community offers well-maintained Linux kernel builds that do include
    Xen support, through the `kernel-ml` package. Let''s install this kernel package:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，社区提供了维护良好的Linux内核版本，这些版本包括Xen支持，通过`kernel-ml`包提供。让我们安装这个内核包：
- en: 'Enable the **Enterprise Linux Repository** (**ELRepo**), which introduces several
    other, community-driven repositories:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用**企业Linux仓库**（**ELRepo**），该仓库引入了其他几个社区驱动的仓库：
- en: '[PRE0]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Install the `kernel-ml` package, which will install the most recent Linux kernel,
    with a configuration that includes Xen support. We simultaneously enable the `elrepo-kernel`
    repository, through which this package is made available:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`kernel-ml`包，它将安装最新的Linux内核，并带有包括Xen支持的配置。我们同时启用`elrepo-kernel`仓库，该仓库提供了这个包：
- en: '[PRE1]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Generally, the Linux boot loader will be reconfigured to include these new
    kernels. If not, or you want to make sure that the kernel is properly detected,
    the following command can be used to regenerate the **Grand Unified Bootloader**
    (**GRUB2**) configuration file:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常，Linux启动加载程序会重新配置以包含这些新内核。如果没有，或者你想确保内核被正确检测，可以使用以下命令重新生成**统一引导加载程序**（**GRUB2**）配置文件：
- en: '[PRE2]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Of course, if your system uses a different boot loader, different instructions
    apply. Consult your Linux distribution's documentation for more information on
    how to configure the boot loader.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当然，如果你的系统使用的是不同的启动加载程序，则需要遵循不同的说明。请参考你的Linux发行版文档，了解如何配置启动加载程序。
- en: 'Reboot the system using the newly installed kernel:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用新安装的内核重启系统：
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If all goes well, you will now be running with a Xen-compatible kernel. That,
    of course, does not mean that Xen is active, but merely that the kernel can support
    Xen if it is needed. Let's now move forward with building the Xen hypervisor and
    related tooling.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你现在应该在运行一个兼容Xen的内核。当然，这并不意味着Xen已启用，而只是表示如果需要，内核能够支持Xen。接下来，让我们继续构建Xen虚拟机监控程序及相关工具。
- en: Building Xen from source
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从源代码构建Xen
- en: The Xen hypervisor and tools have dependencies on various programs and libraries,
    and not all tools and libraries are properly detected as dependencies while building
    Xen from source.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Xen虚拟机监控程序和工具依赖于各种程序和库，而在从源代码构建Xen时，并非所有工具和库都能正确检测为依赖项。
- en: 'Let''s first install these dependencies:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先安装这些依赖项：
- en: 'Enable the `PowerTools` repository:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用`PowerTools`仓库：
- en: '[PRE4]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Install the dependencies supported by the CentOS repositories:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 CentOS 仓库支持的依赖项：
- en: '[PRE5]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Install the `dev86` package. At the time of writing, this package is not yet
    available for CentOS 8 so we deploy the version from CentOS 7 instead:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 `dev86` 包。写这篇文档时，CentOS 8 中还没有该包，因此我们使用 CentOS 7 中的版本：
- en: '[PRE6]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With the dependencies now installed, let''s download the latest Xen and build
    it:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已安装好依赖项，让我们下载最新的 Xen 并进行构建：
- en: Go to [https://xenproject.org/downloads/](https://xenproject.org/downloads/)
    and go to the last Xen Project release.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [https://xenproject.org/downloads/](https://xenproject.org/downloads/) 并转到最新的
    Xen Project 发行版。
- en: At the bottom of the page, download the latest archive.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面底部，下载最新的归档文件。
- en: 'Unpack the downloaded archive on the system:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在系统上解压下载的归档文件：
- en: '[PRE7]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Enter the directory the archive is unpacked in:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入解压后的归档文件所在的目录：
- en: '[PRE8]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Configure the sources for the local system. At this point, no specific arguments
    need to be passed on:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置本地系统的源。在此阶段，不需要传递特定的参数：
- en: '[PRE9]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Build the Xen hypervisor and associated tools:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建 Xen 虚拟机监控器及相关工具：
- en: '[PRE10]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Install the Xen hypervisor and tools on the system:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在系统上安装 Xen 虚拟机监控器和工具：
- en: '[PRE11]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Reconfigure the boot loader. This should automatically detect the Xen binaries
    and add the necessary boot loader entries:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新配置引导加载程序。此操作应自动检测 Xen 二进制文件并添加必要的引导加载项：
- en: '[PRE12]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Configure the system to support libraries installed in `/usr/local/lib`:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置系统以支持安装在 `/usr/local/lib` 中的库：
- en: '[PRE13]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create equivalence rules for the subdirectories in `/usr/local` so that SELinux
    file contexts are correctly applied:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `/usr/local` 中的子目录创建等价规则，以便正确应用 SELinux 文件上下文：
- en: '[PRE14]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Relabel the files inside `/usr/local`:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新标记 `/usr/local` 中的文件：
- en: '[PRE15]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The result of these steps is that Xen is ready to be booted on the system.
    The boot loader will not use the Xen-enabled kernel by default though, so during
    reboot, it is important to select the right entry. Its title will contain *with
    Xen hypervisor*:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些步骤的结果是 Xen 已经准备好在系统上启动。然而，默认情况下，引导加载程序不会使用启用 Xen 的内核，因此在重启时，选择正确的条目非常重要。该条目的标题将包含
    *with Xen hypervisor*：
- en: '[PRE16]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After rebooting into the Xen-enabled system, all we need to do is to start
    the Xen daemons:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在重启进入启用 Xen 的系统后，我们需要做的就是启动 Xen 守护进程：
- en: '[PRE17]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To verify that everything is working as expected, list the currently running
    guests:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了验证一切按预期工作，列出当前正在运行的来宾：
- en: '[PRE18]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finalize the installation by ensuring that the previously started daemons are
    started at boot:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过确保之前启动的守护进程在启动时重新启动，来完成安装：
- en: '[PRE19]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Before we move on to XSM, let's also create a guest inside Xen (as a domU) so
    that we can associate policies with it later, in the *Using XSM labels* section.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续进行 XSM 操作之前，让我们先在 Xen 中创建一个来宾（作为 domU），这样我们可以在稍后的 *使用 XSM 标签* 部分将策略与之关联。
- en: Creating an unprivileged guest
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个无特权的来宾
- en: When the Xen hypervisor is active, the operating system through which we interact
    with Xen is called dom0 and is the (only) privileged guest that Xen supports.
    The other guests are unprivileged, and it is the interaction between these guests
    and the actions taken by these guests that we want to isolate and protect further
    with XSM.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Xen 虚拟机监控器启用时，我们与 Xen 交互的操作系统被称为 dom0，它是 Xen 支持的（唯一的）特权来宾。其他来宾是无特权的，我们希望通过
    XSM 进一步隔离和保护这些来宾之间的交互和它们采取的操作。
- en: 'Let''s first create a simple, unprivileged guest to run alongside the privileged
    dom0 one. We use Alpine Linux in this example, but you can easily substitute this
    with other distributions or operating systems. This example will use the **ParaVirtualized**
    (**PV**) guest approach, but Xen also supports **Hardware Virtual Machine** (**HVM**)
    guests:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个简单的无特权来宾，与特权的 dom0 来宾一起运行。在这个例子中，我们使用 Alpine Linux，但您可以轻松地将其替换为其他发行版或操作系统。这个示例将使用
    **ParaVirtualized**（**PV**）来宾方式，但 Xen 也支持 **硬件虚拟化机**（**HVM**）来宾：
- en: Download the ISO for the Alpine Linux distribution, as this distribution is
    more optimized for low memory consumption and lower (virtual) disk size requirements.
    Of course, you are free to pick other distributions as well if your system can
    handle it. We pick the release optimized for virtual systems from [https://www.alpinelinux.org/downloads/](https://www.alpinelinux.org/downloads/)
    and store the ISO on the system in `/srv/data`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 Alpine Linux 发行版的 ISO 镜像，因为该发行版在低内存消耗和较低的（虚拟）磁盘大小要求方面更为优化。当然，如果您的系统能够处理，您也可以选择其他发行版。我们选择从
    [https://www.alpinelinux.org/downloads/](https://www.alpinelinux.org/downloads/)
    下载适用于虚拟系统的优化版，并将 ISO 存储在系统的 `/srv/data` 中。
- en: 'Mount the ISO on the system so that we can use its bootable kernel when creating
    an unprivileged guest in our next steps:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 ISO 挂载到系统上，以便在接下来的步骤中创建一个没有特权的客体时使用它的可引导内核：
- en: '[PRE20]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create an image file, which will be used as the boot disk for the virtual guest:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个映像文件，该文件将用作虚拟客体的启动磁盘：
- en: '[PRE21]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, create a configuration file for the virtual guest. We call the file `a1.cfg`
    and place it in `/etc/xen`:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为虚拟客体创建一个配置文件。我们将文件命名为 `a1.cfg` 并将其放置在 `/etc/xen` 目录下：
- en: '[PRE22]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Boot the virtual guest using the `xl create` command:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `xl create` 命令启动虚拟客体：
- en: '[PRE23]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: When the guest needs to reboot, use shutdown instead, and edit the configuration
    file. Remove the line referring to the ISO to prevent the guest from booting into
    the installation environment again.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当客体需要重启时，使用 shutdown 命令，并编辑配置文件。删除与 ISO 相关的行，防止客体再次启动到安装环境。
- en: 'To launch the guest again, use the `xl create` command again. If the guest
    installation finishes and you no longer need to have access to the console, drop
    the `-c` option:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要再次启动客体，请再次使用 `xl create` 命令。如果客体安装完成且不再需要访问控制台，请删除 `-c` 选项：
- en: '[PRE24]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We can confirm that the virtual guest is running with `xl list`:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过 `xl list` 确认虚拟客体是否正在运行：
- en: '[PRE25]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: With Xen, guests are launched with the `create` subcommand and shut down with
    the `shutdown` (graceful) or `destroy` subcommands.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Xen 中，客体通过 `create` 子命令启动，并通过 `shutdown`（优雅关机）或 `destroy` 子命令关闭。
- en: With these steps behind us, we now have a working Xen installation and a running
    guest. It's time to learn what Xen has to offer us from a security perspective.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，我们现在拥有一个正在运行的 Xen 安装和一个运行中的客体。接下来，是时候了解 Xen 在安全方面能为我们提供什么了。
- en: Understanding Xen Security Modules
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解 Xen 安全模块
- en: In [*Chapter 1*](B16276_01_Final_VK.xhtml#_idTextAnchor018), *Fundamental SELinux
    Concepts*, we learned that SELinux is implemented through a Linux subsystem called
    **Linux Security Modules** (**LSM**). Xen has borrowed this idea and has a similar
    approach to its own security measures.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第1章*](B16276_01_Final_VK.xhtml#_idTextAnchor018)，*基础的 SELinux 概念* 中，我们了解到
    SELinux 是通过一个名为 **Linux 安全模块**（**LSM**）的 Linux 子系统来实现的。Xen 借用了这一思想，并采用了类似的安全措施。
- en: With **Xen Security Modules** (**XSM**), Xen makes it possible to define and
    control actions between Xen guests, and between a Xen guest and the Xen hypervisor.
    Unlike the Linux kernel though, where several mandatory access control frameworks
    exist that can plug into the LSM subsystem, Xen currently only has a single module
    available for XSM, called **XSM-FLASK**.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 **Xen 安全模块**（**XSM**），Xen 使得可以定义和控制 Xen 客体之间、以及 Xen 客体和 Xen 虚拟机监控程序之间的行为。与
    Linux 内核不同，虽然 Linux 内核中有多个强制访问控制框架可以插入到 LSM 子系统中，但 Xen 当前仅提供一个可用的 XSM 模块，名为 **XSM-FLASK**。
- en: '**FLASK** stands for **Flux Advanced Security Kernel** and is the security
    architecture and approach that SELinux also uses for its own access control expressions.
    With XSM-FLASK, developers and administrators can do the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**FLASK** 代表 **Flux Advanced Security Kernel**，它是 SELinux 用于自己访问控制表达式的安全架构和方法。通过
    XSM-FLASK，开发人员和管理员可以执行以下操作：'
- en: Define permissions and fine-grained access controls between guests
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在客体之间定义权限和细粒度的访问控制
- en: Define limited privilege escalation for otherwise unprivileged guests
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为原本没有特权的客体定义有限的特权提升
- en: Control direct hardware and device access from guests on a policy level
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在策略级别上控制客体的直接硬件和设备访问
- en: Restrict and audit activities executed by privileged guests
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制并审计由特权客体执行的活动
- en: While XSM-FLASK uses SELinux-like naming conventions (and even SELinux build
    tools to build the policy), the XSM-FLASK-related settings are independent of
    SELinux. If dom0 is running with SELinux enabled (and there is no reason why it
    shouldn't), its policy has nothing to do with the XSM-FLASK policy.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 XSM-FLASK 使用类似 SELinux 的命名约定（甚至使用 SELinux 构建工具来构建策略），但与 XSM-FLASK 相关的设置是独立于
    SELinux 的。如果 dom0 启用了 SELinux（没有理由不启用），其策略与 XSM-FLASK 策略无关。
- en: The labels that XSM-FLASK uses will also not be visible for regular Linux commands
    running inside the guests (and thus also dom0). As the running guests are not
    shown as processes within the system, they do not have an SELinux label at all,
    only an XSM-FLASK label (if enabled). Hence, Xen cannot benefit from the sVirt
    approach, as documented in [*Chapter 9*](B16276_09_Final_VK.xhtml#_idTextAnchor257),
    *Secure Virtualization*.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: XSM-FLASK使用的标签也不会显示在来宾内部运行的常规Linux命令中（因此也包括dom0）。由于运行中的来宾不会作为系统中的进程显示，它们根本没有SELinux标签，只有XSM-FLASK标签（如果启用）。因此，Xen无法从sVirt方法中受益，如[*第9章*](B16276_09_Final_VK.xhtml#_idTextAnchor257)《安全虚拟化》中所述。
- en: Running XSM-enabled Xen
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行启用XSM的Xen
- en: Switching from a regular Xen deployment to an XSM-enabled Xen deployment is
    a matter of rebuilding Xen with XSM support and rebooting the system. Xen comes
    with an out-of-the-box policy that can be readily applied, which we will use as
    part of our XSM endeavor.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 从常规的Xen部署切换到启用XSM的Xen部署，只需重新构建Xen并启用XSM支持，然后重启系统。Xen自带一个现成的策略，可以直接应用，我们将在XSM过程中使用它。
- en: Rebuilding Xen with XSM support
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新构建带有XSM支持的Xen
- en: 'Let''s rebuild the Xen hypervisor and tools on the system with XSM support:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在系统上重新构建带有XSM支持的Xen虚拟机监控程序和工具：
- en: 'Clean up the previous build by running the `make clean` command inside the
    `build` directory (`xen-4.13.1` in our example):'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`build`目录（我们的示例是`xen-4.13.1`）内运行`make clean`命令清理之前的构建：
- en: '[PRE26]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Inside the `build` directory, go to the `xen` directory:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`build`目录内，进入`xen`目录：
- en: '[PRE27]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Launch the Xen configuration using `make menuconfig`:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`make menuconfig`启动Xen配置：
- en: '[PRE28]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Navigate to the XSM setting and enable the XSM-related parameters:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入XSM设置并启用与XSM相关的参数：
- en: '[PRE29]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Go back to the main build directory (`xen-4.13.1` in our example):'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回主构建目录（我们的示例中是`xen-4.13.1`）：
- en: '[PRE30]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Rebuild the Xen hypervisor and tools:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新构建Xen虚拟机监控程序和工具：
- en: '[PRE31]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Install the updated Xen build on the system:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更新的Xen构建安装到系统中：
- en: '[PRE32]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Reconfigure the boot loader with the new Xen build, ensuring that the XSM policy
    is also loaded with it:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用新的Xen构建重新配置引导加载程序，确保XSM策略也与之一起加载：
- en: '[PRE33]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Reboot the system:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启系统：
- en: '[PRE34]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Once rebooted, we can verify that the XSM policy is loaded and used by querying
    Xen for the labels associated with the running guests:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦重新启动，我们可以通过查询Xen以获取与运行中的来宾相关的标签，来验证XSM策略是否已加载并生效：
- en: '[PRE35]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: If the `xl list` command, given the `-Z` argument, lists the security labels,
    then Xen is running with an XSM policy active. Let's see where these labels are
    used.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`xl list`命令在给定`-Z`参数时列出安全标签，那么Xen正在以XSM策略运行。我们来看这些标签的使用位置。
- en: Using XSM labels
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用XSM标签
- en: 'When Xen boots with XSM support and has its default policy active, the following
    types can be used by guests:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当Xen以XSM支持启动并且默认策略已启用时，来宾可以使用以下类型：
- en: The `dom0_t` type is reserved for the privileged guest.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dom0_t` 类型保留给特权来宾使用。'
- en: The `domU_t` type is the default type to use for unprivileged guests.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`domU_t` 类型是用于非特权来宾的默认类型。'
- en: The `isolated_domU_t` type is the type to assign to unprivileged guests that
    should not be able to interact with other unprivileged guests, only with the privileged
    dom0 one.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isolated_domU_t` 类型用于分配给不应与其他非特权来宾交互的非特权来宾，仅能与特权dom0进行交互。'
- en: The `prot_domU_t` type is meant for guests that will be prevented from starting
    if the XSM policy boolean `prot_doms_locked` is set.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prot_domU_t` 类型用于那些如果XSM策略布尔值`prot_doms_locked`被设置时将被阻止启动的来宾。'
- en: The `nomigrate_t` type is applied to guests that are not allowed to be migrated
    from one Xen host to another. Internally, this prevents the dom0 guest from accessing
    the guest's memory once booted.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nomigrate_t` 类型应用于不允许从一个Xen主机迁移到另一个Xen主机的来宾。内部机制防止dom0来宾在启动后访问该来宾的内存。'
- en: 'There are a few other types also available inside the XSM policy that are not
    meant for regular guests themselves:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: XSM策略中还有一些其他类型不可用于常规来宾：
- en: The `dm_dom_t` type is assigned to the device model guest. This is a special,
    privileged guest that represents the hardware virtualized for an HVM-type guest,
    without jeopardizing dom0.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dm_dom_t` 类型分配给设备模型来宾。这是一个特殊的特权来宾，表示为HVM类型来宾虚拟化的硬件，而不危及dom0。'
- en: The `xenstore_t` type is assigned to the `xenstore` stub guest. This is a special,
    privileged guest that provides support for unprivileged guests to access their
    virtualized resources, without jeopardizing dom0.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xenstore_t` 类型分配给`xenstore`存根来宾。这是一个特殊的特权来宾，支持非特权来宾访问其虚拟化资源，而不危及dom0。'
- en: The `nic_dev_t` type is assigned to hardware devices that can be used in passthrough
    mode (meaning domU guests can directly interact with these hardware devices rather
    than going through the privileged guests).
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nic_dev_t`类型分配给可以在直通模式下使用的硬件设备（这意味着domU客户机可以直接与这些硬件设备交互，而无需通过特权客户机）。'
- en: These stub guests (**stub domains** or **stubdoms** as they are called in Xen)
    are a way for Xen to further increase its security posture, as privileged operations
    that cannot be prevented are more isolated from dom0\. If at any point a security
    vulnerability can be exploited in these privileged services, they do not necessarily
    affect dom0 and, with a proper XSM policy, can even be mitigated fully.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这些占位域（在Xen中被称为**占位域**或**stubdoms**）是Xen进一步增强安全性的方式，因为无法被阻止的特权操作与dom0的隔离性增强。如果在任何时候这些特权服务中的安全漏洞被利用，它们不一定会影响dom0，并且通过适当的XSM策略，甚至可以完全缓解。
- en: 'Assigning one of these labels to a guest is a matter of editing the guest''s
    configuration file inside `/etc/xen` and adding in the `seclabel` configuration
    parameter:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 将其中一个标签分配给客户机，只需编辑客户机在`/etc/xen`中的配置文件，并添加`seclabel`配置参数：
- en: '[PRE36]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Once configured and rebooted (using `xl create`), the new label will be visible
    when querying the running guests:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦配置并重启（使用`xl create`），新标签将在查询运行中的客户机时可见：
- en: '[PRE37]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Applying the right label to the guest is the most common use case (as it effectively
    handles the access control and protection measures we seek from the XSM implementation),
    but other operations are supported as well.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 为客户机应用正确的标签是最常见的用例（因为它有效地处理了我们期望从XSM实现中获得的访问控制和保护措施），但也支持其他操作。
- en: Manipulating XSM
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作XSM
- en: As with SELinux, several activities can be executed to further manipulate the
    XSM subsystem or the active policy.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 与SELinux一样，可以执行几项活动来进一步操作XSM子系统或当前活动策略。
- en: Defining the state, ranging from disabled to enforcing
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义状态，范围从禁用到强制执行
- en: 'When Xen boots, we can add a kernel parameter called `flask`, which can be
    set to one of the following values:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当Xen启动时，我们可以添加一个名为`flask`的内核参数，可以设置为以下值之一：
- en: With `flask=enforcing`, we ensure that XSM is active, enforcing the policy between
    its guests and resources, and that the enforcement is immediate (no delayed activation).
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当`flask=enforcing`时，确保XSM处于活动状态，强制执行其客体与资源之间的策略，并且强制执行是即时的（没有延迟激活）。
- en: With `flask=permissive`, XSM will load the policy, but XSM will not enforce
    the rules set in the policy. This is obviously meant for development purposes
    and behaves similarly to SELinux's permissive mode.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当`flask=permissive`时，XSM将加载策略，但不会强制执行策略中设定的规则。这显然是为了开发目的，行为类似于SELinux的宽容模式。
- en: With `flask=late`, XSM will not enforce any access controls until a policy is
    loaded, after which the policy is enforced. This allows administrators to boot
    with XSM active, but only to load and apply a policy when the administrator deems
    it ready.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当`flask=late`时，XSM在加载策略之前不会强制执行任何访问控制，加载策略后才会开始强制执行。这允许管理员启动时启用XSM，但只有在管理员认为准备好时，才加载并应用策略。
- en: With `flask=disabled`, XSM will not enforce any access controls nor load the
    policy.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当`flask=disabled`时，XSM不会强制执行任何访问控制，也不会加载策略。
- en: 'This parameter can be set either directly when booting (from the boot loader)
    or through the boot loader configuration on the system. For instance, with GRUB2,
    we can edit `/etc/default/grub` and add or modify the following parameter:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 该参数可以在启动时直接设置（从引导加载程序）或通过系统中的引导加载程序配置进行设置。例如，使用GRUB2时，我们可以编辑`/etc/default/grub`并添加或修改以下参数：
- en: '[PRE38]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Don''t forget to regenerate the GRUB2 configuration file:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了重新生成GRUB2配置文件：
- en: '[PRE39]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'As with SELinux, we can also manipulate the state of XSM through the command
    line. With `xl getenforce`, we can query the current state:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 与SELinux一样，我们也可以通过命令行操作XSM的状态。使用`xl getenforce`，我们可以查询当前状态：
- en: '[PRE40]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The `xl setenforce` command can be used to switch to another state:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`xl setenforce`命令切换到另一种状态：
- en: '[PRE41]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'These commands have nothing to do with the SELinux configuration within dom0:
    switching Xen from permissive mode to enforcing or vice versa is specific to Xen
    and has no impact on the SELinux settings inside dom0.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令与dom0中的SELinux配置无关：将Xen从宽容模式切换到强制模式或反之，特定于Xen，不会影响dom0中的SELinux设置。
- en: Querying XSM logs
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查询XSM日志
- en: 'Like SELinux, XSM also uses AVC logging to provide feedback to the administrator
    about the decisions it has taken. With `xl dmesg`, we can query this log information
    (alongside the other Xen output logging):'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 像SELinux一样，XSM也使用AVC日志记录来向管理员提供关于它所做决定的反馈。使用`xl dmesg`，我们可以查询这些日志信息（以及其他Xen输出日志）：
- en: '[PRE42]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Not all granted operations will be logged, but denied operations will always
    result in an AVC entry. The AVC entries themselves are fully formatted like SELinux
    AVC entries, allowing administrators to use SELinux tools such as `audit2allow`
    to generate XSM policies.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有已授权的操作都会被记录，但被拒绝的操作总会导致AVC条目的生成。这些AVC条目本身格式与SELinux的AVC条目完全相同，使得管理员可以使用SELinux工具，如`audit2allow`，来生成XSM策略。
- en: Using XSM booleans
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用XSM布尔值
- en: 'The default policy enabled by Xen has two booleans that can be toggled:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Xen启用的默认策略有两个布尔值可以切换：
- en: The `guest_writeconsole` boolean, which defaults to 1 (on), allows guests to
    access and write to the Xen console.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`guest_writeconsole`布尔值，默认为1（开启），允许来宾访问并写入Xen控制台。'
- en: The `prot_doms_locked` boolean, which defaults to 0 (off), will disallow `prot_domU_t`
    guests from launching if enabled.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prot_doms_locked`布尔值，默认为0（关闭），如果启用，将禁止`prot_domU_t`来宾启动。'
- en: 'While no subcommand is available for the `xl` command to query and set XSM
    booleans, two other commands are installed on the system to accomplish this –
    `flask-get-bool` and `flask-set-bool`:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`xl`命令没有可用的子命令来查询和设置XSM布尔值，但系统中安装了另外两个命令来完成此任务——`flask-get-bool`和`flask-set-bool`：
- en: 'With `flask-get-bool`, we can query the current state of a boolean, or list
    all booleans with their current value:'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`flask-get-bool`，我们可以查询布尔值的当前状态，或者列出所有布尔值及其当前值：
- en: '[PRE43]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The `flask-set-bool` command is used to toggle booleans:'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flask-set-bool`命令用于切换布尔值：'
- en: '[PRE44]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: This is very similar to SELinux's `getsebool` and `setsebool` commands.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这与SELinux的`getsebool`和`setsebool`命令非常相似。
- en: Querying the XSM policy
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查询XSM策略
- en: 'The XSM policy file (`xenpolicy-4.13.1`) is quite similar to an SELinux policy
    file. As a result, we can use the SELinux tools to query this file and learn more
    about the policy:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: XSM策略文件（`xenpolicy-4.13.1`）与SELinux策略文件非常相似。因此，我们可以使用SELinux工具查询此文件并了解更多关于策略的信息：
- en: 'With `seinfo`, we can query statistics about the policy, view which classes
    are supported, the constraints that are enabled within, and more. The only query
    that fails is listing the types supported within the policy:'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`seinfo`，我们可以查询有关策略的统计信息，查看支持的类、已启用的约束以及更多内容。唯一会失败的查询是列出策略中支持的类型：
- en: '[PRE45]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'With `sesearch`, we can query the XSM policy rules themselves, for instance,
    to list all allow rules:'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`sesearch`，我们可以查询XSM策略规则本身，例如列出所有允许规则：
- en: '[PRE46]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: When we discuss analyzing SELinux policies in [*Chapter 13*](B16276_13_Final_VK.xhtml#_idTextAnchor330),
    *Analyzing Policy Behavior*, we will get familiar with other tools that can also
    be used to analyze XSM policy files.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在[*第13章*](B16276_13_Final_VK.xhtml#_idTextAnchor330)中讨论分析SELinux策略时，*分析策略行为*，我们将熟悉其他可以用于分析XSM策略文件的工具。
- en: Labeling hardware resources
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标记硬件资源
- en: With the `flask-label-pci` command, administrators can label specified PCI devices
    with a given type. This approach allows administrators to mark certain devices
    for passthrough access by unprivileged guests.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`flask-label-pci`命令，管理员可以为指定的PCI设备打上给定的标签。这种方法允许管理员为无特权的来宾标记某些设备，以便进行直通访问。
- en: For instance, to label the PCI device with address `3:2:0` with the `nic_dev_t`
    type, use the following
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要将地址为`3:2:0`的PCI设备标记为`nic_dev_t`类型，可以使用以下命令：
- en: '[PRE47]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: As you might guess from the name, this type is initially defined for passthrough
    access to network devices but can be used for other PCI hardware as well.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如你从名称中可能猜到的，这种类型最初是为网络设备的直通访问而定义的，但也可以用于其他PCI硬件。
- en: Applying custom XSM policies
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用自定义XSM策略
- en: Xen also allows administrators to build and use their own, custom policy.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Xen还允许管理员构建和使用他们自己的自定义策略。
- en: The default policy for Xen is available inside the `tools/flask/policy` directory
    within the Xen build directory. For instance, the policy rules for the dom0 guest
    are available inside `modules/dom0.te`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Xen的默认策略位于Xen构建目录中的`tools/flask/policy`目录下。例如，dom0来宾的策略规则位于`modules/dom0.te`中。
- en: Important note
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Adjusting the Xen XSM policy is beyond the scope of this chapter. You will find
    instructions on how to create SELinux policies using the reference policy-style
    method in [*Chapter 15*](B16276_15_Final_VK.xhtml#_idTextAnchor373), *Using the
    Reference Policy*. The Xen XSM policy is based upon this style.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 调整 Xen XSM 策略超出了本章的范围。你可以在 [*第 15 章*](B16276_15_Final_VK.xhtml#_idTextAnchor373)
    *使用参考策略* 中找到有关如何使用参考策略风格方法创建 SELinux 策略的说明。Xen XSM 策略基于这种风格。
- en: 'Building a custom policy is a matter of updating these files (make a backup
    before you do) and then rebuilding the policy itself:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 构建自定义策略的方法是更新这些文件（更新前请先备份），然后重新构建策略本身：
- en: '[PRE48]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The result of the policy build is a new `xenpolicy-4.13.1` file. This file
    can be loaded directly using the `xl loadpolicy` command:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 策略构建的结果是一个新的 `xenpolicy-4.13.1` 文件。这个文件可以通过 `xl loadpolicy` 命令直接加载：
- en: '[PRE49]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'This command is similar to the `flask-loadpolicy` command:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令类似于 `flask-loadpolicy` 命令：
- en: '[PRE50]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: If, after testing, the policy is deemed ready to be used continuously, copy
    it over to `/boot` so that it is automatically picked up at the next boot as well.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在测试后，策略被认为已经准备好用于持续使用，可以将其复制到 `/boot` 目录，这样它将在下次启动时自动加载。
- en: Summary
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The Xen hypervisor is quite different from the QEMU and KVM hypervisors, which
    are more readily used in libvirt. SELinux support for Xen is also different than
    sVirt as the SELinux subsystem can only be active inside Xen guests, and SELinux
    does not see other guests.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: Xen 虚拟机监控器与 QEMU 和 KVM 虚拟机监控器有很大不同，后者在 libvirt 中更常用。Xen 的 SELinux 支持与 sVirt
    也不同，因为 SELinux 子系统只能在 Xen 客户操作系统内部启用，且 SELinux 无法看到其他客户操作系统。
- en: Xen has resolved that by implementing its own SELinux copy as XSM-FLASK and
    has integrated the appropriate support for the XSM-FLASK labels in its own tooling.
    In this chapter, we've learned how to apply our own types to Xen guests, toggle
    the XSM state, toggle XSM booleans, and even how we can build and load our own
    XSM-FLASK policy.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Xen 通过实现自己的 SELinux 副本作为 XSM-FLASK 解决了这个问题，并在其工具中集成了对 XSM-FLASK 标签的适当支持。在本章中，我们学习了如何为
    Xen 客户操作系统应用我们自己的类型，切换 XSM 状态，切换 XSM 布尔值，甚至如何构建并加载我们自己的 XSM-FLASK 策略。
- en: In the next chapter, we'll look at container workloads and how SELinux can help
    administrators to further harden and secure their container runtimes. We will
    see how sVirt can be applied to container runtimes, and how the tooling deals
    with SELinux support.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将讨论容器工作负载以及 SELinux 如何帮助管理员进一步强化和保护容器运行时。我们将看到如何将 sVirt 应用于容器运行时，以及工具如何处理
    SELinux 支持。
- en: Questions
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Why doesn't the regular SELinux subsystem govern Xen guests?
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么常规的 SELinux 子系统不管理 Xen 客户操作系统？
- en: How are labels assigned to Xen guests?
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Xen 客户操作系统如何分配标签？
- en: What are the common Xen commands that deal with XSM labels?
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理 XSM 标签的常见 Xen 命令有哪些？
- en: How can administrators load a custom policy for testing purposes?
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管理员如何加载自定义策略进行测试？
