["```\n$ git clone https://github.com/SELinuxProject/refpolicy.git\n```", "```\n$ ls policy/modules/*/ipsec.te\npolicy/modules/system/ipsec.te\n```", "```\npolicy_module(dhcp, 1.18.2)\n## Declarations\n# SELinux booleans\n# SELinux types\n## Local policy\n# Internal SELinux rules\n# Core interfaced SELinux rules\n# SELinux boolean controlled SELinux rules\n# Non-blocking interfaced SELinux rules\n```", "```\n    ## <desc>\n    ##   <p>Determine whether DHCP daemon can use LDAP\n    ##   backends</p>\n    ## </desc>\n    gen_tunable(dhcpd_use_ldap, false)\n    ```", "```\n    attribute_role dhcpd_roles;\n    ```", "```\n    type dhcpd_t;      # The SELinux domain for the daemon\n    type dhcpd_exec_t; # The executable label for the daemon\n    init_daemon_domain(dhcpd_t, dhcpd_exec_t)\n                       # Linking the executable to the domain\n    ```", "```\n    allow dhcpcd_t self:process { getcap signal_perms };\n    manage_files_pattern(dhcpd_t, dhcpd_tmp_t, dhcpd_tmp_t)\n    ```", "```\n    kernel_read_system_state(dhcpd_t)\n    ```", "```\n    tunable_policy(`dhcpd_use_ldap', `\n      # If boolean is true\n      sysnet_use_ldap(dhcpd_t)\n    ', `\n      # If boolean is false\n    ')\n    ```", "```\n    optional_policy(`\n      bind_read_dnssec_keys(dhcpd_t)\n    ')\n    ```", "```\n<path expression>    [<type/class>]    <context>\n```", "```\n/var/named/data(/.*)?  gen_context(system_u:object_r:named_cache_t,s0)\n```", "```\n########################################\n## <summary>\n##\tExecute a domain transition to run dhcpd.\n## </summary>\n## <param name=\"domain\">\n##\t<summary>\n##\tDomain allowed to transition.\n##\t</summary>\n## </param>\n#\ninterface(`dhcpd_domtrans',`\n  gen_require(`\n    type dhcpd_t, dhcpd_exec_t;\n  ')\n  corecmd_search_bin($1)\n  domtrans_pattern($1, dhcpd_exec_t, dhcpd_t)\n')\n```", "```\n    optional_policy(`\n      dhcpd_admin(webadm_r, webadm_t)\n    ')\n    ```", "```\n$ make -f /usr/share/selinux/devel/Makefile <name>.pp\n```", "```\nallow dhcpd_t dhcpd_exec_t:file { getattr open map read execute ioctl execute_no_trans };\n```", "```\ndefine(`exec_file_perms',`{ getattr open map read execute ioctl execute_no_trans }')\n```", "```\nallow dhcpd_t dhcpd_exec_t:file { exec_file_perms };\n```", "```\nallow $1 dhcpd_state_t:dir { rw_dir_perms };\nallow $1 dhcpd_state_t:file { manage_file_perms };\n```", "```\nmanage_files_pattern($1, dhcpd_state_t, dhcpd_state_t)\n```", "```\nallow openvpn_t openvpn_tmp_t:file manage_file_perms;\nfiles_tmp_filetrans(openvpn_t, openvpn_tmp_t, file)\n```", "```\nfiles_tmp_filetrans(openvpn_t, openvpn_tmp_t, { file dir })\n```", "```\nlogging_log_filetrans(openvpn_t, openvpn_status_t, file, \"openvpn-status.log\")\n```", "```\ncorenet_tcp_bind_generic_node(openvpn_t)\ncorenet_tcp_bind_openvpn_port(openvpn_t)\ncorenet_tcp_connect_http_port(openvpn_t)\n```", "```\ncorenet_tcp_sendrecv_generic_node(openvpn_t)\ncorenet_tcp_sendrecv_generic_if(openvpn_t)\n```", "```\ncorenet_all_recvfrom_netlabel(openvpn_t)\n```", "```\ncorenet_sendrecv_openvpn_server_packets(openvpn_t)\ncorenet_sendrecv_http_client_packets(openvpn_t)\n```", "```\ninterface(`openvpn_run',`\n  gen_require(`\n    attribute_role openvpn_roles;\n  ')\n  openvpn_domtrans($1)\n  roleattribute $2 openvpn_roles;\n')\n```", "```\n    xdg_manage_downloads(thunderbird_t)\n    ```", "```\n$ selint minecraft.te\nminecraft.te:  31: (C): Permissions in av rule not ordered\n                        (signull before execmem) (C-005)\nminecraft.te: 118: (C): Require block used in te file (use an \n                        interface call instead) (S-001)\n```", "```\nPOLICY_LOCATION=\"/usr/share/selinux/devel\"\n```", "```\n$ source ./localfuncs\n```", "```\n    $ sefindif \"manage.* cert_t\"\n    interface(`miscfiles_manage_all_certs',`\n      manage_files_pattern($1, cert_type, cert_type)\n      manage_lnk_files_pattern($1, cert_type, cert_type)\n    interface(`miscfiles_manage_generic_cert_dirs',`\n      manage_dirs_pattern($1, cert_t, cert_t)\n    interface(`miscfiles_manage_generic_cert_files',`\n      manage_files_pattern($1, cert_t, cert_t)\n      manage_lnk_files_pattern($1, cert_t, cert_t)\n    ```", "```\n    $ seshowif miscfiles_manage_all_certs\n    interface(`miscfiles_manage_all_certs',`\n      gen_require(`\n        attribute cert_type;\n      ')\n      allow $1 cert_type:dir list_dir_perms;\n      manage_files_pattern($1, cert_type, cert_type)\n      manage_lnk_files_pattern($1, cert_type, cert_type)\n    ')\n    ```", "```\n    $ seshowdef admin_pattern\n    define(`admin_pattern',`\n      manage_dirs_pattern($1,$2,$2)\n      manage_files_pattern($1,$2,$2)\n      manage_lnk_files_pattern($1,$2,$2)\n      manage_fifo_files_pattern($1,$2,$2)\n      manage_sock_files_pattern($1,$2,$2)\n      relabel_dirs_pattern($1,$2,$2)\n      relabel_files_pattern($1,$2,$2)\n      relabel_lnk_files_pattern($1,$2,$2)\n      relabel_fifo_files_pattern($1,$2,$2)\n      relabel_sock_files_pattern($1,$2,$2)\n    ')\n    ```"]