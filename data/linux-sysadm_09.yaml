- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Network Configuration and Debugging
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络配置与调试
- en: All modern systems are networked, so network configuration and troubleshooting
    are fundamental skills for every systems administrator. In this chapter, we will
    learn how the Linux network stack works and how to use the tools for working on
    it—both universal and distribution-specific.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现代系统都联网，因此网络配置和故障排除是每个系统管理员的基本技能。在本章中，我们将了解 Linux 网络栈是如何工作的，以及如何使用相关工具来处理网络——包括通用工具和特定发行版工具。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Linux network stack
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 网络栈
- en: Network interfaces and addresses in Linux
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 中的网络接口和地址
- en: Routes and neighbor tables
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由与邻居表
- en: NetworkManager
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NetworkManager
- en: Distribution-specific configuration methods
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发行版特定的配置方法
- en: Network troubleshooting
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络故障排除
- en: Linux network stack
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux 网络栈
- en: To end users who only interact with the network through applications and only
    configure network access through a graphical user interface, the network stack
    of their operating system looks like a single abstraction. However, for administrators,
    it is important to understand its structure because different parts of the stack
    are implemented by different software and administered by different tools.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于只通过应用程序与网络交互并通过图形用户界面配置网络访问的最终用户来说，他们操作系统的网络栈看起来像是一个单一的抽象。然而，对于管理员来说，理解其结构非常重要，因为栈的不同部分由不同的软件实现，并由不同的工具进行管理。
- en: This contrasts Linux distributions with many proprietary operating systems where
    most network functions are built-in and cannot be replaced individually. In a
    Linux distribution, performance-critical functionality is implemented by the Linux
    kernel itself, but many other functions, such as the dynamic configuration of
    IP addresses and routes through **Dynamic Host Configuration Protocol** (**DHCP**),
    are done by third-party tools, and there can be multiple competing implementations.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这与许多专有操作系统的 Linux 发行版形成对比，后者的绝大多数网络功能是内置的，且无法单独替换。在 Linux 发行版中，性能关键的功能由 Linux
    内核本身实现，但许多其他功能，如通过 **动态主机配置协议** (**DHCP**) 动态配置 IP 地址和路由，则由第三方工具完成，并且可能有多个竞争的实现。
- en: 'There are also different tools for managing the network functionality of the
    Linux kernel. The kernel allows userspace processes to retrieve and change its
    network configuration via *Netlink* protocol sockets and, technically, anyone
    can write a tool for managing IP addresses and routes. In practice, there are
    two suites of network administration tools: the legacy tools (`ifconfig`, `vconfig`,
    `route`, `brctl`, and so on), which are only kept for compatibility and do not
    support many new features of the kernel network stack, and the modern `iproute2`
    toolkit, which provides access to all kernel functionality via `ip` and `tc` utilities.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 也有不同的工具用于管理 Linux 内核的网络功能。内核允许用户空间进程通过 *Netlink* 协议套接字检索和更改其网络配置，从技术上讲，任何人都可以编写一个管理
    IP 地址和路由的工具。实际上，有两套网络管理工具：遗留工具（`ifconfig`、`vconfig`、`route`、`brctl` 等），这些工具仅保留以便兼容，并不支持内核网络栈的许多新特性；以及现代的
    `iproute2` 工具包，它通过 `ip` 和 `tc` 工具提供对所有内核功能的访问。
- en: Sometimes, more than one implementation of the same or similar functionality
    may exist in the kernel as well. One prominent example is the Netfilter firewall
    subsystem, which currently includes the older `iptables` framework and the newer
    `nftables` implementation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，内核中可能存在多个相同或相似功能的实现。一个显著的例子是 Netfilter 防火墙子系统，它目前包含较旧的 `iptables` 框架和较新的
    `nftables` 实现。
- en: Different implementations of userspace tools may also be either legacy implementations
    that are being gradually replaced with newer alternatives, or there can also be
    multiple alternative implementations with different design goals. For example,
    in 2022, the ISC DHCP server was declared unsupported by its maintainers who went
    on to work on the newer Kea project. However, Kea is not the only alternative
    to the ISC DHCP server. Some people may want to switch to other projects instead.
    For example, small networks can benefit from `dnsmasq`, which combines a DHCP
    server with DNS forwarding and other functions, which is especially useful for
    running it on small office routers with limited hardware resources.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 用户空间工具的不同实现可能是逐渐被更新替代方案所取代的遗留实现，或者也可能有多个具有不同设计目标的替代实现。例如，在2022年，ISC DHCP服务器被其维护者宣布不再支持，并且他们开始从事更新的Kea项目。然而，Kea并不是唯一的ISC
    DHCP服务器替代品。有人可能更愿意切换到其他项目。例如，小型网络可以从`dnsmasq`中受益，它将DHCP服务器与DNS转发和其他功能结合在一起，特别适合在硬件资源有限的小型办公室路由器上运行。
- en: 'Some of the most commonly used Linux network functionality backends and management
    tools are summarized in the following table:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常用的Linux网络功能后端和管理工具总结如下表：
- en: '| **Component** | **Implementation(s)** | **Tools** |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| **组件** | **实现** | **工具** |'
- en: '| --- | --- | --- |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Ethernet | Linux kernel | Network card settings tweaking: `ethtool`MAC address
    settings, VLANs: `iproute2` (modern); `vconfig` (legacy) |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 以太网 | Linux内核 | 网络卡设置调整：`ethtool` MAC地址设置，VLAN：`iproute2`（现代）；`vconfig`（遗留）
    |'
- en: '| Wi-Fi (framing and forwarding) | Linux kernel | `iw` |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| Wi-Fi（数据帧处理和转发） | Linux内核 | `iw` |'
- en: '| Wi-Fi (authentication and access point functionality) | `hostapd` |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| Wi-Fi（认证和接入点功能） | `hostapd` |'
- en: '| IPv4 and IPv6 routing | Linux kernel | `iproute2` (modern)`ifconfig`, `route`,
    etc. (legacy) |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| IPv4和IPv6路由 | Linux内核 | `iproute2`（现代）`ifconfig`，`route`等（遗留） |'
- en: '| Bridging (software switch) | Linux kernel | `iproute2` (modern);`brctl` (legacy)
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 桥接（软件交换机） | Linux内核 | `iproute2`（现代）；`brctl`（遗留） |'
- en: '| QoS and traffic shaping | Linux kernel | `tc` (part of `iproute2`) |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| QoS和流量整形 | Linux内核 | `tc`（`iproute2`的一部分） |'
- en: '| IPsec (packet encryption and checksum calculation) | Linux kernel | `iproute2`
    |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| IPsec（数据包加密和校验和计算） | Linux内核 | `iproute2` |'
- en: '| IPsec (IKE session management) | strongSwan, Openswan, Raccoon (legacy)...
    |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| IPsec（IKE会话管理） | strongSwan, Openswan, Raccoon（遗留）... |'
- en: '| DHCP client | ISC DHCP, `dhcpcd` |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| DHCP客户端 | ISC DHCP, `dhcpcd` |'
- en: '| DHCP server | ISC DHCP, ISC Kea, `dnsmasq` |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| DHCP服务器 | ISC DHCP, ISC Kea, `dnsmasq` |'
- en: Table 9.1 – Linux network stack components
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 表9.1 – Linux网络栈组件
- en: Finally, there are high-level management tools such as NetworkManager that tie
    multiple tools and components under a single user interface. Let’s learn about
    the kernel parts of the network stack and how to manage them with `iproute2` first.
    Then, we will see how to simplify and automate that with high-level tools in different
    distributions.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有一些高级管理工具，如NetworkManager，它将多个工具和组件集中在一个用户界面下。我们先来了解网络栈的内核部分以及如何使用`iproute2`进行管理。然后，我们将看到如何通过不同发行版的高级工具简化和自动化管理。
- en: Network interfaces and addresses in Linux
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux中的网络接口和地址
- en: '*Network interface* is a generic term for physical and virtual network links
    that can carry addresses. The correspondence between physical network cards and
    network interfaces as the kernel sees them is not one-to-one. A network card with
    four ports is a single PCI device, but every one of its ports is seen as a separate
    link by the kernel.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*网络接口*是指能够承载地址的物理和虚拟网络连接的通用术语。物理网卡和内核视角下的网络接口之间并不是一对一的关系。一块有四个端口的网卡是一个单独的PCI设备，但其每个端口都被内核视为一个独立的网络连接。'
- en: There are also virtual links. Some virtual links are tied to physical network
    ports, but other types are fully independent. For example, MACVLAN links allow
    administrators to send traffic from certain IP addresses using a different MAC
    address. Since an Ethernet interface by definition cannot have multiple MAC addresses,
    Linux solves that problem by creating virtual interfaces on top of a physical
    Ethernet port and assigning different MAC and IP addresses to it. Multiplexing
    Ethernet traffic using 802.1Q VLAN or 802.3ad QinQ (nested VLAN) is also done
    by creating a virtual link that is bound to a specific underlying link.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 也有虚拟链接。有些虚拟链接与物理网络端口相关联，但其他类型的虚拟链接则完全独立。例如，MACVLAN链接允许管理员使用不同的MAC地址从某些IP地址发送流量。由于以太网接口按定义不能拥有多个MAC地址，Linux通过在物理以太网端口上创建虚拟接口并为其分配不同的MAC和IP地址来解决这个问题。使用802.1Q
    VLAN或802.3ad QinQ（嵌套VLAN）复用以太网流量，也通过创建与特定底层链接绑定的虚拟链接来完成。
- en: 'However, interfaces for tunneling protocols such as IPIP and GRE are not tied
    to any underlying links. They require tunnel endpoint addresses, but those addresses
    can belong to any interface. There are also dummy interfaces that are used either
    for local process communication or for assigning addresses that must be reachable
    through any physical interface:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，诸如IPIP和GRE等隧道协议的接口并未绑定到任何底层链接。它们需要隧道端点地址，但这些地址可以属于任何接口。也有一些虚拟接口用于本地进程通信或分配必须通过任何物理接口可达的地址：
- en: '| **Link type** | **Relationship with** **physical devices** |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| **链接类型** | **与物理设备的关系** |'
- en: '| Ethernet, Wi-Fi | Associated with physical cards or ports on those cards
    |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 以太网，Wi-Fi | 与物理卡或卡上的端口相关 |'
- en: '| 802.1Q VLAN, 802.3ad QinQ, MACVLAN | Tied to a single physical link |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 802.1Q VLAN，802.3ad QinQ，MACVLAN | 绑定到单个物理链接 |'
- en: '| IPIP, GRE, dummy | Purely virtual |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| IPIP，GRE，虚拟 | 纯虚拟 |'
- en: Table 9.2 – Network link types and their relationships with physical devices
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 表9.2 – 网络链接类型及其与物理设备的关系
- en: In the following sections, we will learn how to retrieve information about network
    interfaces and configure them.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将学习如何检索网络接口的信息并配置它们。
- en: Discovering physical network devices
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发现物理网络设备
- en: Discovering all physical network devices in a Linux system can be a challenging
    task. They can be connected to different buses, including PCI and USB, and those
    buses use different device class identifiers.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 发现Linux系统中的所有物理网络设备可能是一个具有挑战性的任务。它们可以连接到不同的总线，包括PCI和USB，这些总线使用不同的设备类别标识符。
- en: 'Consider the following PCI device listing from a laptop:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请看以下来自笔记本的PCI设备列表：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Network devices are easy to identify visually here. There is a Wi-Fi controller
    (00:14.3) and an Ethernet card (03:00.0). Automatically filtering out everything
    but network devices from that listing is a bit trickier. We can use the fact that
    the PCI class for network devices is `02xx`, and there is a way to include device
    class numbers in the output with `lspci -nn`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，网络设备很容易通过视觉来识别。这里有一个Wi-Fi控制器（00:14.3）和一个以太网卡（03:00.0）。自动过滤掉所有非网络设备的内容稍微有点复杂。我们可以利用网络设备的PCI类别是`02xx`这一事实，并且可以通过`lspci
    -nn`命令在输出中包含设备类别号码：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Given that, to see all network devices you will need to look in both PCI and
    USB device listings, it is better to use high-level third-party tools such as
    `lshw`. With the `lshw -class` command you can view all available network devices
    in one step: both wired and wireless, connected to any buses. It also shows a
    lot of additional information about devices:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于此，要查看所有网络设备，您需要同时查看PCI和USB设备列表，因此使用高级第三方工具如`lshw`会更好。使用`lshw -class`命令，您可以一步查看所有可用的网络设备：无论是有线的还是无线的，连接到任何总线的设备。它还显示有关设备的许多附加信息：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, the `lshw` output also includes logical interface names rather
    than just bus addresses. Every network interface in Linux has a unique name, but
    their names are not completely determined by their hardware type and bus port.
    Let us examine the issue of interface naming in more detail.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`lshw`的输出还包括逻辑接口名称，而不仅仅是总线地址。Linux中的每个网络接口都有一个唯一的名称，但它们的名称并不完全由硬件类型和总线端口决定。让我们更详细地讨论接口命名的问题。
- en: Network interface names
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络接口名称
- en: The Linux kernel does not ascribe any special significance to network interface
    names. In some operating systems, interface names are completely determined by
    the kernel so that the first Ethernet device might always be named Ethernet0,
    and there is no way for an administrator to change that. In Linux, that is not
    the case, and names can be arbitrary. In fact, most distributions include a userspace
    helper for renaming network interfaces at boot time according to a default policy
    or custom configuration. Formerly, the most common helper was `udev`. Now, it
    is usually `systemd-udevd`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 内核并不赋予网络接口名称任何特殊的意义。在一些操作系统中，接口名称完全由内核决定，第一块以太网设备可能始终被命名为 Ethernet0，管理员也无法更改该名称。而在
    Linux 中情况并非如此，名称可以是任意的。事实上，大多数发行版包含了一个用户空间助手，在启动时根据默认策略或自定义配置重命名网络接口。以前，最常见的助手是
    `udev`，现在通常是 `systemd-udevd`。
- en: Historically, Ethernet devices were named `ethX` by default, as per the kernel’s
    built-in naming scheme. By the 2020s, most distributions switched to systemd for
    service management and adopted its **predictable network interface names** scheme
    as their default option.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上，Ethernet 设备默认被命名为`ethX`，这是内核内建的命名方案。到2020年代，大多数发行版切换到 systemd 进行服务管理，并采用其**可预测网络接口名称**方案作为默认选项。
- en: The issue with the original naming scheme is that the kernel’s device probing
    is not deterministic, so in some situations, especially when new network cards
    were added or old cards were removed, old names could be assigned to different
    physical devices (for example, a card formerly named `eth2` would become `eth1`).
    On the other hand, if a machine had a single network interface, it was guaranteed
    to be named `eth0`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 原始命名方案的问题在于内核的设备探测是非确定性的，因此在某些情况下，尤其是当新增网络卡或移除旧卡时，旧名称可能会被分配给不同的物理设备（例如，一块以前命名为
    `eth2` 的卡可能会变成 `eth1`）。另一方面，如果一台机器只有一个网络接口，它就保证会被命名为 `eth0`。
- en: The naming scheme of systemd is predictable in the sense that network interface
    names are guaranteed to stay the same across reboot and hardware changes. The
    price for that is that users and scriptwriters cannot make any assumptions about
    names. Even if a machine only has a single network card, it can be named, for
    example, `eno1` (Ethernet network, onboard, number 1) or `enp3s0` (Ethernet network,
    PCI, slot 3:0).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: systemd 的命名方案是可预测的，因为网络接口的名称在重启和硬件更换后保证保持不变。这样做的代价是用户和脚本编写者不能对名称做出任何假设。即使一台机器只有一个网络卡，它也可能被命名为，例如，`eno1`（以太网网络，板载，第1个）或
    `enp3s0`（以太网网络，PCI，插槽3:0）。
- en: 'It is possible to switch to the original naming scheme, either by adding `net.ifnames=0`
    to the kernel command line in the GRUB configuration, or by executing the following
    command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在 GRUB 配置中将 `net.ifnames=0` 添加到内核命令行，或者执行以下命令来切换回原始的命名方案：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It is also possible to permanently assign custom names to certain network interfaces
    by creating systemd link files.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以通过创建 systemd 链接文件，永久地为某些网络接口分配自定义名称。
- en: Using the ip command
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `ip` 命令
- en: In modern Linux distributions, all network discovery and setup are done either
    with utilities from the `iproute2` package or with high-level tools such as NetworkManager.
    We will omit the legacy tools such as `ifconfig` and focus on the `ip` utility
    from `iproute2`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代 Linux 发行版中，所有网络发现和设置都通过 `iproute2` 包中的工具或如 NetworkManager 等高级工具完成。我们将忽略遗留工具，如
    `ifconfig`，并专注于 `iproute2` 中的 `ip` 工具。
- en: Even though that utility is named `ip`, its functionality is much broader, and
    it provides an interface to all features of the kernel network stack that are
    related to network interfaces, addresses, and routing.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管该工具名为 `ip`，但它的功能要广泛得多，并为内核网络栈中与网络接口、地址和路由相关的所有特性提供接口。
- en: One thing to note is that in some distributions such as Fedora, that utility
    may be installed in `/sbin` or `/usr/sbin—d`irectories meant for administrative
    tools and often absent from the `$PATH` environment variable in shell configurations
    for unprivileged users. Thus, attempts to execute it from an unprivileged shell
    will result in a command not found error even though `iproute2` is installed.
    In that case, you may want to either add `/sbin` to your `$PATH` or always run
    `sudo ip` instead. Commands that change network settings indeed require administrative
    privileges but commands for viewing them usually do not.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，在某些发行版中，例如Fedora，那个工具可能安装在`/sbin`或`/usr/sbin`等用于管理工具的目录下，并且这些目录通常不在普通用户的`$PATH`环境变量中。因此，从普通用户的shell中尝试执行该命令时，会出现命令未找到的错误，即便`iproute2`已安装。在这种情况下，你可能需要将`/sbin`添加到你的`$PATH`中，或者总是使用`sudo
    ip`来执行命令。更改网络设置的命令确实需要管理员权限，但查看网络设置的命令通常不需要。
- en: Note that changes you make with `ip` only remain active until the next reboot
    and permanent changes must be made in distribution-specific configuration files
    instead or added to a script executed at boot time. If you are experimenting on
    a desktop or a laptop computer with NetworkManager running, then it may also override
    your changes on, for example, Wi-Fi reconnects.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你使用`ip`做出的更改仅在下一次重启之前保持有效，永久更改必须在特定发行版的配置文件中进行，或者添加到在启动时执行的脚本中。如果你在带有NetworkManager的桌面或笔记本电脑上进行实验，那么它可能会在Wi-Fi重新连接时覆盖你的更改。
- en: Discovering and inspecting logical links
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发现和检查逻辑链路
- en: 'To view all network interfaces, both physical and virtual, you can run `ip
    link list` or simply `ip link`. Note that `ip` allows abbreviating subcommands
    and options, so you can also write `ip li li`, but we will use full forms throughout
    the chapter for better readability:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看所有网络接口（包括物理接口和虚拟接口），可以运行`ip link list`或直接运行`ip link`。注意，`ip`允许缩写子命令和选项，因此你也可以写作`ip
    li li`，但为了更好的可读性，我们将在本章中使用完整形式：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this output from a VM, we see the loopback device (`lo`) and a single Ethernet
    card named according to the systemd predictable network interface naming convention
    (`ens192`).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这台虚拟机的输出中，我们看到回环设备（`lo`）和一张以系统d可预测网络接口命名规范命名的以太网卡（`ens192`）。
- en: 'The loopback device is present in every Linux system. Its role is to enable
    communication between local processes over IP and it carries addresses designated
    for that use: `127.0.0.1/8` for IPv4 and `::1/128` for IPv6.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 回环设备在每个Linux系统中都有。它的作用是使本地进程通过IP进行通信，并携带为此用途指定的地址：IPv4的`127.0.0.1/8`和IPv6的`::1/128`。
- en: The output for the `ens192` Ethernet device has more data. In the `link/ether`
    field, you can see its MAC address (`00:50:56:91:a2:b6`).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`ens192`以太网设备的输出包含更多数据。在`link/ether`字段中，你可以看到它的MAC地址（`00:50:56:91:a2:b6`）。'
- en: 'You may also notice seemingly redundant `<...UP,LOWER_UP>` and `state UP` bits
    in the output. They refer to different facts about that network interface: `UP`
    inside the angle brackets tells us that the link is not intentionally disabled
    by the administrator, while `state UP` refers to the actual state (whether it
    is connected to any other network device or not—with a physical cable or a virtual
    link, in the case of VMs).'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还会注意到输出中似乎冗余的`<...UP,LOWER_UP>`和`state UP`位。它们指的是该网络接口的不同状态：尖括号中的`UP`告诉我们该链路没有被管理员故意禁用，而`state
    UP`则表示实际状态（即它是否连接到其他网络设备—不论是物理电缆还是虚拟链路，虚拟机的情况也是如此）。
- en: 'To illustrate the distinction, let us examine a physical network on another
    machine that is not connected to anything. To view information about a single
    link, you can use `ip link` `show <name>`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一区别，让我们检查另一台机器上的物理网络，该网络没有连接到任何设备。要查看单个链路的信息，可以使用`ip link show <name>`：
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see, in the angle brackets its state is `UP`, but `state DOWN` tells
    us that it is not active, and `NO-CARRIER` explains why—it is disconnected (an
    Ethernet link can also be down despite being connected to something, for example,
    due to a settings mismatch with the other side).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，尖括号中的状态是`UP`，但`state DOWN`告诉我们它并未激活，而`NO-CARRIER`解释了原因——它已经断开连接（尽管连接了设备，网络链路也可能会处于断开状态，例如由于与另一端的设置不匹配）。
- en: 'Now let’s disable a link to see what an intentionally disabled link looks like.
    You can do it with `sudo ip link set dev <``name> down`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们禁用一个链路，看看故意禁用的链路是什么样的。你可以使用`sudo ip link set dev <name> down`来实现：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can see that when the link was taken down, the `UP` token disappeared from
    the part inside the angle brackets, and also its `state` field changed to `DOWN`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，当链路被断开时，`UP` 标记从尖括号内的部分消失了，`state` 字段也变成了 `DOWN`。
- en: Viewing and changing Ethernet link MAC addresses
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看和更改以太网链路 MAC 地址
- en: Every Ethernet and Wi-Fi card has a globally unique, burnt-in MAC address. To
    make sure that no two network devices will ever conflict if they are connected
    to the same network, manufacturers request blocks of MAC addresses and keep track
    of every MAC address they assign to their hardware products so that no address
    is ever assigned twice.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 每个以太网和 Wi-Fi 卡都有一个全球唯一的、预烧录的 MAC 地址。为了确保如果它们连接到同一网络时不会发生冲突，制造商请求一块块的 MAC 地址，并跟踪他们分配给硬件产品的每个
    MAC 地址，以确保每个地址不会被重复分配。
- en: 'However, end users may have reasons to assign their own MAC address to a network
    interface. For example, many internet service providers register the first MAC
    address of the subscriber’s router port and then require all future connection
    attempts to use the same address. If the user replaces or upgrades the router
    (or a network card in it), it is often easier to just assign the original port’s
    MAC address than ask the ISP support to update their records. You can change the
    MAC address (until the next reboot) with `ip link set dev <name>` `address <MAC>`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最终用户可能有自己的原因来为网络接口分配 MAC 地址。例如，许多互联网服务提供商会注册用户路由器端口的第一个 MAC 地址，然后要求所有后续连接尝试使用相同的地址。如果用户更换或升级了路由器（或其中的网卡），通常更容易直接分配原端口的
    MAC 地址，而不是请求 ISP 支持更新他们的记录。你可以使用 `ip link set dev <name>` `address <MAC>` 来更改
    MAC 地址（直到下次重启）。
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that `ip link show` displays the new, manually assigned MAC address now
    (`de:ad:be:ef:ca:fe`).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到 `ip link show` 现在显示的是新手动分配的 MAC 地址（`de:ad:be:ef:ca:fe`）。
- en: 'While `ip` only shows the MAC address that the kernel uses for sending Ethernet
    frames, it’s possible to retrieve the default, burnt-in address with `ethtool`
    instead. You can use either `ethtool --show-permaddr` or its short version, `ethtool
    -P`, as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `ip` 只显示内核用于发送以太网帧的 MAC 地址，但你可以通过 `ethtool` 来检索默认的、预烧录的地址。你可以使用 `ethtool
    --show-permaddr` 或其简短版本 `ethtool -P`，如下所示：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It is useful to know how to change MAC addresses even though it is not a very
    common task. Next, we will learn how to manage IP addresses.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 即使更改 MAC 地址不是很常见的任务，了解如何更改也很有用。接下来，我们将学习如何管理 IP 地址。
- en: Viewing and changing IP addresses
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看和更改 IP 地址
- en: 'Commands for viewing and changing IP addresses are similar to those for links
    and MAC addresses but use the `address` command family instead of `link`. To view
    addresses on all links, you can run `ip address show`, just `ip address`, or an
    abbreviated version—i`p a`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 查看和更改 IP 地址的命令与查看和更改链路和 MAC 地址的命令相似，但使用的是 `address` 命令族，而不是 `link`。要查看所有链路上的地址，你可以运行
    `ip address show`、仅运行 `ip address` 或简写版本 `ip a`：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can also limit the output to just one interface, such as in `ip address`
    `show lo`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将输出限制为仅显示一个接口，例如在 `ip address show lo` 中。
- en: The output of `ip address show` includes MAC addresses for Ethernet and other
    data link layer interfaces, so often, you can use that command instead of `ip
    link list`, unless you specifically want to exclude IP addresses from the output.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`ip address show` 的输出包括以太网和其他数据链路层接口的 MAC 地址，因此通常你可以使用该命令来代替 `ip link list`，除非你特别想从输出中排除
    IP 地址。'
- en: 'It is possible to show only IPv4 or only IPv6 addresses with the `-4` and `-6`
    options. We can demonstrate it on the loopback interface (`lo`) since it is guaranteed
    to have both IPv4 and IPv6 addresses (unless IPv6 is disabled explicitly):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `-4` 和 `-6` 选项仅显示 IPv4 或仅显示 IPv6 地址。我们可以在回环接口（`lo`）上演示，因为它保证有 IPv4 和 IPv6
    地址（除非明确禁用 IPv6）：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now let’s see how to add and remove addresses. For safe experiments that knowingly
    will not affect any network interface used for real traffic, we will create a
    dummy interface. Dummy interfaces are conceptually similar to the loopback interface.
    However, there can be multiple dummy interfaces in the same system, while there
    can only be one loopback (this situation is unique to Linux; many other operating
    systems allow multiple loopback interfaces instead of using a different interface
    type):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下如何添加和删除地址。为了进行安全实验，确保不会影响任何用于实际流量的网络接口，我们将创建一个虚拟接口。虚拟接口在概念上类似于回环接口。然而，同一系统中可以有多个虚拟接口，而回环接口只能有一个（这种情况是
    Linux 独有的；许多其他操作系统允许多个回环接口，而不是使用不同类型的接口）：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: All virtual interfaces are created in the `DOWN` state in Linux, so we brought
    the `dummy1` link up by hand. Now it is ready for experiments with addresses.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 所有虚拟接口在 Linux 中默认处于 `DOWN` 状态，因此我们手动将 `dummy1` 链接置为启用状态。现在，它已准备好进行地址实验。
- en: 'You can assign an address with `ip address add <addr> dev <name>`. Just as
    with MAC addresses, such changes will not survive reboots, so this method is only
    good for experiments and troubleshooting sessions. We will use addresses from
    `192.0.2.0/24—a` network reserved for examples and documentation:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `ip address add <addr> dev <name>` 命令为网络接口分配一个地址。就像 MAC 地址一样，这些更改不会在重启后保存，因此这种方法仅适用于实验和故障排除会话。我们将使用来自
    `192.0.2.0/24` 网络的地址——这是一个专门为示例和文档保留的网络：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Note that executing `ip address add` for the second time with a different address
    will not replace the old address but rather add a second address. There is no
    limit on the number of addresses on a single network interface in Linux; you can
    assign as many as you want. If you want to replace an address, you can add the
    new one first and then remove the old one. Let’s see how we can replace `192.0.2.1`
    with `192.0.2.2`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，第二次执行 `ip address add` 命令并使用不同的地址时，原地址不会被替换，而是会添加第二个地址。在 Linux 中，单个网络接口上的地址数量没有限制；你可以任意添加多个地址。如果你想替换地址，可以先添加新地址，然后删除旧地址。让我们来看一下如何将
    `192.0.2.1` 替换为 `192.0.2.2`：
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: It is also possible to remove all addresses from a network interface at once
    using `sudo ip address flush` `dev <name>`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用 `sudo ip address flush` `dev <name>` 命令一次性移除网络接口上的所有地址。
- en: Most of the time, you will configure IP addresses using high-level configuration
    tools that we will discuss later in this chapter. However, knowing those commands
    can help you verify address configuration and change network interface addresses
    temporarily during troubleshooting sessions or emergency configuration changes.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，你将使用更高级的配置工具来配置 IP 地址，我们将在本章稍后讨论这些工具。然而，了解这些命令可以帮助你在故障排除会话或紧急配置更改期间验证地址配置并临时更改网络接口地址。
- en: Routes and neighbor tables
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由和邻居表
- en: To be able to communicate with other hosts over the network, it’s not enough
    for a host to have an address. It also needs to know how to reach other hosts.
    Modern networks use layered protocol stacks, and the Linux kernel is responsible
    for the **Data Link** and **Network** layers according to the OSI model.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够与网络上的其他主机通信，主机仅有地址是不够的。它还需要知道如何到达其他主机。现代网络使用分层协议栈，Linux 内核负责根据 OSI 模型的 **数据链路**
    层和 **网络** 层。
- en: At the data link layer, there are protocols such as Ethernet and Wi-Fi — both
    are multiple-access broadcast networks and require dynamic discovery of neighbors
    in the same network segment. At the data link layer, hosts are identified by their
    MAC addresses. Direct communication at the data link layer is only possible within
    the same segment. If a network layer protocol packet encapsulated in a data link
    layer protocol frame must travel further, it’s extracted from the original frame
    and encapsulated in a new one.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据链路层，有以太网和 Wi-Fi 等协议——这两者都是多址广播网络，并要求在同一网络段内动态发现邻居。在数据链路层，主机通过其 MAC 地址来标识。数据链路层的直接通信仅在同一段内有效。如果网络层协议封装在数据链路层协议帧中并必须进一步传输，它将从原始帧中提取并重新封装到新帧中。
- en: Above the data link layer are network layer protocols—IPv4 and IPv6\. IP packets
    can be sent either to hosts in the same data link layer segment or routed to other
    networks and may traverse many data link layer connections on their way to their
    destination.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据链路层之上是网络层协议——IPv4 和 IPv6。IP 数据包可以发送到同一数据链路层段中的主机，也可以路由到其他网络，并且可能通过许多数据链路层连接到达目标。
- en: However, to be able to send an IP packet to another host or a router, the kernel
    needs to build an association between the IP addresses of those machines and their
    MAC addresses and maintain tables of such associations.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了能够将 IP 数据包发送到另一台主机或路由器，内核需要在这些机器的 IP 地址和 MAC 地址之间建立关联，并维护这些关联的表格。
- en: ARP and NDP neighbor tables
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ARP 和 NDP 邻居表
- en: IPv4 and IPv6 protocols share many similarities but use different neighbor discovery
    mechanisms. The older IPv4 protocol uses **Address Resolution Protocol** (**ARP**)
    to determine the MAC addresses of hosts with given IP addresses. ARP was not designed
    to be extensible, and the switch from 32-bit addresses in IPv4 to 128-bit ones
    in IPv6 required the development of a new protocol, so its designers used it as
    a chance to revise many old assumptions and add many new features. The result
    was named **Neighbor Discovery Protocol** (**NDP**), and, unlike ARP, it allows
    hosts to discover routers and dynamically configure public addresses, and detect
    address conflicts.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: IPv4 和 IPv6 协议有许多相似之处，但使用不同的邻居发现机制。较老的 IPv4 协议使用 **地址解析协议**（**ARP**）来确定具有给定
    IP 地址的主机的 MAC 地址。ARP 并非设计为可扩展的，而从 IPv4 的 32 位地址到 IPv6 的 128 位地址的转换要求开发新的协议，因此设计者利用这个机会修订了许多旧的假设并加入了许多新功能。最终的结果是
    **邻居发现协议**（**NDP**），与 ARP 不同，它允许主机发现路由器、动态配置公网地址，并检测地址冲突。
- en: 'To view the ARP table, you can run `ip -4 neighbor show`. You can also shorten
    it to just `ip -4 neighbor` or `ip -4 neigh`. Note that those commands also support
    the British spelling (`neighbour`) if you prefer to use it. If you omit `-4` or
    `-6`, that command will show entries for both protocols, so if your system does
    not have IPv6 configured or if you do not want to filter, you can omit `-4`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 ARP 表，可以运行 `ip -4 neighbor show`。你也可以简化为 `ip -4 neighbor` 或 `ip -4 neigh`。请注意，这些命令也支持英式拼写（`neighbour`），如果你更喜欢使用它的话。如果省略
    `-4` 或 `-6`，该命令将显示两个协议的条目，因此如果你的系统未配置 IPv6 或不想过滤，可以省略 `-4`：
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: It is also possible to filter the output and only show entries for one network
    interface, for example, with `ip -4 neighbor show` `dev eth1`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以过滤输出，仅显示一个网络接口的条目，例如，使用 `ip -4 neighbor show` `dev eth1`。
- en: The field for MAC addresses is called the **Link-Layer Address** (**lladdr**).
    The reason is that the neighbor table output format is the same for multiple data
    link layer protocols that may not name their link-layer addresses MAC addresses.
    There are also situations when the link-layer address for an IPv4 host is itself
    an IPv4 address—that’s how multipoint GRE tunnels work, for example (it’s part
    of the dynamic multipoint VPN technology that also includes IPsec for encryption
    and the next-hop resolution protocol for neighbor discovery).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 用于 MAC 地址的字段称为 **链路层地址**（**lladdr**）。原因是邻居表的输出格式对于多个数据链路层协议是相同的，而这些协议可能不会将其链路层地址称为
    MAC 地址。还有一些情况，当 IPv4 主机的链路层地址本身就是一个 IPv4 地址时——例如，多点 GRE 隧道就是这样工作（它是动态多点 VPN 技术的一部分，此外还包括用于加密的
    IPsec 和用于邻居发现的下一跳解析协议）。
- en: 'Every association is a triple rather than a pair: MAC address, IPv4 address,
    and network interface. Every Ethernet interface belongs to its own data link layer
    segment, so to send an IP packet correctly, the system needs to know which network
    card to send it from. MAC addresses must only be unique within the same segment.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 每个关联是一个三元组而不是二元组：MAC 地址、IPv4 地址和网络接口。每个以太网接口属于其自己的数据链路层段，因此为了正确地发送 IP 数据包，系统需要知道从哪个网卡发送它。MAC
    地址必须仅在同一段内唯一。
- en: 'It is possible to only show entries with a specific state. For example, this
    is how to view only address associations that have been recently discovered or
    confirmed:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 可以只显示具有特定状态的条目。例如，以下是如何仅查看最近发现或确认的地址关联：
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Stale entries eventually disappear from the table. When an IP address is moved
    to a machine with a different MAC address, the kernel will also eventually discover
    it. But if waiting is not an option and an IP address must be moved with minimum
    downtime, you can manually remove an entry and force a new ARP request as soon
    as traffic to that IP address is seen. The command to remove an entry for a specific
    IP address is as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 过时的条目最终会从表中消失。当 IP 地址被移到具有不同 MAC 地址的机器上时，内核也最终会发现它。但是如果等待不可行，并且必须在最短的停机时间内移动
    IP 地址，可以手动删除条目，并在看到该 IP 地址的流量后立即强制发出新的 ARP 请求。删除特定 IP 地址条目的命令如下：
- en: '[PRE16]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'There is also a command that removes all entries for a specific network interface:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个命令可以删除特定网络接口的所有条目：
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Even though the inner workings of the ARP and NDP protocols are different, all
    commands we discussed are applicable to both IPv4 and IPv6 neighbor tables.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 ARP 和 NDP 协议的内部工作原理不同，我们讨论的所有命令都适用于 IPv4 和 IPv6 的邻居表。
- en: Routes and route tables
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路由和路由表
- en: 'IPv4 and IPv6 are routed protocols, which allows them to be used in large-scale
    networks that consist of multiple independent segments, such as the internet.
    An Ethernet network segment is flat and there are no mechanisms for grouping MAC
    addresses: if there are a hundred hosts in a network, the switch must maintain
    a MAC address table of hundred entries, and every host needs to keep the MAC address
    of every host it needs to communicate with in its table. That approach puts obvious
    limits on the maximum network size. It also makes it impossible to have multiple
    paths to the same part of the network, since all hosts in a data link layer segment
    must communicate directly.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: IPv4和IPv6是路由协议，允许它们在由多个独立段组成的大型网络中使用，例如互联网。以太网网络段是平面的，并且没有分组MAC地址的机制：如果网络中有一百个主机，交换机必须维护一百条MAC地址表条目，每个主机也需要在其表中保持与所有需要通信的主机的MAC地址。该方法对最大网络规模有明显限制。它还使得不可能有多个路径通向网络的同一部分，因为数据链路层段中的所有主机必须直接通信。
- en: By contrast, IP networks are broken into subnets that are connected to one another
    through routers—devices dedicated to forwarding packets between hosts (many routers,
    both home/small office and enterprise/service provider ones, are running Linux
    these days). The most important property of the IP addressing architecture is
    that subnets can be aggregated. For example, if a network internally consists
    of two consecutive subnets that contain 32 hosts each, say `192.0.2.0/27` and
    `192.0.2.32/27`, then other networks can refer to it as a single network of 64
    hosts—1`92.0.2.0/26`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，IP网络被划分为子网，这些子网通过路由器连接——路由器是专门用于在主机之间转发数据包的设备（如今许多家庭/小型办公室和企业/服务提供商的路由器都运行Linux）。IP寻址架构最重要的特性是子网可以聚合。例如，如果一个网络内部由两个连续的子网组成，每个子网包含32个主机，比如`192.0.2.0/27`和`192.0.2.32/27`，那么其他网络可以将它视为一个包含64个主机的单一网络——`192.0.2.0/26`。
- en: 'Hosts and routers that are only connected to a single upstream router (typically,
    an internet service provider) thus can store only one route to the entire IP range:
    `0.0.0.0/0` for IPv4 or `::/0` for IPv6\. Such a route is called a **default route**.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 只连接到单一上游路由器（通常是互联网服务提供商）的主机和路由器，因而只能存储到整个IP范围的单一路由：对于IPv4是`0.0.0.0/0`，对于IPv6是`::/0`。这样的路由被称为**默认路由**。
- en: Viewing routing tables and routes
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查看路由表和路由
- en: 'Let us inspect the routing table of a Linux host connected to a single router.
    You can view IPv4 routes with `ip route show`, or just `ip route`. Unlike `ip
    neigh`, which displays both IPv4 and IPv6 neighbors unless filtered with `-4`
    or `-6`, this command defaults to IPv4 and requires the `-6` option to show IPv6
    routes instead:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查连接到单个路由器的Linux主机的路由表。你可以通过`ip route show`或者`ip route`来查看IPv4路由。与`ip neigh`不同，后者显示IPv4和IPv6邻居，除非使用`-4`或`-6`进行过滤，该命令默认显示IPv4路由，需要`-6`选项来查看IPv6路由：
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The first entry is the default route—a route to the `0.0.0.0/0` network that
    covers every possible IPv4 address. The gateway is `172.20.10.1`. The outgoing
    interface is `eth0`. From `proto dhcp`, we can infer that it was received from
    a DHCP server. The protocol field is purely informational, and the kernel does
    not use it for route selection. Internally, it is a number from `0` to `255`,
    and some of those numbers are mapped to protocol names in the `/etc/iproute2/rt_protos`
    configuration file.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条条目是默认路由——指向`0.0.0.0/0`网络的路由，覆盖所有可能的IPv4地址。网关是`172.20.10.1`。出接口是`eth0`。从`proto
    dhcp`，我们可以推断它是从DHCP服务器接收到的。协议字段仅用于信息展示，内核不会使用它进行路由选择。内部，它是一个从`0`到`255`的数字，其中一些数字被映射到`/etc/iproute2/rt_protos`配置文件中的协议名称。
- en: 'The second route to the `172.20.10.0/28` network is a connected route that
    simply tells the system that it can communicate with hosts from a certain subnet
    directly by sending packets from a certain network interface. Notice that it lacks
    a gateway and only has an interface field (`dev`). If we examine the IPv4 addresses
    on that machine, we will see that its address is `172.20.10.2/28`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 第二条通向`172.20.10.0/28`网络的路由是一个连接路由，它仅仅告诉系统可以通过某个网络接口直接与某个子网中的主机通信。注意，它没有网关，只有接口字段（`dev`）。如果我们检查该机器上的IPv4地址，我们会看到它的地址是`172.20.10.2/28`：
- en: '[PRE19]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Whenever an IP address is added to a network interface, the kernel calculates
    its subnet address and adds a route to that subnet. Since the `172.20.10.0/28`
    subnet is smaller than `0.0.0.0/0`, that route will be used for communication
    with hosts from that subnet rather than the default route. This is known as **the
    longest** **match rule**.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 每当一个IP地址被添加到网络接口时，内核会计算它的子网地址并添加一条到该子网的路由。由于`172.20.10.0/28`子网比`0.0.0.0/0`子网小，因此该路由将用于与该子网的主机通信，而不是默认路由。这就是**最长匹配规则**。
- en: 'The kernel protocol number is reserved for marking such auxiliary routes that
    are created without a direct request from an administrator. It is possible to
    view routes only for a specific protocol by running the following command:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 内核协议号保留用于标记这些没有管理员直接请求而创建的辅助路由。你可以通过运行以下命令查看某个特定协议的路由：
- en: '[PRE20]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The kernel can also tell you which route it would use for accessing a certain
    host or network. For example, if you want to know how it would reach a host with
    a `192.0.2.1` address, run the following command:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 内核还可以告诉你它将使用哪个路由来访问某个主机或网络。例如，如果你想知道它如何到达一个`192.0.2.1`地址的主机，可以运行以下命令：
- en: '[PRE21]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Since this machine only has a single default route, the answer for every host
    is its default gateway — `172.20.10.1`. However, on routers with multiple connections
    to multiple networks, the `ip route get` command can be helpful.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这台机器只有一条默认路由，因此每个主机的答案都是其默认网关——`172.20.10.1`。然而，在具有多条连接到多个网络的路由器上，`ip route
    get`命令会非常有用。
- en: Configuring routes
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置路由
- en: Many host systems just get their default route from DHCP, but routing functionality
    in the Linux kernel is much more advanced.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 许多主机系统只是从DHCP获取它们的默认路由，但Linux内核中的路由功能要复杂得多。
- en: One problem with configuring routes through the `ip` utility is that, as with
    everything configured that way, such routes only survive until the next reboot,
    in perfect conditions. The other problem is that if a network interface goes down
    (due to a disconnected cable in the case of physical network cards or protocol
    reset in the case of virtual links), all routes associated with that interface
    are permanently deleted and need to be restored by a userspace program. On enterprise
    and service provider routers, the userspace program is usually a routing protocol
    stack service such as Free Range Routing or BIRD. Those routing stack services
    implement dynamic routing protocols but also help manage static routes and keep
    them active across network interface state changes. On host systems, it can be
    NetworkManager or another network configuration frontend. However, it is still
    good to know how to create routes by hand when you need to experiment or make
    an emergency fix on a running machine.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ip`工具配置路由的一个问题是，和所有通过这种方式配置的内容一样，这些路由只有在下次重启之前有效，前提是网络状况完美。另一个问题是，如果一个网络接口停止工作（比如物理网络卡由于断开电缆，或虚拟链路因协议重置导致），与该接口相关的所有路由都会被永久删除，并需要通过用户空间程序恢复。在企业和服务提供商路由器中，用户空间程序通常是一个路由协议栈服务，例如Free
    Range Routing或BIRD。这些路由协议栈服务实现了动态路由协议，还帮助管理静态路由并在网络接口状态变化时保持它们的活动状态。在主机系统上，可能是NetworkManager或其他网络配置前端。然而，了解如何手动创建路由在需要实验或进行紧急修复时仍然是有用的。
- en: 'To create a static route with a specific gateway address, you can use this
    command:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一条具有特定网关地址的静态路由，你可以使用以下命令：
- en: '[PRE22]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let us demonstrate it on a dummy interface. First, we will create a dummy interface
    and assign the `192.0.2.1/24` address to it to force the kernel to create a connected
    route to `192.0.2.0/24` and give us space for imaginary gateways. We will use
    `203.0.113.0/24` for our experiments—it is another network reserved for examples
    and documentation that is guaranteed not to appear on the public internet, so
    we can be sure that we do not disturb any real traffic:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在一个虚拟接口上演示一下。首先，我们将创建一个虚拟接口，并为其分配`192.0.2.1/24`地址，以强制内核创建一条到`192.0.2.0/24`的连接路由，并为我们的虚拟网关腾出空间。我们将使用`203.0.113.0/24`进行实验——这是另一个保留用于示例和文档的网络，保证不会出现在公共互联网中，因此我们可以确保不会干扰任何真实流量：
- en: '[PRE23]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now we can add a route, verify that it exists, and try to take `dummy1` down
    to see what happens:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以添加一条路由，验证它是否存在，并尝试将`dummy1`停用，看看会发生什么：
- en: '[PRE24]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can see that the newly added route automatically had the right network
    interface in its entry: `203.0.113.0/24 via 192.0.2.10 dev dummy1`. The kernel
    checked the route to `192.0.2.10—t`he address we set as a gateway—and found that
    it is reachable through `dummy1` (nominally, at least).'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，新添加的路由在其条目中自动包含了正确的网络接口：`203.0.113.0/24 via 192.0.2.10 dev dummy1`。内核检查了到`192.0.2.10`的路由——我们设置的网关地址——并发现它可以通过`dummy1`访问（至少名义上是这样）。
- en: 'When we took `dummy1` down, the kernel also removed the connected route to
    `192.0.2.0/24` associated with it. That made the `192.0.2.10` gateway unreachable,
    so the kernel also removed every route whose gateway became unreachable because
    of that change. The kernel also does not normally allow the user to create a route
    whose gateway is not reachable and can detect recursive routes (that is, routes
    whose gateway is not reachable directly via a connected route). However, it is
    possible to disable that reachability check by adding a special `onlink` flag
    to the command, for example:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们关闭`dummy1`时，内核也移除了与之相关的连接路由`192.0.2.0/24`。这使得`192.0.2.10`网关变得不可达，因此内核也移除了所有因该变化而导致网关不可达的路由。内核通常不允许用户创建网关不可达的路由，并且能够检测递归路由（即，网关无法通过连接路由直接访问的路由）。但是，通过在命令中添加一个特殊的`onlink`标志，可以禁用该可达性检查，例如：
- en: '[PRE25]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: If you are connected to an Ethernet switch or some other kind of a multiple
    access network, you must specify the gateway in your routes because simply sending
    packets from an Ethernet device is impossible—there must be a destination address
    in the packet since there may be multiple hosts in the same segment. However,
    some network interfaces are point-to-point and have only one system on the other
    side. Physical point-to-point connections, such as serial WAN links, are mostly
    extinct now, but virtual point-to-point links are common. If you are connected
    to the internet via PPPoE, you can create a default route with just `sudo ip route
    add 0.0.0.0/0 dev ppp0` or similar—no gateway address is needed.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你连接到以太网交换机或其他类型的多接入网络，你必须在路由中指定网关，因为仅仅通过以太网设备发送数据包是不可能的——数据包中必须有目的地址，因为同一段网络中可能有多个主机。然而，有些网络接口是点对点的，并且另一端只有一个系统。物理点对点连接，如串行广域网连接，现在已经几乎灭绝，但虚拟点对点连接很常见。如果你通过PPPoE连接到互联网，你可以只用`sudo
    ip route add 0.0.0.0/0 dev ppp0`或类似命令创建默认路由——不需要指定网关地址。
- en: If you have only one route to a certain network and want to delete it, you can
    do it with just `sudo ip route del <network>`, and if you have multiple routes
    to the same network, you will need to specify the gateway or the interface to
    delete exactly the route you want, as in `sudo ip route del 203.0.113.0/24` `via
    192.0.2.10`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只有一条通向某个网络的路由并且想要删除它，你只需使用`sudo ip route del <network>`，如果你有多条通向同一网络的路由，你需要指定网关或接口，才能准确删除你想要删除的路由，例如`sudo
    ip route del 203.0.113.0/24` `via 192.0.2.10`。
- en: 'There are two situations when there may be more than one route to the same
    destination. First, it is possible to create a backup route by setting a `metric`
    command for it. For example, if we create a route with a `100` metric, it will
    stay in the table but will not be used while routes with lower metric values still
    exist. If a route disappears, the kernel will automatically start using the backup
    route. Let us demonstrate is with the following commands:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当存在多条路由指向同一目的地时，有两种情况。首先，可以通过为其设置`metric`命令来创建备份路由。例如，如果我们创建一条`metric`为`100`的路由，它会保留在路由表中，但在存在带有较低`metric`值的路由时不会被使用。如果某条路由消失，内核会自动开始使用备份路由。我们可以通过以下命令来演示：
- en: '[PRE26]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Second, the kernel can use more than one route to the same destination in parallel
    for load balancing and redundancy. If different paths have different bandwidths,
    you can specify different weights for each gateway as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，内核可以并行使用多条路由到相同的目的地进行负载均衡和冗余。如果不同路径的带宽不同，你可以为每个网关指定不同的权重，方法如下：
- en: '[PRE27]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note that this method of load balancing is only applicable in networks that
    have direct routed connectivity throughout because packets that belong to the
    same connection will be sent over both paths and the return path of replies to
    those packets is also unpredictable. Systems that are connected to multiple ISPs
    but use NAT to share a public IPv4 address between all internal network hosts
    need more complex load-balancing configurations that ensure that entire connections
    are balanced and use the same outgoing path for every packet, but that is out
    of the scope of this book.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这种负载均衡方法仅适用于具有直接路由连接的网络，因为属于同一连接的数据包将通过两条路径发送，而这些数据包的返回路径也是不可预测的。那些连接到多个
    ISP，但使用 NAT 在所有内部网络主机之间共享公共 IPv4 地址的系统，需要更复杂的负载均衡配置，确保整个连接被平衡，并且每个数据包使用相同的外发路径，但这超出了本书的讨论范围。
- en: 'There are also special-purpose routes that ensure that the destination network
    is made unreachable. There are two types of those routes: `blackhole` and `unreachable/prohibit/throw`.
    Both make the kernel discard all packets sent to certain networks, but the `blackhole`
    route tells it to discard packets silently, while the other type also makes it
    send an ICMP error to the originator.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些特殊用途的路由，确保目标网络变得不可达。这些路由有两种类型：`blackhole` 和 `unreachable/prohibit/throw`。两者都会使内核丢弃发送到特定网络的所有数据包，但
    `blackhole` 路由会让它默默丢弃数据包，而另一种类型则还会向源主机发送一个 ICMP 错误。
- en: 'The `blackhole` route is commonly used as a crude but highly efficient filter
    for outgoing traffic. These routes can be used to stop hosts inside the network
    from communicating with a known bad destination, such as a botnet command and
    control node. In case of an incoming DDoS attack, they can also be used to stop
    its traffic at the router and keep it from reaching its target so that you can
    reconfigure the target host for better performance or at least avoid overloading
    it until the attack is over. You can create a `blackhole` route with `sudo ip
    route add` `blackhole <network>`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`blackhole` 路由通常用作一种粗糙但高效的外出流量过滤器。这些路由可以用来阻止网络内部的主机与已知的恶意目标通信，例如僵尸网络的指挥与控制节点。在遭遇传入的
    DDoS 攻击时，它们还可以用来在路由器处阻止流量，使其无法到达目标，这样你可以重新配置目标主机以提高性能，或者至少避免在攻击结束前使其过载。你可以通过 `sudo
    ip route add` `blackhole <network>` 来创建一个 `blackhole` 路由：'
- en: '[PRE28]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If a network is blackholed, you will not be able to connect to any host in it
    from the local machine. For hosts that use that machine as a router, it will look
    like their packets receive no replies.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个网络被黑洞化，你将无法从本地机器连接到该网络中的任何主机。对于使用该机器作为路由器的主机来说，情况看起来像是它们的数据包没有收到任何回复。
- en: The other three types of routes (`unreachable,` `discard`, and `throw`) cannot
    be used for DDoS protection because when the packet destination matches such a
    route, the kernel will not only discard the packet but also generate an ICMP packet
    to notify the sender that their packets are not reaching their destination, which
    will only make the situation worse by generating more traffic. They are best used
    inside corporate networks for enforcing policies in a way that will be easy to
    debug. If you do not want your hosts to send any traffic to a hypothetical `203.0.113.113`
    host, you can run `sudo ip route add prohibit 203.0.113.113/32`, and everyone
    who tries to connect to it will receive a message saying that the host is administratively
    prohibited (while with a `blackhole` route clients could not easily tell whether
    it is a policy or a network problem).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 另外三种路由类型（`unreachable`、`discard` 和 `throw`）不能用于 DDoS 保护，因为当数据包的目标与这些路由匹配时，内核不仅会丢弃数据包，还会生成一个
    ICMP 数据包通知发送方他们的数据包未能到达目标，这样只会通过生成更多的流量让情况变得更糟。它们最适合用于公司内部网络，用于执行政策，且易于调试。如果你不希望你的主机向一个假设的
    `203.0.113.113` 主机发送任何流量，你可以运行 `sudo ip route add prohibit 203.0.113.113/32`，任何尝试连接到该主机的人将收到一条消息，提示该主机被管理策略禁止访问（而使用
    `blackhole` 路由时，客户端无法轻易判断这是否是政策问题或网络问题）。
- en: As you can see, the `ip` command provides rich functionality for both configuring
    and viewing routing and neighbor tables. Configuring routes by hand is not a common
    task but it is still important to know how to do it, and information retrieval
    commands for route and neighbor tables are very useful in day-to-day diagnostic
    and debugging work.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`ip` 命令提供了丰富的功能，用于配置和查看路由表及邻居表。手动配置路由并不是一项常见任务，但知道如何操作仍然很重要，而路由和邻居表的查询命令在日常的诊断和调试工作中非常有用。
- en: NetworkManager
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NetworkManager
- en: Servers and embedded devices usually have fixed, statically assigned IP addresses,
    but desktop and especially laptop computers may need to dynamically connect to
    multiple networks of different types. A systems administrator with a laptop may
    need to connect to a wired Ethernet network in their server closet, to Wi-Fi networks
    in their office, home, and public spaces such as cafes, and also use a VPN tunnel
    to connect to the corporate network from home. Since many laptops no longer have
    an onboard wired network card, there may be a need to use a USB Ethernet adapter
    instead, so the system must handle not just on-demand network connections, but
    also hot-plug network devices.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器和嵌入式设备通常具有固定的、静态分配的 IP 地址，但桌面计算机，尤其是笔记本电脑，可能需要动态连接到多种不同类型的网络。带有笔记本电脑的系统管理员可能需要连接到服务器机房中的有线以太网网络、办公室、家中以及公共场所（如咖啡馆）的
    Wi-Fi 网络，还需要通过 VPN 隧道从家中连接到公司网络。由于许多笔记本电脑不再配备内置有线网络卡，因此可能需要使用 USB 以太网适配器，系统必须处理不仅是按需网络连接，还要处理热插拔网络设备。
- en: Managing such configurations by hand through configuration files and commands
    would be tedious, so people created software projects to automate it. Those projects
    rely on the usual tools such as the `ip` utility and third-party projects such
    as strongSwan or `xl2tpd` for VPN connections but tie them under a unified user
    interface and include an event handling mechanism to deal with hot-plug hardware
    changes and users' requests to connect to different networks.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 通过配置文件和命令手动管理此类配置会很繁琐，因此人们创建了自动化的软件项目。这些项目依赖于常用的工具，如 `ip` 实用程序和第三方项目，如 strongSwan
    或 `xl2tpd` 用于 VPN 连接，但将它们集成到统一的用户界面下，并包括一个事件处理机制，以应对热插拔硬件更改和用户连接到不同网络的请求。
- en: The most popular solution is the NetworkManager project, which was started by
    Red Hat in 2004\. These days, most Linux distributions include it at least in
    desktop installations.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 最流行的解决方案是 NetworkManager 项目，该项目由 Red Hat 于 2004 年启动。如今，大多数 Linux 发行版至少在桌面安装中包含它。
- en: '`dnf search NetworkManager` (on Fedora or RHEL) or `apt-cache search NetworkManager`
    (on Debian-based distros), you will see packages with various plugins for connection
    types that range from well-known and widely used such as `NetworkManager-wifi`
    or `NetworkManager-openvpn` to obscure and experimental such as `NetworkManager-iodine—a`
    solution for bypassing firewalls by transmitting data inside DNS packets.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `dnf search NetworkManager`（在 Fedora 或 RHEL 上）或 `apt-cache search NetworkManager`（在基于
    Debian 的发行版上），您将看到包含各种连接类型插件的包，这些插件从广泛使用且知名的 `NetworkManager-wifi` 或 `NetworkManager-openvpn`
    到不常见且实验性的 `NetworkManager-iodine`——一种通过将数据传输到 DNS 包中来绕过防火墙的解决方案。
- en: 'There are also multiple user interfaces for it. The network applet you can
    see in the tray area of desktop environment panels is a NetworkManager user interface.
    In MATE Desktop and many other desktop environments, you can verify that if you
    right-click on the network icon and choose the **About** menu point. You will
    see the following screen:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 它还有多个用户界面。您可以在桌面环境面板的托盘区域看到的网络小程序就是 NetworkManager 的用户界面。在 MATE 桌面和许多其他桌面环境中，您可以验证通过右键点击网络图标并选择
    **关于** 菜单项，您将看到如下屏幕：
- en: '![Figure 9.1 – NetworkManager applet version information dialog](img/B18575_09_01.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.1 – NetworkManager 小程序版本信息对话框](img/B18575_09_01.jpg)'
- en: Figure 9.1 – NetworkManager applet version information dialog
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.1 – NetworkManager 小程序版本信息对话框
- en: 'In the **Edit Connections** section in the right-click menu, you can create
    new connections or edit existing ones:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在右键菜单的 **编辑连接** 部分，您可以创建新连接或编辑现有连接：
- en: '![Figure 9.2 – NetworkManager connection editing dialog](img/B18575_09_02.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.2 – NetworkManager 连接编辑对话框](img/B18575_09_02.jpg)'
- en: Figure 9.2 – NetworkManager connection editing dialog
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2 – NetworkManager 连接编辑对话框
- en: 'Recent versions of NetworkManager save connection configuration files to a
    dedicated directory, while old versions would use distribution-specific formats.
    If you save a connection, you can find its file under `/etc/NetworkManager/system-connections`.
    Note that those files are not readable for unprivileged users. You can view the
    connection file for the Office Wi-Fi connection as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 最新版本的 NetworkManager 将连接配置文件保存在专用目录中，而旧版本则使用特定于发行版的格式。如果保存了一个连接，可以在 `/etc/NetworkManager/system-connections`
    目录下找到其文件。请注意，这些文件对于没有特权的用户是不可读的。您可以按照以下方式查看办公室 Wi-Fi 连接的文件：
- en: '[PRE29]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: There is also a text-mode interface for NetworkManager that can provide a GUI-like
    experience on headless machines. It’s usually not installed by default, but on
    Fedora, it can be installed from the `NetworkManager-tui` package.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个适用于 NetworkManager 的文本模式界面，可以在无头机器上提供类似 GUI 的体验。它通常不会默认安装，但在 Fedora 上，可以通过安装
    `NetworkManager-tui` 包来获得。
- en: '![Figure 9.3 – nmtui, a text-based interface for NetworkManager](img/B18575_09_03.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.3 – nmtui，NetworkManager 的基于文本的界面](img/B18575_09_03.jpg)'
- en: Figure 9.3 – nmtui, a text-based interface for NetworkManager
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3 – nmtui，NetworkManager 的基于文本的界面
- en: Finally, the `nmcli` tool allows managing NetworkManager connections from the
    command line. If you've already created a connection, you can bring it up with
    `nmcli connection up <name>` (similar to `nmcli connection up "Office Wi-Fi"`)
    or bring it down with `nmcli connection down <name>`. It also provides interactive
    connection editing functionality that you can use if neither `nmtui` nor a graphical
    desktop environment is available.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`nmcli` 工具允许从命令行管理 NetworkManager 连接。如果您已经创建了一个连接，可以通过 `nmcli connection
    up <name>` 启动它（类似于 `nmcli connection up "Office Wi-Fi"`），或使用 `nmcli connection
    down <name>` 将其关闭。如果没有 `nmtui` 或图形桌面环境可用，它还提供了交互式的连接编辑功能。
- en: As you can see, NetworkManager makes it easy to manage typical network configurations,
    especially on desktop machines. Next, we will learn about distribution-specific
    configuration methods that do not use NetworkManager.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，NetworkManager 使得管理典型的网络配置变得简单，尤其是在桌面机器上。接下来，我们将学习不使用 NetworkManager 的基于发行版的特定配置方法。
- en: Distribution-specific configuration methods
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于发行版的特定配置方法
- en: NetworkManager is used by many distributions on desktop systems, but many Linux
    distributions have also used custom network configuration files and scripts. Some
    still use them, while other systems migrated to NetworkManager but maintain old
    methods as an alternative or in legacy long-term support releases.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: NetworkManager 被许多发行版在桌面系统上使用，但许多 Linux 发行版也使用自定义的网络配置文件和脚本。一些发行版仍在使用这些方法，而其他系统则迁移到
    NetworkManager，但仍保留旧的配置方法，作为替代或在长期支持的旧版中使用。
- en: Debian
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Debian
- en: In Debian, the configuration file for network interfaces is `/etc/network/interfaces`.
    Unlike NetworkManager’s native format, this allows keeping configurations for
    all interfaces in a single file. To make the configuration more modular and easier
    to read, it is possible to store files for individual interfaces in the `/``etc/network/interfaces.d/`
    directory.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Debian 中，网络接口的配置文件是 `/etc/network/interfaces`。与 NetworkManager 的原生格式不同，这种方式允许将所有接口的配置保存在一个文件中。为了使配置更加模块化和易于阅读，可以将单个接口的配置文件存储在
    `/etc/network/interfaces.d/` 目录中。
- en: 'Interface configurations are also identified by link names rather than arbitrary
    descriptions and UUIDs. This is how to set an onboard Ethernet device, `eno1`,
    to use static addresses for both IPv4 and IPv6, for example:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 接口配置也通过链接名称而非任意描述和 UUID 来识别。例如，这是如何为一个内建的以太网设备 `eno1` 设置静态地址用于 IPv4 和 IPv6 的示例：
- en: '[PRE30]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You can also execute custom commands when interfaces are brought up and down,
    using the `pre-up`, `up`, `down`, and `post-down` options. For example, to automatically
    add a route when `eno1` goes up, run the following command:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在接口启用和禁用时执行自定义命令，使用 `pre-up`、`up`、`down` 和 `post-down` 选项。例如，当 `eno1` 启动时，自动添加路由，可以运行以下命令：
- en: '[PRE31]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The tools for bringing interfaces up and down are named `ifup` and `ifdown`,
    respectively. They are only available to privileged users, so you need to run
    them with `sudo`, as in `sudo ifup eno1` or `sudo` `ifdown eno1`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 启用和禁用接口的工具分别命名为 `ifup` 和 `ifdown`。它们仅对特权用户可用，因此您需要使用 `sudo` 来运行它们，如 `sudo ifup
    eno1` 或 `sudo ifdown eno1`。
- en: Old Red Hat-based distributions
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 旧版基于 Red Hat 的发行版
- en: 'Fedora and RHEL version 8 and above (as well as its derivatives such as Rocky
    Linux) use NetworkManager as their network configuration system. Up to RHEL7,
    however, it used a different system. Its configuration file directory was `/etc/sysconfig/network-scripts`,
    and each interface used its own file. For example, this is how you could statically
    assign the `203.0.113.113/24` address to an onboard Ethernet interface, `eno1`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Fedora 和 RHEL 8 及以上版本（以及其衍生版如 Rocky Linux）使用 NetworkManager 作为其网络配置系统。然而，直到
    RHEL7，它们使用的是不同的系统。其配置文件目录是 `/etc/sysconfig/network-scripts`，每个接口都有自己的文件。例如，这是如何将
    `203.0.113.113/24` 地址静态分配给一个内建以太网接口 `eno1`：
- en: '[PRE32]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: A Red Hat-specific way to reread and apply all old-style network configurations
    is by using the `service network` `restart` command.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 一种 Red Hat 特定的方法，通过使用 `service network` `restart` 命令重新读取并应用所有旧式网络配置。
- en: As you can see, distribution-specific methods are conceptually similar, although
    configuration syntax and names for options with the same meaning can vary wildly.
    If in doubt, you should always consult the documentation. Now that we've covered
    the most common network configuration methods, we should also learn how to verify
    whether the configuration works as expected.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，特定于分发版的方法在概念上是相似的，尽管配置语法和相同意义选项的名称可以大相径庭。如果有疑问，您应该始终查阅文档。现在我们已经介绍了最常见的网络配置方法，接下来我们还应该学习如何验证配置是否按预期工作。
- en: Network troubleshooting
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络故障排除
- en: Network troubleshooting is a vast subject. However, most of the time, experts
    use the same tools that are available to every novice and those tools are not
    hard to learn to use at a basic level. The main difference between a novice and
    an expert is how well they can interpret their outputs and choose the correct
    options.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 网络故障排除是一个广泛的主题。然而，大多数时候，专家使用的工具与每个新手可用的工具相同，而且这些工具在基本使用层面上并不难学会。新手和专家之间的主要区别在于他们如何解读输出结果并选择正确的选项。
- en: Using ping
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 ping
- en: The name of the `ping` utility comes from the sound of sonar—a device that uses
    sound pulses to discover objects underwater. That command metaphorically probes
    a remote host by sending an ICMP packet and listening for a reply. The sonar metaphor
    is a bit of a stretch because sound pulses are passively reflected, while the
    exchange of ICMP packets requires cooperation from a remote host.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`ping` 工具的名称来源于声呐的声音——声呐是一种利用声波脉冲来探测水下物体的设备。该命令通过发送 ICMP 数据包并等待回复，隐喻性地探测远程主机。声呐的隐喻有些牵强，因为声波脉冲是被动反射的，而
    ICMP 数据包的交换需要远程主机的配合。'
- en: Still, a host that runs a correctly implemented network stack should reply with
    an ICMP echo reply packet if it receives an echo request. At the most basic level,
    pinging a host tells you whether the host is online and whether there is a working
    network path to it.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，运行正确实现的网络栈的主机在收到回显请求时，应该会回复一个 ICMP 回显应答数据包。在最基本的层面上，ping 一台主机可以告诉你该主机是否在线，以及是否存在通向它的有效网络路径。
- en: 'By default, the Linux version of `ping` will keep sending echo requests indefinitely.
    This is in contrast with some other versions, such as that of Windows, that terminate
    after a finite number of packets by default. If you want the Linux `ping` to behave
    that way, you can specify the number of requests with `-c`, such as `-c5`, to
    send five requests as shown:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Linux 版本的 `ping` 将无限期地继续发送回显请求。这与其他一些版本（如 Windows）不同，后者默认在发送有限数量的数据包后终止。如果您希望
    Linux 的 `ping` 采用这种行为，您可以使用 `-c` 来指定请求次数，例如 `-c5`，以发送五个请求，如下所示：
- en: '[PRE33]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: If ICMP echo requests successfully reach their target and the target replies,
    then replies to those packets will come from the target address.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 ICMP 回显请求成功到达目标且目标回复，则对这些数据包的回复将来自目标地址。
- en: 'If packets do not reach the target host because there is no route to it, you
    will get replies from the last router on the path of those packets that fail to
    send them further because it could not find a route. For example, consider this
    output from pinging a host in a private network:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据包无法到达目标主机，因为没有到达它的路由，您将收到来自路径上最后一个路由器的回复，该路由器无法将数据包继续转发，因为它找不到路由。例如，考虑从私有网络中
    ping 一台主机时的输出：
- en: '[PRE34]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In this case, the last router that received our ICMP echo request packets and
    failed to forward them further has a `10.217.41.49` address, so if we wanted to
    check why that host was inaccessible, that router would be our starting point.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，接收到我们的 ICMP 回显请求数据包并未能继续转发它们的最后一个路由器地址是 `10.217.41.49`，所以如果我们想检查为什么该主机不可访问，那么这个路由器将是我们的起点。
- en: Using traceroute
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 traceroute
- en: A ping can tell you whether a host is accessible and if not, then where exactly
    in the network the path of ICMP echo packets ends. However, it cannot tell you
    what the network path is.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: ping 可以告诉你主机是否可访问，如果不可访问，则可以指出 ICMP 回显数据包在网络中到达的具体位置。然而，它不能告诉你网络路径的具体情况。
- en: To discover paths of packets through the network, you can use the `traceroute`
    utility instead. In short, that utility sends packets with an intentionally small
    TTL (for IPv4) or hop count (for IPv6) and records to force those routers to discard
    the test packet and record ICMP error messages from them to record the packet
    path.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 为了发现数据包通过网络的路径，你可以改用 `traceroute` 工具。简而言之，该工具发送具有故意较小 TTL（针对 IPv4）或跳数（针对 IPv6）的数据包，并记录迫使路由器丢弃测试数据包并记录其
    ICMP 错误信息的过程，从而记录数据包的路径。
- en: Every IP packet has a field that shows how many times it was already forwarded
    between routers. In IPv4, that field is named `0`, the packet is discarded. Whenever
    a router discards a packet for that reason, it notifies the sender with an ICMP
    TTL exceeded message.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 IP 数据包都有一个字段，显示它已经在路由器之间转发了多少次。在 IPv4 中，该字段的名称为 `0`，表示数据包被丢弃。每当路由器因该原因丢弃数据包时，它会通过
    ICMP TTL 超时消息通知发送方。
- en: Thus, if you intentionally set the TTL of a packet to `1`, it is guaranteed
    to be discarded by the very first router on its path. From the ICMP response about
    a discarded packet, you can learn the address of that router. By repeating the
    procedure with increasing TTL values, you can learn about every router on the
    path—or at least every router that cooperates and sends ICMP TTL-exceeded replies.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你故意将数据包的 TTL 设置为 `1`，它必定会被路径上的第一个路由器丢弃。通过关于丢弃数据包的 ICMP 响应，你可以了解到该路由器的地址。通过逐步增加
    TTL 值重复这一过程，你可以了解路径上的每个路由器——或者至少是每个合作的路由器，它会发送 ICMP TTL 超时的回复。
- en: In the public internet and other large-scale networks, there are lots of subtleties
    in interpreting `traceroute` outputs. Some routers may not generate ICMP TTL exceeded
    messages at all or only generate them if their load is low, so the path may appear
    to have gaps (you will see `* * *` symbols in place of path entries where the
    router never generates those responses—t`raceroute` retries its probes three times
    before giving up). The path shown by `traceroute` may not be the real path due
    to network segments that use **Multi-Protocol Label Switching** (**MPLS**) instead
    of IP routing. However, it is still a useful tool, and inside private networks,
    its output is usually the real path.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在公共互联网和其他大型网络中，解读`traceroute`输出结果时存在许多微妙之处。一些路由器可能根本不会生成 ICMP TTL 超时消息，或者仅在其负载较低时生成这些消息，因此路径可能会显示出空白（你会看到
    `* * *` 符号，表示该路由器从未生成这些响应——`traceroute` 在放弃之前会尝试三次探测）。由于某些网络段使用**多协议标签交换**（**MPLS**）而非
    IP 路由，`traceroute` 显示的路径可能并非真实路径。然而，它仍然是一个有用的工具，在私有网络中，它的输出通常是实际路径。
- en: 'Here is what its output may look like:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是其输出的可能样式：
- en: '[PRE35]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: By default, `traceroute` tries to resolve IP addresses to domain names by looking
    up their PTR records. It may slow it down or you may want to see raw addresses
    instead. If you prefer to see raw addresses, you can disable name resolution with
    the `-``n` option.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`traceroute` 会通过查找 PTR 记录来解析 IP 地址为域名。这可能会使其变慢，或者你可能希望查看原始地址。如果你更喜欢查看原始地址，可以通过
    `-n` 选项禁用名称解析。
- en: There are many more network diagnostic tools. For example, network scanners
    such as *nmap* can tell you which services are running on a remote machine and
    gather information about its operating system and network stack. Packet capture
    and analysis tools such as *tcpdump* and *Wireshark* can help you get a detailed
    picture of network traffic. However, even with just `ping` and `traceroute`, you
    can verify that your network setup is working or gather debugging information
    to share with colleagues or support technicians.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他网络诊断工具。例如，像 *nmap* 这样的网络扫描器可以告诉你远程主机上正在运行哪些服务，并收集有关其操作系统和网络栈的信息。像 *tcpdump*
    和 *Wireshark* 这样的数据包捕获和分析工具可以帮助你获取网络流量的详细图景。然而，即使只有 `ping` 和 `traceroute`，你也可以验证网络设置是否正常工作，或者收集调试信息与同事或支持技术人员共享。
- en: Summary
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the components of the Linux network stack,
    the tools for managing it, and different types of physical and virtual network
    interfaces. We learned how to assign and view addresses, view and create routes,
    configure network settings using NetworkManager and distribution-specific methods,
    and perform basic troubleshooting procedures.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 Linux 网络栈的组成部分、管理工具以及不同类型的物理和虚拟网络接口。我们学习了如何分配和查看地址、查看和创建路由、使用 NetworkManager
    和特定发行版的方法配置网络设置，并执行基本的故障排除程序。
- en: In the next chapter, we will learn about managing storage devices.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何管理存储设备。
