["```\nfor item in [LIST]\nDo\n  [COMMANDS]\ndone\n```", "```\nroot@cli1:~# for name in srv1 srv2 srv3 ;do echo $name; \\\ndone; \nSrv1\nSrv2\nsrv3\n```", "```\nroot@cli1:~# for name in `ls`; do file $name; done;\ndonebackups.lst: ASCII text\nsnap: directory\ntestfile: empty\n```", "```\ndemo@cli1:~/scripting$ echo {0..9}\n0 1 2 3 4 5 6 7 8 9\n```", "```\nroot@cli1:~# for number in `echo {0..9}`; do echo $number; \\\ndone; \nfor number in `echo {0..9}`; do echo $number; done; \n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n```", "```\nroot@cli1:~# for number in `echo {0..100..20}`; do echo \\\n$number; done; \nfor number in `echo {0..100..20}`; do echo $number; done; \n0\n20\n40\n60\n80\n100\n```", "```\nroot@cli1:~# for name  in srv{l,w,m}-{1..6}; do echo $name; \\\ndone;\nsrvl-1\nsrvl-2\nsrvl-3\nsrvl-4\nsrvl-5\nsrvl-6\nsrvw-1\nsrvw-2\nsrvw-3\nsrvw-4\nsrvw-5\nsrvw-6\nsrvm-1\nsrvm-2\nsrvm-3\nsrvm-4\nsrvm-5\nsrvm-6\n```", "```\nroot@cli1:~# for name  in {user1,user2,user3,user4}; do \\\nfor server in {srv1,srv2,srv3,srv4}; do echo \"Trying to ssh \\\n$name@$server\"; done;done; \nTrying to ssh user1@srv1\nTrying to ssh user1@srv2\nTrying to ssh user1@srv3\nTrying to ssh user1@srv4\nTrying to ssh user2@srv1\nTrying to ssh user2@srv2\nTrying to ssh user2@srv3\nTrying to ssh user2@srv4\nTrying to ssh user3@srv1\nTrying to ssh user3@srv2\nTrying to ssh user3@srv3\nTrying to ssh user3@srv4\nTrying to ssh user4@srv1\nTrying to ssh user4@srv2\nTrying to ssh user4@srv3\nTrying to ssh user4@srv4\n```", "```\nfor ((INITIALIZATION; TEST; STEP))\nDo\n  [COMMANDS]\ndone\n```", "```\nfor ((i = 0 ; i <= 100 ; i=i+20)); do\n  echo \"Counter: $i\"\ndone\n```", "```\n#!/usr/bin/bash\n# for loop test script 1 \nfor name  in {user1,user2,user3,user4}; do\n        for server in {srv1,srv2,srv3,srv4}; do\n                echo \"Trying to ssh $name@$server\"\n        Done\ndone\n```", "```\nfor I in 1 2 3 4 5\ndo\n#main part of the loop, will execute each time loop is started\n  command1      \n  command2\n#condition to meet if we need to break the loop\n  if (break-condition)\n  then\n#Leave the loop\n      break          \n  fi\n#This command will execute if the condition is not met\n  statements3              \ndone\ncommand4\n```", "```\n#!/usr/bin/bash\n# testing the break command\nfor number  in 1 2 3 4 5\ndo \necho running command1, number is $number\necho running command2, number is $number\nif [ $number -eq 4 ]\n        Then\n                echo breaking out of loop, number is $number\n                Break\nfi\necho running command3, number is $number\ndone\n```", "```\ndemo@cli1:~/scripting$ bash forbreak.sh \nrunning command1, number is 1\nrunning command2, number is 1\nrunning command3, number is 1\nrunning command1, number is 2\nrunning command2, number is 2\nrunning command3, number is 2\nrunning command1, number is 3\nrunning command2, number is 3\nrunning command3, number is 3\nrunning command1, number is 4\nrunning command2, number is 4\nbreaking out of loop, number is 4\n```", "```\n#!/usr/bin/bash\n# testing the continue command\nfor number  in 1 2 3 4 5\ndo\necho running command1, number is $number\necho running command2, number is $number\nif [ $number -eq 3 ]\n        Then\n                echo skipping over a statement, number is \\\n$number\n                Continue\nfi\necho running command3, number is $number\ndone\n```", "```\ndemo@cli1:~/scripting$ bash forcontinue.sh\nrunning command1, number is 1\nrunning command2, number is 1\nrunning command3, number is 1\nrunning command1, number is 2\nrunning command2, number is 2\nrunning command3, number is 2\nrunning command1, number is 3\nrunning command2, number is 3\nskipping over a statement, number is 3\nrunning command1, number is 4\nrunning command2, number is 4\nrunning command3, number is 4\nrunning command1, number is 5\nrunning command2, number is 5\nrunning command3, number is 5\n```", "```\nwhile [ condition ]; do commands; done\n```", "```\nwhile control-command; do COMMANDS; done\n```", "```\n#!/bin/bash\nx=0\nwhile [ $x -le 4 ]\ndo\n  echo number is $number\n  x=$(( $x + 1 ))\ndone\n```", "```\n#!/bin/bash\nFILE=testfile.txt\n# read testfile and display it one line at a time\nwhile read line\ndo\n     # just write out the line prefixed by >\n     echo \"> $line\"\ndone < $FILE\n```", "```\n#!/bin/bash\nwhile :\ndo\n     echo \"infinite loops [ hit CTRL+C to stop]\"\ndone\n```", "```\ndemo@cli1:~/$ test \"1\"=\"0\" ; echo $?\n0\n```", "```\ndemo@cli1:~/$ test whatever ; echo $?\n0\n```", "```\ndemo@cli1:~/$ test \"1\" = \"0\" ; echo $?\n1\n```", "```\ndemo@cli1:~/$ test \"0\" = \"0\" ; echo $?\n0\n```", "```\ndemo@cli1:~/$ test 0 = 0 ; echo $?\n0\n```", "```\ndemo@cli1:~/$ test 0 = 1 ; echo $?\n1\n```", "```\ndemo@cli1:~/$ test 01 = 1 ; echo $?\n1\n```", "```\ndemo@cli1:~/$ test \"01\" = \"1\" ; echo $?\n1 \n```", "```\ndemo@cli1:~/$ test \"01\" -eq \"1\" ; echo $?\n0\n```", "```\ndemo@cli1:~/$ test 01 -eq 1 ; echo $?\n0\n```", "```\ndemo@cli1:~/scripting$ test 0a -eq  0a ; echo $?\nbash: test: 0a: integer expression expected\n2\n```", "```\ndemo@cli1:~/$ [ 01 -eq 1 ] ; echo $?\n0\n```", "```\n#!/usr/bin/bash\n# testing if a file exists\nif [ -f testfile.txt ]\n      then\n           echo testfile.txt exists in the current directory\n      else \n           echo File does not exist in the current directory! \nfi\n```", "```\n#!/usr/bin/bash\n# testing permissions and paths \nif [ -d root ]\n     then\n           echo root directory exists!\n     else \n           echo root directory does NOT exist! \nfi\nif [ -r root ]\n        then\n                echo Script can read from the directory!\n        else\n                echo Script can NOT read from the directory!    \nfi\nif [ -w root ]\n        then\n                echo Script can write to the directory!\n        else\n                echo Script can not write to the directory!    \nfi\n```", "```\ndemo@cli1:~/scripting$ bash testif2.sh \nroot directory does NOT exists!\nScript can NOT read from the directory!\nScript can not write to the directory!\ndemo@cli1:~/scripting$ cd /\ndemo@cli1:/$ bash home/demo/scripting/testif2.sh \nroot directory exists!\nScript can NOT read from the directory!\nScript can not write to the directory!\n```", "```\ndemo@cli1:~/scripting$ cd /\ndemo@cli1:/$ sudo bash home/demo/scripting/testif2.sh \n[sudo] password for demo: \nroot directory exists!\nScript can read from the directory!\nScript can write to the directory!\n```", "```\n#!/usr/bin/bash\n# testing permissions and paths \nif [ -d root ]\n        then\n                echo root directory exists!\n                if [ -r root ]\n                      then\n                        echo Script can read from the \\\ndirectory!\n                      else\n                        echo Script can NOT read from the \\\ndirectory!\n                fi\n                if [ -w root ]\n                      then\n                        echo Script can write to the directory!\n                      else\n                        echo Script can not write to the \\\ndirectory!\n                fi\n        else\n                echo root directory does NOT exists!\nfi\n```", "```\ndemo@cli1:~/scripting$ bash testif3.sh\nroot directory does NOT exists!\ndemo@cli1:~/scripting$ cd /\ndemo@cli1:/$ bash home/demo/scripting/testif3.sh \nroot directory exists!\nScript can NOT read from the directory!\nScript can not write to the directory!\n```", "```\n#!/usr/bin/bash\n# $1 contains either copy, delete, move or help\nif [ $1 = \"copy\" ]\n        then\n                echo you chose to copy!\n        elif  [ $1 = \"delete\" ]\n                then\n                        echo you chose to delete!\n        elif  [ $1 = \"move\" ]\n                then\n                        echo you chose to move!  \n        elif  [ $1 = \"help\" ]\n                then\n                        echo you chose help!  \nelse    \n                echo please make a choice!\nfi\n```", "```\n#!/usr/bin/bash\n# $1 contains either copy, delete, move or help\ncase $1 in \n      copy)      echo you chose to copy! ;;\n      delete) echo you chose to delete! ;;\n      move)   echo you chose to move! ;; \n      help)   echo you chose help!  ;;\n      *)    echo please make a choice!\nesac\n```", "```\n#!/usr/bin/bash\n# $1 contains string we are searching for\ngrep $1 * &> /dev/null\ncase $? In\n      0)    echo Something was found! ;;\n      1)       echo Nothing was found! ;;\n      2)        echo grep reported an error! ;;\nesac\n```", "```\n#!/usr/bin/bash\n# $1 contains either check, copy, delete or help\n#script expects two arguments: a command and a file name\ncase $1 in \n      copy) \n       echo you chose to copy! \n       if [ -r $2 ]\n      then\n      echo Script can read the file use cp $2 ~ to copy to \\\nyour home Directory!\n      else\n      echo Script can NOT read the file!    \n      fi\n          ;;\n      delete) \n       echo you chose to delete! \n           if [ -w $2 ]\n             then\n             echo Script can write the file, use rm $2 to \\\nremove it!\n             else\n             echo Script can NOT read the file!    \n           fi\n           ;;\n      check)\n       if [ -f $2 ]\n              then\n                 echo File $2 exists!\n                  if [ -r $2 ]\n                        then\n                                echo Script can read $2!\n                           else\n                                echo Script can NOT read $2!\n                      fi\n                      if [ -w $2 ]\n                          then\n                                 echo Script can write to $2!\n                          else\n                                 echo Script can not write to $2!\n                      fi\n            else\n                      echo File $2 does NOT exist!\n           fi  ;;\n      help)         \n      echo you chose help, please choose from check, copy or \\\ndelete!  ;;\n      *)   echo please make a choice, available are copy \\\ncheck delete and help!\nesac\n```", "```\ndemo@cli1:~/scripting$ bash testcas4.sh check testfile.txt\nFile testfile.txt exists!\nScript can read testfile.txt!\nScript can write to testfile.txt!\ndemo@cli1:~/scripting$ bash testcas4.sh check testfile.tx\nFile testfile.tx does NOT exist!\n```", "```\ndemo@cli1:~/scripting$ pwd ; ls\n/home/demo/scripting\nbackupexample.sh  errorfile  forbreak.sh  forcontinue.sh  forloop1.sh  helloworld.sh  helloworldv1.sh  outputfile  readfile.sh  testcas1.sh\n```", "```\ndemo@cli1:~/scripting$ [ -f outputfile ] && cat outputfile \nHello World!\ndemo@cli1:~/scripting$ [ -f idonotexist ] && cat outputfile\ndemo@cli1:~/scripting$\n```", "```\ndemo@cli1:~/scripting$ [ -f idonotexist ] || cat outputfile \nHello World!\ndemo@cli1:~/scripting$ [ -f outputfile ] || cat outputfile\ndemo@cli1:~/scripting$\n```", "```\ndemo@cli1:~/$[ -f outputfile ] && echo exists || echo not \\\nexists\nExists\ndemo@cli1:~/$[ -f idonotexist ] && echo exists || echo exists \\\nnot\nexists not\n```", "```\ndemo@cli1:~/$ [ -f outputfile ] &&  [ -r outputfile ] ; echo \\\n$?\n0\n```", "```\n#!/usr/bin/bash\n# testing if a number is in an interval\nif [ $1 -gt 1 ]\n      then\n          if [ $1 -lt 10 ] \n                 then \n                  echo Number is between 1 and 10\n          else \n                echo Number is not between 1 and 10\n                fi\n     else \n            echo number is not between 1 and 10! \nfi\n```", "```\ndemo@cli1:~/scripting$ bash testmultiple.sh 42\nNumber is not between 1 and 10\ndemo@cli1:~/scripting$ bash testmultiple.sh 2\nNumber is between 1 and 10\ndemo@cli1:~/scripting$ bash testmultiple.sh -1\nnumber is not between 1 and 10!\n```", "```\n#!/usr/bin/bash\n# testing if a number is in an interval\nif [[ $1 -gt 1  &&  $1 -lt 10 ]]\n        then\n                        echo Number is between 1 and 10\n        else\n                        echo Number is not between 1 and 10\nfi\n```"]