- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Introduction to PowerShell 7 – What It Is and How to Get It
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PowerShell 7 介绍 – 它是什么以及如何获取它
- en: Quite simply, PowerShell is a time machine. Not a science-fiction time machine
    where you get to go back in time and meet your own grandfather, but a real, practical
    one. If you put in a small amount of time, then PowerShell, like any simple machine,
    will act as a force multiplier; it will produce very much more time for you. To
    use a metaphor, it’s a time hammer, and the hours you put into learning PowerShell
    will save you tens or hundreds of times as many hours once you start putting the
    knowledge to use.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，PowerShell 是一台时光机。不是那种科幻电影里的时光机，你可以回到过去见到自己的祖父，而是一台真正的、实用的时光机。如果你投入少量时间，那么
    PowerShell 就像任何简单的机器一样，能够起到倍增作用；它会为你节省大量的时间。用个比喻，它是一把时间锤子，你投入学习 PowerShell 的时间将为你节省数十倍甚至上百倍的时间，一旦你开始将这些知识付诸实践。
- en: This chapter is a general introduction to PowerShell 7\. It’s going to give
    you some context about PowerShell and get you up and running. You’re going to
    learn what you can do with it and some typical use cases. We’ll be installing
    PowerShell, and you’ll get to choose one or more ways of doing that. Once we’ve
    got it installed, we’ll go through how you run commands (called **cmdlets**),
    and how you can find cmdlets to run. Finally, and quite importantly, we’ll work
    through how to get help, both with cmdlets and with PowerShell topics and concepts.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是 PowerShell 7 的概述介绍。它将为你提供 PowerShell 的背景知识，并帮助你启动和运行。你将学习如何使用 PowerShell
    以及一些典型的使用案例。我们将安装 PowerShell，你将选择一种或多种方式进行安装。安装完成后，我们将介绍如何运行命令（称为**cmdlet**），以及如何查找可以运行的
    cmdlet。最后，也非常重要的是，我们将介绍如何获取帮助，包括获取 cmdlet 以及 PowerShell 主题和概念的帮助。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: What is PowerShell 7?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PowerShell 7 是什么？
- en: What is PowerShell 7 used for?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PowerShell 7 用于什么？
- en: Getting PowerShell 7
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取 PowerShell 7
- en: Running PowerShell 7
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 PowerShell 7
- en: Getting help
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取帮助
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow along with this chapter, you will need an internet connection and
    an operating system. If you’re using Linux or macOS, the installation instructions
    can be found in [*Chapter 14*](B17600_14.xhtml#_idTextAnchor280)*,* *PowerShell
    7 for Linux and macOS*, so skip the detailed installation instructions in the
    *How to get PowerShell 7 section*, in this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟上本章的内容，你需要一个互联网连接和操作系统。如果你使用的是 Linux 或 macOS，安装说明可以在[*第 14 章*](B17600_14.xhtml#_idTextAnchor280)*,*
    *Linux 和 macOS 上的 PowerShell 7* 中找到，因此跳过本章 *如何获取 PowerShell 7* 部分的详细安装说明。
- en: 'This chapter assumes that you will be using Windows 10 (version 1709 or later)
    running on standard 64-bit x86 architecture. If you’re not sure whether that’s
    what you have, don’t worry, it probably is. If you are one of life’s worriers,
    go to the Windows search bar and type `msinfo32`, then press *Enter*. The **System
    Information** application will open, and under **System Summary,** there will
    be three relevant lines:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章假设你将使用运行在标准 64 位 x86 架构上的 Windows 10（版本 1709 或更高版本）。如果你不确定自己的系统是否符合这个要求，不用担心，应该是的。如果你是那种总是担心的人，可以打开
    Windows 搜索框，输入 `msinfo32`，然后按 *Enter*。**系统信息**应用程序将打开，在**系统摘要**下，你会看到三行相关信息：
- en: '**OS Name**: Hopefully **Microsoft Windows 10** of some flavor; PowerShell
    7.3 is available on all currently supported versions of Windows.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作系统名称**：希望是某种版本的**微软 Windows 10**；PowerShell 7.3 可在所有当前支持的 Windows 版本上使用。'
- en: '**Version**: You want a build number higher than 16299.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本**：你需要一个比 16299 更高的版本号。'
- en: '**System Type**: Probably **x64-based PC**.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统类型**：可能是**基于 x64 的 PC**。'
- en: 'The following screenshot shows how it should look under **System Summary**:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在**系统摘要**下的样子：
- en: '![Figure 1.1 – Typical information from the System Information application
    (msinfo32)](img/B17600_01_001.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – 系统信息应用程序（msinfo32）中的典型信息](img/B17600_01_001.jpg)'
- en: Figure 1.1 – Typical information from the System Information application (msinfo32)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 系统信息应用程序（msinfo32）中的典型信息
- en: If you’re using Windows 11, then good for you; you won’t need to do some of
    the things we’ll be talking about as Windows 11 comes with some extras.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Windows 11，那么恭喜你；你不需要做一些我们将讨论的事情，因为 Windows 11 提供了一些额外的功能。
- en: What is PowerShell 7?
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PowerShell 7 是什么？
- en: '**PowerShell** is a scripting language and an alternative to the command-line
    interface. PowerShell is an automation tool consisting of (at least) three parts:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**PowerShell** 是一种脚本语言，是命令行接口的替代工具。PowerShell 是一个自动化工具，至少由三部分组成：'
- en: A shell, like the Command Prompt in Windows or the Terminal in Linux or macOS
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 shell，类似于 Windows 中的命令提示符或 Linux 或 macOS 中的终端
- en: A scripting language
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个脚本语言
- en: A configuration management framework called **Desired State** **Configuration**
    (**DSC**)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为 **Desired State** **Configuration** (**DSC**) 的配置管理框架
- en: In practice, when we talk about PowerShell, we’re usually talking about the
    scripting language. Usage of the shell is largely intuitive to the user, as we’ll
    see, and while we’ll talk about DSC later, in my experience, most people don’t
    use it as much as they should.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，当我们谈论 PowerShell 时，通常是指脚本语言。正如我们所看到的，Shell 的使用对用户来说是直观的，尽管我们稍后会讨论 DSC，但根据我的经验，大多数人并没有像应该的那样充分使用它。
- en: The first version of PowerShell grew out of a project called **Monad**, which
    was an attempt by Jeffrey Snover to replicate Unix tools on Windows. He realized
    that one of the fundamental drawbacks of Unix tools is that they output a bytestream
    (usually text), and so a lot of effort is wasted on searching, formatting, and
    extracting the output of commands before you can act on that output. Monad was
    written to output objects that could be input straight into another command. We’ll
    cover this in more detail when we get to [*Chapter 4*](B17600_04.xhtml#_idTextAnchor071),
    *PowerShell Variables and Data Structures*. PowerShell 1.0 was released in 2006,
    but in my opinion, it didn’t really take off until PowerShell 2.0 was released
    in 2009, and Microsoft started re-engineering the administrative interfaces of
    major pieces of software such as Exchange Server 2010 to make use of it. Other
    opinions are available.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 的第一个版本源自一个名为**Monad**的项目，这是 Jeffrey Snover 试图在 Windows 上复制 Unix 工具的尝试。他意识到
    Unix 工具的一个基本缺点是它们输出的是字节流（通常是文本），因此在你能够对输出结果进行操作之前，很多努力都浪费在搜索、格式化和提取命令输出上。Monad
    被写成输出对象，这些对象可以直接输入到另一个命令中。我们将在 [*第 4 章*](B17600_04.xhtml#_idTextAnchor071)，《PowerShell
    变量和数据结构》中详细讨论这一点。PowerShell 1.0 于 2006 年发布，但依我看，直到 PowerShell 2.0 在 2009 年发布，且微软开始重新设计主要软件（如
    Exchange Server 2010）的管理界面以便利用 PowerShell 时，它才真正起步。其他看法也是存在的。
- en: 'At the time of writing, there are two main *flavors* of PowerShell: **Windows
    PowerShell**, which comes bundled with both server and desktop versions of Windows,
    and **PowerShell 7**, which must be downloaded and installed. The latest (and
    allegedly final) version of Windows PowerShell, v5.1, is built on .NET Framework
    4.5, the proprietary software framework that is bundled with Windows and underpins
    many of Microsoft’s products. PowerShell 7.0 was built on .NET Core 3.1, a simplified,
    open source implementation of .NET. However, since version 7.2, PowerShell has
    been built on .NET 6.0\. This unified version of .NET is a replacement for both
    .NET Framework and .NET Core, and was released in November 2020.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，PowerShell 主要有两种*版本*：**Windows PowerShell**，它随 Windows 的服务器版和桌面版捆绑在一起，以及**PowerShell
    7**，它需要下载并安装。Windows PowerShell 的最新（且 allegedly 最终）版本 v5.1 构建在 .NET Framework
    4.5 上，这是与 Windows 一起捆绑的专有软件框架，并支撑了微软的许多产品。PowerShell 7.0 是基于 .NET Core 3.1 构建的，这是一个简化版的、开源实现的
    .NET。然而，自从 7.2 版本起，PowerShell 已经基于 .NET 6.0 构建。这个统一版本的 .NET 代替了 .NET Framework
    和 .NET Core，并在 2020 年 11 月发布。
- en: Because of the fundamental differences between Windows PowerShell 5.1 and PowerShell
    7.x, there can be some differences in how they work on the Windows platform. These
    will be discussed in [*Chapter 13*](B17600_13.xhtml#_idTextAnchor267), *Working
    With PowerShell 7* *and Windows*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Windows PowerShell 5.1 和 PowerShell 7.x 之间的根本差异，它们在 Windows 平台上的工作方式可能会有所不同。我们将在
    [*第 13 章*](B17600_13.xhtml#_idTextAnchor267)，《在 PowerShell 7 和 Windows 中工作》中讨论这些差异。
- en: 'We’ll find it useful to summarize some of the key differences in the following
    table:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将总结一些关键差异，并在以下表格中列出：
- en: '| **Parameters** | **Windows PowerShell** | **PowerShell 7.2** |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| **参数** | **Windows PowerShell** | **PowerShell 7.2** |'
- en: '| **Platform** | x64, x86 only | x64, x86, arm32, arm64 |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| **平台** | 仅限 x64, x86 | x64, x86, arm32, arm64 |'
- en: '| **OS** | Windows | Windows, Linux, macOS |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| **操作系统** | Windows | Windows、Linux、macOS |'
- en: '| **.****NET Version** | .NET Framework 4.5 | .NET 6.0 |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| **.NET 版本** | .NET Framework 4.5 | .NET 6.0 |'
- en: '| **License Type** | Proprietary | Open source |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| **许可证类型** | 专有 | 开源 |'
- en: '| **No. of** **Native Commands** | 1588 (in vanilla Windows 10) | 1574 (in
    vanilla Windows 10)290 (in Ubuntu 20.04) |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| **本地命令数量** | 1588（在原生 Windows 10 中） | 1574（在原生 Windows 10 中）290（在 Ubuntu
    20.04 中） |'
- en: Table 1.1 – Some differences between Windows PowerShell and PowerShell 7
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.1 – Windows PowerShell 和 PowerShell 7 之间的一些差异
- en: In this section, we have covered what PowerShell is, and how it differs from
    Windows PowerShell. In the next section, we’ll look at why PowerShell 7 exists
    and see what makes it special.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分中，我们已经介绍了 PowerShell 是什么，以及它与 Windows PowerShell 的区别。在下一部分中，我们将探讨 PowerShell
    7 的存在意义，并看看它有什么特别之处。
- en: What is PowerShell 7 used for?
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PowerShell 7 用于什么？
- en: 'PowerShell is for getting things done quickly. It’s for when you need a relatively
    short piece of code for something that you can reuse and repurpose easily to do
    something else. It’s for when you don’t want to spend months learning a language,
    then more months writing thousands of lines of code. The language can be used
    in at least four ways:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 是为了快速完成任务。它适用于当你需要一个相对较短的代码片段，并且可以轻松地重用和重新设计来完成其他任务时。它适用于当你不想花几个月时间学习一门语言，再花更多的时间编写成千上万行代码时。这个语言至少可以有四种使用方式：
- en: You can input single lines of code in the shell, as you would at the Windows
    Command Prompt or the Linux Terminal. This is great if you need to check a value,
    accomplish a single task such as rebooting a remote computer, or grab a log file.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以像在 Windows 命令提示符或 Linux 终端中一样，在 shell 中输入单行代码。如果你需要检查一个值、执行一个单一任务（如重启远程计算机）或抓取日志文件时，这非常有用。
- en: You can write a script, such as a Bash script in Linux or a batch file for Windows,
    that accomplishes multiple subtasks, such as gathering event logs and performance
    information from several machines and compiling them into a single HTML report.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以编写一个脚本，比如在 Linux 中的 Bash 脚本或 Windows 中的批处理文件，用来完成多个子任务，例如从几台机器中收集事件日志和性能信息，并将它们汇总成一个单一的
    HTML 报告。
- en: If you write a lot of scripts or need to accomplish something more complex,
    you can use PowerShell as a procedural programming language with multiple packaged
    scripts that each describe a single function and are called by a master script.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你编写了很多脚本或需要完成一些更复杂的任务，你可以将 PowerShell 用作一种过程式编程语言，使用多个封装的脚本，每个脚本描述一个单一的功能，并由主脚本调用。
- en: You can use it as an object-oriented programming language and package a whole
    application that can be redistributed and run by anyone with PowerShell installed.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以将它作为一种面向对象的编程语言，封装一个完整的应用程序，该程序可以重新分发并由任何安装了 PowerShell 的人运行。
- en: We’ll be focusing on scripts and procedural programming in this book, as that
    is how most people use PowerShell. These are very similar; the difference is that
    in a script, you are using cmdlets that have been written for you, but in procedural
    programming, you are creating your own cmdlets, either from pre-existing cmdlets
    or by using the system programming language C#.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将重点讲解脚本和过程式编程，因为这是大多数人使用 PowerShell 的方式。这两者非常相似；不同之处在于，在脚本中，你使用的是已经为你编写的 cmdlet，而在过程式编程中，你正在创建自己的
    cmdlet，可能是从现有的 cmdlet 中创建，或使用系统编程语言 C# 来创建。
- en: Scripting languages versus system programming languages
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 脚本语言与系统编程语言
- en: 'The PowerShell language is a scripting language. It’s for gluing other applications
    together quickly and easily – sort of a coding version of Lego. It relies on an
    underlying interpreter: the PowerShell program. Without PowerShell installed,
    a PowerShell script can’t run. This is quite similar to other interpreted languages,
    such as Python, and sits in contrast to system programming languages, such as
    C or C++, which are compiled into executable files. When you compile a C++ program,
    it can theoretically run on any compatible machine. There are other differences
    as well – here are some of the main ones:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 语言是一种脚本语言。它用于快速且轻松地将其他应用程序粘合在一起——有点像编程版的乐高。它依赖于一个底层的解释器：PowerShell
    程序。如果没有安装 PowerShell，PowerShell 脚本无法运行。这与其他解释型语言（如 Python）类似，并且与系统编程语言（如 C 或 C++）形成对比，后者被编译成可执行文件。当你编译一个
    C++ 程序时，它理论上可以在任何兼容的机器上运行。还有其他差异——以下是一些主要的区别：
- en: Interpreted languages are less efficient than compiled languages because each
    line has to be interpreted before it can run. This means they are slower than
    compiled programs. There are programming tricks you can use to speed things up,
    but performing a task in an interpreted language will pretty much always be slower
    than doing it in a compiled language.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释型语言比编译型语言效率低，因为每一行代码都必须在运行之前进行解释。这意味着它们比编译程序要慢。虽然有一些编程技巧可以加速，但在解释型语言中执行任务通常会比在编译型语言中执行要慢。
- en: Interpreted languages are more efficient than compiled languages in development.
    They accomplish the same tasks with far fewer lines of code. This means that writing
    them, debugging them, and reusing them is much quicker. They are also much easier
    to learn.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释语言在开发中比编译语言更有效率。它们可以用更少的代码完成相同的任务。这意味着编写、调试和重用这些代码会更快。它们也更容易学习。
- en: Interpreted languages can run on multiple architectures. As we’ll see in this
    book, code written in PowerShell can run on Windows, Linux, or macOS, with minimal
    tweaking. A program written in C++ for Windows can only run on Windows, or a machine
    with Windows emulation. It would need to be rewritten and recompiled for a different
    platform.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释语言可以在多种架构上运行。正如本书中所示，使用 PowerShell 编写的代码可以在 Windows、Linux 或 macOS 上运行，只需进行最少的调整。而用
    C++ 编写的程序只能在 Windows 上运行，或者在具有 Windows 模拟的机器上运行。它需要重新编写和重新编译以在不同平台上运行。
- en: Interpreted languages produce collaborative reusable programs. With PowerShell
    (or Python), you produce code that is readable and editable by humans. With a
    compiled language, you produce a binary file that cannot easily be decompiled
    into source code for reuse. This means other people can reuse your code for their
    own purposes. Platforms such as GitHub can be used to distribute your code, other
    people can contribute to it, improve it, reuse it for their programs, and act
    in a generally communitarian fashion.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释语言生成协作可重用的程序。使用 PowerShell（或 Python），您可以生成人类可读且可编辑的代码。而使用编译语言，您生成的是无法轻易反编译为源代码以便重用的二进制文件。这意味着其他人可以为自己的目的重用您的代码。像
    GitHub 这样的平台可以用来分发您的代码，其他人可以为其做出贡献、改进它、将其重用于其程序，并以一种普遍的社区方式行事。
- en: 'It boils down to this: if you want to write a super-fast first-person shooter
    game with spectacular graphics, then PowerShell is probably not the language for
    you. If you want to automate some tasks, simple or complex, then PowerShell is
    a good choice.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 归根结底是这样的：如果您想编写一个具有壮观图形的超快第一人称射击游戏，那么 PowerShell 可能不适合您。如果您想要自动化一些任务，无论是简单还是复杂，PowerShell
    都是一个不错的选择。
- en: Getting PowerShell 7
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取 PowerShell 7
- en: In this section, we’ll look at some of the ways to get PowerShell onto your
    machine, where it goes and why, and how you can control aspects of your installation.
    This chapter will only cover installation on Windows; for detailed installation
    on Linux, macOS, and ARM systems, please have a read of [*Chapter 14*](B17600_14.xhtml#_idTextAnchor280),
    *PowerShell 7 for Linux and macOS*, or [*Chapter 15*](B17600_15.xhtml#_idTextAnchor302),
    *PowerShell 7 and the Raspberry Pi*, and come back for the next two sections of
    this chapter.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨将 PowerShell 安装到计算机上的一些方法、安装位置及其原因，以及如何控制安装的各个方面。本章仅涵盖 Windows 上的安装；有关
    Linux、macOS 和 ARM 系统的详细安装，请参阅[*第 14 章*](B17600_14.xhtml#_idTextAnchor280)，*Linux
    和 macOS 上的 PowerShell 7*，或[*第 15 章*](B17600_15.xhtml#_idTextAnchor302)，*PowerShell
    7 和树莓派*，然后返回本章的后两节。
- en: 'It’s possible to have more than one version of PowerShell running simultaneously
    on your machine – I usually have three at once: Windows PowerShell, PowerShell
    7 (current version), and PowerShell 7 Preview. This is not just for when I’m writing
    a book – we need to know that the scripts we write will run in different environments
    and rewrite them if necessary. It’s also useful to be able to control the installation
    when you’re intending to run PowerShell on a remote machine that may not have
    it installed yet. Windows PowerShell is included in the Windows operating system
    and is installed in the `\Windows\system32` folder; that’s where it lives, and
    you can’t move it anywhere else. In contrast, PowerShell 7 can be installed wherever
    you like, within reason. We’re going to cover the three most common methods of
    installation:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您的计算机上可能同时运行多个 PowerShell 版本 - 我通常一次运行三个版本：Windows PowerShell、PowerShell 7（当前版本）和
    PowerShell 7 预览版。这不仅适用于我写书时使用 - 我们需要确保我们编写的脚本可以在不同的环境中运行，并在必要时重新编写它们。当您计划在尚未安装
    PowerShell 的远程计算机上运行 PowerShell 时，控制安装也非常有用。Windows PowerShell 包含在 Windows 操作系统中，并安装在
    `\Windows\system32` 文件夹中；它的存在位置不可更改。相比之下，PowerShell 7 可以根据需要安装在任何地方。我们将介绍安装的三种最常见方法：
- en: Installation from an `.msi` file with Windows installer
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Windows 安装程序从 `.msi` 文件安装
- en: Installation from a `.``zip` file
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 `.``zip` 文件安装
- en: Installation with winget
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 winget 安装
- en: 'There are two other methods that we will cover briefly: installing from the
    Microsoft Store, and installing as a .NET Global tool.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将简要介绍另外两种方法：从 Microsoft Store 安装和安装为 .NET 全局工具。
- en: If you want to experiment a little, and you have Windows 10 Pro or Enterprise,
    then you can enable the **Windows Sandbox** feature in **Control Panel** | **Programs
    and Features** | **Turn Windows features on or off**.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想做些实验，并且你有 Windows 10 专业版或企业版，那么可以在 **控制面板** | **程序和功能** | **启用或关闭 Windows
    功能** 中启用 **Windows Sandbox** 功能。
- en: 'This will give you a completely blank, secure Windows environment to play around
    in. Be careful – when you turn it off, it’s gone for good. The next time you turn
    it on, all your changes will be lost:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为你提供一个完全空白、安全的 Windows 环境供你尝试。请小心——当你关闭它时，它就会永久消失。下次启动时，你所有的更改将会丢失：
- en: '![Figure 1.2 – Turning on Windows Sandbox](img/B17600_01_002.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – 开启 Windows Sandbox](img/B17600_01_002.jpg)'
- en: Figure 1.2 – Turning on Windows Sandbox
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 开启 Windows Sandbox
- en: 'Full details of the requirements for running Windows Sandbox can be found here:
    [https://docs.microsoft.com/en-us/Windows/security/threat-protection/Windows-sandbox/Windows-sandbox-overview](https://docs.microsoft.com/en-us/Windows/security/threat-protection/Windows-sandbox/Windows-sandbox-overview).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有关运行 Windows Sandbox 的详细要求，请参见此链接：[https://docs.microsoft.com/en-us/Windows/security/threat-protection/Windows-sandbox/Windows-sandbox-overview](https://docs.microsoft.com/en-us/Windows/security/threat-protection/Windows-sandbox/Windows-sandbox-overview)。
- en: Let’s get started. Make sure you have met the technical requirements listed
    at the beginning of the chapter.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。请确保你已经满足章节开始部分列出的技术要求。
- en: Installation from an .msi file
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 .msi 文件进行安装
- en: 'All of the official PowerShell distributions can be found on the PowerShell
    GitHub page at [https://github.com/PowerShell/PowerShell](https://github.com/PowerShell/PowerShell):'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 所有官方的 PowerShell 发行版都可以在 PowerShell 的 GitHub 页面找到：[https://github.com/PowerShell/PowerShell](https://github.com/PowerShell/PowerShell)：
- en: '![Figure 1.3 – Get PowerShell from the GitHub page](img/B17600_01_003.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – 从 GitHub 页面获取 PowerShell](img/B17600_01_003.jpg)'
- en: Figure 1.3 – Get PowerShell from the GitHub page
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 从 GitHub 页面获取 PowerShell
- en: 'As you can see, for most operating systems and platforms, there are three types
    of release: **LTS**, **stable**, and **preview**. **LTS** stands for **Long Term
    Support**. LTS releases come out on a slow cadence, to ensure stability in environments
    that are risk-averse, and they usually only contain critical security updates
    and software fixes, not new features. The PowerShell LTS releases are based on
    the underlying LTS version of .NET. The preview release is the next version of
    PowerShell. It may have exciting new features, but it will also likely be unstable
    and have some flaws. Stable releases are updated every month or so and may include
    new functionality, as well as software fixes and security updates. Each release
    is supported for six months after the next release.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，对于大多数操作系统和平台，有三种版本发布类型：**LTS**、**稳定版**和**预览版**。**LTS** 代表 **长期支持**。LTS
    版本的发布速度较慢，旨在确保在风险规避的环境中保持稳定，它们通常仅包含关键的安全更新和软件修复，而不会加入新功能。PowerShell 的 LTS 版本基于
    .NET 的 LTS 版本。预览版是 PowerShell 的下一个版本，可能会有令人兴奋的新特性，但也可能不稳定，存在一些缺陷。稳定版每月更新一次，可能包含新功能，以及软件修复和安全更新。每个版本在发布下一个版本后，支持六个月。
- en: 'Let’s go ahead and install the most common release, the stable release for
    Windows x64:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续安装最常见的版本——适用于 Windows x64 的稳定版：
- en: 'Browse to the GitHub Releases page for PowerShell here: [https://github.com/PowerShell/PowerShell](https://github.com/PowerShell/PowerShell).'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里浏览 PowerShell 的 GitHub 发布页面：[https://github.com/PowerShell/PowerShell](https://github.com/PowerShell/PowerShell)。
- en: Click to download the stable `.msi` package for Windows x64.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下载适用于 Windows x64 的稳定 `.msi` 安装包。
- en: Locate the `.msi` file in your `Downloads` folder and run it. This will start
    the setup wizard.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 `Downloads` 文件夹中找到 `.msi` 文件并运行它，这将启动安装向导。
- en: 'The first choice you must make is the install location. By default, it will
    install into a numbered folder under `C:\Program Files\PowerShell`, where the
    number matches the major version – in our case, `7`. If you are installing a preview
    version, then the folder will have a `-preview` suffix. This is a pretty good
    location, but you may want to put it somewhere else, for example, if you are running
    multiple versions of PowerShell side by side. Go ahead and accept the default
    this time:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要做的第一个选择是安装位置。默认情况下，它会安装到 `C:\Program Files\PowerShell` 下的一个编号文件夹中，其中编号与主版本号相匹配——在我们这个例子中是
    `7`。如果你安装的是预览版，那么文件夹名会带有 `-preview` 后缀。这是一个相当不错的位置，但如果你同时运行多个版本的 PowerShell，可能会希望将其安装到其他位置。此次就接受默认设置吧：
- en: '![Figure 1.4 – The default install location](img/B17600_01_004.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – 默认安装位置](img/B17600_01_004.jpg)'
- en: Figure 1.4 – The default install location
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – 默认安装位置
- en: 'Now we get to the **Optional** **Actions** menu:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们进入了**可选操作**菜单：
- en: "![Figure 1.5 \uFEFF– Optional Actions](img/B17600_01_005.jpg)"
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – 可选操作](img/B17600_01_005.jpg)'
- en: Figure 1.5 – Optional Actions
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 可选操作
- en: 'There are five options here:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有五个选项：
- en: '`pwsh.exe` to run this one.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `pwsh.exe` 来运行此命令。
- en: '**Register Windows Event Logging Manifest**: You will want to enable this as
    well. This will create a new Windows Event log called **PowerShell Core** and
    start logging PowerShell events to it.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册 Windows 事件日志清单**：您也应该启用此选项。这将创建一个新的 Windows 事件日志，名为**PowerShell Core**，并开始记录
    PowerShell 事件。'
- en: '**Enable PowerShell remoting**: Enabling PowerShell remoting will make the
    machine listen for incoming connections from PowerShell sessions. This is obviously
    a bit of a security vulnerability, so you should only enable it if you need it
    and your machine is on a private network. You don’t need to enable it to connect
    to remote sessions on other machines.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用 PowerShell 远程功能**：启用 PowerShell 远程功能将使计算机监听来自 PowerShell 会话的传入连接。显然，这在安全上存在一些漏洞，因此只有在需要时并且您的计算机处于私有网络中时才应启用它。您不需要启用它来连接到其他计算机的远程会话。'
- en: '**Add ‘Open here’ context menus to Explorer**: This will allow you to open
    a PowerShell session in a folder in File Explorer – the PowerShell session will
    open with the path set to the folder you selected.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在资源管理器中添加“在此打开”上下文菜单**：这将允许您在文件资源管理器中的文件夹中打开 PowerShell 会话——PowerShell 会话将打开，并且路径会设置为您选择的文件夹。'
- en: '**Add ‘Run with PowerShell 7’ context menu for PowerShell files**: This will
    allow you to right-click a file and open it with PowerShell 7\. For reasons we
    will see later, this might not always be desirable.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为 PowerShell 文件添加“使用 PowerShell 7 运行”上下文菜单**：这将允许您右键单击文件并使用 PowerShell 7
    打开它。由于后面我们将看到的原因，这可能并不总是可取的。'
- en: After **Optional Actions**, we come to the **Microsoft Update** option. You
    can use Microsoft Update to keep PowerShell updated; this is highly recommended
    as it can automatically download security patches for you and apply them according
    to your existing update schedule. Be aware that this setting can be overridden
    by group policy if you are working in a domain-joined environment. There are two
    checkboxes; the first enables updates for PowerShell, while the second enables
    Microsoft Update on the system. Note that unchecking this box only disables Microsoft
    Update; if your environment uses a configuration manager such as **Windows Software
    Update Services** (**WSUS**) or **System Center Configuration Manager** (**SCCM**),
    then they will still work.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**可选操作**之后，我们进入了**Microsoft 更新**选项。您可以使用 Microsoft 更新来保持 PowerShell 的最新状态；强烈建议启用此选项，因为它可以自动为您下载安全补丁并根据现有的更新计划应用它们。请注意，如果您在域环境中工作，此设置可能会被组策略覆盖。有两个复选框，第一个用于启用
    PowerShell 更新，第二个用于启用系统上的 Microsoft 更新。请注意，取消选中此框只会禁用 Microsoft 更新；如果您的环境使用了如**Windows
    软件更新服务**（**WSUS**）或**系统中心配置管理器**（**SCCM**）等配置管理工具，它们仍会继续工作。
- en: Finally, we’re ready to install by pressing the **Install** button. This is
    a short process and should be done in a minute or two. Click **Finish**, and we’re
    all set.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们准备通过点击**安装**按钮来安装。这个过程很短，应该在一两分钟内完成。点击**完成**，我们就完成了安装。
- en: 'There is an alternative to using the GUI. You can run the `.msi` file from
    the command line with `msiexec.exe`, as documented here: [https://docs.microsoft.com/en-gb/powershell/scripting/install/installing-powershell-on-Windows?view=powershell-7.2#install-the-msi-package-from-the-command-line](https://docs.microsoft.com/en-gb/powershell/scripting/install/installing-powershell-on-Windows?view=powershell-7.2#install-the-msi-package-from-the-command-line).'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种替代方法，不使用 GUI。您可以通过命令行使用 `msiexec.exe` 运行 `.msi` 文件，具体文档见此处：[https://docs.microsoft.com/en-gb/powershell/scripting/install/installing-powershell-on-Windows?view=powershell-7.2#install-the-msi-package-from-the-command-line](https://docs.microsoft.com/en-gb/powershell/scripting/install/installing-powershell-on-Windows?view=powershell-7.2#install-the-msi-package-from-the-command-line)。
- en: 'To silently install PowerShell on Windows Sandbox as you’ve just been shown,
    you can run the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如您刚刚所示，要在 Windows 沙盒中静默安装 PowerShell，您可以运行以下命令：
- en: '[PRE0]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice that there is no property for enabling or disabling `.msi` file from
    the command line, then PowerShell will automatically get added. Because we’ve
    used the `/quiet` switch, there is no output to this command, but if it is successful,
    then you will see PowerShell in your Start menu.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，命令行没有启用或禁用 `.msi` 文件的属性，因此 PowerShell 会自动添加。由于我们使用了 `/quiet` 开关，此命令不会有输出，但如果成功，您将会在开始菜单中看到
    PowerShell。
- en: Activity 1
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 活动 1
- en: 'How might you enable the file context menu when installing PowerShell from
    an `.msi` file using the command line? (Hint: Check the link in the earlier paragraph
    to find out.)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如何在使用命令行从 `.msi` 文件安装 PowerShell 时启用文件上下文菜单？（提示：查看前面段落中的链接了解详情。）
- en: Installation from the .zip file
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 `.zip` 文件安装
- en: Another popular way to install PowerShell is from the `.zip` file. With this
    method, we simply extract the binaries and associated files to a suitable folder.
    The disadvantage is that the prerequisite checking and options that are available
    with the `.msi` install are lost; for instance, you can’t automatically add PowerShell
    to the `PATH` environment variable or enable PowerShell remoting. The advantage
    is that it is much easier to script the installation of PowerShell as part of
    a DevOps or Infrastructure as Code pipeline, and you can enable other features
    as part of the script.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种流行的安装 PowerShell 的方式是通过 `.zip` 文件。使用这种方法，我们只是将二进制文件和相关文件提取到合适的文件夹中。缺点是，你将失去
    `.msi` 安装时的前置条件检查和选项；例如，你不能自动将 PowerShell 添加到 `PATH` 环境变量中或启用 PowerShell 远程功能。优点是，它使得在
    DevOps 或基础设施即代码管道中脚本化安装 PowerShell 变得更容易，并且可以在脚本中启用其他功能。
- en: In Windows, there’s no native way to install a file from the internet via scripting.
    You need to either already have PowerShell (which you automatically do in the
    form of Windows PowerShell on a Windows machine), or install a tool such as **curl**.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 中，没有原生的方式通过脚本从互联网安装文件。你需要已经安装了 PowerShell（在 Windows 机器上，Windows PowerShell
    会自动安装），或者安装一个像 **curl** 这样的工具。
- en: 'Here’s how you do it with Windows PowerShell:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你用 Windows PowerShell 执行的方式：
- en: '[PRE1]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you run the preceding cmdlet, then you should see output like this. Notice
    that it’s an HTTP response, and so a `StatusCode` result of `200` is good:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行前面的 cmdlet，你应该会看到如下输出。注意，这是一个 HTTP 响应，因此 `StatusCode` 结果为 `200` 是好的：
- en: '![Figure 1.6 – Downloading PowerShell 7 with Windows PowerShell](img/B17600_01_006.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6 – 使用 Windows PowerShell 下载 PowerShell 7](img/B17600_01_006.jpg)'
- en: Figure 1.6 – Downloading PowerShell 7 with Windows PowerShell
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – 使用 Windows PowerShell 下载 PowerShell 7
- en: 'You can run the entire process like this with four lines of code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像这样通过四行代码运行整个过程：
- en: '[PRE2]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Don’t worry too much about the preceding commands – we’ll be covering all of
    them in due course. In summary, the first line creates a new folder. The second
    line downloads the `.zip` package from GitHub to your new folder. The third line
    unzips everything, making it ready for you to run, and the fourth line removes
    the downloaded package.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 不要太担心前面的命令——我们稍后会逐一讲解。总的来说，第一行创建一个新文件夹，第二行从 GitHub 下载 `.zip` 包到你新建的文件夹中，第三行解压所有文件，准备好运行，第四行则删除下载的包。
- en: 'There are two errors you may experience with this. Firstly, you may see a red
    error message:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会遇到两个错误。首先，你可能会看到一个红色的错误信息：
- en: '[PRE3]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is because, by default, Windows PowerShell will use TLS v1.0, and many
    websites no longer accept this protocol. If you do see this, run the following
    .NET code and try again:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为，默认情况下，Windows PowerShell 会使用 TLS v1.0，而许多网站不再接受此协议。如果你看到这个错误，运行以下 .NET
    代码并再试一次：
- en: '[PRE4]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The other error you may see is a message saying this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个你可能会看到的错误信息是：
- en: '[PRE5]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In this case, run the `Invoke-WebRequest` cmdlet with the `–``UseBasicParsing`
    parameter:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，使用 `–``UseBasicParsing` 参数运行 `Invoke-WebRequest` cmdlet：
- en: '[PRE6]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Replace the second line of the script with this line. It’s exactly the same
    but adds the `–``UseBasicParsing` parameter.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 将脚本中的第二行替换为这一行。它与之前的完全相同，但增加了 `–``UseBasicParsing` 参数。
- en: Installation with winget
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 winget 安装
- en: '`.exe`, `.msi`, and `.msix` packages – you can’t use it to install the `.zip`
    release. When you run winget, it searches for, downloads, and installs the PowerShell
    `.msi` release of your choice. You do it like this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`.exe`、`.msi` 和 `.msix` 包 – 你不能用它来安装 `.zip` 版本。当你运行 winget 时，它会搜索、下载并安装你选择的
    PowerShell `.msi` 版本。操作如下：'
- en: 'First, run a search for PowerShell packages. From the Windows PowerShell Command
    Prompt, run this line:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，运行 PowerShell 包的搜索。从 Windows PowerShell 命令提示符下，运行以下命令：
- en: '[PRE7]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will return the versions of PowerShell available to winget.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回 winget 可用的 PowerShell 版本。
- en: 'You then need to install a package. I’m choosing to install the preview by
    running the following:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你需要安装一个包。我选择通过运行以下命令来安装预览版：
- en: '[PRE8]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: And that’s it. There are a few things to note here. Firstly, you’re installing
    the `.msi` file, so unless you suppress them, you will see several GUI messages.
    You can do this with the `--silent` switch. Unless you are happy with the default
    choices, you will also need a way to pass parameters to the `.msi` file you are
    calling. You can do this with the `–-override` switch, and then by passing the
    command-line switches for the `.msi` package that we looked at before. Secondly,
    if you have User Access Control enabled, you will need to give permission for
    PowerShell to be installed. If you’re using the `--silent` switch, then you won’t
    see this prompt. If you want to do a silent install, you’ll need to run Windows
    PowerShell with administrator privileges.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。这里有几点需要注意。首先，你正在安装 `.msi` 文件，因此除非你抑制它们，否则会看到多个图形界面消息。你可以使用 `--silent` 开关来抑制这些消息。除非你接受默认选择，否则你还需要一种方法来向调用的
    `.msi` 文件传递参数。你可以使用 `--override` 开关，然后传递我们之前查看过的 `.msi` 包的命令行开关。其次，如果你启用了用户访问控制（UAC），你需要允许
    PowerShell 安装。如果你使用 `--silent` 开关，那么你不会看到这个提示。如果你想进行静默安装，你需要以管理员权限运行 Windows PowerShell。
- en: 'Here’s how the whole install looks if you run it from a Windows PowerShell
    command line with administrator privileges:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以管理员权限从 Windows PowerShell 命令行运行安装命令，整个安装过程如下所示：
- en: '![Figure 1.7 – Silently installing PowerShell with winget](img/B17600_01_007.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.7 – 使用 winget 静默安装 PowerShell](img/B17600_01_007.jpg)'
- en: Figure 1.7 – Silently installing PowerShell with winget
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7 – 使用 winget 静默安装 PowerShell
- en: 'The main advantage of winget is that it has its own repository for community-created
    packages; anyone can bundle an app by writing a manifest and uploading it. The
    repository is secured with Microsoft SmartScreen to stop malicious code from finding
    its way into the repository. There’s a lot more on winget here:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: winget 的主要优势是它有自己的社区创建的包管理库；任何人都可以通过编写清单并上传来打包一个应用。该库使用微软的 SmartScreen 技术加以保护，以防恶意代码进入库中。关于
    winget 还有很多内容，请参考这里：
- en: '[https://docs.microsoft.com/en-us/Windows/package-manager/winget/.](https://docs.microsoft.com/en-us/Windows/package-manager/winget/
    )'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/zh-cn/Windows/package-manager/winget/.](https://docs.microsoft.com/en-us/Windows/package-manager/winget/)'
- en: In summary, you’re not really doing anything with winget that you didn’t do
    by running `msiexec.exe` previously, but it’s a bit newer and cooler, has a useful
    repository, and is slightly easier to use. In a couple of years, we’ll wonder
    how we ever did without it, especially if they make it available on Windows servers.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，你通过 winget 所做的事情其实与之前通过运行 `msiexec.exe` 所做的没有什么不同，只是它稍微新一些、更酷，并且拥有一个有用的包管理库，使用起来也稍微容易一些。几年后，我们会想，曾经没有它时我们是怎么做的，尤其是如果它在
    Windows 服务器上也可用的话。
- en: Other ways to install
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他安装方式
- en: There are two other ways to install PowerShell that we should discuss. Neither
    is likely to be applicable to us. Firstly, if you have the .NET **Software Development
    Kit** (**SDK**) installed, then we can use that to install PowerShell as a global
    tool. This is only really useful for software developers, and it doesn’t make
    much sense to install the SDK just for PowerShell.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该讨论的还有另外两种安装 PowerShell 的方式。两者都不太可能适用于我们。首先，如果你已经安装了 .NET **软件开发工具包**（**SDK**），那么我们可以使用它将
    PowerShell 安装为一个全局工具。这个方法实际上只对软件开发人员有用，而且仅为了 PowerShell 安装 SDK 并不太有意义。
- en: The other way you can install PowerShell on Windows is through the Microsoft
    Store as an app. The big drawback to this method is that Store apps run in a sandbox
    environment that restricts access to the application’s root folder. This means
    that several PowerShell features just won’t work properly.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种在 Windows 上安装 PowerShell 的方式是通过微软商店作为应用安装。此方法的主要缺点是商店应用运行在一个沙盒环境中，这限制了对应用根文件夹的访问。这意味着一些
    PowerShell 功能将无法正常工作。
- en: Note
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: A **sandbox** is not necessarily the same as **Windows Sandbox**. The generic
    term “sandbox” refers to a secure computing environment with separate resources,
    meaning that whatever is running in there cannot interfere with anything outside
    the sandbox. Windows Sandbox is a specific example of a generic sandbox.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**沙盒** 不一定等同于 **Windows 沙盒**。术语“沙盒”通常指的是一个具有独立资源的安全计算环境，这意味着运行在其中的任何东西都不能干扰沙盒外的内容。Windows
    沙盒是沙盒的一种特定实现。'
- en: Running PowerShell 7
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 PowerShell 7
- en: The first way everyone runs PowerShell is through the bundled console (remember,
    PowerShell is not just a language, it’s a shell and a configuration management
    framework as well). Let’s assume that you installed using the `.msi` method from
    before, and you added PowerShell to the `PATH` environment variable. If you’ve
    done this, then all you need to do to start PowerShell is type `pwsh` into the
    Windows search bar and click on the application. Alternatively, you can right-click
    the *Start* menu and type `pwsh` in the **Run** box. Or, you could just hold down
    the *Windows* key and press *R*, which would call up the **Run** box as well.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人运行 PowerShell 的第一种方式是通过捆绑的控制台（记住，PowerShell 不仅仅是一种语言，它还是一个 shell 和配置管理框架）。假设你使用之前的
    `.msi` 方法进行安装，并将 PowerShell 添加到了 `PATH` 环境变量中。如果你已经这么做了，那么启动 PowerShell 只需要在 Windows
    搜索框中输入 `pwsh` 并点击应用程序。或者，你也可以右键点击 *开始* 菜单，在 **运行** 框中输入 `pwsh`。或者，你也可以按住 *Windows*
    键并按 *R*，这也会打开 **运行** 框。
- en: If you didn’t add PowerShell to the path, you will need to type the full path
    to the executable `pwsh`, as in `C:\program files\PowerShell\7\pwsh`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有将 PowerShell 添加到路径中，你将需要输入完整的可执行文件路径 `pwsh`，例如 `C:\program files\PowerShell\7\pwsh`。
- en: 'The first thing you will notice if you’ve been paying attention to the preceding
    screenshots or you’ve followed along is that the console window that comes up
    has a black background. This differentiates it from Windows PowerShell:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你关注了前面的截图，或者跟随步骤操作，你首先会注意到控制台窗口的背景是黑色的。这将其与 Windows PowerShell 区分开来：
- en: '![Figure 1.8 – Two different versions of PowerShell](img/B17600_01_008.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.8 – 两种不同版本的 PowerShell](img/B17600_01_008.jpg)'
- en: Figure 1.8 – Two different versions of PowerShell
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8 – 两种不同版本的 PowerShell
- en: If you have installed PowerShell on Linux or macOS, then open a Terminal and
    type `pwsh` – the Terminal will switch to a PowerShell prompt.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 Linux 或 macOS 上安装了 PowerShell，那么请打开终端并输入 `pwsh` —— 终端会切换到 PowerShell 提示符。
- en: 'It is traditional in most programming books that the first thing you do is
    coax your application to produce the words `"Hello World"` onscreen, and there’s
    no reason we should be any different. Type the following into the console and
    press *Enter*:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数编程书籍中，传统的第一步是让你的应用程序在屏幕上显示 `"Hello World"` 字样，我们也不例外。请在控制台中输入以下内容并按 *Enter*
    键：
- en: '[PRE9]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should get something like this:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到类似这样的内容：
- en: '![Figure 1.9 – Hello yourself](img/B17600_01_009.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.9 – 你好，自己](img/B17600_01_009.jpg)'
- en: Figure 1.9 – Hello yourself
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.9 – 你好，自己
- en: If you did it, congratulations! You’ve just run your first PowerShell command,
    or cmdlet, as they are called.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你完成了，恭喜你！你刚刚运行了第一个 PowerShell 命令，或者叫做 cmdlet。
- en: Notice that the console automatically colors things that it recognizes or expects;
    cmdlets are yellow, strings are blue. It’s also very forgiving – if you had forgotten
    the inverted commas, then `"Hello World"` would not have been blue, but PowerShell
    would have interpreted it correctly anyway.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，控制台会自动为它识别或期望的内容着色；cmdlet 是黄色的，字符串是蓝色的。它也非常宽容——如果你忘记了引号，`"Hello World"` 将不会是蓝色的，但
    PowerShell 仍然会正确地解析它。
- en: Note
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Be careful with this; while PowerShell is quite clever, it won’t always interpret
    input the way you hope. It’s best to tell it explicitly what type of input you
    are giving it. More on this later.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 小心使用这一点；虽然 PowerShell 非常智能，但它并不总是按你希望的方式解读输入。最好明确告诉它你正在输入的是什么类型的内容。稍后会详细讲解。
- en: 'The most likely cause of an error is that you misspelled the cmdlet or didn’t
    close the inverted commas, as illustrated in the next figure. You’ll see a helpful
    red error message telling you what you’ve done wrong and suggesting ways to fix
    it. I have come to cherish these error messages:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 错误最常见的原因是你拼写错了 cmdlet 或者没有关闭引号，如下图所示。你会看到一个有帮助的红色错误信息，告诉你哪里出错了，并建议你如何修复它。我已经开始珍惜这些错误信息了：
- en: '![Figure 1.10 – Three ways to be wrong](img/B17600_01_010.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.10 – 三种错误方式](img/B17600_01_010.jpg)'
- en: Figure 1.10 – Three ways to be wrong
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.10 – 三种错误方式
- en: In the third attempt, I didn’t close the inverted commas, so PowerShell was
    expecting more input. It told us this with `>>` on the line below. It also told
    us that it didn’t think the cmdlet would run as you have written it by coloring
    the `>` in the Command Prompt in red.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三次尝试时，我没有关闭引号，因此 PowerShell 期望更多输入。它通过下面一行的 `>>` 告诉我们这一点。它还通过将命令提示符中的 `>`
    标记为红色，告诉我们它认为命令行不会按你写的那样运行。
- en: Note that unlike in some environments, capitalization here doesn’t matter; `write-host`
    is functionally the same as `Write-Host`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，不像某些环境中那样，这里大小写不重要；`write-host` 和 `Write-Host` 在功能上是相同的。
- en: Running PowerShell with administrator privileges
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以管理员权限运行 PowerShell
- en: By default, PowerShell will run under the account that launches it, but it will
    only have standard user privileges. If you need access to your local machine that
    would normally require administrator privileges, then PowerShell will either fail
    to run some cmdlets or give you a **User Account Control** (**UAC**) prompt. To
    prevent this, you need to start PowerShell with administrator privileges. There
    are many ways to do this, but here are two of the most common.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，PowerShell 会在启动它的帐户下运行，但它只会拥有标准用户权限。如果你需要访问通常需要管理员权限的本地机器，那么 PowerShell
    会无法运行某些 cmdlet，或者会弹出 **用户帐户控制**（**UAC**）提示。为了避免这种情况，你需要以管理员权限启动 PowerShell。这里有很多方法来实现，但以下是两种最常见的方法。
- en: 'Firstly, you can open the search bar, type `pwsh`, and then right-click on
    the PowerShell 7 icon and select **Run** **as administrator**:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你可以打开搜索栏，输入`pwsh`，然后右键点击 PowerShell 7 图标并选择**以管理员身份运行**：
- en: '![Figure 1.11 – Starting PowerShell as an administrator](img/B17600_01_011.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.11 – 以管理员身份启动 PowerShell](img/B17600_01_011.jpg)'
- en: Figure 1.11 – Starting PowerShell as an administrator
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.11 – 以管理员身份启动 PowerShell
- en: The second, slightly more impressive method is to hit the *Windows* key + *R*
    to bring up the `pwsh`, and then hold down *Ctrl* + *Shift* + *Enter*. This will
    start PowerShell as an admin.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种稍微更强大的方法是按下*Windows*键 + *R* 打开 `pwsh`，然后按住 *Ctrl* + *Shift* + *Enter*，这将以管理员身份启动
    PowerShell。
- en: 'PowerShell clearly shows whether it is running with admin privileges in the
    window title. Here are two PowerShell sessions running the same cmdlet. The lower
    window is running with admin privileges:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 会清楚地在窗口标题中显示它是否以管理员权限运行。以下是两个 PowerShell 会话运行相同 cmdlet 的情况。下方的窗口是以管理员权限运行的：
- en: '![Figure 1.12 – Sometimes you have to be an admin](img/B17600_01_012.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.12 – 有时你需要是管理员](img/B17600_01_012.jpg)'
- en: Figure 1.12 – Sometimes you have to be an admin
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.12 – 有时你需要是管理员
- en: If administrator mode is something you are likely to use a lot, then it’s easiest
    to just right-click the PowerShell icon when it’s running and select **Pin to
    taskbar**. Then you can right-click the pinned icon whenever you need it and select
    **Run** **as administrator**.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你经常需要使用管理员模式，最简单的办法是右键点击正在运行的 PowerShell 图标并选择**固定到任务栏**。然后，你可以在需要时右键点击固定的图标并选择**以管理员身份运行**。
- en: Autocomplete
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动补全
- en: 'By now, you’re probably getting a little tired of having to type a lot of long
    and unfamiliar cmdlets in. Let me show you a great feature of the shell: autocomplete.
    Try this – in your shell, type the following without pressing *Enter*:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你可能已经有些厌倦了不断输入大量长且不熟悉的 cmdlet。让我向你展示一个非常棒的 shell 功能：自动补全。试试这个——在你的 shell
    中，输入以下内容，不要按 *Enter*：
- en: '[PRE10]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now press the *Tab* key. Cool, isn’t it? But it’s not the cmdlet we want. Press
    the *Tab* key again. You should now have the `Stop-Service` cmdlet fully typed.
    Now, add a space, type `-`, and press the *Tab* key again. Keep pressing the *Tab*
    key until you’ve gone through all the possible parameters for the `Stop-Service`
    cmdlet. Press *Esc* when you’ve done that.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按下 *Tab* 键。酷吧？不过这还不是我们想要的 cmdlet。再按一次 *Tab* 键。此时你应该看到 `Stop-Service` cmdlet
    完整地输入了。现在，添加一个空格，输入 `-`，然后再次按 *Tab* 键。继续按 *Tab* 键，直到你浏览完 `Stop-Service` cmdlet
    所有可能的参数。完成后按 *Esc* 键。
- en: This is a great way to avoid typing out loads of letters, but it’s also a really
    good way of checking that what you are doing will work. If autocomplete doesn’t
    work, then the chances are that the cmdlet, parameter, or option you want isn’t
    available on this machine.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的方法，可以避免输入大量字母，但它也是一个检查你所做操作是否有效的好方式。如果自动补全不起作用，那很可能是你想要的 cmdlet、参数或选项在这台机器上不可用。
- en: In the next chapter, we’ll look at some other ways of starting and using PowerShell,
    but for now, you’re all set with what you need.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将探讨一些启动和使用 PowerShell 的其他方法，但现在，你已经准备好所需的一切了。
- en: Getting help
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取帮助
- en: 'Now that you’ve installed PowerShell and can start it, you need to do stuff
    with it. You’re going to need help with that. Happily, PowerShell comes with three
    useful cmdlets built in: `Get-Command`, `Get-Help`, and `Get-Member`. Each of
    these cmdlets will tell you useful things and give you guidance. Let’s start with
    `Get-Command`.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经安装了 PowerShell 并可以启动它，你需要用它来做一些事情。你肯定需要一些帮助。幸运的是，PowerShell 内置了三个非常有用的
    cmdlet：`Get-Command`、`Get-Help` 和 `Get-Member`。这些 cmdlet 将告诉你一些有用的内容，并提供指导。我们先从
    `Get-Command` 开始。
- en: Get-Command
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Get-Command
- en: '`Get-Command` will give you a list of cmdlets. If you type it in just like
    that, it will give you a list of around 1,500 cmdlets. When you start installing
    and writing modules, that list will grow significantly. Scrolling through a list
    of thousands looking for a likely cmdlet is not that efficient. What you need
    to do is search the list.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`Get-Command` 会给你一个 cmdlet 列表。如果你直接输入它，它会列出大约 1,500 个 cmdlet。当你开始安装和编写模块时，这个列表会大大增加。浏览成千上万的
    cmdlet 以寻找可能的命令并不是很高效。你需要做的是搜索这个列表。'
- en: 'Imagine you need to interrogate a particular process that is running on your
    client. It is likely that a cmdlet for doing that would include the word `process`
    somewhere. Go ahead and try typing the following into your shell:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你需要调查正在你客户端上运行的某个特定进程。一个执行此操作的 cmdlet 很可能会在某个地方包含 `process` 这个词。试着在你的 shell
    中输入以下内容：
- en: '[PRE11]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You should see something like this:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到类似这样的内容：
- en: '![Figure 1.13 – Searching for relevant cmdlets](img/B17600_01_013.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.13 – 搜索相关 cmdlet](img/B17600_01_013.jpg)'
- en: Figure 1.13 – Searching for relevant cmdlets
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13 – 搜索相关 cmdlet
- en: 'The cmdlet interprets `*process` as a string and searches for cmdlets that
    end in `process`. The `*` is a wildcard character. Try running it like this:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 该 cmdlet 会将 `*process` 解释为一个字符串，并搜索以 `process` 结尾的 cmdlet。`*` 是一个通配符字符。尝试像这样运行它：
- en: '[PRE12]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You’ll probably get an error in red.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会看到一个红色的错误。
- en: 'Some of those cmdlets look a bit cryptic, but there are a few that really stand
    out – `Get-Process` especially. Try running that. You should see quite a long
    list of processes and some information about them. Let’s look at a process I know
    you’re currently running: `pwsh`. Type the following:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 cmdlet 中有些看起来有点复杂，但也有一些特别突出——尤其是 `Get-Process`。试着运行它。你应该会看到一长串进程以及关于它们的一些信息。让我们看看一个我知道你正在运行的进程：`pwsh`。输入以下内容：
- en: '[PRE13]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You should see information for your PowerShell processes:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到有关你 PowerShell 进程的信息：
- en: '![Figure 1.14 – My PowerShell processes](img/B17600_01_014.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.14 – 我的 PowerShell 进程](img/B17600_01_014.jpg)'
- en: Figure 1.14 – My PowerShell processes
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.14 – 我的 PowerShell 进程
- en: 'That’s very nice, but what does it all mean? Let’s look at the next of our
    three helpful cmdlets: `Get-Help`.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这很不错，但它到底意味着什么呢？让我们来看一下我们的三个有用 cmdlet 之一：`Get-Help`。
- en: Get-Help
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Get-Help
- en: 'Running the `Get-Help` cmdlet is easy; type `Get-Help` followed by the name
    of the cmdlet you would like help with:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `Get-Help` cmdlet 很简单；输入 `Get-Help` 后跟你希望获得帮助的 cmdlet 名称：
- en: '[PRE14]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You should then see something like this:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你应该会看到类似这样的内容：
- en: '![Figure 1.15 – Running Get-Help for the first time](img/B17600_01_015.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.15 – 第一次运行 Get-Help](img/B17600_01_015.jpg)'
- en: Figure 1.15 – Running Get-Help for the first time
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.15 – 第一次运行 Get-Help
- en: 'That doesn’t look very helpful. However, if you read the `REMARKS` section,
    there’s an explanation. PowerShell doesn’t ship with full help; you need to download
    and update it. To update the help files, run the following:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来不太有帮助。然而，如果你阅读 `REMARKS` 部分，会有一个解释。PowerShell 并没有自带完整的帮助文件；你需要下载并更新它们。要更新帮助文件，运行以下命令：
- en: '[PRE15]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: It will take a little while to run, and if you have installed some modules,
    help files may not be available online for all of them, so you will see red error
    messages, but after a minute or two, it should finish, and you can then try getting
    help for `Get-Process` again.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 运行过程会稍微花一点时间，如果你安装了某些模块，可能并非所有模块的帮助文件都能在线获取，所以你会看到红色的错误信息，但经过一两分钟后，应该就能完成，接着你可以尝试再次获取
    `Get-Process` 的帮助。
- en: Get-Help Get-Process
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Get-Help Get-Process
- en: 'PowerShell is quite biased toward the *en-US* culture. Culture here refers
    to a specific meaning within .NET and associated programs such as PowerShell;
    it’s equivalent to `en-US`, then it may not download all of the relevant help
    files. If you find you’re not getting everything, try running this line:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 相当偏向于 *en-US* 文化。这里的文化是指 .NET 和 PowerShell 等相关程序中的一个特定含义；它相当于 `en-US`，因此它可能不会下载所有相关的帮助文件。如果你发现没有获取到所有内容，试着运行以下命令：
- en: '[PRE16]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Then, try again. This is something that particularly affects Linux installations.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，重新尝试。这特别影响Linux安装。
- en: 'You should see a lot more information, including a one-line synopsis and a
    detailed description. If that’s not enough, then in the `REMARKS` section, there
    will be some other ways of getting even more information about the cmdlet. Try
    running this:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到更多信息，包括一行的简介和详细描述。如果这还不够，那么在`REMARKS`部分，你将会看到一些获取更多cmdlet信息的其他方法。试试运行这个命令：
- en: '[PRE17]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You will see more detailed information, including examples of how to use the
    cmdlet. To see all the information available, use this:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到更详细的信息，包括如何使用该cmdlet的示例。要查看所有可用的信息，可以使用以下命令：
- en: '[PRE18]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You will see everything in the help file, including the extremely useful `NOTES`
    section, which, for this cmdlet, will tell you how to interpret some of the values
    in the output.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到帮助文件中的所有内容，包括非常有用的`NOTES`部分，对于这个cmdlet，它将告诉你如何解释输出中的一些值。
- en: 'There is one other useful way to run `Get-Help` for a cmdlet, using the `-``online`
    parameter:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种有用的方法可以使用`Get-Help`来查看cmdlet的帮助信息，方法是使用`-online`参数：
- en: '[PRE19]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This will produce the web page for the cmdlet in your default browser; it gives
    the same information as when you use the `-``Full` parameter.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这将会在你的默认浏览器中打开该cmdlet的网页；它提供的信息与使用`-Full`参数时相同。
- en: About files
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于文件
- en: '`Get-Help` doesn’t just help you with cmdlets; you can also get lots of useful
    information about PowerShell concepts in a special set of files called `ABOUT
    TOPICS`. At the time of writing, there are over 140 of them. There’s lots of information
    in these files about programming concepts, constructs, and common queries such
    as logging for both Windows and non-Windows environments. Have a look yourself
    by running the following:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`Get-Help`不仅帮助你了解cmdlets，还能通过一套特殊的文件叫做`ABOUT TOPICS`提供许多关于PowerShell概念的有用信息。在撰写本文时，已经有超过140个此类文件。这些文件包含大量关于编程概念、构造以及常见查询的信息，例如Windows和非Windows环境的日志记录。通过运行以下命令，你可以自行查看：'
- en: '[PRE20]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let’s have a look at one of the files:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看一下其中一个文件：
- en: '[PRE21]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You should see lots of interesting information about how variables are used
    in PowerShell.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到很多关于PowerShell中变量使用的有趣信息。
- en: 'You can also use full-text search with `Get-Help`. If the word you are looking
    for is not in the help file’s name, then the text of the files will be searched.
    This takes a little longer but can often be worth it. Try entering the following:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用全文搜索来查询`Get-Help`。如果你查找的词不在帮助文件的文件名中，那么将会搜索文件的内容。这个过程稍微慢一些，但通常是值得的。试试输入以下命令：
- en: '[PRE22]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Make a mental note of the results you get. Now, try entering `certificates`,
    plural:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 记住你得到的结果。现在，尝试输入`certificates`，复数形式：
- en: '[PRE23]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You’ll get a different set of results. The first set finds help files with `certificate`
    in the filename. When `Get-Help` produces the second set, it can’t find any files
    with `certificates` in the name, so it does a full text search. Note that if the
    search term does occur in a filename, then the full text search won’t be carried
    out.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 你将会得到一组不同的结果。第一组结果会找到文件名中包含`certificate`的帮助文件。当`Get-Help`产生第二组结果时，它找不到任何包含`certificates`的文件名，因此会执行全文搜索。请注意，如果搜索词出现在文件名中，那么全文搜索将不会执行。
- en: The only downside I find with these files is that there is some expectation
    for you to be knowledgeable about everything in PowerShell except the topic in
    question. For example, `ABOUT_VARIABLES` mentions the `scope` variable in the
    first few paragraphs. Nonetheless, if you need to know how something works quickly,
    then these files are a great resource.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现这些文件的唯一缺点是，假设你对PowerShell中的其他内容都很了解，只除非是当前讨论的主题。例如，`ABOUT_VARIABLES`在开头几段中提到了`scope`变量。尽管如此，如果你需要快速了解某个事物的工作原理，那么这些文件仍然是一个很好的资源。
- en: Get-Member
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Get-Member
- en: 'The final helpful cmdlet we’re going to look at in this chapter is `Get-Member`.
    Earlier in the chapter, we discussed how PowerShell produces objects rather than
    text output like some shells and scripting languages. `Get-Member` allows you
    to see the members of those objects, their properties, and the methods that may
    be used on them. It’s easier to show rather than tell, so go ahead and type the
    following into your shell:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将要看的一最后一个有用的cmdlet是`Get-Member`。在本章之前，我们讨论了PowerShell是如何生成对象，而不是像某些shell和脚本语言那样生成文本输出的。`Get-Member`允许你查看这些对象的成员、属性以及可用于它们的方法。通过展示而非描述来讲解会更容易理解，所以请继续在你的shell中输入以下命令：
- en: '[PRE24]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The vertical line between the two cmdlets is called the pipeline character,
    |. It’s not a lower case L – on my en-GB standard PC keyboard, it’s on the lower
    left, next to the *Z* key, and on a standard en-US keyboard, it’s between the
    *Enter* and *Backspace* keys. If your keyboard doesn’t have a solid vertical bar
    (*|*), then the broken vertical bar (*¦*) will work.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 cmdlet 之间的竖线称为管道字符 |。它不是小写字母 L——在我的 en-GB 标准 PC 键盘上，它位于左下角，靠近 *Z* 键；在标准的
    en-US 键盘上，它位于 *Enter* 和 *Backspace* 键之间。如果你的键盘没有实心的竖线 (*|*)，那么破折竖线 (*¦*) 也可以使用。
- en: 'What you’re doing here is piping the output of the `Get-Process` cmdlet into
    the next cmdlet as input, which in this case is `Get-Member`. We’ll be doing plenty
    of work on the pipeline in later chapters. `Get-Member` will tell you the type
    of object you’ve given it, in this case a `System.Diagnostics.Process` object,
    and the methods, properties, alias properties, and events associated with that
    object, like this:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 你在这里做的是将 `Get-Process` cmdlet 的输出通过管道传递给下一个 cmdlet 作为输入，在这个例子中是 `Get-Member`。在后续的章节中，我们将进行大量关于管道的工作。`Get-Member`
    会告诉你你提供的对象类型，在这种情况下是 `System.Diagnostics.Process` 对象，以及与该对象相关的方法、属性、别名属性和事件，如下所示：
- en: '![Figure 1.16 – Some of the members of System.Diagnostics.Process](img/B17600_01_016.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.16 – System.Diagnostics.Process 的一些成员](img/B17600_01_016.jpg)'
- en: Figure 1.16 – Some of the members of System.Diagnostics.Process
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16 – System.Diagnostics.Process 的一些成员
- en: 'A few pages earlier, in *Figure 1**.14*, we looked at the properties of the
    `pwsh` processes running on your machine. These are the properties that were listed:
    `NPM(K)`, `PM(M)`, `WS(M)`, `CPU(s)`, `ID`, `SI`, and `ProcessName`. As you can
    now see, that’s `Non-Paged Memory (K)`, `Paged Memory (M)`, `Working Set (M)`,
    and `Session ID`, which are all aliases, so that they can fit nicely into a table
    on the screen. The `CPU(s)` alias is derived in a slightly different way – it’s
    not set on the object. The ID and the process name are not aliases. M and K are
    abbreviations for **Megabytes** and **Kilobytes**, respectively. That’s a really
    small subset of all the properties available on the object. As you can see, there
    are also methods available that can be used to perform operations on the object.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 几页之前，在*图 1.14*中，我们查看了在您的机器上运行的 `pwsh` 进程的属性。这些是列出的属性：`NPM(K)`、`PM(M)`、`WS(M)`、`CPU(s)`、`ID`、`SI`
    和 `ProcessName`。如您现在所见，这些是 `Non-Paged Memory (K)`、`Paged Memory (M)`、`Working
    Set (M)` 和 `Session ID`，它们都是别名，以便能够在屏幕上整齐地显示在表格中。`CPU(s)` 别名的衍生方式稍有不同——它不是在对象上设置的。ID
    和进程名称不是别名。M 和 K 分别是 **兆字节** 和 **千字节** 的缩写。这只是该对象上所有属性的一个非常小的子集。如您所见，还有可用于对对象执行操作的方法。
- en: Activity 2
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 活动 2
- en: 'Have a look at the methods. What method might you use to forcibly and immediately
    stop a process? If you get stuck, have a look at the methods here: [https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process).'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这些方法。你可能会使用什么方法来强制立即停止一个进程？如果你卡住了，可以查看这里的这些方法：[https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process)。
- en: We’ll be returning to `Get-Member` more than once in the rest of the book, as
    it’s such a useful cmdlet.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的剩余部分，我们将多次回到 `Get-Member`，因为它是一个非常有用的 cmdlet。
- en: Summary
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We’ve done a lot in this chapter. We’ve discussed what PowerShell is and what
    it’s suited for, such as producing short pieces of automation code quickly and
    easily. We’ve downloaded and installed it in a few different ways, specifically
    by installing it from an `.msi` file and extracting it from a `.zip` file.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们做了很多工作。我们讨论了 PowerShell 是什么以及它适合用于什么，比如快速简便地生成小段自动化代码。我们已经以几种不同的方式下载并安装了它，具体来说，通过从
    `.msi` 文件安装和从 `.zip` 文件提取来安装它。
- en: 'We’ve tried some different ways of starting it using the built-in shell, and
    finally, we’ve looked at three useful cmdlets: `Get-Command`, for finding cmdlets
    that we might use, `Get-Help`, for understanding how to use them, and `Get-Member`,
    to understand what output those cmdlets produce.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们尝试了使用内置 shell 启动它的几种不同方法，最后，我们查看了三个有用的 cmdlet：`Get-Command`，用于查找我们可能使用的 cmdlet，`Get-Help`，用于了解如何使用它们，以及
    `Get-Member`，用于理解这些 cmdlet 输出的内容。
- en: 'In the next chapter, we will explore how cmdlets work, explore parameters and
    syntax, and look at a useful application for working interactively with PowerShell:
    Windows Terminal.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将探索 cmdlet 如何工作，探索参数和语法，并查看一个有用的应用程序，用于与 PowerShell 进行交互式操作：Windows Terminal。
- en: Exercises
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: What cmdlet would you use to generate a random number?
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会使用哪个 cmdlet 来生成一个随机数？
- en: How would you generate a random number between 1 and 10?
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何生成一个 1 到 10 之间的随机数？
- en: What cmdlet would you use to list the contents of a folder?
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会使用哪个 cmdlet 来列出文件夹的内容？
- en: How would you also get the contents of the subfolders?
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何同时获取子文件夹的内容？
- en: What cmdlet would you use to create a new folder?
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会使用哪个 cmdlet 来创建一个新文件夹？
- en: What cmdlet will tell you how long your computer has been switched on?
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个 cmdlet 可以告诉你计算机已经开机多久？
- en: What cmdlet might redirect output to a file?
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个 cmdlet 可以将输出重定向到文件？
- en: What could you use the `Get-Credential` cmdlet for?
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用 `Get-Credential` cmdlet 做什么？
- en: How might you use the `ConvertTo-HTML` cmdlet?
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何使用 `ConvertTo-HTML` cmdlet？
- en: Further reading
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The *Monad Manifesto* by Jeffrey Snover is a great read on the background and
    philosophy of PowerShell: [https://www.jsnover.com/Docs/MonadManifesto.pdf](https://www.jsnover.com/Docs/MonadManifesto.pdf).'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由 Jeffrey Snover 撰写的 *Monad 宣言* 是一本关于 PowerShell 背景和哲学的好读物：[https://www.jsnover.com/Docs/MonadManifesto.pdf](https://www.jsnover.com/Docs/MonadManifesto.pdf)。
- en: 'John Ousterhout wrote an influential article on the difference between scripting
    and system programming, and why scripting is important and useful: [https://web.stanford.edu/~ouster/cgi-bin/papers/scripting.pdf](https://web.stanford.edu/~ouster/cgi-bin/papers/scripting.pdf).'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: John Ousterhout 撰写了一篇具有影响力的文章，讨论了脚本编程与系统编程的区别，以及为什么脚本编程重要且有用：[https://web.stanford.edu/~ouster/cgi-bin/papers/scripting.pdf](https://web.stanford.edu/~ouster/cgi-bin/papers/scripting.pdf)。
