- en: 36\. Ubuntu 23.04 System and Process Monitoring
  prefs: []
  type: TYPE_NORMAL
- en: An essential part of running and administering an Ubuntu system involves monitoring
    the overall system health regarding memory, swap, storage, and processor usage.
    This includes knowing how to inspect and manage the system and user processes
    running in the background. This chapter will outline some tools and utilities
    that can be used to monitor system resources and processes on an Ubuntu system.
  prefs: []
  type: TYPE_NORMAL
- en: 36.1 Managing Processes
  prefs: []
  type: TYPE_NORMAL
- en: Even when an Ubuntu system appears idle, many system processes will run silently
    in the background to keep the operating system functioning. For example, when
    you execute a command or launch an app, user processes are started, running until
    the associated task is completed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To obtain a list of active user processes you are currently running within
    the context of a single terminal or command-prompt session, use the ps command
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: $ ps
  prefs: []
  type: TYPE_NORMAL
- en: PID TTY TIME CMD
  prefs: []
  type: TYPE_NORMAL
- en: 10395 pts/1 00:00:00 bash
  prefs: []
  type: TYPE_NORMAL
- en: 13218 pts/1 00:00:00 ps
  prefs: []
  type: TYPE_NORMAL
- en: The output from the ps command shows that two user processes are running within
    the context of the current terminal window or command prompt session, the bash
    shell into which the command was entered and the ps command itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'To list all active processes running for the current user, use the ps command
    with the -a flag. This command will list all running processes that are associated
    with the user regardless of where they are running (for example, processes running
    in other terminal windows):'
  prefs: []
  type: TYPE_NORMAL
- en: $ ps -a
  prefs: []
  type: TYPE_NORMAL
- en: PID TTY TIME CMD
  prefs: []
  type: TYPE_NORMAL
- en: 5442 tty2 00:00:00 gnome-session-b
  prefs: []
  type: TYPE_NORMAL
- en: 6350 pts/0 00:00:00 sudo
  prefs: []
  type: TYPE_NORMAL
- en: 6354 pts/0 00:00:00 su
  prefs: []
  type: TYPE_NORMAL
- en: 6355 pts/0 00:00:00 bash
  prefs: []
  type: TYPE_NORMAL
- en: 9849 pts/2 00:00:00 nano
  prefs: []
  type: TYPE_NORMAL
- en: 9850 pts/1 00:00:00 ps
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the above output, the user is running processes related to the GNOME
    desktop, the shell session, the nano text editor, and the ps command.
  prefs: []
  type: TYPE_NORMAL
- en: 'To list the processes for a specific user, run ps with the -u flag followed
    by the user name:'
  prefs: []
  type: TYPE_NORMAL
- en: ps -u john
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PID TTY TIME CMD
  prefs: []
  type: TYPE_NORMAL
- en: 914 ? 00:00:00 systemd
  prefs: []
  type: TYPE_NORMAL
- en: 915 ? 00:00:00 (sd-pam)
  prefs: []
  type: TYPE_NORMAL
- en: 970 ? 00:00:00 gnome-keyring-d
  prefs: []
  type: TYPE_NORMAL
- en: 974 tty1 00:00:00 gdm-x-session
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that each process is assigned a unique process ID which can be used to
    stop the process by sending it a termination (TERM) signal via the kill command.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: $ kill 13217
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of ending a process with the TERM signal is that it allows the
    process to exit gracefully, potentially saving any data that might otherwise be
    lost.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the standard termination signal does not terminate the process, repeat the
    kill command with the -9 option. This command sends a KILL signal which should
    cause even frozen processes to exit but does not give the process a chance to
    exit gracefully, possibly resulting in data loss:'
  prefs: []
  type: TYPE_NORMAL
- en: $ kill -9 13217
  prefs: []
  type: TYPE_NORMAL
- en: 'To list all of the processes running on a system (including all user and system
    processes), execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: $ ps -ax
  prefs: []
  type: TYPE_NORMAL
- en: PID TTY STAT TIME COMMAND
  prefs: []
  type: TYPE_NORMAL
- en: 1 ? Ss 0:22 /usr/lib/systemd/systemd rhgb --switched-root
  prefs: []
  type: TYPE_NORMAL
- en: 2 ? S 0:00 [kthreadd]
  prefs: []
  type: TYPE_NORMAL
- en: 3 ? I< 0:00 [rcu_gp]
  prefs: []
  type: TYPE_NORMAL
- en: 4 ? I< 0:00 [rcu_par_gp]
  prefs: []
  type: TYPE_NORMAL
- en: 5 ? I< 0:00 [netns]
  prefs: []
  type: TYPE_NORMAL
- en: 'To list all processes and include information about process ownership, CPU,
    and memory use, execute the ps command with the -aux option:'
  prefs: []
  type: TYPE_NORMAL
- en: $ ps -aux
  prefs: []
  type: TYPE_NORMAL
- en: USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND
  prefs: []
  type: TYPE_NORMAL
- en: root 2 0.0 0.0 0 0 ? S 09:59 0:00 [kthreadd]
  prefs: []
  type: TYPE_NORMAL
- en: root 3 0.0 0.0 0 0 ? I< 09:59 0:00 [rcu_gp]
  prefs: []
  type: TYPE_NORMAL
- en: root 4 0.0 0.0 0 0 ? I< 09:59 0:00 [rcu_par_gp]
  prefs: []
  type: TYPE_NORMAL
- en: root 5 0.0 0.0 0 0 ? I< 09:59 0:00 [netns]
  prefs: []
  type: TYPE_NORMAL
- en: root 7 0.0 0.0 0 0 ? I< 09:59 0:00 [kworker/0:0H-events_highpri]
  prefs: []
  type: TYPE_NORMAL
- en: root 9 0.0 0.0 0 0 ? I< 09:59 0:00 [kworker/0:1H-events_highpri]
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: demo 9788 0.1 1.4 763248 50480 ? Ssl 15:05 0:00 /usr/libexec/gnome-terminal-serv
  prefs: []
  type: TYPE_NORMAL
- en: demo 9814 0.0 0.1 224108 5664 pts/2 Ss 15:05 0:00 bash
  prefs: []
  type: TYPE_NORMAL
- en: demo 9849 0.0 0.0 222412 3588 pts/2 S+ 15:06 0:00 nano
  prefs: []
  type: TYPE_NORMAL
- en: demo 9873 0.0 0.1 233416 6280 pts/1 R+ 15:08 0:00 ps -aux
  prefs: []
  type: TYPE_NORMAL
- en: 'A Linux process can start its own sub-processes (referred to as spawning),
    resulting in a hierarchical parent-child relationship between processes. To view
    the process tree, use the ps command and include the -H option. Below is part
    of the tree output for a ps -aH command execution:'
  prefs: []
  type: TYPE_NORMAL
- en: $ ps -aH
  prefs: []
  type: TYPE_NORMAL
- en: PID TTY TIME CMD
  prefs: []
  type: TYPE_NORMAL
- en: 10036 pts/3 00:00:00 ps
  prefs: []
  type: TYPE_NORMAL
- en: 6350 pts/0 00:00:00 sudo
  prefs: []
  type: TYPE_NORMAL
- en: 6354 pts/0 00:00:00 su
  prefs: []
  type: TYPE_NORMAL
- en: 6355 pts/0 00:00:00 bash
  prefs: []
  type: TYPE_NORMAL
- en: 5442 tty2 00:00:00 gnome-session-b
  prefs: []
  type: TYPE_NORMAL
- en: 'Process information may also be viewed via the System Monitor tool from the
    GNOME desktop. This tool can either be launched by searching for “System Monitor”
    within the desktop environment or from the command line as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: $ gnome-system-monitor
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the System Monitor has launched, select the Processes button located in
    the toolbar to list the processes running on the system, as shown in [Figure 36-1](System_and_Process_Monitoring.xhtml#_idTextAnchor527)
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ubuntu_system_monitor.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-1
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the processes listed (for example, to list all processes or just
    your own processes), use the menu as illustrated in [Figure 36-2](System_and_Process_Monitoring.xhtml#_idTextAnchor528):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ubuntu_system_monitor_menu.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-2
  prefs: []
  type: TYPE_NORMAL
- en: 'To filter the list of processes, click on the search button in the title bar
    and enter the process name into the search field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ubuntu_system-monitor_search.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-3
  prefs: []
  type: TYPE_NORMAL
- en: 'To display additional information about a specific process, select it from
    the list and click on the button located in the bottom right-hand corner (marked
    A in [Figure 36-4](System_and_Process_Monitoring.xhtml#_idTextAnchor530)) of the
    dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ubuntu_system_monitor_details.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-4
  prefs: []
  type: TYPE_NORMAL
- en: A dialog similar to that marked B in the above figure will appear when the button
    is clicked. Select a process from the list and click the End Process button (C)
    to terminate it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To monitor CPU, memory, swap, and network usage, click on the Resources button
    in the title bar to display the screen shown in [Figure 36-5](System_and_Process_Monitoring.xhtml#_idTextAnchor531):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ubuntu_system_monitor_resources.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-5
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, a summary of storage space used on the system can be viewed by selecting
    the File Systems toolbar button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ubuntu_system_monitor_filesystems.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-6
  prefs: []
  type: TYPE_NORMAL
- en: 36.2 Real-time System Monitoring with top
  prefs: []
  type: TYPE_NORMAL
- en: As the chapter “An Overview of the Cockpit Web Interface” outlined, the Cockpit
    web interface can perform basic system monitoring. The previous section also explained
    how the GNOME System Monitor tool could be used to monitor processes and system
    resources. This chapter also explored how the ps command can provide a snapshot
    of the processes running on an Ubuntu system. However, the ps command does not
    provide a real-time view of the processes and resource usage on the system. The
    top command is an ideal tool for real-time monitoring of system resources and
    processes from the command prompt.
  prefs: []
  type: TYPE_NORMAL
- en: 'When running, top will list the processes running on the system ranked by system
    resource usage (with the most demanding process in the top position). The upper
    section of the screen displays memory and swap usage information together with
    CPU data for all CPU cores. All of this output is constantly updated, allowing
    the system to be monitored in real-time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/top_running.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-7
  prefs: []
  type: TYPE_NORMAL
- en: 'To limit the information displayed to the processes belonging to a specific
    user, start top with the -u option followed by the user name:'
  prefs: []
  type: TYPE_NORMAL
- en: $ top -u john
  prefs: []
  type: TYPE_NORMAL
- en: 'For a complete listing of the features available in top, press the keyboard
    ‘h’ key or refer to the man page:'
  prefs: []
  type: TYPE_NORMAL
- en: $ man top
  prefs: []
  type: TYPE_NORMAL
- en: 36.3 Command-Line Disk and Swap Space Monitoring
  prefs: []
  type: TYPE_NORMAL
- en: 'Disk space can be monitored from within Cockpit and using the GNOME System
    Monitor. To identify disk usage from the command line, however, the df command
    provides a helpful and quick overview:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To review current swap space and memory usage, run the free command:'
  prefs: []
  type: TYPE_NORMAL
- en: free
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: total used free shared buff/cache available
  prefs: []
  type: TYPE_NORMAL
- en: 'Mem: 3823720 879916 1561108 226220 1382696 2476300'
  prefs: []
  type: TYPE_NORMAL
- en: 'To continuously monitor memory and swap levels, use the free command with the
    -s option, specifying the delay in seconds between each update (keeping in mind
    that the top tool may provide a better way to view this data in real-time):'
  prefs: []
  type: TYPE_NORMAL
- en: $ free -s 1
  prefs: []
  type: TYPE_NORMAL
- en: 'Mem: 3823720 879472 1561532 226220 1382716 2476744'
  prefs: []
  type: TYPE_NORMAL
- en: 'Swap: 2097148 0 2097148'
  prefs: []
  type: TYPE_NORMAL
- en: total used free shared buff/cache available
  prefs: []
  type: TYPE_NORMAL
- en: 'Mem: 3823720 879140 1559940 228144 1384640 2475152'
  prefs: []
  type: TYPE_NORMAL
- en: 'Swap: 2097148 0 2097148'
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: 'To monitor disk I/O from the command line, consider using the iotop command,
    which can be installed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: apt install iotop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once installed and executed (iotop must be run with system administrator privileges),
    the tool will display a real-time list of disk I/O on a per-process basis:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/iotop_running.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-8
  prefs: []
  type: TYPE_NORMAL
- en: 36.4 Summary
  prefs: []
  type: TYPE_NORMAL
- en: Even a system that appears to be doing nothing will have many system processes
    running in the background. Activities performed by users on the system will result
    in additional processes being started. Processes can also spawn their own child
    processes. Each process will use some system resources, including memory, swap
    space, processor cycles, disk storage, and network bandwidth. This chapter has
    explored a set of tools that can be used to monitor both process and system resources
    on a running system and, when necessary, kill errant processes that may be impacting
    the performance of a system.
  prefs: []
  type: TYPE_NORMAL
