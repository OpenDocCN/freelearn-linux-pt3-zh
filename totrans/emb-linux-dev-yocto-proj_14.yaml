- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Achieving GPL Compliance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will see how we can ensure open source license compliance
    and use Poky to provide the artifacts needed, such as the source code, licensing
    text, and the list of derivative work. This is critical for most products introduced
    into the market nowadays, as open source code needs to live alongside proprietary
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding copyleft
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Copyleft** is a legal way to use copyright law to maximize rights and express
    freedom. However, it impacts our products. We must meet all obligations of open
    source and free software licenses.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When building a Linux distribution, at least two projects are used: the Linux
    kernel and a compiler. The **GNU Compiler Collection** (**GCC**) is still the
    most commonly used compiler. The Linux kernel uses the **General Public License**
    (**GPL**) **v2** license, and the GCC uses the **GPLv2**, **GPLv2.1**, and **GPLv3**
    licenses, depending on the project used.'
  prefs: []
  type: TYPE_NORMAL
- en: However, a Linux-based system can include virtually all projects available worldwide,
    in addition to all applications made by the company for its product. So how do
    we know the number of projects and licenses included, and how do we fulfill copyleft
    compliance requirements?
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This chapter describes how the Yocto Project can help you in this task but be
    aware that you must know exactly what you need to provide and the possible license
    incompatibilities. Please consult your legal department or a copyright lawyer
    if you have any doubts.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at how the Yocto Project can help us with
    the most common tasks required for copyleft compliance.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding copyleft compliance versus proprietary code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Understanding that proprietary and copyleft-covered codes can coexist in the
    same product is essential. Although this is the standard for most products available
    nowadays, we must be careful about the libraries we link the code to because some
    may have license compatibility issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'One Linux-based system is a set of several projects, each one under a different
    license. The Yocto Project helps developers understand that most copyleft projects
    have the following obligations:'
  prefs: []
  type: TYPE_NORMAL
- en: The source code of the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The license for the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any modification to the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any script that is required to configure and build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If one project under copyleft is modified, the license text, the base source
    code, and any modification must be included in the final deliverable.
  prefs: []
  type: TYPE_NORMAL
- en: The assumptions cover most rights guaranteed by copyleft licenses. These are
    the parts where the Yocto Project can help us. However, before releasing anything,
    it is recommended that we audit all the materials to be released to make sure
    they’re complete.
  prefs: []
  type: TYPE_NORMAL
- en: Managing software licensing with Poky
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One important Poky feature is the ability to manage licenses. Most of the time,
    we only care about our bugs. However, managing licenses and the kinds of licenses
    used is crucial when creating a product.
  prefs: []
  type: TYPE_NORMAL
- en: Poky keeps track of licenses in every recipe. In addition, it has a strategy
    to work with proprietary applications during the development cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: An important thing to know is that a recipe is released under a specific license
    and represents a project released under a different license. Therefore, the recipe
    and the project are two separate entities with specific licenses, so the two licenses
    must be considered part of the product.
  prefs: []
  type: TYPE_NORMAL
- en: 'In most recipes, information is a comment containing the copyright, license,
    and author name; this information pertains to the recipe itself. Then, there is
    a set of variables to describe the package license, and they are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LICENSE`: This describes the license under which the package was released.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LIC_FILES_CHKSUM`: This may not seem very useful at first sight. It describes
    the license file and checksum for a particular package, and we may find much variation
    in how a project describes its license. The most common license files are stored
    in `meta/files/common-licenses/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some projects include a file, such as `COPYING` or `LICENSE`, which specifies
    the license for the source code. Others use a header note in each file or the
    main file. The `LIC_FILES_CHKSUM` variable has the checksum for the license text
    of a project; if any letters are changed, the checksum is changed as well. This
    ensures that any change is noted and consciously accepted by the developer. A
    license change may be a typo fix; however, it may also be a change in legal obligations,
    so the developer needs to review and understand the difference.
  prefs: []
  type: TYPE_NORMAL
- en: When a different license checksum is detected, BitBake launches a build error
    and points to the project that had its license changed. You must be careful when
    this happens, as the license change may impact the use of this software. To be
    able to build anything again, you must change the `LIC_FILE_CHKSUM` value accordingly
    and update the `LICENSE` field to match the license change. Your legal department
    should be consulted if the license terms have changed. It is also good practice
    to record the reason for the change in a commit message for future reference.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding commercial licenses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, Poky does not use any recipe with a commercial license restriction.
    In the recipe file, the `LICENSE_FLAGS` variable is used to identify which license
    restriction that recipe has. For the `gstreamer1.0-plugins-ugly` recipe, the license-related
    variables are from *line 5* to *line 10*, as in *Figure 14**.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – The license-related variables for the gstreamer1.0-plugins-ugly
    recipe](img/Figure_14.1_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.1 – The license-related variables for the gstreamer1.0-plugins-ugly
    recipe
  prefs: []
  type: TYPE_NORMAL
- en: '*Line 10* indicates to Poky that this recipe requires the `commercial` license
    flag to be explicitly accepted for the recipe to be used. To allow the use of
    the `gstreamer1.0-plugins-ugly` recipe, we can use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2 – How to accept to install the recipes with commercial license
    restrictions](img/Figure_14.2_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.2 – How to accept to install the recipes with commercial license restrictions
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add `LICENSE_FLAGS_ACCEPTED` in our custom distribution (e.g., `<my-layer>/conf/distro/my-distro.conf`)
    or inside `build/conf/local.conf` during the initial development stages. Using
    the `commercial` flag accepts the installation of every recipe that requires this
    flag. Still, sometimes we want to manage the recipes we use, demanding specific
    license terms. We can use the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 14.3 \uFEFF– How to accept to only install gstreamer1.0-plugins-ugly](img/Figure_14.3_B19361.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 14.3 – How to accept to only install gstreamer1.0-plugins-ugly
  prefs: []
  type: TYPE_NORMAL
- en: With the code from *Figure 14**.3* we accept only the `commercial` license flag
    from `gstreamer1.0-plugins-ugly`, which is the recipe name. It is good practice
    to ensure this flag is enabled for a set of recipes that you have permission to
    use in a commercial setting. Please consult your legal department to ensure this.
  prefs: []
  type: TYPE_NORMAL
- en: Using Poky to achieve copyleft compliance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, we know how to use Poky and understand its main goal. It is time
    to understand the legal aspects of producing a Linux-based system that uses packages
    under different licenses.
  prefs: []
  type: TYPE_NORMAL
- en: We can configure Poky to generate the artifacts that should be shared as part
    of the copyleft compliance process.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding license auditing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To help us achieve copyleft compliance, Poky generates a license manifest during
    the image build, located at `build/tmp/deploy/licenses/<image_name-machine_name>-<datastamp>/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate this process, we will use the `core-image-full-cmdline` image
    for the `qemux86-64` machine. To start with our example, look at the files under
    `build/tmp/deploy/licenses/core-image-full-cmdline-qemux86-64-<datastamp>`, which
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`image_license.manifest`: This lists the recipe names, versions, licenses,
    and the packages files available in `build/tmp/deploy/image/<machine>` but not
    installed inside the **root filesystem** (**rootfs**). The most common examples
    are the bootloader, the Linux kernel image, and DTB files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package.manifest`: This lists all the packages in the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`license.manifest`: This lists the names, versions, recipe names, and licenses
    for all the installed packages. This manifest may be used for copyleft compliance
    auditing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 14.4 – The directory layout for the license manifests under build/tmp/deploy](img/Figure_14.4_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.4 – The directory layout for the license manifests under build/tmp/deploy
  prefs: []
  type: TYPE_NORMAL
- en: The license manifest for each recipe is under `build/tmp/deploy/licenses/<package-name>`.
    *Figure 14**.4* shows the directory layout for some packages.
  prefs: []
  type: TYPE_NORMAL
- en: Providing the source code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most apparent way Poky can help us to provide the source code of every project
    used in our image is by sharing the `DL_DIR` content. However, this approach has
    one crucial pitfall – any proprietary source code will be shared within `DL_DIR`
    if it is shared as is. In addition, this approach will share any source code,
    including parts not required by copyleft compliance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Poky must be configured to archive the source code before the final image is
    created. To have it, we can add the following variables into `build/conf/local.conf`,
    as in *Figure 14**.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.5 – Configuring Poky to provide the source code of packages under
    copyleft](img/Figure_14.5_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.5 – Configuring Poky to provide the source code of packages under
    copyleft
  prefs: []
  type: TYPE_NORMAL
- en: 'The `archiver` class copies the source code, patches, and scripts for the filtered
    license set. The default configuration is to have `COPYLEFT_LICENSE_INCLUDE` set
    to `"GPL* LGPL* AGPL*"` so the recipes that use source code licensed on those
    licenses are copied under the `build/tmp/deploy/sources/<architecture>` folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.6 – The build/tmp/deploy/sources directory layout](img/Figure_14.6_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.6 – The build/tmp/deploy/sources directory layout
  prefs: []
  type: TYPE_NORMAL
- en: The class also supports the `COPYLEFT_LICENSE_EXCLUDE` variable to ensure packages
    that use source code licensed on some specific licenses never go into the `sources`
    directory. By default, it is set to `"CLOSED Proprietary"`. *Figure 14**.6* shows
    some recipe examples after baking `core-image-full-cmdline`.
  prefs: []
  type: TYPE_NORMAL
- en: Providing compilation scripts and source code modifications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the configuration provided in the previous section, Poky will package the
    original source code for each project. If we want to include the patched source
    code, we will only use `ARCHIVER_MODE[src] = "patched"`; this way, Poky will wrap
    the project source code after the `do_patch` task. It includes modifications from
    recipes or the `.``bbappend` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'This way, the source code and any modifications can be shared easily. However,
    one kind of information still needs to be created: the procedure used to configure
    and build the project.'
  prefs: []
  type: TYPE_NORMAL
- en: To have a reproducible build environment, we can share the configured project,
    in other words, the project after the `do_configure` task. We can add `ARCHIVER_MODE[src]
    = "configured"` to `build/conf/local.conf` for this.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to remember that we must consider that the person on the other
    side may not use the Yocto Project for copyleft compliance; alternatively, if
    they are using it, they must know that the modification made to the original source
    code and configuration procedure is not available. This is why we share the configured
    project: it allows anyone to reproduce our build environment.'
  prefs: []
  type: TYPE_NORMAL
- en: For all flavors of source code, the default resulting file is a tarball; other
    options will add `ARCHIVER_MODE[srpm] = "1"` to `build/conf/local.conf`, and the
    resulting file will be an **SRPM** package.
  prefs: []
  type: TYPE_NORMAL
- en: Providing license text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When providing the source code, the license text is shared inside it. If we
    want the license text inside our final image, we can add the following to `build/conf/local.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.7 – How to configure Poky to deploy license text inside the final
    image](img/Figure_14.7_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.7 – How to configure Poky to deploy license text inside the final
    image
  prefs: []
  type: TYPE_NORMAL
- en: This way, the license files will be placed inside the `rootfs`, under `/usr/share/common-licenses/`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how Poky can help with copyleft license compliance
    and why it should not be used as a legal resource. Poky enables us to generate
    source code, reproduction scripts, and license text for packages used in our distribution.
    In addition, we learned that the license manifest generated within the image might
    be used to audit the image.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to use the Yocto Project’s tools with
    real hardware. Then, we will use the Yocto Project to generate images for a few
    real boards.
  prefs: []
  type: TYPE_NORMAL
