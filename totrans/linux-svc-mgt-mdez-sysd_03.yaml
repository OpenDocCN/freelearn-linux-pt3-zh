- en: '*Chapter 2*: Understanding systemd Directories and Files'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll explore the various `systemd` unit files and configuration
    files and explain the purpose of several types. We'll briefly look at some of
    the executable files that are associated with `systemd`. Along the way, we'll
    also look at the directories where these files live.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the topics we will cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the `systemd` configuration files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the `systemd` unit files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the `systemd` executables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The topics in this chapter comprise basic foundational knowledge of `systemd`.
    We'll be building upon this foundation in the chapters to come.
  prefs: []
  type: TYPE_NORMAL
- en: If you're ready, let's go.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you'd like to follow along with what I'm doing, you'll need a couple of **virtual
    machines** (**VMs**). Here, I'm using Ubuntu Server 20.04 for the Ubuntu side
    of things, and AlmaLinux 8 for the Red Hat side of things. (You'll also see me
    using Fedora to point out a couple of things, but you won't need a Fedora VM yourself.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following link to see the Code in Action video: [https://bit.ly/3xL4os5](https://bit.ly/3xL4os5)'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the systemd configuration files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''ll look at the configuration files that control how the
    various components of `systemd` operate. If you want to follow along with your
    own VM, it won''t much matter which distro you have because things will be mostly
    the same across all `systemd`-enabled distros. Okay—so now you''re yelling at
    me, saying:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Mostly the same? Why, Donnie, you told us before that systemd is implemented
    consistently across all distros! What gives?*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, it is consistent, in that the management and control commands are the
    same across all distros, but the `systemd` ecosystem includes several different
    components besides just the `init` system. These components are optional, and
    some Linux distros don''t use all of them in a default configuration. Several
    of these components have configuration files in the `/etc/systemd/` directory,
    as you can see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `timesyncd.conf` file, which you see second from the bottom in the preceding
    code snippet, is one of those components that you won't see everywhere. It's for
    the service that synchronizes the machine's time to a trusted external source.
    You see it here, but you won't see it on either `chronyd`, and just because you
    see a configuration file here for a particular `systemd` component doesn't necessarily
    mean that that component is being used. On the Fedora machine from which I took
    the preceding code snippet, the `networkd`, `resolved`, and `timesyncd` components
    are all disabled. (As with the RHEL distros, Fedora uses `chronyd` for time-keeping,
    but it still has the `timesyncd` component installed.) On the other hand, if you
    look at the newest versions of Ubuntu Server, you'll see that these optional components
    are enabled by default. (We'll see later how to tell if a service is either enabled
    or disabled.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay—let''s talk about what''s in these configuration files. We''ll start by
    looking at the `system.conf` file, which sets the configuration for the `systemd`
    `init` process. (For space reasons, I can only show part of the file here. You
    can view the whole file on your VM by doing `less /etc/systemd/system.conf`.)
    Here''s a snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, I''m not going to explain this file line by line because I don''t want
    you to hate me for boring you to death. But seriously, in normal circumstances,
    you might not ever have to change any of these configuration files. If you think
    that you might need to do anything with them, your best bet is to read their associated
    man pages, which will have a breakdown of what each of these parameters is doing
    for you. The trick is that for most of these files, you''ll have to add the `systemd-`
    text string to the front of the filename to find its man page. For example, to
    look at the man page for the `system.conf` file, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Also, you might have noticed that in all of these configuration files, every
    line is commented out. That doesn't mean that those lines have no effect. Instead,
    it means that these are the default parameters that are compiled in. To change
    something, you would uncomment the line for the desired parameter and change its
    value.
  prefs: []
  type: TYPE_NORMAL
- en: Pro tip
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the `apropos` command to find all man pages with a specific text
    string in either the man page name or man page description. For example, to find
    all pages that match the `systemd` string, just type the following: `apropos systemd`.'
  prefs: []
  type: TYPE_NORMAL
- en: You can also type `man -k systemd`, which is a synonym for `apropos systemd`.
    (I got into the habit early on of always typing `apropos`, and I've never broken
    this habit.) If nothing comes up when you try this, you might have to rebuild
    the man page database, which you'll do by typing `sudo mandb`.
  prefs: []
  type: TYPE_NORMAL
- en: All right—I think we've talked enough about the configuration files. Next up,
    we'll talk about the `systemd` unit files.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the systemd unit files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of using a set of complex Bash shell scripts, the `systemd` `init` system
    controls system and service operations with various types of *unit* files. Each
    unit file has a filename with a filename extension that describes which type of
    unit it is. Before we look at these files, let's see where they live.
  prefs: []
  type: TYPE_NORMAL
- en: The `/lib/systemd/system/` directory is the default location for unit files
    that either come with the operating system or come with any packages that you
    might install. There might be times when you'll either need to modify some of
    these unit files or even create your own, but you won't do that in this directory.
    Instead, you'll do that in the `/etc/systemd/system/` directory. Any unit files
    in this directory that have the same name as unit files in `/lib/systemd/system/`
    take precedence.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read about unit files by typing the following: `man systemd.unit`.'
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom of this man page, you'll see where it refers you to other man
    pages for each specific type of unit file. You'll soon see that the trickiest
    part about this is having to search through the various man pages whenever you
    need to look up something about a particular unit-configuration parameter. To
    make things easier, you can look up a specific directive in the `systemd.directives`
    man page, which will direct you to the man page that contains information about
    that directive.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know where the unit files are, let's look at *what* they are.
  prefs: []
  type: TYPE_NORMAL
- en: Types of unit files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `/lib/systemd/system` directory, you''ll see various types of unit files
    that each perform a different function. Here''s a list of the more common types:'
  prefs: []
  type: TYPE_NORMAL
- en: '`service`: These are the configuration files for services. They replace the
    old-fashioned init scripts that we had on the old **System V** (**SysV**) systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`socket`: Sockets can either enable communication between different system
    services or they can automatically wake up a sleeping service when it receives
    a connection request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`slice`: Slice units are used when configuring `cgroups`. (We''ll look at these
    in *Part 2*, *Understanding cgroups*.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mount` and `automount`: These contain mount point information for filesystems
    that are controlled by `systemd`. Normally, they get created automatically, so
    you shouldn''t have to do too much with them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target`: Target units are used during system startup, for grouping units and
    for providing well-known synchronization points. (We''ll cover these in [*Chapter
    6*](B17491_06_Final_NM_ePub.xhtml#_idTextAnchor077), *Understanding systemd Targets*.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timer`: Timer units are for scheduling jobs that run on a schedule. They replace
    the old cron system. (We''ll work with these in [*Chapter 7*](B17491_07_Final_NM_ePub.xhtml#_idTextAnchor091),
    *Understanding systemd Timers*.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path`: Path units are for services that can be started via path-based activation.
    (We''ll cover service, path, and socket units in [*Chapter 3*](B17491_03_Final_NM_ePub.xhtml#_idTextAnchor039),
    *Understanding Service, Path, and Socket Units*.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`swap`: Swap units contain information about your swap partitions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That's about it for the basic description of our unit files. We'll go into the
    nitty-gritty details about them in subsequent chapters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Understanding the systemd executables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Normally, we would search for a program''s executable files in either a `bin/`
    or an `sbin/` directory, and you will indeed find some of the `systemd` utility
    executable files there, but most of the `systemd` executables are found instead
    in the `/lib/systemd/` directory. To save space, here''s just a partial listing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You see that the executable for `systemd` itself is here, as well as the executables
    for the services that `systemd` runs as part of its own system. On some Linux
    distros, you'll see symbolic links in either the `/bin` or `/usr/bin` directories
    that point to some of the executable files here. For the most part, you won't
    directly interact with these files, so let's move on to something that you will
    interact with.
  prefs: []
  type: TYPE_NORMAL
- en: The `systemctl` utility is for controlling `systemd`, and you'll use it a lot.
    It's a multi-purpose tool that can do a lot of things for you. It lets you view
    the different units and the status of the units, and either enable them or disable
    them. For now, we'll look at some `systemctl` commands that allow you to view
    different types of information. Later, we'll talk about using `systemctl` to control
    and edit specific units. If you'd like to follow along, fire up a VM and start
    getting your hands dirty.
  prefs: []
  type: TYPE_NORMAL
- en: One thing to notice is that some `systemctl` commands require root privileges,
    and others don't. If you're just looking at system or unit information, you can
    do that with your normal user permissions. If you need to change a configuration,
    you'll need to assume the awesome powers of root. Okay—let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll first list the active units that `systemd` currently has in memory.
    We''ll do that with the `systemctl list-units` command. It''s a very long output,
    so I''ll just show you the first few lines here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is the `automount` section, which shows the various devices that have been
    mounted. As you can see, this covers more than just storage devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we have the mount, path, and scope units, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note here that there's a mount unit for each partition on your drive.
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep scrolling down, and you''ll see the same kind of display for the service,
    slice, socket, swap, target, and timer units. At the bottom, you''ll see a brief
    explanation of the status codes and a short summary, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `--all` option to also see units that are not active, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: That was luck. We found an inactive unit right at the very top.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also view specific types of units with the `-t` option. For example,
    to see just the service units, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You can view the other units in the same way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s say that we just want to see the services that are dead. We can
    do that with the `--state` option, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: By running `systemctl --state=help`, you'll see a list of all of the different
    states that you can view for the different unit types.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to seeing the units that are currently in memory, you can also
    see the unit files that are installed on the system by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, you see some things that may seem rather strange. At the top, you see
    some mount files that are in a `generated` state. These files live in the `/run/systemd/units/`
    directory and are automatically generated by `systemd`. To create these mount
    files, `systemd` reads the `/etc/fstab` file every time you either boot the machine
    or manually reload the `fstab` file.
  prefs: []
  type: TYPE_NORMAL
- en: Unit files in a `static` state are ones that you can neither enable nor disable.
    Rather, other units will call in these static units as dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Unit files in a `transient` state deal with things that are, well, transient.
    Here, we see three scope units that are managing three user sessions. When a user
    logs out of a session, one of these units will disappear.
  prefs: []
  type: TYPE_NORMAL
- en: And of course, units that are in an `enabled` state will automatically start
    upon booting the machine, and units that are in a `disabled` state won't.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see if just one individual unit is either enabled or active, you can use
    the `is-enabled` and `is-active` options with `systemctl`. A while back, I told
    you that the `networkd`, `resolved`, and `timesyncd` services were all disabled
    on my Fedora machine. Here''s how to prove that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And here''s how to prove that they''re not active:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other hand, the `NetworkManager` service is enabled and active on my
    Fedora machine, as you can see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now, I'll leave it to you to verify all of this on the Ubuntu machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also see information about just one *type* of unit file. Here, we''ll
    just look at information about the swap unit files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Just as it did with the mount unit files, `systemd` generated this file by reading
    the `/etc/fstab` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Earlier, I showed you the `/etc/systemd/system.conf` file, which sets the global
    configuration for `systemd`. With the `show` option, you can see the actual running
    configuration by doing `systemctl show`. Here''s the partial output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `--property=` option to view just one item, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: There is a man page for `systemctl`, and you're welcome to peruse it. But if
    you just need a quick reference, run `systemctl -h`.
  prefs: []
  type: TYPE_NORMAL
- en: All right—I think that's enough for now. So, let's wrap this chapter up and
    put a bow on it, shall we?
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Okay—we've hit the ground running and have covered quite a few concepts. We
    covered the various types of configuration files and unit files and saw where
    they live. We ended by using the `systemctl` command to view information about
    our running system.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll expand on this by showing you the inner workings
    of the service, path, and socket unit files. I'll see you there.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of the following commands tells you what the running `systemd` configuration
    is?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. `systemctl list`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. `systemctl show`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. `systemd show`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. `systemd list`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which of the following statements is true?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. To configure your drive partitions, you need to hand-configure the mount
    units.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. The mount units for your drive partitions get generated automatically when
    `systemd` reads the `fstab` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. The mount units for your drive partitions are static units.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. No mount units are needed for your drive partitions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which of the following will tell you if the `NetworkManager` service is running?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. `systemctl active NetworkManager`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. `systemd active NetworkManager`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. `systemd enabled NetworkManager`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. `systemctl is-enabled NetworkManager`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: e. `systemctl is-active NetworkManager`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: a
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: b
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: c
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`systemd` units and unit files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.digitalocean.com/community/tutorials/understanding-systemd-units-and-unit-files](https://www.digitalocean.com/community/tutorials/understanding-systemd-units-and-unit-files)'
  prefs: []
  type: TYPE_NORMAL
