- en: '*Chapter 12*: Controlling Resource Usage with cgroups Version 1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第12章*：使用cgroups Version 1控制资源使用'
- en: 'Now that we''ve seen what `cgroups` are and how they''re structured, it''s
    time to look at how to actually use them. In this chapter, we''ll cover these
    specific topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了`cgroups`是什么以及它们是如何结构化的，接下来该看看如何实际使用它们了。本章我们将覆盖以下具体内容：
- en: Understanding resource controllers
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解资源控制器
- en: Controlling CPU usage
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制CPU使用
- en: Controlling memory usage
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制内存使用
- en: Controlling `blkio` usage
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制`blkio`的使用
- en: Understanding `pam_limits` and `ulimit`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解`pam_limits`和`ulimit`
- en: Learning how to control resource usage with `cgroups` can help you make your
    data center run more securely and efficiently. So, buckle your seat belts and
    let's get going.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何使用`cgroups`控制资源使用可以帮助你使数据中心运行得更安全、更高效。所以，系好安全带，让我们开始吧。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To get the most out of this chapter, you'll want to use a somewhat new host
    computer with a multi-core CPU and plenty of memory. In my case, I'm using a fairly
    late-model Dell workstation with a hexacore Xeon CPU and 32 GB of RAM. Hyperthreading
    is enabled, which gives me a total of 12 CPU cores to play with.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最大限度地利用本章内容，你将需要一台较新的主机计算机，最好配有多核CPU和充足的内存。以我为例，我正在使用一台较新的戴尔工作站，配备了六核Xeon
    CPU和32GB内存。启用了超线程技术，这样我总共有12个CPU核心可以使用。
- en: 'Set your virtual machines to run with at least two CPU cores and a decent amount
    of RAM. I''m setting mine to use four cores, as you see here:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 设置你的虚拟机使用至少两个CPU核心和适量的内存。我设置的是四个核心，如下所示：
- en: '![](img/Figure_12.1_B17491.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.1_B17491.jpg)'
- en: Figure 12.1 – Setting the CPU cores in VirtualBox
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1 – 在VirtualBox中设置CPU核心
- en: 'I''m also setting my virtual machines to run with eight GB of RAM, as you see
    here:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我还将我的虚拟机设置为使用8GB的内存，如下所示：
- en: '![](img/Figure_12.2_B17491.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.2_B17491.jpg)'
- en: Figure 12.2 – Setting the RAM in VirtualBox
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2 – 在VirtualBox中设置RAM
- en: As usual, I'll be using my Ubuntu Server 20.04 and AlmaLinux 8 virtual machines
    for the demos.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，我将使用我的Ubuntu Server 20.04和AlmaLinux 8虚拟机进行演示。
- en: 'Check out the following link to see the Code in Action video: [https://bit.ly/3xJ61qi](https://bit.ly/3xJ61qi)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下链接，观看《代码实战》视频：[https://bit.ly/3xJ61qi](https://bit.ly/3xJ61qi)
- en: Now that we have everything set up, let's dig in.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了所有的设置，接下来让我们深入探讨。
- en: Understanding resource controllers
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解资源控制器
- en: There are a few different names for this cgroups feature. I prefer to use the
    term *resource controllers*. In other documentation, you may see these resource
    controllers referred to as either *subsystems* or just as *controllers*. All of
    these terms refer to the same thing, which is the cgroups technology that allows
    us to control the resource usage of the various running processes. Before we start
    getting our hands too dirty, let's see what resource controllers we have.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个cgroups功能，有一些不同的名称。我更倾向于使用*资源控制器*这个术语。在其他文档中，你可能会看到这些资源控制器被称为*子系统*或仅称为*控制器*。这些术语都指的是同一件事，即cgroups技术，它允许我们控制各种正在运行的进程的资源使用情况。在我们开始深入了解之前，先来看看我们有哪些资源控制器。
- en: Examining the resource controllers
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查资源控制器
- en: 'The best way to see what resource controllers we have is to install some cgroup
    tools. On the Ubuntu machine, do:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 查看我们有哪些资源控制器的最好方法是安装一些cgroup工具。在Ubuntu机器上，执行以下命令：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On the Alma machine, do:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Alma机器上，执行以下命令：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'On either machine, we can now use `lssubsys` to view our active resource controllers,
    like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何一台机器上，我们现在都可以使用`lssubsys`来查看我们的活动资源控制器，像这样：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here''s a brief description of each of them:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是每个资源控制器的简要描述：
- en: '`cpuset`: If you''re running a system with multiple CPU cores, this allows
    you to assign a process to one specific CPU core or a set of CPU cores. This enhances
    performance by forcing a process to use a portion of the CPU cache that''s already
    been filled with the data and the instructions that the process needs. By default,
    the Linux kernel scheduler can move processes around from one CPU core to another,
    or from one set of CPU cores to another. Every time this happens, the running
    process must access the main system memory to refill the CPU cache. This costs
    extra CPU cycles, which can hurt performance.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cpuset`：如果你在运行多个CPU核心的系统上，这可以让你将一个进程分配到特定的CPU核心或一组CPU核心。这通过强制进程使用已被填充了该进程需要的数据和指令的CPU缓存来提高性能。默认情况下，Linux内核调度程序可以将进程从一个CPU核心移动到另一个核心，或从一组CPU核心移动到另一组。每当发生这种情况时，正在运行的进程必须访问主系统内存来重新填充CPU缓存。这会消耗额外的CPU周期，可能会影响性能。'
- en: '`cpu,cpuacct`: There used to be two separate controllers for `cpu` and `cpuacct`.
    Now, they''ve been combined into one single controller. This controller lets you
    control CPU usage for either processes or users. On a multi-tenant system, it
    allows you to monitor users'' CPU usage, which is handy for billing purposes.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cpu,cpuacct`：以前，`cpu`和`cpuacct`有两个独立的控制器。现在，它们被合并成一个控制器。这个控制器让你控制进程或用户的CPU使用情况。在多租户系统中，它允许你监控用户的CPU使用情况，这对于计费非常有用。'
- en: '`blkio`: This is short for **Block Input/Output**. This controller allows you
    to set limits on how fast processes and users can read from or write to block
    devices. (A block device is something such as a hard drive or a hard drive partition.)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`blkio`：这是**块输入/输出**的缩写。此控制器允许你设置进程和用户从块设备读取或写入数据的速度限制。（块设备是像硬盘或硬盘分区这样的设备。）'
- en: '`memory`: As you might have guessed, this one allows you to set limits on the
    amount of system memory that a process or user can use.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`memory`：正如你可能猜到的，这一项允许你设置进程或用户可以使用的系统内存限制。'
- en: '`devices`: This allows you to control access to system devices.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`devices`：此项允许你控制对系统设备的访问。'
- en: '`freezer`: This one has a strange name, but its purpose is simple. It allows
    you to suspend running processes in a cgroup. This can be handy for when you need
    to move processes from one cgroup to another. When you''re ready, just resume
    the processes.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`freezer`：这个名字听起来很奇怪，但它的用途很简单。它允许你挂起cgroup中运行的进程。当你需要将进程从一个cgroup移动到另一个时，这非常有用。准备好后，只需恢复进程。'
- en: '`net_cls,net_prio`: This allows you to place class identifier (`classid`) tags
    on network packets. The Linux traffic controller and the Linux firewall can use
    these tags to control and prioritize network traffic for the various cgroups.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`net_cls,net_prio`：此项允许你为网络数据包添加类标识符（`classid`）标签。Linux流量控制器和Linux防火墙可以使用这些标签来控制和优先处理不同cgroup的网络流量。'
- en: '`perf_event`: This allows you to monitor cgroups with the `perf` tool.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`perf_event`：此项允许你使用`perf`工具监控cgroup。'
- en: '`hugetlb`: This one allows your cgroups to use huge virtual memory pages, and
    to place limits upon their use. (This is a bit beyond the scope of this book,
    so we won''t say anything more about it.)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hugetlb`：此项允许你的cgroup使用巨大页虚拟内存，并对其使用设置限制。（这有点超出了本书的范围，所以我们不再深入讨论。）'
- en: '`pids`: This allows you to place a limit on the number of processes that can
    run in a cgroup.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pids`：此项允许你为在cgroup中运行的进程数量设置限制。'
- en: '`rdma`: **Remote direct memory access** allows one computer to directly access
    the memory of another computer without having to involve either computer''s operating
    system. This is mainly used for parallel computing clusters, which is also beyond
    the scope of this book.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rdma`：**远程直接内存访问**允许一台计算机直接访问另一台计算机的内存，而无需涉及任何一台计算机的操作系统。这主要用于并行计算集群，这也超出了本书的范围。'
- en: 'On the `cgroups` man page, you''ll see a brief mention of these controllers
    under the *Cgroups version 1 controllers* section. To see a detailed description
    of them, you''ll need to look at the documentation that comes packaged with the
    Linux kernel source code. On the Alma machine, you can install that documentation
    as a separate package by doing:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在`cgroups`手册页中，你会在*版本1控制器*部分看到对这些控制器的简短提及。要查看它们的详细描述，你需要查看与Linux内核源代码一起打包的文档。在Alma机器上，你可以通过安装一个单独的文档包来获得这些文档，方法是：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the `/usr/share/doc/kernel-doc-4.18.0/Documentation/cgroup-v1/` directory,
    you'll now find text files that contain more detailed explanations about the resource
    controllers. (I also looked for that documentation package on the Ubuntu machine,
    but couldn't find it.) Of course, it's only fair to warn you that these documentation
    pages are mainly written for Linux kernel programmers, so you might not get much
    out of them. But then, who knows? Go ahead and give them a quick glance to see
    whether there's anything there that can help you. (You might also find that they're
    a great sleeping aid, for those nights when you have a severe case of insomnia.)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/usr/share/doc/kernel-doc-4.18.0/Documentation/cgroup-v1/`目录中，你现在可以找到包含有关资源控制器的更详细解释的文本文件。（我也曾在Ubuntu机器上查找该文档包，但没能找到。）当然，必须提醒你，这些文档页面主要是为Linux内核程序员编写的，所以你可能不会从中获得太多信息。但谁知道呢？不妨快速浏览一下，看看是否有能帮助你的内容。（你也可能发现它们是很好的助眠工具，尤其在你失眠严重的夜晚。）
- en: 'When you look in the `/sys/fs/cgroup/` directory, you''ll see that each of
    these resource controllers has its own directory. Here''s what that looks like
    on the Ubuntu machine:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当你查看`/sys/fs/cgroup/`目录时，你会发现每个资源控制器都有自己的目录。以下是Ubuntu机器上的情况：
- en: '![](img/Figure_12.3_B17491.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.3_B17491.jpg)'
- en: Figure 12.3 – Resource controllers on Ubuntu
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3 – Ubuntu上的资源控制器
- en: For now, we'll ignore the two directories at the bottom of the screen. (The
    `systemd` directory is for the root cgroup, and the `unified` directory is for
    Version 2 controllers.) Even though we're running cgroups Version 1 here, it's
    still possible to use Version 2 controllers. (You won't see the `unified` directory
    on the Alma machine, because the RHEL 8-type distros don't have Version 2 controllers
    enabled by default.) Note that we'll only talk about Version 1 controllers in
    this chapter.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们暂时忽略屏幕底部的两个目录。（`systemd`目录是用于root cgroup的，`unified`目录是用于Version 2控制器的。）尽管我们在这里运行的是cgroups
    Version 1，但仍然可以使用Version 2控制器。（你在Alma机器上看不到`unified`目录，因为RHEL 8类型的发行版默认没有启用Version
    2控制器。）请注意，本章将只讨论Version 1控制器。
- en: Also, note that we have four symbolic links that point to two different directories.
    That's because the `cpu` and `cpuacct` controllers used to be two separate controllers,
    but they're now combined into just one controller. The same is true of the `net_cls`
    and `net_prio` controllers. The symbolic links provide us with some backward compatibility.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，注意我们有四个符号链接指向两个不同的目录。这是因为`cpu`和`cpuacct`控制器曾经是两个独立的控制器，但现在已经合并为一个控制器。`net_cls`和`net_prio`控制器也一样。这些符号链接为我们提供了一些向后兼容性。
- en: Note
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Space doesn't permit me to cover all of these resource controllers in detail.
    So, we'll just focus on the *big three* that you'll be most likely to use. These
    are the `cpu`, `memory`, and `blkio` controllers. That's just as well, because
    with cgroups Version 1, these are the only three resource controllers that you
    can directly configure via `systemd`. (To use any of the other Version 1 resource
    controllers, you'll have to jump through some hoops and use some non-systemd management
    utilities.)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于篇幅有限，我无法详细介绍所有这些资源控制器。所以我们将重点关注你最可能使用的*三大控制器*。它们分别是`cpu`、`memory`和`blkio`控制器。也正好，因为在cgroups
    Version 1中，这三个是你可以通过`systemd`直接配置的唯一资源控制器。（要使用其他Version 1控制器，你需要绕一些弯路并使用一些非systemd的管理工具。）
- en: All right, enough theory for now. Let's start getting our hands dirty.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，理论部分先讲到这里。让我们开始动手操作吧。
- en: Preparing for the demos
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为演示做准备
- en: 'For the first few demos, we''ll use the `stress-ng` tool to simulate some real-world
    problems. On the Ubuntu machine, install it by doing:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几个演示中，我们将使用`stress-ng`工具来模拟一些真实世界中的问题。在Ubuntu机器上，通过以下命令安装它：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To install it on the Alma machine, you''ll first need to have the EPEL repository
    installed. If you haven''t already, install it by doing:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Alma机器上安装它，首先需要安装EPEL仓库。如果你还没有安装，请通过以下命令进行安装：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, install the `stress-ng` package by doing:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过以下命令安装`stress-ng`包：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Next, create a new, non-privileged user account. (I've created an account for
    Vicky, who is my teenage solid gray kitty.)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个新的非特权用户账户。（我为Vicky创建了一个账户，她是我家的灰色小猫。）
- en: Then, open a terminal on your host machine and have your new user log in to
    a remote session on the virtual machine. Open a second terminal on the host machine,
    and log in to your own account on the virtual machine. Keep the virtual machine's
    local terminal off to the side, because you'll be using it, too.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在主机上打开一个终端，并让新用户登录到虚拟机的远程会话。在主机上打开第二个终端，并以你自己的账户登录到虚拟机。把虚拟机的本地终端放到一边，因为你也会用到它。
- en: Now that we're all set up, let's talk about the `cpu` resource controller.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了，让我们来讨论一下`cpu`资源控制器。
- en: Controlling CPU usage
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制CPU使用
- en: You can control resource usage either by using the `systemctl set-property`
    command or by editing systemd unit files. For the first demo, we'll have Vicky
    put some stress on the virtual machine's CPUs. We'll deal with it by using `systemctl
    set-property` to configure the `cpu` resource controller.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用`systemctl set-property`命令或者编辑systemd单元文件来控制资源使用。对于第一个演示，我们将让Vicky给虚拟机的CPU施加一些压力。我们将通过使用`systemctl
    set-property`来配置`cpu`资源控制器来处理它。
- en: Controlling Vicky's CPU usage
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制Vicky的CPU使用
- en: By default, all users on a Linux system have unlimited use of the system resources.
    That could be problematic on a system with multiple users. Any user could decide
    to hog all the resources, which could effectively cause a Denial-of-Service situation
    for all the other users. In real life, a user could cause trouble by doing something
    completely innocent, such as rendering a large video file. An authorized user
    could also cause a Denial-of-Service by doing something they aren't supposed to
    do, such as using server resources to do some cryptocurrency mining. In any case,
    we want to limit the resources that a user can use. We'll do that by assigning
    limits to the user's slice.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Linux系统中的所有用户都可以无限制地使用系统资源。在多用户系统中，这可能会成为问题。任何用户都可能决定占用所有资源，这实际上可能导致对所有其他用户的拒绝服务（DoS）情况。在实际操作中，用户可能会通过做一些看似无害的事情，比如渲染一个大视频文件，来造成问题。授权用户也可能通过做一些不该做的事情，比如利用服务器资源进行加密货币挖矿，来造成拒绝服务（DoS）。无论如何，我们都希望限制用户可以使用的资源。我们将通过给用户的切片分配资源限制来实现这一点。
- en: 'So, let''s say that Vicky is logged in remotely and is hogging all the CPU
    time from the other users. Simulate that by having Vicky do:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 假设Vicky远程登录并占用了其他用户的所有CPU时间。通过让Vicky执行以下操作来模拟这一情况：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `-c 4` option in this command indicates that Vicky is doing a stress test
    on four cores of the CPU. Change that number to however many cores you've assigned
    to your own virtual machine.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令中的`-c 4`选项表示Vicky正在对CPU的四个核心进行压力测试。将该数字更改为您为自己的虚拟机分配的核心数。
- en: 'In the remote terminal where you''re logged in to your own account, open the
    `top` utility. It should look something like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在远程终端中，您已登录到自己的账户，打开`top`工具。它应该看起来像这样：
- en: '![](img/Figure_12.4_B17491.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.4_B17491.jpg)'
- en: Figure 12.4 – The top display with Vicky's stress test
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4 – 带有Vicky压力测试的`top`显示
- en: At the top of the `top` display, we see that Vicky is hogging nearly 100% of
    all four CPU cores. Do I have to tell you that that isn't good?
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在`top`显示的顶部，我们看到Vicky几乎占用了所有四个CPU核心的100%。我还需要告诉你这不好吗？
- en: 'Keep `top` going on your own remote terminal, and go to the virtual machine''s
    local terminal. To get proper results, make sure that you''re not anywhere within
    the `/sys/fs/cgroup/` filesystem. Use `systemd-cgls` to find Vicky''s user slice,
    which should look like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 保持`top`在您的远程终端上运行，然后转到虚拟机的本地终端。为了获得正确的结果，确保您不在`/sys/fs/cgroup/`文件系统中。使用`systemd-cgls`来查找Vicky的用户切片，应该像这样：
- en: '![](img/Figure_12.5_B17491.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.5_B17491.jpg)'
- en: Figure 12.5 – Vicky's user slice
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.5 – Vicky的用户切片
- en: 'We see that she''s user number `1001`, and we want to show her who''s the boss
    around here. We''re just not going to let her get away with hogging the CPU like
    this. So, on the local terminal, reduce her `CPUQuota` to `10%` by doing:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到她的用户编号是`1001`，我们想让她知道谁才是这里的老板。我们不会让她继续这样占用CPU资源。所以，在本地终端上，通过以下命令将她的`CPUQuota`减少到`10%`：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This command creates some new files in the `/etc/systemd/` directory, which
    means that you''ll need to do `sudo systemctl daemon-reload`, just as you''d do
    when creating a new unit file. You should now see Vicky''s CPU usage go down to
    practically nothing, as we see here:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令会在`/etc/systemd/`目录下创建一些新文件，这意味着您需要执行`sudo systemctl daemon-reload`，就像创建新的单元文件时一样。现在您应该看到Vicky的CPU使用率几乎降到零，正如我们在这里看到的：
- en: '![](img/Figure_12.6_B17491.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.6_B17491.jpg)'
- en: Figure 12.6 – After reducing Vicky's CPUQuota
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.6 – 减少Vicky的CPU配额后
- en: Okay, maybe reducing Vicky's `CPUQuota` down to only `10%` is a bit too radical.
    In real life, you could adjust `CPUQuota` to whatever you need it to be. On a
    machine with multiple cores, there's a trick to this that you should know about.
    It's that whatever quota you give to Vicky is spread across all available CPU
    cores. So, in this case, we're not giving Vicky 10% of each core. Instead, we're
    spreading that 10% across four cores, which allows her to consume only about 2.5%
    of the CPU cycles from each core, as you can see in *Figure 12.6*. Also, setting
    Vicky's `CPUQuota` to `100%` doesn't give her 100% usage of each core. Instead,
    she would have only about 25% usage of each core. To allow her to have 50% usage
    of each core, set `CPUQuota` to `200%`. The maximum setting that we can have on
    this machine with four cores is `400%`, which would give her 100% usage of each
    core.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，也许把Vicky的`CPUQuota`降到只有`10%`有点激进了。在实际生活中，你可以根据需要调整`CPUQuota`。在具有多个核心的机器上，有一个你应该知道的技巧。就是无论你给Vicky多少配额，都会分配到所有可用的CPU核心上。所以，在这种情况下，我们并不是给Vicky每个核心的10%。相反，我们把这10%分配到四个核心上，这使得她只能消耗每个核心大约2.5%的CPU周期，如你在*图12.6*中所见。另外，将Vicky的`CPUQuota`设置为`100%`并不会让她每个核心都使用100%。相反，她只会使用每个核心约25%的性能。要让她每个核心使用50%，将`CPUQuota`设置为`200%`。在这台有四个核心的机器上，我们能设定的最大值是`400%`，这将让她每个核心使用100%。
- en: Note
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Keep in mind that the figures I've just given you are based on having four cores
    assigned to the virtual machine. These figures will differ if you've assigned
    a different number of cores to your own virtual machine.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我刚给你提供的数据是基于将四个核心分配给虚拟机。如果你分配了不同数量的核心给你自己的虚拟机，这些数据会有所不同。
- en: 'The first time you execute a `systemctl set-property` command, you''ll create
    the `system.control/` directory under the `/etc/systemd/` directory, which looks
    like this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次执行`systemctl set-property`命令时，你将在`/etc/systemd/`目录下创建`system.control/`目录，它看起来像这样：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Under that directory, you''ll see a directory for Vicky''s user slice. Under
    her user slice directory, you''ll see the configuration file for Vicky''s `CPUQuota`,
    as you see here:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个目录下，你会看到一个用于Vicky用户分片的目录。在她的用户分片目录下，你会看到Vicky的`CPUQuota`配置文件，如你所见：
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here you see that I''ve just set Vicky''s quota up to `200%`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里你可以看到，我刚刚把Vicky的配额设置到了`200%`：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, be aware that you'll only need to do a `daemon-reload` when you first create
    this file. Any subsequent changes you make to this file with the `systemctl set-property`
    command will take effect immediately.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，请注意，当你第一次创建这个文件时，只需执行`daemon-reload`命令。任何后续使用`systemctl set-property`命令对此文件的更改将立即生效。
- en: 'In the cgroup filesystem, under Vicky''s user slice directory, you''ll see
    her current `CPUQuota` setting in the `cpu.cfs_quota_us` file. Here''s what it
    looks like when set to `200%`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在cgroup文件系统中，在Vicky的用户分片目录下，你会看到她当前的`CPUQuota`设置在`cpu.cfs_quota_us`文件中。当设置为`200%`时，它看起来像这样：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To get the actual 200% figure, just chop the last three zeros off from the `200000`
    that you see.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要得到实际的200%数字，只需去掉`200000`中的最后三个零。
- en: Okay, we're through with this demo. In Vicky's window, do a *Ctrl* + *C* to
    stop the stress test.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，我们完成了这个演示。在Vicky的窗口中，按*Ctrl* + *C*来停止压力测试。
- en: Next, let's see how to limit CPU usage for a service.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何限制服务的CPU使用。
- en: Controlling CPU usage for a service
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制服务的CPU使用
- en: For this demo, perform the commands at the virtual machine's local terminal,
    and keep `top` going on your own remote terminal.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个演示，请在虚拟机的本地终端执行命令，并在你自己的远程终端上保持`top`命令运行。
- en: 'The first step of this demo is to create `cputest.service` at the virtual machine''s
    local terminal, like this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这个演示的第一步是在虚拟机的本地终端创建`cputest.service`，就像这样：
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The contents of the file will look like this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的内容将如下所示：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You see that there''s nothing fancy here. It''s just enough to get the job
    done. As you did before, change the `-c` option to reflect the number of cores
    that you''ve assigned to your own virtual machine. Next, do a `daemon-reload`
    and then start the service:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你看，这里没有什么花哨的东西。这足以完成工作。就像之前一样，修改`-c`选项以反映你为自己的虚拟机分配的核心数。接下来，执行`daemon-reload`，然后启动服务：
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the top display, you should see `cputest.service` hogging 100% of the CPU:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在顶部的显示中，你应该看到`cputest.service`占用了100%的CPU：
- en: '![](img/Figure_12.7_B17491.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.7_B17491.jpg)'
- en: Figure 12.7 – cputest.service with no limits
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.7 – 无限制的cputest.service
- en: Next, let's set the `CPUQuota` for this service from the command line.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们从命令行为这个服务设置`CPUQuota`。
- en: Setting CPUQuota from the command line
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从命令行设置CPUQuota
- en: 'Setting the `CPUQuota` for a service is no different from setting it for a
    user. Let''s say that we only want to allow a 90% `CPUQuota` for this service.
    Let''s set that from the command line, just as we did when we set this for Vicky:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为服务设置 `CPUQuota` 和为用户设置没有什么不同。假设我们只想为这个服务设置 90% 的 `CPUQuota`，我们可以像为 Vicky 设置一样，通过命令行来设置：
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Doing this creates another directory in the `/etc/systemd/system.control/`
    directory:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做会在 `/etc/systemd/system.control/` 目录中创建另一个目录：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Inside the `/etc/systemd/system.control/cputest.service.d/` directory, you''ll
    see the `50-CPUQuota.conf` file, which is set up the same as the one that we created
    for Vicky:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `/etc/systemd/system.control/cputest.service.d/` 目录下，您会看到 `50-CPUQuota.conf`
    文件，它的设置与我们为 Vicky 创建的文件相同：
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This allows `cputest.service` to use only about 22.5% of each CPU core, as
    we see here:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得`cputest.service`只能使用每个 CPU 核心的约 22.5%，正如我们在这里看到的：
- en: '![](img/Figure_12.8_B17491.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.8_B17491.jpg)'
- en: Figure 12.8 – cputest with 90% CPUQuota
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.8 – 配置了 90% `CPUQuota` 的 cputest
- en: 'Here, in the cgroup filesystem, we see that `CPUQuota` is indeed set to `90%`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，在 cgroup 文件系统中，我们看到 `CPUQuota` 确实被设置为 `90%`：
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note that this limit is only placed on the *service*, and not on the root user
    who owns the service. The root user can still run other programs and services
    without any limits.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个限制只对*服务*生效，而不对拥有该服务的 root 用户生效。root 用户仍然可以运行其他程序和服务，没有任何限制。
- en: Next, let's set `CPUQuota` in the `cputest.service` file.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们在 `cputest.service` 文件中设置 `CPUQuota`。
- en: Setting CPUQuota in the service file
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在服务文件中设置 `CPUQuota`
- en: 'First, stop `cputest.service`, like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，停止 `cputest.service`，像这样：
- en: '[PRE20]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, delete the `cputest.service.d/` directory that you created with the `systemctl
    set-property` command:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，删除您使用 `systemctl set-property` 命令创建的 `cputest.service.d/` 目录：
- en: '[PRE21]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Do `systemctl daemon-reload` and then start `cputest.service`. You should see
    that the service now hogs the CPU, as it did at first. Stop the service, and then
    edit the unit file by doing:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 `systemctl daemon-reload`，然后启动 `cputest.service`。您应该会看到服务现在再次占用了 CPU，就像最初一样。停止服务，然后通过以下方式编辑单元文件：
- en: '[PRE22]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add the `CPUQuota=90%` line, so that the file now looks like this:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 `CPUQuota=90%` 这一行，文件现在应该看起来像这样：
- en: '[PRE23]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Save the file and start the service. You should see in the `top` display that
    the new setting has taken effect.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并启动服务。您应该会在 `top` 显示中看到新的设置已经生效。
- en: That's all there is to it. Easy, right?
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些，简单吧？
- en: Note
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `systemd.resource-control` man page explains the various directives you
    can use to control resource usage. When you read through it, take note of which
    ones are for cgroups Version 1 and which ones are for cgroups Version 2\. Also,
    take note of the directives that are marked as *deprecated*. For example, many
    cgroups tutorials that you'll find on the web tell you to use the `CPUShares`
    directive, which is listed on this man page as deprecated. (In Linux-speak, something
    that has been deprecated still works for now, but it will quit working at some
    point in the future. In this case, these deprecated directives work for Version
    1, but they won't work for Version 2.)
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`systemd.resource-control` 手册页解释了您可以使用的各种指令来控制资源使用。当您阅读它时，请注意哪些指令适用于 cgroups
    版本 1，哪些适用于 cgroups 版本 2。同时，请注意标记为*弃用*的指令。例如，您在网上找到的许多 cgroups 教程会告诉您使用 `CPUShares`
    指令，但在此手册页中，该指令被列为弃用。（在 Linux 术语中，弃用的东西现在仍然有效，但将来某个时候会停止工作。在这种情况下，这些弃用的指令对版本 1
    有效，但对版本 2 无效。）'
- en: We won't need `cputest.service` anymore, so go ahead and stop it. Let's move
    on to see how to control Vicky's memory usage.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再需要 `cputest.service`，所以可以停止它。接下来，我们看看如何控制 Vicky 的内存使用情况。
- en: Controlling memory usage
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制内存使用
- en: 'Let''s start by having Vicky do something that will hog all of the system memory.
    As before, we''ll use the `stress-ng` utility to simulate that, like this:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先让 Vicky 做一些占用系统内存的事情。和之前一样，我们将使用 `stress-ng` 工具来模拟，像这样：
- en: '[PRE24]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Wait a few moments, and you''ll see some fairly ugly things in the `top` display:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 等待片刻，您将在 `top` 显示中看到一些相当糟糕的情况：
- en: '![](img/Figure_12.9_B17491.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.9_B17491.jpg)'
- en: Figure 12.9 – The top display for Vicky's memory usage
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.9 – Vicky 的内存使用情况的 top 显示
- en: Yeah, only 98.9 bytes of free memory, and super-high load averages. In fact,
    after about 2 minutes or so, this virtual machine is completely unresponsive to
    any commands. Ouch!
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，只有 98.9 字节的空闲内存，而且负载平均值超高。事实上，大约 2 分钟后，这台虚拟机对任何命令完全没有响应。哎呀！
- en: Now, understand that I still have the 200% `CPUQuota` set for Vicky. So, CPU
    usage isn't the problem here. The load average is a representation of how many
    tasks are waiting to be serviced by the CPU. In the top part of the `top` display,
    as shown in *Figure 12.9*, the `53.51` that you see is the 1-minute average, `46.38`
    is the 5-minute average, and `25.00` is the 15-minute average. These load averages
    are spread across all available CPU cores. This means that the more cores you
    have, the higher the load averages can go without hurting system performance.
    With only four cores, my virtual machine can't even begin to handle load averages
    like these. By hogging all of the system memory, Vicky is preventing the CPU from
    servicing tasks in a timely manner.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要理解的是，我仍然为Vicky设置了200%的`CPUQuota`。所以，CPU使用率不是这里的问题。负载平均值表示有多少任务在等待CPU的处理。在`top`显示的顶部，如*图12.9*所示，你看到的`53.51`是1分钟的平均值，`46.38`是5分钟的平均值，`25.00`是15分钟的平均值。这些负载平均值是分布在所有可用的CPU核心上的。这意味着，你的核心越多，负载平均值可以越高，而不影响系统性能。只有四个核心，我的虚拟机甚至无法处理像这样的负载平均值。通过占用所有的系统内存，Vicky阻止了CPU及时处理任务。
- en: In order to shut down Vicky's program on this unresponsive virtual machine,
    I had to close down her remote terminal window by clicking on the `stress-ng`
    session. I mean, there was just no other way to do it. If this were to happen
    in real life on the local terminal of a physical server, you'd likely have to
    take the drastic step of either hitting the power switch or pulling the power
    cord. Even doing a `kill` command on this `stress-ng` process won't work, because
    the system won't be able to execute it.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在这个无响应的虚拟机上关闭Vicky的程序，我不得不通过点击`stress-ng`会话关闭她的远程终端窗口。我是说，根本没有其他办法。如果这种情况发生在物理服务器的本地终端上，你可能不得不采取极端措施，要么按下电源开关，要么拔掉电源线。即使在这个`stress-ng`进程上执行`kill`命令也不起作用，因为系统根本无法执行这个命令。
- en: 'To prevent this from happening again, let''s set a 1GB memory limit for Vicky,
    like this:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止这种情况再次发生，让我们为Vicky设置一个1GB的内存限制，像这样：
- en: '[PRE25]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`MemoryMax`, eh? That could be the name of a memory-enhancing nutritional supplement
    for us senior citizens.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`MemoryMax`，嗯？那可能是为我们老年人设计的一种增强记忆的营养补充品的名字。'
- en: 'Seriously though, you see that I''m using the `--runtime` option, which I didn''t
    use before. This option makes the setting temporary, so that it will disappear
    when I reboot this machine. Instead of creating a permanent configuration file
    in the `/etc/systemd/system.control/user-1001.slice.d/` directory, this handy-dandy
    `--runtime` option created a temporary configuration file in the `/run/systemd/system.control/user-1001.slice.d/`
    directory, which looks like this:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 说实话，你看我在使用`--runtime`选项，我以前没有用过。这个选项让设置变成临时的，这样当我重启这台机器时，设置就会消失。与其在`/etc/systemd/system.control/user-1001.slice.d/`目录中创建永久配置文件，这个方便的`--runtime`选项在`/run/systemd/system.control/user-1001.slice.d/`目录中创建了一个临时配置文件，内容如下：
- en: '[PRE26]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: To make the setting permanent, just run the command again without the `--runtime`
    option, and then do `daemon-reload`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使设置永久生效，只需再次运行命令，不带`--runtime`选项，然后执行`daemon-reload`。
- en: Now, when Vicky runs her evil memory-hogging program, she won't be able to lock
    up the system.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当Vicky运行她那邪恶的内存占用程序时，她就不能锁死系统了。
- en: Controlling blkio usage
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制blkio使用
- en: 'In this scenario, Vicky is once again trying to hog system resources for herself.
    This time, she''s reading so much from the system hard drive that nobody else
    can use it. Before we get to that, you''ll need to install `iotop` on your virtual
    machines, so that you can measure the amount of bandwidth that Vicky is using.
    On the Ubuntu machine, do:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，Vicky再次试图为自己独占系统资源。这次，她从系统硬盘中读取了如此多的数据，以至于其他人都无法使用它。在我们进入这一点之前，你需要在虚拟机上安装`iotop`，以便你能够测量Vicky使用的带宽。在Ubuntu机器上，执行：
- en: '[PRE27]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'On the Alma machine, do:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在Alma机器上，执行：
- en: '[PRE28]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the remote login window where you''re running `top`, quit `top` and then
    do:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在你运行`top`的远程登录窗口中，退出`top`，然后执行：
- en: '[PRE29]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Now that we have things set up, let's see about setting a `blkio` limit for
    Vicky.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了，让我们来看看如何为Vicky设置`blkio`限制。
- en: Setting a blkio limit for Vicky
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为Vicky设置blkio限制
- en: 'In Vicky''s remote login window, have her use our good friend `dd` to create
    a dummy file, like this:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vicky的远程登录窗口中，让她使用我们的好朋友`dd`来创建一个虚拟文件，像这样：
- en: '[PRE30]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Cool. Vicky has created a 10 GB file full of nothing but zeros. Next, let''s
    have Vicky use `dd` to copy the contents of the file over to the `/dev/null` device,
    while watching the `iotop -o` display in our own remote login window. The command
    looks like this:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，Vicky已经创建了一个全是零的10GB文件。接下来，让Vicky使用`dd`将文件内容复制到`/dev/null`设备，同时在我们自己的远程登录窗口中查看`iotop
    -o`显示。命令如下：
- en: '[PRE31]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'So, it appears that she read this file at an average rate of 151 MB per second.
    The `iotop` display looks like this:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，看起来她以每秒151 MB的平均速率读取了这个文件。`iotop`的显示如下所示：
- en: '![](img/Figure_12.10_B17491.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.10_B17491.jpg)'
- en: Figure 12.10 – Vicky's read bandwidth with no restrictions
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.10 – Vicky没有限制时的读取带宽
- en: 'To limit her read bandwidth, we first need to know where she is reading the
    file from. We can use the `lsblk` utility to get a clue, like this:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 为了限制她的读取带宽，我们首先需要知道她是从哪里读取文件的。我们可以使用`lsblk`工具来获取线索，像这样：
- en: '[PRE32]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We know that Vicky''s file is in her own home directory. We see here that the
    `/home/` directory isn''t mounted separately. So, it must be in the root partition,
    which is mounted as a logical volume on the `/dev/sda` drive. Let''s now say that
    we want to limit Vicky''s read bandwidth to only one MB per second for this logical
    volume. The command would look like this:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道Vicky的文件在她自己的主目录下。我们在这里看到，`/home/`目录没有单独挂载。所以，它必须位于根分区，该分区作为逻辑卷挂载在`/dev/sda`驱动器上。现在，假设我们想将Vicky的读取带宽限制为每秒仅1MB。命令如下：
- en: '[PRE33]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Note how the device name and the rate limit setting both have to be surrounded
    by a pair of double quotes. Also, note that we set bandwidth limits for the entire
    drive, not just for a specific partition or logical volume. Of course, we've created
    a new set file in the `/etc/systemd/system.control/` directory, so be sure to
    do a `daemon-reload`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，设备名称和速率限制设置都必须用一对双引号括起来。此外，请注意，我们为整个驱动器设置了带宽限制，而不仅仅是为特定的分区或逻辑卷设置。当然，我们在`/etc/systemd/system.control/`目录中创建了一个新的设置文件，因此一定要执行`daemon-reload`。
- en: 'Next, have Vicky repeat her `dd if=afile of=/dev/null` command. Be aware that
    with her reduced bandwidth, this will take a while to complete. While it''s running,
    note Vicky''s reduced speed in the `iotop` window:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让Vicky重复她的`dd if=afile of=/dev/null`命令。请注意，凭借她的带宽限制，这将需要一段时间才能完成。在运行时，请注意Vicky在`iotop`窗口中的减少速度：
- en: '![](img/Figure_12.11_B17491.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.11_B17491.jpg)'
- en: Figure 12.11 – Vicky's reduced bandwidth
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.11 – Vicky的带宽限制
- en: Yeah, she's just under one MB per second, just where we want her to be. By the
    way, don't feel bad if you want to abort this operation before it finishes. At
    this one MB per second rate, it will be a long time before it finishes on its
    own.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，她的速度稍低于每秒1MB，正是我们希望的状态。顺便说一句，如果你想在操作完成前中止它，也不要感到难过。以每秒1MB的速率，它将在很长时间后才会完成。
- en: 'Finally, while Vicky is still logged in, look at the attribute file that this
    command modified in the cgroup filesystem:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在Vicky仍然登录的情况下，查看这个命令在cgroup文件系统中修改的属性文件：
- en: '[PRE34]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In this `blkio.throttle.read_bps_device` file, the `8:0` represents the major
    and minor numbers of the `/dev/sda` device, as you can see here:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`blkio.throttle.read_bps_device`文件中，`8:0`表示`/dev/sda`设备的主设备号和次设备号，如下所示：
- en: '[PRE35]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Setting a blkio limit for a service
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为服务设置blkio限制
- en: 'Of course, you can also set the `BlockIOReadBandwidth` parameter for a service.
    For example, let''s use the `set-property` option to set it for the Apache web
    server. On the Ubuntu machine, the command is:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你也可以为服务设置`BlockIOReadBandwidth`参数。例如，使用`set-property`选项为Apache Web服务器设置它。在Ubuntu机器上，命令如下：
- en: '[PRE36]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'On the AlmaLinux machine, the command is:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在AlmaLinux机器上，命令如下：
- en: '[PRE37]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If you want to set this `BlockIOReadBandwidth` parameter in a service file,
    there''s a bit of a trick that you need to know about. When you set this on the
    command line, you had to surround the `/dev/sda 1M` part with a pair of double
    quotes. When you set this in a service file, you do *not* surround the `/dev/sda
    1M` within double quotes. To demonstrate, let''s set up an FTP server and set
    a `blkio` limit on it. On the Ubuntu machine, install the FTP server by doing:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在服务文件中设置这个`BlockIOReadBandwidth`参数，有一个技巧需要知道。当你在命令行上设置时，你必须将`/dev/sda 1M`部分用一对双引号括起来。但在服务文件中设置时，你*不*需要将`/dev/sda
    1M`用双引号括起来。为了演示，让我们设置一个FTP服务器并对其设置`blkio`限制。在Ubuntu机器上，执行以下命令来安装FTP服务器：
- en: '[PRE38]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'On the AlmaLinux machine, do:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在AlmaLinux机器上，执行：
- en: '[PRE39]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'On either machine, edit the service file by doing:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何一台机器上，通过以下操作编辑服务文件：
- en: '[PRE40]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In the `[Service]` section, add the new parameter, but without the double quotes:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在`[Service]`部分，添加新的参数，但不要使用双引号：
- en: '[PRE41]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Do a `daemon-reload` and restart the `vsftpd` service. You should see the new
    setting show up in the cgroup filesystem:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`daemon-reload`并重新启动`vsftpd`服务。您应该能看到新的设置出现在cgroup文件系统中：
- en: '[PRE42]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: There are a lot more resource management directives than what we can cover here.
    To see more, just consult the `systemd.resource-management` man page.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有比我们可以在这里介绍的更多的资源管理指令。要了解更多，请参考`systemd.resource-management`的man页面。
- en: Before we close this chapter, let's commit a bit of sacrilege by talking about
    `pam_limits` and `ulimit`, which have nothing at all to do with either systemd
    or cgroups.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束本章之前，让我们有点不敬地谈谈`pam_limits`和`ulimit`，它们与systemd或cgroups完全无关。
- en: Understanding pam_limits and ulimit
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解pam_limits和ulimit
- en: Before the cgroup and systemd technologies were invented, we had other methods
    for controlling resource usage. These methods are still with us, and we can do
    some things with them that we can't do with cgroups. To demonstrate, let's briefly
    look at two of these older methods.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在cgroup和systemd技术被发明之前，我们有其他方法来控制资源使用情况。这些方法仍然存在，并且我们可以使用它们来做一些cgroups做不到的事情。为了演示，让我们简要看一下这两种较旧的方法。
- en: The ulimit command
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ulimit命令
- en: 'The `ulimit` command allows us to dynamically control resource usage for a
    shell session and for any processes that get started by the shell session. Let''s
    use the `-a` option to see what the default settings are for my current shell
    session:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`ulimit`命令允许我们动态控制shell会话和由shell会话启动的任何进程的资源使用情况。让我们使用`-a`选项查看当前shell会话的默认设置：'
- en: '![](img/Figure_12.12_B17491.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.12_B17491.jpg)'
- en: Figure 12.12 – The default ulimit settings
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.12 – 默认ulimit设置
- en: 'As you can see, doing `ulimit -a` also shows us the option switches that we''d
    use to set the various limits. The trick is that you can either set or lower limits
    as a normal user, but you need `sudo` privileges to increase any limits. For example,
    let''s say that we want to limit the size of any new files to only ten MB. We''ll
    use the `-f` option, and specify the file size in terms of the number of 1,024-byte
    blocks. Ten MB works out to be 10,240 blocks, so our command looks like this:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，执行`ulimit -a`命令还会显示我们用于设置各种限制的选项开关。关键在于，您可以作为普通用户设置或降低限制，但如果要增加任何限制，则需要使用`sudo`特权。例如，假设我们想将任何新文件的大小限制为仅为10
    MB。我们将使用`-f`选项，并以1024字节块的数量指定文件大小。10 MB相当于10,240个块，因此我们的命令如下所示：
- en: '[PRE43]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The new limit shows up in the `ulimit -a` output:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 新的限制会显示在`ulimit -a`的输出中：
- en: '[PRE44]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now, watch what happens when I try to increase this limit:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，看看当我尝试增加这个限制时会发生什么：
- en: '[PRE45]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: So, a normal user can set a limit that hasn't been set before, but `sudo` privileges
    are needed to increase an existing limit. But you can reset everything back to
    the default settings by either closing the terminal window and opening a new one
    or by logging out and logging back in. Then, just set a new limit to whatever
    you want it to be.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，普通用户可以设置以前未设置的限制，但是增加现有限制需要`sudo`特权。但是，您可以通过关闭终端窗口并打开新窗口或注销并重新登录来将所有内容重置为默认设置。然后，只需设置一个新的限制，使其为所需的任何内容。
- en: 'Now, when I try to create a ten MB size file, things work fine:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我尝试创建一个大小为10 MB的文件时，一切正常：
- en: '[PRE46]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'But things don''t work so fine when I try to create an eleven MB file:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 但是当我尝试创建一个11 MB的文件时，情况就不那么顺利了：
- en: '[PRE47]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The `ulimit` command can come in handy for developers who need to test new software,
    or for anyone who needs to set resource limits from within a shell script. To
    read more about `ulimit`, open the `bash-builtins` man page and search for `ulimit`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要测试新软件的开发人员或需要在shell脚本中设置资源限制的任何人来说，`ulimit`命令非常有用。要详细了解`ulimit`，请打开`bash-builtins`的man页面并搜索`ulimit`。
- en: Next, let's talk about using a configuration file to set limits.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们谈谈如何使用配置文件来设置限制。
- en: The pam_limits module
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pam_limits模块
- en: The `pam_limits` module is part of the `/etc/security/limits.conf` file or by
    creating new drop-in files in the `/etc/security/limits.d/` directory. To get
    an idea of how this works, open the `/etc/security/limits.conf` file and look
    at the commented-out examples. For a more detailed explanation of things, look
    at the `limits.conf` man page.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`pam_limits`模块是`/etc/security/limits.conf`文件的一部分，或通过在`/etc/security/limits.d/`目录中创建新的附加文件来实现。要了解其工作原理，打开`/etc/security/limits.conf`文件并查看已注释的示例。要获取更详细的说明，请查看`limits.conf`的man页面。'
- en: 'Let''s say that we want to prevent Pogo from creating any files that are larger
    than 20 MB. We''ll do that by adding a line to the bottom of the `/etc/security/limits.conf`
    file, which will look like this:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '假设我们要阻止 Pogo 创建大于 20 MB 的任何文件。我们可以通过在 `/etc/security/limits.conf` 文件的底部添加一行来实现，内容如下：  '
- en: '[PRE48]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Log in as Pogo, and let him try to create a file:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '以 Pogo 用户身份登录，并让他尝试创建一个文件：  '
- en: '[PRE49]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Keep repeating this command with a larger `count=` number until you get an error.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 一直重复这个命令，增加 `count=` 数量，直到出现错误。
- en: All right, I think that this about covers things for this chapter. Let's wrap
    this baby up.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '好的，我想这一章的内容就差不多了。让我们结束这部分内容吧。  '
- en: Summary
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '摘要  '
- en: In this chapter, we looked at the basics of using cgroups Version 1 to control
    resources. A lot of information you've likely seen in your web searches is out
    of date and somewhat confusing. My goal for this chapter has been to bring you
    up-to-date information and present it in an understandable manner.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '在这一章中，我们了解了使用 cgroups 版本 1 控制资源的基础知识。你在网络搜索中看到的很多信息已经过时并且有些混乱。我的目标是为你带来最新的信息，并以易于理解的方式呈现。  '
- en: We started by looking at the cgroups Version 1 controllers and giving a brief
    explanation of each one. After that, we saw how to control CPU usage, memory usage,
    and block device bandwidth usage for both users and services. We wrapped up by
    showing you the old, non-cgroup way of setting limits, which is still useful.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '我们首先查看了 cgroups 版本 1 控制器，并简要解释了每一个。然后，我们展示了如何控制用户和服务的 CPU 使用、内存使用以及块设备带宽使用。最后，我们通过展示旧的、非
    cgroup 的限制设置方法来结束，这种方法依然有用。  '
- en: In the next chapter, we'll look at cgroups Version 2\. I'll see you there.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '在下一章中，我们将探讨 cgroups 版本 2。到时见。  '
- en: Questions
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '问题  '
- en: Your computer has six CPU cores. What would Vicky's `CPUQuota` setting be if
    you want to limit her to only 16.66% for each CPU core?
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '你的计算机有六个 CPU 核心。如果你想限制 Vicky 每个 CPU 核心的使用率为 16.66%，那么她的 `CPUQuota` 设置应为多少？  '
- en: A. 16.66%
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'A. 16.66%  '
- en: B. 33.00%
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'B. 33.00%  '
- en: C. 100%
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'C. 100%  '
- en: D. 200%
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'D. 200%  '
- en: According to the `systemd.resource-control` man page, which of the following
    directives represents the most modern way of limiting someone's memory usage?
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '根据 `systemd.resource-control` 手册页，以下哪个指令代表限制某人内存使用的最现代方法？  '
- en: A. `MemoryLimit`
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'A. `MemoryLimit`  '
- en: B. `MemoryMax`
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'B. `MemoryMax`  '
- en: C. `LimitMemory`
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'C. `LimitMemory`  '
- en: D. `MaxMemory`
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'D. `MaxMemory`  '
- en: What does the `--runtime` option for `systemctl set-property` do?
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`--runtime` 选项对于 `systemctl set-property` 命令的作用是什么？  '
- en: A. It makes the new setting permanent.
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'A. 它使新的设置变为永久。  '
- en: B. Nothing, because it's already the default behavior.
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'B. 没有任何影响，因为它已经是默认行为。  '
- en: C. It makes the new setting temporary.
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'C. 它使新的设置变为临时。  '
- en: D. It makes the command run faster.
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'D. 它使得命令运行更快。  '
- en: Which of the following is true about CPU load averages?
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '以下哪个关于 CPU 负载平均值的说法是正确的？  '
- en: A. Machines with more CPU cores can handle higher CPU load averages.
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'A. 拥有更多 CPU 核心的机器可以处理更高的 CPU 负载平均值。  '
- en: B. CPU load averages have nothing to do with how many CPU cores a machine has.
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'B. CPU 负载平均值与机器拥有多少个 CPU 核心无关。  '
- en: C. Excessive memory usage won't cause CPU load averages to go too high.
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'C. 过度的内存使用不会导致 CPU 负载平均值过高。  '
- en: D. High CPU load averages have no effect on any machine.
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'D. 高 CPU 负载平均值对任何机器没有影响。  '
- en: Answers
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '答案  '
- en: C
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'C  '
- en: B
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'B  '
- en: C
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'C  '
- en: A
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'A  '
- en: Further reading
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '进一步阅读  '
- en: 'Using control groups Version 1 with `systemd`:'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '使用 `systemd` 的 cgroups 版本 1：  '
- en: '[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_monitoring_and_updating_the_kernel/using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_monitoring_and_updating_the_kernel/using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel)'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_monitoring_and_updating_the_kernel/using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_monitoring_and_updating_the_kernel/using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel)  '
- en: 'The Linux kernel Completely Fair Scheduler:'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Linux 内核完全公平调度器：  '
- en: '[https://www.kernel.org/doc/html/latest/scheduler/sched-design-CFS.html](https://www.kernel.org/doc/html/latest/scheduler/sched-design-CFS.html)'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.kernel.org/doc/html/latest/scheduler/sched-design-CFS.html](https://www.kernel.org/doc/html/latest/scheduler/sched-design-CFS.html)  '
- en: 'For anyone who still needs to work with RHEL 7 or RHEL 7 clones on machines
    with multiple CPUs, here''s a procedure for using the `cpuset` controller:'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '对于仍需在具有多个 CPU 的机器上使用 RHEL 7 或 RHEL 7 克隆的人，以下是使用 `cpuset` 控制器的步骤：  '
- en: '[https://www.redhat.com/en/blog/world-domination-cgroups-part-6-cpuset](https://www.redhat.com/en/blog/world-domination-cgroups-part-6-cpuset)'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.redhat.com/en/blog/world-domination-cgroups-part-6-cpuset](https://www.redhat.com/en/blog/world-domination-cgroups-part-6-cpuset)'
- en: 'How to set a `ulimit` value permanently:'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何永久设置`ulimit`值：
- en: '[https://linuxhint.com/permanently_set_ulimit_value/](https://linuxhint.com/permanently_set_ulimit_value/)'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://linuxhint.com/permanently_set_ulimit_value/](https://linuxhint.com/permanently_set_ulimit_value/)'
