- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Booting Our Custom Embedded Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It’s time! We are ready to boot our custom-made embedded Linux, as we have
    learned the required concepts and gained enough knowledge about the Yocto Project
    and Poky. In this chapter, we will practice what we have learned so far about
    using Poky with external BSP layers to generate an image for use with the following
    machines and boot it using the SD card:'
  prefs: []
  type: TYPE_NORMAL
- en: BeagleBone Black
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raspberry Pi 4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VisionFive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The concepts in this chapter can be applied to every other board as long as
    the vendor provides a BSP layer to use with the Yocto Project.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering the right BSP layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 11*](B19361_11.xhtml#_idTextAnchor140), *Exploring External Layers*,
    we learned that the Yocto Project allows for splitting its metadata among different
    layers. It organizes the metadata so we can choose which exact meta layer to add
    to our project.
  prefs: []
  type: TYPE_NORMAL
- en: The way to find the BSP for a board varies, but generally, we can find it by
    visiting [https://layers.openembedded.org](https://layers.openembedded.org). We
    can search for the machine name and the website finds which layer contains it
    in its database.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing aspects that impact hardware use
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The boards used in this chapter are well maintained and straightforward. However,
    using a different board is a valid choice, but your mileage may vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we choose a board, the first step is to verify the quality of its software
    support. The low-level components comprise the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Bootloader (such as U-Boot, GRUB, or systemd-boot)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux kernel (with other required drivers such as GPU or WiFi)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User space packages required by hardware acceleration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Those are critical but are not the only aspects to consider. The integration
    inside the Yocto Project, in a BSP layer form, reduces the friction in the board
    use as it usually provides the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A reusable disk partition layout (e.g., a WIC `.``wks` template)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ready-to-use machine definitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User space packages integrated for hardware acceleration (usable out of the
    box)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The maturity level of software enablement, and the Yocto Project BSP, significantly
    impact the friction involved in using the board and the out-of-the-box experience
    when using Poky for different boards.
  prefs: []
  type: TYPE_NORMAL
- en: Taking a look at widely used BSP layers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will see a list of widely used BSP layers in this chapter. This should not
    be taken as a complete list or as a definitive one. Still, we want to facilitate
    your search for the required layer in case you have one board of a specific vendor
    next to you. This list is as follows, in alphabetic order:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Allwinner*: This has the `meta-allwinner` layer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*AMD*: This has the `meta-amd` layer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Intel*: This has the `meta-intel` layer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*NXP*: This has the `meta-freescale` and `meta-freescale-3rdparty` layers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Raspberry Pi*: This has the `meta-raspberrypi` layer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*RISC-V*: This has the `meta-riscv` layer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Texas Instruments*: This has the `meta-ti` layer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next sections, we start to work with the example boards.
  prefs: []
  type: TYPE_NORMAL
- en: Using physical hardware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To ease the exploration of the Yocto Project’s capabilities, it is good to have
    a real board so we can enjoy the experience of booting our customized embedded
    system. For this, we have tried to collect the most widely available boards so
    the chances of you owning one are higher.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next sections will cover the steps for the following boards:'
  prefs: []
  type: TYPE_NORMAL
- en: '*BeagleBone Black*: BeagleBone Black is community-based, with members worldwide.
    Further information is available at [https://beagleboard.org/black/](https://beagleboard.org/black/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Raspberry Pi 4*: The most famous ARM64-based board with the broadest community
    spread worldwide. See more details at [https://www.raspberrypi.org/](https://www.raspberrypi.org/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*VisionFive*: The world’s first generation of affordable RISC-V boards designed
    to run Linux. See more details at [https://www.starfivetech.com/en](https://www.starfivetech.com/en).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All the boards listed are maintained by non-profit organizations based on education
    and mentoring, which makes the community a fertile place to discover the world
    of embedded Linux. The following table summarizes the boards and their main features:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Board version** | **Features** |'
  prefs: []
  type: TYPE_TB
- en: '| BeagleBone Black | TI AM335x (single-core) 512 MB RAM |'
  prefs: []
  type: TYPE_TB
- en: '| Raspberry Pi 4 | Broadcom BCM2711 64bit CPU (quad-core) 1 GB up to 8 GB RAM
    |'
  prefs: []
  type: TYPE_TB
- en: '| VisionFive | U74 Dual-Core 8 GB RAM |'
  prefs: []
  type: TYPE_TB
- en: Table 15.1 – The hardware specification for the covered boards
  prefs: []
  type: TYPE_NORMAL
- en: In the next sections, we are going to bake and boot the Yocto Project image
    for each one of the suggested machines. It’s recommended that you only read the
    section for the board that you own. Make sure to consult the board’s documentation
    in order to understand how to prepare the board for the operation.
  prefs: []
  type: TYPE_NORMAL
- en: BeagleBone Black
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next two sections, we go through the steps for baking and booting an
    image for the *BeagleBone* *Black* board.
  prefs: []
  type: TYPE_NORMAL
- en: Baking for BeagleBone Black
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use this board, we can rely on the `meta-yocto-bsp` layer, which is included
    by default in Poky. The meta layer can be accessed at [https://git.yoctoproject.org/meta-yocto/tree/meta-yocto-bsp?h=kirkstone](https://git.yoctoproject.org/meta-yocto/tree/meta-yocto-bsp?h=kirkstone).
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the source structure, please download Poky using the following command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After completing this, we must create the build directory we use for our builds.
    We can do this using the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After we have the `build` directory and the BSP layers properly set up, we
    can start the build. Inside the `build` directory, we must call the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `MACHINE` variable can be changed depending on the board we want to use
    or set in `build/conf/local.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: Booting BeagleBone Black
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After the build process is over, the image will be available inside the `build/tmp/deploy/images/beaglebone-yocto/`
    directory. The file we want to use is `core-image-full-cmdline-beaglebone-yocto.wic`.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you point to the right device and double-check to not write on your
    hard disk.
  prefs: []
  type: TYPE_NORMAL
- en: 'To copy the `core-image-full-cmdline` image to the SD card, we should use the
    `dd` utility, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: After copying the content to the SD card, insert it into the SD card slot, connect
    the HDMI cable, and power on the machine. It should boot nicely.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The BeagleBone Black boot sequence starts trying to boot from eMMC and only
    tries to boot from the SD card in case the eMMC boot fails. Clicking the **USER**/**BOOT**
    button when powering on will temporarily change the boot order, making sure the
    boot is from the SD card. To further tailor these instructions for your board,
    please refer to the documentation at [http://www.beagleboard.org/black](http://www.beagleboard.org/black).
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next two sections, we go through the steps for baking and booting an
    image for the *Raspberry Pi* *4* board.
  prefs: []
  type: TYPE_NORMAL
- en: Baking for Raspberry Pi 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To add this board support to our project, we need to include the `meta-raspberrypi`
    meta layer, which is the BSP layer with support for the Raspberry Pi boards, including
    the Raspberry Pi 4, but not limited to it. The meta layer can be accessed at [http://git.yoctoproject.org/cgit.cgi/meta-raspberrypi/log/?h=kirkstone](http://git.yoctoproject.org/cgit.cgi/meta-raspberrypi/log/?h=kirkstone).
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the source structure, please download Poky using the following command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After completing this, we must create the `build` directory we use for our
    builds and add the BSP layer. We can do this using the following command lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After we have the `build` directory and the BSP layers properly set up, we
    can start the build. Inside the `build` directory, we must call the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `MACHINE` variable can be changed depending on the board we want to use
    or set in `build/conf/local.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: Booting Raspberry Pi 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After the build process is over, the image will be available inside the `build/tmp/deploy/images/raspberrypi4/`
    directory. The file we want to use is `core-image-full-cmdline-raspberrypi4.wic.bz2`.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you point to the right device and double-check to not write on your
    hard disk.
  prefs: []
  type: TYPE_NORMAL
- en: 'To copy the `core-image-full-cmdline` image to the SD card, we should use the
    `dd` utility, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: After copying the content to the SD card, insert it into the SD card slot, connect
    the HDMI cable, and power on the machine. It should boot nicely.
  prefs: []
  type: TYPE_NORMAL
- en: VisionFive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next two sections, we go through the steps for baking and booting an
    image for the *VisionFive* board.
  prefs: []
  type: TYPE_NORMAL
- en: Baking for VisionFive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To add this board support to our project, we need to include the `meta-riscv`
    meta layer, which is the BSP layer with support for RISC-V-based boards, including
    the VisionFive, but not limited to it. The meta layer can be accessed at [https://github.com/riscv/meta-riscv/tree/kirkstone](https://github.com/riscv/meta-riscv/tree/kirkstone).
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the source structure, please download Poky using the following command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After completing this, we must create the `build` directory we’ll use for our
    builds and add the BSP layer. We can do this using the following command lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After we have the `build` directory and the BSP layers properly set up, we
    can start the build. Inside the `build` directory, we must call the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `MACHINE` variable can be changed depending on the board we want to use
    or set in `build/conf/local.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: Booting VisionFive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After the build process is over, the image will be available inside the `build/tmp/deploy/images/visionfive/`
    directory. The file we want to use is `core-image-full-cmdline-visionfive.wic.gz`.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you point to the right device and double-check to not write on your
    hard disk.
  prefs: []
  type: TYPE_NORMAL
- en: 'To copy the `core-image-full-cmdline` image to the SD card, we should use the
    `dd` utility, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: After copying the content to the SD card, insert it into the SD card slot, connect
    the HDMI cable, and power on the machine.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'VisionFive doesn’t have a default boot target and requires manual intervention
    to boot. Please use the following commands inside the U-Boot prompt using a serial
    console:'
  prefs: []
  type: TYPE_NORMAL
- en: '**setenv bootcmd “****run distro_bootcmd”**'
  prefs: []
  type: TYPE_NORMAL
- en: '**saveenv**'
  prefs: []
  type: TYPE_NORMAL
- en: '**boot**'
  prefs: []
  type: TYPE_NORMAL
- en: The command `saveenv` is optional to make the new configuration persist so that
    it can work out of the box after reboot.
  prefs: []
  type: TYPE_NORMAL
- en: See how to get the serial console in the *Quick Start* *Guide* ([https://doc-en.rvspace.org/VisionFive/Quick_Start_Guide/](https://doc-en.rvspace.org/VisionFive/Quick_Start_Guide/)).
  prefs: []
  type: TYPE_NORMAL
- en: Taking the next steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Phew! We got it done! Now you should know the Yocto Project build system basics
    and be capable of extending your other areas of knowledge. We tried covering the
    most common daily tasks using the Yocto Project. There are a few things you might
    want to practice:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating `bbappend` files to apply patches or make other changes to a recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making your custom images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the Linux kernel configuration file (`defconfig`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the BusyBox configuration and including the configuration fragments
    to add or remove a feature in a layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a new recipe for a package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a product layer with your product-specific machines, recipes, and images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember, the source code is the ultimate knowledge source, so use it.
  prefs: []
  type: TYPE_NORMAL
- en: When looking for how to do something, finding a similar recipe saves you time
    testing different approaches to solve the problem.
  prefs: []
  type: TYPE_NORMAL
- en: Eventually, you’ll likely see yourself in a position to fix or enhance something
    on OpenEmbedded Core, a meta layer, or in a BSP. So, don’t be afraid – send the
    patches and take the feedback and requests for changes as an opportunity to learn
    and improve your way of solving a problem.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We learned how to discover the BSP for a board we want to use in our project.
    We consolidated our Yocto Project knowledge by adding external BSP layers and
    using these in real boards with a generated image. We also consolidated the necessary
    background information to learn about any other aspect of the Yocto Project you
    may need.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore how using QEMU speeds up product development
    by enabling us to not rely on hardware for every development cycle.
  prefs: []
  type: TYPE_NORMAL
