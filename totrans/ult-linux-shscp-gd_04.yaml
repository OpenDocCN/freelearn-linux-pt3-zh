- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding Input/Output Redirection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we discussed how to use variables and pipelines in
    a shell. This time, we’ll look at how to send the text output of a command to
    somewhere other than the terminal, which is the default output device. We’ll then
    look at how to make a command bring in text from somewhere other than the keyboard,
    which is the default input device. Finally, we’ll look at how to send error messages
    to somewhere other than the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Topics in this chapter include:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding `stdout`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding `stdin`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding `stderr`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding `tee`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Okay, let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Input/Output Redirection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to extract information from different sources and format it for presentation,
    we’ll often need to use various utilities that are collectively known as **text
    stream filters**. When you work with text-stream filtering utilities, it only
    makes sense that you would need a way to feed them some sort of input. It also
    makes sense that you would need a way to see the output, and to see error messages
    if something goes wrong. For these purposes, we have `stdin`, `stdout`, and `stderr`.
  prefs: []
  type: TYPE_NORMAL
- en: '`stdin`: This is short for *standard input*. By default, `stdin` comes from
    the keyboard. However, by using pipes or redirectors, you can also obtain `stdin`
    from either a file or from the output of another command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stdout` : This is short for *standard output*. By default, `stdout` gets sent
    to your computer screen. You can use pipes to have `stdout` become the `stdin`
    for another command, or you can use redirectors to save the `stdout` as a file
    on a storage device. If you don’t want to see any output at all, just use redirectors
    to send `stdout` to the proverbial *bit bucket*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stderr`: As you may have guessed, this is short for *standard error*. If a
    command doesn’t execute properly, you’ll receive an error message. By default,
    the message shows up on the screen. However, you can use pipes or redirectors
    to change `stderr`''s destination, just the same as you can with `stdout`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I’ve told you before that everything on a Linux, Unix, or Unix-like systems
    such as FreeBSD or OpenIndiana is represented by a file. `stdin`, `stdout`, and
    `stderr` are represented on a Linux system by files in the `/proc/` filesystem.
    In the `/dev/` directory, there are symbolic links that point to these files,
    as we see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note that the lowest-level subdirectory where these files are found is `fd`,
    which stands for **file descriptor**. So, these files that represent `stdin`,
    `stdout`, and `stderr` are collectively known as file descriptors.
  prefs: []
  type: TYPE_NORMAL
- en: 'I’m not going to delve into the nitty-gritty details of how this works, because
    it’s not really necessary. The only part of this that you really need to know
    is the ID numbers of the file descriptors, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`0`: This is for `stdin`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1`: This is for `stdout`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2`: This is for `stderr`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remembering the numbers of these file descriptors, which are the same across
    all Linux, Unix/Unix-like systems, will help you understand some concepts that
    I’ll present later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what you can do with redirectors:'
  prefs: []
  type: TYPE_NORMAL
- en: Direct a command to obtain its input (`stdin`) from someplace other than the
    keyboard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a command send its output (`stdout`) to someplace other than the computer
    screen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a command send its error messages (`stderr`) to somplace other than the
    computer screen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are several operator symbols that you’ll use with redirectors. Most are
    easy to understand, but you may find that the ones associated with `stderr` are
    a bit confusing. Not to worry though, because I’m here to help. Let’s start by
    taking a look at the `stdout` family of operators, which consists of `>`, `>|`,
    and `>>`.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding stdout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s say that you want to look at the listing of files that are in a certain
    directory. Instead of piping the `ls` output into `less`, you want to create a
    text file of this listing so that you can print it later. Here’s a graphical representation
    of how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21693_04_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.1: How stdout works'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what it looks like in practice, where I’m sending output from the `ls`
    command to the `filelist.txt` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this is fairly simple. You can take pretty much any command
    that normally sends its output to the computer screen, and have it sent to a text
    file instead. There is one thing that you have to be careful with, though. If
    you redirect a command’s output to a file that already exists, you will overwrite
    it, and all previous information in that file will be lost. There are three ways
    to prevent this from happening.
  prefs: []
  type: TYPE_NORMAL
- en: Preventing File Overwrites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, I’ll show you two ways to prevent overwriting existing files,
    which are:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that an existing file with same name as the file that you want to create
    doesn’t already exist.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the `noclobber` option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s look at both of these methods.
  prefs: []
  type: TYPE_NORMAL
- en: The first way to prevent accidentally overwriting an important file is the most
    obvious. That is, before you redirect output to a file, make sure that a file
    of that name doesn’t already exist. Later, I’ll show you how trivial it is to
    write shell script code that will check for this.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second way is to set the `noclobber` option for your shell environment,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can set this option either from the command-line or from within a shell
    script. With this option set, `bash` and `zsh` will issue an error message if
    you try to use a redirector to overwrite a file, as you see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if you really want to overwrite a file with this option set, you can
    do so by making a slight modification to the redirection command. Just use `>|`
    for your operator instead of just a plain `>`, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: There was no error message this time, which means that I really did overwrite
    the file.
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that when you set the `noclobber` option, it’s not a permanent setting.
    It will go away as soon as you exit from your `bash` or `zsh` session. (This includes
    when you close your terminal emulator window.) Also be aware that the `noclobber`
    option will not prevent you from losing your files by overwriting them with the
    `mv` or `cp` commands. It also won’t stop you from deleting them with the `rm`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: Using the File Descriptor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I told you just a bit ago that the file descriptor for `stdout` is the number
    `1`. If you really wanted to, you could include this file descriptor in any of
    the commands that I’ve shown you, which would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: “What’s the advantage of this?”, you’re wondering. Well, in this case, there
    is none. Leave out the `1`, and things will work just as well. But, in a few pages,
    we’ll be talking about `stderr`. That’s where the file descriptor ID numbers *will*
    come in handy.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, that’s enough about getting things out. Now, let’s get some things in.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding stdin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This will be a bit easier, since only one operator symbol is involved. Here’s
    the graphical representation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21693_04_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.2: How stdin works'
  prefs: []
  type: TYPE_NORMAL
- en: For our example, we’ll briefly look at the `tr` utility. (We’ll give `tr` a
    more in-depth explanation in *Chapter 7, Text Stream Filters-Part 2*. For now,
    let’s just say that it’s a utility that *translates* things.) By default, `tr`
    would take its `stdin` from the keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'One thing you can do is to type a text string in all lower-case, and have `tr`
    echo it back to you in all upper-case. Hit the *Enter* key after you’ve typed
    the `tr [:lower:] [:upper:]` command, and hit it again after you’ve typed your
    line of text. When the upper-case line comes up, hit *Ctrl-d* to exit `tr`. It
    should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you need for `tr` to take its input from a file, just add the appropriate
    redirector operator and the filename, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This won’t change the original file. It will only cause the file contents to
    be displayed on screen in all upper-case letters. If you want to save this converted
    output to another file, just add one of the `stdout` operators and a new filename,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'When you use this trick, you’ll always need to specify a new filename for the
    output. If you use this trick to try to just modify the original file, you’ll
    end up with nothing but a file with no contents. So, entering this would be a
    bad thing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, you could also use the `>>` operator in this trick to append the
    new information to the original file, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `stdin` and `stdout` operators are fairly easy to understand. The `stderr`
    operator isn’t hard, but some aspects of it can be a bit tricky. So, before getting
    started, sit back, take a deep breath and relax. Ready? Good, let’s go.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding stderr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The redirector operators for `stderr` are `2>` and `2>>`. If you’re wondering
    why, it’s because of the file descriptor ID numbers that we looked at a few pages
    ago. The ID number for `stderr` just happens to be `2`. As always, here’s the
    graphical representation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21693_04_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.3: How stderr works'
  prefs: []
  type: TYPE_NORMAL
- en: If you run a command and something goes wrong, it will output an error message
    via `stderr`. By default, this message will get sent to the computer screen. Also
    by default, `stderr` messages get mixed in with `stdout` messages. So, if your
    command outputs both good data and error messages, you’ll have to scroll through
    the output messages on your screen to separate the two. Fortunately, you can use
    redirectors to change that behavior. To show how this works, let’s take another
    look at the `find` utility that we discussed in *Chapter 2, Interpreting Commands*.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re logged on to a computer as a normal user and you use `find` to search
    through an entire file system, you’ll get error messages when `find` tries to
    access directories that you don’t have permission to access. You’ll also get good
    output, but note how the good is mixed in with the bad in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If you append a `2>` redirector and a filename to this command, you can send
    the error messages to a text file so that you can just look at the good data on
    the screen. Here’s how that looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can combine redirectors to have `stdout` sent to one text file, and `stderr`
    sent to another text file, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don’t want to see any error messages at all, just send `stderr` to the
    `/dev/null` device, which is known in some circles as the infamous *bit bucket*.
    Anything sent there will never see the light of day. Here’s how that looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to send the good data to the bit bucket so that you’ll see nothing
    but error messages, you can use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also append error messages to an existing file with the 2>> operator,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: So far, so good. Now, as promised, we’ll look at the part that can be a bit
    confusing. Well, actually, it’s not *that* confusing. It’s just that we’re going
    to use a bit of shorthand that takes a bit of getting used to.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say that you want to send both `stdout` and `stderr` to the same place.
    Does that mean that you have to enter the destination twice, with two different
    redirectors? Thanks to this bit of shorthand, the answer is *No*. Here’s how it
    works.
  prefs: []
  type: TYPE_NORMAL
- en: If you want both `stderr` and `stdout` to go to the same text file, just enter
    your command with the regular `stdout` operator and destination. Then, at the
    end, append `2>&1`. If you need a way to help understand this, just remember that
    `stderr` is File Descriptor ID `2`, and `stdout` is File Descriptor ID `1`. So,
    you can read this as, `stderr` *(ID* `2`*) goes to the same place as* `stdout`
    *(ID* `1`*)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To have both `stderr` and `stdout` of a `find` operation sent to the same text
    file, you can enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'There may be times when you wouldn’t want any output from either `stderr` or
    `stdout`. For example, if you needed to run a backup job in the background, you
    wouldn’t want any screen output to mess up the text file that you’re editing in
    the foreground. (You also wouldn’t need to save any of the output to a text file.)
    For this, you can enter something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: (Note that I’ve set the permissions on the `/backup/` directory so that I can
    write to it with my normal user privileges.)
  prefs: []
  type: TYPE_NORMAL
- en: I think that that about does it for `stderr`. And now, as a no-extra-cost bonus,
    I’ll show you how to send your output to both the screen and a text file at the
    same time.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding tee
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `tee` command is rather unique, because it’s not really a normal redirector.
    Rather, it’s a utility that can take output from a command and send it to both
    the screen and to a file at the same time. So, instead of using it with a redirector
    symbol as we’ve been doing, you’ll send it its input via a pipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need to see a command’s output on the screen and also save it as a text
    file, pipe the output of the command through the `tee` utility, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note that you don’t have to use the `stdout` operator (`>`) with this command.
    The name of the text file is used as the argument for `tee`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run another command with the same filename, the first file that you
    created will get overwritten. (Of course, you can prevent that by setting the
    `noclobber` option, as I showed you just a while ago.) If you want to append output
    to an existing file, you can use the `-a` option, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'There’s another use for `tee` that you definitely need to know about. It’s
    just that at times, you might have to create a shell script that will automatically
    create or update a configuration file in the `/etc/` directory. It seems logical
    that you would use `echo` and either the `>` or `>>` operator to accomplish that.
    But, look what happens when I try that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'As you see, the shell doesn’t allow me to redirect output into a file in the
    `/etc/` directory, even when I use `sudo` privileges. (Okay, you can do this if
    you actually log into the root user’s shell, but let’s say that we don’t want
    to do that.) The solution is to use `tee`, as you see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: When running this from the command-line, I have to precede the `tee` command
    with `sudo`. If you put a command like this in a shell script, you’ll be able
    to omit the `sudo`, because you’ll be running the entire script with `sudo` privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Now, as cool as `tee` sounds, there is one slight catch. That is, `tee` always
    sends both good output and error messages to the screen, but it only sends good
    output to the designated file.
  prefs: []
  type: TYPE_NORMAL
- en: So far, it’s been pretty easy for you to follow along in your own shell as I’ve
    explained things. Now that things are getting a bit more complex, let’s tie things
    together a bit by doing an actual hands-on lab.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on Lab – Pipes, Redirectors, and find
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this assignment, you’ll be working with pipes and redirectors. To see the
    full effect of this exercise, you’ll need to be logged in as a normal user, and
    *not* as root.
  prefs: []
  type: TYPE_NORMAL
- en: Enter the following, noting that you’re deliberately typing the name of a non-existent
    directory in order to generate an error message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the output, and then enter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a listing of files and see how many there are, by entering:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you’re logged on as a normal user instead of as root, this should generate
    some error messages about the fact that you don’t have permission to look in certain
    directories. The list of `.txt` files will be written to the `filelist.txt` file,
    and the error messages will be written to the `error_2.txt` file .
  prefs: []
  type: TYPE_NORMAL
- en: 'Search for README files by entering:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This time, the `2>&1` that’s appended to the end of the command caused the error
    messages and the file list to both go to the same file.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the next operation, you’ll send the file list to both the screen and to
    a file. Enter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that both the file list and the error messages will print on the screen,
    but that only the file list will go to the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a simulated backup directory, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy all of the .txt files that you created within the last day to the `/backup/`
    directory, and send all screen output to the `/dev/null` device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'View the files in the `/backup/` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: End of lab
  prefs: []
  type: TYPE_NORMAL
- en: Well, that’s pretty much it for this chapter. Let’s summarize and move on.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the concept of Input/Output redirection. It’s
    a simple concept, really. It just means that we either take input from somewhere
    other than the keyboard, or we send output to somewhere other than the terminal
    screen. We looked at the redirection operators, how to use them, and some of the
    pitfalls of using them incorrectly.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll look at ways to modify your shell environment. I’ll
    see you there.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the file descriptor number for `stdin`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`0`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`1`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`2`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`3`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following operators is for `stdin`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`>>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<<`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What will happen if you run this command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `filelist.txt` file will get overwritten with updated output.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The output of `tr` will be appended to the end of the file.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You’ll receive a warning message.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The contents of the `filelist.txt` file will be wiped out, and you’ll be left
    with just an empty file.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the default `stdin` device?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: keyboard
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: terminal
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: mouse
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: a named pipe
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of these operators would you use to send `stderr` and `stdout` to the
    same place?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`2>1&`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`2>&1`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`2&1`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`2>1`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Five ways to use redirect operators in Bash: [https://www.redhat.com/sysadmin/redirect-operators-bash](https://www.redhat.com/sysadmin/redirect-operators-bash)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How to manipulate files with with shell redirection and pipelines in Linux:
    [https://www.redhat.com/sysadmin/linux-shell-redirection-pipelining](https://www.redhat.com/sysadmin/linux-shell-redirection-pipelining)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How to redirect shell command output: [https://www.redhat.com/sysadmin/redirect-shell-command-script-output](https://www.redhat.com/sysadmin/redirect-shell-command-script-output)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: a
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: c
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: d
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: b
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Join our community on Discord!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, Linux experts, and the author himself.
  prefs: []
  type: TYPE_NORMAL
- en: Ask questions, provide solutions to other readers, chat with the author via
    Ask Me Anything sessions, and much more. Scan the QR code or visit the link to
    join the community.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code10596186092701843.png)'
  prefs: []
  type: TYPE_IMG
