- en: '*Chapter 10*: Using Xen Security Modules with FLASK'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 9*](B16276_09_Final_VK.xhtml#_idTextAnchor257), *Secure Virtualization*,
    we saw that libvirt is able to apply sVirt protection measures, based upon SELinux
    domains and category assignation, to several supported hypervisors. Xen, another
    popular open source hypervisor, is also supported by libvirt, but it is much more
    common to use Xen on its own, independent from libvirt.
  prefs: []
  type: TYPE_NORMAL
- en: Xen itself has a security framework called **Xen Security Modules** (**XSM**),
    similar to **Linux Security Modules** (**LSM**), and an access control system
    called XSM-FLASK, which is their SELinux-based security framework. We'll see how
    Xen uses XSM, how to build Xen with XSM support, and finally, how we can apply
    policies to Xen domains.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Xen and XSM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running XSM-enabled Xen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying custom XSM policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/3kcCePl](https://bit.ly/3kcCePl)'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Xen and XSM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Xen Project is a Linux Foundation project that maintains the Xen hypervisor.
    While the Xen Project manages multiple security and virtualized-related software
    titles, our focus is on the Xen hypervisor.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Xen hypervisor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Xen hypervisor runs directly on top of hardware and sits in between the
    various virtual machines and the hardware itself. Unlike QEMU or KVM, which run
    as a process within Linux to offer the virtualization functionality, Xen works
    more independently. As a result, administrators will not see the running instances
    as separate processes. Instead, they need to rely on Xen commands and APIs to
    get more information and to interact with the Xen hypervisor.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: As with libvirt, the Xen hypervisor uses the term *domain* to point to its guests.
    As we use the term *domain* frequently in SELinux to mean the SELinux type of
    a running process, and thus also the SELinux type of a running guest, we will
    use *guest* wherever possible. However, there will be some terminology associated
    with Xen where we will have to keep the *domain* terminology in place.
  prefs: []
  type: TYPE_NORMAL
- en: Xen always has at least one virtual guest defined, called `xend`). It is through
    dom0 that administrators will create and operate virtual guests running within
    Xen. These regular guests are unprivileged, and therefore abbreviated as **domU**â€”**unprivileged
    domains**.
  prefs: []
  type: TYPE_NORMAL
- en: When administrators boot a Xen host, they boot into Xen's *dom0* instance, through
    which they then further interact with Xen. The Linux kernel has included support
    for running both within *dom0* as well as *domU* for quite some time now (with
    complete support, including backend drivers, since Linux kernel 3.0).
  prefs: []
  type: TYPE_NORMAL
- en: Let's use an existing Linux deployment to install Xen, and use this existing
    deployment as Xen's dom0 guest.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Xen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While many Linux distributions offer Xen out of the box, it is very likely that
    these deployments do not support XSM (which we will enable in the *Running XSM-enabled
    Xen* section). So, rather than fiddling with prebuilt Xen environments first,
    we want to build it from source as released by the Xen Project immediately.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start using Xen, let alone its XSM support, we first need to make
    sure that we are running with a Xen-enabled Linux kernel.
  prefs: []
  type: TYPE_NORMAL
- en: Running with a Xen-enabled Linux kernel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Linux kernel on the system must have support for running (at least) inside
    a dom0 guest. Without this support, not only will the dom0 guest not be able to
    interact with the Xen hypervisor, it will also not be able to boot the Xen hypervisor
    itself (the Xen-enabled kernel needs to bootstrap the Xen hypervisor before launching
    itself as the dom0 guest).
  prefs: []
  type: TYPE_NORMAL
- en: If you build your own Linux kernel, you need to configure the kernel with the
    settings as documented at [https://wiki.xenproject.org/wiki/Mainline_Linux_Kernel_Configs](https://wiki.xenproject.org/wiki/Mainline_Linux_Kernel_Configs).
    Some Linux distributions provide more in-depth build instructions (such as Gentoo
    at [https://wiki.gentoo.org/wiki/Xen](https://wiki.gentoo.org/wiki/Xen)). On CentOS,
    however, out-of-the-box Xen support is currently missing from the last release
    (as CentOS focuses more on libvirt and related technologies for its virtualization
    support).
  prefs: []
  type: TYPE_NORMAL
- en: 'Luckily, the community offers well-maintained Linux kernel builds that do include
    Xen support, through the `kernel-ml` package. Let''s install this kernel package:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable the **Enterprise Linux Repository** (**ELRepo**), which introduces several
    other, community-driven repositories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the `kernel-ml` package, which will install the most recent Linux kernel,
    with a configuration that includes Xen support. We simultaneously enable the `elrepo-kernel`
    repository, through which this package is made available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generally, the Linux boot loader will be reconfigured to include these new
    kernels. If not, or you want to make sure that the kernel is properly detected,
    the following command can be used to regenerate the **Grand Unified Bootloader**
    (**GRUB2**) configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Of course, if your system uses a different boot loader, different instructions
    apply. Consult your Linux distribution's documentation for more information on
    how to configure the boot loader.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Reboot the system using the newly installed kernel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If all goes well, you will now be running with a Xen-compatible kernel. That,
    of course, does not mean that Xen is active, but merely that the kernel can support
    Xen if it is needed. Let's now move forward with building the Xen hypervisor and
    related tooling.
  prefs: []
  type: TYPE_NORMAL
- en: Building Xen from source
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Xen hypervisor and tools have dependencies on various programs and libraries,
    and not all tools and libraries are properly detected as dependencies while building
    Xen from source.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first install these dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable the `PowerTools` repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the dependencies supported by the CentOS repositories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the `dev86` package. At the time of writing, this package is not yet
    available for CentOS 8 so we deploy the version from CentOS 7 instead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the dependencies now installed, let''s download the latest Xen and build
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://xenproject.org/downloads/](https://xenproject.org/downloads/)
    and go to the last Xen Project release.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the bottom of the page, download the latest archive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Unpack the downloaded archive on the system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter the directory the archive is unpacked in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure the sources for the local system. At this point, no specific arguments
    need to be passed on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build the Xen hypervisor and associated tools:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the Xen hypervisor and tools on the system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reconfigure the boot loader. This should automatically detect the Xen binaries
    and add the necessary boot loader entries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure the system to support libraries installed in `/usr/local/lib`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create equivalence rules for the subdirectories in `/usr/local` so that SELinux
    file contexts are correctly applied:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Relabel the files inside `/usr/local`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The result of these steps is that Xen is ready to be booted on the system.
    The boot loader will not use the Xen-enabled kernel by default though, so during
    reboot, it is important to select the right entry. Its title will contain *with
    Xen hypervisor*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After rebooting into the Xen-enabled system, all we need to do is to start
    the Xen daemons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To verify that everything is working as expected, list the currently running
    guests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finalize the installation by ensuring that the previously started daemons are
    started at boot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Before we move on to XSM, let's also create a guest inside Xen (as a domU) so
    that we can associate policies with it later, in the *Using XSM labels* section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an unprivileged guest
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the Xen hypervisor is active, the operating system through which we interact
    with Xen is called dom0 and is the (only) privileged guest that Xen supports.
    The other guests are unprivileged, and it is the interaction between these guests
    and the actions taken by these guests that we want to isolate and protect further
    with XSM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first create a simple, unprivileged guest to run alongside the privileged
    dom0 one. We use Alpine Linux in this example, but you can easily substitute this
    with other distributions or operating systems. This example will use the **ParaVirtualized**
    (**PV**) guest approach, but Xen also supports **Hardware Virtual Machine** (**HVM**)
    guests:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the ISO for the Alpine Linux distribution, as this distribution is
    more optimized for low memory consumption and lower (virtual) disk size requirements.
    Of course, you are free to pick other distributions as well if your system can
    handle it. We pick the release optimized for virtual systems from [https://www.alpinelinux.org/downloads/](https://www.alpinelinux.org/downloads/)
    and store the ISO on the system in `/srv/data`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Mount the ISO on the system so that we can use its bootable kernel when creating
    an unprivileged guest in our next steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an image file, which will be used as the boot disk for the virtual guest:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a configuration file for the virtual guest. We call the file `a1.cfg`
    and place it in `/etc/xen`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Boot the virtual guest using the `xl create` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When the guest needs to reboot, use shutdown instead, and edit the configuration
    file. Remove the line referring to the ISO to prevent the guest from booting into
    the installation environment again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To launch the guest again, use the `xl create` command again. If the guest
    installation finishes and you no longer need to have access to the console, drop
    the `-c` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can confirm that the virtual guest is running with `xl list`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With Xen, guests are launched with the `create` subcommand and shut down with
    the `shutdown` (graceful) or `destroy` subcommands.
  prefs: []
  type: TYPE_NORMAL
- en: With these steps behind us, we now have a working Xen installation and a running
    guest. It's time to learn what Xen has to offer us from a security perspective.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Xen Security Modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [*Chapter 1*](B16276_01_Final_VK.xhtml#_idTextAnchor018), *Fundamental SELinux
    Concepts*, we learned that SELinux is implemented through a Linux subsystem called
    **Linux Security Modules** (**LSM**). Xen has borrowed this idea and has a similar
    approach to its own security measures.
  prefs: []
  type: TYPE_NORMAL
- en: With **Xen Security Modules** (**XSM**), Xen makes it possible to define and
    control actions between Xen guests, and between a Xen guest and the Xen hypervisor.
    Unlike the Linux kernel though, where several mandatory access control frameworks
    exist that can plug into the LSM subsystem, Xen currently only has a single module
    available for XSM, called **XSM-FLASK**.
  prefs: []
  type: TYPE_NORMAL
- en: '**FLASK** stands for **Flux Advanced Security Kernel** and is the security
    architecture and approach that SELinux also uses for its own access control expressions.
    With XSM-FLASK, developers and administrators can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Define permissions and fine-grained access controls between guests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define limited privilege escalation for otherwise unprivileged guests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control direct hardware and device access from guests on a policy level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restrict and audit activities executed by privileged guests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While XSM-FLASK uses SELinux-like naming conventions (and even SELinux build
    tools to build the policy), the XSM-FLASK-related settings are independent of
    SELinux. If dom0 is running with SELinux enabled (and there is no reason why it
    shouldn't), its policy has nothing to do with the XSM-FLASK policy.
  prefs: []
  type: TYPE_NORMAL
- en: The labels that XSM-FLASK uses will also not be visible for regular Linux commands
    running inside the guests (and thus also dom0). As the running guests are not
    shown as processes within the system, they do not have an SELinux label at all,
    only an XSM-FLASK label (if enabled). Hence, Xen cannot benefit from the sVirt
    approach, as documented in [*Chapter 9*](B16276_09_Final_VK.xhtml#_idTextAnchor257),
    *Secure Virtualization*.
  prefs: []
  type: TYPE_NORMAL
- en: Running XSM-enabled Xen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Switching from a regular Xen deployment to an XSM-enabled Xen deployment is
    a matter of rebuilding Xen with XSM support and rebooting the system. Xen comes
    with an out-of-the-box policy that can be readily applied, which we will use as
    part of our XSM endeavor.
  prefs: []
  type: TYPE_NORMAL
- en: Rebuilding Xen with XSM support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s rebuild the Xen hypervisor and tools on the system with XSM support:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clean up the previous build by running the `make clean` command inside the
    `build` directory (`xen-4.13.1` in our example):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `build` directory, go to the `xen` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Launch the Xen configuration using `make menuconfig`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Navigate to the XSM setting and enable the XSM-related parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go back to the main build directory (`xen-4.13.1` in our example):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Rebuild the Xen hypervisor and tools:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the updated Xen build on the system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reconfigure the boot loader with the new Xen build, ensuring that the XSM policy
    is also loaded with it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reboot the system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once rebooted, we can verify that the XSM policy is loaded and used by querying
    Xen for the labels associated with the running guests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the `xl list` command, given the `-Z` argument, lists the security labels,
    then Xen is running with an XSM policy active. Let's see where these labels are
    used.
  prefs: []
  type: TYPE_NORMAL
- en: Using XSM labels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When Xen boots with XSM support and has its default policy active, the following
    types can be used by guests:'
  prefs: []
  type: TYPE_NORMAL
- en: The `dom0_t` type is reserved for the privileged guest.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `domU_t` type is the default type to use for unprivileged guests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `isolated_domU_t` type is the type to assign to unprivileged guests that
    should not be able to interact with other unprivileged guests, only with the privileged
    dom0 one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `prot_domU_t` type is meant for guests that will be prevented from starting
    if the XSM policy boolean `prot_doms_locked` is set.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `nomigrate_t` type is applied to guests that are not allowed to be migrated
    from one Xen host to another. Internally, this prevents the dom0 guest from accessing
    the guest's memory once booted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are a few other types also available inside the XSM policy that are not
    meant for regular guests themselves:'
  prefs: []
  type: TYPE_NORMAL
- en: The `dm_dom_t` type is assigned to the device model guest. This is a special,
    privileged guest that represents the hardware virtualized for an HVM-type guest,
    without jeopardizing dom0.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `xenstore_t` type is assigned to the `xenstore` stub guest. This is a special,
    privileged guest that provides support for unprivileged guests to access their
    virtualized resources, without jeopardizing dom0.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `nic_dev_t` type is assigned to hardware devices that can be used in passthrough
    mode (meaning domU guests can directly interact with these hardware devices rather
    than going through the privileged guests).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These stub guests (**stub domains** or **stubdoms** as they are called in Xen)
    are a way for Xen to further increase its security posture, as privileged operations
    that cannot be prevented are more isolated from dom0\. If at any point a security
    vulnerability can be exploited in these privileged services, they do not necessarily
    affect dom0 and, with a proper XSM policy, can even be mitigated fully.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assigning one of these labels to a guest is a matter of editing the guest''s
    configuration file inside `/etc/xen` and adding in the `seclabel` configuration
    parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Once configured and rebooted (using `xl create`), the new label will be visible
    when querying the running guests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Applying the right label to the guest is the most common use case (as it effectively
    handles the access control and protection measures we seek from the XSM implementation),
    but other operations are supported as well.
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating XSM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with SELinux, several activities can be executed to further manipulate the
    XSM subsystem or the active policy.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the state, ranging from disabled to enforcing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When Xen boots, we can add a kernel parameter called `flask`, which can be
    set to one of the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: With `flask=enforcing`, we ensure that XSM is active, enforcing the policy between
    its guests and resources, and that the enforcement is immediate (no delayed activation).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With `flask=permissive`, XSM will load the policy, but XSM will not enforce
    the rules set in the policy. This is obviously meant for development purposes
    and behaves similarly to SELinux's permissive mode.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With `flask=late`, XSM will not enforce any access controls until a policy is
    loaded, after which the policy is enforced. This allows administrators to boot
    with XSM active, but only to load and apply a policy when the administrator deems
    it ready.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With `flask=disabled`, XSM will not enforce any access controls nor load the
    policy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This parameter can be set either directly when booting (from the boot loader)
    or through the boot loader configuration on the system. For instance, with GRUB2,
    we can edit `/etc/default/grub` and add or modify the following parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t forget to regenerate the GRUB2 configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'As with SELinux, we can also manipulate the state of XSM through the command
    line. With `xl getenforce`, we can query the current state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The `xl setenforce` command can be used to switch to another state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'These commands have nothing to do with the SELinux configuration within dom0:
    switching Xen from permissive mode to enforcing or vice versa is specific to Xen
    and has no impact on the SELinux settings inside dom0.'
  prefs: []
  type: TYPE_NORMAL
- en: Querying XSM logs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Like SELinux, XSM also uses AVC logging to provide feedback to the administrator
    about the decisions it has taken. With `xl dmesg`, we can query this log information
    (alongside the other Xen output logging):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Not all granted operations will be logged, but denied operations will always
    result in an AVC entry. The AVC entries themselves are fully formatted like SELinux
    AVC entries, allowing administrators to use SELinux tools such as `audit2allow`
    to generate XSM policies.
  prefs: []
  type: TYPE_NORMAL
- en: Using XSM booleans
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The default policy enabled by Xen has two booleans that can be toggled:'
  prefs: []
  type: TYPE_NORMAL
- en: The `guest_writeconsole` boolean, which defaults to 1 (on), allows guests to
    access and write to the Xen console.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `prot_doms_locked` boolean, which defaults to 0 (off), will disallow `prot_domU_t`
    guests from launching if enabled.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'While no subcommand is available for the `xl` command to query and set XSM
    booleans, two other commands are installed on the system to accomplish this â€“
    `flask-get-bool` and `flask-set-bool`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'With `flask-get-bool`, we can query the current state of a boolean, or list
    all booleans with their current value:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `flask-set-bool` command is used to toggle booleans:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is very similar to SELinux's `getsebool` and `setsebool` commands.
  prefs: []
  type: TYPE_NORMAL
- en: Querying the XSM policy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The XSM policy file (`xenpolicy-4.13.1`) is quite similar to an SELinux policy
    file. As a result, we can use the SELinux tools to query this file and learn more
    about the policy:'
  prefs: []
  type: TYPE_NORMAL
- en: 'With `seinfo`, we can query statistics about the policy, view which classes
    are supported, the constraints that are enabled within, and more. The only query
    that fails is listing the types supported within the policy:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With `sesearch`, we can query the XSM policy rules themselves, for instance,
    to list all allow rules:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When we discuss analyzing SELinux policies in [*Chapter 13*](B16276_13_Final_VK.xhtml#_idTextAnchor330),
    *Analyzing Policy Behavior*, we will get familiar with other tools that can also
    be used to analyze XSM policy files.
  prefs: []
  type: TYPE_NORMAL
- en: Labeling hardware resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the `flask-label-pci` command, administrators can label specified PCI devices
    with a given type. This approach allows administrators to mark certain devices
    for passthrough access by unprivileged guests.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, to label the PCI device with address `3:2:0` with the `nic_dev_t`
    type, use the following
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: As you might guess from the name, this type is initially defined for passthrough
    access to network devices but can be used for other PCI hardware as well.
  prefs: []
  type: TYPE_NORMAL
- en: Applying custom XSM policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Xen also allows administrators to build and use their own, custom policy.
  prefs: []
  type: TYPE_NORMAL
- en: The default policy for Xen is available inside the `tools/flask/policy` directory
    within the Xen build directory. For instance, the policy rules for the dom0 guest
    are available inside `modules/dom0.te`.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the Xen XSM policy is beyond the scope of this chapter. You will find
    instructions on how to create SELinux policies using the reference policy-style
    method in [*Chapter 15*](B16276_15_Final_VK.xhtml#_idTextAnchor373), *Using the
    Reference Policy*. The Xen XSM policy is based upon this style.
  prefs: []
  type: TYPE_NORMAL
- en: 'Building a custom policy is a matter of updating these files (make a backup
    before you do) and then rebuilding the policy itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the policy build is a new `xenpolicy-4.13.1` file. This file
    can be loaded directly using the `xl loadpolicy` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'This command is similar to the `flask-loadpolicy` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: If, after testing, the policy is deemed ready to be used continuously, copy
    it over to `/boot` so that it is automatically picked up at the next boot as well.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Xen hypervisor is quite different from the QEMU and KVM hypervisors, which
    are more readily used in libvirt. SELinux support for Xen is also different than
    sVirt as the SELinux subsystem can only be active inside Xen guests, and SELinux
    does not see other guests.
  prefs: []
  type: TYPE_NORMAL
- en: Xen has resolved that by implementing its own SELinux copy as XSM-FLASK and
    has integrated the appropriate support for the XSM-FLASK labels in its own tooling.
    In this chapter, we've learned how to apply our own types to Xen guests, toggle
    the XSM state, toggle XSM booleans, and even how we can build and load our own
    XSM-FLASK policy.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll look at container workloads and how SELinux can help
    administrators to further harden and secure their container runtimes. We will
    see how sVirt can be applied to container runtimes, and how the tooling deals
    with SELinux support.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why doesn't the regular SELinux subsystem govern Xen guests?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How are labels assigned to Xen guests?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the common Xen commands that deal with XSM labels?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can administrators load a custom policy for testing purposes?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
