- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Virtualization
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟化
- en: 'There have been a great many advancements in the IT space in the last few decades,
    and a few technologies have come along that have truly revolutionized the technology
    industry. I’m sure few would argue that the internet is by far the most revolutionary
    technology to come around, but another technology that has created a paradigm
    shift in IT is virtualization. This concept changed the way we maintain our data
    centers, allowing us to segregate workloads into many smaller machines being run
    from a single server. This allows us to get even more use out of our hardware.
    Since Ubuntu features the latest advancements of the Linux kernel, virtualization
    support is actually built right into it. After installing just a few packages
    to allow us to interact with the virtualization features, we can create virtual
    machines on our Ubuntu server without the need for a pricey license agreement
    or support contract. In this chapter, I’ll walk you through setting up your own
    Ubuntu-based virtualization solution. Along the way, I’ll walk you through the
    following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几十年里，信息技术领域发生了许多重要的进展，几项技术的出现真正颠覆了整个技术行业。相信很少有人会争辩，互联网无疑是迄今为止最具革命性的技术，但另一项在IT领域产生范式转变的技术是虚拟化。这个概念改变了我们维护数据中心的方式，使我们能够将工作负载划分为多个从单台服务器运行的小型虚拟机。这使我们能够更加充分地利用硬件。由于Ubuntu内置了Linux内核的最新进展，因此虚拟化支持实际上已经集成在其中。只需安装一些软件包，便能让我们与虚拟化功能进行交互，并在Ubuntu服务器上创建虚拟机，无需昂贵的许可协议或支持合同。在本章中，我将引导你设置基于Ubuntu的虚拟化解决方案。在这个过程中，我将介绍以下内容：
- en: Prerequisites and considerations
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前提条件和考虑事项
- en: Setting up a virtual machine server
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置虚拟机服务器
- en: Creating virtual machines
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建虚拟机
- en: Bridging the virtual machine network
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 桥接虚拟机网络
- en: Simplifying virtual machine creation with cloning
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过克隆简化虚拟机的创建
- en: Managing virtual machines via the command line
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过命令行管理虚拟机
- en: In order to get started, we’ll need a server to use for this task, and we’ll
    first have a discussion on some considerations to make when setting up a server
    for this purpose.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，我们需要一台服务器来完成这项任务，我们首先会讨论一些在设置服务器时需要考虑的事项。
- en: Prerequisites and considerations
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前提条件和考虑事项
- en: I’m sure many of you have already used a virtualization solution before. In
    fact, I bet a great many readers are following along with this book while using
    a **Virtual Machine** (**VM**) running in a solution such as VirtualBox, Parallels,
    VMware, or one of the others. Those applications and others like them are great
    for testing Ubuntu or other operating systems on your desktop or laptop. In this
    section, we’ll set up a VM server that can act as a centrally available server
    on which to run VMs.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信你们中的许多人已经使用过虚拟化解决方案。事实上，我敢打赌，很多读者在使用本书时，可能已经在像VirtualBox、Parallels、VMware等解决方案中运行着**虚拟机**（**VM**）。这些应用程序及类似的软件非常适合在台式机或笔记本电脑上测试Ubuntu或其他操作系统。在本节中，我们将设置一台虚拟机服务器，它可以作为一个集中式服务器，用来运行虚拟机。
- en: This will be easier than you may think—Ubuntu has virtualization built right
    in. This comes in the form of a dynamic duo consisting of **Kernel-based VM**
    (**KVM**) and **Quick Emulator** (**QEMU**), which together form a virtualization
    suite that enables Ubuntu (and Linux in general) to run VMs without the need for
    a third-party solution. KVM is the feature that is built right into the Linux
    kernel that performs the magic under the hood. It handles the low-level instructions
    in the kernel that are needed to separate tasks between those run on a physical
    host and on a guest VM. QEMU is also important, as it emulates hardware components
    that are generally found in physical servers. The combination of KVM and QEMU
    makes up the virtualization solution that can be enabled on an Ubuntu server to
    turn it into a host for VMs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这比你想象的要容易——Ubuntu内置了虚拟化功能。它以一对动态组合的形式存在，包括**基于内核的虚拟机**（**KVM**）和**快速模拟器**（**QEMU**），两者共同形成一个虚拟化套件，使Ubuntu（以及Linux一般）能够运行虚拟机，而无需第三方解决方案。KVM是内置于Linux内核中的功能，它在后台执行魔法，处理内核中需要的低级指令，帮助将任务分隔到物理主机和来宾虚拟机之间。QEMU同样重要，它模拟了通常出现在物理服务器中的硬件组件。KVM和QEMU的结合组成了虚拟化解决方案，可以在Ubuntu服务器上启用，将其转变为虚拟机的宿主。
- en: To be fair, you can set up something like VirtualBox on your Ubuntu Server to
    accomplish the same thing, and end up with a centrally available virtualization
    server. And that’s perfectly valid, there’s certainly nothing wrong with running
    VirtualBox this way, and many people do. But there are improvements to be had
    by utilizing a built-in system, and KVM offers a very fast interface to the Linux
    kernel to run your VMs with near-native speeds, depending on your use case. QEMU/KVM
    (which I’ll refer to simply as KVM going forward) is about as native as you can
    get.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 公平地说，你可以在 Ubuntu Server 上设置类似 VirtualBox 的虚拟化方案来完成相同的任务，最终得到一个集中式的虚拟化服务器。这完全是可行的，运行
    VirtualBox 的方式没有问题，很多人就是这么做的。但通过使用内建的系统，还是有一些改进的，KVM 提供了一个非常快速的接口，通过它可以与 Linux
    内核进行交互，从而以接近本机的速度运行虚拟机，具体速度取决于你的使用场景。QEMU/KVM（以下简称 KVM）几乎是最接近本机的虚拟化方式了。
- en: I bet you’re eager to get started, but there are a few quick things to consider
    before we dive in. First, of all the activities I’ve walked you through in this
    book so far, setting up our own virtualization solution will be the most expensive
    from a hardware perspective. The more VMs you plan on running, the more resources
    your server will need to have available (especially RAM). Thankfully, most computers
    nowadays ship with 8 GB of RAM at a minimum, with 16 GB or more being fairly common.
    With most modern computers, you should be able to run VMs without too much of
    an impact. Depending on what kind of machine you’re using, the CPU and RAM may
    present bottlenecks, especially when it comes to legacy hardware.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我敢打赌你已经迫不及待地想开始了，但在我们深入之前，有几件事需要考虑。首先，在这本书中我带你完成的所有活动中，从硬件角度来看，设置我们自己的虚拟化解决方案将是最昂贵的。你计划运行的虚拟机（VM）越多，服务器需要的资源就越多（特别是内存）。幸运的是，现在大多数电脑都至少配备了
    8 GB 的内存，16 GB 或更多内存则相当常见。使用大多数现代电脑，你应该能够在不产生太大影响的情况下运行虚拟机。根据你使用的机器类型，CPU 和内存可能会成为瓶颈，尤其是对于老旧硬件来说。
- en: 'For the purposes of this chapter, it’s recommended that you have a PC or server
    available with a processor that’s capable of supporting VM extensions. A good
    majority of CPUs on computers nowadays offer this, though some may not. To be
    sure, you can run the following command on the machine you intend to host the
    KVM VMs on in order to find out whether your CPU supports virtualization extensions:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章的目的，建议你拥有一台能够支持 VM 扩展的处理器的 PC 或服务器。现在大多数电脑的 CPU 都提供这个功能，尽管有些可能不支持。为了确认，你可以在打算托管
    KVM 虚拟机的机器上运行以下命令，以找出你的 CPU 是否支持虚拟化扩展：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A result of `1` or more means that your CPU does support virtualization extensions.
    A result of `0` means it does not:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 结果为 `1` 或更高表示你的 CPU 支持虚拟化扩展，结果为 `0` 表示不支持：
- en: '![](img/B18425_16_01.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_16_01.png)'
- en: 'Figure 16.1: Checking the CPU for compatibility with virtualization'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.1：检查 CPU 是否支持虚拟化
- en: Even if your CPU does support virtualization extensions, it’s often the case
    that it’s disabled by default with most end user PCs sold today, and even some
    servers. To enable these extensions, you may need to enter the BIOS setup screen
    for your computer and enable the option. Depending on your CPU and chipset, this
    option may be named something similar to “virtualization support,” under a more
    technical name such as VT-x, AMD-V, or another verbiage. Unfortunately, I won’t
    be able to walk you through how to enable the virtualization extensions for your
    hardware, since the instructions will differ from one machine to another. If in
    doubt, refer to the documentation for your hardware.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你的 CPU 支持虚拟化扩展，通常情况下，今天大多数消费者 PC 甚至一些服务器都默认禁用了这些扩展。要启用这些扩展，你可能需要进入计算机的 BIOS
    设置界面并启用相关选项。根据你的 CPU 和芯片组，这个选项可能会被命名为类似“虚拟化支持”的东西，或者使用更技术化的名称，如 VT-x、AMD-V 或其他术语。不幸的是，我无法为你提供如何启用虚拟化扩展的详细步骤，因为每台机器的操作可能有所不同。如果不确定，请查阅硬件的文档。
- en: 'One final note: I’m sure many of you are using VirtualBox, as it seems to be
    a very popular solution for those testing out Linux distributions (and rightfully
    so; it’s great!). However, you can’t run both VirtualBox and KVM VMs on the same
    machine simultaneously. You can certainly have both solutions installed on the
    same machine, but you just can’t have a VirtualBox VM up and running, and then
    expect to also be able to start up a KVM VM. The virtualization extensions of
    your CPU can only work with one solution at a time.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个提示：我相信很多人都在使用 VirtualBox，因为它似乎是测试 Linux 发行版的一个非常流行的解决方案（而且确实如此，它非常棒！）。然而，你不能在同一台机器上同时运行
    VirtualBox 和 KVM 虚拟机。你当然可以在同一台机器上安装这两种解决方案，但你不能同时启动一个 VirtualBox 虚拟机，再试图启动一个 KVM
    虚拟机。你的 CPU 的虚拟化扩展一次只能与一个解决方案一起工作。
- en: Another consideration to bear in mind is the amount of space the server has
    available, as VMs can take quite a bit of space. The default directory for KVM
    VM images is `/var/lib/libvirt/images`. If your `/var` directory is part of the
    `root` filesystem, you may not have a lot of space to work with here. One trick
    is that you can mount an external storage volume to this directory, so you can
    store your VM disk images on another volume. Or you can simply create a symbolic
    link that will point this directory somewhere else. We discussed symbolic links
    in *Chapter 5*, *Managing Files and Directories*. The choice is yours. If your
    `root` filesystem has at least 10 GB available, you should be able to create at
    least one VM without needing to configure the storage. I think it’s a fair estimate
    to assume at least 10 GB of hard drive space per VM.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要考虑的问题是服务器可用空间的大小，因为虚拟机可能会占用相当多的空间。KVM 虚拟机镜像的默认目录是`/var/lib/libvirt/images`。如果你的
    `/var` 目录属于 `root` 文件系统的一部分，你可能没有很多空间可以使用。有一个技巧是，你可以将一个外部存储卷挂载到这个目录，这样你就可以把虚拟机磁盘镜像存储在另一个卷中。或者你可以创建一个符号链接，将这个目录指向其他位置。我们在*第
    5 章*《管理文件和目录》中讨论过符号链接。选择权在你。如果你的 `root` 文件系统至少有 10 GB 可用空间，那么你应该能够创建至少一个虚拟机，而无需配置存储。我认为假设每个虚拟机至少需要
    10 GB 硬盘空间是一个合理的估计。
- en: Setting up a virtual machine server
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置虚拟机服务器
- en: With all the discussion out of the way, let’s start the process and set up our
    virtualization server. Even though KVM is built into the Linux kernel, we’ll still
    need to install some packages in order to properly interface with it. Specifically,
    we’ll need to install several `libvirt` packages, as well as QEMU itself. `libvirt`
    itself gives us access to manage virtualization platforms on our server, as it
    provides us with a set of useful tools to manage our virtual machines.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有讨论完成后，我们开始设置虚拟化服务器的过程。即使 KVM 是内建在 Linux 内核中的，我们仍然需要安装一些软件包，以便正确地与其进行接口。具体来说，我们需要安装一些
    `libvirt` 软件包以及 QEMU 本身。`libvirt` 本身为我们提供了管理虚拟化平台的权限，它为我们提供了一组管理虚拟机的有用工具。
- en: 'These packages will require a decent number of dependencies, so it may take
    a few minutes for everything to install:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些软件包将需要一些依赖项，因此安装过程可能需要几分钟：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You’ll now have an additional service running on your server, `libvirtd`. Once
    you’ve finished installing KVM’s packages, this service will be started and enabled
    for you. Feel free to take a look at it to see for yourself:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将在服务器上启动一个额外的服务，`libvirtd`。一旦你完成安装 KVM 的软件包，这个服务就会启动并启用。你可以随时查看它，自己确认一下：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should see information on the state of the service, similar to the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到服务状态的信息，类似于以下内容：
- en: '![](img/B18425_16_02.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_16_02.png)'
- en: 'Figure 16.2: Checking the status of the libvirtd unit after installing KVM-related
    packages'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.2：安装 KVM 相关软件包后检查 libvirtd 单元的状态
- en: 'Let’s stop this service for now, as we have some additional configuration to
    do:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们暂时停止这个服务，因为我们还需要做一些额外的配置：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we’ll need to make sure we have two required groups on our server, `kvm`
    and `libvirt`. It’s quite possible that the packages that we’ve installed have
    added these groups on our server already, so feel free to check the contents of
    `/etc/group` and see if they’re there. If not, you can create them with the `groupadd`
    command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要确保服务器上有两个必需的组，`kvm` 和 `libvirt`。我们安装的软件包很可能已经在服务器上添加了这两个组，所以可以随时检查一下
    `/etc/group` 文件，看看它们是否已经存在。如果没有，你可以使用 `groupadd` 命令来创建它们：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Our primary user account should be a member of both groups. If your user isn’t
    already a member of these, add your user to the required groups (substitute the
    username, `jay`, with yours):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主要用户账户应该是这两个组的成员。如果你的用户尚未是这两个组的成员，可以将你的用户添加到所需的组中（将用户名 `jay` 替换为你的用户名）：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: At this point, you may as well log out and then log in again to ensure the changes
    to your group memberships have taken effect.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你最好注销并重新登录一次，以确保你的用户组变更已生效。
- en: 'To ensure we’ll be able to manage virtualization properly, we should ensure
    that users of the `kvm` group have access to the `/var/lib/libvirt/images` directory
    so that they’ll have access to the data that will be stored in the directory.
    First, we’ll apply the `kvm` group to this folder:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们能够正确管理虚拟化，我们应当确保 `kvm` 组的用户有权访问 `/var/lib/libvirt/images` 目录，以便他们能够访问存储在该目录中的数据。首先，我们将
    `kvm` 组应用到这个文件夹：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, we’ll set the permissions of `/var/lib/libvirt/images` such that anyone
    in the `kvm` group will be able to modify its contents:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将设置 `/var/lib/libvirt/images` 的权限，使得 `kvm` 组中的任何人都可以修改其中的内容：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'With the initial packages and permissions in place, we can now start the `libvirtd`
    service:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装了初始包并设置了权限后，我们现在可以启动 `libvirtd` 服务：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, check the status of the service to make sure that there are no errors:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，检查服务的状态，以确保没有错误：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now that we’ve configured the server, we can set up our workstation to be able
    to connect to it and manage the virtualization implementation that we’ve set up.
    We’ll install a utility that will give us a **graphical user interface** (**GUI**)
    through which we can perform administration tasks relating to VMs. The utility
    we’ll be using for this purpose is known as **Virtual Machine Manager** abbreviated
    as `virt-manager`. This utility is installed on Linux workstations, so you’ll
    need to install it on a laptop or desktop that’s running a desktop variant of
    Linux. If you have a computer running Debian or Ubuntu, the following command
    will install the packages that are required for this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置好服务器，我们可以设置工作站，使其能够连接到服务器并管理我们已设置的虚拟化实现。我们将安装一个工具，提供一个**图形用户界面**（**GUI**），通过该界面我们可以执行与虚拟机相关的管理任务。我们将使用的工具叫做**虚拟机管理器**，简称
    `virt-manager`。这个工具会安装在 Linux 工作站上，因此你需要在运行桌面版 Linux 的笔记本或台式机上安装它。如果你有一台运行 Debian
    或 Ubuntu 的电脑，可以使用以下命令来安装所需的包：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you use a distribution of Linux other than Ubuntu, Debian, or one based on
    them, then you may need to consult the documentation for your distribution in
    order to install `virt-manager`. If you’re not running Linux on your workstation
    at all, there is a suite of command-line utilities that can be used to manage
    VMs that we’ll cover later in this chapter when we discuss this in the *Managing
    virtual machines via the command line* section. If all else fails, you can install
    this utility inside a Linux VM running on your workstation.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是除 Ubuntu、Debian 或基于它们的 Linux 发行版之外的其他 Linux 发行版，你可能需要查阅该发行版的文档，以便安装 `virt-manager`。如果你的工作站根本没有运行
    Linux，我们稍后将在本章的 *通过命令行管理虚拟机* 部分讨论一套可以用于管理虚拟机的命令行工具。如果这些方法都不奏效，你可以在运行 Linux 的虚拟机中安装这个工具。
- en: 'Next, open `virt-manager` on your administration machine. It should be located
    in the **Applications** menu of your desktop environment, usually under the **System
    Tools** section of **Virtual Machine Manager**. If you have trouble finding it,
    simply run `virt-manager` in your shell prompt. When you first launch it, you
    may see the following error:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在你的管理机器上打开 `virt-manager`。它应该位于桌面环境的 **应用程序** 菜单中，通常在 **系统工具** 部分下的 **虚拟机管理器**
    中。如果你找不到它，可以直接在终端中运行 `virt-manager`。第一次启动时，你可能会看到以下错误：
- en: '![](img/B18425_16_03.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_16_03.png)'
- en: 'Figure 16.3: A possible error that may appear when first launching virt-manager'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.3：第一次启动 virt-manager 时可能出现的错误
- en: If you do see the error, simply dismiss it and don’t worry about it. By default,
    `virt-manager` defaults to attempting to connect to an instance of `libvirtd`
    running on your local computer. Unless you are also running KVM VMs locally and
    you’ve already set it up, this attempt will fail. But that doesn’t matter for
    us, as we’ll be using `virt-manager` to manage VMs on our server.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到这个错误，直接忽略它，不必担心。默认情况下，`virt-manager` 会尝试连接到本地计算机上运行的 `libvirtd` 实例。除非你本地也在运行
    KVM 虚拟机并且已经设置好了，否则这个尝试会失败。但这对我们没有影响，因为我们将使用 `virt-manager` 来管理服务器上的虚拟机。
- en: 'Once you’ve opened `virt-manager`, you’ll see the main window, which will look
    similar to the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你打开了 `virt-manager`，你将看到主窗口，其外观与下图类似：
- en: '![](img/B18425_16_04.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_16_04.png)'
- en: 'Figure 16.4: The virt-manager application'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.4：virt-manager 应用程序
- en: 'The `virt-manager` utility is especially useful as it allows us to manage both
    remote and local KVM servers. From one utility, you can create connections to
    any of your KVM servers, including one or more external servers or `localhost`
    if you are running KVM on your laptop or desktop. To create a new connection,
    click on **File** and select **Add Connection**. A new screen will appear, where
    we can fill out the details of the KVM server we wish to connect to:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`virt-manager` 工具特别有用，因为它可以帮助我们管理远程和本地的 KVM 服务器。通过这个工具，你可以创建与任何 KVM 服务器的连接，包括一个或多个外部服务器，或者如果你在笔记本电脑或台式机上运行
    KVM，则可以连接到 `localhost`。要创建一个新的连接，点击 **文件**，然后选择 **添加连接**。此时会出现一个新界面，在这里我们可以填写希望连接的
    KVM 服务器的详细信息：'
- en: '![](img/B18425_16_05.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_16_05.png)'
- en: 'Figure 16.5: Adding a new connection to virt-manager'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.5：向 virt-manager 添加新连接
- en: In the **Add Connection** window, enter the details of your connection. In the
    screenshot, you can see that I first checked the **Connect to remote host over
    SSH** box, which selects SSH as my connection method, `jay` for my **Username**,
    and I’ve entered the IP address of my KVM server (`172.16.250.19`) in the **Hostname**
    field. Fill out the specific details here for your KVM server to set up your connection.
    Keep in mind that in order for this to work, the username you include here will
    need to be able to access the server via SSH and have permissions to the hypervisor
    (be a member of the `kvm` and `libvirtd` groups we added earlier), and the `libvirtd`
    service must be running on the server. If all of these requirements are met, you’ll
    have a new connection set up to your KVM server when you click **Connect**. You
    might see a pop-up dialog box with the text `Are you sure you wish to continue
    connecting (yes/no)?`. If you do, type `yes` and press *Enter*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **添加连接** 窗口中，输入连接的详细信息。在截图中，你可以看到我首先勾选了 **通过 SSH 连接到远程主机**，这将选择 SSH 作为我的连接方式，`jay`
    作为我的 **用户名**，并且我在 **主机名** 字段中输入了我的 KVM 服务器的 IP 地址（`172.16.250.19`）。请根据你的 KVM 服务器填写具体的连接信息。请记住，为了使其正常工作，这里输入的用户名需要能够通过
    SSH 访问服务器，并且必须具有访问虚拟化管理程序的权限（也就是之前加入 `kvm` 和 `libvirtd` 组的用户），并且服务器上必须运行 `libvirtd`
    服务。如果满足所有这些要求，点击 **连接** 后，你将成功设置与 KVM 服务器的连接。你可能会看到一个弹出对话框，询问是否继续连接（`yes/no`）。如果是，请键入
    `yes` 并按 *Enter* 键。
- en: 'Either way, you should be prompted for your password to your KVM server; type
    that in and press *Enter*. You should now have a connection listed in your `virt-manager`
    application. You can see the connection I added in the following screenshot; it’s
    the second one on the list. The first connection is `localhost` since I also have
    KVM running on my local laptop in addition to having it installed on a remote
    server:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种情况，你都会被提示输入 KVM 服务器的密码；请输入密码并按 *Enter* 键。现在你应该能够在 `virt-manager` 应用程序中看到一个连接列表。在下面的截图中，你可以看到我添加的连接，它是列表中的第二个连接。第一个连接是
    `localhost`，因为我除了在远程服务器上安装 KVM 外，还在本地笔记本上运行 KVM：
- en: '![](img/B18425_16_06.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_16_06.png)'
- en: 'Figure 16.6: virt-manager with a new connection added'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.6：添加新连接后的 virt-manager 界面
- en: We’re almost at a point where we’ll be able to test our KVM server. But first,
    we’ll need a storage group for ISO images, for use when installing operating systems
    on our VMs. When we create a VM, we can attach an ISO image from our ISO storage
    group to our VM, which will allow it to install the operating system.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们快要测试 KVM 服务器了。但首先，我们需要为 ISO 镜像创建一个存储组，用于在虚拟机上安装操作系统。当我们创建虚拟机时，可以将 ISO 镜像从我们的
    ISO 存储组附加到虚拟机上，从而允许它安装操作系统。
- en: 'To create this storage group, open `virt-manager` if it’s not open already.
    Right-click on the listing for your server connection, and then click on **Details**.
    You’ll see a new window that will show details regarding your KVM server. Click
    on the **Storage** tab:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建这个存储组，如果 `virt-manager` 尚未打开，请先打开它。右键点击服务器连接的条目，然后点击 **详情**。你将看到一个新窗口，显示有关
    KVM 服务器的详细信息。点击 **存储** 标签：
- en: '![](img/B18425_16_07.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_16_07.png)'
- en: 'Figure 16.7: The first screen while setting up a new storage pool'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.7：设置新存储池时的第一个界面
- en: 'At first, you’ll only see the default connection we edited earlier. Now, we
    can add our ISO storage pool. Click on the plus symbol in the bottom-left corner
    to create the new pool:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，你只会看到我们之前编辑的默认连接。现在，我们可以添加ISO存储池。点击左下角的加号符号来创建新的存储池：
- en: '![](img/B18425_16_08.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_16_08.png)'
- en: 'Figure 16.8: The storage tab of the virt-manager application'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.8：virt-manager应用程序的存储选项卡
- en: 'In the **Name** field, type `ISO`. You can actually name it anything you want,
    but ISO makes sense, considering it will be storing ISO images. For the **Target
    Path** field, set it to `/var/lib/libvirt/images/ISO` unless you have a different
    directory in your filesystem for VM storage. Click **Finish** to finalize our
    changes. We should also update the permissions for this directory so that it’s
    owned by the proper user, and members of the `kvm` group have read and write access
    to it:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在**名称**字段中，输入`ISO`。你实际上可以随意命名，但考虑到它将存储ISO镜像，命名为ISO比较合适。在**目标路径**字段中，设置为`/var/lib/libvirt/images/ISO`，除非你的文件系统中有其他目录用于虚拟机存储。点击**完成**以最终确定我们的更改。我们还应该更新该目录的权限，使其归正确的用户所有，并且`kvm`组的成员能够对其进行读写操作：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Congratulations! You now have a fully configured KVM server for creating and
    managing VMs. Our server has a place to store VMs as well as ISO images. You should
    also be able to connect to this instance using `virt-manager`, as we’ve done in
    this section. Next, I’ll walk you through the process of setting up your first
    VM. Before we get to that, I recommend you copy some ISO images over to your KVM
    server. It doesn’t really matter which ISO image you use—any operating system
    should suffice. If in doubt, you can simply download Ubuntu Server 22.04 again
    like we did back in *Chapter 1*, *Deploying Ubuntu Server*, when we set up our
    initial installation.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你现在已经拥有了一个完全配置的KVM服务器，用于创建和管理虚拟机。我们的服务器有地方存储虚拟机以及ISO镜像。你也应该能够像我们在本节中做的那样，使用`virt-manager`连接到这个实例。接下来，我将带你完成设置第一个虚拟机的过程。在开始之前，我建议你将一些ISO镜像复制到你的KVM服务器上。你使用哪个ISO镜像并不重要——任何操作系统镜像都可以。如果有疑问，你可以像我们在*第1章*《部署Ubuntu服务器》中做的那样，重新下载Ubuntu
    Server 22.04，我们在设置初始安装时也用的就是这个镜像。
- en: After you’ve chosen an ISO file and you’ve downloaded it, copy it over to your
    server via `scp` or `rsync`, and move it into the `/var/lib/libvirt/images/ISO`
    directory. Both of those utilities were covered in *Chapter 12*, *Sharing and
    Transferring Files*. Once the file has been copied over, you should have everything
    you need for now.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择并下载ISO文件后，通过`scp`或`rsync`将其复制到服务器，并将其移入`/var/lib/libvirt/images/ISO`目录。这两个工具在*第12章*《共享和传输文件》中都有介绍。文件复制完成后，你现在应该拥有所需的所有文件。
- en: Creating virtual machines
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建虚拟机
- en: 'Now, the time has come to put your new VM server to the test and create a VM.
    At this point, I’m assuming that the following is true:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，到了测试你新的虚拟机服务器并创建虚拟机的时候了。此时，我假设以下情况成立：
- en: You’re able to connect to your KVM server via `virt-manager`
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你能够通过`virt-manager`连接到你的KVM服务器
- en: You’ve already copied one or more ISO images to the server
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你已经将一个或多个ISO镜像复制到服务器
- en: Your storage directory has at least 10 GB of space available
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的存储目录至少有10GB可用空间
- en: The KVM server has enough free RAM to be associated with the VM you intend on
    creating
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KVM服务器拥有足够的空闲内存，可以分配给你打算创建的虚拟机
- en: Go ahead and open up `virt-manager`, and let’s get started!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开`virt-manager`，让我们开始吧！
- en: 'In `virt-manager`, right-click your server connection and click on **New**
    to start the process of creating a new VM. The default selection will be on **Local
    install media (ISO image or CDROM)**; leave this selection as is and click on
    **Forward**:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在`virt-manager`中，右键点击你的服务器连接，然后点击**新建**，开始创建新的虚拟机。默认选项会选择**本地安装介质（ISO镜像或CDROM）**；保持此选择不变，然后点击**前进**：
- en: '![](img/B18425_16_09.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_16_09.png)'
- en: 'Figure 16.9: The first screen while setting up a new VM'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.9：设置新虚拟机时的第一个屏幕
- en: 'On the next screen, click on **Browse** to open up another window where you
    can select the ISO image you’ve downloaded:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一屏幕中，点击**浏览**打开另一个窗口，在该窗口中选择你已下载的ISO镜像：
- en: '![](img/B18425_16_10.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_16_10.png)'
- en: 'Figure 16.10: Creating a new VM and setting the VM options'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.10：创建新虚拟机并设置虚拟机选项
- en: 'If you click on your ISO storage pool, you should see a list of ISO images
    you’ve downloaded:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击你的ISO存储池，你应该能看到你已下载的ISO镜像列表：
- en: '![](img/B18425_16_11.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_16_11.png)'
- en: 'Figure 16.11: Choosing an ISO image during VM creation'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.11：在创建虚拟机时选择ISO镜像
- en: If you don’t see any ISO images here, you may need to click the refresh icon.
    In my sample server, I added an install image for Ubuntu Server 22.04, which you
    can see in the list. Again, you can use whatever operating system you prefer.
    Click on the ISO image name to highlight it, and then click **Choose Volume**
    to finalize the selection. Then, click **Forward** to continue to the next screen.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这里没有显示任何ISO镜像，您可能需要点击刷新图标。在我的示例服务器中，我添加了一个Ubuntu Server 22.04的安装镜像，您可以在列表中看到它。同样，您可以使用任何您喜欢的操作系统。点击ISO镜像名称以将其高亮显示，然后点击**选择卷**来确认选择。接着，点击**前进**以继续到下一个屏幕。
- en: 'Next, you’ll be asked to allocate RAM and CPU resources to the VM:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，系统会要求您为虚拟机分配RAM和CPU资源：
- en: '![](img/B18425_16_12.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_16_12.png)'
- en: 'Figure 16.12: Adjusting the RAM and CPU count for the new VM'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.12：为新虚拟机调整RAM和CPU数量
- en: For most Linux distributions with no GUI, 2,048 MB is plenty (unless your workload
    demands more). One CPU core is fine for lightweight workloads, but consider adding
    more if the documentation for the application you intend on running recommends
    more than that. The resources you select here will depend on what you have available
    on your host. Click on **Forward** when you’ve finished allocating resources.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数没有GUI的Linux发行版，2,048 MB足够了（除非您的工作负载需要更多）。对于轻量级工作负载，一个CPU核心就足够了，但如果您打算运行的应用程序文档推荐更多的资源，可以考虑增加更多。您在这里选择的资源将取决于主机上可用的资源。完成资源分配后，点击**前进**。
- en: 'Next, you’ll allocate free disk space for your VM’s virtual hard disk:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将为虚拟机的虚拟硬盘分配空闲磁盘空间：
- en: '![](img/B18425_16_13.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_16_13.png)'
- en: 'Figure 16.13: Allocating storage resources for the new VM'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.13：为新虚拟机分配存储资源
- en: Set the disk image size to however much space you feel is relevant for the purpose
    of the VM. Click on **Forward** when done.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 设置磁盘镜像大小，根据虚拟机的用途，选择合适的空间。完成后，点击**前进**。
- en: 'Finally, you’ll name your VM:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您将为虚拟机命名：
- en: '![](img/B18425_16_14.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_16_14.png)'
- en: 'Figure 16.14: Naming the new VM'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.14：为新虚拟机命名
- en: 'This won’t be the hostname of the VM; it’s just the name you’ll see when you
    see the VM listed in `virt-manager`. When you click on **Finish**, the VM will
    start and it will automatically boot into the install ISO you’ve attached to the
    VM near the beginning of the process. The installation process for that operating
    system will then begin:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这不会是虚拟机的主机名；它只是您在`virt-manager`中看到虚拟机时显示的名称。当您点击**完成**时，虚拟机会启动，并自动引导至您在过程初期附加到虚拟机的安装ISO。然后，该操作系统的安装过程将开始：
- en: '![](img/B18425_16_15.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_16_15.png)'
- en: 'Figure 16.15: Installing Ubuntu Server inside a VM'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.15：在虚拟机中安装Ubuntu Server
- en: When you click on the VM window, it will steal your keyboard and mouse and dedicate
    them to the window. Press *Ctrl* and *Alt* at the same time to release this control
    and regain full control of your keyboard and mouse.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击虚拟机窗口时，它将抢占您的键盘和鼠标，并将其专用于该窗口。按下*Ctrl*和*Alt*键同时释放控制权，并重新获得对键盘和鼠标的完全控制。
- en: Unfortunately, I can’t walk you through the installation process of your VM’s
    operating system since there are hundreds of possible candidates you may be installing.
    If you’re installing another instance of Ubuntu Server, you can refer back to
    *Chapter 1*, *Deploying Ubuntu Server*, where we walked through the process. The
    process will be the same in the VM. From here, you should be able to create as
    many VMs as you need and have resources for.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 很遗憾，我无法为您详细讲解虚拟机操作系统的安装过程，因为可能有数百种操作系统供您选择。如果您正在安装另一个Ubuntu Server实例，可以参考*第1章*，*部署Ubuntu
    Server*，我们在其中已经讲解了这一过程。这个过程在虚拟机中是一样的。从这里开始，您应该能够创建尽可能多的虚拟机，并为其分配所需的资源。
- en: Next, we’ll look at some concepts surrounding networking for our VMs.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨一些与虚拟机网络相关的概念。
- en: Bridging the virtual machine network
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 桥接虚拟机网络
- en: Your KVM VMs will use their own network unless you configure bridged networking.
    This means your VMs will get an IP address in their own network, instead of yours.
    By default, each machine will be a member of the `192.168.122.0/24` network, with
    an IP address in the range of `192.168.122.2` to `192.168.122.254`. If you’re
    utilizing KVM VMs on your personal laptop or desktop, this behavior might be adequate.
    You’ll be able to SSH into your VMs via their IP addresses if you’re connecting
    from the same machine the VMs are running on. If this satisfies your use case,
    there’s no further configuration you’ll need to do.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 除非配置桥接网络，否则你的KVM虚拟机将使用它们自己的网络。这意味着你的虚拟机将获得它们自己网络中的IP地址，而不是你的网络。默认情况下，每台机器将属于`192.168.122.0/24`网络，IP地址范围从`192.168.122.2`到`192.168.122.254`。如果你在个人笔记本或台式机上使用KVM虚拟机，这种行为可能已经足够。如果你从虚拟机运行所在的相同计算机连接，你将能够通过虚拟机的IP地址进行SSH连接。如果这满足了你的使用需求，则无需进行进一步的配置。
- en: Bridged networking allows your VMs to receive an IP address from the DHCP server
    on your network instead of its internal one, which will allow you to communicate
    with your VMs from any other machine on your network. This use case is preferable
    if you’re setting up a central VM server to power infrastructure for your small
    office or organization, as your DHCP server can become a single source of truth
    for all of the IP addresses in use in your organization. With a bridged network
    on your VM server, each VM will be treated as any other network device. All you’ll
    need is a wired network interface, as wireless cards typically don’t work with
    bridged networking.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 桥接网络允许虚拟机从网络中的DHCP服务器获取IP地址，而不是使用内部IP地址，这将使你能够从网络中的任何其他计算机与虚拟机进行通信。如果你正在为小型办公室或组织设置一个中央虚拟机服务器来支持基础设施，这种使用方式更为优选，因为你的DHCP服务器可以成为你组织中所有IP地址的单一真实来源。通过在虚拟机服务器上设置桥接网络，每个虚拟机将被视为任何其他网络设备。你只需要一个有线网络接口，因为无线网卡通常不支持桥接网络。
- en: That last point is very important. Some network cards don’t support bridging,
    and if yours doesn’t, you won’t be able to use a bridge with your VM server unless
    you replace the network card. Before continuing, you may want to ensure your network
    card supports bridging by reading the documentation from the vendor of your device.
    In my experience, most wired cards made by Intel support bridging, and most wireless
    cards do NOT. Make sure you back up the Netplan configuration file before changing
    it, so you can revert back to the original version if you find that bridging doesn’t
    work for you.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点非常重要。一些网络卡不支持桥接，如果你的网络卡不支持，你将无法在虚拟机服务器上使用桥接，除非更换网络卡。在继续之前，你可能需要查看你设备厂商的文档，以确保你的网络卡支持桥接。根据我的经验，大多数由Intel制造的有线网卡支持桥接，而大多数无线网卡则不支持。确保在更改Netplan配置文件之前备份该文件，以便在桥接无法使用时可以恢复到原始版本。
- en: To set up bridged networking, we’ll need to create a new interface on our server
    (the one that’s intended for hosting virtual machines). Open up the `/etc/netplan/00-installer-config.yaml`
    file in your text editor with `sudo`. We already talked about this file in *Chapter
    10*, *Connecting to Networks*, so I won’t go into too much detail about it here.
    Basically, this file includes the configuration for each of our network interfaces,
    and this is where we’ll add our new bridged interface.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置桥接网络，我们需要在服务器上创建一个新的网络接口（即用于托管虚拟机的接口）。使用`sudo`在文本编辑器中打开`/etc/netplan/00-installer-config.yaml`文件。我们在*第10章*《连接到网络》中已经讨论过这个文件，因此在这里我不会过多讲解。基本上，这个文件包含了我们每个网络接口的配置，接下来我们将在这里添加新的桥接接口。
- en: Make sure you make a backup of the original Netplan configuration file, and
    then replace its contents with the following. Be sure to replace `enp0s3` (the
    interface name) with your actual wired interface name if it’s different. There
    are two occurrences of it in the file.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 确保备份原始的Netplan配置文件，然后用以下内容替换文件内容。如果你的有线接口名称不同，请确保将文件中的`enp0s3`（接口名称）替换为你的实际接口名称。文件中有两个该名称的出现。
- en: If you’re reading the digital version of this book, it’s highly recommended
    that you refrain from copying and pasting the following code, but rather type
    it manually or copy it from the GitHub URL for the book’s code bundle. The reason
    is that the YAML format is extremely picky about spaces, and if you end up with
    a mix of spaces and tabs, the file might not work. When Netplan errors, it can
    be very hard to figure out exactly what it’s complaining about, but spacing is
    quite often the culprit even if the error output doesn’t lead you to believe so.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在阅读本书的数字版本，强烈建议你不要复制粘贴以下代码，而是手动输入或从书籍代码包的 GitHub URL 复制。原因是 YAML 格式对空格非常挑剔，如果你混用了空格和制表符，文件可能无法正常工作。当
    Netplan 出现错误时，通常很难确切找出它抱怨的是什么，但空格问题往往是罪魁祸首，即使错误输出没有提示你注意到这一点。
- en: 'Take your time while configuring this file. If you make a single mistake, you
    will likely not have network access to the machine once it restarts:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置此文件时请慢慢来。如果你犯了一个小错误，服务器重启后你很可能无法访问网络：
- en: '[PRE12]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After you make the change, you can apply the new settings immediately, or simply
    reboot the server. If you have a monitor and keyboard hooked up to the server,
    the following command is the easiest way to activate the new configuration:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在你进行更改后，你可以立即应用新的设置，或者简单地重启服务器。如果你有显示器和键盘连接到服务器，以下命令是激活新配置的最简单方式：
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If you’re connected to the server via SSH, restarting the network configuration
    will likely result in the server becoming inaccessible because the SSH connection
    will likely drop as soon as the network stops. This will disrupt the connection
    and prevent networking from starting back up. If you know how to use `screen`
    or `tmux`, you can run the `restart` command from within either; otherwise, it
    may just be simpler for you to reboot the server.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你通过 SSH 连接到服务器，重启网络配置可能会导致服务器无法访问，因为一旦网络停止，SSH 连接很可能会断开。这将中断连接并防止网络重新启动。如果你知道如何使用`screen`或`tmux`，你可以在其中运行`restart`命令；否则，重启服务器可能会更简单。
- en: After networking restarts or the server reboots, check whether you can still
    access network resources, such as pinging websites and accessing other network
    nodes from it. If you can, you’re all set. If you’re having any trouble, make
    sure you edited the Netplan config file properly.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 网络重启或服务器重启后，检查你是否仍能访问网络资源，例如能否 ping 网站并访问其他网络节点。如果可以，说明一切正常。如果遇到任何问题，确保你正确编辑了
    Netplan 配置文件。
- en: Now, you should see an additional network interface listed when you run `ip
    addr show`. The interface will be called `br0`. The `br0` interface should have
    an IP address from your DHCP server, in place of your `enp0s3` interface (or whatever
    it may be named on your system). From this point forward, you’ll be able to use
    `br0` for your VM’s networking, instead of the internal network. The internal
    KVM network will still be available, but you can select `br0` to be used instead
    when you create new VMs.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你运行`ip addr show`时，你应该能看到一个额外的网络接口列出。该接口将被命名为`br0`。`br0`接口应该从你的 DHCP 服务器获取
    IP 地址，代替原来的`enp0s3`接口（或你系统上相应的名称）。从此以后，你将能够使用`br0`为虚拟机提供网络，而不是内部网络。内部的 KVM 网络仍然可用，但你可以在创建新虚拟机时选择使用`br0`。
- en: 'If you have a VM you’ve already created that you’d like to switch to utilize
    your bridged networking, you can use the following steps to convert it:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经创建了一个虚拟机，并希望将其切换为使用桥接网络，可以按照以下步骤进行转换：
- en: First, open `virt-manager` and double-click on your VM. A new window with a
    graphical console of your VM will open.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开`virt-manager`并双击你的虚拟机。一个新窗口将打开，显示虚拟机的图形控制台。
- en: The second button along the top (which appears as a blue circle) will open the
    **Virtual Hardware Details** tab, which will allow you to configure many different
    settings for the VM, such as the CPU count, the RAM amount, the boot device order,
    and more.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 顶部第二个按钮（呈蓝色圆形）将打开**虚拟硬件详情**标签，你可以在该标签下配置虚拟机的多种设置，例如 CPU 数量、RAM 大小、启动设备顺序等。
- en: Among the options on the left-hand side of the screen, there will be one that
    reads **NIC** and shows part of the VM’s network card’s MAC address. If you click
    on this, you can configure the VM to use your new bridge by selecting it in the
    list.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕左侧的选项中，会有一个显示**NIC**并显示虚拟机网络卡 MAC 地址部分的选项。如果你点击它，你可以通过在列表中选择它来配置虚拟机使用你新的桥接网络。
- en: 'Finally, click on **Apply**. You may have to restart the VM for the changes
    to take effect:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击**应用**。你可能需要重启虚拟机以使更改生效：
- en: '![](img/B18425_16_16.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_16_16.png)'
- en: 'Figure 16.16: Configuring a VM to use bridge br0'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.16：配置虚拟机使用桥接 br0
- en: While creating a brand-new VM, there’s an additional step you’ll need to do
    in order to configure the VM to use bridged networking. In the last step of the
    process, where you set a name for the VM (as shown in *Figure 16.14*), you’ll
    also see **Advanced options** listed near the bottom of the window. Expand this,
    and you’ll be able to set your network name. Change the dropdown in this section
    to **Specify shared device name** and set the bridge **Name** to `br0`. Now, you
    can click on **Finish** to finalize the VM as before, and it should use your bridge
    whenever it starts up.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建全新虚拟机时，你还需要执行一个额外步骤，以配置虚拟机使用桥接网络。在流程的最后一步，你需要为虚拟机设置名称（如*图16.14*所示），你会在窗口底部看到**高级选项**。展开这些选项，你就可以设置网络名称。在该部分的下拉菜单中选择**指定共享设备名称**，并将桥接**名称**设置为`br0`。现在，你可以点击**完成**，像之前一样完成虚拟机的设置，启动时它将使用你的桥接网络。
- en: From this point onward, you should have not only a fully configured KVM server
    or instance but also a solution that can be treated as a full citizen of your
    network. Your VMs will be able to receive an IP address from a DHCP server and
    communicate with other network nodes directly. If you have a very beefy KVM server,
    you may even be able to consolidate other network appliances into VMs to save
    space, which is basically the entire purpose of virtualization.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 从此以后，你不仅会拥有一个完全配置好的KVM服务器或实例，还将拥有一个可以作为你网络中完全合格成员的解决方案。你的虚拟机将能够从DHCP服务器获取IP地址，并能直接与其他网络节点通信。如果你的KVM服务器非常强大，你甚至可以将其他网络设备整合进虚拟机中以节省空间，这基本上就是虚拟化的目的所在。
- en: In the next section, we’ll simplify the process a bit by discussing the creation
    of a template that can be used to act as a preconfigured starting point when setting
    up a new VM.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将通过讨论创建模板的过程来简化这一流程，模板可以作为设置新虚拟机时的预配置起始点。
- en: Simplifying virtual machine creation with cloning
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简化虚拟机创建过程，通过克隆
- en: Now that we have a KVM server, and we can spin up an army of VMs to do our bidding,
    we can try and find clever ways of automating some of the workload of setting
    up a new VM. Every time we go to create a new VM, we need to go through the entire
    installation process for its operating system again. While this process is not
    difficult, we can certainly simplify it.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个KVM服务器，能够迅速启动一群虚拟机来执行我们的任务，我们可以尝试找到一些巧妙的方法来自动化设置新虚拟机的工作量。每次创建新虚拟机时，我们都需要再次经历操作系统的完整安装过程。虽然这个过程不复杂，但我们完全可以将其简化。
- en: Most prominent virtualization solutions include a feature that allows you to
    create a **VM Template**. With a template, we can create a VM once and get it
    completely configured. Then, we can convert it into a template and use it as a
    base for all future VMs that will use that same operating system. This saves a
    tremendous amount of time. You’ll probably recall the handful of screens you had
    to navigate through to install Ubuntu Server in our first chapter. Imagine not
    having to go through that process again (or at least not nearly as often).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数主流虚拟化解决方案都包括创建**虚拟机模板**的功能。通过模板，我们可以一次性创建并完全配置好虚拟机。然后，我们可以将其转换为模板，并将其用作所有未来虚拟机的基础，这些虚拟机将使用相同的操作系统。这将节省大量时间。你可能还记得在第一章中安装Ubuntu
    Server时需要浏览的一些界面。试想一下，之后就不再需要重复这个过程了（或者至少不需要那么频繁地重复）。
- en: Unfortunately, as great as QEMU/KVM is, it doesn’t have a template feature.
    This glaring hole in its feature set is a sizable setback, but thankfully we Linux
    administrators are very clever, and we can easily work around this to create a
    solution that’s essentially the same thing as templates.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，尽管QEMU/KVM非常强大，但它没有模板功能。这一显著的功能缺失是一个不小的障碍，但幸运的是，我们这些Linux管理员非常聪明，完全可以绕过这个问题，创造出一个基本等同于模板的解决方案。
- en: 'Take the following screenshot, for example:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，看看以下截图：
- en: '![](img/B18425_16_17.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_16_17.png)'
- en: 'Figure 16.17: Virtual Machine Manager with a template listed'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.17：带有列出模板的虚拟机管理器
- en: In the screenshot, you can see two VMs, `ubuntu22.04` and `ubuntu-server-template`.
    Although its name would lead you to believe otherwise, the latter is not a template
    at all; it’s just a VM. There’s nothing really different about it, aside from
    the fact that it isn’t running. What it is, though, is a clever workaround (if
    I do say so myself). If I want to create a new VM, I simply right-click on it,
    then click **Clone**.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在截图中，你可以看到两个虚拟机，`ubuntu22.04`和`ubuntu-server-template`。尽管它的名字会让你认为它是一个模板，但后者根本不是模板，它只是一个虚拟机。它与其他虚拟机没有什么不同，唯一不同的是它没有运行。但它确实是一个巧妙的变通方法（如果我说的没有错的话）。如果我想创建一个新虚拟机，我只需右击它，然后点击**克隆**。
- en: 'The following window will appear:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下窗口将会出现：
- en: '![](img/B18425_16_18.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_16_18.png)'
- en: 'Figure 16.18: Cloning a VM'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.18：克隆虚拟机
- en: When I click **Clone** in this window, after giving the new VM a name, I’ve
    made a copy of it to serve as my new VM. It will use the original as a base, which
    I’ve already configured. Since Ubuntu Server was installed on the “template,”
    I don’t need to do all that work again.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在这个窗口点击**克隆**时，在给新虚拟机命名后，我就制作了它的副本作为我的新虚拟机。它将使用原始虚拟机作为基础，而我已经配置好了它。由于 Ubuntu
    Server 已经安装在“模板”上，我就不需要再做这些工作了。
- en: If you create virtual machine templates for production use, it’s highly recommended
    that you check out **cloud-init**, which can help generalize its Ubuntu installation,
    which includes regenerating its SSH host keys and the machine ID. cloud-init is
    beyond the scope of this book but is definitely essential if you want to go even
    deeper into the topic of generating virtual machine templates.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你为生产环境创建虚拟机模板，强烈建议你了解**cloud-init**，它可以帮助将 Ubuntu 安装程序进行通用化，包括重新生成其 SSH 主机密钥和机器
    ID。cloud-init 超出了本书的范围，但如果你想深入研究虚拟机模板生成的话，它绝对是必不可少的。
- en: Think about the tasks that you find yourself doing manually after setting up
    a new Ubuntu Server instance. With a base VM being used as if it were a template,
    you can include any tweaks or customizations you find yourself implementing right
    into that VM, so every time you clone it, all that work is done for you automatically.
    So long as you maintain your base VM, you can spin up as many VMs from it as you
    need and be able to do so with minimal configuration steps.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 想一想你在设置新 Ubuntu Server 实例后手动执行的任务。通过将基本虚拟机作为模板使用，你可以将你经常实施的任何调整或定制直接包含到该虚拟机中，因此每次克隆时，所有这些工作都会自动完成。只要你保持基本虚拟机的更新，你就可以从中生成尽可能多的虚拟机，并且能够在最小的配置步骤下完成。
- en: We’ve used `virt-manager` quite a bit in this chapter to customize our VMs,
    and while it’s a great utility, we should also understand how to manage our infrastructure
    without it. In the next section, we’ll take a look at some command-line examples
    of managing VMs.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用了很多`virt-manager`来定制虚拟机，虽然它是一个非常好的工具，但我们也应该了解如何在没有它的情况下管理我们的基础设施。在下一节中，我们将看看一些通过命令行管理虚拟机的示例。
- en: Managing virtual machines via the command line
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过命令行管理虚拟机
- en: In this chapter, I showed you how to manage VMs with `virt-manager`. This is
    great if you have a secondary machine with a GUI running Linux as its operating
    system. But what do you do if such a machine isn’t available, and you’d like to
    perform simple tasks such as rebooting a VM or checking to see which VMs are running
    on the server?
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我向你展示了如何使用`virt-manager`管理虚拟机。如果你有一台运行 Linux 操作系统的带图形界面的辅助计算机，这非常有用。但是，如果没有这样的计算机，并且你希望执行一些简单的任务，比如重启虚拟机或检查哪些虚拟机正在服务器上运行，应该怎么办呢？
- en: 'On the VM server itself, you have access to the `virsh` suite of commands,
    which will allow you to manage VMs even if a GUI isn’t available. To use these
    commands, simply connect to the machine that stores your VMs via SSH. What follows
    are some easy examples to get you started. Here’s the first one:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟机服务器本身，你可以访问`virsh`命令集，这将允许你即使没有图形界面也能管理虚拟机。要使用这些命令，只需通过 SSH 连接到存储虚拟机的机器。接下来是一些简单的示例，帮助你入门。第一个示例如下：
- en: '[PRE14]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This command will return an output like that shown in the following screenshot:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将返回如下所示的输出：
- en: '![](img/B18425_16_19.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_16_19.png)'
- en: 'Figure 16.19: Showing running VMs with the virsh list command'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.19：使用 virsh list 命令显示正在运行的虚拟机
- en: With one command, we were able to list the VMs running on the server. In the
    example screenshot, you can see that I have a single VM running. If you’d also
    like to see non-running instances, simply add the `--all` option to the command.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个命令，我们就能列出服务器上运行的虚拟机。在示例截图中，你可以看到我有一台虚拟机在运行。如果你也想查看未运行的虚拟机实例，只需在命令中添加 `--all`
    选项。
- en: 'We can manage the state of our VMs with any of the following commands:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下任何命令来管理虚拟机的状态：
- en: '`virsh start vm-name`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`virsh start vm-name`'
- en: '`virsh shutdown vm-name`'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`virsh shutdown vm-name`'
- en: '`virsh suspend vm-name`'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`virsh suspend vm-name`'
- en: '`virsh resume vm-name`'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`virsh resume vm-name`'
- en: '`virsh destroy vm-name`'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`virsh destroy vm-name`'
- en: '`virsh undefine vm-name`'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`virsh undefine vm-name`'
- en: The command syntax for `virsh` is extremely straightforward. By looking at the
    previous list of commands, you should be able to glean exactly what they do. The
    `virsh` commands allow us to do things such as `start`, `shutdown`, `suspend`,
    and `resume` a VM. The `virsh destroy` command is potentially destructive, as
    we’d use it when we want to halt a VM abruptly. It’s essentially the same result
    as pulling a power cable from a physical server; it stops the instance immediately.
    You should only run that command when you are dealing with an unresponsive VM.
    Finally, the `virsh undefine` command deletes a VM, but you’ll have to remove
    any associated disk files with the `rm` command. The default directory for disk
    files is `/var/lib/libvirt/images`, so you can look inside that directory for
    any disk files that belong to the VM you’ve deleted (they will be named the same
    as the VM).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`virsh` 的命令语法非常简单。通过查看之前的命令列表，你应该能准确理解它们的作用。`virsh` 命令允许我们进行如 `start`、`shutdown`、`suspend`
    和 `resume` 等操作来管理虚拟机。`virsh destroy` 命令可能会造成破坏性影响，因为我们会在需要突然停止虚拟机时使用它。其效果本质上就像是拔掉物理服务器的电源线；它会立即停止虚拟机实例。只有在处理无法响应的虚拟机时，才应运行该命令。最后，`virsh
    undefine` 命令会删除虚拟机，但你还需要使用 `rm` 命令删除任何关联的磁盘文件。磁盘文件的默认目录是 `/var/lib/libvirt/images`，因此你可以查看该目录，查找属于你已删除虚拟机的磁盘文件（它们的文件名与虚拟机相同）。'
- en: That’s not all `virsh` can do, however. We can actually create a VM with the
    `virsh` suite of commands as well. Learning how to do so is a good idea if you
    don’t use Linux as your workstation operating system, or you don’t have access
    to `virt-manager` for some reason. However, manually creating VM disk images and
    configuration is outside the scope of this chapter. The main goal is for you to
    familiarize yourself with managing VMs via `virsh`, and these simple basics will
    allow you to expand your knowledge further.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`virsh` 不仅仅能做这些。实际上，我们还可以使用 `virsh` 一套命令来创建虚拟机。如果你不使用 Linux 作为工作站操作系统，或者由于某种原因无法使用
    `virt-manager`，学习如何创建虚拟机是一个不错的主意。不过，手动创建虚拟机磁盘镜像和配置超出了本章的范围。主要目标是让你熟悉如何通过 `virsh`
    管理虚拟机，这些简单的基础知识将帮助你进一步拓展学习。
- en: Summary
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we took a look at virtualization, specifically with QEMU/KVM.
    We walked through the installation of KVM and the configuration required to get
    our virtualization server up and running. We walked through the process of creating
    a bridged network so that our VMs can be accessible from the rest of the network
    and created our first VM. In addition, although QEMU/KVM doesn’t have its own
    solution for templating, we worked around that and created our own solution.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了虚拟化，特别是使用 QEMU/KVM。我介绍了 KVM 的安装和配置过程，使我们的虚拟化服务器能够顺利运行。我们还介绍了如何创建桥接网络，以便让虚拟机能被网络中的其他设备访问，并创建了我们的第一台虚拟机。此外，虽然
    QEMU/KVM 没有自己的模板解决方案，我们通过自定义的方式解决了这一问题，创建了属于我们自己的方案。
- en: In *Chapter 17*, *Running Containers*, we’ll take a look at containerization,
    which will include both Docker and LXD. Stay tuned!
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第 17 章*，*运行容器* 中，我们将讨论容器化技术，涵盖 Docker 和 LXD。敬请期待！
- en: Relevant video
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关视频
- en: 'cloud-init guide (LearnLinuxTV): [https://linux.video/cloud-init](https://linux.video/cloud-init)'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: cloud-init 指南（LearnLinuxTV）：[https://linux.video/cloud-init](https://linux.video/cloud-init)
- en: Further reading
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Ubuntu `virsh` documentation: [https://learnlinux.link/u-virsh](https://learnlinux.link/u-virsh)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu `virsh` 文档：[https://learnlinux.link/u-virsh](https://learnlinux.link/u-virsh)
- en: '*Mastering KVM Virtualization*, by Vedran Dakic et al. (Packt Publishing):
    [https://learnlinux.link/kvm-book](https://learnlinux.link/kvm-book)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*掌握 KVM 虚拟化*，由 Vedran Dakic 等人编著（Packt 出版）：[https://learnlinux.link/kvm-book](https://learnlinux.link/kvm-book)'
- en: Join our community on Discord
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord 空间，与作者及其他读者进行讨论：
- en: '[https://packt.link/LWaZ0](https://packt.link/LWaZ0)'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/LWaZ0](https://packt.link/LWaZ0)'
- en: '![](img/QR_Code50046724-1955875156.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code50046724-1955875156.png)'
