["```\n    # mkdir /srv/ctr\n    ```", "```\n    [nginx]\n    comment = nginx runtime\n    paths = /usr/sbin/nginx, /etc/nginx, /var/log/nginx, /var/lib/nginx, /usr/share/nginx, /usr/lib64/nginx, /usr/lib64/perl5/vendor_perl\n    users = root,nginx\n    groups = root,nginx\n    includesections = netbasics, uidbasics, perl\n    ```", "```\n    # jk_init -v -j /srv/ctr/nginx nginx\n    ```", "```\n    # systemd-nspawn -D /srv/ctr/nginx /usr/sbin/nginx \\\n      -g \"daemon off;\"\n    ```", "```\n    (typeattributeset cil_gen_require container_t)\n    (typeattributeset cil_gen_require container_file_t)\n    (typeattributeset cil_gen_require http_port_t)\n    (typeattributeset cil_gen_require node_t)\n    (allow container_t container_file_t (chr_file (read open getattr ioctl write)))\n    (allow container_t self (tcp_socket (create setopt bind listen accept read write)))\n    (allow container_t http_port_t (tcp_socket (name_bind)))\n    (allow container_t node_t (tcp_socket (node_bind)))\n    (allow container_t self (capability (net_bind_service setgid setuid)))\n    ```", "```\n    # semodule -i custom_container.cil\n    ```", "```\n    # chcon -R -t container_file_t /srv/ctr/nginx\n    ```", "```\n    # systemd-nspawn -D /srv/ctr/nginx \\\n    -Z system_u:system_r:container_t:s0 \\\n    -L system_u:object_r:container_file_t:s0 \\\n    /usr/sbin/nginx -g \"daemon off;\"\n    ```", "```\n    # machinectl pull-tar https://nspawn.org/storage/archlinux/archlinux/tar/image.tar.xz archlinux\n    # machinectl import-tar archlinux.tar.xz\n    ```", "```\n    # machinectl list-images\n    ```", "```\n    # machinectl clone archlinux test\n    # machinectl start test\n    ```", "```\n    # machinectl shell test\n    ```", "```\n    # machinectl poweroff test\n    ```", "```\n    # podman search postgresql\n    ```", "```\n    /var/lib/containers/storage. \n    ```", "```\n    # podman run -dit --name postgresql-test \\\n      -e POSTGRESQL_PASSWORD=\"pgsqlpass\" \\\n      -p 5432:5432 postgresql\n    ```", "```\n    # psql -U postgres -h localhost\n    ```", "```\n    # podman rm postgresql-test\n    ```", "```\n    # podman images\n    ```", "```\n# ps -efZ | grep postgres\nsystem_u:system_r:container_t:s0:c182,c609 ... /opt/bitnami/postgres -D ...\n```", "```\n    # mkdir -p /srv/db/postgresql-test\n    ```", "```\n    # chown -R 1001:1001 /srv/db/postgresql-test\n    ```", "```\n    /srv/db/postgresql-test. If we later delete the container and create a new one (for instance, because an update for the container base has been made available), the database itself is not affected.\n    ```", "```\n# podman run -dit --name postgresql-test \\\n -e POSTGRESQL_PASSWORD=\"pgsqlpass\" \\\n -v /srv/db/postgresql-test:/bitnami/postgresql:z \\\n -p 5432:5432 postgresql\n```", "```\n# podman run -dit --name nginx-test -p 80:80 \\\n  --security-opt label=type:container_logreader_t nginx\n```", "```\n# podman run -dit --name nginx-test -p 80:80 \\\n  --security-opt label=disable \\\n  -v /srv/web/localhost:/usr/share/nginx/html nginx\n# ps -efZ | grep nginx\nunconfined_u:system_r:spc_t:s0 ... nginx: worker process\n```", "```\n    # podman run -dit --name notebook-test -p 8888:8888 \\\n      -v /home/lisa/work:/home/jovyan/shared scipy-notebook\n    ```", "```\n    # podman inspect notebook-test > notebook-test.json\n    ```", "```\n    # udica -j notebook-test.json custom-notebook-test\n    Policy custom-notebook-test created!\n    Please load these modules using:\n    # semodule -i custom-notebook-test.cil /usr/share/udica/templates/{base_container.cil,net_container.cil}\n    Restart the container with: \"--security-opt label=type:custom-notebook-test.process\" parameter\n    ```", "```\n    # semodule -i custom-notebook-test.cil \\\n        /usr/share/udica/templates/base_container.cil \\\n        /usr/share/udica/templates/net_container.cil\n    ```", "```\n    # podman stop notebook-test\n    # podman rm notebook-test\n    # podman run -dit --name notebook-test -p 8888:8888 \\\n      -v /home/lisa/work:/home/jovyan/shared \\\n      --security-opt \\\n      label=type:custom-notebook-test.process scipy-notebook\n    ```", "```\n# semanage fcontext -a -e /var/lib/containers \\\n  /srv/containers\n# restorecon -R -v /srv/containers\n```", "```\n    # semanage permissive -a container_t\n    ```", "```\n    # kubeadm init\n    ```", "```\n    # cd /etc/kubernetes/manifests\n    ```", "```\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: etcd\n    spec:\n      containers:\n      - command: …\n      securityContext:\n        seLinuxOptions:\n          type: spc_t\n        image: k8s.gcr.io/etcd:3.4.3-0\n        …\n    ```", "```\n    # docker ps\n    CONTAINER ID      ...     NAMES\n    548f0c3ed18e          k8s_POD_etcd-ppubssa3ed_kube…\n    b7b1df2d0027          k8s_POD_kube-apiserver-…\n    eecd4d4ad108          k8s_POD_kube-scheduler-…\n    76da4910b927          k8s_POD_kube-controller-…\n    # for n in 548f0c3ed18e b7b1df2d0027 eecd4d4ad108 76da4910b927; do docker stop $n; docker rm $n; done\n    ```", "```\n    # ps -ef | grep spc_t\n    ```", "```\n    # semanage permissive -d container_t\n    ```", "```\n# podman pod create -p 80:80 --name webserver\n# podman pull docker.io/library/nginx\n# podman run -dit --pod webserver --name nginx-test nginx\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-test-deployment\nspec:\n  selector:\n    matchLabels:\n      app: nginx-test\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: nginx-test\n    spec:\n      containers:\n      - name: nginx-test\n        image: nginx:latest\n        ports:\n        - containerPort: 80\n```", "```\n$ kubectl apply -f simple-nginx.yml\n```", "```\n…\nspec:\n  containers: ...\n  securityContext:\n    seLinuxOptions:\n      type: \"container_logreader_t\"\n```"]