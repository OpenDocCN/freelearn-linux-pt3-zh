- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Text Editors
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本编辑器
- en: In [*Chapter 1*](B19121_01_split_000.xhtml#_idTextAnchor014), we recommended
    that you always use the command line to edit files. Since practice is the only
    way to develop our console skills, we should take every opportunity to do so.
    File editing is the most basic and most common skill used during the configuration
    of a system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第一章*](B19121_01_split_000.xhtml#_idTextAnchor014) 中，我们建议你始终使用命令行来编辑文件。由于实践是提升我们控制台技能的唯一途径，我们应该利用每一个机会来这样做。文件编辑是配置系统时最基本也是最常用的技能。
- en: Some text editors even allow us to execute commands on the operating system.
    This gives us an advantage of being able to practice them. We can also extend
    their capabilities by installing plugins or customizing their configuration. These
    modifications allow us to format files, verify syntax, and execute tasks.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一些文本编辑器甚至允许我们在操作系统上执行命令。这使我们能够练习这些命令。我们还可以通过安装插件或定制配置来扩展它们的功能。这些修改使我们能够格式化文件、验证语法并执行任务。
- en: Besides their use, we will discuss basic configuration tips and customizations
    of the most popular text editors.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 除了它们的用途外，我们还将讨论最流行文本编辑器的基本配置技巧和定制。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将覆盖以下主要主题：
- en: Text editors and the command line
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本编辑器和命令行
- en: Emacs overview
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Emacs 概述
- en: Nano basics
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nano 基础
- en: The mighty Vim
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强大的 Vim
- en: Let’s get started!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To perform the configurations, customizations, and examples mentioned in this
    chapter, the installed `vim` and `nano` packages in their *basic form*. `emacs`
    and some other packages may need to be installed. Most of them are included in
    Fedora’s official repositories.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行本章中提到的配置、定制和示例，需要安装`vim`和`nano`软件包的*基础版本*。`emacs`和其他一些软件包可能需要额外安装。大多数软件包都包含在
    Fedora 官方仓库中。
- en: In each section, you will see the required packages and how to install each
    of them.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个部分，你将看到所需的软件包以及如何安装每一个。
- en: When using a package or code not included in the official Fedora repositories,
    we will provide a link to get it and instructions to install it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用未包含在官方 Fedora 仓库中的软件包或代码时，我们会提供获取链接并附上安装说明。
- en: 'The examples created in this chapter are available for download in the book’s
    GitHub repository: [https://github.com/PacktPublishing/Fedora-Linux-System-Administration/tree/main/chapter7](https://github.com/PacktPublishing/Fedora-Linux-System-Administration/tree/main/chapter7).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中创建的示例可以在书籍的 GitHub 仓库中下载：[https://github.com/PacktPublishing/Fedora-Linux-System-Administration/tree/main/chapter7](https://github.com/PacktPublishing/Fedora-Linux-System-Administration/tree/main/chapter7)。
- en: Text editors and the command line
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本编辑器和命令行
- en: The **UNIX** operating system has some unique of ideas and concepts that shape
    its design. UNIX was the first operating system to abstract all I/O operations
    under a unified concept. The fathers of UNIX called this concept a **file**. Each
    *file* exposes itself through the same **Application Programming Interface** (**API**).
    This abstraction provides many advantages, such as preventing duplicate code and
    increasing reusability.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**UNIX** 操作系统具有一些独特的思想和概念，这些思想和概念塑造了其设计。UNIX 是第一个将所有 I/O 操作抽象化并统一概念的操作系统。UNIX
    的创始人将这一概念称为**文件**。每个*文件*通过相同的**应用程序编程接口**（**API**）暴露自己。这种抽象化提供了许多优点，例如防止重复代码并提高可重用性。'
- en: To read/write to a disk, keyboard, document, or network device, it is possible
    to use the same basic set of commands (such as the `cat`, `more`, `grep`, `sed`,
    and `echo` commands).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要读取/写入磁盘、键盘、文档或网络设备，可以使用相同的一组基本命令（例如 `cat`、`more`、`grep`、`sed` 和 `echo` 命令）。
- en: 'This principle is encapsulated in the phrase: *everything is* *a file*.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个原则被概括为：“*一切皆文件*”。
- en: 'This fundamental concept has two sides:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个基本概念有两个方面：
- en: In UNIX, everything is a *stream* *of bytes*.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 UNIX 中，一切皆*字节流*。
- en: 'With reference to a file, called a *file descriptor*, the I/O access uses the
    same set of operations and the same API (whatever the device type and the underlying
    hardware is). As a byte stream, it allows the following:'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于文件的引用，称为*文件描述符*，I/O 访问使用相同的一组操作和相同的 API（无论设备类型和底层硬件是什么）。作为字节流，它允许以下操作：
- en: '**read**'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阅读**'
- en: '**write**'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**写入**'
- en: '**search**'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索**'
- en: '**close**'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关闭**'
- en: In UNIX, the filesystem serves as a universal *namespace*.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 UNIX 中，文件系统充当一个通用的*命名空间*。
- en: 'Files are not only a stream of bytes with a consistent API, but they can also
    reference each other in a uniform way. UNIX filesystem *paths* provide a consistent,
    global scheme for labeling resources, regardless of their nature. This global
    namespace is often viewed as a *hierarchy of files and directories*. This is a
    convenient abstraction; a file path could refer to *almost anything*: a filesystem,
    a device, a network share, or a communication channel.'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文件不仅仅是具有一致 API 的字节流，它们还可以以统一的方式相互引用。UNIX 文件系统的*路径*提供了一种一致的、全局的资源标签方案，不管它们的性质如何。这个全局命名空间通常被视为*文件和目录的层次结构*。这是一个方便的抽象，文件路径可以指向*几乎任何东西*：一个文件系统、一个设备、一个网络共享或一个通信通道。
- en: This means that in UNIX, and so in Linux, anything is accessible as a *file*
    in the filesystem space. The point of all this is to make it possible to use common
    tools for different things.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着在 UNIX 中，进而在 Linux 中，任何东西都可以作为*文件*在文件系统空间中访问。所有这些的目的是使得不同的工具能够用于不同的事情。
- en: The tool used to change the content of the text files is the text editor. The
    files contain *plain text* or *source code* either for a program or for text formatters,
    which reads the typed input and produces a printable output.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 用于更改文本文件内容的工具是文本编辑器。这些文件包含*纯文本*或*源代码*，无论是程序的代码还是文本格式化程序的代码，后者读取输入并生成可打印的输出。
- en: The main advantage of text editors on UNIX/Linux systems is the ability to use
    them without a graphical environment, in the terminal. This advantage allows their
    use on *remote machines*. Since there’s no need to transfer the entire graphical
    environment, working with text editors improves the speed of the network. As a
    system administrator, you need to know how to edit files from the terminal like
    an expert.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: UNIX/Linux 系统上文本编辑器的主要优点是能够在没有图形环境的情况下使用它们，在终端中操作。这个优点使得它们可以在*远程机器*上使用。由于不需要传输整个图形环境，使用文本编辑器可以提高网络的速度。作为系统管理员，你需要像专家一样从终端编辑文件。
- en: '`nano` or `vim` come as a base package with any Linux distribution. In some
    cases, either package is available out of the box, and some distributions also
    include `emacs`.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`nano` 或 `vim` 是任何 Linux 发行版的基础包。在某些情况下，这些软件包是开箱即用的，还有一些发行版也包含了 `emacs`。'
- en: 'These packages achieve the same thing (edit text files) but they do it in very
    different ways:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这些软件包实现的是相同的功能（编辑文本文件），但它们以非常不同的方式实现：
- en: '**nano**: Easiest to use, but with the fewest features.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**nano**：最易于使用，但功能最少。'
- en: '**vim**: Steepest learning curve, but powerful once it’s mastered.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**vim**：学习曲线最陡峭，但一旦掌握，功能强大。'
- en: '**emacs**: Midway between **nano** and **vim** in difficulty of use. Powerful
    and customizable. Does not always come as a base package.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**emacs**：使用难度介于 **nano** 和 **vim** 之间。功能强大且可定制。并不总是作为基础包提供。'
- en: Let’s take a deep dive into each of them. We’ll start with the one that has
    the most historical weight, **GNU Emacs**, created by Richard Stallman. In Fedora
    Workstation, it needs to be installed to use it. Let’s start by getting an overview
    of it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨每一个编辑器。我们将从历史上最有分量的一个开始——**GNU Emacs**，由 Richard Stallman 创建。在 Fedora
    Workstation 中，需要安装它才能使用。让我们先了解一下它的概况。
- en: Emacs overview
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Emacs 概述
- en: Early text editors were very rudimentary, so much so that they could not open
    an entire text document. To solve that, a text editor turned out to be more of
    a command that could generate words and dump them into a file, find and replace
    words in a file, delete lines in a file, and so on.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的文本编辑器非常原始，以至于无法打开整个文本文件。为了解决这个问题，文本编辑器变成了一种命令，它能够生成单词并将其写入文件、查找和替换文件中的单词、删除文件中的行等。
- en: Editing large documents in this way could become quite boring. So, people started
    to develop **macros** to perform common related tasks.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式编辑大型文档可能会变得相当无聊。因此，人们开始开发 **宏** 来执行常见的相关任务。
- en: In 1983, Richard Stallman released a package of his macros under the name **Editing
    Macros**, or **Emacs** for short. When Dr. Stallman started the GNU project, GNU
    Emacs became his most successful application.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 1983 年，Richard Stallman 发布了一个名为 **Editing Macros** 或简称 **Emacs** 的宏包。当 Stallman
    博士启动 GNU 项目时，GNU Emacs 成为了他最成功的应用。
- en: GNU Emacs is a text editor designed for POSIX operating systems. It is often
    considered complex since it was developed long before modern computer conventions
    and terminology existed.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: GNU Emacs 是为 POSIX 操作系统设计的文本编辑器。由于它是在现代计算机惯例和术语出现之前开发的，因此通常被认为是复杂的。
- en: However, GNU Emacs offers efficient commands for common but complex actions,
    plus plugins and configuration *hacks* developed around it over 40 years. Once
    you learn the basic use of GNU Emacs, it is a powerful, efficient, and hackable
    editor for life.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，GNU Emacs 提供了高效的命令，用于执行常见但复杂的操作，并且有着超过 40 年的插件和配置 *hack* 开发历史。一旦你掌握了 GNU
    Emacs 的基本使用，它将是一个强大、高效且可定制的编辑器，适用于一生。
- en: The most common version of emacs is GNU Emacs.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的 Emacs 版本是 GNU Emacs。
- en: 'To install it on our Fedora Workstation, using the software application from
    main menu, choose between **RPM** or **FLATPAK** for its installation source,
    as we covered in [*Chapter 6*](B19121_06.xhtml#_idTextAnchor155):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的 Fedora 工作站上安装它，可以通过主菜单中的软件应用选择 **RPM** 或 **FLATPAK** 作为安装源，就像我们在 [*第 6
    章*](B19121_06.xhtml#_idTextAnchor155) 中讲解的那样：
- en: '![Figure 7.1 – Installing emacs](img/B19121_07_1.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – 安装 Emacs](img/B19121_07_1.jpg)'
- en: Figure 7.1 – Installing emacs
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 安装 Emacs
- en: 'Using the console allows you to list the available plugins too. Switch to the
    `root` user and run the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用控制台也可以列出可用的插件。切换到 `root` 用户并运行以下命令：
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Figure 7.2 – emacs and plugins](img/B19121_07_2.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2 – Emacs 和插件](img/B19121_07_2.jpg)'
- en: Figure 7.2 – emacs and plugins
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – Emacs 和插件
- en: 'Listing and counting the plugins, there are under 100 of them:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 列出并统计插件，总数不到 100 个：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Install GNU Emacs by your preferred method and let’s start with the basics.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 按照你喜欢的方法安装 GNU Emacs，我们从基础开始。
- en: The basics
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础知识
- en: At the beginning, the usability of the program seems complicated. But it’s only
    a little different because it was created in another era. Follow these instructions
    to start getting used to the user interface.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始，程序的可用性看起来似乎很复杂。但这只是因为它是在另一个时代创建的，所以稍有不同。按照这些指示开始适应用户界面吧。
- en: 'Open `Emacs` in the search box:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在搜索框中打开 `Emacs`：
- en: '![Figure 7.3 – Open emacs from menu](img/B19121_07_3.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3 – 从菜单中打开 Emacs](img/B19121_07_3.jpg)'
- en: Figure 7.3 – Open emacs from menu
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 从菜单中打开 Emacs
- en: 'It can also be opened using the `emacs` command as a *non-root* user from the
    terminal:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 *非 root* 用户，也可以通过终端使用 `emacs` 命令打开：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In both cases, the **GNU Emacs** window opens:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，**GNU Emacs** 窗口都会打开：
- en: '![Figure 7.4 – GNU Emacs](img/B19121_07_4.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4 – GNU Emacs](img/B19121_07_4.jpg)'
- en: Figure 7.4 – GNU Emacs
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – GNU Emacs
- en: 'On the welcome screen, the first link, **Emacs Tutorial**, takes you to the
    help tutorial of the application:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在欢迎屏幕上，第一个链接，**Emacs 教程**，将带你进入应用程序的帮助教程：
- en: '![Figure 7.5 – Emacs tutorial](img/B19121_07_5.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.5 – Emacs 教程](img/B19121_07_5.jpg)'
- en: Figure 7.5 – Emacs tutorial
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – Emacs 教程
- en: You can return to it as many times as you need with its key combination.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过按键组合返回该界面，随时需要时都可以。
- en: Most of the key combinations use the *Ctrl* key, along with the required combination.
    For example, to open the tutorial, the combination is *C-h* + *C-t*, which means
    pressing the *Ctrl* key plus the *h* key, followed by the *Ctrl* key plus the
    *t* key; that is, you could hold down the *Ctrl* key and press the *h* key followed
    by the *t* key.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数按键组合使用 *Ctrl* 键，并结合其他所需的按键组合。例如，打开教程时，按键组合是 *C-h* + *C-t*，意味着先按 *Ctrl* 键加
    *h* 键，再按 *Ctrl* 键加 *t* 键；也就是你可以按住 *Ctrl* 键，先按 *h* 键，再按 *t* 键。
- en: In some cases, the *Alt* key is also used for key combinations. But the notation
    is different, noted by an *M*. For example, to use the *Alt-x* combination, the
    notation is *M-x*.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，*Alt* 键也用于按键组合。但其表示方法不同，用 *M* 表示。例如，使用 *Alt-x* 组合时，表示方法是 *M-x*。
- en: This is because the *Alt* key was known as *Meta* in the past. Remember, when
    GNU Emacs was developed, some of the current terms were not in use back then.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为 *Alt* 键过去被称为 *Meta* 键。请记住，在 GNU Emacs 开发时，许多当前的术语还没有被使用。
- en: Note
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The letter *M* refers to the *Meta* key, which on x86 PCs is the *Alt* key.
    There are also ports of emacs on other platforms, such as macOS where *Meta* refers
    to the *![](img/01.png)* *Cmd* key.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 字母 *M* 代表 *Meta* 键，在 x86 计算机上是 *Alt* 键。Emacs 也有其他平台的版本，比如在 macOS 上，*Meta* 键指的是
    *![](img/01.png)* 的 *Cmd* 键。
- en: 'Using the graphical interface helps when getting started with GNU Emacs. The
    menus include the key combinations used for each task:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用图形界面有助于快速上手 GNU Emacs。菜单中包括了每个任务所用的按键组合：
- en: '![Figure 7.6 – GNU Emacs menus](img/B19121_07_6.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.6 – GNU Emacs 菜单](img/B19121_07_6.jpg)'
- en: Figure 7.6 – GNU Emacs menus
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – GNU Emacs 菜单
- en: 'The following table shows the most common tasks with their corresponding key
    combination:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格展示了最常见的任务及其相应的按键组合：
- en: '| File Operations |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 文件操作 |'
- en: '| Open a file | `C-x C-f` |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 打开文件 | `C-x C-f` |'
- en: '| Save file | `C-x C-s` |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 保存文件 | `C-x C-s` |'
- en: '| Save as | `C-x C-w` |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 另存为 | `C-x C-w` |'
- en: '| Close file | `C-x C-k` |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 关闭文件 | `C-x C-k` |'
- en: '| Quit | `C-x C-c` |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 退出 | `C-x C-c` |'
- en: '| Copy & Paste |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 复制与粘贴 |'
- en: '| Cut | `C-w` |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 剪切 | `C-w` |'
- en: '| Copy | `M-w` |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 复制 | `M-w` |'
- en: '| Help |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| 帮助 |'
- en: '| Display all key bindings | `C-h b` |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 显示所有快捷键绑定 | `C-h b` |'
- en: '| Tutorial | `C-h C-t` |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 教程 | `C-h C-t` |'
- en: Table 7.1 – GNU Emacs common key combinations
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7.1 – GNU Emacs 常见的键盘组合
- en: GNU Emacs is very flexible and runs without a graphical interface, in the terminal.
    This is where it becomes an essential tool in system administration.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: GNU Emacs 非常灵活，且在没有图形界面的终端中运行。这使得它成为系统管理中的一个必不可少的工具。
- en: Let’s now take a look at an overview of the advanced usage of GNU Emacs.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下 GNU Emacs 的高级用法概述。
- en: Mastering GNU Emacs
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 精通 GNU Emacs
- en: At first glance, GNU Emacs looks like a very complex way to edit files because
    it uses different keyboard combinations than those used by other text editors.
    But for the day-to-day tasks of the system administrator, running from the terminal,
    GNU Emacs is a powerful solution.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，GNU Emacs 看起来像是一个非常复杂的文件编辑方式，因为它使用的键盘组合与其他文本编辑器不同。但对于系统管理员的日常任务，从终端运行时，GNU
    Emacs 是一个强大的解决方案。
- en: 'Let’s give an overview of this using a small example. Follow these steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个小示例来概览一下这个过程。按照以下步骤操作：
- en: 'Open **GNU Emacs** in the terminal by running the **emacs** command with the
    **--****no-window-system** parameter:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中通过运行 **emacs** 命令并带上 **--no-window-system** 参数来打开 **GNU Emacs**：
- en: '[PRE3]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Figure 7.7 – GNU Emacs on the terminal](img/B19121_07_7.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.7 – 终端中的 GNU Emacs](img/B19121_07_7.jpg)'
- en: Figure 7.7 – GNU Emacs on the terminal
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7 – 终端中的 GNU Emacs
- en: From the start screen, browse to the test file to be modified.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从启动屏幕，浏览到要修改的测试文件。
- en: 'Press the *Ctrl* key plus the *x* key (*C-x*) to enter command mode, followed
    by the *Ctrl* and *f* keys (*C-f*) to find the file to edit. Press the *Tab* key
    to display the contents of the directory:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 *Ctrl* 键加 *x* 键 (*C-x*) 进入命令模式，然后按 *Ctrl* 和 *f* 键 (*C-f*) 查找要编辑的文件。按 *Tab*
    键显示目录的内容：
- en: '![Figure 7.8 – Find the file to edit](img/B19121_07_8.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.8 – 查找要编辑的文件](img/B19121_07_8.jpg)'
- en: Figure 7.8 – Find the file to edit
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8 – 查找要编辑的文件
- en: The file to edit is the **test** file. Type **test** in **Find file** at the
    bottom to open the file.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要编辑的文件是 **test** 文件。在底部的 **查找文件** 中输入 **test** 来打开该文件。
- en: '![Figure 7.9 – Opening the test file](img/B19121_07_9.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.9 – 打开测试文件](img/B19121_07_9.jpg)'
- en: Figure 7.9 – Opening the test file
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.9 – 打开测试文件
- en: Note
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The file mentioned previously is available in the book’s GitHub repository at
    [https://github.com/PacktPublishing/Fedora-Linux-System-Administration/tree/main/chapter7](https://github.com/PacktPublishing/Fedora-Linux-System-Administration/tree/main/chapter7).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 前面提到的文件可以在本书的 GitHub 仓库中找到，链接：[https://github.com/PacktPublishing/Fedora-Linux-System-Administration/tree/main/chapter7](https://github.com/PacktPublishing/Fedora-Linux-System-Administration/tree/main/chapter7)。
- en: This `test` file is a combination of the `/etc/group` and `/``etc/passwd` files.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `test` 文件是 `/etc/group` 和 `/etc/passwd` 文件的组合。
- en: '![Figure 7.10 – test file](img/B19121_07_10.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.10 – 测试文件](img/B19121_07_10.jpg)'
- en: Figure 7.10 – test file
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10 – 测试文件
- en: Suppose that you need to see the contents of both files within the **test**
    file. On the line where one of them ends, split the screen and move between the
    contents of each of them.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设你需要查看 **test** 文件中两个文件的内容。在其中一个文件结束的地方，分割屏幕并在它们的内容之间移动。
- en: 'To split the screen, press *Ctrl* plus the *x* and *2* keys (*C-x-2*):'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要分割屏幕，按下 *Ctrl* 键加 *x* 键和 *2* 键 (*C-x-2*)：
- en: '![Figure 7.11 – Split screen](img/B19121_07_11.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.11 – 分割屏幕](img/B19121_07_11.jpg)'
- en: Figure 7.11 – Split screen
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.11 – 分割屏幕
- en: In Emacs, a **buffer** contains a process or a file. A **window** is the view
    of a buffer. The **frame** is the desktop window.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Emacs 中，**缓冲区**包含一个进程或一个文件。**窗口**是缓冲区的视图。**框架**是桌面窗口。
- en: 'The following figure shows these concepts:'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下图示展示了这些概念：
- en: '![Figure 7.12 – Buffers, windows, and frame](img/B19121_07_12.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.12 – 缓冲区、窗口和框架](img/B19121_07_12.jpg)'
- en: Figure 7.12 – Buffers, windows, and frame
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.12 – 缓冲区、窗口和框架
- en: This means that we split the frame into two windows. Each buffer edits the same
    `test` file.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们将框架分割成两个窗口。每个缓冲区都编辑同一个 `test` 文件。
- en: If needed, each buffer could open different files, split the frame into more
    horizontal and vertical windows, or open other frames.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，每个缓冲区可以打开不同的文件，分割框架为更多的水平和垂直窗口，或者打开其他框架。
- en: To change the buffer, press the *Ctrl* key with the *x* key plus the *o* key
    (*C-x-o*).
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要更改缓冲区，按 *Ctrl* 键和 *x* 键加 *o* 键 (*C-x-o*)。
- en: This adds a line of plus signs (**+**) to separate the contents of the files.
    Save the file by pressing the *Ctrl* key with the *x* key (*C-x*) plus the *Ctrl*
    key with the *s* key (*C-s*).
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在文件内容中添加一行加号（**+**）来分隔内容。通过按 *Ctrl* 键和 *x* 键（*C-x*）加上 *Ctrl* 键和 *s* 键（*C-s*）来保存文件。
- en: '![Figure 7.13 – Saving changes](img/B19121_07_13.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.13 – 保存更改](img/B19121_07_13.jpg)'
- en: Figure 7.13 – Saving changes
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.13 – 保存更改
- en: Quit the saved file by pressing the *Ctrl* key with the *x* key (*C-x*) plus
    the *Ctrl* key with the *c* key (*C-c*).
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按下 *Ctrl* 键和 *x* 键（*C-x*）加上 *Ctrl* 键和 *c* 键（*C-c*）来退出保存的文件。
- en: 'The following table shows advanced tasks with their corresponding key combinations:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了高级任务及其对应的键组合：
- en: '| Text Selection |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 文本选择 |'
- en: '| Start selection | `C-`*<space>* or `C-@` |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 开始选择 | `C-`*<空格>* 或 `C-@` |'
- en: '| Deselect | `C-g` |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| 取消选择 | `C-g` |'
- en: '| Undo |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| 撤销 |'
- en: '| Undo | `C-/` or `C-x-u` |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 撤销 | `C-/` 或 `C-x-u` |'
- en: '| Panic! |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 惊慌！ |'
- en: '| Cancel a command or operation in progress | `C-g` |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 取消正在进行的命令或操作 | `C-g` |'
- en: '| Copy & Paste |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 复制和粘贴 |'
- en: '| Yank | `C-y` |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| 粘贴 | `C-y` |'
- en: '| Cut line after cursor | `C-k` |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| 光标后剪切行 | `C-k` |'
- en: '| Cut word after cursor | `M-d` |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| 光标后剪切单词 | `M-d` |'
- en: '| Navigation |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| 导航 |'
- en: '| Previous line | `C-p` |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| 上一行 | `C-p` |'
- en: '| Next line | `C-n` |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 下一行 | `C-n` |'
- en: '| Back a character | `C-b` |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| 后退一个字符 | `C-b` |'
- en: '| Back a word | `M-b` |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| 后退一个单词 | `M-b` |'
- en: '| Forward a character | `C-f` |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| 前进一个字符 | `C-f` |'
- en: '| Forward a word | `M-f` |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| 前进一个单词 | `M-f` |'
- en: '| Go to start of line | `C-a` |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| 转到行首 | `C-a` |'
- en: '| Go to end of line | `C-e` |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 转到行末 | `C-e` |'
- en: '| Frames, windows, and buffers |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| 框架、窗口和缓冲区 |'
- en: '| Vertical split | `C-x-3` |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| 垂直分割 | `C-x-3` |'
- en: '| Horizontal split | `C-x-2` |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| 水平分割 | `C-x-2` |'
- en: '| No splits | `C-x-1` |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| 无分割 | `C-x-1` |'
- en: '| Remove window | `C-x-0` |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| 移除窗口 | `C-x-0` |'
- en: '| Visit other window | `C-x-o` |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 访问其他窗口 | `C-x-o` |'
- en: '| Open a new frame | `C-x-5-2` |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| 打开新框架 | `C-x-5-2` |'
- en: Table 7.2 – GNU Emacs advanced key combinations
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7.2 – GNU Emacs 高级键组合
- en: Now let’s see how to add enhancements to the text editor.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何为文本编辑器添加增强功能。
- en: Powering GNU Emacs
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GNU Emacs 的动力
- en: 'GNU Emacs has some essential features. Not all implemented, but conceptualized:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: GNU Emacs 具有一些基本特性。并非所有实现，但是已经构想：
- en: '*It has lots of plugins*. Not all text editors have plugins, and not all need
    them. Sometimes the only feature needed is simplicity. For a text editor used
    for hours a day, plugins add valuable enhancements and improvements.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*它有很多插件*。并非所有文本编辑器都有插件，也并非所有都需要插件。有时唯一需要的功能是简单性。对于每天使用几小时的文本编辑器，插件提供了宝贵的增强和改进。'
- en: '*It is a customizable environment that could become a complete desktop environment*,
    for example, keeping track of projects, tasks, and events, organizing emails and
    chats, and managing remote servers.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*它是一个可定制的环境，可以成为一个完整的桌面环境*，例如，跟踪项目、任务和事件，组织电子邮件和聊天，管理远程服务器。'
- en: '*Provides powerful and flexible key combinations and keymaps configurable for*
    *specific modes*.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*提供强大和灵活的键组合和可为* *特定模式* *配置的键映射。'
- en: '*Every aspect of the environment is customizable*. It allows modifying the
    user interface of all applications: the help system, the file and workspace tabs,
    and the fonts and colors of the user interface elements.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*环境的每一个方面都是可定制的*。它允许修改所有应用程序的用户界面：帮助系统，文件和工作区选项卡，以及用户界面元素的字体和颜色。'
- en: 'Install these enhancements through GNU Emacs. Follow these steps:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 GNU Emacs 安装这些增强功能。按照以下步骤进行：
- en: 'List the available packages, inside GNU Emacs, by pressing the *Meta* (*Alt*)
    key and the *x* key. Enter the package command mode, distinguished at the bottom
    of the window by the *M-x* combination:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按下 *Meta*（*Alt*）键和 *x* 键列出 GNU Emacs 中的可用软件包。进入软件包命令模式，窗口底部显示 *M-x* 组合键：
- en: '![Figure 7.14 – Package command mode](img/B19121_07_14.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.14 – 软件包命令模式](img/B19121_07_14.jpg)'
- en: Figure 7.14 – Package command mode
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.14 – 软件包命令模式
- en: 'Type **list-packages** and hit *Enter*:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 **list-packages** 并按 *Enter* 键：
- en: '![Figure 7.15 – List packages](img/B19121_07_15.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.15 – 列出的软件包](img/B19121_07_15.jpg)'
- en: Figure 7.15 – List packages
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.15 – 列出的软件包
- en: 'The window shows the packages available for installation:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口显示了可安装的软件包：
- en: '![Figure 7.16 – List of available packages](img/B19121_07_16.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.16 – 可用软件包列表](img/B19121_07_16.jpg)'
- en: Figure 7.16 – List of available packages
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.16 – 可用软件包列表
- en: 'To find a package, for example, **yaml-mode**, to help us with YAML syntax.
    In the list, press the *Ctrl* key and the *s* key (*C-s*). Type **yaml-mode**
    at the bottom to find the selected package:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查找一个包，例如，**yaml-mode**，以帮助我们处理 YAML 语法。在列表中，按下 *Ctrl* 键和 *s* 键（*C-s*）。在底部输入
    **yaml-mode** 查找所选包：
- en: '![Figure 7.17 – Searching for the package to install](img/B19121_07_17.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.17 – 搜索待安装的软件包](img/B19121_07_17.jpg)'
- en: Figure 7.17 – Searching for the package to install
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.17 – 搜索待安装的软件包
- en: Note
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This requires the **emacs-yaml-mode.noarch** package installed to work.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要安装**emacs-yaml-mode.noarch**软件包才能正常工作。
- en: To view the package description, press the *Meta* (*Alt*) key plus the *x* key
    (*M-x*) and type **describe-package**.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看软件包描述，按下*Meta*（*Alt*）键和*x*键（*M-x*），然后输入**describe-package**。
- en: '![Figure 7.18 – Describing package](img/B19121_07_18.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.18 – 描述软件包](img/B19121_07_18.jpg)'
- en: Figure 7.18 – Describing package
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.18 – 描述软件包
- en: 'This splits the window horizontally. To switch to the *description window*,
    press the *Ctrl* key and the *x* key, followed by the *o* key (*C-x-o*):'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将窗口水平分割。要切换到*描述窗口*，请按下*Ctrl*键和*x*键，然后按*o*键（*C-x-o*）：
- en: '![Figure 7.19 – Description window](img/B19121_07_19.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.19 – 描述窗口](img/B19121_07_19.jpg)'
- en: Figure 7.19 – Description window
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.19 – 描述窗口
- en: Close the window by pressing the *Ctrl* key and the *x* key, followed by the
    *0* key (*C-x-0*).
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按下*Ctrl*键和*x*键，然后按*0*键（*C-x-0*）来关闭窗口。
- en: Mark the **yaml-mode** package for installation by pressing the *Meta* (*Alt*)
    key and the *x* key (*M-x*) and type **package-menu-mark-install**.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按下*Meta*（*Alt*）键和*x*键（*M-x*），然后输入**package-menu-mark-install**来标记**yaml-mode**软件包进行安装。
- en: '![Figure 7.20 – Marking the package to install](img/B19121_07_20.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.20 – 标记待安装的软件包](img/B19121_07_20.jpg)'
- en: Figure 7.20 – Marking the package to install
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.20 – 标记待安装的软件包
- en: 'This adds an `I` to the left side of the package:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在软件包的左侧添加一个`I`：
- en: '![Figure 7.21 – Package marked for installation](img/B19121_07_21.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.21 – 标记待安装的软件包](img/B19121_07_21.jpg)'
- en: Figure 7.21 – Package marked for installation
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.21 – 标记待安装的软件包
- en: To install the package, press the *Meta* (*Alt*) key and the *x* key, and type
    **package-install-selected-packages**.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装软件包，按下*Meta*（*Alt*）键和*x*键，然后输入**package-install-selected-packages**。
- en: '![Figure 7.22 – Installing marked packages](img/B19121_07_22.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.22 – 安装标记的软件包](img/B19121_07_22.jpg)'
- en: Figure 7.22 – Installing marked packages
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.22 – 安装标记的软件包
- en: Exit Emacs using *C-x* + *C-c* .
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*C-x* + *C-c*退出Emacs。
- en: 'The installation is very fast. Open a YAML file to see the *help* menu with
    the syntax of the package:'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装过程非常快速。打开一个YAML文件，查看软件包的*帮助*菜单和语法：
- en: '![Figure 7.23 – YAML file](img/B19121_07_23.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.23 – YAML 文件](img/B19121_07_23.jpg)'
- en: Figure 7.23 – YAML file
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.23 – YAML 文件
- en: As shown in the previous figure, a lot of packages and plugins could be installed
    to help us with a particular feature.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，许多软件包和插件可以安装，帮助我们实现特定的功能。
- en: Note
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'On the internet, you will find many examples of packages and plugins. As a
    personal recommendation, check out this Reddit thread, with the must-have packages
    according to the community: [https://www.reddit.com/r/emacs/comments/w4gxoa/what_are_some_musthave_packages_for_emacs/](https://www.reddit.com/r/emacs/comments/w4gxoa/what_are_some_musthave_packages_for_emacs/).'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网上，你会找到很多软件包和插件的例子。作为个人推荐，可以查看这个Reddit帖子，里面是社区推荐的必备软件包：[https://www.reddit.com/r/emacs/comments/w4gxoa/what_are_some_musthave_packages_for_emacs/](https://www.reddit.com/r/emacs/comments/w4gxoa/what_are_some_musthave_packages_for_emacs/)。
- en: GNU Emacs, especially for a novice user, seems very complex to use. This led
    to the popularization of simpler text editors. One of the most popular ones, which
    became the default text editor in Fedora Linux, is **Nano**.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: GNU Emacs，尤其是对于新手用户，似乎使用起来非常复杂。这导致了更简单文本编辑器的普及。最受欢迎的文本编辑器之一是**Nano**，它成为了Fedora
    Linux的默认文本编辑器。
- en: Let’s now review the basic principles of its use.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来回顾一下它使用的基本原则。
- en: Nano basics
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nano基础
- en: GNU nano was designed as a free replacement for the Pico text editor, which
    was part of the University of Washington’s Pine email suite.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: GNU nano 是作为Pico文本编辑器的免费替代品设计的，而Pico是华盛顿大学的Pine电子邮件套件的一部分。
- en: At the end of 1999, **Chris Allegretta** left **Slackware** for **Debian**.
    He missed having a package that included **Pine** and **Pico**. So, he decided
    to make a Pico clone, at that time called **Tip Isn’t** **Pico** (**TIP**).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 1999年底，**Chris Allegretta**从**Slackware**转到**Debian**。他想念一个包含**Pine**和**Pico**的软件包。所以，他决定制作一个Pico的克隆程序，当时叫做**Tip
    Isn’t** **Pico**（**TIP**）。
- en: In January 2000, TIP was renamed **nano** due to a conflict with another program
    called **tip**, included with many older Unix systems.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在2000年1月，TIP因与另一个名为**tip**的程序发生冲突（该程序包括在许多旧版Unix系统中）而更名为**nano**。
- en: In February 2001, nano received an official GNU declaration from Richard Stallman.
    `nano` also reached its first production release on March 22, 2001.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 2001年2月，nano获得了Richard Stallman的正式GNU声明。`nano`也在2001年3月22日达到了第一次生产版本。
- en: 'To create a new file, as a *non-root* user, run the `nano` command from the
    terminal:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建新文件，作为*非root*用户，可以从终端运行`nano`命令：
- en: '[PRE4]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Figure 7.24 – Nano text editor](img/B19121_07_24.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图7.24 – Nano文本编辑器](img/B19121_07_24.jpg)'
- en: Figure 7.24 – Nano text editor
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.24 – Nano文本编辑器
- en: 'At the bottom taskbar of the window, there are help commands for the editor:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在窗口的底部任务栏上，有编辑器的帮助命令：
- en: '![Figure 7.25 – Help commands for nano](img/B19121_07_25.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图7.25 – Nano帮助命令](img/B19121_07_25.jpg)'
- en: Figure 7.25 – Help commands for nano
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.25 – nano帮助命令
- en: Unlike `emacs`, `nano` denotes the *Ctrl* key with the circumflex accent symbol
    (`^`), so the help menu is displayed by pressing the *Ctrl* key with the *G* key.
    To exit, press the *Ctrl* and *X* keys.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 与`emacs`不同，`nano`使用脱字符符号（`^`）表示*Ctrl*键，因此按下*Ctrl*键和*G*键会显示帮助菜单。要退出，请按下*Ctrl*和*X*键。
- en: Note
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For more information about why the circumflex accent symbol (**^**) is used
    for *Ctrl*, please refer to [https://retrocomputing.stackexchange.com/questions/10925/why-do-we-use-caret-as-the-symbol-for-ctrl-control](https://retrocomputing.stackexchange.com/questions/10925/why-do-we-use-caret-as-the-symbol-for-ctrl-control).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 有关为什么使用脱字符符号（**^**）表示*Ctrl*，请参考[https://retrocomputing.stackexchange.com/questions/10925/why-do-we-use-caret-as-the-symbol-for-ctrl-control](https://retrocomputing.stackexchange.com/questions/10925/why-do-we-use-caret-as-the-symbol-for-ctrl-control)。
- en: Besides the *Ctrl* key, `nano` also uses the *Alt* key and some symbols as part
    of its commands for specific tasks.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 除了*Ctrl*键，`nano`还使用*Alt*键和一些符号作为特定任务命令的一部分。
- en: 'The following table shows the most common tasks with their corresponding key
    combination:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了最常见的任务及其对应的快捷键组合：
- en: '| File Management |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| 文件管理 |'
- en: '| Display help | `^G` |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| 显示帮助 | `^G` |'
- en: '| Exit | `^X` |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| 退出 | `^X` |'
- en: '| Write the current file | `^O` |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| 保存当前文件 | `^O` |'
- en: '| Insert another file into the current one | `^R` |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| 将另一个文件插入当前文件 | `^R` |'
- en: '| Editing |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| 编辑 |'
- en: '| Insert a new line at the cursor position | `^M` |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| 在光标位置插入新行 | `^M` |'
- en: '| Delete the character under the cursor | `^D` |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| 删除光标下的字符 | `^D` |'
- en: '| Delete the character to the left of the cursor | `^H` |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| 删除光标左侧的字符 | `^H` |'
- en: '| Insert a tab at the cursor position | `^I` |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| 在光标位置插入制表符 | `^I` |'
- en: '| Justify the current paragraph | `^J` |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| 对齐当前段落 | `^J` |'
- en: '| Justify the entire file | `Alt+J` |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| 对齐整个文件 | `Alt+J` |'
- en: '| Count the number of words, lines, and characters | `Alt+D` |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| 统计单词数、行数和字符数 | `Alt+D` |'
- en: '| Search and Replace |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| 查找与替换 |'
- en: '| Search for a string or a regular expression | `^W` |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| 查找字符串或正则表达式 | `^W` |'
- en: '| Replace a string or a regular expression | `^\` |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| 替换字符串或正则表达式 | `^\` |'
- en: '| Repeat the last search | `Alt+W` |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| 重复上次搜索 | `Alt+W` |'
- en: Table 7.3 – GNU nano common key combinations
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 表7.3 – GNU nano常见快捷键组合
- en: GNU nano stands out for its *simplicity*, in terms of its interface and use.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: GNU nano以其*简洁*著称，无论是界面还是使用方式。
- en: Another text editor, not as simple as `nano`, nor as complex as `emacs`, is
    the vim editor.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个文本编辑器，既不如`nano`那么简单，也不如`emacs`那么复杂，就是vim编辑器。
- en: Let’s step through the Vim editor and its customization possibilities.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步了解Vim编辑器及其自定义功能。
- en: The mighty vim
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 强大的vim
- en: '**Vim** (an acronym for **Vi IMproved**) is an *enhanced* version of the **Vi**
    text editor, present in all UNIX systems. Bram Moolenaar introduced the first
    version in 1991.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '**Vim**（**Vi IMproved**的缩写）是**Vi**文本编辑器的*增强*版，存在于所有UNIX系统中。Bram Moolenaar在1991年推出了第一个版本。'
- en: Vim is a powerful editor that offers many out-of-the-box features. The use of
    plugins adds new features, making it easier to adapt Vim to specific workflows.
    Many plugins focus on general functionality, such as locating files, providing
    information, and dealing with different file syntaxes or Git versioning.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: Vim是一个功能强大的编辑器，提供了许多开箱即用的功能。通过使用插件，可以增加新的功能，使得Vim更容易适应特定的工作流程。许多插件专注于常见功能，例如定位文件、提供信息、处理不同的文件语法或Git版本控制。
- en: Vim comes included in the Fedora Linux base installation, although not as the
    default text editor. To change it to the default text editor, add it to the shell
    configuration file. In Bash, this file is `~/.bashrc` or `~/.bash_profile`.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Vim包含在Fedora Linux的基础安装中，尽管不是默认的文本编辑器。要将其更改为默认文本编辑器，可以将其添加到shell配置文件中。在Bash中，这个文件是`~/.bashrc`或`~/.bash_profile`。
- en: 'Add the following global variables to set the vim editor as the default editor:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 添加以下全局变量，将 vim 编辑器设置为默认编辑器：
- en: '[PRE5]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: set ts=2 ← [1]
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: set ts=2 ← [1]
- en: set et   ← [2]
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: set et ← [2]
- en: set ai   ← [3]
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: set ai ← [3]
- en: '[PRE6]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: :command! TellDate echo call("strftime", [<args>])
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: :command! TellDate echo call("strftime", [<args>])
- en: '[PRE7]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: :TellDate "%F"
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: :TellDate "%F"
- en: '[PRE8]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: :TellDate "%H:%M"
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: :TellDate "%H:%M"
- en: '[PRE9]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '{functionName}() function.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '{functionName}() 函数'
- en: '{some_tasks}'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '{some_tasks}'
- en: endfunction
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: endfunction
- en: '[PRE10]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: nmap x dd
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: nmap x dd
- en: '[PRE11]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: :help map.txt
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: :help map.txt
- en: '[PRE12]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[acallejas@workstation ~]$ mkdir -p .vim'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[acallejas@workstation ~]$ mkdir -p .vim'
- en: '[PRE13]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: $ cd .vim
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ cd .vim
- en: $ wget https://github.com/vim-airline/vim-airline/archive/refs/tags/v0.11.tar.gz
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ wget https://github.com/vim-airline/vim-airline/archive/refs/tags/v0.11.tar.gz
- en: '[PRE14]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: $ tar xzf v0.11.tar.gz
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ tar xzf v0.11.tar.gz
- en: '[PRE15]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: $ mv vim-airline-0.11 vim-airline
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ mv vim-airline-0.11 vim-airline
- en: '[PRE16]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: $ mkdir -p pack/dist/start
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ mkdir -p pack/dist/start
- en: $ mv vim-airline pack/dist/start/
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ mv vim-airline pack/dist/start/
- en: '[PRE17]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: $ sudo dnf install powerline-fonts
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ sudo dnf install powerline-fonts
- en: '[PRE18]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: $ cd
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ cd
- en: $ vim .vimrc
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ vim .vimrc
- en: '[PRE19]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: $ vim test
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ vim test
- en: '[PRE20]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
