- en: 26\. Working with Containers on CentOS 8
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 26\. 在CentOS 8上使用容器
- en: Now that the basics of Linux Containers have been covered in the previous chapter,
    the goal of this chapter is to demonstrate how to create and manage containers
    using the Podman, Skopeo and Buildah tools included with CentOS 8\. It is intended
    that by the end of this chapter you will have a clearer understanding of how to
    create and manage containers on CentOS 8 and will have gained a knowledge foundation
    on which to continue exploring the power of Linux Containers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，上一章已涵盖Linux容器的基础知识，本章的目标是演示如何使用CentOS 8中包含的Podman、Skopeo和Buildah工具创建和管理容器。本章结束时，你将更清楚地理解如何在CentOS
    8上创建和管理容器，并为继续探索Linux容器的强大功能打下知识基础。
- en: 26.1 Pulling a Container Image
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 26.1 拉取容器镜像
- en: 'For this example, the CentOS 8 Base image will be pulled from the registry.
    Before pulling an image, however, information about the image repository can be
    obtained using the skopeo tool, for example:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，CentOS 8基础镜像将从仓库中拉取。然而，在拉取镜像之前，可以使用skopeo工具获取有关镜像仓库的信息，例如：
- en: skopeo inspect docker://docker.io/library/centos
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: skopeo inspect docker://docker.io/library/centos
- en: '{'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"Name": "docker.io/library/centos",'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '"名称": "docker.io/library/centos",'
- en: '"Digest": "sha256:f94c1d992c193b3dc09e297ffd54d8a4f1dc946c37cbeceb26d35ce1647f88d9",'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '"摘要": "sha256:f94c1d992c193b3dc09e297ffd54d8a4f1dc946c37cbeceb26d35ce1647f88d9",'
- en: '"RepoTags": ['
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '"RepoTags": ['
- en: '"5.11",'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '"5.11",'
- en: '"5",'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '"5",'
- en: '"6.10",'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '"6.10",'
- en: '"6.6",'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '"6.6",'
- en: '"6.7",'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '"6.7",'
- en: '"6.8",'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '"6.8",'
- en: '"6.9",'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '"6.9",'
- en: '"6",'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '"6",'
- en: '"7.0.1406",'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '"7.0.1406",'
- en: '"7.1.1503",'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '"7.1.1503",'
- en: '"7.2.1511",'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '"7.2.1511",'
- en: '"7.3.1611",'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '"7.3.1611",'
- en: '"7.4.1708",'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '"7.4.1708",'
- en: '"7.5.1804",'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '"7.5.1804",'
- en: '"7.6.1810",'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '"7.6.1810",'
- en: '"7.7.1908",'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '"7.7.1908",'
- en: '"7",'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '"7",'
- en: '"8",'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '"8",'
- en: '"centos5.11",'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '"centos5.11",'
- en: '"centos5",'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '"centos5",'
- en: '"centos6.10",'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '"centos6.10",'
- en: '"centos6.6",'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '"centos6.6",'
- en: '"centos6.7",'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '"centos6.7",'
- en: '"centos6.8",'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '"centos6.8",'
- en: '"centos6.9",'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '"centos6.9",'
- en: '"centos6",'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '"centos6",'
- en: '"centos7.0.1406",'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '"centos7.0.1406",'
- en: '"centos7.1.1503",'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '"centos7.1.1503",'
- en: '"centos7.2.1511",'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '"centos7.2.1511",'
- en: '"centos7.3.1611",'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '"centos7.3.1611",'
- en: '"centos7.4.1708",'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '"centos7.4.1708",'
- en: '"centos7.5.1804",'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '"centos7.5.1804",'
- en: '"centos7.6.1810",'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '"centos7.6.1810",'
- en: '"centos7.7.1908",'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '"centos7.7.1908",'
- en: '"centos7",'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '"centos7",'
- en: '"centos8",'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '"centos8",'
- en: '"latest"'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '"最新"'
- en: '],'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '"Created": "2019-10-01T23:19:57.105928163Z",'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '"创建时间": "2019-10-01T23:19:57.105928163Z",'
- en: '"DockerVersion": "18.06.1-ce",'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '"Docker版本": "18.06.1-ce",'
- en: '"Labels": {'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '"标签": {'
- en: '"org.label-schema.build-date": "20190927",'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '"org.label-schema.build-date": "20190927",'
- en: '"org.label-schema.license": "GPLv2",'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '"org.label-schema.license": "GPLv2",'
- en: '"org.label-schema.name": "CentOS Base Image",'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '"org.label-schema.name": "CentOS基础镜像",'
- en: '"org.label-schema.schema-version": "1.0",'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '"org.label-schema.schema-version": "1.0",'
- en: '"org.label-schema.vendor": "CentOS"'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '"org.label-schema.vendor": "CentOS"'
- en: '},'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '"Architecture": "amd64",'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '"架构": "amd64",'
- en: '"Os": "linux",'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '"操作系统": "linux",'
- en: '"Layers": ['
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '"层": ['
- en: '"sha256:729ec3a6ada3a6d26faca9b4779a037231f1762f759ef34c08bdd61bf52cd704"'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '"sha256:729ec3a6ada3a6d26faca9b4779a037231f1762f759ef34c08bdd61bf52cd704"'
- en: ']'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '}'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'Having verified that the repository has the images we need, the podman command
    can be used to download an image for the required CentOS version using the following
    syntax where <RepoTag> is replaced by the tag for the CentOS version as shown
    in the skopeo output:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在验证了仓库中包含我们需要的镜像后，可以使用podman命令通过以下语法下载所需CentOS版本的镜像，其中<RepoTag>应替换为skopeo输出中显示的CentOS版本标签：
- en: podman pull docker://docker.io/library/centos:<RepoTag>
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: podman pull docker://docker.io/library/centos:<RepoTag>
- en: 'For example, to pull the CentOS 7 image:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要拉取CentOS 7镜像：
- en: podman pull docker://docker.io/library/centos:centos7
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: podman pull docker://docker.io/library/centos:centos7
- en: 'Alternatively, to default to the latest release of CentOS:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，为了默认拉取CentOS的最新版本：
- en: podman pull docker://docker.io/library/centos:latest
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: podman pull docker://docker.io/library/centos:latest
- en: Trying to pull docker://docker.io/library/centos:latest...Getting image source
    signatures
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试拉取docker://docker.io/library/centos:latest... 获取镜像源签名
- en: 'Skipping blob 729ec3a6ada3 (already present): 68.21 MiB / 68.21 MiB [=======]
    0s'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 跳过blob 729ec3a6ada3（已存在）：68.21 MiB / 68.21 MiB [=======] 0s
- en: 'Copying config 0f3e07c0138f: 2.13 KiB / 2.13 KiB [==========================]
    0s'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '正在复制配置 0f3e07c0138f: 2.13 KiB / 2.13 KiB [==========================] 0s'
- en: Writing manifest to image destination
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正在将清单写入镜像目标
- en: Storing signatures
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 存储签名
- en: 0f3e07c0138fbe05abcb7a9cc7d63d9bd4c980c3f61fea5efa32e7c4217ef4da
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 0f3e07c0138fbe05abcb7a9cc7d63d9bd4c980c3f61fea5efa32e7c4217ef4da
- en: 'Verify that the image has been stored by asking podman to list all local images:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通过要求podman列出所有本地镜像来验证镜像是否已存储：
- en: podman images
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: podman images
- en: REPOSITORY TAG IMAGE ID CREATED SIZE
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库 标签 镜像ID 创建时间 大小
- en: docker.io/library/centos latest 0f3e07c0138f 8 weeks ago 227 MB
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: docker.io/library/centos latest 0f3e07c0138f 8周前 227 MB
- en: 'Details about a local image may be obtained by running the podman inspect command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行podman inspect命令获取本地镜像的详细信息：
- en: podman inspect centos:latest
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: podman inspect centos:latest
- en: 26.2 Running the Image in a Container
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 26.2 在容器中运行镜像
- en: 'The image pulled from the registry is a fully operational image that is ready
    to run in a container without modification. To run the image, use the podman run
    command. In this case the –rm option will be specified to indicate that we want
    to run the image in a container, execute one command and then have the container
    exit. In this case, the cat tool will be used to output the content of the /etc/passwd
    file located on the container root filesystem:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 从注册表中拉取的镜像是一个完全可以运行的镜像，准备好在容器中运行，无需修改。要运行镜像，可以使用`podman run`命令。在这种情况下，将指定`–rm`选项，以指示我们希望在容器中运行镜像，执行一个命令，然后让容器退出。在此情况下，将使用`cat`工具输出容器根文件系统中`/etc/passwd`文件的内容：
- en: podman run --rm centos:latest cat /etc/passwd
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: podman run --rm centos:latest cat /etc/passwd
- en: root:x:0:0:root:/root:/bin/bash
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: root:x:0:0:root:/root:/bin/bash
- en: bin:x:1:1:bin:/bin:/sbin/nologin
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: bin:x:1:1:bin:/bin:/sbin/nologin
- en: daemon:x:2:2:daemon:/sbin:/sbin/nologin
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: daemon:x:2:2:daemon:/sbin:/sbin/nologin
- en: adm:x:3:4:adm:/var/adm:/sbin/nologin
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: adm:x:3:4:adm:/var/adm:/sbin/nologin
- en: lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
- en: sync:x:5:0:sync:/sbin:/bin/sync
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: sync:x:5:0:sync:/sbin:/bin/sync
- en: shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
- en: halt:x:7:0:halt:/sbin:/sbin/halt
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: halt:x:7:0:halt:/sbin:/sbin/halt
- en: mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
- en: operator:x:11:0:operator:/root:/sbin/nologin
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: operator:x:11:0:operator:/root:/sbin/nologin
- en: games:x:12:100:games:/usr/games:/sbin/nologin
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: games:x:12:100:games:/usr/games:/sbin/nologin
- en: ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin
- en: nobody:x:65534:65534:Kernel Overflow User:/:/sbin/nologin
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: nobody:x:65534:65534:Kernel Overflow User:/:/sbin/nologin
- en: dbus:x:81:81:System message bus:/:/sbin/nologin
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: dbus:x:81:81:System message bus:/:/sbin/nologin
- en: systemd-coredump:x:999:997:systemd Core Dumper:/:/sbin/nologin
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: systemd-coredump:x:999:997:systemd Core Dumper:/:/sbin/nologin
- en: systemd-resolve:x:193:193:systemd Resolver:/:/sbin/nologin
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: systemd-resolve:x:193:193:systemd Resolver:/:/sbin/nologin
- en: Compare the content of the /etc/passwd file within the container with the /etc/passwd
    file on the host system and note that it lacks all of the additional users that
    are present on the host confirming that the cat command was executed within the
    container environment. Also note that the container started, ran the command and
    exited all within a matter of seconds. Compare this to the amount of time it takes
    to start a full operating, perform a task and shutdown a virtual machine and you
    begin to appreciate the speed and efficiency of containers.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 比较容器内的`/etc/passwd`文件与宿主系统中的`/etc/passwd`文件，注意容器内缺少宿主系统中所有的附加用户，这证明了`cat`命令是在容器环境中执行的。同时注意到容器在几秒钟内启动、执行命令并退出。与启动一个完整的操作系统、执行任务并关闭虚拟机所需的时间相比，你会开始欣赏容器的速度和效率。
- en: 'To launch a container, keep it running and access the shell, the following
    command can be used:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动一个容器，保持它运行并访问 shell，可以使用以下命令：
- en: $ podman run --name=mycontainer -it centos:latest /bin/bash
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman run --name=mycontainer -it centos:latest /bin/bash
- en: '[root@965acf617e6e /]#'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[root@965acf617e6e /]#'
- en: Note that an additional command-line option is used to assign the name “mycontainer”
    to the container. Though optional, this makes the container easier to recognize
    and reference as an alternative to using the automatically generated container
    ID.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，使用了一个额外的命令行选项来为容器指定名称“mycontainer”。虽然这是可选的，但这使得容器更容易识别和引用，作为使用自动生成的容器ID的替代方法。
- en: While the container is running, run podman in a different terminal window to
    see the status of all containers on the system
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当容器正在运行时，在另一个终端窗口运行podman，以查看系统中所有容器的状态
- en: podman ps -a
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: podman ps -a
- en: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
- en: 965acf617e6e docker.io/library/centos:latest /bin/bash About a minute ago Up
    About a minute ago mycontainer
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 965acf617e6e docker.io/library/centos:latest /bin/bash 大约一分钟前 启动 大约一分钟前 mycontainer
- en: 'To execute a command in a running container from the host, simply use the podman
    exec command, referencing the name of the running container and the command to
    be executed. The following command, for example, starts up a second bash session
    in the container named mycontainer:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要从宿主机在运行中的容器中执行命令，只需使用`podman exec`命令，指定运行中的容器名称和要执行的命令。例如，以下命令会在名为`mycontainer`的容器中启动第二个bash会话：
- en: podman exec -it mycontainer /bin/bash
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: podman exec -it mycontainer /bin/bash
- en: bash-4.4#
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: bash-4.4#
- en: 'Note that though the above example referenced the container name the same result
    can be achieved using the container ID as listed by the podman ps -a command:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，尽管上面的示例引用了容器名称，但也可以通过 `podman ps -a` 命令列出的容器 ID 来实现相同的结果：
- en: podman exec -it 965acf617e6e /bin/bash
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: podman exec -it 965acf617e6e /bin/bash
- en: bash-4.4#
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: bash-4.4#
- en: 'Alternatively, the podman attach command will also attach to a running container
    and access the shell prompt:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，`podman attach` 命令也可以附加到一个正在运行的容器并访问 shell 提示符：
- en: podman attach mycontainer
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: podman attach mycontainer
- en: bash-4.4#
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: bash-4.4#
- en: Once the container is up and running, any additional configuration changes can
    be made and packages installed just like any other CentOS 8 system.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦容器启动并运行，就可以像任何其他 CentOS 8 系统一样进行额外的配置更改并安装软件包。
- en: 26.3 Managing a Container
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 26.3 管理容器
- en: 'Once launched, a container will continue to run until it is stopped via podman,
    or the command that was launched when the container was run exits. Running the
    following command on the host, for example, will cause the container to exit:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启动，容器将继续运行，直到通过 podman 停止，或者当启动容器时运行的命令退出。例如，在主机上运行以下命令将使容器退出：
- en: podman stop mycontainer
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: podman stop mycontainer
- en: 'Alternatively, pressing the Ctrl-D keyboard sequence within the last remaining
    bash shell of the container would cause both the shell and container to exit.
    Once it has exited, the status of the container will change accordingly:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，在容器最后一个剩余的 bash shell 中按下 Ctrl-D 键盘组合，将会使得 shell 和容器都退出。退出后，容器的状态会相应地变化：
- en: podman ps -a
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: podman ps -a
- en: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 容器 ID 镜像 命令 创建时间 状态 端口 名称
- en: 965acf617e6e docker.io/library/centos:latest /bin/bash 10 minutes ago Exited
    (0) 21 seconds ago mycontainer
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 965acf617e6e docker.io/library/centos:latest /bin/bash 10 分钟前 已退出 (0) 21 秒前
    mycontainer
- en: 'Although the container is no longer running, it still exists and contains all
    of the changes that were made to the configuration and file system. If you installed
    packages, made configuration changes or added files, these changes will persist
    within “mycontainer”. To verify this, simply restart the container as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管容器已经不再运行，但它仍然存在，并且包含了所有对配置和文件系统所做的更改。如果你安装了软件包、做了配置更改或添加了文件，这些更改将在“mycontainer”中保持不变。要验证这一点，只需按如下方式重新启动容器：
- en: podman start mycontainer
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: podman start mycontainer
- en: 'After starting the container, use the podman exec command once again to execute
    commands within the container as outlined previously. For example, to once again
    gain access to a shell prompt:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 启动容器后，使用 `podman exec` 命令再次在容器内执行命令，具体方法如前所述。例如，再次获得 shell 提示符：
- en: podman exec -it mycontainer /bin/bash
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: podman exec -it mycontainer /bin/bash
- en: 'A running container may also be paused and resumed using the podman pause and
    unpause commands as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 正在运行的容器也可以通过 `podman pause` 和 `podman unpause` 命令进行暂停和恢复，如下所示：
- en: podman pause my container
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: podman pause 我的容器
- en: podman unpause my container
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: podman unpause 我的容器
- en: 26.4 Saving a Container to an Image
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 26.4 将容器保存为镜像
- en: 'Once the container guest system is configured to your requirements there is
    a good chance that you will want to create and run more than one container of
    this particular type. To do this, the container needs to be saved as an image
    to local storage so that it can be used as the basis for additional container
    instances. This is achieved using the podman commit command combined with the
    name or ID of the container and the name by which the image will be stored, for
    example:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦容器的客系统配置完成，并符合你的要求，你很可能想要创建并运行多个此类型的容器。为此，需要将容器保存为镜像到本地存储中，以便用作额外容器实例的基础。可以通过
    `podman commit` 命令结合容器的名称或 ID 以及镜像存储的名称来实现，例如：
- en: $ podman commit mycontainer mycentos_image
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman commit mycontainer mycentos_image
- en: 'Once the image has been saved, check that it now appears in the list of images
    in the local repository:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦镜像保存完毕，检查它是否出现在本地仓库的镜像列表中：
- en: $ podman images
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman images
- en: REPOSITORY TAG IMAGE ID CREATED SIZE
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库 标签 镜像 ID 创建时间 大小
- en: localhost/mycentos_image latest c32c45218143 5 seconds ago 227 MB
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: localhost/mycentos_image latest c32c45218143 5 秒前 227 MB
- en: docker.io/library/centos latest 0f3e07c0138f 8 weeks ago 227 MB
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: docker.io/library/centos latest 0f3e07c0138f 8 周前 227 MB
- en: 'The saved image can now be used to create additional containers identical to
    the original:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 保存的镜像现在可以用来创建与原始容器完全相同的额外容器：
- en: $ podman run --name=mycontainer2 -it localhost/mycentos_image /bin/bash
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman run --name=mycontainer2 -it localhost/mycentos_image /bin/bash
- en: 26.5 Removing an Image from Local Storage
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 26.5 从本地存储中删除镜像
- en: 'To remove an image from local storage once it is no longer needed, simply run
    the podman rmi command, referencing either the image name or ID as output by the
    podman images command. For example, to remove the image named mycentos_image created
    in the previous section, run podman as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要从本地存储中删除不再需要的镜像，只需运行 `podman rmi` 命令，并引用 `podman images` 命令输出的镜像名称或 ID。例如，要删除前面部分创建的名为
    mycentos_image 的镜像，可以按如下方式运行 podman：
- en: $ podman rmi localhost/mycentos_image
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman rmi localhost/mycentos_image
- en: Note before an image can be removed, any containers based on that image must
    first be removed.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：在删除镜像之前，基于该镜像的任何容器必须先被删除。
- en: 26.6 Removing Containers
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 26.6 删除容器
- en: 'Even when a container has exited or been stopped, it still exists and can be
    restarted at any time. If a container is no longer needed, it can be deleted using
    the podman rm command as follows after the container has been stopped:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 即使容器已退出或被停止，它仍然存在，并且可以随时重新启动。如果容器不再需要，可以在容器停止后使用 `podman rm` 命令将其删除，方法如下：
- en: podman rm mycontainer2
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: podman rm mycontainer2
- en: 26.7 Building a Container with Buildah
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 26.7 使用 Buildah 构建容器
- en: Buildah allows new containers to be built either from existing containers, an
    image or entirely from scratch. Buildah also includes the ability to mount the
    file system of a container so that it can be accessed and modified from the host.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Buildah 允许从现有容器、镜像或完全从头开始构建新容器。Buildah 还包括挂载容器文件系统的功能，这样就可以从主机访问和修改它。
- en: 'The following buildah command, for example, will build a container from the
    CentOS 8 Base image (if the image has not already been pulled from the registry,
    buildah will download it before creating the container):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下 buildah 命令将从 CentOS 8 Base 镜像构建容器（如果该镜像尚未从注册表拉取，buildah 将在创建容器之前先下载它）：
- en: $ buildah from docker://docker.io/library/centos:centos8
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: $ buildah from docker://docker.io/library/centos:centos8
- en: 'The result of running this command will be a container named centos-working-container
    that is ready to run:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令的结果将是一个名为 centos-working-container 的容器，它已准备好运行：
- en: $ buildah run centos-working-container cat /etc/passwd
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: $ buildah run centos-working-container cat /etc/passwd
- en: 26.8 Building a Container from Scratch
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 26.8 从头开始构建容器
- en: Building a container from scratch essentially creates an empty container. Once
    created, packages may be installed to meet the requirements of the container.
    This approach is useful when creating a container that will only need the minimum
    of packages installed.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 从头开始构建容器本质上是创建一个空容器。创建后，可以安装软件包以满足容器的需求。当创建一个仅需要安装最少软件包的容器时，这种方法特别有用。
- en: 'The first step in building from scratch is to run the following command to
    build the empty container:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 从头开始构建的第一步是运行以下命令来构建空容器：
- en: buildah from scratch
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: buildah from scratch
- en: working-container
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: working-container
- en: 'After the build is complete, a new container will have been created named working-container:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 构建完成后，将创建一个名为 working-container 的新容器：
- en: $ buildah containers
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: $ buildah containers
- en: CONTAINER ID BUILDER IMAGE ID IMAGE NAME CONTAINER NAME
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: CONTAINER ID BUILDER IMAGE ID IMAGE NAME CONTAINER NAME
- en: 00f81b68f03f * 0f3e07c0138f docker.io/library/centos:centos8 centos-working-container
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 00f81b68f03f * 0f3e07c0138f docker.io/library/centos:centos8 centos-working-container
- en: d7dd4b652379 * scratch working-container
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: d7dd4b652379 * scratch working-container
- en: 'The empty container is now ready to have some packages installed. Unfortunately
    this cannot be performed from within the container because not even the bash or
    dnf tools exist at this point. Instead the container filesystem needs to be mounted
    on the host system and the installation of the packages performed using dnf with
    the system root set to the mounted container filesystem. Begin this process by
    mounting the container’s filesystem as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 空容器现在已准备好安装一些软件包。不幸的是，这不能在容器内执行，因为此时连 bash 或 dnf 工具都不存在。相反，需要将容器的文件系统挂载到主机系统上，并使用
    dnf 安装软件包，系统根目录设置为挂载的容器文件系统。通过以下方式开始挂载容器的文件系统：
- en: buildah mount working-container
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: buildah mount working-container
- en: /var/lib/containers/storage/overlay/20b46cf0e2994d1ecdc4487b89f93f6ccf41f72788da63866b6bf80984081d9a/merge
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: /var/lib/containers/storage/overlay/20b46cf0e2994d1ecdc4487b89f93f6ccf41f72788da63866b6bf80984081d9a/merge
- en: 'If the file system was successfully mounted, buildah will output the mount
    point for the container file system. Now that we have access to the container
    filesystem, the dnf command can be used to install packages into the container
    using the –installroot option to point to the mounted container file system. The
    following command, for example, installs the bash, CoreUtils and dnf packages
    on the container filesystem (where <container_fs_mount> is the mount path output
    previously by the buildah mount command) :'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件系统成功挂载，buildah会输出容器文件系统的挂载点。现在我们已经可以访问容器文件系统，使用dnf命令可以通过--installroot选项将软件包安装到容器中，指向已挂载的容器文件系统。例如，以下命令会在容器文件系统中安装bash、CoreUtils和dnf包（其中<container_fs_mount>是之前通过buildah
    mount命令输出的挂载路径）：
- en: dnf install --releasever=8 --installroot <container_fs_mount> bash coreutils
    dnf
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: dnf install --releasever=8 --installroot <container_fs_mount> bash coreutils
    dnf
- en: Note that the --releasever option is used to indicate to dnf that the packages
    for CentOS version 8 are to be installed within the container.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，--releasever选项用于告知dnf在容器中安装CentOS版本8的包。
- en: 'After the installation completes, unmount the scratch filesystem as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，按照以下方式卸载临时文件系统：
- en: buildah umount working-container
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: buildah umount working-container
- en: 'Once dnf has performed the package installation, the container can be run and
    the bash command prompt accessed as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦dnf完成了包的安装，就可以运行容器并访问bash命令提示符，方法如下：
- en: buildah run working-container bash
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: buildah run working-container bash
- en: bash-4.4#
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: bash-4.4#
- en: 26.9 Container Bridge Networking
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 26.9 容器桥接网络
- en: 'As outlined in the previous chapter, container networking is implemented using
    the Container Networking Interface (CNI) bridged network stack. The following
    command shows the typical network configuration on a host system on which containers
    are running:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述，容器网络是通过容器网络接口（CNI）桥接网络栈实现的。以下命令展示了运行容器的主机系统上的典型网络配置：
- en: ip a
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ip a
- en: '1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default
    qlen 1000'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default
    qlen 1000'
- en: link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
- en: inet 127.0.0.1/8 scope host lo
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: inet 127.0.0.1/8 scope host lo
- en: valid_lft forever preferred_lft forever
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: valid_lft 永久 preferred_lft 永久
- en: inet6 ::1/128 scope host
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: inet6 ::1/128 scope host
- en: valid_lft forever preferred_lft forever
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: valid_lft 永久 preferred_lft 永久
- en: '2: enp0s3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state
    UP group default qlen 1000'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '2: enp0s3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state
    UP group default qlen 1000'
- en: link/ether 08:00:27:20:dc:2f brd ff:ff:ff:ff:ff:ff
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: link/ether 08:00:27:20:dc:2f brd ff:ff:ff:ff:ff:ff
- en: inet 192.168.0.33/24 brd 192.168.0.255 scope global dynamic noprefixroute enp0s3
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: inet 192.168.0.33/24 brd 192.168.0.255 scope global dynamic noprefixroute enp0s3
- en: valid_lft 3453sec preferred_lft 3453sec
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: valid_lft 3453秒 preferred_lft 3453秒
- en: inet6 2606:a000:4307:f000:aa6:6da1:f8a9:5f95/64 scope global dynamic noprefixroute
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: inet6 2606:a000:4307:f000:aa6:6da1:f8a9:5f95/64 scope global dynamic noprefixroute
- en: valid_lft 3599sec preferred_lft 3599sec
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: valid_lft 3599秒 preferred_lft 3599秒
- en: inet6 fe80::4275:e186:85e2:d81f/64 scope link noprefixroute
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: inet6 fe80::4275:e186:85e2:d81f/64 scope link noprefixroute
- en: valid_lft forever preferred_lft forever
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: valid_lft 永久 preferred_lft 永久
- en: '3: cni0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP
    group default qlen 1000'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '3: cni0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP
    group default qlen 1000'
- en: link/ether 7e:b6:04:22:4f:22 brd ff:ff:ff:ff:ff:ff
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: link/ether 7e:b6:04:22:4f:22 brd ff:ff:ff:ff:ff:ff
- en: inet 10.88.0.1/16 scope global cni0
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: inet 10.88.0.1/16 scope global cni0
- en: valid_lft forever preferred_lft forever
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: valid_lft 永久 preferred_lft 永久
- en: inet6 fe80::7cb6:4ff:fe22:4f22/64 scope link
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: inet6 fe80::7cb6:4ff:fe22:4f22/64 scope link
- en: valid_lft forever preferred_lft forever
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: valid_lft 永久 preferred_lft 永久
- en: '12: veth2a07dc55@if3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue
    master cni0 state UP group default'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '12: veth2a07dc55@if3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue
    master cni0 state UP group default'
- en: link/ether 42:0d:69:13:89:af brd ff:ff:ff:ff:ff:ff link-netns cni-61ba825e-e596-b2ef-a59f-b0743025e448
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: link/ether 42:0d:69:13:89:af brd ff:ff:ff:ff:ff:ff link-netns cni-61ba825e-e596-b2ef-a59f-b0743025e448
- en: inet6 fe80::400d:69ff:fe13:89af/64 scope link
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: inet6 fe80::400d:69ff:fe13:89af/64 scope link
- en: valid_lft forever preferred_lft forever
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: valid_lft 永久 preferred_lft 永久
- en: 'In the above example, the host has an interface named enp0s3 which is connected
    to the external network with an IP address of 192.168.0.33\. In addition, a virtual
    interface has been created named cni0 and assigned the IP address of 10.88.0.1\.
    Running the same ip command on a container running on the host might result in
    the following output:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，主机有一个名为enp0s3的接口，连接到外部网络，IP地址为192.168.0.33。 此外，还创建了一个名为cni0的虚拟接口，并分配了IP地址10.88.0.1。
    在主机上运行相同的ip命令时，容器可能会显示以下输出：
- en: ip a
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ip a
- en: '1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default
    qlen 1000'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default
    qlen 1000'
- en: link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
- en: inet 127.0.0.1/8 scope host lo
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: inet 127.0.0.1/8 scope host lo
- en: valid_lft forever preferred_lft forever
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: valid_lft forever preferred_lft forever
- en: inet6 ::1/128 scope host
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: inet6 ::1/128 scope host
- en: valid_lft forever preferred_lft forever
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: valid_lft forever preferred_lft forever
- en: '3: eth0@if12: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state
    UP group default'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '3: eth0@if12: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state
    UP group default'
- en: link/ether 3e:52:22:4b:e0:d8 brd ff:ff:ff:ff:ff:ff link-netnsid 0
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: link/ether 3e:52:22:4b:e0:d8 brd ff:ff:ff:ff:ff:ff link-netnsid 0
- en: inet 10.88.0.28/16 scope global eth0
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: inet 10.88.0.28/16 scope global eth0
- en: valid_lft forever preferred_lft forever
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: valid_lft forever preferred_lft forever
- en: inet6 fe80::3c52:22ff:fe4b:e0d8/64 scope link
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: inet6 fe80::3c52:22ff:fe4b:e0d8/64 scope link
- en: valid_lft forever preferred_lft forever
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: valid_lft forever preferred_lft forever
- en: 'In this case, the container has an IP address of 10.88.0.28\. Running the ping
    command on the host will verify that the host and containers are indeed on the
    same subnet:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，容器的IP地址是10.88.0.28。 在主机上运行ping命令可以验证主机和容器确实在同一子网内：
- en: ping 10.88.0.28
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ping 10.88.0.28
- en: PING 10.88.0.28 (10.88.0.28) 56(84) bytes of data.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: PING 10.88.0.28 (10.88.0.28) 56(84) 字节的数据。
- en: '64 bytes from 10.88.0.28: icmp_seq=1 ttl=64 time=0.056 ms'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 64字节来自10.88.0.28：icmp_seq=1 ttl=64 时间=0.056 ms
- en: '64 bytes from 10.88.0.28: icmp_seq=2 ttl=64 time=0.039 ms'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '64 bytes from 10.88.0.28: icmp_seq=2 ttl=64 time=0.039 ms'
- en: .
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: .
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: 'The CNI configuration settings can be found in the /etc/cni/net.d/87-podman-bridge.conflist
    file on the host system which, by default, will read as follows:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: CNI 配置设置可以在主机系统的 /etc/cni/net.d/87-podman-bridge.conflist 文件中找到，默认情况下，文件内容如下：
- en: '{'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"cniVersion": "0.3.0",'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '"cniVersion": "0.3.0",'
- en: '"name": "podman",'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '"name": "podman",'
- en: '"plugins": ['
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '"plugins": ['
- en: '{'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "bridge",'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "bridge",'
- en: '"bridge": "cni0",'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '"bridge": "cni0",'
- en: '"isGateway": true,'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '"isGateway": true,'
- en: '"ipMasq": true,'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '"ipMasq": true,'
- en: '"ipam": {'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '"ipam": {'
- en: '"type": "host-local",'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "host-local",'
- en: '"subnet": "10.88.0.0/16",'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '"subnet": "10.88.0.0/16",'
- en: '"routes": ['
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '"routes": ['
- en: '{ "dst": "0.0.0.0/0" }'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '{ "dst": "0.0.0.0/0" }'
- en: ']'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '}'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "portmap",'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "portmap",'
- en: '"capabilities": {'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '"capabilities": {'
- en: '"portMappings": true'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '"portMappings": true'
- en: '}'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: ']'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '}'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: Changes can be made to this file to change the subnet address range, and also
    to change the plugin type (set to bridge for this example) for implementing different
    network configurations.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 可以修改此文件以更改子网地址范围，也可以更改插件类型（此示例中设置为bridge）以实现不同的网络配置。
- en: 26.10 Summary
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 26.10 总结
- en: This chapter has worked through the creation and management of Linux Containers
    on CentOS 8 using the skopeo and buildah tools, including the use of container
    images obtained from a repository and the creation of a new image built entirely
    from scratch.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何在CentOS 8上使用skopeo和buildah工具创建和管理Linux容器，包括使用从仓库中获取的容器镜像和完全从头开始构建的新镜像。
