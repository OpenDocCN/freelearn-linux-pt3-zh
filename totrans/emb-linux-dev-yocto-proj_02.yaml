- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Baking Our First Poky-Based System
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建我们的第一个基于 Poky 的系统
- en: Let’s get our hands dirty! In this chapter, we will understand the basic concepts
    involved in the Poky workflow. We will cover the steps to download, configure,
    and prepare the Poky build environment and bake something usable. The steps covered
    here are common for testing and development. They will give us some experience
    using Poky and a taste of its capabilities.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始动手吧！在本章中，我们将理解 Poky 工作流中涉及的基本概念。我们将介绍下载、配置和准备 Poky 构建环境的步骤，并构建一些可用的内容。本章涵盖的步骤适用于测试和开发，能让我们体验使用
    Poky，并感受它的能力。
- en: Preparing the build host system
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备构建主机系统
- en: This section describes how to prepare Windows and Linux distribution host systems.
    Although we will describe the Windows steps, we will focus on using a Linux distribution
    host system.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了如何准备 Windows 和 Linux 分发版主机系统。虽然我们将描述 Windows 的步骤，但我们将重点介绍如何使用 Linux 分发版主机系统。
- en: Tip
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The use of macOS as a host system is possible. Still, it involves using the
    **CROss PlatformS** (**CROPS**) framework, which leverages Docker, allowing the
    use of foreign operating systems, including macOS. For more information, you can
    refer to the *Setting Up to Use CROss PlatformS (CROPS)* section from the *Yocto
    Project Development Tasks* *Manual* ([https://docs.yoctoproject.org/4.0.4/dev-manual/start.html#setting-up-to-use-cross-platforms-crops](https://docs.yoctoproject.org/4.0.4/dev-manual/start.html#setting-up-to-use-cross-platforms-crops)).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 macOS 作为主机系统，但需要使用 **CROss PlatformS**（**CROPS**）框架，该框架利用 Docker，允许使用包括
    macOS 在内的外部操作系统。有关更多信息，可以参考 *Yocto 项目开发任务手册* 中的 *设置以使用 CROss PlatformS (CROPS)*
    部分（[https://docs.yoctoproject.org/4.0.4/dev-manual/start.html#setting-up-to-use-cross-platforms-crops](https://docs.yoctoproject.org/4.0.4/dev-manual/start.html#setting-up-to-use-cross-platforms-crops)）。
- en: Next, we will provide the necessary information to start the build host system
    preparation.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将提供开始构建主机系统准备所需的信息。
- en: Using Windows Subsystem for Linux (WSLv2)
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Windows 子系统 Linux（WSLv2）
- en: You can set up a Linux distribution on Windows if you are a Windows user. WSLv2
    is only available for Windows 10+ builds greater than 18917\. WSLv2 allows development
    using the Yocto Project. You can install the Linux distribution from the Microsoft
    Store.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是 Windows 用户，可以在 Windows 上设置一个 Linux 分发版。WSLv2 仅适用于 Windows 10+ 版本 18917
    及更高版本。WSLv2 允许使用 Yocto 项目进行开发。你可以从 Microsoft Store 安装 Linux 分发版。
- en: Please refer to the *Setting Up to Use Windows Subsystem For Linux* session
    ([https://docs.yoctoproject.org/4.0.4/dev-manual/start.html#setting-up-to-use-windows-subsystem-for-linux-wslv2](https://docs.yoctoproject.org/4.0.4/dev-manual/start.html#setting-up-to-use-windows-subsystem-for-linux-wslv2))
    from the *Yocto Project Development Tasks Manual* ([https://docs.yoctoproject.org/4.0.4/dev-manual/index.html](https://docs.yoctoproject.org/4.0.4/dev-manual/index.html)).
    Once you have WSLv2 set up, you can follow the next sections as if you were running
    on a native Linux machine.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考 *Yocto 项目开发任务手册* 中的 *设置以使用 Windows 子系统 Linux (WSLv2)* 部分（[https://docs.yoctoproject.org/4.0.4/dev-manual/start.html#setting-up-to-use-windows-subsystem-for-linux-wslv2](https://docs.yoctoproject.org/4.0.4/dev-manual/start.html#setting-up-to-use-windows-subsystem-for-linux-wslv2)）。一旦你设置好
    WSLv2，你可以像在本地 Linux 机器上一样继续执行接下来的步骤。
- en: Preparing a Linux-based system
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备一个基于 Linux 的系统
- en: The process needed to set up our host system depends on the Linux distribution
    we use. Poky has a set of supported Linux distributions. Let’s suppose we are
    new to embedded Linux development. In that case, it is advisable to use one of
    the supported Linux distributions to avoid wasting time debugging issues related
    to the host system support.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 设置主机系统的过程取决于我们使用的 Linux 分发版。Poky 有一组支持的 Linux 分发版。假设我们是嵌入式 Linux 开发的新手，在这种情况下，建议使用支持的
    Linux 分发版，以避免浪费时间调试与主机系统支持相关的问题。
- en: 'If you use the current release of one of the following distributions, you should
    be good to start using the Yocto Project on your machine:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用以下分发版的当前版本，你应该可以开始在你的机器上使用 Yocto 项目：
- en: Ubuntu
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu
- en: Fedora
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fedora
- en: CentOS
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CentOS
- en: AlmaLinux
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AlmaLinux
- en: Debian
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Debian
- en: OpenSUSE Leap
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenSUSE Leap
- en: To confirm whether your version is supported, it is advisable to check the official
    documentation online in the *Required Packages for the Build Host* section ([https://docs.yoctoproject.org/4.0.4/ref-manual/system-requirements.html#required-packages-for-the-build-host](https://docs.yoctoproject.org/4.0.4/ref-manual/system-requirements.html#required-packages-for-the-build-host)).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确认你的版本是否受支持，建议在*构建主机所需软件包*部分查阅官方在线文档([https://docs.yoctoproject.org/4.0.4/ref-manual/system-requirements.html#required-packages-for-the-build-host](https://docs.yoctoproject.org/4.0.4/ref-manual/system-requirements.html#required-packages-for-the-build-host))。
- en: If your preferred distribution is not in the preceding list, it doesn’t mean
    it is not possible to use Poky on it. Your host development system must meet some
    specific versions for Git, tar, Python, and GCC. Your Linux distributions should
    provide compatible versions of those base tools. However, there is a chance that
    your host development system does not meet all these requirements. In that case,
    you can resolve this by installing a **buildtools** tarball that contains these
    tools, as detailed in *Required Git, tar, Python, and GCC* *Versions* ([https://docs.yoctoproject.org/4.0.4/ref-manual/system-requirements.html#required-git-tar-python-and-gcc-versions](https://docs.yoctoproject.org/4.0.4/ref-manual/system-requirements.html#required-git-tar-python-and-gcc-versions)).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你偏好的发行版不在上述列表中，并不意味着无法在其上使用Poky。你的主机开发系统必须满足Git、tar、Python和GCC的一些特定版本要求。你的Linux发行版应该提供这些基本工具的兼容版本。然而，也有可能你的主机开发系统未能满足所有这些要求。在这种情况下，你可以通过安装一个包含这些工具的**buildtools**
    tar包来解决这个问题，详细信息请参阅*所需的Git、tar、Python和GCC版本*([https://docs.yoctoproject.org/4.0.4/ref-manual/system-requirements.html#required-git-tar-python-and-gcc-versions](https://docs.yoctoproject.org/4.0.4/ref-manual/system-requirements.html#required-git-tar-python-and-gcc-versions))。
- en: We must install a few packages on the host system. This book provides instructions
    for **Debian** and **Fedora**, our preferred distributions, which we will look
    at next. The set of packages for other supported distributions can be found in
    the *Yocto Project Reference* *Manual* ([https://docs.yoctoproject.org/4.0.4/ref-manual/system-requirements.html#required-packages-for-the-build-host](https://docs.yoctoproject.org/4.0.4/ref-manual/system-requirements.html#required-packages-for-the-build-host)).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须在主机系统上安装一些软件包。本书提供了有关**Debian**和**Fedora**的安装说明，我们接下来将详细介绍这两个发行版。其他支持的发行版所需的软件包可以在*Yocto项目参考手册*中找到([https://docs.yoctoproject.org/4.0.4/ref-manual/system-requirements.html#required-packages-for-the-build-host](https://docs.yoctoproject.org/4.0.4/ref-manual/system-requirements.html#required-packages-for-the-build-host))。
- en: Debian-based distribution
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于Debian的发行版
- en: 'To install the necessary packages for a headless host system, run the following
    command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装适用于无头主机系统的必要软件包，请运行以下命令：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Fedora
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Fedora
- en: 'To install the needed packages for a headless host system, run the following
    command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装适用于无头主机系统所需的软件包，请运行以下命令：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Downloading the Poky source code
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载Poky源代码
- en: 'After we have installed the required packages on our development host system,
    we can download the current LTS version (at the time of writing) of Poky source
    code using Git, with the following command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将所需软件包安装到开发主机系统之后，我们可以使用Git下载当前LTS版本（截至本文编写时）的Poky源代码，命令如下：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Learn more about Git at [https://git-scm.com](https://git-scm.com).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 了解更多关于Git的信息，请访问[https://git-scm.com](https://git-scm.com)。
- en: 'After the download process is complete, we should have the following contents
    inside the `poky` directory:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下载过程完成后，`poky`目录中应该包含以下内容：
- en: "![Figure 2.1 – The content of the \uFEFFpoky directory after downloading](img/Figure_2.1_B19361.jpg)"
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1 – 下载后的poky目录内容](img/Figure_2.1_B19361.jpg)'
- en: Figure 2.1 – The content of the poky directory after downloading
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – 下载后的poky目录内容
- en: Note
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The examples and code presented in this and subsequent chapters use the Yocto
    Project 4.0 release (codenamed **Kirkstone**) as a reference.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 本章及后续章节中呈现的示例和代码以Yocto项目4.0版本（代号**Kirkstone**）为参考。
- en: Preparing the build environment
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备构建环境
- en: 'Inside the `poky` directory exists a script named `oe-init-build-env`, which
    sets up the building environment. But first, the script must be run-sourced (not
    executed) as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在`poky`目录中存在一个名为`oe-init-build-env`的脚本，它用于设置构建环境。但首先，必须以“源”（source）方式运行该脚本（而不是执行它），如下所示：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, `[build-directory]` is an optional parameter for the name of the directory
    where the environment is configured. If it is empty, it defaults to `build`. The
    `[build-directory]` parameter is the place where we perform the builds.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`[build-directory]` 是一个可选参数，表示配置环境的目录名称。如果为空，它默认为 `build`。`[build-directory]`
    参数是我们进行构建的地方。
- en: 'The output from `source oe-init-build-env build` displays some important configurations
    such as the file location, some project URLs, and some common targets, such as
    available images. The following figure shows an output example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `source oe-init-build-env build` 命令输出的内容显示了一些重要的配置，如文件位置、一些项目 URL 以及一些常见的目标，如可用的镜像。下图显示了一个输出示例：
- en: '![Figure 2.2 – Output of the source oe-init-build-env build command](img/Figure_2.2_B19361.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2 – oe-init-build-env 构建命令的输出](img/Figure_2.2_B19361.jpg)'
- en: Figure 2.2 – Output of the source oe-init-build-env build command
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – oe-init-build-env 构建命令的输出
- en: It is very convenient to use different build directories. We can work on separate
    projects in parallel or experimental setups without affecting our other builds.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用不同的构建目录非常方便。我们可以并行处理多个项目或实验性设置，而不会影响其他构建。
- en: Note
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Throughout the book, we will use `build` as the build directory. When we need
    to point to a file inside the build directory, we will adopt the same convention
    – for example, `build/conf/local.conf`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用 `build` 作为构建目录。当我们需要指向构建目录中的某个文件时，我们将采用相同的约定——例如，`build/conf/local.conf`。
- en: Knowing the local.conf file
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 local.conf 文件
- en: 'When we initialize a build environment, it creates a file called `build/conf/local.conf`.
    This config file is powerful, since it can configure almost every aspect of the
    build process. We can set the target machine and the toolchain host architecture
    to be used for a custom cross-toolchain, optimize options for maximum build time
    reduction, and so on. The comments inside the `build/conf/local.conf` file are
    excellent documentation and a reference of the possible variables and their defaults.
    The minimal set of variables that we probably want to change from the default
    is the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们初始化一个构建环境时，它会创建一个名为 `build/conf/local.conf` 的文件。这个配置文件非常强大，因为它几乎可以配置构建过程的每个方面。我们可以设置目标机器以及用于自定义交叉工具链的工具链主机架构，优化选项以最大限度地减少构建时间，等等。`build/conf/local.conf`
    文件中的注释是极好的文档，提供了可能的变量及其默认值的参考。我们可能需要从默认值中更改的最小变量集如下：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `MACHINE` variable is where we determine the target machine we wish to
    build. At the time of writing, Poky supports the following machines in its reference
    BSP:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`MACHINE` 变量是我们确定希望构建的目标机器的位置。在撰写本文时，Poky 在其参考 BSP 中支持以下机器：'
- en: '`beaglebone-yocto`: This is BeagleBone, which is the reference platform for
    32-bit ARM'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`beaglebone-yocto`: 这是 BeagleBone，它是 32 位 ARM 的参考平台'
- en: '`genericx86`: This is generic support for 32-bit x86-based machines'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`genericx86`: 这是 32 位 x86 架构机器的通用支持'
- en: '`genericx86-64:` This is generic support for 64-bit x86-based machines'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`genericx86-64`: 这是 64 位 x86 架构机器的通用支持'
- en: '`edgerouter`: This is EdgeRouter Lite, which is the reference platform for
    64-bit MIPS'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`edgerouter`: 这是 EdgeRouter Lite，它是 64 位 MIPS 的参考平台'
- en: 'The machines are made available by a layer called `meta-yocto-bsp`. Besides
    these machines, OpenEmbedded Core, inside the `meta` directory, also provides
    support for the following Quick Emulation (QEMU) machines:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这些机器由一个名为 `meta-yocto-bsp` 的层提供。除了这些机器之外，OpenEmbedded Core 在 `meta` 目录中还提供对以下快速模拟（QEMU）机器的支持：
- en: '`qemuarm`: This is the QEMU ARMv7 emulation'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qemuarm`: 这是 QEMU ARMv7 模拟'
- en: '`qemuarmv5`: This is the QEMU ARMv5 emulation'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qemuarmv5`: 这是 QEMU ARMv5 模拟'
- en: '`qemuarm64`: This is the QEMU ARMv8 emulation'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qemuarm64`: 这是 QEMU ARMv8 模拟'
- en: '`qemumips`: This is the QEMU MIPS emulation'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qemumips`: 这是 QEMU MIPS 模拟'
- en: '`qemumips64`: This is the QEMU MIPS64 emulation'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qemumips64`: 这是 QEMU MIPS64 模拟'
- en: '`qemuppc`: This is the QEMU PowerPC emulation'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qemuppc`: 这是 QEMU PowerPC 模拟'
- en: '`qemuppc64`: This is the QEMU PowerPC 64 emulation'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qemuppc64`: 这是 QEMU PowerPC 64 模拟'
- en: '`qemux86-64`: This is the QEMU x86-64 emulation'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qemux86-64`: 这是 QEMU x86-64 模拟'
- en: '`qemux86`: This is the QEMU x86 emulation'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qemux86`: 这是 QEMU x86 模拟'
- en: '`qemuriscv32`: This is the QEMU RISC-V 32 emulation'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qemuriscv32`: 这是 QEMU RISC-V 32 模拟'
- en: '`qemuriscv64`: This is the QEMU RISC-V 64 emulation'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qemuriscv64`: 这是 QEMU RISC-V 64 模拟'
- en: Extra BSP layers available from several vendors provide support for other machines.
    The process of using an extra BSP layer is shown in [*Chapter 11*](B19361_11.xhtml#_idTextAnchor140),
    *Exploring* *External Layers*.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 来自多个供应商的额外BSP层提供对其他机器的支持。使用额外BSP层的过程在[*第11章*](B19361_11.xhtml#_idTextAnchor140)中展示，*探索*
    *外部层*。
- en: Note
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `local.conf` file is a convenient way to override several global default
    configurations throughout the Yocto Project’s tools. Essentially, we can change
    or set any variable – for example, adding additional packages to an image file.
    Changing the `build/conf/local.conf` file is convenient; however, the source code
    management system usually does not track temporary changes in this directory.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`local.conf`文件是一种方便的方式，可以覆盖Yocto项目工具中的多个全局默认配置。基本上，我们可以更改或设置任何变量——例如，向镜像文件中添加额外的软件包。更改`build/conf/local.conf`文件很方便；然而，源代码管理系统通常不会跟踪此目录中的临时更改。'
- en: The `build/conf/local.conf` file can set several variables. It is worth taking
    some time and reading through the file comments that are generated to get a general
    idea of what variables can be set.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`build/conf/local.conf`文件可以设置多个变量。值得花时间阅读文件中生成的注释，以大致了解可以设置的变量。'
- en: Building a target image
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建目标镜像
- en: 'Poky provides several predesigned image recipes we can use to build our binary
    image. We can check the list of available images by running the following command
    from the `poky` directory:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Poky提供了几种预设计的镜像配方，我们可以用来构建二进制镜像。我们可以通过在`poky`目录中运行以下命令来查看可用镜像列表：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: All the recipes provide images that are a set of unpacked and configured packages,
    generating a filesystem that we can use with hardware or one of the supported
    QEMU machines.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 所有配方都提供镜像，这些镜像是已解包并配置好的软件包，生成一个我们可以在硬件或支持的QEMU机器上使用的文件系统。
- en: 'Next, we can see the list of most commonly used images:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以看到最常用镜像的列表：
- en: '`core-image-minimal`: This is a small image allowing a device to boot. It is
    handy for kernel and bootloader tests and development.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core-image-minimal`：这是一个小型镜像，允许设备启动。它非常适合内核和引导加载程序的测试和开发。'
- en: '`core-image-base`: This console-only image provides basic hardware support
    for the target device.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core-image-base`：这个仅有控制台的镜像为目标设备提供了基本的硬件支持。'
- en: '`core-image-weston`: This image provides the Wayland protocol libraries and
    the reference Weston compositor.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core-image-weston`：此镜像提供了Wayland协议库和参考Weston合成器。'
- en: '`core-image-x11`: This is a basic X11 image with a terminal.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core-image-x11`：这是一个基本的X11镜像，带有终端。'
- en: '`core-image-sato`: This is an image with Sato support and a mobile environment
    for mobile devices that use X11\. It provides applications such as a terminal,
    editor, file manager, media player, and so on.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core-image-sato`：这是一个支持Sato和适用于使用X11的移动设备的移动环境的镜像。它提供了终端、编辑器、文件管理器、媒体播放器等应用程序。'
- en: '`core-image-full-cmdline`: A console-only image with more full-featured Linux
    system functionality installed.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core-image-full-cmdline`：一个仅有控制台的镜像，安装了更多完整功能的Linux系统。'
- en: There are other reference images available from the community. Several images
    support features, such as Real Time, `initramfs`, and MTD (flash tools). It is
    good to check the source code or the *Yocto Project Reference Manual* ([https://docs.yoctoproject.org/4.0.4/ref-manual/index.html](https://docs.yoctoproject.org/4.0.4/ref-manual/index.html))
    for the complete and updated list.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 社区提供了其他参考镜像。一些镜像支持诸如实时（Real Time）、`initramfs`和MTD（闪存工具）等功能。可以查看源代码或*Yocto项目参考手册*([https://docs.yoctoproject.org/4.0.4/ref-manual/index.html](https://docs.yoctoproject.org/4.0.4/ref-manual/index.html))，以获取完整且更新的列表。
- en: 'The process of building an image for a target is straightforward. But first,
    we need to set up the build environment using `source oe-init-build-env [build-directory]`
    before using BitBake. To build the image, we can use the template in the following
    command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为目标构建镜像的过程是直接的。但首先，我们需要使用`source oe-init-build-env [build-directory]`来设置构建环境，然后才能使用BitBake构建镜像。我们可以使用以下命令中的模板来构建镜像：
- en: '![Figure 2.3 – How to build a recipe using BitBake](img/Figure_2.3_B19361.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图2.3 – 如何使用BitBake构建配方](img/Figure_2.3_B19361.jpg)'
- en: Figure 2.3 – How to build a recipe using BitBake
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3 – 如何使用BitBake构建配方
- en: Note
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We will use `MACHINE = "qemux86-64"` in the following examples. You can set
    it in `build/conf/local.conf` accordingly.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将使用`MACHINE = "qemux86-64"`。你可以在`build/conf/local.conf`中相应设置。
- en: 'For example, to build `core-image-full-cmdline`, run the following command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要构建`core-image-full-cmdline`，运行以下命令：
- en: '[PRE6]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The Poky build looks like the following figure:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Poky构建如下面的图所示：
- en: "![Figure 2.4 – The result of bitbake core-ima\uFEFF\uFEFFge-full-cmdline](img/Figure_2.4_B19361.jpg)"
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.4 – bitbake core-image-full-cmdline 的结果](img/Figure_2.4_B19361.jpg)'
- en: Figure 2.4 – The result of bitbake core-image-full-cmdline
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – bitbake core-image-full-cmdline 的结果
- en: Running images in QEMU
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 QEMU 中运行镜像
- en: We can use hardware emulation to speed up the development process, as it enables
    a test run without involving any actual hardware. Fortunately, most projects have
    only a tiny portion that is hardware-dependent.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用硬件仿真来加速开发过程，因为它允许在不涉及实际硬件的情况下进行测试运行。幸运的是，大多数项目中只有极小部分是依赖硬件的。
- en: QEMU is a free, open source software package that performs hardware virtualization.
    QEMU-based machines allow testing and development without real hardware. ARMv5,
    ARMv7, ARMv8, MIPS, MIPS64, PowerPC, PowerPC 64, RISC-V 32, RISC-V 64, x86, and
    x86-64 emulations are currently supported. We will go into more detail about QEMU
    usage in *sw*, *Speeding Up Product Development through Emulation –* *QEMU*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: QEMU 是一个免费的开源软件包，执行硬件虚拟化。基于 QEMU 的机器允许在没有真实硬件的情况下进行测试和开发。目前支持 ARMv5、ARMv7、ARMv8、MIPS、MIPS64、PowerPC、PowerPC
    64、RISC-V 32、RISC-V 64、x86 和 x86-64 仿真。我们将在*sw*中详细讨论 QEMU 的使用，*通过仿真加速产品开发 –* *QEMU*。
- en: 'OpenEmbedded Core provides the `runqemu` script tool, which is a wrapper to
    make use of QEMU easier. The way to run the script tool is as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: OpenEmbedded Core 提供了`runqemu`脚本工具，这是一个便捷的封装器，使得使用 QEMU 更加简便。运行该脚本工具的方法如下：
- en: '[PRE7]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, `<machine>` is the machine/architecture to be used as `qemux86-64`, or
    any other supported machine. Also, `<zimage>` is the path to a kernel (for example,
    `bzImage-qemux86-64.bin`). Finally, `<filesystem>` is the path to an `ext4` image
    (for example, `filesystem-qemux86-64.ext4`) or an NFS directory. All parameters
    in the preceding call to `runqemu` `<zimage>` and `<filesystem>` are optional.
    Just running `runqemu` is sufficient to launch the image in the shell where the
    build environment is set, as it will automatically pick up the default settings
    from building the environment.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`<machine>`是要使用的机器/架构，例如`qemux86-64`，或任何其他支持的机器。同时，`<zimage>`是内核的路径（例如，`bzImage-qemux86-64.bin`）。最后，`<filesystem>`是`ext4`镜像的路径（例如，`filesystem-qemux86-64.ext4`）或
    NFS 目录。在前面的`runqemu`调用中，`<zimage>`和`<filesystem>`都是可选的。只需运行`runqemu`，即可在已设置构建环境的
    shell 中启动镜像，因为它会自动从构建环境中获取默认设置。
- en: 'So, for example, if we run `runqemu qemux86-64 core-image-full-cmdline`, we
    can see something similar to that shown in the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，例如，如果我们运行`runqemu qemux86-64 core-image-full-cmdline`，我们可以看到类似以下截图的内容：
- en: '![Figure 2.5 – The QEMU screen during the Linux kernel boot](img/Figure_2.5_B19361.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.5 – Linux 内核启动时的 QEMU 屏幕](img/Figure_2.5_B19361.jpg)'
- en: Figure 2.5 – The QEMU screen during the Linux kernel boot
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – Linux 内核启动时的 QEMU 屏幕
- en: 'After finishing booting Linux, you will see a login prompt, as shown in *Figure
    2**.6*:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 完成 Linux 启动后，您将看到一个登录提示，如*图 2.6*所示：
- en: '![Figure 2.6 – The QEMU screen during user login](img/Figure_2.6_B19361.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.6 – 用户登录时的 QEMU 屏幕](img/Figure_2.6_B19361.jpg)'
- en: Figure 2.6 – The QEMU screen during user login
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – 用户登录时的 QEMU 屏幕
- en: We can log in to the `root` account using an empty password. The system behaves
    as a regular machine, even when executed inside the QEMU. The process to deploy
    an image in real hardware varies, depending on the type of storage used, the bootloader,
    and so on. However, the process of generating the image is the same. We explore
    how to build and run an image in real hardware in [*Chapter 15*](B19361_15.xhtml#_idTextAnchor182),
    *Booting Our Custom* *Embedded Linux*.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用空密码登录到`root`账户。即使在 QEMU 内部执行，系统的表现仍然像一台普通机器。将镜像部署到真实硬件的过程有所不同，取决于所使用的存储类型、引导加载程序等。然而，生成镜像的过程是相同的。我们将在[*第
    15 章*](B19361_15.xhtml#_idTextAnchor182)中探讨如何构建并在真实硬件上运行镜像，*启动我们的定制* *嵌入式 Linux*。
- en: Summary
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned the steps needed to set up Poky and get our first
    image built. Then, we ran that image using `runqemu`, which gave us a good overview
    of the available capabilities. In the next chapter, we will introduce Toaster,
    a human-friendly interface for BitBake. We will use it to build an image and customize
    it further.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了设置 Poky 并构建第一个镜像所需的步骤。然后，我们使用`runqemu`运行该镜像，从而对可用功能有了一个很好的概览。在下一章中，我们将介绍
    Toaster，这是一个为 BitBake 提供的人性化接口。我们将使用它来构建镜像并进一步自定义它。
