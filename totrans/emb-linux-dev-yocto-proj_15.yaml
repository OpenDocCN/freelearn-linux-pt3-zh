- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Booting Our Custom Embedded Linux
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It’s time! We are ready to boot our custom-made embedded Linux, as we have
    learned the required concepts and gained enough knowledge about the Yocto Project
    and Poky. In this chapter, we will practice what we have learned so far about
    using Poky with external BSP layers to generate an image for use with the following
    machines and boot it using the SD card:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: BeagleBone Black
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raspberry Pi 4
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VisionFive
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The concepts in this chapter can be applied to every other board as long as
    the vendor provides a BSP layer to use with the Yocto Project.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Discovering the right BSP layer
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 11*](B19361_11.xhtml#_idTextAnchor140), *Exploring External Layers*,
    we learned that the Yocto Project allows for splitting its metadata among different
    layers. It organizes the metadata so we can choose which exact meta layer to add
    to our project.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: The way to find the BSP for a board varies, but generally, we can find it by
    visiting [https://layers.openembedded.org](https://layers.openembedded.org). We
    can search for the machine name and the website finds which layer contains it
    in its database.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing aspects that impact hardware use
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The boards used in this chapter are well maintained and straightforward. However,
    using a different board is a valid choice, but your mileage may vary.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'When we choose a board, the first step is to verify the quality of its software
    support. The low-level components comprise the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Bootloader (such as U-Boot, GRUB, or systemd-boot)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux kernel (with other required drivers such as GPU or WiFi)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User space packages required by hardware acceleration
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Those are critical but are not the only aspects to consider. The integration
    inside the Yocto Project, in a BSP layer form, reduces the friction in the board
    use as it usually provides the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: A reusable disk partition layout (e.g., a WIC `.``wks` template)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ready-to-use machine definitions
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User space packages integrated for hardware acceleration (usable out of the
    box)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The maturity level of software enablement, and the Yocto Project BSP, significantly
    impact the friction involved in using the board and the out-of-the-box experience
    when using Poky for different boards.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Taking a look at widely used BSP layers
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will see a list of widely used BSP layers in this chapter. This should not
    be taken as a complete list or as a definitive one. Still, we want to facilitate
    your search for the required layer in case you have one board of a specific vendor
    next to you. This list is as follows, in alphabetic order:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '*Allwinner*: This has the `meta-allwinner` layer'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*AMD*: This has the `meta-amd` layer'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Intel*: This has the `meta-intel` layer'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*NXP*: This has the `meta-freescale` and `meta-freescale-3rdparty` layers'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Raspberry Pi*: This has the `meta-raspberrypi` layer'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*RISC-V*: This has the `meta-riscv` layer'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Texas Instruments*: This has the `meta-ti` layer'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next sections, we start to work with the example boards.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Using physical hardware
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To ease the exploration of the Yocto Project’s capabilities, it is good to have
    a real board so we can enjoy the experience of booting our customized embedded
    system. For this, we have tried to collect the most widely available boards so
    the chances of you owning one are higher.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'The next sections will cover the steps for the following boards:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '*BeagleBone Black*: BeagleBone Black is community-based, with members worldwide.
    Further information is available at [https://beagleboard.org/black/](https://beagleboard.org/black/).'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Raspberry Pi 4*: The most famous ARM64-based board with the broadest community
    spread worldwide. See more details at [https://www.raspberrypi.org/](https://www.raspberrypi.org/).'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*VisionFive*: The world’s first generation of affordable RISC-V boards designed
    to run Linux. See more details at [https://www.starfivetech.com/en](https://www.starfivetech.com/en).'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All the boards listed are maintained by non-profit organizations based on education
    and mentoring, which makes the community a fertile place to discover the world
    of embedded Linux. The following table summarizes the boards and their main features:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '| **Board version** | **Features** |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
- en: '| BeagleBone Black | TI AM335x (single-core) 512 MB RAM |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
- en: '| Raspberry Pi 4 | Broadcom BCM2711 64bit CPU (quad-core) 1 GB up to 8 GB RAM
    |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
- en: '| VisionFive | U74 Dual-Core 8 GB RAM |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
- en: Table 15.1 – The hardware specification for the covered boards
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: In the next sections, we are going to bake and boot the Yocto Project image
    for each one of the suggested machines. It’s recommended that you only read the
    section for the board that you own. Make sure to consult the board’s documentation
    in order to understand how to prepare the board for the operation.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: BeagleBone Black
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next two sections, we go through the steps for baking and booting an
    image for the *BeagleBone* *Black* board.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Baking for BeagleBone Black
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use this board, we can rely on the `meta-yocto-bsp` layer, which is included
    by default in Poky. The meta layer can be accessed at [https://git.yoctoproject.org/meta-yocto/tree/meta-yocto-bsp?h=kirkstone](https://git.yoctoproject.org/meta-yocto/tree/meta-yocto-bsp?h=kirkstone).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the source structure, please download Poky using the following command
    line:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After completing this, we must create the build directory we use for our builds.
    We can do this using the following command line:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After we have the `build` directory and the BSP layers properly set up, we
    can start the build. Inside the `build` directory, we must call the following
    command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `MACHINE` variable can be changed depending on the board we want to use
    or set in `build/conf/local.conf`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Booting BeagleBone Black
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After the build process is over, the image will be available inside the `build/tmp/deploy/images/beaglebone-yocto/`
    directory. The file we want to use is `core-image-full-cmdline-beaglebone-yocto.wic`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you point to the right device and double-check to not write on your
    hard disk.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'To copy the `core-image-full-cmdline` image to the SD card, we should use the
    `dd` utility, as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`core-image-full-cmdline`镜像复制到SD卡上，我们应该使用`dd`工具，如下所示：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: After copying the content to the SD card, insert it into the SD card slot, connect
    the HDMI cable, and power on the machine. It should boot nicely.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 将内容复制到SD卡后，插入SD卡插槽，连接HDMI电缆，然后开机。系统应该能正常启动。
- en: Note
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The BeagleBone Black boot sequence starts trying to boot from eMMC and only
    tries to boot from the SD card in case the eMMC boot fails. Clicking the **USER**/**BOOT**
    button when powering on will temporarily change the boot order, making sure the
    boot is from the SD card. To further tailor these instructions for your board,
    please refer to the documentation at [http://www.beagleboard.org/black](http://www.beagleboard.org/black).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: BeagleBone Black的启动序列首先会尝试从eMMC启动，只有当eMMC启动失败时才会尝试从SD卡启动。开机时按住**USER**/**BOOT**按钮会暂时改变启动顺序，确保从SD卡启动。要进一步为您的板卡定制这些说明，请参考[http://www.beagleboard.org/black](http://www.beagleboard.org/black)的文档。
- en: Raspberry Pi 4
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Raspberry Pi 4
- en: In the next two sections, we go through the steps for baking and booting an
    image for the *Raspberry Pi* *4* board.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的两个章节中，我们将介绍为*Raspberry Pi* *4*板卡制作和启动镜像的步骤。
- en: Baking for Raspberry Pi 4
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为Raspberry Pi 4制作镜像
- en: To add this board support to our project, we need to include the `meta-raspberrypi`
    meta layer, which is the BSP layer with support for the Raspberry Pi boards, including
    the Raspberry Pi 4, but not limited to it. The meta layer can be accessed at [http://git.yoctoproject.org/cgit.cgi/meta-raspberrypi/log/?h=kirkstone](http://git.yoctoproject.org/cgit.cgi/meta-raspberrypi/log/?h=kirkstone).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此板卡支持添加到我们的项目中，我们需要包含`meta-raspberrypi`元层，它是支持Raspberry Pi板卡（包括Raspberry Pi
    4，但不限于它）的BSP层。可以通过[http://git.yoctoproject.org/cgit.cgi/meta-raspberrypi/log/?h=kirkstone](http://git.yoctoproject.org/cgit.cgi/meta-raspberrypi/log/?h=kirkstone)访问该元层。
- en: 'To create the source structure, please download Poky using the following command
    line:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建源结构，请使用以下命令行下载Poky：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After completing this, we must create the `build` directory we use for our
    builds and add the BSP layer. We can do this using the following command lines:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此步骤后，我们需要创建一个用于构建的`build`目录并添加BSP层。可以使用以下命令行进行操作：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After we have the `build` directory and the BSP layers properly set up, we
    can start the build. Inside the `build` directory, we must call the following
    command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们正确设置了`build`目录和BSP层后，可以开始构建。在`build`目录下，我们必须运行以下命令：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `MACHINE` variable can be changed depending on the board we want to use
    or set in `build/conf/local.conf`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`MACHINE`变量可以根据我们想要使用的板卡进行修改，或者在`build/conf/local.conf`中设置。'
- en: Booting Raspberry Pi 4
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动Raspberry Pi 4
- en: After the build process is over, the image will be available inside the `build/tmp/deploy/images/raspberrypi4/`
    directory. The file we want to use is `core-image-full-cmdline-raspberrypi4.wic.bz2`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建过程完成后，镜像文件将位于`build/tmp/deploy/images/raspberrypi4/`目录下。我们需要使用的文件是`core-image-full-cmdline-raspberrypi4.wic.bz2`。
- en: Make sure you point to the right device and double-check to not write on your
    hard disk.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 确保指向正确的设备，并仔细检查不要写入硬盘。
- en: 'To copy the `core-image-full-cmdline` image to the SD card, we should use the
    `dd` utility, as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`core-image-full-cmdline`镜像复制到SD卡上，我们应该使用`dd`工具，如下所示：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: After copying the content to the SD card, insert it into the SD card slot, connect
    the HDMI cable, and power on the machine. It should boot nicely.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 将内容复制到SD卡后，插入SD卡插槽，连接HDMI电缆，然后开机。系统应该能正常启动。
- en: VisionFive
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VisionFive
- en: In the next two sections, we go through the steps for baking and booting an
    image for the *VisionFive* board.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的两个章节中，我们将介绍为*VisionFive*板卡制作和启动镜像的步骤。
- en: Baking for VisionFive
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为VisionFive制作镜像
- en: To add this board support to our project, we need to include the `meta-riscv`
    meta layer, which is the BSP layer with support for RISC-V-based boards, including
    the VisionFive, but not limited to it. The meta layer can be accessed at [https://github.com/riscv/meta-riscv/tree/kirkstone](https://github.com/riscv/meta-riscv/tree/kirkstone).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此板卡支持添加到我们的项目中，我们需要包含`meta-riscv`元层，它是支持基于RISC-V的板卡（包括VisionFive，但不限于它）的BSP层。可以通过[https://github.com/riscv/meta-riscv/tree/kirkstone](https://github.com/riscv/meta-riscv/tree/kirkstone)访问该元层。
- en: 'To create the source structure, please download Poky using the following command
    line:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建源结构，请使用以下命令行下载Poky：
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After completing this, we must create the `build` directory we’ll use for our
    builds and add the BSP layer. We can do this using the following command lines:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此步骤后，我们必须创建一个用于构建的 `build` 目录，并添加 BSP 层。我们可以使用以下命令行来实现：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After we have the `build` directory and the BSP layers properly set up, we
    can start the build. Inside the `build` directory, we must call the following
    command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们正确设置了 `build` 目录和 BSP 层后，就可以开始构建了。在 `build` 目录中，我们必须调用以下命令：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `MACHINE` variable can be changed depending on the board we want to use
    or set in `build/conf/local.conf`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`MACHINE` 变量可以根据我们要使用的板卡进行更改，或者在 `build/conf/local.conf` 中设置。'
- en: Booting VisionFive
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动 VisionFive
- en: After the build process is over, the image will be available inside the `build/tmp/deploy/images/visionfive/`
    directory. The file we want to use is `core-image-full-cmdline-visionfive.wic.gz`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 构建过程结束后，镜像将出现在 `build/tmp/deploy/images/visionfive/` 目录中。我们要使用的文件是 `core-image-full-cmdline-visionfive.wic.gz`。
- en: Make sure you point to the right device and double-check to not write on your
    hard disk.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 确保指向正确的设备，并仔细检查不要写入你的硬盘。
- en: 'To copy the `core-image-full-cmdline` image to the SD card, we should use the
    `dd` utility, as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 `core-image-full-cmdline` 镜像复制到 SD 卡，我们应该使用 `dd` 工具，命令如下：
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: After copying the content to the SD card, insert it into the SD card slot, connect
    the HDMI cable, and power on the machine.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 将内容复制到 SD 卡后，插入 SD 卡槽，连接 HDMI 电缆，并开机启动。
- en: Note
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'VisionFive doesn’t have a default boot target and requires manual intervention
    to boot. Please use the following commands inside the U-Boot prompt using a serial
    console:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: VisionFive 没有默认的启动目标，需要手动干预才能启动。请使用以下命令在 U-Boot 提示符下通过串口控制台进行操作：
- en: '**setenv bootcmd “****run distro_bootcmd”**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**setenv bootcmd “****run distro_bootcmd”**'
- en: '**saveenv**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**saveenv**'
- en: '**boot**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**启动**'
- en: The command `saveenv` is optional to make the new configuration persist so that
    it can work out of the box after reboot.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 命令 `saveenv` 是可选的，用于使新配置持久化，以便在重启后能够直接使用。
- en: See how to get the serial console in the *Quick Start* *Guide* ([https://doc-en.rvspace.org/VisionFive/Quick_Start_Guide/](https://doc-en.rvspace.org/VisionFive/Quick_Start_Guide/)).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 查看如何获取串口控制台，请参阅 *快速入门* *指南* ([https://doc-en.rvspace.org/VisionFive/Quick_Start_Guide/](https://doc-en.rvspace.org/VisionFive/Quick_Start_Guide/))。
- en: Taking the next steps
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 采取下一步行动
- en: 'Phew! We got it done! Now you should know the Yocto Project build system basics
    and be capable of extending your other areas of knowledge. We tried covering the
    most common daily tasks using the Yocto Project. There are a few things you might
    want to practice:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 呼！我们完成了！现在你应该掌握 Yocto 项目构建系统的基本知识，并能够扩展你在其他领域的知识。我们尝试涵盖了使用 Yocto 项目的最常见日常任务。有一些事情你可能需要练习：
- en: Creating `bbappend` files to apply patches or make other changes to a recipe
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 `bbappend` 文件以应用补丁或对配方进行其他更改
- en: Making your custom images
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你的自定义镜像
- en: Changing the Linux kernel configuration file (`defconfig`)
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改 Linux 内核配置文件（`defconfig`）
- en: Changing the BusyBox configuration and including the configuration fragments
    to add or remove a feature in a layer
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改 BusyBox 配置并包括配置片段以在层中添加或删除功能
- en: Adding a new recipe for a package
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为软件包添加新的配方
- en: Making a product layer with your product-specific machines, recipes, and images
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个包含特定产品机器、配方和镜像的产品层
- en: Remember, the source code is the ultimate knowledge source, so use it.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，源代码是最终的知识来源，所以要善用它。
- en: When looking for how to do something, finding a similar recipe saves you time
    testing different approaches to solve the problem.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在查找如何做某件事时，找到一个相似的配方可以节省你测试不同方法解决问题的时间。
- en: Eventually, you’ll likely see yourself in a position to fix or enhance something
    on OpenEmbedded Core, a meta layer, or in a BSP. So, don’t be afraid – send the
    patches and take the feedback and requests for changes as an opportunity to learn
    and improve your way of solving a problem.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，你很可能会发现自己处于修复或增强 OpenEmbedded Core、一个 meta 层或一个 BSP 的位置。所以，不要害怕——提交补丁，并将反馈和修改请求视为学习和改进解决问题方式的机会。
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We learned how to discover the BSP for a board we want to use in our project.
    We consolidated our Yocto Project knowledge by adding external BSP layers and
    using these in real boards with a generated image. We also consolidated the necessary
    background information to learn about any other aspect of the Yocto Project you
    may need.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何发现我们项目中需要使用的板卡的BSP。通过添加外部BSP层并在实际板卡上使用这些层生成镜像，我们巩固了Yocto项目的知识。我们还巩固了学习Yocto项目其他相关方面所需的背景信息。
- en: In the next chapter, we will explore how using QEMU speeds up product development
    by enabling us to not rely on hardware for every development cycle.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何通过使用QEMU来加速产品开发，避免每次开发周期都依赖硬件。
