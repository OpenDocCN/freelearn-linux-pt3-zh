- en: Patching with Katello
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Katello 进行补丁管理
- en: In [Chapter 8](56007c92-a39b-4e56-9b01-a137eab2369d.xhtml), *Enterprise Repository
    Management with Pulp*, we explored the Pulp software package and how it lends
    itself to automated, repeatable, controllable patching in an enterprise setting.
    In this chapter, we will build on this by taking a look at a product called **Katello**,
    which is complementary to Pulp and lends itself to not just patching but complete
    infrastructure management.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](56007c92-a39b-4e56-9b01-a137eab2369d.xhtml)，*使用 Pulp 进行企业级仓库管理*中，我们探讨了
    Pulp 软件包及其如何用于企业环境中的自动化、可重复、可控的补丁管理。本章将基于此，介绍一个名为 **Katello** 的产品，它是 Pulp 的补充，不仅适用于补丁管理，还能进行完整的基础设施管理。
- en: Katello is a GUI-driven tool that provides advanced solutions for enterprise
    infrastructure management, and in many ways can be considered to be the successor
    to the venerable Spacewalk product that many are familiar with. We will explore
    why you would choose Katello for this purpose and then proceed with hands-on examples
    of how to build a Katello server and perform patching.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Katello 是一个以 GUI 驱动的工具，为企业基础设施管理提供先进的解决方案，在许多方面可以看作是许多人熟悉的经典产品 Spacewalk 的继任者。我们将探讨为什么选择
    Katello 来进行此项工作，然后通过动手示例展示如何构建 Katello 服务器并进行补丁管理。
- en: 'The following topics will specifically be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将具体讨论以下主题：
- en: Introduction to Katello
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Katello 介绍
- en: Installing a Katello server
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Katello 服务器
- en: Patching with Katello
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Katello 进行补丁管理
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The minimum requirements for completing the hands-on exercises in this chapter
    are a single CentOS 7 server with around 80 GB of disk space allocated, 2 CPU
    cores (virtual or physical), and 8 GB of memory. Although we will only look at
    a subset of the Katello features in this chapter, it should be noted that Foreman
    in particular (which is installed under Katello) is capable of acting as a DHCP
    server, DNS server, and PXE boot host and, as such, if configured incorrectly
    could cause issues if deployed on a production network.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章实践练习的最低要求是一台 CentOS 7 服务器，至少分配 80 GB 硬盘空间，2 个 CPU 核心（虚拟或物理），以及 8 GB 内存。虽然本章仅会查看
    Katello 功能的子集，但需要注意，特别是 Foreman（在 Katello 下安装）能够充当 DHCP 服务器、DNS 服务器和 PXE 启动主机，因此如果配置不当，部署到生产网络上可能会造成问题。
- en: For this reason, it is recommended that all exercises are performed in an isolated
    network suitable for testing. Where Ansible code is given, it will have been developed
    and tested in Ansible 2.8\. For testing patching from Katello, you will need a
    CentOS 7 virtual machine.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，建议所有练习在适合测试的隔离网络中进行。给出的 Ansible 代码已经在 Ansible 2.8 中开发并测试过。要进行来自 Katello 的补丁测试，您需要一台
    CentOS 7 虚拟机。
- en: All example code discussed in this book is available from GitHub at: [https://github.com/PacktPublishing/Hands-On-Enterprise-Automation-on-Linux](https://github.com/PacktPublishing/Hands-On-Enterprise-Automation-on-Linux).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中讨论的所有示例代码都可以从 GitHub 获取：[https://github.com/PacktPublishing/Hands-On-Enterprise-Automation-on-Linux](https://github.com/PacktPublishing/Hands-On-Enterprise-Automation-on-Linux)。
- en: Introduction to Katello
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Katello 介绍
- en: 'Katello is not actually a single product in isolation, but a union of several
    open source infrastructure management products into one cohesive infrastructure
    management solution. Where Pulp is solely focused on the efficient, controllable
    storage of packages (and other important content for infrastructure management),
    Katello brings together the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Katello 并非一个孤立的单一产品，而是多个开源基础设施管理产品的集合，形成一个统一的基础设施管理解决方案。Pulp 专注于有效、可控地存储软件包（以及其他重要的基础设施管理内容），而
    Katello 则将以下功能整合在一起：
- en: '**Foreman**: This is an open source product designed to handle the provisioning
    and configuration of both physical and virtual servers. Foreman includes a rich
    web-based GUI, a RESTful API, and a CLI tool called **Hammer**, providing a rich
    and varied means of management. It also provides integration with several automation
    tools, originally just Puppet but more recently also Ansible.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Foreman**：这是一个开源产品，旨在处理物理和虚拟服务器的配置和配置管理。Foreman 包括一个丰富的基于 Web 的 GUI，一个 RESTful
    API，以及一个名为 **Hammer** 的 CLI 工具，提供了多种多样的管理方式。它还与多个自动化工具进行集成，最初是 Puppet，最近也支持 Ansible。'
- en: '**Katello**: Katello is actually a plugin for Foreman and provides additional
    features such as the rich version control of content (more so than Pulp alone)
    and subscription management.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Katello**：Katello 实际上是 Foreman 的一个插件，提供了额外的功能，如内容的丰富版本控制（比单独使用 Pulp 更强大）和订阅管理。'
- en: '**Candlepin**: Provides software subscription management, especially integration
    with environments such as the **Red Hat Subscription Management** (**RHSM**) model.
    Although it is possible to mirror Red Hat repositories in Pulp, the process is
    cumbersome, and you risk violating your license terms because there is no visibility
    on the number of systems you are managing or their relationship to your Red Hat
    subscriptions.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Candlepin**：提供软件订阅管理，特别是与**Red Hat 订阅管理**（**RHSM**）模型的集成。虽然在Pulp中镜像Red Hat的仓库是可行的，但这一过程繁琐，而且由于无法查看你所管理的系统数量或它们与Red
    Hat订阅的关系，存在违反许可条款的风险。'
- en: '**Pulp**: This is the very same Pulp software that we explored in the last
    chapter, now integrated into one fully featured project.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pulp**：这就是我们在上一章中探讨的Pulp软件，现在已整合为一个功能齐全的项目。'
- en: '**Capsule**: A proxy service for distributing content and controlling updates
    across a geographically diverse infrastructure while maintaining a single management
    console.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Capsule**：一种代理服务，用于在地理位置分散的基础设施中分发内容并控制更新，同时保持单一管理控制台。'
- en: The use of Katello hence provides several advantages over using Pulp alone,
    and even if you use it just for patch management (as we will explore in this chapter,
    in the section entitled *Patching with Katello*), the rich web GUI, CLI, and API
    lend itself to integration with enterprise systems. Beyond this though, Katello
    (and more specifically Foreman, which underpins it) provides many other benefits
    such as being able to dynamically PXE boot servers and control both container
    and virtualization systems, and it can even act as both the DNS and DHCP servers
    for your network. Indeed, it is fair to say that the combination of Katello/Foreman
    is designed to sit at the heart of your network, although it will only perform
    the functions you ask of it, so those with existing DNS and DHCP infrastructures
    need not fear.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用Katello相较于仅使用Pulp有几个优势，即使你仅仅将其用于补丁管理（如我们将在本章中“*使用Katello进行补丁管理*”部分探讨的），其丰富的Web
    GUI、CLI和API使得它能够与企业系统集成。除此之外，Katello（更具体地说，支持它的Foreman）还提供了许多其他好处，例如能够动态地通过PXE启动服务器，并控制容器和虚拟化系统，甚至可以作为你网络的DNS和DHCP服务器。实际上，可以说Katello/Foreman的组合被设计为坐落在你网络的核心，尽管它只会执行你要求的功能，因此已有DNS和DHCP基础设施的用户无需担心。
- en: It is worth mentioning that Katello also features tight integration with the
    Puppet automation tool. The original project was sponsored by Red Hat, and before
    their acquisition of Ansible, Red Hat and Puppet had a strategic alliance, which
    led to it becoming heavily featured in the Katello project (which is available
    commercially as Red Hat Satellite 6). Given the Ansible acquisition, while the
    Puppet integration still remains in Katello, support for integration with Ansible,
    especially through Ansible Tower/AWX, has evolved rapidly and it is entirely up
    to the user which automation tool they wish to use.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，Katello还与Puppet自动化工具紧密集成。最初的项目由Red Hat赞助，并且在他们收购Ansible之前，Red Hat与Puppet有战略联盟，这使得Puppet在Katello项目中占据了重要地位（该项目作为Red
    Hat Satellite 6商业化）。鉴于Ansible的收购，尽管Puppet集成仍然保留在Katello中，但通过Ansible Tower/AWX与Ansible的集成支持发展迅速，用户可以完全根据自己的需求选择使用的自动化工具。
- en: At this stage, the venerable **Spacewalk** software tool deserves an honorable
    mention. Spacewalk is the upstream open source version of Red Hat Satellite 5
    and is still being actively developed and maintained. There is a huge degree of
    overlap between the two systems in terms of high-level functionality; however,
    Katello/Satellite 6 is a complete from-the-ground-up rewrite of the platform and
    so there is no clear upgrade path between the two. Given that Red Hat's contribution
    to the Spacewalk program is likely to decrease when they end-of-life their Satellite
    5 product, our focus in this book will be on Katello.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，值得一提的是久负盛名的**Spacewalk**软件工具。Spacewalk是Red Hat Satellite 5的上游开源版本，仍在积极开发和维护中。在高级功能方面，这两个系统有很大的重叠；然而，Katello/Satellite
    6是对平台的从头重写，因此两者之间没有明确的升级路径。鉴于Red Hat在Spacewalk项目中的贡献可能会减少，尤其是在它们停用Satellite 5产品后，本书将重点关注Katello。
- en: Indeed, it is fair to say that Katello deserves a book of its own, so rich is
    its feature set. Our goal in this chapter is simply to raise awareness of the
    Katello platform and to demonstrate how it lends itself to patching in an enterprise
    environment. Many of the additional features, such as the PXE booting of servers,
    require an understanding of the concepts we have already covered in this book,
    and hence it is hoped that, should you decide upon Katello or Satellite 6 as a
    platform for managing your infrastructure, then you will be able to build on the
    foundation that this book provides and explore additional resources to take you
    further.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，可以公平地说，Katello 配得上一本自己的书，因为它的功能集非常丰富。我们在这一章的目标仅仅是提高对 Katello 平台的认识，并展示它如何在企业环境中进行补丁管理。许多额外的功能，如服务器的
    PXE 启动，需要理解我们在本书中已经涵盖的概念，因此希望如果你决定将 Katello 或 Satellite 6 作为管理基础设施的平台，你能够在本书提供的基础上继续构建，并探索更多的资源，进一步深入。
- en: Let's get started by taking a practical look in the next section at how to install
    a simple standalone Katello server so that we can explore this more fully.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过下一个部分实际看看如何安装一个简单的独立 Katello 服务器，以便我们能够更全面地探索这一点。
- en: Installing a Katello server
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Katello 服务器
- en: This is a hands-on book, so without further ado, let's get started and set up
    our very own Katello server. Alongside the advantages of Katello already discussed,
    another is the packaging of the product. When we set up our Pulp server, there
    were many individual components where we had to make decisions (for example, RabbitMQ
    versus Qpid) and then additional setup to perform (for example, SSL transport
    for MongoDB). Katello has even more *moving parts* than Pulp (if Pulp is considered
    as just a component of the Katello platform), and hence installing it by hand
    would be a vast and complex task.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一本实践书籍，因此不再多说，让我们开始动手设置自己的 Katello 服务器。除了之前讨论过的 Katello 优势外，还有一个优势是产品的打包。当我们设置
    Pulp 服务器时，有很多独立的组件需要我们做出决策（例如，RabbitMQ 与 Qpid），然后还需要执行额外的设置（例如，为 MongoDB 配置 SSL
    传输）。Katello 拥有比 Pulp 更多的*活动组件*（如果将 Pulp 视为 Katello 平台的一个组件的话），因此手动安装它将是一个庞大而复杂的任务。
- en: Thankfully, Katello provides an installation system that can get you up and
    running with just a few commands, which we will explore in the next section of
    this chapter.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Katello 提供了一个安装系统，只需几个命令就能让你开始运行，我们将在本章的下一部分进行探讨。
- en: Preparing to install Katello
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备安装 Katello
- en: 'Katello, as with Pulp, only installs (at the time of writing) on Enterprise
    Linux 7 variants—so here, again, we will use the latest stable release of CentOS
    7\. The requirements for Katello change from time to time as the product grows,
    and it is always worth reviewing the installation documentation for yourself before
    proceeding. At the time of writing, version 3.12 is the latest stable release,
    and the installation documentation can be found here: [https://theforeman.org/plugins/katello/3.12/installation/index.html](https://theforeman.org/plugins/katello/3.12/installation/index.html).
    Now, let''s follow these steps:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Katello 与 Pulp 一样，目前仅支持安装在企业 Linux 7 版本上——因此在这里，我们将使用 CentOS 7 的最新稳定版本。随着产品的不断发展，Katello
    的要求时有变化，因此在继续之前，自己查看安装文档总是值得的。撰写本文时，版本 3.12 是最新的稳定版本，安装文档可以在此找到：[https://theforeman.org/plugins/katello/3.12/installation/index.html](https://theforeman.org/plugins/katello/3.12/installation/index.html)。现在，让我们按照这些步骤进行操作：
- en: As before, our biggest concern is ensuring we have sufficient disk space allocated,
    and just as for a standalone Pulp installation, we must ensure that we have enough
    disk space allocated in `/var/lib/pulp` and `/var/lib/mongodb` for all of the
    Linux distributions we may wish to mirror. Again, as with Pulp, they should be
    separate from the root volume to ensure that if one fills up, the entire server
    does not die.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 和以前一样，我们最大的关注点是确保我们分配了足够的磁盘空间，正如独立的 Pulp 安装一样，我们必须确保在`/var/lib/pulp`和`/var/lib/mongodb`中为所有可能希望镜像的
    Linux 发行版分配足够的磁盘空间。同样，与 Pulp 一样，它们应该与根卷分开，以确保如果一个卷填满，整个服务器不会崩溃。
- en: 'With the filesystem set up, our first step is to install the required repositories
    so that all required packages for installation can be downloaded—this requires
    setting up several external repositories that provide packages not included by
    default with CentOS 7\. The following commands set up the repositories for Katello,
    Foreman, Puppet 6, and the EPEL repository before actually installing the Foreman
    release package tree:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件系统设置好之后，我们的第一步是安装所需的仓库，以便下载所有安装所需的软件包——这需要设置几个外部仓库，这些仓库提供 CentOS 7 默认不包含的软件包。以下命令将为
    Katello、Foreman、Puppet 6 和 EPEL 仓库设置仓库，随后才能安装 Foreman 版本包树：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'From here, it is recommended to bring the base system fully up to date:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这里开始，建议将基础系统完全更新：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The final step before the actual installation is to install the Katello package
    and its dependencies:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实际安装之前的最后一步是安装 Katello 包及其依赖项：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'From here on, all installation tasks are performed with the `foreman-installer` command—there
    are a huge plethora of options that can be specified and, with most of them, if
    you need to change your decision, you can run the installer again with the different
    flags and it will perform the changes without any data loss. To see all possible
    options, run the following command:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这里起，所有安装任务都使用`foreman-installer`命令执行——可以指定大量选项，且对于大多数选项，如果你需要更改决定，可以重新运行安装程序并使用不同的标志，它会在不丢失数据的情况下执行更改。要查看所有可能的选项，运行以下命令：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To build our demo server, the defaults will mostly suffice—however, if you
    explore the options, you will see that many will need to be specified in an enterprise
    setting. For example, SSL certificates can be specified at install time (rather
    than relying on self-signed ones that will be generated otherwise), default secrets
    for underlying transports are set, and so on. It is highly recommended that you
    review the output of the preceding command for yourself when installing in a production
    setting. For now, we will issue the following installation command to initiate
    the installation:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了构建我们的演示服务器，默认设置大多数情况下已经足够——然而，如果你探索选项，你会发现许多选项在企业环境中需要特别指定。例如，可以在安装时指定 SSL
    证书（而不是依赖于默认生成的自签名证书），可以设置底层传输的默认密钥等。强烈建议你在生产环境中安装时，查看前面命令的输出。现在，我们将发出以下安装命令以启动安装：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is probably the simplest possible installation case for a Katello server,
    and it perfectly serves our examples in this book. However, in a `Production`
    environment, I highly recommend that you explore the more advanced installation
    features to ensure that the server will meet your requirements, especially where
    security and availability are concerned. This is left as an exercise for you to
    explore.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是安装 Katello 服务器最简单的情况，并且完全适用于本书中的示例。然而，在`生产`环境中，我强烈建议你探索更高级的安装功能，以确保服务器能够满足你的需求，特别是在安全性和可用性方面。这部分留给你自己探索。
- en: Note that, in this scenario, the installer checks several prerequisites, including
    that the forward and reverse DNS lookups for the Katello server name resolve correctly
    and that the machine has 8 GB of RAM available. The installer will refuse to proceed
    if these prerequisites are not met.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在此场景中，安装程序会检查几个前提条件，包括 Katello 服务器名称的正向和反向 DNS 查找是否能正确解析，以及机器是否有 8 GB 可用内存。如果未满足这些前提条件，安装程序将拒绝继续。
- en: 'The Katello installation should run to completion provided all prerequisites
    have been met, and once completed, you should be presented with a screen similar
    to the one shown in the following screenshot, detailing the login details, as
    well as other pertinent information such as how to set up a proxy server for another
    network if required:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只要满足所有前提条件，Katello 安装应该可以顺利完成，完成后，你应该看到一个类似于以下截图的界面，详细列出了登录信息以及其他相关信息，比如如何为另一个网络设置代理服务器（如果需要的话）：
- en: '![](img/7b0081da-0a67-47b5-83a7-eb956c158af3.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b0081da-0a67-47b5-83a7-eb956c158af3.png)'
- en: 'The only task not completed by the installer is setting up the local firewall
    on the CentOS 7 machine. Luckily, there is a FirewallD service definition included
    with Katello that covers all of the services likely to be required—this derives
    its named from the commercial Red Hat Satellite 6 product and can be enabled by
    running the following commands as root:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装程序唯一未完成的任务是设置 CentOS 7 机器上的本地防火墙。幸运的是，Katello 提供了一个包含防火墙服务定义的服务，该服务覆盖了所有可能需要的服务——它的名称来自商业版
    Red Hat Satellite 6 产品，可以通过以 root 身份运行以下命令来启用：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'With those steps completed, it will be possible to load the web interface of
    Katello and log in with the details shown:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成这些步骤后，就可以加载 Katello 的 Web 界面并使用显示的详细信息登录：
- en: '![](img/2efc4b2c-99c0-4107-ac5f-32be6f56a440.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2efc4b2c-99c0-4107-ac5f-32be6f56a440.png)'
- en: Technically speaking, Katello is a module that sits on top of Foreman and provides
    important features that we will look at later in this chapter—for example, a web
    UI for the Pulp repository management system that is also installed behind the
    scenes. Hence, the Foreman branding of the code stands out, and you will find
    the name comes up frequently. Once logged in, you should be presented with the
    default dashboard page, and we can start to configure some repositories for patching
    purposes, which we will commence in the next section.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术角度讲，Katello 是一个位于 Foreman 之上的模块，提供一些重要功能，我们将在本章稍后查看——例如，它为 Pulp 仓库管理系统提供了一个
    Web 界面，该系统也在后台安装。因此，Foreman 的品牌标识非常突出，您会频繁看到该名称。一旦登录，您应该会看到默认的仪表板页面，我们可以开始配置一些用于补丁管理的仓库，这将在下一节中进行。
- en: Patching with Katello
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Katello 进行补丁管理
- en: As Katello is built around technologies we have already explored, such as Pulp,
    it carries with it the same limitations we have already seen regarding DEB packages.
    For instance, although repositories of DEB packages can be built up easily in
    Katello, and even the appropriate GPG public keys imported, the resulting published
    repositories do not feature an `InRelease` or `Release.gpg` file and so must be
    implicitly trusted by all hosts that use these. Similarly, although there is a
    complete subscription management framework available for RPM-based hosts consisting
    of the `subscription-manager` tool and the Pulp Consumer agent, again, no such
    equivalent exists for DEB hosts and so these must be configured manually.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Katello 构建在我们已经探索过的技术之上，例如 Pulp，它带有与我们已知的 DEB 包相关的相同限制。例如，尽管可以在 Katello 中轻松构建
    DEB 包的仓库，甚至可以导入适当的 GPG 公钥，但最终发布的仓库不包含 `InRelease` 或 `Release.gpg` 文件，因此必须由所有使用这些仓库的主机隐式信任。类似地，尽管为基于
    RPM 的主机提供了完整的订阅管理框架，包括 `subscription-manager` 工具和 Pulp Consumer 代理，但对于 DEB 主机而言，仍然没有类似的工具，因此这些主机必须手动配置。
- en: Although it would be entirely possible to configure RPM-based hosts to use the
    built-in technologies, DEB-based ones would have to be configured with Ansible,
    just as for Pulp, and given the importance of commonality across environments
    in an enterprise, configuring all servers in the same manner rather than using
    two contrasting solutions for two different host types is advised.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然完全可以将基于 RPM 的主机配置为使用内置技术，但基于 DEB 的主机必须像使用 Pulp 一样通过 Ansible 配置，并且考虑到企业中各环境之间的通用性，建议以相同的方式配置所有服务器，而不是为两种不同的主机类型使用两种不同的解决方案。
- en: One of the advantages that Katello brings over Pulp, other than the web user
    interface, is the concept of lifecycle environments. This feature acknowledges
    that most businesses will have separate technology environments for differing
    purposes. For example, your enterprise may well have a `Development` environment
    for developing new software and testing bleeding edge packages, then a `Testing`
    environment for testing releases, and finally, a `Production` environment where
    the most stable builds exist and services for customers and clients are run.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Katello 相对于 Pulp 的优势之一，除了 Web 用户界面外，还在于生命周期环境的概念。这个功能承认大多数企业会为不同的用途设置独立的技术环境。例如，您的企业可能会有一个用于开发新软件和测试前沿包的
    `Development` 环境，然后是一个用于测试发布的 `Testing` 环境，最后是一个包含最稳定构建并运行客户和客户服务的 `Production`
    环境。
- en: Let's now explore some hands-on examples of building up repositories in Katello
    for patching purposes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过一些实际的例子来探索如何在 Katello 中建立用于补丁管理的仓库。
- en: Patching RPM-based systems with Katello
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Katello 对基于 RPM 的系统进行补丁管理
- en: 'Let''s consider the use of Katello to build repositories for our CentOS 7 system
    across multiple lifecycle environments. As Katello supports the key-based validation
    of RPMs, our first task is to install the GPG public key for the RPMs. A copy
    of this is freely downloadable from the CentOS project and can be found on most
    CentOS 7 systems in `/etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑使用 Katello 为我们的 CentOS 7 系统在多个生命周期环境中构建仓库。由于 Katello 支持基于密钥的 RPM 验证，我们的第一步是安装
    RPM 的 GPG 公钥。该公钥可以从 CentOS 项目免费下载，并且可以在大多数 CentOS 7 系统中找到，路径为 `/etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7`：
- en: 'To add this public key to Katello, navigate to Content | Content Credentials from
    the menu bar. Then, click Create Content Credential:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将此公钥添加到 Katello，请从菜单栏导航到 Content | Content Credentials。然后，点击 Create Content
    Credential：
- en: '![](img/297245cc-1c18-46cb-b391-c47095891413.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/297245cc-1c18-46cb-b391-c47095891413.png)'
- en: 'Give the key a suitable name and either upload the key file or copy and paste
    the contents of it into the textbox on the screen. Click Save when done:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给密钥取个合适的名字，并选择上传密钥文件或将其内容复制粘贴到屏幕上的文本框中。完成后点击 Save：
- en: '![](img/a08c3782-45cf-4c7a-976c-9fb87a8dd655.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a08c3782-45cf-4c7a-976c-9fb87a8dd655.png)'
- en: 'Next, we will create a product—in Katello, a product is a logical grouping
    of repositories, and this is incredibly useful for creating manageable scalable
    configurations. For our example here, we will only mirror the CentOS 7 OS repository,
    but when you start mirroring the updates and any other related repositories, it
    would make sense to group these together under a single product. Navigate to Content
    | Products from the menu bar, and then click on the Create Product button:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个 product——在 Katello 中，product 是仓库的逻辑分组，这对于创建可管理的可扩展配置非常有用。对于我们的示例，我们只会镜像
    CentOS 7 OS 仓库，但当你开始镜像更新和任何其他相关仓库时，将它们放在同一个产品下是有意义的。从菜单栏导航到 Content | Products，点击 Create
    Product 按钮：
- en: '![](img/35a8669c-fb85-4020-a09d-a1c2e687ed71.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35a8669c-fb85-4020-a09d-a1c2e687ed71.png)'
- en: 'Now, define the high-level product definition—for a simple CentOS 7 repository
    mirror, we simply need to create Name and Label and associate the GPG key we uploaded
    previously. The various SSL options are for upstream repositories that feature
    two-way SSL validation. Note also that all products can be synced according to
    a Sync Plan (essentially a schedule)—however, for this example, we will simply
    perform a manual sync. The screen should look something like the following screenshot
    when completed:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，定义高级产品定义—对于一个简单的 CentOS 7 仓库镜像，我们只需创建 Name 和 Label 并关联之前上传的 GPG 密钥。各种 SSL
    选项适用于具有双向 SSL 验证的上游仓库。还需注意，所有 products 都可以根据 Sync Plan （本质上是一个计划）进行同步—然而，在本示例中，我们将仅执行手动同步。完成后，屏幕应如下图所示：
- en: '![](img/26931f94-8f42-41be-9c41-d5328fbe124c.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/26931f94-8f42-41be-9c41-d5328fbe124c.png)'
- en: 'With the high-level product definition completed, we can now create our CentOS
    7 repository under it by clicking on the New Repository button:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成高级 product 定义后，我们现在可以通过点击 New Repository 按钮在其下创建我们的 CentOS 7 仓库：
- en: '![](img/53cbc588-6d07-44f0-a1ec-ff3ce5e81332.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/53cbc588-6d07-44f0-a1ec-ff3ce5e81332.png)'
- en: 'Complete the repository details on the screen provided. Set the Type field
    as `yum` and enter the URL of the upstream repository in the appropriate field
    (this is the same as the `--feed` parameter when using Pulp from the command line):'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提供的屏幕上填写仓库详情。将 Type 字段设置为 `yum`，并在相应字段中输入上游仓库的 URL（这与使用命令行中的 Pulp 时的 `--feed` 参数相同）：
- en: '![](img/6b7704b4-a791-4ba9-871e-4539265262f9.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b7704b4-a791-4ba9-871e-4539265262f9.png)'
- en: 'Scrolling down the same screen, ensure that Publish via HTTP is ticked and
    associate the GPG uploaded previously, as shown in the following screenshot:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动同一屏幕，确保选中“通过 HTTP 发布”并关联之前上传的 GPG 密钥，如下图所示：
- en: '![](img/ea8ad6ad-0fce-4b3e-a56f-ddf7fa4a9ff8.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea8ad6ad-0fce-4b3e-a56f-ddf7fa4a9ff8.png)'
- en: 'For our example, we''ll immediately kick off a sync of this repository by putting
    a tick against it in the table of repositories, and then clicking on the Sync
    Now button, as shown in the following screenshot:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将立即通过在仓库表格中对其打勾并点击 Sync Now 按钮来启动此仓库的同步，如下图所示：
- en: '![](img/1006c286-cd1b-469c-af25-1546fbaa4dff.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1006c286-cd1b-469c-af25-1546fbaa4dff.png)'
- en: 'The synchronization begins in the background immediately—you can always check
    on its progress (and kick off further manual synchronizations) by navigating to
    the Content | Sync Status page:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同步会立即在后台开始—你可以随时通过导航到 Content | Sync Status 页面来查看其进度（并启动进一步的手动同步）：
- en: '![](img/dcefb4f6-f7b2-4545-9218-c0e984eebb2c.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dcefb4f6-f7b2-4545-9218-c0e984eebb2c.png)'
- en: While the sync process completes, let's go and create some lifecycle environments.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同步过程完成的同时，我们来创建一些生命周期环境。
- en: Note that while you can have discrete products and separate repositories within
    them, lifecycle environments are global and apply to everything. In an enterprise
    context, this makes sense, as you would most likely still have a `Development`,
    `Test`, and `Production` environment regardless of which underlying technologies
    you use.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，尽管你可以在不同的产品中有独立的仓库，但生命周期环境是全局的，并适用于所有内容。在企业环境中，这很有意义，因为无论使用何种底层技术，你通常都会有`开发`、`测试`和`生产`环境。
- en: 'From the menu bar, navigate to Content | Lifecycle Environments Paths, and
    then click the Create Environment Path button:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 从菜单栏中，导航至“内容 | 生命周期环境路径”，然后点击“创建环境路径”按钮：
- en: '![](img/bd7a5ecb-7368-4d01-9e73-ecfe76fa169d.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd7a5ecb-7368-4d01-9e73-ecfe76fa169d.png)'
- en: 'Create an initial environment called `Development` by following the instructions
    onscreen. You should be presented with a screen such as the one shown in the following
    screenshot:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照屏幕上的指示创建一个名为`开发`的初始环境。你应该看到类似下图所示的界面：
- en: '![](img/d6ce37b6-e0e3-4a2f-af0d-07e59c850993.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d6ce37b6-e0e3-4a2f-af0d-07e59c850993.png)'
- en: 'Now, we''ll add `Testing` and `Production` environments so that our example
    enterprise has a logical flow through these three environments. Click the Add
    New Environment button, and then add each in turn, ensuring they have the correct Prior
    Environment set to maintain the correct sequence. The following screenshot shows
    an example of creating the `Production` environment as the next step from the
    `Testing` one:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将添加`测试`和`生产`环境，使得我们的示例企业能够在这三个环境之间有一个逻辑的流转。点击“添加新环境”按钮，然后依次添加每个环境，确保它们设置了正确的“前置环境”，以保持正确的顺序。下图展示了从`测试`环境创建`生产`环境的一个示例：
- en: '![](img/df0d5feb-c081-4af8-8c3b-b6ff16887dfe.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/df0d5feb-c081-4af8-8c3b-b6ff16887dfe.png)'
- en: 'The final configuration should look like the following example screenshot:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终配置应该类似下图所示的示例：
- en: '![](img/d85fad6a-be3a-4d09-8015-c6600e48d68b.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d85fad6a-be3a-4d09-8015-c6600e48d68b.png)'
- en: Once our sync process has completed and we have created our environments, we
    can proceed to the final part of our RPM repository setup—`Content Views`. In
    Katello, a content view is a user-defined amalgamation of the various content
    forms that can be ingested, version-controlled, and distributed to a given environment.
    This is best explained through a practical example.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的同步过程完成并且环境创建成功，我们就可以进入RPM仓库设置的最后部分——`内容视图`。在Katello中，内容视图是用户定义的多种内容形式的组合，这些内容可以被摄取、版本控制并分发到指定环境中。通过一个实际的例子来解释最为清晰。
- en: When we used Pulp alone, we created a repository called `centos7-07aug19`. When
    we wanted to test out an update released a day later, we then created a second
    repository called `centos7-08aug19`. Although this works, and we demonstrated
    how Pulp deduplicates packages and saves on disk space while neatly publishing
    apparently separate repositories, you can quickly see how this mechanism for content
    management could become unwieldy, especially at enterprise scale, with numerous
    environments and some months (or years) worth of snapshots to manage.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们单独使用Pulp时，我们创建了一个名为`centos7-07aug19`的仓库。当我们想测试一个稍后发布的更新时，我们创建了一个名为`centos7-08aug19`的第二个仓库。虽然这样做是可行的，并且我们演示了Pulp如何去重包并节省磁盘空间，同时整洁地发布看似独立的仓库，但很快你就会看到这种内容管理机制如何在企业规模下变得笨拙，尤其是当有多个环境和管理几个月（或几年）快照时。
- en: 'This is where `Content Views` come to the rescue. Although we have mirrored
    the CentOS 7 OS repository here, suppose we had mirrored the updates one. With `Content
    Views`, we don''t need to create a new product or repository to test out updates.
    Instead, the workflow is, at a high level, as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这时，`内容视图`派上用场了。尽管我们已经在这里镜像了CentOS 7的操作系统仓库，假设我们镜像的是更新仓库。通过使用`内容视图`，我们不需要为测试更新而创建新的产品或仓库。相反，整体工作流程大致如下：
- en: Create a product and a corresponding repository and perform sync (for example,
    on August 7, 2019).
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个产品和相应的仓库并执行同步（例如，2019年8月7日）。
- en: Create a content view containing the repository created in the previous step.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含前一步骤中创建的仓库的内容视图。
- en: Publish the content view on August 7, 2019—this creates a version-numbered snapshot
    of this repository on this date (for example, version `1.0`).
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在2019年8月7日发布内容视图——这会在该日期为此仓库创建一个版本编号的快照（例如，版本`1.0`）。
- en: Promote the content view to the `Development` environment. Perform testing,
    and when validated, promote it to testing. Repeat the cycle to reach `Production`.
    This can all happen asynchronously to the next steps.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将内容视图推广到`Development`环境。进行测试，验证后，将其推广到测试环境。重复此循环，直到达到`Production`环境。所有这些操作都可以异步进行，不影响后续步骤。
- en: On August 8, perform another sync of the repository created in *step 1* (if
    you have an overnight sync happening automatically through `Sync Plan`, this will
    already be done for you on the morning of the 8th).
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在8月8日，再次同步在*第1步*中创建的仓库（如果你通过`Sync Plan`进行自动同步，这将在8月8日早晨自动完成）。
- en: Publish the content view on August 8, 2019, following the sync. This creates
    a `+1` version of the repository for this date (for example, version 2.0).
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在2019年8月8日发布内容视图，并进行同步。这将为该日期创建一个`+1`版本的仓库（例如，版本2.0）。
- en: Now, at this stage, you have snapshots of the CentOS 7 channel on both August
    7 and 8\. However, all servers will still receive updates from the August 7 channel.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到此为止，你已经拥有了8月7日和8月8日的CentOS 7通道的快照。但所有服务器仍然会接收来自8月7日通道的更新。
- en: Promote the `Development` environment to version 2.0\. The machines in the `Development` environment
    now receive (with no additional configuration required on them) the repository
    snapshot of August 8.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Development`环境提升至版本2.0。此时，`Development`环境中的机器会接收（无需额外配置）8月8日的仓库快照。
- en: The `Testing` and `Production` environments, which were not promoted to this
    version, still receive packages from the August 7 snapshot.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Testing`和`Production`环境没有被提升至此版本，因此仍然接收来自8月7日快照的包。'
- en: In this way, Katello makes managing numerous versions (snapshots) of repositories
    easy across differing environments, with the added bonus that the repository configuration
    on each host always remains the same, removing the need to push new repository
    information through Ansible as we did with Pulp.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，Katello使得在不同环境中管理多个版本（快照）的仓库变得容易，而且每台主机上的仓库配置始终保持不变，从而避免了像我们在Pulp中那样通过Ansible推送新的仓库信息的需求。
- en: 'Let''s step through an example of the preceding process in our demo Katello
    environment:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个示例来逐步了解前述过程，演示我们在Katello环境中的操作：
- en: First of all, create a new content view for the preceding process.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，为前述过程创建一个新的内容视图。
- en: 'Navigate to Content | Content Views and click on the Create New View button:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至Content | Content Views并点击Create New View按钮：
- en: '![](img/b349a091-5436-4619-9626-6d551074b7de.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b349a091-5436-4619-9626-6d551074b7de.png)'
- en: 'For our purposes, the new content view only requires a Name and a Label, such
    as those shown in the following screenshot:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于我们的目的，新的内容视图只需要一个名称和一个标签，如下图所示：
- en: '![](img/40de9c68-22df-4e22-86ad-2779beea0b59.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40de9c68-22df-4e22-86ad-2779beea0b59.png)'
- en: 'Once you have clicked on the Save button, navigate to the Yum Content tab within
    the new content view, and ensure the Add sub-tab is selected. Tick the repositories
    you want to add to the content view (in our simple demo, we only have one CentOS
    7 repository, so select that), and click on the Add Repositories button:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击保存按钮后，导航到新内容视图中的Yum Content标签，并确保选择了Add子标签。勾选你想要添加到内容视图的仓库（在我们的简单演示中，只有一个CentOS
    7仓库，所以选择它），然后点击Add Repositories按钮：
- en: '![](img/f2e6291c-668a-4c9a-bddc-38ecf5fdde73.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f2e6291c-668a-4c9a-bddc-38ecf5fdde73.png)'
- en: 'Now, navigate back to the Versions tab and click the Publish New Version button.
    This creates the hypothetical August 7 version we discussed earlier. Note that `Publish` and `Promote` operations
    take an enormous amount of disk I/O and will be very slow, especially on slow
    mechanically-backed storage arrays. Although there are no published requirements
    for I/O performance for either Katello or Red Hat Satellite 6, they perform best
    on flashbacked storage, or if this is not available, fast mechanical storage that
    is not shared with other devices. The following screenshot shows the Publish New
    Version button being clicked for the CentOS7-CV content view:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回到Versions标签页并点击Publish New Version按钮。这将创建我们之前讨论过的假设8月7日版本。请注意，`Publish`和`Promote`操作会消耗大量磁盘I/O，尤其是在慢速机械硬盘阵列上，速度会非常慢。虽然Katello和Red
    Hat Satellite 6对I/O性能没有发布要求，但它们在闪存存储上表现最佳，或者如果没有这种存储，最好使用快速的机械存储，并且该存储不与其他设备共享。下图展示了点击Publish
    New Version按钮的过程，针对CentOS7-CV内容视图：
- en: '![](img/18d3d821-672a-438b-a2d0-31eb509e2743.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/18d3d821-672a-438b-a2d0-31eb509e2743.png)'
- en: 'The `Publish` operation is asynchronous and you can see it complete on this
    screen, although if you navigate away, it will still complete. You can see that
    it is automatically numbered `Version 1.0`—this numbering is, at the time of writing,
    automatic and you cannot choose your own version numbering. You can, however,
    add notes to each published version, which can be incredibly useful to track which
    version is which and why they were created. This is highly recommended. The following
    screenshot shows the promotion in progress on our Version 1.0 environment:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Publish`操作是异步进行的，你可以在此屏幕上看到它完成，尽管如果你离开，它仍然会继续完成。你会看到它自动编号为`Version 1.0`——这个编号在写作时是自动生成的，你无法选择自己的版本编号。不过，你可以为每个已发布版本添加备注，这对跟踪每个版本的内容以及它们为何被创建非常有用。强烈推荐这样做。下图展示了我们在`Version
    1.0`环境中的提升过程：'
- en: '![](img/a3085c99-6872-424c-85d1-6139960f698f.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a3085c99-6872-424c-85d1-6139960f698f.png)'
- en: Once the `Publish` operation is completed, the Promote button (shown grayed
    out in the preceding screenshot) will become active. You will note that this version
    is automatically published to the `Library` environment—the latest version of
    any content view is always automatically promoted to this environment.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦`Publish`操作完成，Promote按钮（如上图所示为灰显状态）将变为可用。你会注意到，这个版本会自动发布到`Library`环境——任何内容视图的最新版本始终会自动提升到这个环境。
- en: 'To simulate the August 8 snapshot we discussed earlier, let''s perform a second publish of
    this content view. This will produce a `Version 2.0` environment, which can then
    be promoted to the `Development` environment by clicking on the Promote button
    and selecting the required environment. The following screenshot shows our two
    versions, with `Version 1.0` available to only the `Production` environment and `Version
    2.0` available to the `Development` environment (and the built-in `Library` one).
    Note that as we have not promoted the `Testing` environment to either version
    and that no packages are available to machines in the `Testing` environment. You
    must promote it to all environments that require packages—the following screenshot
    shows the two versions we have published and which environments are associated
    with which versions:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了模拟我们之前讨论过的8月8日快照，让我们对这个内容视图执行第二次发布操作。这将生成一个`Version 2.0`环境，然后可以通过点击Promote按钮并选择所需的环境，将其提升到`Development`环境。下图展示了我们两个版本的情况，其中`Version
    1.0`仅对`Production`环境可用，而`Version 2.0`则对`Development`环境（以及内置的`Library`环境）可用。请注意，由于我们没有将`Testing`环境提升到任何版本，因此`Testing`环境中的机器没有任何包可用。你必须将其提升到所有需要包的环境——下图展示了我们发布的两个版本以及与之关联的环境：
- en: '![](img/36dbb6a8-4951-4c14-9e87-23849b449769.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36dbb6a8-4951-4c14-9e87-23849b449769.png)'
- en: 'In the following screenshot, the promotion process is shown for reference—this
    is how you would promote the `Production` environment to `Version 2.0`:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下图中，展示了提升过程供参考——这就是如何将`Production`环境提升到`Version 2.0`：
- en: '![](img/ac078f46-00c1-49c2-baae-24a7300a57c0.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac078f46-00c1-49c2-baae-24a7300a57c0.png)'
- en: The one remaining piece of the puzzle here is to configure the clients to receive
    packages from the Katello server. Here, we will perform a simple manual integration,
    as this method is common to both DEB- and RPM-based packages and hence supports
    a common approach across the enterprise. The process for distributing RPM packages
    from Katello using the `subscription-manager` tool and the Katello agent is well
    documented and is left as an exercise for you.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这里唯一剩下的问题是配置客户端以从Katello服务器接收软件包。在这里，我们将执行一个简单的手动集成，因为这种方法适用于DEB和RPM基础的软件包，因此支持在整个企业中的通用方法。从Katello使用`subscription-manager`工具和Katello代理分发RPM包的过程已经有详细文档说明，留作练习。
- en: The official Katello documentation for Activation Keys is a good place to start: [https://theforeman.org/plugins/katello/3.12/user_guide/activation_keys/index.html](https://theforeman.org/plugins/katello/3.12/user_guide/activation_keys/index.html)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Katello官方文档关于激活密钥的部分是一个很好的起点：[https://theforeman.org/plugins/katello/3.12/user_guide/activation_keys/index.html](https://theforeman.org/plugins/katello/3.12/user_guide/activation_keys/index.html)
- en: 'To make use of the content we have published in this example, machines in the
    `Development` environment would have a repository file with content such as this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了利用我们在本示例中发布的内容，`Development`环境中的机器将有一个包含如下内容的仓库文件：
- en: '[PRE6]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Your base URL will surely vary—at the very least, your Katello hostname will
    be different. RPM-based repositories published and promoted in Katello are generally
    available at the following path:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您的基础URL肯定会有所不同——至少您的Katello主机名会不同。在Katello中发布和推广的RPM基础仓库通常位于以下路径：
- en: '[PRE7]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here, we have the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们有以下内容：
- en: '`KATELLOHOSTNAME`: The hostname of your Katello server (or nearest Capsule/Proxy
    if you are using them)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KATELLOHOSTNAME`：您的Katello服务器的主机名（如果使用了Capsule/Proxy，则为它们的主机名）'
- en: '`ORGNAME`: The name of the Katello organization in which your `Content View` lives—we
    defined ours as `HandsOn` during the installation process'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ORGNAME`：您的`Content View`所在的Katello组织名称——我们在安装过程中将其定义为`HandsOn`'
- en: '`LIFECYCLENAME`: The name of the `Lifecycle Environment`, for example, `Development`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LIFECYCLENAME`：`Lifecycle Environment`的名称，例如`Development`'
- en: '`CONTENTVIEWNAME`: The name you gave your `Content View`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CONTENTVIEWNAME`：您为您的`Content View`指定的名称'
- en: '`PRODUCT`: The name you gave your `Product`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PRODUCT`：您为您的`Product`指定的名称'
- en: '`REPO`: The name you gave to your repository within the `Product`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REPO`：您在`Product`内为仓库指定的名称'
- en: This makes the URLs entirely predictable and easy to deploy to target machines
    using Ansible, just as we did in the previous chapter regarding Pulp. Note that
    accessing the repositories over HTTPS from Katello requires the installation of
    SSL certificates for trust validation, which is beyond the scope of this chapter—instead,
    we will simply make use of plain HTTP.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得URLs完全可预测，并且可以像我们在前一章中讨论Pulp时一样，使用Ansible轻松地部署到目标机器。请注意，通过HTTPS访问Katello的仓库需要安装SSL证书以进行信任验证，这超出了本章的范围——因此，我们将仅使用普通HTTP。
- en: As the lifecycle environment name remains constant, no matter whether we sync,
    publish, or promote an environment, the repository URL, as shown previously, remains
    constant and hence we never have to perform client configuration work even when
    a new package repository snapshot is published. This is a significant advantage
    over Pulp, where we would have to push a new configuration using Ansible every
    time a new version is created.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 由于生命周期环境名称始终保持不变，无论我们是同步、发布还是推广环境，前面所示的仓库URL始终保持不变，因此即使发布了新的包仓库快照，我们也无需执行客户端配置工作。这相较于Pulp有显著的优势，在Pulp中每次创建新版本时，我们都需要通过Ansible推送新的配置。
- en: 'Once the repository configuration has been built as shown previously, you can
    patch your systems in the normal manner. This can be done as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦如前所示构建了仓库配置，您就可以按照正常方式修补您的系统。可以按如下方式进行：
- en: Manually, using a command such as `yum update` on each machine
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动管理，使用类似`yum update`的命令在每台机器上执行
- en: Centrally, using an Ansible playbook
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集中管理，使用Ansible剧本
- en: From the Katello user interface, if the `katello-agent` package is installed
    on your target machines
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`katello-agent`包已安装在目标机器上，可以通过Katello用户界面进行操作。
- en: Given the varied nature of the tools available, we won't go into any greater
    depth in this chapter but will instead leave this as an exercise for you. Experience
    has shown that central deployment using Ansible is the most robust method, but
    you are welcome to experiment and find the path that best suits you.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于可用工具的多样性，本章不会深入讨论，但将其作为练习留给你。经验表明，使用 Ansible 进行集中部署是最稳健的方法，但你可以自由尝试并找到最适合你的方法。
- en: That concludes our brief tour of RPM-based patching with Katello, though it
    is hoped that it has shown you enough to give you a taste of how it might prove
    valuable in your enterprise. In the next section, we will look at the process
    of patching DEB-based systems with Katello.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们简要介绍基于 RPM 的修补过程与 Katello 配合使用的结束，尽管希望它已经向你展示了足够的信息，让你初步了解它在企业中可能的价值。在下一部分中，我们将讨论如何使用
    Katello 修补基于 DEB 的系统。
- en: Patching DEB-based systems with Katello
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Katello 修补基于 DEB 的系统
- en: 'The patching of DEB-based systems such as Ubuntu through Katello is broadly
    similar to the RPM-based process, save for a few changes in the GUI, and the limitations
    around package signing discussed earlier in this chapter, in the section entitled
    *Patching with Katello*. Let''s briefly walk through an example now for Ubuntu
    Server 18.04:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Katello 修补基于 DEB 的系统（如 Ubuntu）与基于 RPM 的过程大致相似，只是 GUI 中有一些变化，以及本章前面讨论的关于包签名的限制，详见
    *使用 Katello 修补* 部分。现在，让我们简要了解一下 Ubuntu Server 18.04 的示例：
- en: 'First, create a new product for our Ubuntu package repositories:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，为我们的 Ubuntu 包仓库创建一个新的产品：
- en: '![](img/8a9cd793-af6b-4363-bde9-1078af389a4a.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8a9cd793-af6b-4363-bde9-1078af389a4a.png)'
- en: It is important to state here that importing the Ubuntu signing public key makes
    no impact on the published repository and so can be specified or ignored as you
    prefer. The resulting repository will not have a signed `Release` file and so
    must be treated as implicitly trusted.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要强调的是，导入 Ubuntu 签名公钥不会对已发布的仓库产生影响，因此可以根据需要指定或忽略。结果仓库将没有签名的 `Release` 文件，因此必须被视为隐式信任。
- en: 'Once the product is saved, create a new repository within it to contain the
    packages—the package mirror creation requires the same parameters we used on the
    command line with Pulp, as shown in the following screenshot:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存该产品后，在其中创建一个新的仓库来包含包——创建包镜像需要与使用 Pulp 命令行时相同的参数，如下图所示：
- en: '![](img/fd1b6d35-33e7-467d-b114-97ceb2bad4cb.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd1b6d35-33e7-467d-b114-97ceb2bad4cb.png)'
- en: Sync the newly created repository as before, and ensure this has completed successfully
    before proceeding to the content view creation.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，同步新创建的仓库，并确保同步成功完成后，再继续进行内容视图的创建。
- en: 'Once it has, create a separate content view for our Ubuntu content—the following
    screenshot shows the content view creation in progress:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦完成，创建一个单独的内容视图用于我们的 Ubuntu 内容——以下截图展示了内容视图创建的过程：
- en: '![](img/0d780fe5-028d-40bf-b06b-f3f149b67d91.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0d780fe5-028d-40bf-b06b-f3f149b67d91.png)'
- en: 'This time, navigate to the Apt Repositories tab and select the appropriate
    Ubuntu repositories—again, in our simple example here, we only have one, and the
    following screenshot shows the process of our lone `Ubuntu 18.04 base` repository
    being added to the Ubuntu1804-CV content view:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这一次，导航到 Apt Repositories 选项卡，并选择适当的 Ubuntu 仓库——同样，在我们简单的示例中，我们只有一个仓库，以下截图显示了我们的唯一
    `Ubuntu 18.04 base` 仓库被添加到 Ubuntu1804-CV 内容视图的过程：
- en: '![](img/2bc88f84-14e4-4c39-bbb2-575f236c5213.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2bc88f84-14e4-4c39-bbb2-575f236c5213.png)'
- en: 'From here, our new content view is published and promoted just as we did for
    the RPM-based one. The resulting repository is accessible again at a predictable
    URL, this time being of the following pattern:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这里开始，我们的新内容视图将像基于 RPM 的视图一样被发布和推广。结果仓库再次可以通过可预测的 URL 访问，此时的 URL 格式如下：
- en: '[PRE8]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As can be seen, this is almost identical to the RPM-based example, save for
    the initial path. An appropriate entry for `/etc/apt/sources.list` to match the content
    view we just created in this example might look like this:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，这与基于 RPM 的示例几乎完全相同，唯一不同的是初始路径。为匹配我们在此示例中刚刚创建的内容视图，`/etc/apt/sources.list`
    可能需要添加如下条目：
- en: '[PRE9]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As before, this URL remains constant regardless of when we might sync, publish,
    or promote this content view and so it need only be deployed once to target systems
    to ensure they can receive packages from the Katello server. Again, you can perform
    this patching manually through the `apt update` and `apt upgrade` commands on
    the end systems, or centrally through Ansible.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 与以往一样，无论何时同步、发布或推广此内容视图，此 URL 都保持不变，因此只需在目标系统上部署一次，以确保它们可以从 Katello 服务器接收软件包。同样，您可以通过在最终系统上手动执行
    `apt update` 和 `apt upgrade` 命令或通过 Ansible 在中心化方式进行补丁操作。
- en: Note that there is no `katello-agent` package for Debian/Ubuntu-based systems
    at the time of writing.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在撰写时，Debian/Ubuntu 系统上没有 `katello-agent` 软件包。
- en: In this chapter, we have barely scratched the surface of all that Katello can
    do, yet this example alone demonstrates how effective a tool it is for enterprise
    patch management. It is highly recommended that you explore this further to establish
    whether it meets your wider infrastructure needs.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们只是初步接触了 Katello 的功能，但仅凭这个例子就展示了它作为企业补丁管理工具的有效性。强烈建议您进一步探索，以确定它是否满足您更广泛的基础设施需求。
- en: It must be stressed that, in this chapter, we have really only scratched the
    surface of what Katello can do—however, it is hoped that the work we have done
    so far gives you enough to make an informed decision on whether to proceed with
    this incredibly powerful and versatile platform as part of your Linux architecture.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 必须强调的是，在本章中，我们实际上只是初步介绍了 Katello 的功能——但希望到目前为止我们所做的工作足以让您对是否继续使用这个极其强大和多功能的平台作为您的
    Linux 架构的一部分做出明智的决定。
- en: Summary
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Katello is actually an amalgamation of several incredibly powerful open source
    infrastructure management tools, including Pulp, which we have already explored.
    It is incredibly adept at patch management in an infrastructure setting, offering
    numerous advantages over a standalone Pulp installation and can handle most build
    and maintenance tasks from a single pane of glass—more than we have had space
    to cover!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，Katello 是几个极其强大的开源基础设施管理工具的融合，包括我们已经探索过的 Pulp。在基础设施环境中进行补丁管理方面，它表现出色，提供了许多优势，远超单独安装
    Pulp，并且可以从单一的界面处理大多数构建和维护任务——比我们现在所能涵盖的还要多！
- en: In this chapter, you gained an understanding of what the Katello project actually
    is and the components that it is comprised of. You then learned how to perform
    a standalone installation of Katello for patching purposes and then how to build
    out repositories suitable for patching both RPM- and DEB-based Linux distributions
    and the basics of integrating these two operating systems with Katello content
    views.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解到 Katello 项目的实际内容以及它所包含的组件。然后，您学习了如何为补丁目的执行独立安装的 Katello，并学习了如何构建适用于补丁的
    RPM 和 DEB Linux 发行版的仓库，以及集成这两个操作系统与 Katello 内容视图的基础知识。
- en: In the next chapter, we will explore how Ansible can be effectively employed
    in an enterprise for user management.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何在企业中有效地使用 Ansible 进行用户管理。
- en: Questions
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Why would you want to use Katello over a product such as Pulp?
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么您要选择 Katello 而不是像 Pulp 这样的产品？
- en: What is a Product in Katello terms?
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Katello 术语中，产品是什么？
- en: What is a content view in Katello?
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Katello 中的内容视图是什么？
- en: Can Foreman (which underpins Katello) assist with the PXE booting of bare-metal
    servers?
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Foreman（Katello 的基础）是否可以协助裸金属服务器进行 PXE 引导？
- en: How would you use lifecycle environments in Katello?
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您如何在 Katello 中使用生命周期环境？
- en: What is the difference between the `Publish` and `Promote` operations on a content
    view?
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在内容视图上执行 `Publish` 和 `Promote` 操作之间有什么区别？
- en: When would you want to perform a `Promote` operation on a previously published
    content view?
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么时候您会想要在先前发布的内容视图上执行 `Promote` 操作？
- en: Further reading
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: For a greater understanding of Katello, please refer to the official Red Hat
    Satellite 6 documentation as this is the commercial version of Katello and all
    of the documentation is usually written for this platform—however, the features
    and menu structure are almost identical ([https://access.redhat.com/documentation/en-us/red_hat_satellite/](https://access.redhat.com/documentation/en-us/red_hat_satellite/)).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要更深入了解 Katello，请参阅官方的 Red Hat Satellite 6 文档，因为这是 Katello 的商业版本，所有文档通常都是为此平台编写的——但功能和菜单结构几乎完全相同（[https://access.redhat.com/documentation/en-us/red_hat_satellite/](https://access.redhat.com/documentation/en-us/red_hat_satellite/)）。
