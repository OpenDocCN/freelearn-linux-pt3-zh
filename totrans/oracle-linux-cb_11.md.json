["```\n$ sudo dnf module install container-tools\n```", "```\n    $ sudo dnf remove -y docker-ce docker-ce-cli containerd.io docker-compose-plugin\n    ```", "```\n    docker group, you may go ahead and delete that group because it is no longer needed:\n\n    ```", "```\n\n    ```", "```\nError response from daemon: rootlessport cannot expose privileged port 80, you can add 'net.ipv4.ip_unprivileged_port_start=80' to /etc/sysctl.conf (currently 1024), or choose a larger port number (>= 1024): listen tcp 0.0.0.0:80: bind: permission denied\n```", "```\nsudo sysctl net.ipv4.ip_unprivileged_port_start=80\n```", "```\n$ podman pull docker.io/pandoc/core\n```", "```\n$ podman image inspect pandoc/core | jq -r '.[].Config.Entrypoint[0]'\n```", "```\n$ podman image inspect pandoc/core | podman run -i --rm stedolan/jq -r '.[].Config.Entrypoint[]'\n```", "```\n$ podman image inspect node | jq -r '.[].Config.Entrypoint[]'\n```", "```\n$ podman run --rm --entrypoint=/bin/bash node -c 'cat docker-entrypoint.sh'\n```", "```\ncat: docker-entrypoint.sh: No such file or directory\n```", "```\n$ podman run --rm --entrypoint=/bin/bash node -c 'cat $(which docker-entrypoint.sh)'\n```", "```\n$ podman image inspect pandoc/core | jq -r '.[].Config.WorkingDir'\n```", "```\n$ podman image inspect pandoc/core | podman run -i --rm stedolan/jq -r '.[].Config.WorkingDir'\n```", "```\n$ podman run --rm pandoc/core --help\n```", "```\n$ podman run --rm -v $(pwd)/:/data pandoc/core -s input.md -o output.docx\n```", "```\n$ podman run --rm ghcr.io/linuxserver/ffmpeg --help\n```", "```\n$ podman run --rm -it -v $(pwd):/config \\ \nghcr.io/linuxserver/ffmpeg \\\n-ss 00:00:30 -t 5 -i /config/input.mkv \\\n-vcodec libx265 -crf 30 /config/output.mp4\n```", "```\n$ podman image inspect node | podman run -i --rm stedolan/jq -r '.[].Config.WorkingDir'\n```", "```\n$ podman run --rm -v $(pwd):/app --entrypoint bash node -c 'cd /app && npm run build'\n```", "```\n$ podman run --rm -v $(pwd):/app --workdir /app --entrypoint npm node run build\n```", "```\n$ podman run --rm --name ol8cookbook -p 80:80 -v ${pwd}/build:/usr/share/nginx/html:ro -d nginx\n```", "```\nError: rootlessport cannot expose privileged port 80, you can add 'net.ipv4.ip_unprivileged_port_start=80' to /etc/sysctl.conf (currently 1024), or choose a larger port number (>= 1024): listen tcp 0.0.0.0:80: bind: permission denied\n```", "```\n$ sudo sysctl net.ipv4.ip_unprivileged_port_start=80\n```", "```\n    sudo sed -i 's/network_backend = \"cni\"/network_backend = \"netavark\"/g' /usr/share/containers/containers.conf\n    sudo podman info | grep networkBackend\n    ```", "```\n    sudo curl -SL https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose\n    podman-docker package to ensure Podman is called anytime a reference to Docker is being made:\n\n    ```", "```\n\n    ```", "```\n        systemctl --user enable --now podman.socket\n        export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/podman/podman.sock\n        echo 'export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/podman/podman.sock' >> ~/.bash_profile\n        ```", "```\n        sudo systemctl enable --now podman.socket\n        sudo export DOCKER_HOST=unix:///run/podman/podman.sock\n        sudo echo 'export DOCKER_HOST=unix:///run/podman/podman.sock' >> /root/.bash_profile\n        ```", "```\n    http://127.0.0.1:9000.\n    ```", "```\nManage pods\nDescription:\n  Pods are a group of one or more containers sharing the same network, pid and ipc namespaces.\nUsage:\n  podman pod [command]\nAvailable Commands:\n  clone       Clone an existing pod\n  create      Create a new empty pod\n  exists      Check if a pod exists in local storage\n  inspect     Displays a pod configuration\n  kill        Send the specified signal or SIGKILL to containers in pod\n  logs        Fetch logs for pod with one or more containers\n  pause       Pause one or more pods\n  prune       Remove all stopped pods and their containers\n  ps          List pods\n  restart     Restart one or more pods\n  rm          Remove one or more pods\n  start       Start one or more pods\n  stats       Display a live stream of resource usage statistics for the containers in one or more pods\n  stop        Stop one or more pods\n  top         Display the running processes of containers in a pod\n  unpause     Unpause one or more pods\n```", "```\n    --pod tag:\n\n    ```", "```\n    http://127.0.0.1:3000/.\n    ```", "```\n\n    ```", "```\n    wikijs to change to Started.\n    ```", "```\n    Podman generate kube -s -f wikijs.yaml wikijs wikijs-db\n    ```", "```\n    Docker-compose down\n    podman play kube to bring up the containers in a pod using the Kubernetes manifest, but before we do that, we need to fix one of the hostnames specified in the environment variables.The reason we need to do that is the name of the pod is appended to the name of every container running within the pod. So instead of our database container being called `wikijs-db`, it will be called `wikijs-pod-wikijs-db`. If you look at the manifest, you’ll see that `wikijs` is configured to hook up to a database container called `wikijs-db`, so we need to update the value of `DB_HOST` and change it to `wikijs-pod-wikijs-db`.You can do this reliably by using the `yq` command. If you don’t have `yq` installed on your computer, no worries, just use a `yq` container:\n\n    ```", "```\n\n    ```", "```\n    podman play kube wikijs.yaml\n    ```", "```\n    podman pod ls\n    podman ps -ap\n    ```", "```\n    *.sh, *.sql, and *.sql.gz scripts in the following mount points:\n\n    ```", "```\n    *.sh and *.sql scripts in the following mount points:*   `/opt/oracle/scripts/setup`: Post-setup scripts*   `/opt/oracle/scripts/startup`: Post-startup scripts*   `/docker-entrypoint-initdb.d`: Symbolic link representing the aforementioned directories\n    ```", "```\n\n    ```", "```\nhealthcheck:\n  test: pg_isready\n  start_period: 5s\n  interval: 5s\n  timeout: 5s\n  retries: 55\n```", "```\ndepends_on:\n  wikijs-db:\n    condition: service_healthy\n```", "```\ndocker-compose up -d\n```", "```\nFROM oraclelinux:8\nRUN dnf install -y rhn-setup yum-utils && dnf clean all\nENTRYPOINT [\"/bin/bash\"]\n```", "```\nbuildah bud -t ol-repo-sync .\n```", "```\nbuildah from oraclelinux:8\n```", "```\noraclelinux-working-container\n```", "```\nbuildah run oraclelinux-working-container dnf -y install rhn-setup yum-utils\nbuildah run oraclelinux-working-container dnf clean all\n```", "```\nbuildah config --cmd '' oraclelinux-working-container\nbuildah config --entrypoint '[\"/bin/bash\"]' oraclelinux-working-container\n```", "```\nbuildah commit --rm oraclelinux-working-container ol-repo-sync-buildah\n```", "```\n$ buildah images\n```", "```\npodman pull docker.io/pandoc/core\npodman image inspect pandoc/core | podman run -i --rm stedolan/jq -r '.[].Config.Entrypoint[]'\n```", "```\npodman image rm pandoc/core\n```", "```\nskopeo inspect --config docker://docker.io/pandoc/core:latest | podman run -i --rm stedolan/jq -r '.config.Entrypoint[]'\n```", "```\nskopeo copy docker://docker.io/pandoc/core:latest docker://example.com/pandoc/core:latest\n```", "```\nskopeo copy docker://docker.io/pandoc/core:latest containers-storage:pandoc/core:latest\n```", "```\nmkdir -p $(pwd)/pandoc/core\nskopeo copy docker://docker.io/pandoc/core:latest dir:$(pwd)/pandoc/core\n```", "```\nskopeo delete containers-storage:pandoc/core:latest\n```"]