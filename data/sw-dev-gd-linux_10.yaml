- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Configuring Software
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置软件
- en: Sooner or later, everyone has to configure software on a Linux system. And while
    there are many ways to do that, there is thankfully a general pattern that you
    can follow to get the results you want. On Linux, this is especially common; because
    much of the standard tooling in Linux follows the “small, sharp tools” philosophy,
    the tendency is toward lots of small, powerful programs that provide flexibility
    by supporting extensive configuration.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 迟早，每个人都需要在 Linux 系统上配置软件。虽然有许多方法可以做到这一点，但幸运的是，你可以遵循一个通用模式来获得你想要的结果。在 Linux 上，这尤其常见；因为
    Linux 中的许多标准工具遵循“小而尖锐的工具”哲学，趋向于大量的小而强大的程序，通过支持广泛的配置提供灵活性。
- en: In this chapter, you’ll learn about the configuration hierarchy that well-designed
    programs tend to use. Whether you just need to check a manual page to find a command-line
    argument for a single command or whether you want to set an environment variable
    that applies to all commands you run in your shell, you’ll see how to do it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解设计良好的程序通常使用的配置层级结构。无论你是需要查看手册页面找到某个命令的命令行参数，还是想设置一个适用于你在 shell 中运行的所有命令的环境变量，你将看到如何操作。
- en: From there, we’ll show you the general configuration hierarchy that almost all
    Unix software uses, so that you’ll always know where to check if a program isn’t
    quite behaving how you expect based on the configuration you’ve given it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将向你展示几乎所有 Unix 软件使用的通用配置层级结构，这样你就能始终知道该检查哪里，如果程序的行为与你根据配置期望的不一致。
- en: Finally, you’ll see how this configuration translates to programs managed through
    `systemd`, the most popular service management tool on Linux.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你将看到这种配置如何转化为通过 `systemd` 管理的程序，`systemd` 是 Linux 上最流行的服务管理工具。
- en: 'To summarize, this chapter will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，本章将涵盖以下主题：
- en: The configuration hierarchy
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置层级结构
- en: Command-line arguments
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行参数
- en: Environment variables
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境变量
- en: Configuration files
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件
- en: Configuration in Docker
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 中的配置
- en: Configuration hierarchy
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置层级结构
- en: 'One of the first things that you’ll do when running programs on Linux is to
    tweak them to your specific needs. In fact, you’ve already done that: by passing
    arguments to commands like `ls`, `grep`, and others, you have changed how these
    programs behave.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上运行程序时，你首先要做的事情之一就是根据你的具体需求调整它们。事实上，你已经做到了这一点：通过向 `ls`、`grep` 等命令传递参数，你已经改变了这些程序的行为。
- en: 'You probably have an intuitive feeling about how this should work because you’ve
    been around software your whole life. For example, it might seem natural to you
    that passing command-line arguments would override program defaults: `ls -l` gives
    you output that’s different from the default output of `ls`.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能对这一过程有直观的理解，因为你一生都在使用软件。例如，你可能会觉得传递命令行参数来覆盖程序默认值是很自然的：`ls -l` 给出的输出不同于 `ls`
    的默认输出。
- en: 'Let’s now dive into this intuition a bit more rigorously and see if we can
    map out some heuristics for how configuration *generally* works in a Unix environment.
    One of the norms that most standard Unix command-line programs conform to is a
    specific configuration hierarchy, where earlier values are overridden by later
    values. If you’ve written software that takes user configuration, you may have
    created a priority hierarchy like this before:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们更严格地探讨一下这个直觉，并看看能否为在 Unix 环境中配置*一般*工作方式绘制一些启发式的规则。大多数标准 Unix 命令行程序遵循的规范之一是特定的配置层级结构，其中较早的值会被后面的值覆盖。如果你编写过需要用户配置的软件，可能已经创建过类似这样的优先级层级：
- en: Set configurable values to built-in defaults.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将可配置的值设置为内置默认值。
- en: Check for values passed via configuration files, overriding those defaults.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查通过配置文件传递的值，覆盖这些默认值。
- en: Check for environment variables (people may refer to these as `env vars`), overriding
    configuration files and earlier values.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查环境变量（人们可能会称这些为 `env vars`），覆盖配置文件和早期的值。
- en: Check for command-line interface arguments (you may hear these referred to as
    CLI args), and update values as necessary, overriding earlier values.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查命令行界面参数（你可能会听到这些被称为 CLI 参数），并根据需要更新值，覆盖早期的值。
- en: Each successive level is closer to the user running the software at a specific
    moment, and so each successive level takes priority over the previous one.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 每个后续级别都更接近运行软件的用户，因此每个后续级别都会优先于之前的级别。
- en: 'For example, if your software detects conflicting values in the config file
    and the CLI arguments that the program was launched with, it should prefer the
    value in the command-line arguments. In other words, **the values found closer
    to the program’s invocation** “**shadow**” (in the sense of obscuring or replacing)
    **the values further away from execution**. The CLI argument value replaces the
    configuration file value because the configuration file is further away from the
    point of invocation than the arguments passed to the program when it’s started.
    That should make intuitive sense: you can’t depend on software if it ignores your
    command-line flags in favor of program defaults. `ls -l` shouldn’t give you the
    same output as `ls`.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你的软件在配置文件和程序启动时传递的CLI参数中检测到冲突的值，它应该优先选择命令行参数中的值。换句话说，**离程序调用更近的值**会“**覆盖**”（在遮蔽或替换的意义上）**离执行更远的值**。CLI参数值会替代配置文件中的值，因为配置文件离调用点比传递给程序的参数更远。这应该是直观的：如果软件忽略了你的命令行标志，偏向使用程序默认设置，那你是不能依赖这个软件的。`ls
    -l` 不应该和 `ls` 给你相同的输出。
- en: Most software on Linux follows this hierarchy when there are multiple ways to
    configure that software. Keep in mind that not all software uses all the configuration
    paths we’ll show as examples here, and not all software respects this configuration
    order exactly.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Linux上的软件都遵循这个层次结构，当有多种方式来配置该软件时。请记住，并非所有软件都会使用我们在这里展示的所有配置路径，也并非所有软件都会严格遵循这个配置顺序。
- en: 'Let’s look at this hierarchy again, but this time, connecting it to practical,
    specific examples for the **nginx** web server program. You’ll likely get to work
    with nginx at some point in your career, since it’s one of the most popular web
    servers in the world, used to front all kinds of dynamic web applications. Let’s
    see how each part of the priority hierarchy we just covered maps to practical
    nginx configuration:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再看一下这个层次结构，这一次将它与具体的**nginx** Web服务器程序的实际例子联系起来。你可能会在职业生涯中某个时刻使用nginx，因为它是世界上最流行的Web服务器之一，广泛用于动态Web应用程序的前端。让我们看看我们刚才讨论的每个优先级层次是如何映射到实际的nginx配置的：
- en: '**Built-in defaults**: The hardcoded nginx default for the user that it executes
    as after starting up is `nobody`.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**内置默认值**：启动后，`nginx` 执行的用户的硬编码默认值是 `nobody`。'
- en: '**Global configuration files** can change this for all nginx processes, so
    it’s common to find a global nginx configuration file at `/etc/nginx/nginx.conf`
    with the value “`user www;`" which instructs nginx to run as the `www` user instead.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**全局配置文件** 可以为所有nginx进程更改这个设置，因此通常会在 `/etc/nginx/nginx.conf` 找到一个全局nginx配置文件，其中包含
    “`user www;`” 的值，指示nginx以 `www` 用户身份运行。'
- en: '**User-level configuration files** are typically “dot-files” (files named with
    a leading `.` character, which excludes them from regular `ls` listings) in the
    User’s `/home` directory. For example, `/home/dave/.bashrc` is a place for user-specific
    bash configuration. `nginx` is a long-running process that doesn’t usually run
    as a regular Linux user, but it does have something like this: individual sites
    are often configured in their own, separate configuration files at `/etc/nginx/conf.d/yourwebsite.conf`.
    These usually inherit values from the global configuration from the previous level.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**用户级别配置文件** 通常是“点文件”（以 `.` 开头的文件，这使得它们不会出现在常规 `ls` 列表中），位于用户的 `/home` 目录中。例如，`/home/dave/.bashrc`
    是存放用户特定 bash 配置的地方。`nginx` 是一个长期运行的进程，通常不会以常规 Linux 用户身份运行，但它确实有类似的东西：各个站点通常会在它们自己的独立配置文件中配置，通常位于
    `/etc/nginx/conf.d/yourwebsite.conf`。这些文件通常会继承来自上一层的全局配置值。'
- en: '**Environment variables**. `nginx` gets timezone information from an environment
    variable named `TZ`.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**环境变量**。`nginx` 从名为 `TZ` 的环境变量获取时区信息。'
- en: '**Command-line arguments** are specified when software is run, either manually
    or in an automated way (for example via cron, or unit files). Make sure to look
    at these possible external sources of command-line arguments when debugging a
    problem – they’re frequent culprits when you see a disparity between program behavior
    and the configuration files. `nginx` takes various command-line arguments that
    modify its behavior: from overriding the configuration files it will use to preventing
    it from acting as a web server entirely and instead signaling an already-running
    nginx process to stop or reload.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**命令行参数**是在软件运行时指定的，无论是手动运行还是自动运行（例如通过 cron 或单元文件）。在调试问题时，务必查看这些可能的外部命令行参数来源——它们往往是导致程序行为和配置文件不一致的常见原因。`nginx`
    接受各种命令行参数来修改其行为：从覆盖它将使用的配置文件，到完全阻止其作为 Web 服务器运行，转而通知已运行的 nginx 进程停止或重新加载。'
- en: 'Now that you’ve seen both the theoretical and practical aspects of how this
    configuration hierarchy interacts with all the programs you run on Linux, and
    all the programs you might *write* for it, let’s go through the configuration
    hierarchy step by step to take a closer look at each level. We’ll start with the
    most direct and powerful form of configuration, which overrides everything else:
    passing command-line arguments at the moment in which you invoke a program.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经看到了这一配置层级如何与 Linux 上你运行的所有程序及你可能为其编写的所有程序进行交互的理论和实践方面，让我们一步步地深入了解这个配置层级，仔细看看每一层。我们将从最直接、最强大的配置形式开始，它会覆盖所有其他方式：在调用程序的时刻传递命令行参数。
- en: Command-line arguments
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行参数
- en: 'You’re already familiar with the most common way to configure programs: with
    command-line arguments. These configure a program at the moment it’s invoked as
    a shell command.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经熟悉了配置程序的最常见方式：使用命令行参数。这些参数在程序被作为 Shell 命令调用时配置该程序。
- en: To find valid command-line arguments for a program, start with the man (manual)
    page for your command. Except on the most minimal systems, Unix software ships
    with manual pages that document most programs, explain available flags, and –
    usually at the end – list other kinds of configuration methods, like configuration
    files.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找程序的有效命令行参数，可以从你命令的 man（手册）页面开始。除了最简化的系统外，Unix 软件通常会随附手册页面，记录大多数程序，解释可用的标志，并且—通常在末尾—列出其他配置方法，比如配置文件。
- en: 'Let’s look at the beginning of the man page content for the `find` command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看 `find` 命令的手册页面开头内容：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can see that most of this manual page documents the various command-line
    arguments that are available when running `find`. You’ve used plenty of command-line
    arguments since *Chapter 1*, so this should all feel familiar.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，这份手册页面大部分内容都记录了运行`find`时可以使用的各种命令行参数。自从*第一章*以来，你已经使用了大量命令行参数，因此这些内容应该都很熟悉。
- en: 'Let’s look at the next, slightly more distant kind of configuration: environment
    variables.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看下一种稍微更远一点的配置方式：环境变量。
- en: Environment variables
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境变量
- en: While a command-line argument is powerful, it applies only to the single program
    invocation that it’s a part of. When you type `ls -l`, only that one `ls` command
    will have the long-form output. But what if you want a configuration value to
    persist over multiple invocations of a command? This is useful if, for example,
    you’re writing a script that will install packages at a few different points,
    and you want to set a configuration option *once* instead of having to add it
    over and over again as a command-line argument every single time you run the package
    installation command. That’s where environment variables come in.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然命令行参数非常强大，但它只适用于包含它的单次程序调用。当你输入`ls -l`时，只有这一次`ls`命令会显示长格式输出。但如果你希望某个配置值在多次命令调用中保持有效呢？举个例子，如果你在编写一个脚本，它将在不同的地方安装包，你希望设置一个配置选项*一次*，而不是每次运行安装包命令时都反复添加它作为命令行参数。这时，环境变量就派上用场了。
- en: 'As a developer writing any kind of software, you are likely aware of environment
    variables: shell values that are analogous to variables in any other programming
    language. These differ from command-line arguments because they operate one level
    higher. Environment variables give you more leverage: once you set a configuration
    variable in the shell, it applies to all program invocations made in that shell
    session. Set it once, and a program that looks for the environment variable will
    respect it every time it’s run, until the variable changes or you end the shell
    session.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名开发人员，您可能已经知道环境变量：类似于其他编程语言中的变量，环境变量是 shell 中的值。它们与命令行参数不同，因为它们作用于更高的层级。环境变量为您提供了更多的灵活性：一旦在
    shell 中设置了一个配置变量，它就适用于该 shell 会话中的所有程序调用。设置一次后，任何查找该环境变量的程序每次运行时都会遵守它，直到变量改变或您结束
    shell 会话。
- en: '**Note**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: We’ll dive deeper into environment variables in *Chapter 12*, *Automating Tasks
    with Shell Scripts*, but this section covers the basics.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在*第12章*《使用 Shell 脚本自动化任务》中深入讨论环境变量，但本节涵盖了基本内容。
- en: Most standard Unix environments use environment variables as a means to specify
    common configurations that are relevant to many different programs, not just one.
    For example, environment variables keep track of where the User’s `/home` directory
    can be found (`$HOME`), what the current working directory is (`$PWD`), which
    shell should be used by default (`$SHELL`), where to look for the executable files
    that correspond to commands received via the CLI (`$PATH`), and so on.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数标准的 Unix 环境使用环境变量作为指定许多不同程序相关常见配置的一种方式，而不仅仅是一个。例如，环境变量可以跟踪用户的 `/home` 目录在哪里（`$HOME`），当前工作目录在哪里（`$PWD`），默认使用哪个
    shell（`$SHELL`），在哪里查找与通过命令行接口（CLI）接收到的命令对应的可执行文件（`$PATH`）等等。
- en: 'Feel free to inspect them right now; you can see the value of a specific environment
    variable by printing it out with the `echo` command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以随时检查它们；您可以通过 `echo` 命令打印出来查看特定环境变量的值：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Or you can use the `env` command to see all of the environment variables currently
    set:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用 `env` 命令查看当前设置的所有环境变量：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To set an environment variable in your current shell, simply use `=` for assignment
    (ensure that there are no spaces around the equals sign):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要在当前 shell 中设置环境变量，只需使用 `=` 进行赋值（确保等号两侧没有空格）：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You’ve set it for your current shell:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您已为当前 shell 设置了它：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To persist this variable for any subshells you spawn (for example, when you
    run a script), use the `export` builtin:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要使此变量在您启动的任何子 shell 中持久存在（例如，在运行脚本时），请使用 `export` 内建命令：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You’ll learn more in *Chapter 12*, *Automating Tasks with Shell Scripts*, but
    the above command is the extent of what you’ll need to pass environment variable
    configuration to most programs you interact with.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在*第12章*《使用 Shell 脚本自动化任务》中学到更多，但上述命令是您需要将环境变量配置传递给大多数与之交互的程序的全部内容。
- en: 'Back to the `find` example: if you scroll down far enough on the `find` man
    page, which we looked at in the previous section, you’ll see a section titled
    `ENVIRONMENT`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 回到 `find` 示例：如果您向下滚动到 `find` 手册页中的足够远的地方（我们在上一节中查看了该手册页），您会看到一个标题为 `ENVIRONMENT`
    的部分：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is a different level of configuration – instead of being passed as command
    arguments at runtime, these are the configuration directives that can be read
    from shell environment variables.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一层配置——这些配置指令不是在运行时作为命令参数传递，而是可以从 shell 环境变量中读取。
- en: 'Why should a program treat environment variables differently from arguments?
    Let’s think it through: the command-line argument `–H` is incredibly specific
    because it is defined at the command invocation level. As a result, it applies
    only to the command being run at that instant.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么程序应该将环境变量与命令行参数区别对待？让我们想一想：命令行参数 `–H` 非常具体，因为它是在命令调用层面定义的。因此，它仅适用于当前正在运行的命令。
- en: On the other hand, environment variables are less specific. They’re defined
    at the shell level and, therefore, are available to all commands run from that
    shell.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，环境变量则不那么具体。它们在 shell 层面上定义，因此可以被从该 shell 运行的所有命令访问。
- en: 'Let’s keep walking up the configuration hierarchy: if a value isn’t set at
    runtime in a command-line argument, or as an environment variable in the shell
    session that a program is launched from, where does configuration come from?'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续向上走配置层级：如果某个值在运行时没有通过命令行参数或在启动程序的 shell 会话中作为环境变量设置，那么配置来自哪里呢？
- en: Configuration files
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置文件
- en: The next place a program looks for configuration is in its configuration files.
    *Where* a program looks for configuration can vary wildly, but there are a few
    standard places to look.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 程序寻找配置文件的下一个地方是在其配置文件中。*程序*寻找配置的地方可能会有所不同，但有一些标准的位置是可以查找的。
- en: System-level configuration in /etc/
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统级配置在`/etc/`
- en: 'First, the `/etc/` directory is a good place to start. You’ve seen this directory
    before, in *Chapter 5*, *Introducing Files*. `/etc/programname` – where `programname`
    is a stand-in for the name of the program you’re interested in configuring – is
    a common choice of directory for software to keep system-wide configuration. For
    many programs, that’s enough. For example, the nginx web server is a system-level
    program: different users aren’t commonly running their own instances of web servers
    on a single machine, so a system-wide configuration is all that’s needed.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`/etc/`目录是一个不错的起点。你在*第5章*，*介绍文件*中见过这个目录。`/etc/programname`——其中`programname`是你想配置的程序的名字——是软件存放系统范围配置的常见目录。对于许多程序来说，这已经足够了。例如，nginx
    Web服务器是一个系统级程序：不同的用户通常不会在同一台机器上运行自己的Web服务器实例，所以只需要一个系统范围的配置。
- en: That said, configuration for large or complex programs can still be broken up
    inside of the `/etc/programname` directory. Nginx is a good example of this; its
    main configuration file is at `/etc/nginx.conf`, with additional config files
    being sourced from additional files in the `/etc/nginx/conf.d/` directory.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，大型或复杂程序的配置仍然可以在`/etc/programname`目录中拆分。Nginx就是一个很好的例子；它的主配置文件位于`/etc/nginx.conf`，额外的配置文件则从`/etc/nginx/conf.d/`目录中的附加文件中加载。
- en: User-level configuration in ~/.config
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户级配置在`~/.config`
- en: 'For programs that have significant per-user configuration – think text editors,
    development tooling, games, and more – the `~/.config` directory inside a user’s
    home directory is used. Recall from *Chapter 1*, *How the Command Line Works*
    that `~` is a shorthand for “the current user’s home directory,” and that directories
    whose names start with a period character (“`.`") are omitted from `ls` output
    unless you pass the `-a` flag. The `~/.config` directory is part of the XDG base
    directory standard, which you can get an overview of here: [https://wiki.archlinux.org/title/XDG_Base_Directory](https://wiki.archlinux.org/title/XDG_Base_Directory).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于有显著每用户配置的程序——比如文本编辑器、开发工具、游戏等——`~/.config`目录是用来存放这些配置的。回想一下*第1章*，*命令行的工作原理*，`~`是“当前用户的主目录”的简写，而以点字符（“`.`”）开头的目录，除非传递`-a`标志，否则在`ls`输出中会被省略。`~/.config`目录是XDG基础目录标准的一部分，你可以在这里获取概述：[https://wiki.archlinux.org/title/XDG_Base_Directory](https://wiki.archlinux.org/title/XDG_Base_Directory)。
- en: As an example, my `neovim` configuration is meaningfully different from other
    developers’ configuration, yet a single neovim binary on a system can support
    hundreds of developers working on the same machine simultaneously because each
    developer’s invocation of neovim uses their user-specific configuration files
    kept in `~/.config/nvim/`. And that’s good!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个例子，我的`neovim`配置与其他开发者的配置有显著不同，但系统上的单个neovim二进制文件可以支持数百名开发者在同一台机器上同时工作，因为每个开发者启动neovim时都会使用保存在`~/.config/nvim/`中的用户特定配置文件。这很好！
- en: You can imagine the pandemonium that would ensue if there was only a single
    system-wide place to configure this program in `/etc/` – either each developer
    would have to set countless environment variables before running the neovim editor
    or invoke the editor command with countless command-line flags.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以想象，如果只有一个系统范围的地方来配置这个程序在`/etc/`目录下会引发怎样的混乱——每个开发者都必须在运行neovim编辑器之前设置无数的环境变量，或者通过无数的命令行标志来调用编辑器命令。
- en: 'Now that you’ve taken a walk through the classical configuration sources for
    Unix programs, let’s look at one Linux-specific complication that you should know
    about: how configuration via environment files and CLI arguments is managed for
    programs controlled through `systemd`.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了Unix程序的经典配置来源，让我们来看一下一个Linux特有的复杂问题：如何管理通过环境文件和CLI参数配置的程序，这些程序通过`systemd`进行控制。
- en: systemd units
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: systemd单元
- en: In most Linux distributions – aside from Docker containers – `systemd` runs
    the show. We’ve already covered the basics of `systemd` in this book (see *Chapter
    3*, *Service Management with systemd*), and in this section, we’ll take a quick
    look at how `systemd` manages configuration for programs.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数 Linux 发行版中——除了 Docker 容器——`systemd`负责管理所有服务。我们已经在本书中讨论了`systemd`的基础知识（参见*第3章*《使用
    systemd 管理服务》），在这一节中，我们将快速了解`systemd`如何管理程序的配置。
- en: 'First, a quick review, in case *Chapter 3* seems awfully distant: in a systemd-managed
    Linux environment, services are packaged into `systemd` unit files, which wrap
    and control the actual executable binary, its arguments, the commands used to
    launch, restart, and stop the unit, and much more.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，快速回顾一下，以防*第3章*看起来有些遥远：在一个由 systemd 管理的 Linux 环境中，服务被打包进`systemd`单元文件中，这些文件封装并控制实际的可执行二进制文件、其参数、启动、重启和停止单元的命令等。
- en: There are many systemd unit types, as we’ve already covered, but we’re interested
    in the `service` unit type here.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们已经讨论过，systemd 单元类型有很多种，但我们在这里关注的是`service`单元类型。
- en: We’ve already covered the fact that unit files can exist in several different
    directories, depending on their purpose, but your own custom systemd units will
    usually live in `/etc/systemd/system`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论过，单元文件可以存在于多个不同的目录中，具体取决于它们的用途，但你自己的自定义 systemd 单元通常会存放在`/etc/systemd/system`中。
- en: To understand how a systemd unit lets you affect the layers of the configuration
    hierarchy that we’ve covered in this chapter, let’s create a systemd-managed service
    by writing our own systemd unit for an imaginary program called `yourprogram`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解 systemd 单元如何影响我们在本章中讨论的配置层次结构，让我们通过编写一个名为`yourprogram`的虚拟程序的 systemd 单元，来创建一个由
    systemd 管理的服务。
- en: Create your own service
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建你自己的服务
- en: As a developer, you may need to wrap a program you’re writing into a service,
    which can be more easily managed than a manually (interactively) invoked program.
    That’s perfectly useful on its own, but in this chapter, we’re digging into the
    extra control that systemd units give you over how and where your program is configured.
    Let’s walk through the process of creating a service by wrapping a binary with
    a `systemd` unit file.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，你可能需要将你编写的程序包装成一个服务，这样比手动（交互式）调用程序更容易管理。这本身是非常有用的，但在本章中，我们深入探讨了 systemd
    单元为你提供的额外控制，如何以及在哪里配置你的程序。让我们通过将二进制文件与`systemd`单元文件结合，来走一遍创建服务的过程。
- en: 'First, ensure that you have an executable file copied to a place that is in
    the default `$PATH: /usr/local/bin/yourprogram`. If you want to get the most out
    of this, use a manually compiled program like the `htop` binary you created in
    the previous *Chapter 9*, *Managing Installed Software*, and replace the imaginary
    `yourprogram` with `htop`.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，确保你已经将可执行文件复制到一个默认的 `$PATH` 目录中：`/usr/local/bin/yourprogram`。为了最大化效果，可以使用一个手动编译的程序，如前面*第9章*《管理已安装软件》中创建的`htop`二进制文件，并将假设的`yourprogram`替换为`htop`。
- en: 'Now, create the following `systemd` unit file at `/etc/systemd/system/yourprogram.service`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`/etc/systemd/system/yourprogram.service`路径下创建以下`systemd`单元文件：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Can you find the two configuration-related lines in this unit file?
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你能在这个单元文件中找到与配置相关的两行吗？
- en: You can see that the `ExecStart` line specifies how the program is invoked when
    someone starts this systemd service. We’re using the systemd unit file to pass
    command-line arguments to the program to make sure that anytime someone starts
    the service, the program is run with exactly the options we want. Anytime someone
    runs `systemctl start yourprogram`, we have ensured that `yourprogram` will be
    called with `-clioption=1` and `-clioption2`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，`ExecStart`行指定了当有人启动这个 systemd 服务时，程序是如何被调用的。我们使用 systemd 单元文件将命令行参数传递给程序，确保每次有人启动服务时，程序都会以我们希望的选项运行。每当有人运行`systemctl
    start yourprogram`时，我们已确保`yourprogram`会被调用，带有`-clioption=1`和`-clioption2`。
- en: 'Second, the `EnvironmentFile` line specifies a file path for `systemd` to check,
    where it can expect environment variables relevant to this program to be set.
    This file will be parsed by the shell that systemd uses to run the binary; it
    should contain shell variable assignments like:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，`EnvironmentFile`行指定了`systemd`检查的文件路径，在该文件中，它可以找到与此程序相关的环境变量。这些变量将由`systemd`用来运行二进制文件的
    shell 解析，它应包含类似于以下的 shell 变量赋值：
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Have systemd re-read its config files to make sure it sees the new service
    `Unit` you’ve defined:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让 systemd 重新读取它的配置文件，确保它能看到你定义的新的服务`Unit`：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now you can manage this like any other `systemd` service:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以像管理任何其他`systemd`服务一样管理这个服务：
- en: '`systemctl start yourprogram`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`systemctl start yourprogram`'
- en: '`systemctl status yourprogram`'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`systemctl status yourprogram`'
- en: '`systemctl stop yourprogram`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`systemctl stop yourprogram`'
- en: '`systemctl enable yourprogram`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`systemctl enable yourprogram`'
- en: '`systemctl disable yourprogram`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`systemctl disable yourprogram`'
- en: You know that every time you start this service, your environment file at `/etc/yourprogram/prod_defaults`
    will be used to source environment variables, and the `ExecStart` line will pass
    the CLI options you’ve specified.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您知道每次启动该服务时，位于`/etc/yourprogram/prod_defaults`的环境文件将用于源环境变量，而`ExecStart`行将传递您指定的命令行选项。
- en: We’ve shown you an extremely simple service here, just so you can get your head
    around how systemd is used to control program configuration, but there are *many*
    other configuration directives you can pass here. Spend some time reading the
    `systemd` unit documentation ([https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#%5BUnit%5D%20Section%20Options](https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#%5BUnit%5D%20Section%20Options))
    if you have a more complex service on your hands.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里展示了一个非常简单的服务，旨在帮助您理解如何使用 systemd 来控制程序配置，但这里有*许多*其他配置指令可以传递。如果您手头有更复杂的服务，花些时间阅读
    `systemd` 单元文档（[https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#%5BUnit%5D%20Section%20Options](https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#%5BUnit%5D%20Section%20Options)）。
- en: 'Quick note: configuration in Docker'
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速提示：Docker中的配置
- en: Earlier in this chapter, we mentioned that Docker is often the exception when
    it comes to configuration. Because Docker containers are a much more minimal environment,
    they don’t have a lot of the extra binaries, services, and configuration files
    that you’ll find in a traditional Unix system. But because much of the software
    that software developers create now runs in containers, as opposed to traditional,
    full operating system environments, we want to cover some basics here to make
    sure you’ve got an intuition for how configuration is different in Docker containers.
    We’ll dig much deeper into Docker containers in general in *Chapter 15*, *Containerizing
    Applications with Docker*.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 本章早些时候提到过，Docker 在配置方面通常是一个例外。因为 Docker 容器是一个更为简化的环境，它们没有传统 Unix 系统中那种大量的额外二进制文件、服务和配置文件。但由于现在许多软件开发者创建的软件运行在容器中，而不是传统的完整操作系统环境中，我们希望在这里介绍一些基础知识，确保您对
    Docker 容器中的配置有基本的直觉。我们将在*第15章*《使用 Docker 容器化应用程序》中深入探讨 Docker 容器。
- en: In a container environment – whether it’s Docker or another container runtime
    – you’re dealing with a dramatically smaller environment. There are very few installed
    programs and utilities, a dramatically stripped-down `init` in place of `systemd`,
    and a much smaller filesystem that doesn’t have many of the directories we’ve
    mentioned here.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器环境中——无论是 Docker 还是其他容器运行时——您所面临的环境要小得多。安装的程序和工具非常少，`init`被极大简化为代替`systemd`，文件系统也被大大缩减，没有我们在这里提到的许多目录。
- en: 'The principle of the configuration hierarchy still holds, though. Most containerized
    applications expect to get their configuration either from:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 配置层级的原则依然适用。大多数容器化应用程序期望从以下位置获取配置：
- en: A config file somewhere on the container filesystem, often dynamically created
    by a container scheduler just before the container is started
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器文件系统上的某个配置文件，通常是容器调度器在容器启动之前动态创建的
- en: Environment variables, passed in by the container scheduler or the operator
    launching it
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境变量，由容器调度器或启动它的操作员传递
- en: Command-line arguments
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行参数
- en: Even though this is a simplified version of the configuration hierarchy, you’ll
    notice that it’s basically identical to the one we explored in full, non-container
    Linux systems.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 即使这是一个简化版的配置层级结构，您会注意到它基本上与我们在传统非容器 Linux 系统中探索的结构完全相同。
- en: We’ll dive a bit deeper into containers in *Chapter 15*, *Containerizing Applications
    with Docker*.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在*第15章*《使用 Docker 容器化应用程序》中更深入地探讨容器。
- en: Conclusion
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This chapter gave you an overview of the Linux configuration hierarchy and how
    it applies to the programs you’ll use (and write) every day. You learned about
    command-line arguments, environment variables, and all the other things that fit
    into the larger hierarchy that programs pull configuration from.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为您概述了 Linux 配置层级结构以及它如何应用于您每天使用（和编写）的程序。您了解了命令行参数、环境变量，以及所有其他在更大层级结构中为程序提供配置的内容。
- en: If you followed along, you even created a systemd service that wraps a program
    and allows you to manage its configuration in a more uniform way.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你跟着做，你甚至创建了一个 systemd 服务来包装一个程序，并允许你以更统一的方式管理其配置。
- en: Learn more on Discord
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入本书的 Discord 社区——在这里你可以分享反馈，向作者提问，并了解新版本——请扫描下方的二维码：
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/SecNet](https://packt.link/SecNet)'
- en: '![](img/QR_Code1768422420210094187.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code1768422420210094187.png)'
