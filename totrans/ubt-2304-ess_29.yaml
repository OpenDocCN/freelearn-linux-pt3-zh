- en: 30\. Working with Containers on Ubuntu
  prefs: []
  type: TYPE_NORMAL
- en: Now that the basics of Linux Containers have been covered in the previous chapter,
    this chapter will demonstrate how to create and manage containers using the Podman,
    Skopeo, and Buildah tools on Ubuntu. It is intended that by the end of this chapter,
    you will have a clearer understanding of how to create and manage containers on
    Ubuntu and will have gained a knowledge foundation on which to continue exploring
    the power of Linux Containers.
  prefs: []
  type: TYPE_NORMAL
- en: 30.1 Installing the Container Tools
  prefs: []
  type: TYPE_NORMAL
- en: 'Before starting with containers, the first step is to install all of the container
    tools outlined in the previous chapter using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: apt install curl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: . /etc/os-release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sh -c "echo 'deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/
    /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/Release.key
    | sudo apt-key add -
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: apt update
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: apt install podman skopeo buildah
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 30.2 Pulling a Container Image
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, the most recent Ubuntu release will be pulled from the registry.
    Before pulling an image, however, information about the image repository can be
    obtained using the skopeo tool, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: $ skopeo inspect docker://docker.io/ubuntu
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"Name": "docker.io/library/ubuntu",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Digest": "sha256:bec5a2727be7fff3d308193cfde3491f8fba1a2ba392b7546b43a051853a341d",'
  prefs: []
  type: TYPE_NORMAL
- en: '"RepoTags": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"10.04",'
  prefs: []
  type: TYPE_NORMAL
- en: '"12.04.5",'
  prefs: []
  type: TYPE_NORMAL
- en: '"12.04",'
  prefs: []
  type: TYPE_NORMAL
- en: '"12.10",'
  prefs: []
  type: TYPE_NORMAL
- en: '"13.04",'
  prefs: []
  type: TYPE_NORMAL
- en: '"13.10",'
  prefs: []
  type: TYPE_NORMAL
- en: '"14.04.1",'
  prefs: []
  type: TYPE_NORMAL
- en: '"14.04.2",'
  prefs: []
  type: TYPE_NORMAL
- en: '"14.04.3",'
  prefs: []
  type: TYPE_NORMAL
- en: '"14.04.4",'
  prefs: []
  type: TYPE_NORMAL
- en: '"14.04.5",'
  prefs: []
  type: TYPE_NORMAL
- en: '"14.04",'
  prefs: []
  type: TYPE_NORMAL
- en: '"14.10",'
  prefs: []
  type: TYPE_NORMAL
- en: '"15.04",'
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"Created": "2023-06-28T08:42:50.42500211Z",'
  prefs: []
  type: TYPE_NORMAL
- en: '"DockerVersion": "20.10.21",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Labels": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"org.opencontainers.image.ref.name": "ubuntu",'
  prefs: []
  type: TYPE_NORMAL
- en: '"org.opencontainers.image.version": "22.04"'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '"Architecture": "arm64",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Os": "linux",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Layers": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"sha256:5af00eab97847634d0b3b8a5933f52ca8378f5f30a2949279d682de1e210d78b"'
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"Env": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to pull the latest Ubuntu image:'
  prefs: []
  type: TYPE_NORMAL
- en: $ podman pull docker://docker.io/ubuntu:latest
  prefs: []
  type: TYPE_NORMAL
- en: Trying to pull docker.io/library/ubuntu:latest...
  prefs: []
  type: TYPE_NORMAL
- en: Getting image source signatures
  prefs: []
  type: TYPE_NORMAL
- en: Copying blob 5af00eab9784 done
  prefs: []
  type: TYPE_NORMAL
- en: Copying config 37f7489146 done
  prefs: []
  type: TYPE_NORMAL
- en: Writing manifest to image destination
  prefs: []
  type: TYPE_NORMAL
- en: Storing signatures
  prefs: []
  type: TYPE_NORMAL
- en: 37f74891464b2067aacbde60d9e2888e002af047a0d5dfc0b06b701928e0b473
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the image has been stored by asking podman to list all local images:'
  prefs: []
  type: TYPE_NORMAL
- en: $ podman images
  prefs: []
  type: TYPE_NORMAL
- en: REPOSITORY TAG IMAGE ID CREATED SIZE
  prefs: []
  type: TYPE_NORMAL
- en: docker.io/library/ubuntu latest 4e5021d210f6 3 weeks ago 66.6 MB
  prefs: []
  type: TYPE_NORMAL
- en: 'Details about a local image may be obtained by running the podman inspect command:'
  prefs: []
  type: TYPE_NORMAL
- en: $ podman inspect ubuntu:latest
  prefs: []
  type: TYPE_NORMAL
- en: This command should output the same information as the skopeo command performed
    on the remote image earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 30.3 Running the Image in a Container
  prefs: []
  type: TYPE_NORMAL
- en: 'The image pulled from the registry is a fully operational image that is ready
    to run in a container without modification. To run the image, use the podman run
    command. In this case, the –rm option will be specified to indicate that we want
    to run the image in a container, execute one command and then have the container
    exit. In this case, the cat tool will be used to output the content of the /etc/passwd
    file located on the container root filesystem:'
  prefs: []
  type: TYPE_NORMAL
- en: $ podman run --rm ubuntu:latest cat /etc/passwd
  prefs: []
  type: TYPE_NORMAL
- en: root:x:0:0:root:/root:/bin/bash
  prefs: []
  type: TYPE_NORMAL
- en: daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: bin:x:2:2:bin:/bin:/usr/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: sys:x:3:3:sys:/dev:/usr/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: sync:x:4:65534:sync:/bin:/bin/sync
  prefs: []
  type: TYPE_NORMAL
- en: games:x:5:60:games:/usr/games:/usr/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: _apt:x:100:65534::/nonexistent:/usr/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: Compare the content of the /etc/passwd file within the container with the /etc/passwd
    file on the host system and note that it lacks all of the additional users that
    are present on the host confirming that the cat command was executed within the
    container environment. Also note that the container started, ran the command and
    exited all within a matter of seconds. Compare this to the amount of time it takes
    to start a full operating system, perform a task, and shutdown a virtual machine,
    and you begin to appreciate the speed and efficiency of containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch a container, keep it running, and access the shell, the following
    command can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: $ podman run --name=mycontainer -it ubuntu:latest /bin/bash
  prefs: []
  type: TYPE_NORMAL
- en: root@4b49ddeb2987:/#
  prefs: []
  type: TYPE_NORMAL
- en: In this case, an additional command-line option has been used to assign the
    name “mycontainer” to the container. Though optional, this makes the container
    easier to recognize and reference as an alternative to using the automatically
    generated container ID.
  prefs: []
  type: TYPE_NORMAL
- en: While the container is running, run podman in a different terminal window to
    see the status of all containers on the system
  prefs: []
  type: TYPE_NORMAL
- en: $ podman ps -a
  prefs: []
  type: TYPE_NORMAL
- en: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
  prefs: []
  type: TYPE_NORMAL
- en: 4b49ddeb2987 docker.io/library/ubuntu:latest /bin/bash About a minute ago Up
    About a minute ago mycontainer
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute a command in a running container from the host, simply use the podman
    exec command, referencing the name of the running container and the command to
    be executed. The following command, for example, starts up a second bash session
    in the container named mycontainer:'
  prefs: []
  type: TYPE_NORMAL
- en: $ podman exec -it mycontainer /bin/bash
  prefs: []
  type: TYPE_NORMAL
- en: root@4b49ddeb2987:/#
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that though the above example referenced the container name the same result
    can be achieved using the container ID as listed by the podman ps -a command:'
  prefs: []
  type: TYPE_NORMAL
- en: $ podman exec -it 4b49ddeb2987 /bin/bash
  prefs: []
  type: TYPE_NORMAL
- en: root@4b49ddeb2987:/#
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, the podman attach command will also attach to a running container
    and access the shell prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: $ podman attach mycontainer
  prefs: []
  type: TYPE_NORMAL
- en: root@4b49ddeb2987:/#
  prefs: []
  type: TYPE_NORMAL
- en: Once the container is up and running, any additional configuration changes can
    be made, and packages installed just like any other Ubuntu system.
  prefs: []
  type: TYPE_NORMAL
- en: 30.4 Managing a Container
  prefs: []
  type: TYPE_NORMAL
- en: 'Once launched, a container will continue to run until it is stopped via podman,
    or the command that was launched when the container was run exits. Running the
    following command on the host, for example, will cause the container to exit:'
  prefs: []
  type: TYPE_NORMAL
- en: $ podman stop mycontainer
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, pressing the Ctrl-D keyboard sequence within the last remaining
    bash shell of the container would cause both the shell and container to exit.
    Once it has exited, the status of the container will change accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: $ podman ps -a
  prefs: []
  type: TYPE_NORMAL
- en: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
  prefs: []
  type: TYPE_NORMAL
- en: 4b49ddeb2987 docker.io/library/ubuntu:latest /bin/bash 6 minutes ago Exited
    (127) About a minute ago mycontainer
  prefs: []
  type: TYPE_NORMAL
- en: 'Although the container is no longer running, it still exists and contains all
    of the changes that were made to the configuration and file system. If you installed
    packages, made configuration changes or added files, these changes will persist
    within “mycontainer”. To verify this, simply restart the container as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: $ podman start mycontainer
  prefs: []
  type: TYPE_NORMAL
- en: 'After starting the container, use the podman exec command once again to execute
    commands within the container as outlined previously. For example, to once again
    gain access to a shell prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: $ podman exec -it mycontainer /bin/bash
  prefs: []
  type: TYPE_NORMAL
- en: 'A running container may also be paused and resumed using the podman pause and
    unpause commands as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: $ podman pause mycontainer
  prefs: []
  type: TYPE_NORMAL
- en: $ podman unpause mycontainer
  prefs: []
  type: TYPE_NORMAL
- en: 30.5 Saving a Container to an Image
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the container guest system is configured to your requirements there is
    a good chance that you will want to create and run more than one container of
    this particular type. To do this, the container needs to be saved as an image
    to local storage so that it can be used as the basis for additional container
    instances. This is achieved using the podman commit command combined with the
    name or ID of the container and the name by which the image will be stored, for
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: $ podman commit mycontainer myubuntu_image
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the image has been saved, check that it now appears in the list of images
    in the local repository:'
  prefs: []
  type: TYPE_NORMAL
- en: $ podman images
  prefs: []
  type: TYPE_NORMAL
- en: REPOSITORY TAG IMAGE ID CREATED SIZE
  prefs: []
  type: TYPE_NORMAL
- en: localhost/myubuntu_image latest 8ad685d49482 47 seconds ago 66.6 MB
  prefs: []
  type: TYPE_NORMAL
- en: docker.io/library/ubuntu latest 4e5021d210f6 3 weeks ago 66.6 MB
  prefs: []
  type: TYPE_NORMAL
- en: 'The saved image can now be used to create additional containers identical to
    the original:'
  prefs: []
  type: TYPE_NORMAL
- en: $ podman run --name=mycontainer2 -it localhost/myubuntu_image /bin/bash
  prefs: []
  type: TYPE_NORMAL
- en: 30.6 Removing an Image from Local Storage
  prefs: []
  type: TYPE_NORMAL
- en: 'To remove an image from local storage once it is no longer needed, simply run
    the podman rmi command, referencing either the image name or ID as output by the
    podman images command. For example, to remove the image named myubuntu_image created
    in the previous section, run podman as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: $ podman rmi localhost/myubuntu_image
  prefs: []
  type: TYPE_NORMAL
- en: Note before an image can be removed, any containers based on that image must
    first be removed.
  prefs: []
  type: TYPE_NORMAL
- en: 30.7 Removing Containers
  prefs: []
  type: TYPE_NORMAL
- en: 'Even when a container has exited or been stopped, it still exists and can be
    restarted at any time. If a container is no longer needed, it can be deleted using
    the podman rm command as follows after the container has been stopped:'
  prefs: []
  type: TYPE_NORMAL
- en: podman rm mycontainer2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 30.8 Building a Container with Buildah
  prefs: []
  type: TYPE_NORMAL
- en: Buildah allows new containers to be built either from existing containers, an
    image or entirely from scratch. Buildah also includes the ability to mount the
    file system of a container so that it can be accessed and modified from the host.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following buildah command, for example, will build a container from the
    Ubuntu Base image (if the image has not already been pulled from the registry,
    buildah will download it before creating the container):'
  prefs: []
  type: TYPE_NORMAL
- en: $ buildah from docker://docker.io/library/ubuntu:latest
  prefs: []
  type: TYPE_NORMAL
- en: 'The result of running this command will be a container named ubuntu-working-container
    that is ready to run:'
  prefs: []
  type: TYPE_NORMAL
- en: $ buildah run ubuntu-working-container cat /etc/passwd
  prefs: []
  type: TYPE_NORMAL
- en: 30.9 Summary
  prefs: []
  type: TYPE_NORMAL
- en: This chapter has worked through the creation and management of Linux Containers
    on Ubuntu using the podman, skopeo and buildah tools.
  prefs: []
  type: TYPE_NORMAL
