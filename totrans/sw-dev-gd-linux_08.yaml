- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ownership and Permissions
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you’ll learn how users and groups are combined with ownership
    and permissions to create the basic Linux security model. This combination of
    primitives is used to control access to just about everything on a Linux system
    – processes, files, network sockets, devices, and more.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you’ll get a tour of all the important file information you get from
    a long listing (with an emphasis on permissions, naturally). Then we’ll cover
    the common permissions that you’ll encounter on production Linux systems, and
    finally, we’ll show you all the Linux commands you’ll use to set and modify permissions
    on files. Together, we’ll do the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Decipher the output of a long listing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about file attributes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand how ownership and permissions work
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand a common sticking point, the “octal” permission format
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn practical commands for changing ownership and permissions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deciphering a long listing
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s dive into this topic by way of a long listing.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, when you’re navigating around a system, seeing only file and directory
    names isn’t enough. When you want more information about the files you’re seeing,
    use `ls` with its “long” option: `ls -l`.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of its output when run on the `/lib` directory of a system.
    Open a terminal and type `ls -l /lib/`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We see a lot of interesting information here – let’s step through it, field
    by field.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: File attributes
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first field displays a file’s attributes: file type and permissions. In
    other words, this field shows us which type of file we’re looking at, and what
    its file permissions are. The default lists this information in symbolic mode,
    in contrast to numeric mode, which you can view with `-n`.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: File type
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first character here indicates the file type. In the listing above, the
    `-` character indicates a regular file. Lines starting with `l` indicate a *symbolic
    link*, which is simply a special file that has no content of its own, and just
    points to another location on the filesystem. You can think of it as a Windows
    shortcut or a macOS file alias.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Other common file types are `d`, indicating a directory, or `c`, which indicates
    that you’re looking at a character file – you’ll mainly find the latter in `/dev`,
    representing hardware input devices such as keyboards. For more on file types,
    see the *Filesystem* section of *Chapter 5*, *Introducing Files*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Permissions
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: These are the “permission bits,” which determine which users and groups on the
    system are allowed to read, write, and execute this file. We’ll dive deeper into
    this in the *Permissions* section of this chapter.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Number of hardlinks
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The next field indicates the number of hard links. Hard links are special pointers
    linking file names to an actual file. So in most situations, this will be 1 for
    files. In contrast to a symbolic link (“symlink”), which points to a filepath,
    a hardlink points to an actual file. If you move the file that a symlink points
    to, this makes the symlink invalid; a hardlink will keep pointing to a file even
    if that file is moved around, renamed, or otherwise modified.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed that while most files have only one link pointing to them,
    directories have wildly varying numbers of links in this column. This is because
    each file and directory inside of that directory creates another link reference
    to it. Even an empty directory starts with two links, “.” (the shortcut for “this
    directory”) and “..” (the shortcut for “the directory above this one”).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: User ownership
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The third field shows which user owns the file; all files in our example are
    owned by `root`. While you see a username in this example, running `ls` in numeric
    mode – `ls -ln` – will also show a numeric user ID instead of the friendly username
    you see here.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Group ownership
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The following field shows the owning group, which also happens to be `root`
    in the example listing above.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: File size
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you might have guessed, the next field displays the file size. When no additional
    flags are specified, it is displayed in bytes. To make it more readable the `-h`
    (“human-readable”) flag can be used.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re paying attention, you’ll have noticed that directories all seem to
    have the same file size, 4096:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Files can take up as much or as little space as they need, but directory storage
    is allocated in discrete filesystem blocks. Because the smallest blocksize on
    most filesystems is 4096, directories will report their size as 4096.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: This rabbit hole goes deeper, but we don’t think the information will be useful
    enough in your day-to-day work as a software engineer to warrant including it
    here. If you’re still curious and want to go deeper, start reading about “Linux
    inodes.”
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Modification time
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Next, we see the modification timestamp of the file – the last time this file
    was changed.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Filename
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Finally, we come to the filename, which is the only thing you’d see if you were
    doing a regular listing instead of a long listing (`ls` instead of `ls -l`). This
    will usually just be a plain file or directory name, except in the case of a symbolic
    link, or symlink – in that case, you’ll see the symlink name, and the file path
    that it links to.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Ownership
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To change the owner of files or directories, use the `chown` (change owner)
    command. The syntax is `chown user:group path` where `user` is the name of the
    owning user and `group` is the name of the group, while `path` is the full or
    relative part to the file or directory.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: You can omit the colon and the group to just change the owning user and leave
    group ownership alone. Of course, the user attempting to change permissions on
    a file needs to have permission to do so, so in most situations this command will
    be run as the `root` user.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Permissions
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s a single file from our `ls -l` file listing earlier. I’ve tweaked the
    permissions to make this example more illustrative:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Specifically, look at the permission bits:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'They are displayed in three groups of three here. Imagine them separated into
    three groups, to make it easier:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Each of these triplets represents read (`r`), write (`w`), and execute (`x`)
    permissions for a specific set of users, based on the user and group ownership
    information for that file. If you see a `-` character in place of a letter, that
    action (for the set of users it applies to) is not permitted. Let’s look at them
    in more detail:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: The first three bits represent the permissions of the file owner. In this case,
    the file’s owner (`root`) can read, write, and execute the file – `rwx`.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second three bits represent permissions for the group owner of the file,
    which in this case is also `root`. The permissions here are `r-x`, or read and
    execute (no writing!). But because `root` is also the user-owner of the file,
    those (more permissive) permissions take precedence; `root` can write to this
    file. The reason you often see permissions like this is because a group owner
    is *required* to be set on files, and if you don’t want to share a file with other
    groups, you can just use the owner’s group here. The group permissions on a file
    are usually less permissive than the owner permissions.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last three bits represent the permissions that all other system users have
    for this file (“the world”). This is almost always the most restrictive set of
    permissions, because most files don’t need to be shared with anyone outside of
    the owner (and sometimes a separate group owner). In this case, we’re looking
    at a shared library file that needs to be accessible by all system users, so the
    permissions are `r-x` (read and execute, no writing allowed).
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Numeric/octal
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '“Read,” “write,” and “execute” are terms that make permissions easy to understand,
    but there is another important way that permissions are represented in Linux and
    Unix: octal.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: As a developer, you’re probably familiar with non-decimal number systems – octal
    is simply a base-8 system (instead of the base-10 system – decimal – that we usually
    use as humans, and in contrast to the base-2 system – binary – that computers
    use).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Because there are only eight possible states for each three-bit permission combination,
    octal is a perfectly efficient system for representing them.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Think of our 9 bits, again divided into 3-bit chunks. Each 3-bit permissions-chunk
    can represent an octal number, which requires three bits to represent. These 9
    bits give us exactly the amount of room that we need to represent three octal
    numbers – one for user permissions, one for group permissions, and one for other/world
    permissions.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '| **Octal** | **Binary** | **Meaning** |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
- en: '| 0 | 0 | **No** permissions (`—`) |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
- en: '| 1 | 1 | **Execute** permission (`–x`) |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
- en: '| 2 | 10 | **Write** permission (`-w-`) |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
- en: '| 3 | 11 | **Write and execute** permissions (`-wx`) |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
- en: '| 4 | 100 | **Read** permission (`r–`) |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
- en: '| 5 | 101 | **Read and execute** permissions (`r-x`) |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
- en: '| 6 | 110 | **Read and write** permissions (`rw-`) |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
- en: '| 7 | 111 | **Read, write, and execute** permissions (`rwx`) |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
- en: 'Table 8.1: Octal permissions'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: You’ll notice that this is laid out so that octal addition works – adding “read”
    (4) and “execute” (1) together gives you “read and execute” (5).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: This may seem strange and arbitrary (and it is!), but you’ll get the hang of
    it quickly. You’ll mostly be using 7 (all), 6 (read/write), 5 (read/execute),
    4 (read), and 0 (no permissions) while working.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Common permissions
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The most common permissions you’ll see are:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '`-rw-r--r--` (644): Owner can read and write; all others can only read.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-rwxr-xr-x` (755): Owner can do everything; all others can read/execute the
    file. This is a common one for executable files like scripts and binaries, and
    the default permission for directories.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-rw------` (600): Only the owner can read and write, no one else can do anything
    with it. This is common for secret keys, files that contain passwords, and other
    sensitive information. SSH, for example, won’t use keys that are group- or world-readable
    until you change their permissions to make them secret.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing ownership (chown) and permissions (chmod)
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You’ll use two commands to change ownership and permissions on files: `chown`
    and `chmod`.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Chown
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`chown` (change owner) is used to change the owner and group of a file. It’s
    used in the following way:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'For example, imagine we have this file:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Change owner
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s change the owner to `chris` (presuming there’s a `chris` user on the
    system):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Change owner and group
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We’ve changed the owner, but if we wanted to change the group, too, we could
    have run:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Recursively change owner and group
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One common task is changing the owner and group for all files in a given directory.
    You can do this with the `-R` or `--recursive` option:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This will recursively set ownership for `/home/dave/` and every file and directory
    inside it.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Chmod
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`chmod` (change mode) is used to change the permissions of a file. You can
    use regular or octal permissions here:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '`chmod [OPTION]... MODE[,MODE]... FILE...`'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '`chmod [OPTION]... OCTAL-MODE FILE...`'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'Your options can be given in the form: `ugo{+,-}rwx`'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '`ugo` (user, group, other – assumed to be all three if you don’t specify).'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`+` to add permissions, `-` to remove them.'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`rwx` (read, write, execute – any or all of these letters).'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For example, to add execute permissions for the user who owns the file:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要为拥有文件的用户添加执行权限：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To add write and execute permissions for the group and all other users:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要为组和所有其他用户添加写入和执行权限：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Oops, we actually wanted to remove all permissions for others:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀，我们其实是想移除其他用户的所有权限：
- en: '[PRE22]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Octal format for permissions can be set just like you’d expect:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 权限的八进制格式可以像你预期的那样设置：
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Actually, let’s make that file read-only:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，让我们将这个文件设置为只读：
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Using a reference
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用引用
- en: Both `chown` and `chmod` allow us to use a `--reference` argument, with which
    we can pass a file from which ownership or permissions will be copied.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`chown` 和 `chmod` 都允许我们使用 `--reference` 参数，通过该参数我们可以传递一个文件，从该文件复制所有权或权限。'
- en: Conclusion
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: 'In this chapter, we covered everything you need to know to solve the most common
    Linux permissions problems: you learned how to view permissions on files and how
    to modify them. More importantly, we showed you how to reason about permissions
    and how they tie in with Linux users and groups, which is where many people stumble.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了你需要知道的解决最常见 Linux 权限问题的所有内容：你学习了如何查看文件的权限，以及如何修改它们。更重要的是，我们向你展示了如何推理权限问题，以及它们如何与
    Linux 用户和组相关联，这也是许多人容易犯错的地方。
- en: Make sure you have a strong grasp of the material in this chapter; a huge percentage
    of the troubleshooting you’ll have to do during your career will revolve around
    file ownership and permission problems. Thankfully, most of these problems arise
    from a simple lack of understanding, which you no longer have. Go forth and troubleshoot!
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经牢牢掌握本章的内容；在你的职业生涯中，解决问题的大部分时间都将围绕文件所有权和权限问题展开。幸运的是，大多数这类问题源于对基本概念的误解，而你现在已经不再困惑。去吧，去解决问题吧！
- en: Learn more on Discord
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入本书的 Discord 社区——你可以在这里分享反馈、向作者提问并了解新版本——请扫描下面的二维码：
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/SecNet](https://packt.link/SecNet)'
- en: '![](img/QR_Code1768422420210094187.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code1768422420210094187.png)'
