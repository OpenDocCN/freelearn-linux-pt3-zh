- en: '*Chapter 16*: Understanding Timekeeping with systemd'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第16章*：理解使用 systemd 的时间同步'
- en: On modern computer systems, it's vitally important to maintain accurate time.
    To do that, our computers obtain the current time from a time server while using
    some implementation of the **Network Time Protocol** (**NTP**). In this chapter,
    we'll look at these various implementations and discuss the pros and cons of each.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代计算机系统中，保持准确的时间至关重要。为了做到这一点，我们的计算机通过使用某种实现的 **网络时间协议** (**NTP**) 从时间服务器获取当前时间。在本章中，我们将研究这些不同的实现，并讨论每个实现的优缺点。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将讨论以下主题：
- en: Understanding the importance of accurate time
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解准确时间的重要性
- en: Comparing NTP implementations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较 NTP 实现
- en: Understanding chrony
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 chrony
- en: Understanding `systemd-timesyncd`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 `systemd-timesyncd`
- en: Understanding the **Precision Time Protocol** (**PTP**)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 **精确时间协议** (**PTP**)
- en: All right, it's time to get started!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，开始吧！
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Timekeeping is done differently in the Ubuntu and RHEL worlds. So, we'll be
    using both Ubuntu Server and *two* AlmaLinux virtual machines to look at both
    of these.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 和 RHEL 世界中，时间同步的方式有所不同。因此，我们将同时使用 Ubuntu 服务器和 *两个* AlmaLinux 虚拟机来观察这两者。
- en: 'Check out the following link to see the Code in Action video: [https://bit.ly/3Dh4byf](https://bit.ly/3Dh4byf)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接，观看《代码实战》视频：[https://bit.ly/3Dh4byf](https://bit.ly/3Dh4byf)
- en: Understanding the importance of accurate time
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解准确时间的重要性
- en: Accurate timekeeping on computers wasn't always real important. My very first
    computer job involved working with a pair of transistorized computers that were
    each the size of a refrigerator, and that had orders of magnitude less processing
    power than a modern smartphone. There was no hardware clock, and there was no
    NTP. Every time we rebooted these beasts, we just looked at our notoriously inaccurate
    wall clock and manually entered the time from it. Things didn't change much with
    the early personal computers. I mean, you still had to set the time manually,
    but they did eventually come with battery-powered hardware clocks that would still
    keep time when you shut the computers down.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机上的准确时间同步曾经并不是那么重要。我的第一份计算机工作是处理一对晶体管计算机，它们每台都和冰箱差不多大，处理能力比现代智能手机低了几个数量级。没有硬件时钟，也没有
    NTP。每次我们重启这些庞然大物时，我们就看着那不怎么准的墙上时钟，手动输入从上面得到的时间。早期个人计算机的情况没有太大变化。就是说，你仍然需要手动设置时间，但它们最终配备了电池供电的硬件时钟，即使关机时钟也能继续保持。
- en: Nowadays, it's critically important for computers to maintain accurate time.
    Scientific computing, log keeping, database updating, and financial transactions
    all require it. Certain security protocols, such as Kerberos, DNSSEC, and **Transport
    Layer Security** (**TLS**) also require it. Modern stock exchanges use automated
    trading bots that require it. For these reasons and others besides, mankind invented
    the NTP.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，计算机保持准确的时间至关重要。科学计算、日志记录、数据库更新和金融交易都需要准确的时间。某些安全协议，如 Kerberos、DNSSEC 和 **传输层安全**
    (**TLS**) 也需要准确时间。现代股票交易所使用的自动化交易机器人也需要准确的时间。因此，出于这些和其他原因，人类发明了 NTP。
- en: The basic concept of NTP is easy to understand. Every modern operating system
    includes an NTP client. Every time you boot your computer, the NTP client obtains
    the correct time from a highly accurate NTP server that's someplace on the internet.
    To ensure even greater time accuracy, some organizations might use a local time
    source, which could be either a local server or something such as a GPS clock.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: NTP 的基本概念很容易理解。每个现代操作系统都包括一个 NTP 客户端。每次启动计算机时，NTP 客户端都会从互联网上某个高精度的 NTP 服务器获取正确的时间。为了确保更高的时间准确性，一些组织可能会使用本地时间源，这可以是本地服务器，也可以是类似
    GPS 时钟的设备。
- en: There are several software implementations of NTP. Let's do a quick comparison
    of them.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种软件实现的 NTP。我们来快速比较一下它们。
- en: Comparing NTP implementations
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较 NTP 实现
- en: The `ntpd`. It was created way back in the 1980s and served us well for a long
    time. You can use it on client machines to keep their time synchronized, or you
    can set it up as a time server. However, it does have several shortcomings, including
    numerous security problems that were found during a code audit in 2017.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`ntpd`。它创建于1980年代，并且长时间为我们提供了良好的服务。你可以在客户端机器上使用它来保持时间同步，或者可以将其设置为时间服务器。然而，它确实有几个缺点，包括在2017年代码审计中发现的许多安全问题。'
- en: 'The `chrony` implementation, which can also be used as either a client or a
    server, was created from scratch to fix the shortcomings of `ntpd`. Unlike `ntpd`,
    `chrony` has the following features:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`chrony` 实现可以作为客户端或服务器使用，它是从零开始创建的，旨在修复 `ntpd` 的不足。与 `ntpd` 不同，`chrony` 具有以下特点：'
- en: It works well on computers that have unstable network connections or that get
    turned off for long periods.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在网络连接不稳定或长时间关闭的计算机上运行良好。
- en: It works better with virtual machines.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在虚拟机中表现更好。
- en: It can adjust itself better when the speed of the hardware clock oscillator
    fluctuates due to a temperature change.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当硬件时钟振荡器的速度因温度变化而波动时，它能更好地调整自己。
- en: It can achieve sub-microsecond accuracy by using hardware timestamping and a
    hardware reference clock.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以通过使用硬件时间戳和硬件参考时钟实现亚微秒级精度。
- en: RHEL 7 and its clones were the first Linux distros to ship with `chrony` instead
    of `ntpd`. The RHEL 8 and SUSE distros also use `chrony` by default.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: RHEL 7 及其克隆版本是首个将 `chrony` 作为默认时间同步工具而不是 `ntpd` 的 Linux 发行版。RHEL 8 和 SUSE 发行版也默认使用
    `chrony`。
- en: Another alternative is `systemd-timesyncd`, which is part of the systemd ecosystem.
    Unlike `ntpd` and `chrony`, `systemd-timesyncd` is an implementation of the lighter-weight
    `systemd-timesyncd` lack some of the bells and whistles that NTP has. For example,
    you can't use them to set up a time server, and you can't use them with either
    hardware timestamping or hardware reference clocks. So, you can forget about getting
    that good sub-microsecond accuracy with `systemd-timesyncd`. On the other hand,
    SNTP and `systemd-timesyncd` might be all you need for most situations. Ubuntu
    uses `systemd-timesyncd` by default, and it will work fine for you most of the
    time. If it doesn't, it's easy to switch your machine over to `chrony`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个替代方案是 `systemd-timesyncd`，它是 systemd 生态系统的一部分。与 `ntpd` 和 `chrony` 不同，`systemd-timesyncd`
    是一个轻量级的实现，缺少 NTP 所具备的一些功能。例如，你不能用它来设置时间服务器，也不能与硬件时间戳或硬件参考时钟一起使用。所以，你可以忘记用 `systemd-timesyncd`
    获取那种精确到亚微秒的准确度。另一方面，SNTP 和 `systemd-timesyncd` 可能在大多数情况下已经足够用了。Ubuntu 默认使用 `systemd-timesyncd`，大多数时候它能正常工作。如果不能，你可以轻松将你的机器切换到
    `chrony`。
- en: The **Precision Time Protocol** (**PTP**) isn't an implementation of NTP. Rather,
    it's an entirely different protocol that's designed for extreme – and I do mean
    extreme – timekeeping accuracy. To use it, you must have a precision time source
    on the local network, and you must have switches and routers that can work with
    it. It uses hardware timestamping and hardware reference clocks to achieve picosecond
    accuracy.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**精确时间协议**（**PTP**）不是 NTP 的实现。实际上，它是一个完全不同的协议，旨在实现极其—我指的是真正极其—精确的时间同步。要使用它，你必须在本地网络中拥有一个精确的时间源，并且必须有能够与之协作的交换机和路由器。它通过硬件时间戳和硬件参考时钟来实现皮秒级精度。'
- en: Okay, that does it for our overview. Now, let's talk a bit about `chrony`. We'll
    look at it on the AlmaLinux machine since Alma uses it by default.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这就是我们的概述。现在，让我们稍微谈一下 `chrony`。我们将在 AlmaLinux 机器上查看它，因为 Alma 默认使用它。
- en: Understanding chrony on the AlmaLinux machine
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 AlmaLinux 机器上的 chrony。
- en: There are two components in the `chrony` system. We have `chronyd` as the daemon
    and `chronyc` as the user interface. The `chronyd` component can run in either
    client or server mode. First, let's look at the unit file for `chonyd`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`chrony` 系统中有两个组件。我们有作为守护进程的 `chronyd` 和作为用户界面的 `chronyc`。`chronyd` 组件可以在客户端或服务器模式下运行。首先，让我们看一下
    `chronyd` 的单元文件。'
- en: The chronyd.service file
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`chronyd.service` 文件'
- en: 'There are a few interesting things to look at in the `/lib/systemd/system/chronyd.service`
    file. In the `[Unit]` section, we have this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `/lib/systemd/system/chronyd.service` 文件中有一些有趣的内容。在 `[Unit]` 部分，我们有：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `Conflicts=` line indicates that we can''t run multiple NTP implementations
    together on the same machine. If systemd detects that either `ntpd` or `systemd-timesyncd`
    is running, then `chronyd` will fail to start. The `ConditionCapability=` line
    indicates that this service runs under a non-privileged account, even though no
    non-privileged user account is configured in either this unit file or in the `/etc/chrony.conf`
    file. Instead, `chronyd` is hardcoded to run under the non-privileged `chrony`
    account. We can confirm this with a simple `ps aux` command, like so:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`Conflicts=`行表示我们不能在同一台机器上运行多个NTP实现。如果systemd检测到`ntpd`或`systemd-timesyncd`正在运行，那么`chronyd`将无法启动。`ConditionCapability=`行表示这个服务是在一个非特权账户下运行的，尽管在这个单元文件或`/etc/chrony.conf`文件中并没有配置非特权用户账户。相反，`chronyd`被硬编码为在非特权的`chrony`账户下运行。我们可以通过简单的`ps
    aux`命令来确认这一点，如下所示：'
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Because `chronyd` does run under a non-privileged user account, we need to set
    the `CAP_SYS_TIME` capability for that non-privileged user account so that it
    can set the system time.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`chronyd`是以非特权用户账户运行的，我们需要为该非特权用户账户设置`CAP_SYS_TIME`能力，以便它能够设置系统时间。
- en: 'Next, let''s look at the `[Service]` section of the `chronyd.service` file:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们来看一下`chronyd.service`文件的`[Service]`部分：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `ExecStart=` line starts `chronyd` with options that it obtained from the
    file that''s referenced in the `EnvironmentFile=` line. If we go there, we''ll
    see that no options have been configured:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`ExecStart=`行使用从`EnvironmentFile=`行引用的文件中获取的选项来启动`chronyd`。如果我们查看该文件，会发现没有配置任何选项：'
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `chrony-helper` program that''s referenced in the `ExecStartPost=` line
    is a shell script that obtains the addresses of NTP servers from either a DHCP
    or a DNS server. At the moment, this line doesn''t do anything for us. This is
    because `chronyd` is currently configured to contact a pool of NTP servers that
    is listed in the `/etc/chrony.conf` file, as shown here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`ExecStartPost=`行中引用的`chrony-helper`程序是一个shell脚本，用于从DHCP或DNS服务器获取NTP服务器的地址。目前，这一行对我们没有任何作用。因为`chronyd`当前配置为连接一个列在`/etc/chrony.conf`文件中的NTP服务器池，如下所示：'
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: At the bottom of the `[Service]` section, we can see the `PrivateTmp=yes`, `ProtectHome=yes`,
    and `ProtectSystem=full` lines, which add a measure of security.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在`[Service]`部分的底部，我们可以看到`PrivateTmp=yes`、`ProtectHome=yes`和`ProtectSystem=full`行，这些配置增加了安全性。
- en: 'Finally, there''s the `[Install]` section of the `chronyd.service` file:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这是`chronyd.service`文件的`[Install]`部分：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Okay, there's nothing exciting here. It's just the standard `WantedBy=` line
    that makes this service run in multi-user mode.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这里没有什么特别的内容。它只是标准的`WantedBy=`行，用来使这个服务在多用户模式下运行。
- en: Next, let's look at the `chrony.conf` file.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们来看一下`chrony.conf`文件。
- en: The chrony.conf file
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`chrony.conf`文件'
- en: Most `chronyd` configuration is done in the `/etc/chrony.conf` file. (The only
    exception would be on those rare occasions where you might want to configure some
    options in the `/etc/sysconfig/chronyd` file.) I'm not going to cover every option
    in the file because you can read about them by going to the `chrony.conf` man
    page. However, I will point out a couple of things that you might need to reconfigure.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数`chronyd`配置都在`/etc/chrony.conf`文件中进行。（唯一的例外是在一些少见的情况下，你可能需要在`/etc/sysconfig/chronyd`文件中配置某些选项。）我不会覆盖文件中的每个选项，因为你可以通过查看`chrony.conf`的手册页来了解它们。然而，我会指出一些你可能需要重新配置的地方。
- en: 'By default, `chrony.conf` is configured to obtain the current time from a pool
    of time servers that are out on the internet, as we see here:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`chrony.conf`配置为从一组位于互联网的时间服务器获取当前时间，如下所示：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `iburst` option at the end allows `chronyd` to update the clock a bit faster
    when you first boot up the machine. Large organizations might have local timeservers
    to prevent all machines on their network from going out to the internet to obtain
    the time. In those cases, you would need to configure this line with the IP address
    of the local timeserver. (We'll look at this a bit later when we set up a time
    server.)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`iburst`选项在末尾允许`chronyd`在首次启动机器时稍微加快时间同步的速度。大型组织可能会有本地时间服务器，以防止其网络上的所有机器都连接到互联网获取时间。在这种情况下，你需要用本地时间服务器的IP地址配置这一行。（当我们设置时间服务器时稍后会看到这一点。）'
- en: 'For increased timekeeping accuracy, you can enable hardware timestamping by
    removing the `#` symbol from the beginning of the following line:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高时间同步的准确性，你可以通过去掉以下行前面的`#`符号来启用硬件时间戳：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The only catch is that the network interface adapters in your computer must
    support hardware timestamping. To verify that, use the `ethtool -T` command, followed
    by the name of your network interface adapter. Here''s what that looks like on
    one of my old 2009-model Hewlett-Packard machines:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的限制是，计算机中的网络接口适配器必须支持硬件时间戳。要验证这一点，可以使用`ethtool -T`命令，后跟网络接口适配器的名称。以下是在我的一台2009年款惠普机器上的示例：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Well, that''s not good. There''s no PTP hardware clock, and there''s no hardware
    timestamping. Let''s see if things look any better on my Dell Precision workstation,
    which is several years newer:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，这可不行。没有PTP硬件时钟，也没有硬件时间戳。我们来看看我的戴尔Precision工作站，它是几年前更新的：
- en: '![](img/Figure_16.1_B17491.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_16.1_B17491.jpg)'
- en: Figure 16.1 – Hardware timestamping on my Dell Precision T3610 workstation
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.1 - 我的戴尔Precision T3610工作站上的硬件时间戳
- en: Yes, this does look better. We see a PTP hardware clock and hardware timestamping.
    The bad part is that at the moment, I can't take advantage of this, because this
    machine is running Lubuntu Linux. Lubuntu, just like Ubuntu, runs `systemd-timesyncd`,
    which can't take advantage of hardware timestamping. But that's okay for now.
    If I were to ever feel the need to, I could easily switch this machine over to
    `chrony`. (I'll show you how to do that in just a bit.)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，这看起来确实好多了。我们看到了PTP硬件时钟和硬件时间戳。不好的一点是，目前我无法利用这个功能，因为这台机器运行的是Lubuntu Linux。Lubuntu就像Ubuntu一样，运行`systemd-timesyncd`，它无法利用硬件时间戳。但目前没关系。如果我真的需要，我可以很容易地将这台机器切换到`chrony`。（我稍后会展示如何做。）
- en: 'Now, let''s skip to the bottom of the `chrony.conf` file, where we see these
    lines:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们跳到`chrony.conf`文件的底部，在那里我们看到这些行：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here, we can see that it''s configured to store `chronyd` logs in the `/var/log/chrony/`
    directory. But if we were to go there now, we''d see nothing but an empty directory.
    That''s because the line at the bottom, which tells `chronyd` what information
    to log, is commented out. To change that, just remove the `#` symbol from the
    beginning of the line so that it now looks like this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到它被配置为将`chronyd`日志存储在`/var/log/chrony/`目录中。但是，如果我们现在去那里，我们会看到一个空目录。这是因为底部的那一行，告诉`chronyd`记录哪些信息，已经被注释掉了。要改变这一点，只需删除行首的`#`符号，让它看起来像这样：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, restart `chronyd`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，重新启动`chronyd`：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You should now see log files in the `/var/log/chrony/` directory:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该能在`/var/log/chrony/`目录中看到日志文件：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This pretty much covers the basics. Let's get a bit fancier by setting up a
    `chronyd` time server.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上涵盖了基础内容。让我们通过设置一个`chronyd`时间服务器来让它更高级一些。
- en: Setting up a chronyd time server
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置一个chronyd时间服务器
- en: For this demo, you'll need two Alma virtual machines. We'll set up one as the
    time server and the other to use the time server. (Ideally, we'd want the time
    server to have a static IP address, but we won't worry about that for now.)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个演示，你需要两台Alma虚拟机。我们将设置一台作为时间服务器，另一台使用时间服务器。（理想情况下，我们希望时间服务器有一个静态IP地址，但我们现在不考虑这一点。）
- en: 'On the time server machine, edit the `/etc/chrony.conf` file. Here''s the line
    that you''ll change:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在时间服务器机器上，编辑`/etc/chrony.conf`文件。这里是你将要修改的那一行：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Remove `#` from the beginning of the line and change the network address so
    that it matches your own. For me, the network address is correct, but the netmask
    is wrong. So, I''ll change the line so that it looks like this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 删除行首的`#`并更改网络地址，使其与你自己的地址匹配。对我来说，网络地址是正确的，但子网掩码是错误的。所以，我会将这一行改成这样：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, restart `chronyd`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，重新启动`chronyd`：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The final step for setting up the time server is to open the appropriate firewall
    ports:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 设置时间服务器的最后一步是打开适当的防火墙端口：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, switch over to the other Alma virtual machine and edit the `/etc/chrony.conf`
    file on it. Comment out the `pool` line and add a line that points to the IP address
    of the time server virtual machine. The two lines should now look something like
    this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，切换到另一个Alma虚拟机并编辑其`/etc/chrony.conf`文件。注释掉`pool`行，并添加一行，指向时间服务器虚拟机的IP地址。现在这两行应该看起来像这样：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Save the file and restart the `chronyd` service. When you look at the status
    of `chronyd`, you should see that this machine now obtains its time from your
    time server. It should look something like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并重新启动`chronyd`服务。当你查看`chronyd`的状态时，你应该能看到这台机器现在从你的时间服务器获取时间。它应该看起来像这样：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Sometimes need to preface this command with sudo in order to see information
    about the network time sources.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有时需要在这个命令前加上sudo才能查看网络时间源的信息。
- en: That's all there is to it. Let's change gears now and look at the `chronyc`
    client utility.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这些。现在让我们换个话题，来看一下 `chronyc` 客户端工具。
- en: Using chronyc
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 chronyc
- en: 'You can use the `chronyc` utility to either look at information about the `chronyd`
    service or to dynamically configure certain aspects of the `chronyd` service.
    Let''s start by looking at tracking information on our time server:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `chronyc` 工具查看关于 `chronyd` 服务的信息，或者动态配置 `chronyd` 服务的某些方面。让我们从查看时间服务器的跟踪信息开始：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Rather than go over everything here, I'm going to let you read about it by going
    to the `chronyc` man page. However, I do want to talk about the `Reference ID`
    line at the top.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我不打算在这里讲解所有内容，而是让你通过查看 `chronyc` 手册页来阅读相关内容。然而，我确实想谈谈顶部的 `Reference ID` 行。
- en: The `Reference ID` line just tells us the hostname or the IP address of the
    remote time server that this local timeserver is synchronized to. We see that
    this local time server is synchronized to a remote time server that's operated
    either by Comcast or by an organization that uses Comcast hosting. Note that this
    remote time server is a member of the pool that's configured in the `chrony.conf`
    file.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`Reference ID` 行只是告诉我们本地时间服务器所同步的远程时间服务器的主机名或 IP 地址。我们看到这个本地时间服务器同步到了一个远程时间服务器，该服务器由
    Comcast 或者使用 Comcast 托管的某个组织运营。请注意，这个远程时间服务器是 `chrony.conf` 文件中配置的池的一部分。'
- en: 'Now, let''s look at the Alma machine that we set up as a client of this local
    time server:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下我们设置的作为本地时间服务器客户端的 Alma 机器：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As expected, we see the IP address of the local time server.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，我们看到了本地时间服务器的 IP 地址。
- en: 'The `sources` command will show you all of the time servers that our machine
    can access. Here are the time servers that are in the default pool for the Alma
    machines:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`sources` 命令将显示我们机器可以访问的所有时间服务器。以下是 Alma 机器默认池中的时间服务器：'
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As before, I'll let you look at the `chronyc` man page to see what all the fields
    are.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我会让你查看 `chronyc` 手册页，了解所有字段的含义。
- en: 'So far, we''ve been able to look at everything with normal user privileges.
    Looking at other types of information might require `sudo` privileges, as we see
    here on the time server:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们可以使用普通用户权限查看所有内容。查看其他类型的信息可能需要 `sudo` 权限，正如我们在时间服务器上看到的那样：
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Very cool. We see the IP address of the virtual machine that we set up as a
    client of this local time server.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 非常酷。我们可以看到我们设置的作为本地时间服务器客户端的虚拟机的 IP 地址。
- en: 'Just for fun, let''s see how much work our local time server has been doing:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 只是为了好玩，我们来看一下本地时间服务器做了多少工作：
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This shows the number of NTP packets and command packets that were received
    from the clients.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了从客户端接收到的 NTP 包和命令包的数量。
- en: There's a whole lot more to this command than what I can show you here. Your
    best bet is to read all about it by going to the `chronyc` man page.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令远比我在这里展示的要复杂得多。你最好的选择是阅读 `chronyc` 手册页来了解它。
- en: That's about it for `chronyd` and `chronyc`. So, let's shift over to the Ubuntu
    machine and look at `systemd-timesyncd`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 `chronyd` 和 `chronyc` 的内容了。那么，让我们切换到 Ubuntu 机器，看看 `systemd-timesyncd`。
- en: Understanding systemd-timesyncd
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 systemd-timesyncd
- en: Ubuntu uses `systemd-timesyncd` by default. It's a simple, lightweight system
    that's easy to configure. Before we get to that, let's take a quick look at the
    `systemd-timesyncd.service` file.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu 默认使用 `systemd-timesyncd`。它是一个简单、轻量级的系统，易于配置。在我们深入之前，让我们快速查看一下 `systemd-timesyncd.service`
    文件。
- en: The systemd-timesyncd.service file
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`systemd-timesyncd.service` 文件'
- en: 'The `[Unit]` section of the `/lib/systemd/system/systemd-timesyncd.service`
    file looks like this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`/lib/systemd/system/systemd-timesyncd.service` 文件的 `[Unit]` 部分如下所示：'
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note the `ConditionVirtualization=!container` line. The `ConditionVirtualization=`
    part checks to see if the operating system is running in a virtualized environment.
    In this case, it wants to see whether it's running in a container. The `!` in
    front of `container` denotes a negation. In other words, if systemd detects that
    this operating system is running in a container, then the `systemd-timesyncd`
    service won't start.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `ConditionVirtualization=!container` 行。`ConditionVirtualization=` 部分检查操作系统是否在虚拟化环境中运行。在这种情况下，它检查是否在容器中运行。`!`
    放在 `container` 前面表示否定。换句话说，如果 systemd 检测到该操作系统在容器中运行，那么 `systemd-timesyncd` 服务就不会启动。
- en: 'In the `[Service]` section, you''ll see a lot more security-related parameters
    than you saw in the `chronyd.service` file on the Alma machine. There are so many
    that I can only show you some of them here:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在`[Service]`部分，你会看到比Alma机器上的`chronyd.service`文件中更多与安全相关的参数。由于数量众多，我只能在这里展示其中的一些：
- en: '[PRE25]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This makes sense, considering that Ubuntu uses AppArmor as its mandatory access
    control system instead of SELinux, which is what the Alma machine uses. A default
    configuration of AppArmor doesn't provide near as much protection as a default
    configuration of SELinux, so it makes sense to include more security directives
    in this service file. Also, note the `User=systemd-timesync` line, which configures
    the non-privileged user account for this service.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这很有道理，因为Ubuntu使用AppArmor作为其强制访问控制系统，而不是像Alma机器那样使用SELinux。AppArmor的默认配置提供的保护远不如SELinux的默认配置，因此在这个服务文件中加入更多的安全指令是合理的。此外，请注意`User=systemd-timesync`这一行，它配置了该服务的非特权用户账户。
- en: 'The `[Install]` section is a bit different from what we''re used to:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`[Install]`部分与我们通常看到的略有不同：'
- en: '[PRE26]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Instead of getting started as part of `multi-user.target`, `systemd-timesyncd`
    gets started as part of `sysinit.target`. So, it gets started much earlier in
    the boot process.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 与作为`multi-user.target`的一部分启动不同，`systemd-timesyncd`作为`sysinit.target`的一部分启动。因此，它在启动过程中更早启动。
- en: Next, let's briefly look at how to configure `systemd-timesyncd`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们简要地看一下如何配置`systemd-timesyncd`。
- en: The timesyncd.conf file
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: timesyncd.conf文件
- en: 'When I said that we''ll *briefly* cover this, I really did mean *briefly*.
    That''s because there''s not a whole lot to configure. Here''s the entirety of
    the `/etc/systemd/timesyncd.conf` file:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当我说我们会*简要*讲解时，我确实是指*简要*。因为配置的内容不多。以下是`/etc/systemd/timesyncd.conf`文件的全部内容：
- en: '[PRE27]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Everything is commented out, which means that everything is set with its default
    values. The first thing to notice is that there's nothing set for the `NTP=` line
    and that the `FallbackNTP=` line points to a pool of time servers at [ntp.ubuntu.com](http://ntp.ubuntu.com).
    So, this machine will only obtain its time from one of the time servers that's
    in that pool. The remaining three parameters are set with sane values that you'll
    likely never have to change. (I'll let you read about them in the `timesyncd.conf`
    man page.)
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都被注释掉了，这意味着所有设置都使用默认值。首先需要注意的是，`NTP=`这一行没有设置，`FallbackNTP=`这一行指向了一个时间服务器池[ntp.ubuntu.com](http://ntp.ubuntu.com)。因此，这台机器只会从该池中的一个时间服务器获取时间。剩下的三个参数设置了合理的默认值，通常你不需要更改它们。（我会让你去阅读`timesyncd.conf`手册页来了解它们。）
- en: That's enough about this file for now. Now, let's look at a couple of `timedatectl`
    options.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 目前关于这个文件的内容已经足够了。现在，让我们看一下几个`timedatectl`选项。
- en: Using timedatectl
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用timedatectl
- en: 'Two `timedatectl` viewing options are specific to `systemd-timesyncd`. The
    `timesync-status` option looks like this:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个`timedatectl`查看选项是特定于`systemd-timesyncd`的。`timesync-status`选项看起来像这样：
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: At the top, we see the remote time server that this machine accesses, and we
    see that it's a member of the [ntp.ubunutu.com](http://ntp.ubunutu.com) pool.
    Further down, we see that `Rootdistance` from the time servers comes in at 45.07
    milliseconds, which is well within the five seconds that's set in the `timesyncd.conf`
    file.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件顶部，我们看到了这台机器访问的远程时间服务器，并且它是[ntp.ubunutu.com](http://ntp.ubunutu.com)池的成员。进一步来看，我们看到从时间服务器获取的`Rootdistance`为45.07毫秒，远低于`timesyncd.conf`文件中设置的五秒。
- en: 'The other `timedatectl` option is `show-timesync`, which looks something like
    this:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个`timedatectl`选项是`show-timesync`，其输出类似于以下内容：
- en: '[PRE29]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This shows the same information that's in the `timesync-status` option, except
    that it's now in a machine-readable format.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了与`timesync-status`选项相同的信息，只不过现在是机器可读的格式。
- en: 'Next, let''s edit the `/etc/systemd/timesyncd.conf` file so that this machine
    will obtain its time from our local AlmaLinux time server. We''ll just uncomment
    the `#NTP=` line and add the IP address of the Alma machine. It should now look
    something like this:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们编辑`/etc/systemd/timesyncd.conf`文件，使这台机器从我们的本地AlmaLinux时间服务器获取时间。我们只需取消注释`#NTP=`这一行，并添加Alma机器的IP地址。现在它应该看起来像这样：
- en: '[PRE30]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'After restarting the `systemd-timesyncd` service, we should see that this machine
    now obtains its time from our local time server, as we see here:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在重启`systemd-timesyncd`服务后，我们应该看到这台机器现在从我们的本地时间服务器获取时间，正如我们在这里看到的：
- en: '[PRE31]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: There's an excellent chance that `systemd-timedatectl` is all you'll ever need.
    But what if you really need the extra features and precision that come with `chrony`?
    Well, let's see if we can switch our Ubuntu machine over to `chrony`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 很有可能，`systemd-timedatectl`已经满足了你的所有需求。但如果你确实需要`chrony`带来的额外功能和精度呢？那么，让我们看看是否可以将我们的Ubuntu机器切换到`chrony`。
- en: Configuring Ubuntu to use chrony
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Ubuntu使用chrony
- en: 'The first step is to stop and disable `systemd-timesyncd`, like this:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是停止并禁用`systemd-timesyncd`，如下面所示：
- en: '[PRE32]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now, install the `chrony` package, like this:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，安装`chrony`软件包，如下所示：
- en: '[PRE33]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Since this is Ubuntu, the `chronyd` service will be enabled and started automatically
    when the installation completes. The only difference from what you saw on the
    Alma machine is that the `chrony.conf` file on Ubuntu is in the `/etc/chrony/`
    directory.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是Ubuntu，`chronyd`服务将在安装完成后自动启用并启动。与在Alma机器上看到的唯一不同之处在于，Ubuntu上的`chrony.conf`文件位于`/etc/chrony/`目录。
- en: Sometimes, you just need to be precise. So, let's talk a bit about PTP.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你只需要精确一些。那么，我们来聊一聊PTP。
- en: Understanding the Precision Time Protocol
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解精确时间协议
- en: For many financial, scientific, and enterprise applications, you've just got
    to have the most accurate time possible. In these instances, getting the time
    from a remote time server on the Internet just doesn't meet your needs. So, you
    need something better. With proper hardware, **PTP** can keep your network time
    synchronized to picosecond accuracy. The whole explanation of PTP is rather complex,
    so allow me to simplify things a bit.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多金融、科学和企业应用，你必须获得最精确的时间。在这些情况下，从互联网上的远程时间服务器获取时间是不足够的。所以，你需要更好的解决方案。通过适当的硬件，**PTP**可以将你的网络时间同步到皮秒级精度。PTP的整个解释相当复杂，因此让我简化一下。
- en: An overview of PTP
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PTP概述
- en: Unlike NTP, PTP cannot obtain its time from a remote time server that's out
    on the internet. Instead, PTP can only be used within a `sync` messages out to
    the network. The client devices will respond by sending back `delay request` messages,
    and the Grandmaster Clock will respond with `delay response` messages. The network
    packets that carry these messages all have timestamps that will be used in the
    calculations for figuring out how to adjust the time on the network devices. To
    make this all work, your network must be set up with switches and routers that
    can transfer these messages.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 与NTP不同，PTP不能从互联网上的远程时间服务器获取时间。相反，PTP只能在`同步`消息发送到网络的范围内使用。客户端设备将通过发送`延迟请求`消息进行响应，主时钟将通过`延迟响应`消息进行回应。携带这些消息的网络数据包都具有时间戳，这些时间戳将用于计算如何调整网络设备上的时间。为了使这一切正常工作，你的网络必须配置有能够传输这些消息的交换机和路由器。
- en: 'In addition to the Grandmaster Clock, there are three other types of clocks
    that can be found on a PTP network:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 除了主时钟之外，PTP网络上还可以找到其他三种类型的时钟：
- en: '**Ordinary clocks**: These clocks are on the end user devices such as servers,
    desktop clients, IoT devices, and so forth.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**普通时钟**：这些时钟位于终端用户设备上，如服务器、桌面客户端、物联网设备等。'
- en: '**Transparent clocks**: These are the network switches that transfer the messages
    between the Grandmaster Clock and the ordinary clocks. Transparent clocks can''t
    send messages beyond their VLAN boundaries.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**透明时钟**：这些是传递消息的网络交换机，用于在主时钟和普通时钟之间传输信息。透明时钟不能发送超出其VLAN边界的消息。'
- en: '`delay request` messages.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`延迟请求`消息。'
- en: It is possible to set up a Linux server as a boundary clock, but you probably
    won't. Most likely, your organization will obtain its transparent clocks and boundary
    clocks from its preferred network equipment vendor, such as Cisco or Juniper.
    So, how would you use PTP with Linux? Mostly, you'd just set up PTP on your servers,
    desktop machines, and IoT devices so that they would obtain their time from a
    PTP server rather than from an NTP server. Let's check it out.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将Linux服务器设置为边界时钟，但你可能不会这样做。很可能，你的组织将从其首选的网络设备供应商（如Cisco或Juniper）处获得透明时钟和边界时钟。那么，你如何在Linux上使用PTP呢？通常，你只需要在服务器、桌面机器和物联网设备上设置PTP，使它们从PTP服务器获取时间，而不是从NTP服务器获取时间。让我们来看看吧。
- en: Installing PTP
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装PTP
- en: 'To set up either a Linux server, a Linux desktop, or a Linux IoT device to
    obtain its time from a PTP source, you''ll have to install the `linuxptp` package.
    On the Alma machine, you''d do:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要将Linux服务器、Linux桌面或Linux物联网设备设置为从PTP源获取时间，你需要安装`linuxptp`软件包。在Alma机器上，你可以执行：
- en: '[PRE34]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'On the Ubuntu machine, you''d do:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu机器上，你可以执行：
- en: '[PRE35]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Next, stop and disable whichever timekeeping service your machine is running.
    If your machine is running `chroynd`, the command would be:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，停止并禁用你机器上正在运行的任何时间同步服务。如果你的机器正在运行`chronyd`，命令如下：
- en: '[PRE36]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If your machine is running `systemd-timesyncd`, the command would be:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的机器正在运行`systemd-timesyncd`，命令如下：
- en: '[PRE37]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Installing the `linuxptp` package installs two different services, which are
    the `ptp4l` service and the `phc2sys` service. Before we can enable or start the
    PTP services, we'll need to configure them. Let's look at how to do this on the
    Alma machine.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`linuxptp`软件包会安装两个不同的服务，即`ptp4l`服务和`phc2sys`服务。在启用或启动PTP服务之前，我们需要先配置它们。让我们看看如何在Alma系统上配置。
- en: Configuring PTP with software timestamping on AlmaLinux
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在AlmaLinux上配置PTP，使用软件时间戳
- en: 'The first step is to edit the `/etc/sysconfig/ptp4l` file. When you first open
    the file, you''ll see this:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是编辑`/etc/sysconfig/ptp4l`文件。第一次打开文件时，你会看到如下内容：
- en: '[PRE38]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This default configuration is for a master server, and it has the wrong network
    adapter name. We''ll add the `-s` option to make this run in client mode and change
    the network adapter''s name. You won''t have hardware timestamping available on
    your virtual machines, even if it is available on the network adapter of your
    host computer. To deal with that, we''ll also add the `-S` option to make it use
    software timestamping. The edited line should look something like this:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这个默认配置是为主服务器设置的，但它有错误的网络适配器名称。我们将添加`-s`选项使其以客户端模式运行，并更改网络适配器的名称。即使主机计算机的网络适配器支持硬件时间戳，你的虚拟机也无法使用硬件时间戳。为了解决这个问题，我们还将添加`-S`选项，使用软件时间戳。编辑后的行应该如下所示：
- en: '[PRE39]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: (Of course, use your own network adapter's name in place of mine.)
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: （当然，请使用你自己网络适配器的名称代替我的名称。）
- en: 'Now, enable and start the `ptp4l` service:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，启用并启动`ptp4l`服务：
- en: '[PRE40]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The service does run, even though there''s no PTP time source on my network.
    Regardless, the last line of the `systemctl status` output shows that the `ptp4l`
    service has selected the best master clock. I have no idea where that clock is,
    but it doesn''t matter. In a real-life scenario, you would know because you''d
    be dealing with a real clock:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我的网络中没有PTP时间源，服务仍然在运行。不管怎样，`systemctl status`输出的最后一行显示`ptp4l`服务选择了最好的主时钟。我不知道那个时钟在哪里，但这并不重要。在实际场景中，你会知道，因为你会在处理一个真实的时钟：
- en: '[PRE41]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Okay, we're good with the software timestamping. Now, let's look at hardware
    timestamping.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，软件时间戳的部分没问题。现在，让我们来看一下硬件时间戳部分。
- en: Configuring PTP with hardware timestamping on AlmaLinux
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在AlmaLinux上配置PTP，使用硬件时间戳
- en: Using hardware timestamping gives you the most precise timekeeping that you
    can get. The only catch is that the network interface adapters on your machine
    have to be capable of doing hardware timestamping. Fortunately, that shouldn't
    be a problem with newer computers. (In the *Understanding chrony* section, I showed
    you how to verify whether your network adapter does support hardware timestamping.)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 使用硬件时间戳能够提供最精确的时间同步。唯一的问题是，你的计算机上的网络接口适配器必须能够支持硬件时间戳。幸运的是，对于较新的计算机来说，这通常不是问题。（在*理解chrony*部分，我向你展示了如何验证你的网络适配器是否支持硬件时间戳。）
- en: 'The first step is to edit the `/etc/sysconfig/ptp4l` file, as you did previously.
    This time, leave out the `-S` option so that the edited line looks like this:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是编辑`/etc/sysconfig/ptp4l`文件，就像之前做的那样。这次，省略`-S`选项，使编辑后的行如下所示：
- en: '[PRE42]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Next, you''ll need to configure and enable the `phc2sys` service so that the
    computer clock can synchronize with the PTP hardware clock that''s in the network
    adapter. The first step is to configure the `/etc/sysconfig/phc2sys` file. By
    default, the file looks like this:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要配置并启用`phc2sys`服务，以便计算机时钟可以与网络适配器中的PTP硬件时钟同步。第一步是配置`/etc/sysconfig/phc2sys`文件。默认情况下，文件内容如下：
- en: '[PRE43]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Change that line so that it looks something like this:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 将该行更改为如下所示：
- en: '[PRE44]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Here''s the breakdown:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是解释：
- en: '`-c CLOCK_REALTIME`: The `-c` option specifies the clock that is to be synchronized.
    `CLOCK_REALTIME` is the normal computer clock.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-c CLOCK_REALTIME`：`-c`选项指定要同步的时钟。`CLOCK_REALTIME`是普通计算机时钟。'
- en: '`-s enp0s3`: In this file, `-s` specifies the device that will be used for
    synchronization. In this case, we''re using the PTP hardware clock that''s in
    the `enp0s3` network adapter to synchronize the normal system clock.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-s enp0s3`：在这个文件中，`-s`指定了用于同步的设备。在本例中，我们使用的是位于`enp0s3`网络适配器中的PTP硬件时钟来同步普通系统时钟。'
- en: '`-w`: This tells the `phc2sys` service to wait until the `ptp4l` service is
    in a synchronized state before attempting to synchronize the system clock.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final step is to restart the `ptp4l` service and to enable and start the
    `phc2sys` service. Note that this will fail on your virtual machine because the
    VirtualBox network adapter doesn't have a PTP hardware clock. When you've seen
    what you need to see, disable the `ptp4l` and `phc2sys` services and re-enable
    the `chronyd` service.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's look at how to do all of this on Ubuntu.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Configuring PTP with software timestamping on Ubuntu
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are no supplementary PTP configuration files on Ubuntu, so you''ll need
    to edit the `ptp4l.service` file. Start by doing:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In the `[Service]` section, you''ll need to change the `ExecStart` line, which
    looks like this:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Change it so that it looks something like this:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Finally, enable and start the `ptp4l` service, as you did previously on the
    Alma machine.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's wrap this up by configuring hardware timestamping on Ubuntu.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Configuring PTP with hardware timestamping on Ubuntu
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Again, start by editing the `ptp4l.service` file. This time, enable hardware
    timestamping by leaving out the `-S` option so that the `ExecStart` line will
    look like this:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Next, edit the `phc2sys.service` file by doing:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'In the `[Service]` section, make the `ExecStart` line look something like this:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The final step is to restart the `ptp4l` service and to enable and start the
    `phc2sys` service. Alas, that will also fail this time, due to not having the
    PTP hardware clock in the VirtualBox network adapter. When you've seen what you
    want to see, change the virtual machine back to whichever timekeeping service
    that you were using before.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: All right, that's it for timekeeping. I think it's time to wrap this baby up.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As always, we've covered a lot of ground and had a bit of fun in the process.
    We started by discussing why accurate timekeeping is so important and then did
    a quick overview of the various implementations of timekeeping software. We then
    took a detailed look at `chrony` and `systemd-timesyncd`. We wrapped up with a
    quick look at PTP.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll look at systemd's relationship with boot managers
    and bootloaders. I'll see you there.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to test your knowledge of this chapter:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: In the `chrony.conf` file, which of the following lines will allow `chronyd`
    to function as a time server?
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `network 192.168.0.0/24`
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: B. `allow 192.168.0.0/24`
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: C. `permit 192.168.0.0/24`
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: D. `listen 192.168.0.0/24`
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How would you set up `systemd-timesyncd` to function as a time server? (We will
    assume that we're on the `192.168.0.0/24` network.)
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. Add a `network 192.168.0.0/24` line to the `timesyncd.conf` file.
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: B. Add a `permit` `192.168.0.0/24` line to the `timesyncd.conf` file.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: C. Add an `allow` `192.168.0.0/24` line to the `timesyncd.conf` file.
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: D. You can't.
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For dealing with PTP, which of the following clock types allows messages to
    flow between the PTP master clock and the client machines on the same VLAN?
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. Boundary clocks
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: B. Grandmaster clocks
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: C. Router clocks
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: D. Transparent clocks
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When dealing with PTP, which service causes a machine's system clock to synchronize
    with the PTP hardware clock in the network adapter?
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. phc2sys
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: B. ptp4l
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: C. ptp
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: D. clock
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Answers
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: B
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: D
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: D
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn more about the topics covered in this chapter, take a look at the
    following resources:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: 'GPS clocks: [https://timetoolsltd.com/category/gps-clocks/](https://timetoolsltd.com/category/gps-clocks/)'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chrony` versus `systemd-timesyncd`: [https://unix.stackexchange.com/questions/504381/chrony-vs-systemd-timesyncd-what-are-the-differences-and-use-cases-as-ntp-cli](https://unix.stackexchange.com/questions/504381/chrony-vs-systemd-timesyncd-what-are-the-differences-and-use-cases-as-ntp-cli)'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chrony` versus `ntp`: [https://chrony.tuxfamily.org/comparison.html](https://chrony.tuxfamily.org/comparison.html)'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PTP versus NTP: [https://www.masterclock.com/support/library/network-timing-ntp-vs-ptp](https://www.masterclock.com/support/library/network-timing-ntp-vs-ptp)'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Red Hat''s official `chrony` documentation: [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_basic_system_settings/using-chrony-to-configure-ntp](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_basic_system_settings/using-chrony-to-configure-ntp)'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Introduction to the Precision Time Protocol: [https://youtu.be/ovzt3IUFbyo](https://youtu.be/ovzt3IUFbyo)'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Precision Time Protocol Clock Types: [https://youtu.be/rbb9DcIGLKY](https://youtu.be/rbb9DcIGLKY)'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
