- en: 30\. Working with Containers on Ubuntu
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 30\. 在 Ubuntu 上使用容器
- en: Now that the basics of Linux Containers have been covered in the previous chapter,
    this chapter will demonstrate how to create and manage containers using the Podman,
    Skopeo, and Buildah tools on Ubuntu. It is intended that by the end of this chapter,
    you will have a clearer understanding of how to create and manage containers on
    Ubuntu and will have gained a knowledge foundation on which to continue exploring
    the power of Linux Containers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，上一章已涵盖了 Linux 容器的基础，本章将演示如何使用 Podman、Skopeo 和 Buildah 工具在 Ubuntu 上创建和管理容器。本章的目的是让你在结束时能更清楚地了解如何在
    Ubuntu 上创建和管理容器，并为继续探索 Linux 容器的强大功能打下知识基础。
- en: 30.1 Installing the Container Tools
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 30.1 安装容器工具
- en: 'Before starting with containers, the first step is to install all of the container
    tools outlined in the previous chapter using the following commands:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用容器之前，第一步是安装前一章中列出的所有容器工具，使用以下命令：
- en: apt install curl
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: apt install curl
- en: . /etc/os-release
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: . /etc/os-release
- en: sh -c "echo 'deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/
    /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: sh -c "echo 'deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/
    /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"
- en: curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/Release.key
    | sudo apt-key add -
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/Release.key
    | sudo apt-key add -
- en: apt update
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: apt install curl
- en: apt install podman skopeo buildah
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: apt install podman skopeo buildah
- en: 30.2 Pulling a Container Image
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 30.2 拉取容器镜像
- en: 'For this example, the most recent Ubuntu release will be pulled from the registry.
    Before pulling an image, however, information about the image repository can be
    obtained using the skopeo tool, for example:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，将从注册表中拉取最新的 Ubuntu 版本。然而，在拉取镜像之前，可以使用 skopeo 工具获取关于镜像仓库的信息，例如：
- en: $ skopeo inspect docker://docker.io/ubuntu
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: $ skopeo inspect docker://docker.io/ubuntu
- en: '{'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"Name": "docker.io/library/ubuntu",'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '"名称": "docker.io/library/ubuntu",'
- en: '"Digest": "sha256:bec5a2727be7fff3d308193cfde3491f8fba1a2ba392b7546b43a051853a341d",'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '"摘要": "sha256:bec5a2727be7fff3d308193cfde3491f8fba1a2ba392b7546b43a051853a341d",'
- en: '"RepoTags": ['
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '"RepoTags": ['
- en: '"10.04",'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '"10.04",'
- en: '"12.04.5",'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '"12.04.5",'
- en: '"12.04",'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '"12.04",'
- en: '"12.10",'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '"12.10",'
- en: '"13.04",'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '"13.04",'
- en: '"13.10",'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '"13.10",'
- en: '"14.04.1",'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '"14.04.1",'
- en: '"14.04.2",'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '"14.04.2",'
- en: '"14.04.3",'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '"14.04.3",'
- en: '"14.04.4",'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '"14.04.4",'
- en: '"14.04.5",'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '"14.04.5",'
- en: '"14.04",'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '"14.04",'
- en: '"14.10",'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '"14.10",'
- en: '"15.04",'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '"15.04",'
- en: .
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: .
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: '],'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '"Created": "2023-06-28T08:42:50.42500211Z",'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '"创建时间": "2023-06-28T08:42:50.42500211Z",'
- en: '"DockerVersion": "20.10.21",'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '"Docker版本": "20.10.21",'
- en: '"Labels": {'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '"标签": {'
- en: '"org.opencontainers.image.ref.name": "ubuntu",'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '"org.opencontainers.image.ref.name": "ubuntu",'
- en: '"org.opencontainers.image.version": "22.04"'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '"org.opencontainers.image.version": "22.04"'
- en: '},'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '"Architecture": "arm64",'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '"架构": "arm64",'
- en: '"Os": "linux",'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '"操作系统": "linux",'
- en: '"Layers": ['
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '"层": ['
- en: '"sha256:5af00eab97847634d0b3b8a5933f52ca8378f5f30a2949279d682de1e210d78b"'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '"sha256:5af00eab97847634d0b3b8a5933f52ca8378f5f30a2949279d682de1e210d78b"'
- en: '],'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '"Env": ['
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '"环境": ['
- en: '"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"'
- en: ']'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '}'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'For example, to pull the latest Ubuntu image:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要拉取最新的 Ubuntu 镜像：
- en: $ podman pull docker://docker.io/ubuntu:latest
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman pull docker://docker.io/ubuntu:latest
- en: Trying to pull docker.io/library/ubuntu:latest...
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 正在尝试拉取 docker.io/library/ubuntu:latest...
- en: Getting image source signatures
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正在获取镜像源签名
- en: Copying blob 5af00eab9784 done
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正在复制 blob 5af00eab9784 完成
- en: Copying config 37f7489146 done
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正在复制配置 37f7489146 完成
- en: Writing manifest to image destination
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正在将清单写入镜像目标
- en: Storing signatures
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 存储签名
- en: 37f74891464b2067aacbde60d9e2888e002af047a0d5dfc0b06b701928e0b473
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 37f74891464b2067aacbde60d9e2888e002af047a0d5dfc0b06b701928e0b473
- en: 'Verify that the image has been stored by asking podman to list all local images:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通过请求 podman 列出所有本地镜像来验证镜像是否已存储：
- en: $ podman images
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman images
- en: REPOSITORY TAG IMAGE ID CREATED SIZE
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库 标签 镜像 ID 创建时间 大小
- en: docker.io/library/ubuntu latest 4e5021d210f6 3 weeks ago 66.6 MB
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: docker.io/library/ubuntu latest 4e5021d210f6 3 周前 66.6 MB
- en: 'Details about a local image may be obtained by running the podman inspect command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 关于本地镜像的详细信息可以通过运行 podman inspect 命令获取：
- en: $ podman inspect ubuntu:latest
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman inspect ubuntu:latest
- en: This command should output the same information as the skopeo command performed
    on the remote image earlier in this chapter.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令应输出与本章前面对远程镜像执行的 skopeo 命令相同的信息。
- en: 30.3 Running the Image in a Container
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 30.3 在容器中运行镜像
- en: 'The image pulled from the registry is a fully operational image that is ready
    to run in a container without modification. To run the image, use the podman run
    command. In this case, the –rm option will be specified to indicate that we want
    to run the image in a container, execute one command and then have the container
    exit. In this case, the cat tool will be used to output the content of the /etc/passwd
    file located on the container root filesystem:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 从注册中心拉取的镜像是一个完全可操作的镜像，已经可以在容器中运行而无需修改。要运行该镜像，使用 podman run 命令。在这种情况下，将指定 –rm
    选项，表示我们希望在容器中运行该镜像，执行一个命令后让容器退出。在本例中，将使用 cat 工具输出容器根文件系统中 /etc/passwd 文件的内容：
- en: $ podman run --rm ubuntu:latest cat /etc/passwd
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman run --rm ubuntu:latest cat /etc/passwd
- en: root:x:0:0:root:/root:/bin/bash
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: root:x:0:0:root:/root:/bin/bash
- en: daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
- en: bin:x:2:2:bin:/bin:/usr/sbin/nologin
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: bin:x:2:2:bin:/bin:/usr/sbin/nologin
- en: sys:x:3:3:sys:/dev:/usr/sbin/nologin
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: sys:x:3:3:sys:/dev:/usr/sbin/nologin
- en: sync:x:4:65534:sync:/bin:/bin/sync
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: sync:x:4:65534:sync:/bin:/bin/sync
- en: games:x:5:60:games:/usr/games:/usr/sbin/nologin
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: games:x:5:60:games:/usr/games:/usr/sbin/nologin
- en: man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
- en: lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
- en: mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
- en: news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
- en: uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
- en: proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
- en: www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
- en: backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
- en: list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
- en: irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
- en: gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
- en: nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
- en: _apt:x:100:65534::/nonexistent:/usr/sbin/nologin
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: _apt:x:100:65534::/nonexistent:/usr/sbin/nologin
- en: Compare the content of the /etc/passwd file within the container with the /etc/passwd
    file on the host system and note that it lacks all of the additional users that
    are present on the host confirming that the cat command was executed within the
    container environment. Also note that the container started, ran the command and
    exited all within a matter of seconds. Compare this to the amount of time it takes
    to start a full operating system, perform a task, and shutdown a virtual machine,
    and you begin to appreciate the speed and efficiency of containers.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 比较容器内 /etc/passwd 文件的内容与宿主系统上的 /etc/passwd 文件，注意到它缺少宿主机上所有额外的用户，这表明 cat 命令是在容器环境中执行的。同时注意到容器启动、执行命令并退出，整个过程仅用了几秒钟。与启动一个完整操作系统、执行任务并关闭虚拟机所需的时间相比，你会开始理解容器的速度和效率。
- en: 'To launch a container, keep it running, and access the shell, the following
    command can be used:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动一个容器、保持其运行并访问其 shell，可以使用以下命令：
- en: $ podman run --name=mycontainer -it ubuntu:latest /bin/bash
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman run --name=mycontainer -it ubuntu:latest /bin/bash
- en: root@4b49ddeb2987:/#
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: root@4b49ddeb2987:/#
- en: In this case, an additional command-line option has been used to assign the
    name “mycontainer” to the container. Though optional, this makes the container
    easier to recognize and reference as an alternative to using the automatically
    generated container ID.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，使用了一个额外的命令行选项来将容器命名为“mycontainer”。虽然这是可选的，但这样可以使容器更容易识别，并且作为使用自动生成的容器
    ID 的替代方式来引用容器。
- en: While the container is running, run podman in a different terminal window to
    see the status of all containers on the system
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器运行时，可以在另一个终端窗口中运行 podman，查看系统上所有容器的状态。
- en: $ podman ps -a
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman ps -a
- en: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 容器 ID 镜像 命令 创建时间 状态 端口 名称
- en: 4b49ddeb2987 docker.io/library/ubuntu:latest /bin/bash About a minute ago Up
    About a minute ago mycontainer
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 4b49ddeb2987 docker.io/library/ubuntu:latest /bin/bash 大约一分钟前 启动 大约一分钟前 mycontainer
- en: 'To execute a command in a running container from the host, simply use the podman
    exec command, referencing the name of the running container and the command to
    be executed. The following command, for example, starts up a second bash session
    in the container named mycontainer:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要在主机中执行容器中的命令，只需使用 podman exec 命令，引用正在运行的容器的名称以及要执行的命令。例如，以下命令将在名为 mycontainer
    的容器中启动第二个 bash 会话：
- en: $ podman exec -it mycontainer /bin/bash
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman exec -it mycontainer /bin/bash
- en: root@4b49ddeb2987:/#
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: root@4b49ddeb2987:/#
- en: 'Note that though the above example referenced the container name the same result
    can be achieved using the container ID as listed by the podman ps -a command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，尽管上述示例引用了容器名称，但通过 podman ps -a 命令列出的容器 ID 也可以达到相同的结果：
- en: $ podman exec -it 4b49ddeb2987 /bin/bash
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman exec -it 4b49ddeb2987 /bin/bash
- en: root@4b49ddeb2987:/#
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: root@4b49ddeb2987:/#
- en: 'Alternatively, the podman attach command will also attach to a running container
    and access the shell prompt:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，podman attach 命令也可以附加到正在运行的容器并访问 shell 提示符：
- en: $ podman attach mycontainer
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman attach mycontainer
- en: root@4b49ddeb2987:/#
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: root@4b49ddeb2987:/#
- en: Once the container is up and running, any additional configuration changes can
    be made, and packages installed just like any other Ubuntu system.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦容器启动并运行，任何额外的配置更改都可以进行，软件包也可以像其他 Ubuntu 系统一样安装。
- en: 30.4 Managing a Container
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 30.4 管理容器
- en: 'Once launched, a container will continue to run until it is stopped via podman,
    or the command that was launched when the container was run exits. Running the
    following command on the host, for example, will cause the container to exit:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启动，容器将继续运行，直到通过 podman 停止它，或者启动容器时执行的命令退出。例如，在主机上运行以下命令，将导致容器退出：
- en: $ podman stop mycontainer
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman stop mycontainer
- en: 'Alternatively, pressing the Ctrl-D keyboard sequence within the last remaining
    bash shell of the container would cause both the shell and container to exit.
    Once it has exited, the status of the container will change accordingly:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，在容器的最后一个 bash shell 中按下 Ctrl-D 键序列，将导致 shell 和容器同时退出。一旦退出，容器的状态将相应地变化：
- en: $ podman ps -a
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman ps -a
- en: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
- en: 4b49ddeb2987 docker.io/library/ubuntu:latest /bin/bash 6 minutes ago Exited
    (127) About a minute ago mycontainer
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 4b49ddeb2987 docker.io/library/ubuntu:latest /bin/bash 6分钟前 已退出 (127) 大约一分钟前
    mycontainer
- en: 'Although the container is no longer running, it still exists and contains all
    of the changes that were made to the configuration and file system. If you installed
    packages, made configuration changes or added files, these changes will persist
    within “mycontainer”. To verify this, simply restart the container as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然容器不再运行，但它仍然存在，并且包含所有对配置和文件系统所做的更改。如果你安装了软件包、进行了配置更改或添加了文件，这些更改将保留在“mycontainer”中。要验证这一点，只需按照以下步骤重新启动容器：
- en: $ podman start mycontainer
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman start mycontainer
- en: 'After starting the container, use the podman exec command once again to execute
    commands within the container as outlined previously. For example, to once again
    gain access to a shell prompt:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 启动容器后，使用 podman exec 命令再次执行容器内的命令，如之前所述。例如，再次获取访问 shell 提示符的权限：
- en: $ podman exec -it mycontainer /bin/bash
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman exec -it mycontainer /bin/bash
- en: 'A running container may also be paused and resumed using the podman pause and
    unpause commands as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 正在运行的容器也可以通过 podman pause 和 unpause 命令进行暂停和恢复，如下所示：
- en: $ podman pause mycontainer
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman pause mycontainer
- en: $ podman unpause mycontainer
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman unpause mycontainer
- en: 30.5 Saving a Container to an Image
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 30.5 将容器保存为镜像
- en: 'Once the container guest system is configured to your requirements there is
    a good chance that you will want to create and run more than one container of
    this particular type. To do this, the container needs to be saved as an image
    to local storage so that it can be used as the basis for additional container
    instances. This is achieved using the podman commit command combined with the
    name or ID of the container and the name by which the image will be stored, for
    example:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦容器的来宾系统配置完成，你很有可能会想要创建并运行多个此类容器。为此，需要将容器保存为镜像并存储到本地，以便可以用作其他容器实例的基础。这可以通过使用
    podman commit 命令结合容器的名称或 ID，以及将保存镜像的名称来实现，例如：
- en: $ podman commit mycontainer myubuntu_image
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman commit mycontainer myubuntu_image
- en: 'Once the image has been saved, check that it now appears in the list of images
    in the local repository:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦镜像已保存，检查它是否出现在本地仓库的镜像列表中：
- en: $ podman images
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman images
- en: REPOSITORY TAG IMAGE ID CREATED SIZE
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库 标签 镜像 ID 创建时间 大小
- en: localhost/myubuntu_image latest 8ad685d49482 47 seconds ago 66.6 MB
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: localhost/myubuntu_image latest 8ad685d49482 47 秒前 66.6 MB
- en: docker.io/library/ubuntu latest 4e5021d210f6 3 weeks ago 66.6 MB
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: docker.io/library/ubuntu latest 4e5021d210f6 3 周前 66.6 MB
- en: 'The saved image can now be used to create additional containers identical to
    the original:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 保存的镜像现在可以用来创建与原始镜像相同的其他容器：
- en: $ podman run --name=mycontainer2 -it localhost/myubuntu_image /bin/bash
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman run --name=mycontainer2 -it localhost/myubuntu_image /bin/bash
- en: 30.6 Removing an Image from Local Storage
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 30.6 从本地存储中删除镜像
- en: 'To remove an image from local storage once it is no longer needed, simply run
    the podman rmi command, referencing either the image name or ID as output by the
    podman images command. For example, to remove the image named myubuntu_image created
    in the previous section, run podman as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要从本地存储中删除一个不再需要的镜像，只需运行 podman rmi 命令，引用 podman images 命令输出的镜像名称或 ID。例如，要删除在上一节中创建的名为
    myubuntu_image 的镜像，可以按如下方式运行 podman：
- en: $ podman rmi localhost/myubuntu_image
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: $ podman rmi localhost/myubuntu_image
- en: Note before an image can be removed, any containers based on that image must
    first be removed.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在删除镜像之前，基于该镜像的任何容器必须先被删除。
- en: 30.7 Removing Containers
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 30.7 删除容器
- en: 'Even when a container has exited or been stopped, it still exists and can be
    restarted at any time. If a container is no longer needed, it can be deleted using
    the podman rm command as follows after the container has been stopped:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 即使容器已退出或已停止，它仍然存在，并可以随时重新启动。如果不再需要某个容器，可以在容器停止后使用 podman rm 命令删除它，方法如下：
- en: podman rm mycontainer2
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: podman rm mycontainer2
- en: 30.8 Building a Container with Buildah
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 30.8 使用 Buildah 构建容器
- en: Buildah allows new containers to be built either from existing containers, an
    image or entirely from scratch. Buildah also includes the ability to mount the
    file system of a container so that it can be accessed and modified from the host.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Buildah 允许从现有容器、镜像或完全从头开始构建新的容器。Buildah 还包括挂载容器文件系统的功能，这样可以从主机访问并修改容器内容。
- en: 'The following buildah command, for example, will build a container from the
    Ubuntu Base image (if the image has not already been pulled from the registry,
    buildah will download it before creating the container):'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下 buildah 命令将从 Ubuntu Base 镜像构建容器（如果该镜像尚未从注册表中拉取，buildah 会在创建容器之前下载它）：
- en: $ buildah from docker://docker.io/library/ubuntu:latest
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: $ buildah from docker://docker.io/library/ubuntu:latest
- en: 'The result of running this command will be a container named ubuntu-working-container
    that is ready to run:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令的结果将是一个名为 ubuntu-working-container 的容器，已准备好运行：
- en: $ buildah run ubuntu-working-container cat /etc/passwd
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: $ buildah run ubuntu-working-container cat /etc/passwd
- en: 30.9 Summary
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 30.9 小结
- en: This chapter has worked through the creation and management of Linux Containers
    on Ubuntu using the podman, skopeo and buildah tools.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 本章通过使用 podman、skopeo 和 buildah 工具，演示了在 Ubuntu 上创建和管理 Linux 容器的过程。
