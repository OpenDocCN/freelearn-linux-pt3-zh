- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Revisiting Modules and AppStreams
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新回顾模块和AppStreams
- en: 'In this chapter, we’re going to learn more about **modules** and **application
    streams** (**AppStreams**). We went over the new organization of repositories
    and the concept of modularity in [*Chapter 5*](B18349_05.xhtml#_idTextAnchor135),
    *Software Management with DNF*, but now we’re going to be tapping into the true
    power of AppStreams with the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将进一步了解**模块**和**应用流**（**AppStreams**）。我们在[*第5章*](B18349_05.xhtml#_idTextAnchor135)《使用DNF进行软件管理》中讨论了新的仓库组织结构和模块化概念，但现在我们将通过以下教程深入探索AppStreams的真正功能：
- en: Searching and listing AppStream modules
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索和列出AppStream模块
- en: Installing applications and development tools via AppStream
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过AppStream安装应用程序和开发工具
- en: Using AppStreams to install different versions of software
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AppStreams安装不同版本的软件
- en: Removing packages via AppStream
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过AppStream移除软件包
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The concept of AppStreams is new and was introduced in Oracle Linux 8\. With
    that being said, as long as you are running Oracle Linux 8, you will have all
    that’s needed to follow along in this chapter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: AppStreams的概念是新的，并且是在Oracle Linux 8中引入的。也就是说，只要你使用的是Oracle Linux 8，你就能拥有在本章中跟随操作所需的所有条件。
- en: Searching and listing AppStream modules
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索和列出AppStream模块
- en: 'First things first, let’s review the list of commands that pertain to modules:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们回顾一下与模块相关的命令列表：
- en: '`disable`: Disable a module with all its streams'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`disable`：禁用一个模块及其所有流'
- en: '`enable`: Enable a module stream'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enable`：启用一个模块流'
- en: '`info`: Print detailed information about a module'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info`：打印关于模块的详细信息'
- en: '`install`: Install a module profile, including its packages'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install`：安装一个模块配置文件及其包'
- en: '`list`: List all module streams, profiles, and states'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list`：列出所有模块流、配置文件和状态'
- en: '`provides`: List modular packages'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`provides`：列出模块化包'
- en: '`remove`: Remove installed module profiles and their packages'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remove`：移除已安装的模块配置文件及其包'
- en: '`repoquery`: List packages belonging to a module'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`repoquery`：列出属于某个模块的包'
- en: '`reset`: Reset a module'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reset`：重置模块'
- en: '`switch-to`: Switch a module to a stream and *distrosync* RPM packages'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`switch-to`：将模块切换到某个流并进行*distrosync* RPM包同步'
- en: '`update`: Update packages associated with an active stream'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update`：更新与活动流相关的包'
- en: How to do it…
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'AppStreams are easy to use. To get started, it’s generally best to check for
    a list of available modules. This can be done by entering one simple command,
    `dnf module list`, into the Terminal/console:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: AppStreams非常易于使用。要开始使用，通常最好先检查可用模块的列表。你可以通过在终端/控制台输入一个简单的命令`dnf module list`来完成此操作：
- en: '![Figure 10.1 – Output of dnf module list](img/B18349_10_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.1 – dnf module list的输出](img/B18349_10_01.jpg)'
- en: Figure 10.1 – Output of dnf module list
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – dnf module list的输出
- en: 'The output continues with a rather long list of modules, and at the end, you
    will see a keymap of what the different letters mean:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 输出继续显示一个相当长的模块列表，最后你将看到不同字母含义的键映射：
- en: '![Figure 10.2 – Module keymap via hints](img/B18349_10_02.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.2 – 通过提示查看模块键映射](img/B18349_10_02.jpg)'
- en: Figure 10.2 – Module keymap via hints
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2 – 通过提示查看模块键映射
- en: 'Here are several modules that immediately caught my eye: `container-tools`,
    `gimp`, `go-tools`, `inkscape`, `mariadb`, `mysql`, `nginx`, `nodejs`, `python`,
    and `php`. These are modules, but you will notice that each module has a stream,
    and each stream contains a profile. If we were to visualize this in a chart, it
    might look a bit like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是几个我立刻注意到的模块：`container-tools`、`gimp`、`go-tools`、`inkscape`、`mariadb`、`mysql`、`nginx`、`nodejs`、`python`和`php`。这些是模块，但你会发现每个模块都有一个流，而每个流包含一个配置文件。如果我们将其可视化成图表，它可能看起来像这样：
- en: '![Figure 10.3 – Visualizing AppStreams](img/B18349_10_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.3 – 可视化AppStreams](img/B18349_10_03.jpg)'
- en: Figure 10.3 – Visualizing AppStreams
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3 – 可视化AppStreams
- en: 'Now, let’s say we want to get more information on a particular module. In this
    case, let’s take a look at `nodejs`. First, we’re going to want to specify `nodejs`
    when we ask for the list. We can do this by adding the name of the module after
    the `list` command, like so:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们想要获取某个特定模块的更多信息。以`nodejs`为例。首先，我们需要在请求列表时指定`nodejs`。我们可以通过将模块名称添加到`list`命令后面来做到这一点，如下所示：
- en: '![Figure 10.4 – Output of dnf module list nodejs](img/B18349_10_04.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.4 – dnf module list nodejs的输出](img/B18349_10_04.jpg)'
- en: Figure 10.4 – Output of dnf module list nodejs
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.4 – dnf module list nodejs的输出
- en: 'At the bottom of the list, you will see the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表的底部，你将看到以下内容：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: From this, we can see that stream `10` is labeled as default (`d`) for `nodejs`.
    What does this mean, exactly? Basically, if we were to run `dnf module install
    nodejs`, we would end up with the latest version of Node.js in stream 10 (and
    yes, stream `10` correlates to Node.js 10).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 从中我们可以看到，流 `10` 被标记为 `nodejs` 的默认（`d`）。这到底是什么意思？基本上，如果我们运行 `dnf module install
    nodejs`，我们将得到流 10 中的最新版本 Node.js（是的，流 `10` 对应的是 Node.js 10）。
- en: Note
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of writing, the latest version of Node.js in the 10 series stream
    is **nodejs-1:10.24.0-1.module+el8.3.0+9671+154373c8.x86_64**.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在写作时，Node.js 10 系列流的最新版本是**nodejs-1:10.24.0-1.module+el8.3.0+9671+154373c8.x86_64**。
- en: 'We can dig deeper and learn more about this specific AppStream by typing the
    following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进一步探索并通过输入以下命令来了解更多有关此特定 AppStream 的信息：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output of that command will show every available release of Node.js within
    the 10 series stream. There are several but, for the sake of brevity, I have pasted
    the last two from the list:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出将显示 10 系列流中每个可用的 Node.js 版本。虽然有很多，但为了简洁起见，我只粘贴了列表中的最后两个版本：
- en: '![Figure 10.5 – Output of dnf module info nodejs:10](img/B18349_10_05.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.5 – dnf module info nodejs:10 的输出](img/B18349_10_05.jpg)'
- en: Figure 10.5 – Output of dnf module info nodejs:10
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.5 – dnf module info nodejs:10 的输出
- en: The interesting thing here is that every stream within the 10 series is labeled
    `[d][a]` (default and active); that’s because the `Stream` entry is referring
    to the stream itself, and not any specific release within the stream.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，10 系列中的每个流都被标记为`[d][a]`（默认和活动）；这是因为 `Stream` 项是指流本身，而不是流中的任何特定版本。
- en: Installing applications and development tools via AppStream
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 AppStream 安装应用程序和开发工具
- en: From the previous recipe, we’re familiar with how to search for and list applications
    in AppStreams; let’s now dive into installing applications and development tools
    via AppStream.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前的食谱中，我们已经熟悉了如何在 AppStream 中搜索和列出应用程序；现在让我们深入了解通过 AppStream 安装应用程序和开发工具。
- en: How to do it…
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Building from the last recipe, in which we examined `nodejs`, let’s go ahead
    and install it. There’s more than one way to do this. You can enable the module
    and then use the standard `dnf install [package(s)]` command to install the packages:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 基于上一个食谱，我们研究了`nodejs`，现在让我们继续安装它。安装它的方法有不止一种。你可以启用该模块，然后使用标准的`dnf install [package(s)]`命令来安装软件包：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can also use the standard `dnf` commands without specifying modules and
    the default module will get enabled as part of the transaction:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用标准的 `dnf` 命令而不指定模块，默认模块将在事务中启用：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Or, the preferred way is to tap directly into the new set of `dnf module` commands
    and simply run `dnf module install [``module name(s)]`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，更推荐的方式是直接使用新的 `dnf module` 命令集，简单地运行 `dnf module install [module name(s)]`：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output is shown in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下面的截图所示：
- en: '![Figure 10.6 – Output of dnf module install nodejs](img/B18349_10_06.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.6 – dnf module install nodejs 的输出](img/B18349_10_06.jpg)'
- en: Figure 10.6 – Output of dnf module install nodejs
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.6 – dnf module install nodejs 的输出
- en: 'What you get is the latest in the default AppStream (if nothing is enabled),
    but if for some reason you wanted an older version in the stream, you can select
    that by appending a colon and the version to the end of the command. For example,
    if I didn’t want the latest and, instead, wanted the version before it, I would
    type the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你得到的是默认 AppStream 中的最新版本（如果没有启用任何模块），但是如果出于某种原因你希望获取流中的旧版本，你可以通过在命令末尾加上冒号和版本号来选择。例如，如果我不想要最新版本，而是想要它之前的版本，我会输入以下命令：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output is shown in the following screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下面的截图所示：
- en: '![Figure 10.7 – Output of dnf module install nodejs:10:8030020210118191659](img/B18349_10_06.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.7 – dnf module install nodejs:10:8030020210118191659 的输出](img/B18349_10_06.jpg)'
- en: Figure 10.7 – Output of dnf module install nodejs:10:8030020210118191659
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.7 – dnf module install nodejs:10:8030020210118191659 的输出
- en: This would instruct DNF to install the releases of Node.js (and related artifacts)
    that correlate to the version specified.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这将指示 DNF 安装与指定版本相关的 Node.js（以及相关组件）发行版。
- en: 'Another thing to notice is that, by default, only the `common` profile will
    be installed. We can specify a different profile (for example, the `development`
    profile), by appending a forward slash and a profile name:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要注意的点是，默认情况下，只会安装`common`配置文件。如果我们想安装其他配置文件（例如，`development`配置文件），可以通过在命令末尾加上斜杠和配置文件名称来指定：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output is shown in the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下面的截图所示：
- en: '![Figure 10.8 – Output of dnf module install nodejs:10/development](img/B18349_10_08.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.8 – 执行 `dnf module install nodejs:10/development` 的输出](img/B18349_10_08.jpg)'
- en: Figure 10.8 – Output of dnf module install nodejs:10/development
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.8 – 执行 `dnf module install nodejs:10/development` 的输出
- en: 'You can even specify more than one profile, like so:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可以指定多个配置文件，像这样：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output is shown in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示在下面的截图中：
- en: '![Figure 10.9 – Output of dnf module install nodejs:10/development nodejs:10/s2i](img/B18349_10_09.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.9 – 执行 `dnf module install nodejs:10/development nodejs:10/s2i` 的输出](img/B18349_10_09.jpg)'
- en: Figure 10.9 – Output of dnf module install nodejs:10/development nodejs:10/s2i
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.9 – 执行 `dnf module install nodejs:10/development nodejs:10/s2i` 的输出
- en: 'Or, if you wish to install all the profiles, simply use an asterisk to indicate
    a wildcard selection:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您希望安装所有配置文件，只需使用星号表示通配符选择：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output is shown in the following screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示在下面的截图中：
- en: '![Figure 10.10 – Output of dnf module install nodejs:10/*](img/B18349_10_10.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.10 – 执行 `dnf module install nodejs:10/*` 的输出](img/B18349_10_10.jpg)'
- en: Figure 10.10 – Output of dnf module install nodejs:10/*
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.10 – 执行 `dnf module install nodejs:10/*` 的输出
- en: Using AppStreams to install different versions of software
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AppStreams 安装不同版本的软件
- en: Now, we’re going to expand on what we know about AppStreams, and instead of
    installing an application from the default module stream, we’re going to specify
    a different stream.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将进一步了解 AppStreams，并且不再从默认模块流安装应用程序，而是指定一个不同的流。
- en: How to do it…
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'There are multiple ways to do this: simply specifying the installation of a
    different stream will get the job done, or you can first manually enable a different
    version. My preference is to specify the version as I install it because, in that
    case, the AppStream will automatically enable that version:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方法可以做到这一点：只需指定安装不同的流即可，或者您可以先手动启用不同的版本。我的偏好是在安装时指定版本，因为这样，AppStream 会自动启用该版本：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you already installed some version of an AppStream, it is best to remove
    the old one before resetting and installing a different version. This will be
    covered later.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经安装了某个版本的 AppStream，最好在重置并安装不同版本之前移除旧版本。稍后会讲解这个过程。
- en: 'The output is shown in the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示在下面的截图中：
- en: '![Figure 10.11 – Output of dnf module install nodejs:16](img/B18349_10_11.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.11 – 执行 `dnf module install nodejs:16` 的输出](img/B18349_10_11.jpg)'
- en: Figure 10.11 – Output of dnf module install nodejs:16
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.11 – 执行 `dnf module install nodejs:16` 的输出
- en: 'You’ll see from the printout that the module stream for `nodejs` 16 will be
    enabled. Now, if we list out the module stream for `nodejs`, we’ll see the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您会看到从输出中 `nodejs` 16 的模块流将被启用。现在，如果我们列出 `nodejs` 的模块流，我们将看到以下内容：
- en: '![Figure 10.12 – Output of dnf module list nodejs](img/B18349_10_12.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.12 – 执行 `dnf module list nodejs` 的输出](img/B18349_10_12.jpg)'
- en: Figure 10.12 – Output of dnf module list nodejs
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.12 – 执行 `dnf module list nodejs` 的输出
- en: 'As you can see, `10` is still the default, but `16` is enabled (`e`). AppStreams
    maintains a default stream to allow normal usage of `dnf` to function without
    requiring the user to know anything about AppStreams. Additionally, if we were
    to reset the module, it would revert back to the original settings – that is,
    it would make `10` the only default and enabled version, and version `16` would
    no longer be enabled. Furthermore, it’s important to note that only one stream
    can be enabled at a time. To recap, a default stream is inherently enabled when
    no other stream is enabled. If you enable a different stream, it is the only one
    that can be installed from, but it’s easy to reset and switch to another. To do
    so, simply do the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`10` 仍然是默认版本，但 `16` 已启用（`e`）。AppStreams 维护一个默认流，以允许 `dnf` 正常工作，无需用户了解 AppStreams
    的任何信息。此外，如果我们重置模块，它将恢复到原始设置——也就是说，`10` 将成为唯一的默认并启用版本，而版本 `16` 将不再启用。值得注意的是，任何时候只能启用一个流。总结一下，默认流在没有启用其他流时会默认启用。如果启用其他流，它将成为唯一可以安装的流，但很容易重置并切换到另一个。要这样做，只需按照以下步骤操作：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You will see confirmation about the module being reset:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到关于模块已重置的确认信息：
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'At this point, we are cleared to install a different version. Let’s go with
    Node.js 14 this time around:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们可以安装不同的版本了。这次我们选择安装 Node.js 14：
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You will see a confirmation about what the package manager plans to do:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到关于包管理器计划执行的操作的确认信息：
- en: '![Figure 10.13 – Output of dnf module install nodejs:14](img/B18349_10_13.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.13 – 执行 `dnf module install nodejs:14` 的输出](img/B18349_10_13.jpg)'
- en: Figure 10.13 – Output of dnf module install nodejs:14
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.13 – dnf module install nodejs:14 的输出
- en: You may notice that you are downgrading. Just as you might suspect, if no module
    is installed, it will say `Installing`; if installing a number that is greater
    than the currently installed version, it will say `Upgrading`; and if installing
    a number that is less than the currently installed version, it will say `Downgrading`.
    Regardless of what the package manager says it is doing, you will be left with
    the version you requested – it’s as simple as that.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到你正在降级。正如你可能猜到的那样，如果没有安装任何模块，它会显示 `Installing`；如果安装的版本号大于当前安装的版本，它会显示
    `Upgrading`；如果安装的版本号小于当前安装的版本，它会显示 `Downgrading`。不管包管理器显示的是在做什么，最终你将得到你请求的版本——就这么简单。
- en: 'You should be aware there is another way to switch to a different stream. Rather
    than using `remove`, `reset`, and then `install`, you can achieve this with one
    step by using `switch-to`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该知道其实还有另一种切换到不同流的方法。你可以通过使用 `switch-to` 来一步完成，而不是先使用 `remove`、`reset` 然后再
    `install`：
- en: '![Figure 10.14 – Output of dnf module switch-to nodejs:16](img/B18349_10_14.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.14 – dnf module switch-to nodejs:16 的输出](img/B18349_10_14.jpg)'
- en: Figure 10.14 – Output of dnf module switch-to nodejs:16
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.14 – dnf module switch-to nodejs:16 的输出
- en: This is the recommended method of changing stream versions because it accomplishes
    the change in just one step, and it provides a very clear printout of the action
    taking place. Its status is `Upgrading`, and it is going from `14 ->` `16`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这是推荐的切换流版本的方法，因为它只需一步即可完成切换，而且能清晰地打印出正在进行的操作。它的状态是 `Upgrading`，并且正在从 `14 ->`
    `16`。
- en: Note
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There is actually another way to switch modules on the fly. If you set `module_stream_switch`
    to `True` in `/etc/dnf/dnf.conf`, then you can install a different module without
    using the `switch-to` syntax.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 其实还有一种方法可以动态切换模块。如果你在 `/etc/dnf/dnf.conf` 中将 `module_stream_switch` 设置为 `True`，那么你可以在不使用
    `switch-to` 语法的情况下安装不同的模块。
- en: 'Here is an example:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个例子：
- en: '**echo “module_stream_switch=True” >> /****etc/dnf/dnf.conf**'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**echo “module_stream_switch=True” >> /****etc/dnf/dnf.conf**'
- en: What about Python?
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 那 Python 呢？
- en: 'If you review the list of modules, you may notice that Python consists of multiple
    modules rather than a single module with multiple AppStreams:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看模块列表，可能会注意到 Python 包含多个模块，而不是一个包含多个 AppStream 的单一模块：
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output can be seen in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 输出可以在以下屏幕截图中看到：
- en: '![Figure 10.15 – Output of dnf module list python*](img/B18349_10_15.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.15 – dnf module list python* 的输出](img/B18349_10_15.jpg)'
- en: Figure 10.15 – Output of dnf module list python*
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.15 – dnf module list python* 的输出
- en: This seems weird at first, but consider that Python is an integral part of the
    Oracle Linux operating system and that each Oracle Linux release comes with a
    platform Python version. The specific platform Python version may differ for each
    Oracle Linux release, and the respective platform Python version will be supported
    for the full lifespan of that version of Oracle Linux. For Oracle Linux 7, the
    platform Python version is 2.7 and is always installed, and for Oracle Linux 8,
    the platform Python version is 3.6\. In other words, Python 2.7 is supported for
    the full lifespan of Oracle Linux 7, and Python 3.6 is supported for the full
    lifespan of Oracle Linux 8\. On Oracle Linux 8, the platform Python is exclusively
    intended for use by system utilities such as Yum and DNF. Python for general purpose
    is not installed by default on Oracle Linux 8, and so this is where AppStream
    modules come into play.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始看起来有点奇怪，但考虑到 Python 是 Oracle Linux 操作系统的一个重要组成部分，每个 Oracle Linux 版本都附带一个平台
    Python 版本。每个 Oracle Linux 版本的特定平台 Python 版本可能不同，并且每个版本的相应平台 Python 版本将在该版本的整个生命周期内得到支持。对于
    Oracle Linux 7，平台 Python 版本是 2.7，并始终安装；而对于 Oracle Linux 8，平台 Python 版本是 3.6。换句话说，Python
    2.7 在 Oracle Linux 7 的整个生命周期内得到支持，而 Python 3.6 在 Oracle Linux 8 的整个生命周期内得到支持。在
    Oracle Linux 8 上，平台 Python 专门供系统工具（如 Yum 和 DNF）使用。对于一般用途的 Python，不会在 Oracle Linux
    8 上默认安装，因此这时 AppStream 模块就发挥了作用。
- en: You can install multiple versions of Python on Oracle Linux 8 by specifying
    the module correlating to the desired version of Python. All of the Python modules
    can be installed and used simultaneously on the same machine, and you can specify
    which installation you wish to use by typing out the version – for example, `python3.6
    --version`, `python3.8 --version`, and so on.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过指定与所需 Python 版本相对应的模块，在 Oracle Linux 8 上安装多个版本的 Python。所有 Python 模块可以同时安装并在同一台机器上使用，你可以通过输入版本号来指定希望使用的安装版本——例如，`python3.6
    --version`，`python3.8 --version`，等等。
- en: By default, the `python3` command is always aliased to Python 3.6 if it is installed
    on the system, and that is because Python 3.6 is the platform Python version on
    Oracle Linux 8.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，如果系统上安装了`python3`，它总是别名为Python 3.6，这是因为Python 3.6是Oracle Linux 8上的平台Python版本。
- en: Removing packages via AppStream
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过AppStream移除包
- en: Removing packages via AppStream is straightforward. In general, all you need
    to do is instruct the package manager to remove instead of install. If the package
    manager finds a module that matches, it will proceed to remove the related packages.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 通过AppStream移除包非常简单。通常，你只需指示包管理器执行移除操作，而不是安装操作。如果包管理器找到一个匹配的模块，它将继续移除相关的包。
- en: How to do it…
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'Building off the examples in the previous recipe, let’s remove the Node.js
    module by running the `dnf module remove` `nodejs` command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 参考前一个示例中的内容，我们通过运行`dnf module remove nodejs`命令来移除Node.js模块：
- en: '![Figure 10.16 – Output of dnf module remove nodejs](img/B18349_10_16.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图10.16 – 执行dnf模块移除nodejs的输出](img/B18349_10_16.jpg)'
- en: Figure 10.16 – Output of dnf module remove nodejs
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.16 – 执行dnf模块移除nodejs的输出
- en: 'From this message, you can see that NPM will be uninstalled, but that isn’t
    quite what you would expect considering that the Node.js module installed more
    than just NPM. If you want to remove everything related to the module, you’ll
    need to pass in the `--all` flag, like so:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 从这条信息中，你可以看到NPM将被卸载，但考虑到Node.js模块不仅仅安装了NPM，你可能会有些困惑。如果你想移除与该模块相关的所有内容，你需要添加`--all`标志，像这样：
- en: '[PRE14]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This time, you will see that all associated packages are queued for removal:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，你将看到所有相关的包都排队等待移除：
- en: '![Figure 10.17 – Output of dnf module remove nodejs --all](img/B18349_10_17.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图10.17 – 执行dnf模块移除nodejs --all的输出](img/B18349_10_17.jpg)'
- en: Figure 10.17 – Output of dnf module remove nodejs --all
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.17 – 执行dnf模块移除nodejs --all的输出
- en: Now that’s more like it. Type `y` and press *Enter*, and the module will be
    removed.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这就对了。输入`y`并按*Enter*，模块将被移除。
- en: There’s more…
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容……
- en: So, now that we’ve gone over the usage of AppStreams, you might be asking yourself,
    “*Didn’t we already have a similar capability with Software Collections?*” The
    answer is yes, but there is a big difference between Software Collections and
    AppStreams.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，既然我们已经讨论了AppStreams的使用，你可能会问自己，“*我们之前不是已经通过软件集合实现了类似的功能吗？*” 答案是肯定的，但软件集合和AppStreams之间有一个很大的区别。
- en: Where Software Collections provides Parallel Availability and Parallel Installability,
    AppStreams provides only Parallel Availability.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 软件集合提供了平行可用性和平行可安装性，而AppStreams仅提供平行可用性。
- en: According to the Fedora docs, “*Parallel Availability means that more than one
    major release of a popular software project is available for installation.”* And
    *“Parallel Installability means that more than one major release of a software
    project can be installed on the* *same userspace.*”
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Fedora文档，"*平行可用性意味着可以安装多个流行软件项目的主要版本*。” 以及*“平行可安装性意味着同一用户空间中可以安装多个主要版本的一个软件项目。”*
- en: Now you might be asking, “*Wait, so you’re telling me that AppStreams is not
    as good as what we had before?*” Well, not exactly. It turns out that Parallel
    Installability isn’t all it’s cracked up to be. Although it seems nice on the
    surface to have the ability to install multiple versions of software on the same
    system, in reality, it is plagued with complications of requiring users to know
    they need to do something extra in order to actually make use of the installed
    software and/or alternate version. For example, if you wanted to install multiple
    versions of Node.js, you would first need to enable the desired Software Collection
    for Node.js, and then you would also need to know where to look for and activate
    the specific version you want to use. In other words, you cannot simply use the
    alternate version of the software in the normal way because the packages would
    get installed in non-standard locations.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能会问，“*等一下，你是说AppStreams不如我们之前使用的那种好吗？*” 好吧，答案并不完全是这样。事实上，平行可安装性并没有想象中那么好。虽然表面上看，能够在同一系统上安装多个版本的软件似乎很不错，但实际上，它存在一些复杂问题，需要用户知道自己需要做额外的操作才能真正使用已安装的软件和/或备用版本。例如，如果你想安装多个版本的Node.js，你首先需要启用你想要的Node.js软件集合，然后你还需要知道在哪里查找并激活你想使用的特定版本。换句话说，你不能像正常使用软件那样直接使用备用版本，因为这些包会被安装到非标准位置。
- en: AppStreams solves this because it does not allow for Parallel Installability;
    instead, it provides the capability of Parallel Availability. In other words,
    you install one and only one package at a time, and you use it like you normally
    would. If you want a different version, well, you simply enable a different stream.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: AppStreams 解决了这个问题，因为它不允许并行安装性，而是提供并行可用性的能力。换句话说，你一次只安装一个包，然后像平常一样使用它。如果你想要不同的版本，那么你只需启用不同的流。
- en: As a bonus, AppStreams is particularly useful when creating containers that
    are single-use by design. Having AppStreams means each container image is configured
    with the right version of the module, which is then globally available within
    the container. If you need multiple versions, just run multiple containers.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个奖励，AppStreams 在设计上用于创建单次使用的容器时特别有用。拥有 AppStreams 意味着每个容器镜像都配置有正确版本的模块，然后在容器内部全局可用。如果需要多个版本，只需运行多个容器。
- en: AppStreams makes it much easier to install different versions of software, and
    the best thing is, even if you know nothing about AppStreams, you can still use
    DNF the old-fashioned way and get your basic applications installed.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: AppStreams 大大简化了安装不同版本软件的过程，而且最棒的是，即使你对 AppStreams 一无所知，你仍然可以像以往一样使用 DNF 安装基本应用程序。
