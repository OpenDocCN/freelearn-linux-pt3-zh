- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Link Aggregation Creation – Creating Your Own Link and Mastering the Networking
    Domain
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链路聚合创建 – 创建你自己的链路并掌握网络领域
- en: Network teaming is essential to **High Availability** (**HA**) and increasing
    throughput. HA is accomplished through normal teaming with nothing special needed
    from the switch. For more throughput, you need **Link Aggregation Control Protocol**
    (**LACP**) set up on the switch. Without the ability to have multiple network
    connectivity paths out of your systems to the internet, you are likely to get
    into an outage situation easily. Having multiple connectivity paths, such as with
    power being split between two providers, provides a better chance that you will
    not succumb to losing access to your application, thus alleviating some worry
    that the application that is presented to the world using what we learned earlier,
    in [*Chapter 3*](B18607_03.xhtml#_idTextAnchor039), *Network Services with Automation
    – Introduction to Red Hat Linux Networking*, will drop off the face of the planet
    and lose you money.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 网络团队技术对于**高可用性**（**HA**）和提高吞吐量至关重要。HA 是通过正常的团队技术实现的，交换机不需要特殊配置。为了提高吞吐量，你需要在交换机上设置**链路聚合控制协议**（**LACP**）。如果没有多个网络连接路径连接到互联网，你很容易就会遇到宕机问题。拥有多个连接路径，比如通过两个供应商分担电力，能大大增加你不会失去应用程序访问的机会，从而减轻一些担忧，避免应用程序因早期在
    [*第3章*](B18607_03.xhtml#_idTextAnchor039) 中学到的内容，*使用自动化的网络服务 – Red Hat Linux 网络介绍*，而掉线给你带来损失。
- en: By utilizing network teaming in an HA function, if one connection goes down
    then the connectivity is not lost. When properly set up, such as having the two
    **Network Interface Cards** (**NICs**) going to different switches, it allows
    for fault tolerance. This is also a must when you are working on upgrades for
    the switches. If you don’t have any redundancy, you will be down if the switch
    is going through maintenance. The same can be said about having your application
    on a single server, but we are here to talk about networks for now.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在高可用（HA）功能中利用网络团队技术，如果一个连接中断，连接性不会丧失。当正确设置时，例如让两个**网络接口卡**（**NICs**）连接到不同的交换机，它可以提供容错能力。在交换机进行升级时，这也是必须的。如果没有冗余，当交换机进行维护时，你的连接就会中断。同样的情况也适用于将应用程序托管在单台服务器上的情况，但现在我们要讨论的是网络。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Getting to know link aggregation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解链路聚合
- en: Creating different types of link aggregation profiles
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建不同类型的链路聚合配置文件
- en: Taking the headache out of setting up your link aggregation by using Ansible
    Automation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用 Ansible 自动化简化链路聚合的设置
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The technical requirements for this chapter are covered in the following two
    sections.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求分为以下两部分。
- en: Setting up GitHub access
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 GitHub 访问权限
- en: 'Please refer to [*Chapter 1*](B18607_01.xhtml#_idTextAnchor016), *Block Storage
    – Learning How to Provision Block Storage on Red Hat Enterprise Linux*, to gain
    access to GitHub instructions and you will find the Ansible Automation playbooks
    for this chapter at the following link: [https://github.com/PacktPublishing/Red-Hat-Certified-Specialist-in-Services-Management-and-Automation-EX358-Exam-Guide/tree/main/Chapter04](https://github.com/PacktPublishing/Red-Hat-Certified-Specialist-in-Services-Management-and-Automation-EX358-Exam-Guide/tree/main/Chapter04).
    Remember these are suggested playbooks and are not the only way you can write
    them to make the playbooks work for you.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考 [*第1章*](B18607_01.xhtml#_idTextAnchor016)，*块存储 – 学习如何在 Red Hat Enterprise
    Linux 上配置块存储*，获取 GitHub 指令，你可以在以下链接找到本章的 Ansible 自动化剧本：[https://github.com/PacktPublishing/Red-Hat-Certified-Specialist-in-Services-Management-and-Automation-EX358-Exam-Guide/tree/main/Chapter04](https://github.com/PacktPublishing/Red-Hat-Certified-Specialist-in-Services-Management-and-Automation-EX358-Exam-Guide/tree/main/Chapter04)。请记住，这些是建议的剧本，并不是唯一的编写剧本的方式，你可以根据自己的需求来调整剧本。
- en: You can always change them up using raw, shell, or cmd to achieve the same results
    but we are demonstrating the best way to accomplish the goals. Also keep in mind
    we are not using the FCQN that is needed in future versions of Ansible as that
    will not be supported in the exam as it tests against Ansible 2.9.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你始终可以使用 raw、shell 或 cmd 来实现相同的结果，但我们将在此展示实现目标的最佳方法。同时请记住，我们并未使用将来版本的 Ansible
    中需要的 FCQN，因为它在考试中不会被支持，考试是基于 Ansible 2.9 进行的。
- en: Setting up your lab environment for Network Interface Card (NIC) teaming
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为网络接口卡（NIC）团队设置实验环境
- en: This has to be done for at least two of your systems so that you can test the
    different scenarios. I have opted to use Rhel1 and Rhel2 as Rhel3 is more like
    my workstation and Ansible control station. This will become apparent in the testing
    section and the exam tips section of the book. Find the instructions on setting
    up interfaces in VirtualBox as shown in the following screenshot.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这至少需要在两个系统上完成，以便你可以测试不同的场景。我选择使用 Rhel1 和 Rhel2，因为 Rhel3 更像是我的工作站和 Ansible 控制站。这将在测试部分和本书的考试技巧部分变得更加明显。你可以在以下截图中找到设置
    VirtualBox 接口的说明。
- en: 'Please ensure you turn off your virtual machines first, as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保先关闭你的虚拟机，如下所示：
- en: '![Figure 4.1 – Shutting down your VirtualBox VM](img/Figure_4.01_B18607.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.1 – 关闭你的 VirtualBox 虚拟机](img/Figure_4.01_B18607.jpg)'
- en: Figure 4.1 – Shutting down your VirtualBox VM
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – 关闭你的 VirtualBox 虚拟机
- en: 'Then, choose **Settings**, as shown in the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，选择**设置**，如下所示：
- en: '![Figure 4.2 – Altering the settings of the VirtualBox VM](img/Figure_4.02_B18607.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.2 – 修改 VirtualBox 虚拟机的设置](img/Figure_4.02_B18607.jpg)'
- en: Figure 4.2 – Altering the settings of the VirtualBox VM
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – 修改 VirtualBox 虚拟机的设置
- en: 'Then, we are going to choose **Network** and add adapter number 2, as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将选择**网络**并添加适配器 2，如下所示：
- en: '![Figure 4.3 – Adding a second network adapter](img/Figure_4.03_B18607.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3 – 添加第二个网络适配器](img/Figure_4.03_B18607.jpg)'
- en: Figure 4.3 – Adding a second network adapter
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – 添加第二个网络适配器
- en: 'We are going to ensure that the settings are as follows for the new adapter:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将确保新适配器的设置如下：
- en: '![Figure 4.4 – The settings for the second network adapter](img/Figure_4.04_B18607.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4 – 第二个网络适配器的设置](img/Figure_4.04_B18607.jpg)'
- en: Figure 4.4 – The settings for the second network adapter
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – 第二个网络适配器的设置
- en: 'Finally, we are going to add a third adapter as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将添加一个第三个适配器，如下所示：
- en: '![Figure 4.5 – The third and last network adapter added with the correct configuration](img/Figure_4.05_B18607.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5 – 添加带有正确配置的第三个和最后一个网络适配器](img/Figure_4.05_B18607.jpg)'
- en: Figure 4.5 – The third and last network adapter added with the correct configuration
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – 添加带有正确配置的第三个和最后一个网络适配器
- en: The reason for the two additional adapters is to maintain SSH connectivity if
    you are not using the normal start of the VM, which opens a GUI, but instead headless
    VM startup, which does not open a GUI in VirtualBox.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 增加两个适配器的原因是，在不使用虚拟机的正常启动（会打开 GUI）的情况下，保持 SSH 连接。如果使用的是无头虚拟机启动（不打开 GUI），则需要这种配置。
- en: Getting to know link aggregation
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解链路聚合
- en: 'Teamd handles the control of network teaming. It uses runners for this purpose.
    The list of teamd runners can be found here: [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/configuring-network-teaming_configuring-and-managing-networking](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/configuring-network-teaming_configuring-and-managing-networking).
    However, the ones we are going to concentrate on are as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Teamd 负责网络团队的控制。它使用运行器来实现这一目的。teamd 运行器的列表可以在此处找到：[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/configuring-network-teaming_configuring-and-managing-networking](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/configuring-network-teaming_configuring-and-managing-networking)。然而，我们将重点关注以下几种：
- en: '| **Runner Type** | **Description** |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| **运行器类型** | **描述** |'
- en: '| `lacp` | The runner uses 802.3ad LACP. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `lacp` | 该运行器使用 802.3ad LACP。 |'
- en: '| `loadbalance` | The ports use a hash function to attempt to reach a balance
    between the ports. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `loadbalance` | 端口使用哈希函数来尝试在端口之间达到负载均衡。 |'
- en: '| `activebackup` | One port is set to active and the other is a backup for
    failover. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `activebackup` | 一个端口设置为活动，另一个端口作为故障转移的备份。 |'
- en: '| `roundrobin` | In this state, the ports are utilized in a round-robin state.
    |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `roundrobin` | 在这种状态下，端口以轮询方式使用。 |'
- en: Table 4.1 – Some link aggregation profile types
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4.1 – 一些链路聚合配置文件类型
- en: For this task and to create network teams, we will be using the `nmcli` tool
    again, as we did in [*Chapter 3*](B18607_03.xhtml#_idTextAnchor039), *Network
    Services with Automation – Introduction to Red Hat* *Linux Networking*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此任务和创建网络团队，我们将再次使用`nmcli`工具，正如我们在[*第3章*](B18607_03.xhtml#_idTextAnchor039)中所做的那样，*网络服务自动化
    - Red Hat Linux 网络*。
- en: There are many reasons to use the teaming of network interfaces – for redundancy,
    additional throughput, and so on. Depending on what your company needs and the
    switching it has set up, you can even go deeper into multiple teams. This would
    be, for instance, two LACP pairs put into a round-robin scenario in order to increase
    bandwidth while also introducing fault tolerance. Many large companies need to
    ensure that their applications are always up in order to reap the benefits from
    them, and by learning how to build a network team, your chances of success are
    increased.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用网络接口团队有许多理由——如冗余、额外的吞吐量等。根据公司需求和所设置的交换机，你甚至可以深入到多个团队。例如，将两个LACP对放入轮询模式，以增加带宽，同时引入容错。许多大公司需要确保他们的应用程序始终可用，以便从中获取收益，通过学习如何构建网络团队，你成功的机会将大大增加。
- en: Creating different types of link aggregation profiles
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建不同类型的链路聚合配置
- en: 'Keep in mind that the interfaces may differ in your lab setup than in mine
    – they are enp0s8 and enp0s9\. We need to ensure that the interfaces are down
    when we set up the teams. This will be based on your lab and you should not choose
    to connect on startup for these two interfaces. We are going to start off by showing
    the connectivity of the interfaces that are up and the device status using the
    following command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，实验室设置中的接口可能与我的不同——它们是enp0s8和enp0s9。我们需要确保在设置团队时这些接口处于关闭状态。这将取决于你的实验室环境，并且不应选择在启动时连接这两个接口。我们将首先通过以下命令展示接口连接状态以及设备状态：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output can be seen in the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果可以在以下截图中看到：
- en: '![Figure 4.6 – Network interface connectivity, both virtual and physical'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.6 – 网络接口连接，包括虚拟和物理接口'
- en: '](img/Figure_4.06_B18607.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.06_B18607.jpg)'
- en: Figure 4.6 – Network interface connectivity, both virtual and physical
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.6 – 网络接口连接，包括虚拟和物理接口
- en: 'Next, we are going to start creating a team with the name `bond1`. We will
    use the following command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将开始创建名称为`bond1`的团队。我们将使用以下命令：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is illustrated in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了这一点：
- en: '![Figure 4.7 – Full team command to create a team with name bond1 and runner
    of activebackup'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.7 – 创建名称为bond1并使用activebackup的完整团队命令'
- en: '](img/Figure_4.07_B18607.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.07_B18607.jpg)'
- en: Figure 4.7 – Full team command to create a team with name bond1 and runner of
    activebackup
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.7 – 创建名称为bond1并使用activebackup的完整团队命令
- en: Let’s break down the screenshot we just looked at further. First, `nmcli` is
    the tool used to create the team. The code snippet of `connection add` is showing
    we are adding a new connection or interface `type` is showing that we are making
    a `team` in this case. The connection name (`con-name`) is the name you give it,
    which can be of your choosing. The interface name (`ifname`) – `bond1`, in this
    use case – is the name you give the interface. `team.runner` is the type of team
    you are creating; in our case, we are using `activebackup`, which means that one
    interface is passing traffic and the other is standing by in case of a failover.
    This can be due to manual intervention or if the interface loses connectivity.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步解析我们刚才看到的截图。首先，`nmcli`是用于创建团队的工具。`connection add`的代码片段显示我们正在添加一个新连接，`type`显示我们正在创建一个`team`。连接名称（`con-name`）是你为其指定的名称，可以自行选择。接口名称（`ifname`）——在此示例中为`bond1`——是你为接口指定的名称。`team.runner`是你创建的团队类型；在我们的例子中，我们使用的是`activebackup`，这意味着一个接口正在传输流量，另一个则在故障切换时待命。这可能是由于人工干预或接口失去连接所致。
- en: 'The physical interfaces are then needed to bring the team up. We are using
    additional commands and modifying the team after it has been created. This allows
    us to add the interfaces as slaves to the team. We will use the following commands:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后需要物理接口来启动团队。我们正在使用附加命令，并在团队创建后对其进行修改。这使我们能够将接口作为从属设备添加到团队中。我们将使用以下命令：
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following screenshot illustrates those commands:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了这些命令：
- en: '![Figure 4.8 – Adding physical interfaces to the virtual team'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.8 – 将物理接口添加到虚拟团队'
- en: '](img/Figure_4.08_B18607.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.08_B18607.jpg)'
- en: Figure 4.8 – Adding physical interfaces to the virtual team
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.8 – 将物理接口添加到虚拟团队
- en: 'Additional items are needed to allow connectivity out to the world, as we learned
    in previous chapters. We will use the following commands to accomplish this change:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在前几章所学，连接到外部世界还需要其他项目。我们将使用以下命令来完成此更改：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is illustrated in the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这在以下截图中有所说明：
- en: '![Figure 4.9 – Adding the additional configuration needed to the team'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.9 – 向团队添加所需的额外配置'
- en: '](img/Figure_4.09_B18607.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.09_B18607.jpg)'
- en: Figure 4.9 – Adding the additional configuration needed to the team
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9 – 向团队添加所需的额外配置
- en: 'Finally, we want to ensure that after a reboot, the interface comes back up
    automatically so that you do not lose points in the exam. We will use this command
    to accomplish the task of ensuring the interface comes up after a reboot automatically:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们希望确保在重启后，接口能够自动恢复，以便你在考试中不丢分。我们将使用这个命令来确保接口在重启后自动恢复：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is shown in the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了这一点：
- en: '![Figure 4.10 – Ensure that connectivity persists through reboots'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.10 – 确保连接在重启后持续存在'
- en: '](img/Figure_4.10_B18607.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.10_B18607.jpg)'
- en: Figure 4.10 – Ensure that connectivity persists through reboots
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.10 – 确保连接在重启后持续存在
- en: 'You can run the following command to turn up the connection and ensure that
    your team is up and functioning correctly:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以运行以下命令来启动连接，并确保你的团队正常运行：
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the following screen shot we can see the device status:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，我们可以看到设备状态：
- en: '![Figure 4.11 – Showing the device status of the team and team interfaces'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.11 – 显示团队设备状态和团队接口'
- en: '](img/Figure_4.11_B18607.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.11_B18607.jpg)'
- en: Figure 4.11 – Showing the device status of the team and team interfaces
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11 – 显示团队设备状态和团队接口
- en: 'The following command shows you what your team looks like, the connectivity,
    and which interface is currently active:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令展示了你的团队的外观、连接情况以及当前活跃的接口：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output of that command is shown in the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出如以下截图所示：
- en: '![Figure 4.12 – Team information and which port is currently active'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.12 – 团队信息以及当前活跃的端口'
- en: '](img/Figure_4.12_B18607.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.12_B18607.jpg)'
- en: Figure 4.12 – Team information and which port is currently active
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.12 – 团队信息以及当前活跃的端口
- en: 'Keep in mind if you are not able to access a server GUI, in most cases, you
    can install a GUI, but that will be discussed in later chapters. During your exam,
    you can use the `nm-connection-editor` command to launch a configurator. This
    can be seen as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果你无法访问服务器的图形界面，在大多数情况下，你可以安装一个图形界面，但这将在后续章节中讨论。在考试期间，你可以使用`nm-connection-editor`命令启动配置工具。如下所示：
- en: '![Figure 4.13 – Launching the command'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.13 – 启动命令'
- en: '](img/Figure_4.13_B18607.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.13_B18607.jpg)'
- en: Figure 4.13 – Launching the command
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.13 – 启动命令
- en: 'After launching the command, you are then presented with a GUI that you can
    control. This allows you to choose a team and create all of the items you need
    for it without remembering the steps. First, choose a team, as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 启动命令后，你将看到一个可以控制的图形界面。这允许你选择一个团队并创建所有所需的项目，而无需记住步骤。首先，选择一个团队，如下所示：
- en: '![Figure 4.14 – Choose Team from the dropdown'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.14 – 从下拉菜单中选择团队'
- en: '](img/Figure_4.14_B18607.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.14_B18607.jpg)'
- en: Figure 4.14 – Choose Team from the dropdown
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.14 – 从下拉菜单中选择团队
- en: 'Next, you will start to set the normal information for a team. As shown in
    the following screenshot, you are going to set the team name:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将开始为团队设置正常信息。如以下截图所示，你将设置团队名称：
- en: '![Figure 4.15 – Name the team and the interface of the team'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.15 – 命名团队及团队接口'
- en: '](img/Figure_4.15_B18607.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.15_B18607.jpg)'
- en: Figure 4.15 – Name the team and the interface of the team
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.15 – 命名团队及团队接口
- en: 'After you set the team name, you are going to choose which physical interfaces
    or virtual interfaces will be a part of the new team. This is illustrated as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 设置团队名称后，你将选择哪些物理接口或虚拟接口将成为新团队的一部分。如下所示：
- en: '![Figure 4.16 – Choose the interfaces to be a part of the team'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.16 – 选择要加入团队的接口'
- en: '](img/Figure_4.16_B18607.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.16_B18607.jpg)'
- en: Figure 4.16 – Choose the interfaces to be a part of the team
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.16 – 选择要加入团队的接口
- en: 'You can even set different options for the interface you are adding to the
    team. For our purposes, we will not change anything and simply add it. This is
    illustrated in the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以为添加到团队的接口设置不同的选项。对于我们的目的，我们不做任何更改，只需将其添加。如下所示：
- en: '![Figure 4.17 – The setting of interface settings at the slave interface level'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.17 – 在从属接口级别设置接口设置'
- en: '](img/Figure_4.17_B18607.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.17_B18607.jpg)'
- en: Figure 4.17 – The setting of interface settings at the slave interface level
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.17 – 在从属接口级别设置接口的配置
- en: 'You can see the outcome of adding both interfaces, or however many you would
    like to add to the team. This is shown as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到添加两个接口（或你希望添加到团队中的任意数量的接口）后的结果。如下所示：
- en: '![Figure 4.18 – Both interfaces after being added to the team'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.18 – 两个接口被添加到团队后的状态'
- en: '](img/Figure_4.18_B18607.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.18_B18607.jpg)'
- en: Figure 4.18 – Both interfaces after being added to the team
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.18 – 两个接口被添加到团队后的状态
- en: 'Finally, we can set the IP of the interface, the gateway, the DNS, and so on.
    This allows us to ensure that the team is now able to connect to the world. This
    is illustrated in the following screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以设置接口的IP、网关、DNS等。这使得我们能够确保该团队现在能够连接到外部世界。如下截图所示：
- en: '![Figure 4.19 – Setting the information needed to talk to the world'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.19 – 设置与外界通信所需的信息'
- en: '](img/Figure_4.19_B18607.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.19_B18607.jpg)'
- en: Figure 4.19 – Setting the information needed to talk to the world
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.19 – 设置与外界通信所需的信息
- en: That wraps up the manually configured way of doing things. Next up, we will
    make things easier by using Ansible Automation. Through Automation, we will be
    able to achieve the same results time and time again while lowering the possible
    human error factor. This will help when doing this type of task over and over
    again.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了手动配置的方式。接下来，我们将通过使用Ansible自动化来简化操作。通过自动化，我们可以反复实现相同的结果，同时降低人为错误的可能性。这在不断重复执行此类任务时特别有帮助。
- en: Taking the headache out of setting up your link aggregation by using Ansible
    Automation
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ansible自动化解除设置链路聚合的烦恼
- en: Now, we all know having something automated allows us to save time and effort.
    It also allows us to be consistent and that is necessary, especially when you
    are working on networking. We can build multiple different playbooks to set up
    different things or we can use variables. In this case, we are going to use variables
    as they are easiest to change around. With a variable, you can change the different
    settings easily while still only needing one playbook. An example of that would
    be when you have to choose between using round-robin and load balancing. This
    one variable can make sure that everything is set correctly. Along with other
    variables, such as the IP address and gateways, you can get away with only writing
    one playbook and then filling out the rest with variables.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们都知道自动化可以帮助我们节省时间和精力。它还可以确保我们的工作一致性，这在做网络工作时尤其重要。我们可以建立多个不同的剧本来设置不同的内容，或者我们可以使用变量。在这种情况下，我们将使用变量，因为它们是最容易修改的。有了变量，你可以轻松地更改不同的设置，同时只需一个剧本。一个例子是，当你需要在使用轮询（round-robin）和负载均衡（load
    balancing）之间进行选择时，这个变量可以确保一切设置正确。配合其他变量，如IP地址和网关，你可以只写一个剧本，剩余的部分则由变量填写。
- en: Let’s start writing our playbook for network teaming using variables. These
    are a series of items that answer questions posed by the playbook needed to get
    the job done in the end.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始编写一个使用变量的网络团队配置剧本。这些是回答剧本中需要完成工作的系列项。
- en: 'We will then add our normal code that starts every Ansible playbook. This includes
    the hosts that we will be using from inventory that will be in the playbook. It
    also includes how we will escalate privileges to allow us to make the changes.
    This is a personal preference and you can leave it on if you like. Here is what
    the initial start of the playbook looks like, just like in previous chapters:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们会添加每个Ansible剧本开头的常规代码。这包括我们将在剧本中使用的来自清单的主机。它还包括我们如何提升权限，以便进行修改。这是个人偏好，你可以选择开启。下面是剧本开头的初始内容，和前几章中的示例相同：
- en: '[PRE7]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After we have the initial setup, we are going to add the next items to start
    the network teaming functions. This will include choosing a variable for different
    interfaces to use. Also, the variables IPs should use, along with gateway and
    DNS information. It will also include a variable so you can set the type of teaming
    we are going to do. This will include using a role, as we did in [*Chapter 3*](B18607_03.xhtml#_idTextAnchor039),
    *Network Services with Automation – Introduction to Red Hat* *Linux Networking*:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 完成初始设置后，我们将添加下一步，启动网络团队功能。这将包括为不同的接口选择一个变量。还将包含用于 IP 地址的变量，连同网关和 DNS 信息。它还将包括一个变量，用来设置我们将要进行的团队类型。这将包括使用一个角色，就像我们在
    [*第 3 章*](B18607_03.xhtml#_idTextAnchor039) 中所做的那样，*网络服务自动化 – Red Hat Linux 网络介绍*：
- en: '[PRE8]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can see a man page about this role and how it works by going to `/usr/share/doc/rhel-system-roles/network/example-team_simple-playbook.yml`
    after you install the `rhel-system-roles.y`ml file using `dnf install rhel-system-roles
    -y`. This shows you the variables you will need to fill out in the playbook to
    make the system role run correctly:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 `rhel-system-roles.y`ml 文件后，你可以通过访问 `/usr/share/doc/rhel-system-roles/network/example-team_simple-playbook.yml`
    来查看该角色的手册页面以及它是如何工作的，安装方法是使用 `dnf install rhel-system-roles -y`。这将展示你需要在 playbook
    中填写的变量，以确保系统角色正确运行：
- en: '![Figure 4.20 – Rhel system role network teaming example'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.20 – Rhel 系统角色网络团队示例'
- en: '](img/Figure_4.20_B18607.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.20_B18607.jpg)'
- en: Figure 4.20 – Rhel system role network teaming example
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.20 – Rhel 系统角色网络团队示例
- en: From here, we can use the information we gathered from the example to build
    the rest of our playbook. We will be inputting additional variables to be called
    by a variable file in the playbook directory instead of the raw values.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，我们可以使用从示例中收集的信息来构建剩余的 playbook。我们将输入额外的变量，这些变量将在 playbook 目录中的变量文件中被调用，而不是直接使用原始值。
- en: 'Here is the remaining code for the playbook to run successfully, and then we
    will see the variable file and hierarchy structure after the playbook code to
    ensure that the playbook can read the variables. This is shown in the following
    code snippet:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这是剩余的 playbook 代码，以确保 playbook 能够成功运行，然后我们将在 playbook 代码后查看变量文件和层级结构，确保 playbook
    能正确读取变量。以下是相应的代码片段：
- en: '[PRE9]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This playbook will now create the build of the network team automatically.
    We will then create the variable file to answer the variables we created, such
    as `team_name`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 playbook 现在将自动创建网络团队的构建。然后我们将创建变量文件，以回答我们创建的变量，比如 `team_name`：
- en: '[PRE10]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This allows us to answer the variables but keep the playbook ambiguous to be
    used for multiple different uses instead of a one-and-done mentality. We will
    put this file in the directory with the playbook in the `vars` folder and name
    it `rhel1_team_vars.yml`. We will need to add this to the `vars list` in the playbook
    as well, so the playbook will know where to grab the information from:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够回答变量，但保持 playbook 的模糊性，使其可以用于多种不同的用途，而不是一次性完成的方式。我们将把这个文件放在与 playbook
    同一目录的 `vars` 文件夹中，并命名为 `rhel1_team_vars.yml`。我们还需要将其添加到 playbook 中的 `vars list`，这样
    playbook 就知道从哪里获取信息：
- en: '[PRE11]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, we can look at the layout of the playbook folder, which includes the inventory,
    `vars` file, and playbook:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以查看 playbook 文件夹的布局，其中包含清单、`vars` 文件和 playbook：
- en: '![Figure 4.21 – This shows the hierarchy of the playbook directory'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.21 – 这显示了 playbook 目录的层级结构'
- en: '](img/Figure_4.21_B18607.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.21_B18607.jpg)'
- en: Figure 4.21 – This shows the hierarchy of the playbook directory
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.21 – 这显示了 playbook 目录的层级结构
- en: For this playbook, the inventory will simply be `rhel1.example.com` under `defaults`,
    but it may differ in your lab setup. After that is set up, we will take a look
    at the interfaces before we set them up and then after the playbook has run.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个 playbook，清单将仅仅是 `rhel1.example.com`，位于 `defaults` 下，但在你的实验室设置中可能会有所不同。设置完成后，我们将查看接口设置，先是设置前，然后是
    playbook 执行后的情况。
- en: 'Here, you can see that before we run the playbook, there are no teams in place:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到在我们运行 playbook 之前，并没有配置任何团队：
- en: '![Figure 4.22 – The connections of the interfaces currently configured'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.22 – 当前配置的接口连接'
- en: '](img/Figure_4.22_B18607.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.22_B18607.jpg)'
- en: Figure 4.22 – The connections of the interfaces currently configured
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.22 – 当前配置的接口连接
- en: 'Having seen the preceding connections, we are going to next run the playbook
    with the `ansible-playbook –i inventory team_network_interface.yml -u emcleroy
    -k --ask-become –v` command and view the team that was created:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在看过前面的连接后，我们接下来将运行命令`ansible-playbook –i inventory team_network_interface.yml
    -u emcleroy -k --ask-become –v`来执行 playbook，并查看已创建的团队：
- en: '![Figure 4.22 – Here, you can see the team was created'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.22 – 在这里，你可以看到团队已被创建'
- en: '](img/Figure_4.23_B18607.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.23_B18607.jpg)'
- en: Figure 4.22 – Here, you can see the team was created
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.22 – 在这里，你可以看到团队已被创建
- en: As you have learned in this section, Ansible Automation can make setting up
    a network team a breeze. Along with the ability to save time for other more important
    projects, Ansible Automation lowers the human error factor. This allows users
    to be confident that the configuration on each server will match. This allows
    faster troubleshooting and ease of deployment.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在本节中所学到的，Ansible 自动化可以使网络团队的设置变得轻而易举。除了为其他更重要的项目节省时间外，Ansible 自动化还降低了人为错误的风险。这使得用户可以放心，每台服务器上的配置将保持一致，从而加速故障排除并简化部署过程。
- en: Summary
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned about network teaming. We covered how it can
    be used for HA and for throughput advantages. We worked on ensuring that you understand
    the value behind using a network team and the importance it has in a production
    environment. When you have multiple paths, for instance, you have the ability
    to take down a switch for maintenance without causing an issue to your running
    applications. These are just some of the advantages of network teaming and there
    are many more. In the next chapter, we will be digging further into the networking
    space for Rhel 8, in which we will discuss DNS, DHCP, and IPs in further detail.
    We will learn how to set them up and enable servers to provide functions such
    as DNS and DHCP. Take a breather, and then let’s get ready to leap into more networking
    fun.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了网络团队。我们讨论了它如何用于高可用性（HA）和提高吞吐量的优势。我们致力于确保你理解使用网络团队的价值，以及它在生产环境中的重要性。当你有多个路径时，例如，你可以在不影响正在运行的应用程序的情况下，关闭交换机进行维护。这些只是网络团队的一些优势，实际上还有更多。在下一章中，我们将进一步探索
    Rhel 8 的网络领域，讨论 DNS、DHCP 和 IP 的更多细节。我们将学习如何设置它们，并使服务器能够提供如 DNS 和 DHCP 等功能。休息一下，接下来我们将准备好进入更多有趣的网络内容。
