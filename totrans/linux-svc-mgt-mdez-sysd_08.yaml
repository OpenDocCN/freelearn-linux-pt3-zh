- en: '*Chapter 7*: Understanding systemd Timers'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Busy system administrators like to find ways to make their lives easier. One
    way to do that is to automate as many of their routine tasks as possible by setting
    them up to automatically run on a set schedule. In this chapter, we''ll look at
    how to do this with `systemd` timers. The specific topics that we''ll look at
    include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Comparing `systemd` timers with `cron`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding timer options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating timers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you're ready, let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As always, we'll be using an Ubuntu Server 20.04 virtual machine and an Alma
    Linux 8 virtual machine for our demonstrations. It's all hands-on, so feel free
    to follow along with your own virtual machines.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following link to see the Code in Action video: [https://bit.ly/31pQdfS](https://bit.ly/31pQdfS)'
  prefs: []
  type: TYPE_NORMAL
- en: Comparing systemd timers with cron
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `cron` family of scheduling utilities has been a part of Unix and Unix-like
    operating systems since May 1975\. In the 1980s, as part of Richard Stallman's
    new *free software* movement, several free-as-in-speech versions of `cron` were
    created. Paul Vixie, a member of the *Internet Hall of Fame*, created his own
    free version in 1987\. Vixie's version became the most widely used version in
    the Linux world. (In fact, if you look at the `cron` man page, you'll still see
    Paul Vixie's name in the **Authors** section at the bottom.)
  prefs: []
  type: TYPE_NORMAL
- en: 'A big advantage of `cron` is its sheer simplicity. All it takes to create a
    `cron` job is one simple line of code, which would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_7.1_B17491.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – An example of a cron job
  prefs: []
  type: TYPE_NORMAL
- en: In this very simple example, which I took from one of my ancient CentOS 6 virtual
    machines, I'm running a simple task at 25 minutes and 55 minutes past every hour
    of every day. Twice every hour, this `cron` job inserts a message into the system
    log file. Any non-privileged user who needs to can create a `cron` job to perform
    some non-privileged task and anyone with the proper root-level privileges can
    create a system-level job. Jobs can be set up to run on a particular day of the
    week, a particular day of the month, at particular times of the day, or upon rebooting
    the machine. There's a lot of flexibility here, and it's all very simple to set
    up.
  prefs: []
  type: TYPE_NORMAL
- en: Another advantage of `cron` is that it's everywhere in the world of Unix and
    Unix-like operating systems, while `systemd` only exists in the world of Linux.
    If you're a system administrator in a large shop with a mix of both Unix and Linux
    servers, you might find it easier to stick with `cron`.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up `systemd` timers isn't hard, but it does take a bit more time and
    effort. To begin with, you can't directly access a command or a script from a
    `systemd` timer. You first have to create a `systemd` service, then call that
    service from the timer. However, there are quite a few advantages of using `systemd`
    timers, so learning how to use them could be well worth the effort.
  prefs: []
  type: TYPE_NORMAL
- en: With `systemd` timers, you have a lot more flexibility and accuracy in the way
    you set up task schedules. The services that you create to go along with your
    timers can take advantage of resource management, security, and all of the other
    goodness that comes with using `systemd`. You can create timers that trigger upon
    some predefined event, or you can specify the calendar and clock time for when
    you want to trigger the timer. As an added bonus, `systemd` will log the completion
    of a timer event in the system log file. With `cron` jobs, you don't have any
    of that.
  prefs: []
  type: TYPE_NORMAL
- en: So, you're now wondering which of these two task-scheduling systems you should
    use. Well, `cron` does still come installed on modern Linux systems. If you just
    need to quickly create a simple job, there's certainly nothing wrong with using
    `cron`. But, if you need to set up something a bit fancier, then definitely go
    with a `systemd` timer. Even if you do just need something simple, it might still
    be worth your while to set up a timer in order to get familiar with the process.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, that's probably enough for the introduction. Let's look at how to view
    information about the `systemd` timers on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing timer information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you first install a Linux operating system, you''ll see that there are
    already some active timers that take care of certain administrative tasks. You
    can see them by using the `systemctl list-unit-files -t timer` command. On your
    Alma Linux machine, the output should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_7.2_B17491.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – Timers on Alma Linux
  prefs: []
  type: TYPE_NORMAL
- en: We see that 12 timers are installed, but only two are enabled. Two are static,
    which means that they can't be either enabled or disabled, and all the rest are
    disabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Ubuntu server machine, we see that quite a few more timers are enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_7.3_B17491.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – Timers on Ubuntu server
  prefs: []
  type: TYPE_NORMAL
- en: 'The `systemctl list-timers` command shows you six fields of information, which
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_7.4_B17491.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – systemctl list-timers
  prefs: []
  type: TYPE_NORMAL
- en: 'The six fields are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NEXT**: This shows the next time that the timer is scheduled to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LEFT**: This shows how much time is left before the timer runs again.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LAST**: This shows the time at which the timer last ran.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PASSED**: This shows how much time has elapsed since the timer last ran.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**UNIT**: This is the name of the unit file for the timer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ACTIVATES**: This is the name of the service that the timer runs. This will
    normally be the same name as the timer, but it doesn''t have to be.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can view some of this information with `systemctl status`, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Just as you can do with services and targets, you can view the dependency tree
    for a timer, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We've seen several ways to view information about the timers on your system.
    Let's move on and look at some of the configuration options.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding timer options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to start explaining the timer options is to look at some examples
    of timers that are already on our systems. We'll begin by looking at a timer on
    the Alma Linux machine.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding monotonic timers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two ways to specify the time at which you want a service to automatically
    run. In this section, we'll look at the *monotonic* method. This means that instead
    of configuring the job to run at a specific calendar and clock time, you'll instead
    configure the job to run after some sort of event that serves as a starting point.
    A starting point can be system bootup, timer activation, the time since a timer's
    associated service last ran, or any of several other things (you can see all of
    the monotonic starting points by looking at the `systemd.timer` man page). For
    an example of a monotonic timer, let's look at `dnf-makecache.timer` on the Alma
    Linux machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Red Hat-type operating systems, such as Alma Linux, use the `dnf` utility to
    perform update and package management. As with all Linux package management systems,
    `dnf` maintains a local cache of information about what is in the distro''s package
    repositories. Periodically, the cache needs to be refreshed. We could do that
    manually with a `sudo dnf makecache` command, but Red Hat-type systems all come
    with a timer to do it automatically. Here''s what the timer looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `[Unit]` section, we see:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ConditionKernelCommandLine=!rd.live.image`: This prevents the timer from running
    if the machine is booted from some sort of live media, such as a live DVD.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ConditionPathExists=!/run/ostree-booted`: This looks for the `/run/ostree-booted`
    directory, and prevents the timer from running if this directory is found. (According
    to the `ostree` man page, you would use `ostree` to manage different versions
    of filesystem trees. These filesystem trees are mounted as read-only, so trying
    to update the cache on them wouldn''t do much good.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Wants=network-online.target`: This prevents the timer from running until after
    network services are available. (Already, you''re seeing things you can do with
    `systemd` timers that you can''t do with `cron`.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, we see the `[Timer]` section, with two examples of monotonic timer settings.
    As I''ve already mentioned, monotonic timers are defined relative to a certain
    starting point, rather than by calendar and clock time:'
  prefs: []
  type: TYPE_NORMAL
- en: '`OnBootSec=10min`: As we''ll see in a moment, this timer activates the `dnf-makecache.service`.
    This line causes the service to run 10 minutes after the system has booted up.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnUnitInactiveSec=1h`: This line says that the timer will run the `dnf-makecache.service`
    again one hour after the last time it ran. In other words, this line causes the
    service to run approximately every hour.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Unit=dnf-makecache.service`: In this case, it''s not necessary to have this
    line. By default, a timer will activate a service that has the same name as the
    timer. The only time you really have to have this line is if the timer activates
    a service with a different name. Still though, some people like to use this parameter
    in any case, and there''s nothing wrong with that.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can see the rest of the monotonic timer parameters on the `systemd.timer`
    man page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `[Install]` section is fairly standard stuff. All we see there is the `WantedBy=timers.target`
    line, which causes this timer to run when the `timers.target` starts.
  prefs: []
  type: TYPE_NORMAL
- en: 'While we''re at it, we might as well look at the `dnf-makecache.service` that
    this timer activates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `[Service]` section, we see a few things that we haven''t seen in service
    files before:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Type=oneshot`: Okay, we actually have seen this one before. I just want to
    show here that you need to use the `oneshot` type for services that are called
    by timers. (It really makes sense when you think about it.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Nice=19`: This causes the service to run with a niceness value of `19`, which
    means that the service will run with the lowest possible priority. (Niceness values
    range from `-20` to positive `19`. Although it seems counterintuitive, `-20` denotes
    the highest priority that can be assigned to a process, and positive `19` denotes
    the lowest.) This setting helps prevent this service from bogging down other processes
    that might be more important.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IOSchedulingClass=2`: This sets the type of input/output scheduler scheme
    that we want to use. A value of `2` means that we want to use the `best-effort`
    type scheduling class. (You can see the other `IOSchedulingClass` types in the
    `systemd.exec` man page.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IOSchedulingPriority=7`: `IOSchedulingPriority` values range from `0` through
    `7`, with `0` as the highest priority and `7` as the lowest. This is just another
    way to keep this service from bogging down the rest of the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExecStart=/usr/bin/dnf makecache --timer`: The `--timer` option here has nothing
    to do with `systemd` timers. Instead, this is an option that goes along with the
    `dnf` command. According to the `dnf` man page, `--timer` causes `dnf` to be more
    resource-aware, so that it won''t run if the computer is running on battery power.
    It also causes the `dnf makecache` command to immediately abort if it has already
    been run recently.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `[Install]` section of this service file is conspicuous by its absence.
    Not having the `[Install]` section makes this a *static* type of service that
    you can't enable. Instead, it will just run whenever the `dnf-makecache.timer`
    activates it.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, that about does it for this example. Next, we'll look at the other ways
    to specify when to run a job.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding real-time timers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use a *real-time* timer to run a job on whatever calendar day and at
    whatever clock time you want it to run. For our first simple example, let''s look
    at the `fstrim.timer` on the Alma machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the breakdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '`OnCalendar=weekly`: You''ll use the `OnCalendar` parameter to specify the
    time at which you want the job to run. Setting this job up to run weekly means
    that it will run every Monday morning at midnight. (We''ll see in a bit where
    these parameters are defined.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AccuracySec=1h`: This defines the amount of time by which the job is allowed
    to be delayed. A one-hour delay means that this job could run at any time from
    midnight to one o''clock on Monday morning. If you leave this line out, the default
    delay will be one minute. If you want the job to run exactly at midnight on Monday,
    you can change the `1h` to `1us`, which gives the greatest accuracy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Persistent=true`: So, what happens if your machine is shut down at midnight
    on Monday morning? Without this line, this job will just be skipped. With this
    line, the job will run the next time you boot up the machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As you can see, there''s no `Unit=` line in this timer, as there was in the
    previous example. So, by default, this `fstrim.timer` will activate the `fstrim.service`,
    which clears out unused blocks on your storage drives. Here''s what the service
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Okay, so there's nothing new here. It's just a standard static, `oneshot` type
    of service, as we saw in the previous example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `fstrim.timer` is disabled by default on the Alma machine, as we see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `fstrim.timer` comes in handy if you''re running either a solid-state drive
    or thinly provisioned storage. If you need to enable the timer, just do it the
    same way that you''d enable a service, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'On the Ubuntu machine, you''ll see that the `fstrim.timer` is enabled by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Next, let's take a closer look at how to define the `OnCalendar` times.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding calendar events for real-time timers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Okay, here's where things can get a bit sticky. I mean, configuring times for
    `cron` jobs is easy and straightforward. Understanding how to set up times for
    a `systemd` timer takes a bit of getting used to. Your best bet is to open the
    `systemd.time` man page, and scroll down to the **CALENDAR EVENTS** section. The
    explanation there isn't as clear as it could be, but you can pretty much figure
    it out by looking at the examples. Let's see if we can make any sense of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `fstrim.timer` example that we just looked at, we saw the `OnCalendar=weekly`
    line, which causes the job to run at midnight every Monday morning. In the `systemd.time`
    man page, you''ll see the complete list of predefined event times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Most of these are easy to figure out. The only ones that might throw you a bit
    are `quarterly` and `semiannually`. A `quarterly` job will run at midnight on
    the first day of January, April, July, and October, as denoted by the `01,04,07,10`
    part. A `semiannually` job will run at midnight on the first day of January and
    July, as denoted by the `01,07` part.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll down the `systemd.time` page a bit more and you''ll see a whole big
    list of examples of how you can set up your job times. Rather than try to show
    you the whole list, I''ll just show you one example, and then break it down for
    you. Here we go:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The left-hand side shows you the date and time as a human would normally write
    it. The right-hand side shows you the value that you''d use as an `OnCalendar=`
    parameter. I chose this example because it uses all of the fields. (And yes, I
    know that 2003 is in the past, but this is what''s in the man page.) To create
    a job that would have run at midnight on March 3, 2003, the `OnCalendar=` line
    would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Since that''s several years in the past, let''s fix this so that it will run
    in the future:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Ah, yes. *In the year 2525, if man is still alive, and if woman can still survive.
    . .* (Who besides me is old enough to remember that silly song?)
  prefs: []
  type: TYPE_NORMAL
- en: 'Seriously though, this isn''t near as hard as it first seems to be. We have
    `Year-Month-Date`, followed by `Hour:Minute:Second` in 24-hour format. So yeah,
    it''s actually quite easy-peasy. Now, let''s say that we want this to run every
    day at 6:15 in the evening. We''ll just replace the `Year-Month-Date` fields with
    the standard wildcard symbol ( `*` ), and change the time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s good, but I''ve changed my mind about running it every single day.
    I think I''ll change it so that it will only run on the fifth day of every month,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Nah, that''s not often enough. Let''s make it run on the fifth, tenth, and
    fifteenth days of every month:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Day-of-Week` field is optional. Let''s make the job run on the fifth,
    tenth, and fifteenth days of the month, but only if they happen to fall on either
    a Monday or a Wednesday:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Better yet, let''s just make it run every Monday and Wednesday:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the tilde ( `~` ) symbol to count a specified number of days back
    from the end of a month. To have the job run on the third from last day of every
    February, just do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s make the job run on the last Monday of every May:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s get really crazy and make the job run every ten minutes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Okay, that should be enough to give you a clue. If you need to see any more
    examples, just look at the `systemd.time` man page.
  prefs: []
  type: TYPE_NORMAL
- en: Creating timers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating your own timer is a two-stage process. You'll first create the service
    that you want to run, and then you'll create and enable the timer.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a system-level timer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's say that you're a security-conscious soul who suspects that someone might
    try to plant some rootkits on your machines. You want to set up Rootkit Hunter
    so that it will run every day after work hours.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: I wanted to do this with both Ubuntu and Alma Linux. Unfortunately, there's
    a bug in the Rootkit Hunter package for Ubuntu that prevents Rootkit Hunter from
    updating its signature database. That's not too surprising, because Ubuntu quality
    control has always been somewhat less than perfect. So, for this example, we'll
    just go with Alma.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because there''s a bug in the Rootkit Hunter package in Ubuntu, we''ll just
    do this on the Alma machine. Rootkit Hunter isn''t in the normal Alma repositories,
    so you''ll first need to install the EPEL repository, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `rkhunter.service` file by doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Make the file look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we do the actual scan, we want to create the `rkhunter.dat` file to
    store file properties and update the database of rootkit signatures. We''ll do
    that with the two `ExecStartPre=` lines. In the `ExecStart=` line, we have three
    options, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-c`: This is the *check* option, which does the actual scan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--cronjob`: Normally, Rootkit Hunter will pause several times during a scan
    and wait for user input. This option causes Rootkit Hunter to complete its run
    without pausing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--rwo`: This option causes Rootkit Hunter to only report any problems that
    it finds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before creating the timer, it''s a good idea to start the service manually
    to verify that it works. We''ll do that with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'When it''s finished running, look at the `/var/log/rkhunter/rkhunter.log` file
    to verify that there aren''t any problems. If everything looks good, we''re ready
    to create the timer. Do that with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'For demonstration purposes, set the `OnCalendar=` time to just a few minutes
    into the future. That way, you won''t have to wait long for it to run. When you''re
    done, the file should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Do a `daemon-reload`, and then enable the timer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Now it's just a matter of waiting for the timer to run to see whether it works.
    After it has finished, you can view the results in the `/var/log/rkhunter/rkhunter.log`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's allow a normal, non-privileged user to create a timer.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a user-level timer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can try this demonstration on either the Ubuntu or the Alma virtual machine.
    I haven't shown much love to the Ubuntu machine for a while, so I'll go with that
    one.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's say that you're just a normal user who wants to back up your home
    directory to one of those handy-dandy portable drives. You'll plug it into the
    USB port of your computer, and the system will automatically mount it under the
    `/media/backup/` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t have a portable backup drive, you can simulate this by manually
    creating a backup directory, and setting the permissions so that normal users
    can write to it, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sudo mkdir /media/backup**'
  prefs: []
  type: TYPE_NORMAL
- en: '**sudo chmod 777 /media/backup**'
  prefs: []
  type: TYPE_NORMAL
- en: Now it's just a matter of creating the service and the timer. Any non-privileged
    user can do that by using the `--user` option switch.
  prefs: []
  type: TYPE_NORMAL
- en: 'As before, we''ll start by creating the service, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This will automatically create the necessary files and directories under the
    `/home/donnie/.config/` directory. I''ll use `rsync` to do the backup, so my `backup.service`
    file will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'I want to make sure that this works, so I''ll do a `daemon-reload` and then
    try running the service manually before I create the timer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'If it runs successfully, I should see a `donnie/` directory under `/media/backup/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'So far, so good. Let''s see what''s in that `donnie/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Nice. The backup service works, and I have achieved coolness. Now, it''s time
    to create the timer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'I''ll just have it run daily at midnight, so I''ll make it look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Of course, if you don't want to wait around until midnight to see whether this
    works, just set the `OnCalendar=` time to whatever you want.
  prefs: []
  type: TYPE_NORMAL
- en: Note that when we use the `--user` option, we need to have the `default.target`
    in the `WantedBy=` line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, I''ll do a `daemon-reload` and enable the timer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'I can also use the `--user` switch to view information about this timer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'As things stand now, this timer will only run while I''m actually logged in
    to the system. To ensure that it runs even when I''m not logged in, I''ll enable
    the `linger` function for myself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Okay, I think that does it for this chapter. Let's go ahead and wrap it up.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've looked at `systemd` timers, and compared them to the
    legacy `cron` system. We looked at different timer options, and at different ways
    to specify when a timer should run. Finally, we looked at how to create timers
    for both system-level and user-level jobs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll take a brief look at the bootup process under `systemd`.
    I'll see you there.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How do `cron` and `systemd` timers differ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. It's much easier to set up `systemd` timers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Non-privileged users can set up their own `cron` jobs, but they can't set
    up their own timers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. A `cron` job can run a command or script directly, but a `systemd` timer
    can only run an associated service.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Non-privileged users can set up their own `systemd` timers, but they can't
    set up their own `cron` jobs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What are the two ways of specifying when a job will run? (Choose two.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. monotonic
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. wallclock
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. calendartime
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. realtime
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which of the following man pages would tell you how to format times for the
    `OnCalendar=` parameter?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. `systemd.time`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. `systemd.timer`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. `systemd.unit`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. `systemd.exec`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which of the following time configurations equates to the monthly setting?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. `*-01-01 00:00:00`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. `*-*-* 00:00:00`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. `*-*-01 00:00:00`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. `*-01-01 00:00:00`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: c
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a, d
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: c
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Comparing `systemd` timers with `cron`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://trstringer.com/systemd-timer-vs-cronjob/](https://trstringer.com/systemd-timer-vs-cronjob/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://medium.com/horrible-hacks/using-systemd-as-a-better-cron-a4023eea996d](https://medium.com/horrible-hacks/using-systemd-as-a-better-cron-a4023eea996d)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Using `systemd` timers with Docker:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://matthiasadler.info/blog/running-scheduled-tasks-in-docker-containers-with-systemd/](https://matthiasadler.info/blog/running-scheduled-tasks-in-docker-containers-with-systemd/'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `systemd` timers as a `cron` replacement:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.maketecheasier.com/use-systemd-timers-as-cron-replacement/](https://www.maketecheasier.com/use-systemd-timers-as-cron-replacement/'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
