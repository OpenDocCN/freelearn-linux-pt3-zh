["```\n    $ sudo apt update \n    ```", "```\n    $ sudo apt install docker.io \n    ```", "```\n    $ sudo systemctl enable --now docker \n    ```", "```\n    $ sudo usermod -aG docker <username> \n    ```", "```\n    $ sudo systemctl restart docker \n    ```", "```\nFROM tiangolo/uwsgi-nginx:python3.12 \n```", "```\nFROM quay.io/my-org/my-app:my-tag \n```", "```\nRUN pip install --no-cache-dir -r /tmp/requirements.txt \n```", "```\nCOPY ./app /app \n```", "```\nWORKDIR /app \n```", "```\nENV PYTHONPATH=/app \n```", "```\nRUN chmod +x /entrypoint.sh \n```", "```\nENTRYPOINT [\"/entrypoint.sh\"] \n```", "```\nCMD [\"/start.sh\"] \n```", "```\n#! /usr/bin/env sh\nset -e\n# If there's a prestart.sh script in the /app directory, run it before \n# starting\nPRE_START_PATH=/app/prestart.sh\necho \"Checking for script in $PRE_START_PATH\"\nif [ -f $PRE_START_PATH ] ; then\n    echo \"Running script $PRE_START_PATH\"\n    . $PRE_START_PATH\nelse\n    echo \"There is no script $PRE_START_PATH\"\nfi\n# Start Supervisor, with Nginx and uWSGI\nexec /usr/bin/supervisord \n```", "```\nCMD tail -f /dev/null \n```", "```\n$ docker images \n```", "```\n    $ git clone https://github.com/tiangolo/uwsgi-nginx-flask-docker.git \n    ```", "```\n    $ cd uwsgi-nginx-flask-docker/docker-images \n    ```", "```\n    $ cp python3.12.dockerfile Dockerfile \n    ```", "```\n    $ docker build -t my-image . \n    ```", "```\n$ docker images \n```", "```\n$ docker ps \n```", "```\n$ docker run -d --name my-container -p 80:80 my-image \n```", "```\n$ docker ps \n```", "```\n$ docker stop my-container \n```", "```\n$ docker ps \n```", "```\n$ docker ps -a \n```", "```\n$ docker pull tiangolo/uwsgi-nginx-flask:python3.12 \n```", "```\n$ docker images \n```", "```\n$ docker run -d --name flask-container -p 80:80 tiangolo/uwsgi-nginx-flask:python3.12 \n```", "```\n    $ docker login \n    ```", "```\n    $ docker tag my-image:latest <repository>/my-image:latest \n    ```", "```\n    $ docker push <repository>/my-image:latest \n    ```", "```\n    $ docker ps -a \n    ```", "```\n    $ docker stop flask-container \n    ```", "```\n    $ docker rm flask-container \n    ```", "```\n    $ docker images \n    ```", "```\n    $ docker rmi <image-ID> \n    ```", "```\n$ docker system prune -a \n```", "```\n# Dockerfile\nFROM arm64v8/ubuntu:24.04\nLABEL maintainer=\"fvasquez@gmail.com\"\nRUN apt update && apt-get install -y \\\n    bluez \\\n    dbus \\\n    python3-dbus \\\n    python3-gi\n# Your app code, binaries, or other instructions\nCOPY . /app\nWORKDIR /app\n# Example app run\nCMD ./entrypoint.sh \n```", "```\nname: Publish Docker Image to GHCR\non:\n  push:\n    branches: [ \"master\" ]\npermissions:\n  contents: read\n  packages: write\njobs:\n  build-and-push:\n    runs-on: ubuntu-24.04-arm\n    steps:\n      # 1) Check out the code\n      - name: Check out code\n        uses: actions/checkout@v4\n      # 2) Log in to GitHub Container Registry\n      - name: Log in to GHCR\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      # 3) Build and Push the Docker image\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v4\n        with:\n          context: .\n          file: ./Dockerfile\n          platforms: linux/arm64\n          push: true\n          tags: |\n            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest \n```", "```\n$ ssh <username>@raspberrypi.local \n```", "```\n    $ sudo apt update \n    ```", "```\n    $ sudo apt install docker.io \n    ```", "```\n    $ sudo systemctl enable --now docker \n    ```", "```\n    $ sudo usermod -aG docker <frank> \n    ```", "```\n    $ sudo systemctl restart docker \n    ```", "```\n    $ exit \n    ```", "```\nfrank@raspberrypi:~$ docker pull ghcr.io/fvasquez/gattd:latest\nlatest: Pulling from fvasquez/gattd\n820619057a1c: Pull complete\n84a50057c1f4: Pull complete\nb6caffbfe56a: Pull complete\n4f4fb700ef54: Pull complete\nDigest: sha256:85ad5878bda3a390fe33d7474d88c2e921f51a7df314351be9d2e00a4c3ba8f1\nStatus: Downloaded newer image for ghcr.io/fvasquez/gattd:latest\nghcr.io/fvasquez/gattd:latest \n```", "```\nfrank@raspberrypi:~$ docker run --net=host --privileged -t ghcr.io/fvasquez/gattd:latest\n * Starting system message bus dbus                                        [ OK ]\n * Starting bluetooth                                                      [ OK ]\nWaiting for services to start... done! (in 2 s)\n/app/gatt_server_example.py:25: PyGIDeprecationWarning: GObject.MainLoop is deprecated; use GLib.MainLoop instead\n  mainloop = GObject.MainLoop()\nchecking adapter /org/bluez, keys: dict_keys([dbus.String('org.freedesktop.DBus.Introspectable'), dbus.String('org.bluez.AgentManager1'), dbus.String('org.bluez.ProfileManager1'), dbus.String('org.bluez.HealthManager1')])\nchecking adapter /org/bluez/hci0, keys: dict_keys([dbus.String('org.freedesktop.DBus.Introspectable'), dbus.String('org.bluez.Adapter1'), dbus.String('org.freedesktop.DBus.Properties'), dbus.String('org.bluez.BatteryProviderManager1'), dbus.String('org.bluez.GattManager1'), dbus.String('org.bluez.Media1'), dbus.String('org.bluez.NetworkServer1'), dbus.String('org.bluez.LEAdvertisingManager1')])\nfound adapter /org/bluez/hci0\nreturning adapter /org/bluez/hci0\nadapter: /org/bluez/hci0\nchecking adapter /org/bluez, keys: dict_keys([dbus.String('org.freedesktop.DBus.Introspectable'), dbus.String('org.bluez.AgentManager1'), dbus.String('org.bluez.ProfileManager1'), dbus.String('org.bluez.HealthManager1')])\nchecking adapter /org/bluez/hci0, keys: dict_keys([dbus.String('org.freedesktop.DBus.Introspectable'), dbus.String('org.bluez.Adapter1'), dbus.String('org.freedesktop.DBus.Properties'), dbus.String('org.bluez.BatteryProviderManager1'), dbus.String('org.bluez.GattManager1'), dbus.String('org.bluez.Media1'), dbus.String('org.bluez.NetworkServer1'), dbus.String('org.bluez.LEAdvertisingManager1')])\nfound adapter /org/bluez/hci0\nreturning adapter /org/bluez/hci0\nRegistering GATT application...\nGetManagedObjects\nGetAll\nreturning props\nGATT application registered\nAdvertisement registered\nBattery level: 98\nBattery level: 96\nBattery level: 94\nBattery level: 92\nBattery level: 90\nBattery level: 88 \n```", "```\n#!/bin/bash\n# Start services\nsystemctl start dbus\nsystemctl start bluetooth\n# Wait for services to start\nmsg=\"Waiting for services to start...\"\ntime=0\necho -n $msg\nwhile [[ \"$(pidof start-stop-daemon)\" != \"\" ]]; do\n    sleep 1\n    time=$((time + 1))\n    echo -en \"\\r$msg $time s\"\ndone\necho -e \"\\r$msg done! (in $time s)\"\n# Reset Bluetooth adapter by restarting it\nhciconfig hci0 down\nhciconfig hci0 up\n# Start application\npython3 /app/gatt_server_example.py \n```", "```\n    $ cd ~ \n    ```", "```\n    $ source poky/oe-init-build-env build-rpi \n    ```", "```\n    $ bitbake-layers layerindex-fetch --branch scarthgap --fetchdir ~ meta-virtualization \n    ```", "```\n    $ bitbake-layers show-layers \n    ```", "```\n    layer                 path                                         priority\n    ===========================================================================\n    core                  /home/frank/poky/meta                               5\n    yocto                 /home/frank/poky/meta-poky                          5\n    yoctobsp              /home/frank/poky/meta-yocto-bsp                     5\n    openembedded-layer    /home/frank/meta-openembedded/meta-oe               5\n    meta-python           /home/frank/meta-openembedded/meta-python           5\n    networking-layer      /home/frank/meta-openembedded/meta-networking       5\n    multimedia-layer      /home/frank/meta-openembedded/meta-multimedia       5\n    raspberrypi           /home/frank/meta-raspberrypi                        9\n    filesystems-layer     /home/frank/meta-openembedded/meta-filesystems      5\n    selinux               /home/frank/meta-selinux                            5\n    webserver             /home/frank/meta-openembedded/meta-webserver        5\n    virtualization-layer  /home/frank/meta-virtualization                     8 \n    ```", "```\n    IMAGE_INSTALL:append = \" ntp-utils docker\" \n    ```", "```\n    EXTRA_USERS_PARAMS = \"\\\n        groupadd -r docker; \\\n        usermod -a -G docker root; \\\n    \" \n    ```", "```\n    $ bitbake rpi-test-image \n    ```", "```\n    $ ssh root@raspberrypi4-64.local \n    ```", "```\n    # docker info\n    Client:\n     Version:    25.0.3\n     Context:    default\n     Debug Mode: false\n    <â€¦>\n    WARNING: No memory limit support\n    WARNING: No swap limit support\n    WARNING: No kernel memory TCP limit support\n    WARNING: No oom kill disable support \n    ```", "```\n    # ntpdate pool.ntp.org\n    14 Jan 04:22:49 ntpdate[783]: step time server 45.33.53.84 offset +216229384.417735 sec \n    ```", "```\n    # docker run hello-world\n    Unable to find image 'hello-world:latest' locally\n    latest: Pulling from library/hello-world\n    478afc919002: Pull complete\n    Digest:\n    sha256:5b3cc85e16e3058003c13b7821318369dad01dac3dbb877aac3c28182255c724\n    Status: Downloaded newer image for hello-world:latest\n    Hello from Docker!\n    This message shows that your installation appears to be working correctly. \n    ```", "```\n    $ cd ~\n    $ unzip Downloads/balena-cli-v20.2.9-linux-x64-standalone.zip \n    ```", "```\n    $ export PATH=$PATH:~/balena-cli \n    ```", "```\n    $ balena version\n    20.2.9 \n    ```", "```\n$ sudo env \"PATH=$PATH\" balena device detect\nScanning for local balenaOS devices... Reporting scan results\n-\n  host:          bf04eba.local\n  address:       192.168.1.183\n  osVariant:     development\n  dockerInfo:\n    Containers:        1\n    ContainersRunning: 1\n    ContainersPaused:  0\n    ContainersStopped: 0\n    Images:            1\n    Driver:            overlay2\n    SystemTime:        2025-03-06T05:10:40.708637573Z\n    KernelVersion:     6.1.77-v8\n    OperatingSystem:   balenaOS 6.4.1+rev1\n    Architecture:      aarch64\n  dockerVersion:\n    Version:    v20.10.43\n    ApiVersion: 1.41 \n```", "```\n    $ git clone https://github.com/balena-io-examples/balena-python-hello-world.git \n    ```", "```\n    $ cd balena-python-hello-world \n    ```", "```\n    $ balena push 192.168.1.183 \n    ```", "```\n[Logs]    [2025-03-06T05:16:46.546Z] [balena-hello-world] 192.168.1.177 - - [06/Mar/2025 05:16:46] \"GET / HTTP/1.1\" 200 - \n```", "```\n$ balena device logs 192.168.1.183 \n```", "```\ntree\n.\nâ”œâ”€â”€ balena.yml\nâ”œâ”€â”€ CHANGELOG.md\nâ”œâ”€â”€ docker-compose.yml\nâ”œâ”€â”€ Dockerfile.template\nâ”œâ”€â”€ license.md\nâ”œâ”€â”€ logo.png\nâ”œâ”€â”€ README.md\nâ”œâ”€â”€ repo.yml\nâ”œâ”€â”€ requirements.txt\nâ”œâ”€â”€ src\nâ”‚   â””â”€â”€ app.py\nâ”œâ”€â”€ VERSION\nâ””â”€â”€ views\n    â”œâ”€â”€ index.html\n    â””â”€â”€ public\n        â”œâ”€â”€ bootstrap.min.css\n        â”œâ”€â”€ confetti.js\n        â”œâ”€â”€ favicon.ico\n        â”œâ”€â”€ logo.svg\n        â””â”€â”€ main.css \n```", "```\n    $ git diff\n    diff --git a/views/index.html b/views/index.html\n    index c5fcddd..7796f5a 100644\n    --- a/views/index.html\n    +++ b/views/index.html\n    @@ -26,7 +26,7 @@\n         <div class=\"container mt-5 mb-5 p-0 pb-5\">\n           <div class=\"row d-flex flex-column align-items-center\">\n    -        <h1>Welcome to balena!</h1>\n    +        <h1>Welcome to banana!</h1>\n             <p class=\"text-center pl-5 pr-5 pt-0 pb-0\">Now that you've deployed code to your device,<br /> explore the resources below to continue on your journey!</p>\n           </div> \n    ```", "```\n    $ balena push 192.168.1.183 \n    ```", "```\n$ balena device ssh 192.168.1.183\nLast login: Thu Mar  6 05:59:21 2025 from 192.168.1.124\nroot@bf04eba:~# \n```", "```\n$ balena device ssh 192.168.1.183 balena-hello-world\nroot@6a4ef89e6f10:/usr/src/app# ls\nCHANGELOG.md         VERSION             logo.png          views\nDockerfile           balena.yml          repo.yml\nDockerfile.template  docker-compose.yml  requirements.txt\nREADME.md            license.md          src \n```"]