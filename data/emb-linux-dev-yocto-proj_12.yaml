- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Creating Custom Layers
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义层
- en: In addition to using existing layers from the community or vendors, we will
    learn how to create layers for our products in this chapter. Additionally, we
    will discover how to create a machine definition and distribution and profit from
    them to organize our source code better.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用来自社区或供应商的现有层之外，本章将教我们如何为我们的产品创建层。此外，我们还将学习如何创建机器定义和分发，并从中获益，以便更好地组织我们的源代码。
- en: Making a new layer
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新层
- en: 'Before creating our layer, it’s always a good idea to check whether a similar
    one is already available at the following website: [http://layers.openembedded.org](http://layers.openembedded.org).'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建我们的层之前，最好先检查一下以下网站是否已有类似的层：[http://layers.openembedded.org](http://layers.openembedded.org)。
- en: If we are still looking for a layer suitable for our needs, the next step is
    to create the directory. Usually, the layer name starts with `meta-`, but this
    is not a technical restriction.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仍在寻找适合我们需求的层，下一步是创建目录。通常，层的名称以`meta-`开头，但这不是技术限制。
- en: 'The `<layer>/conf/layer.conf` file is the layer configuration file required
    for every layer. The new layer can be created with a tool called `bitbake-layers`
    from BitBake, provided in Poky, as shown in the following command:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`<layer>/conf/layer.conf`文件是每个层所需的层配置文件。新层可以通过一个名为`bitbake-layers`的工具创建，该工具来自Poky的BitBake，如下命令所示：'
- en: '![Figure 12.1 – Creating a new layer using bitbake-layers](img/Figure_12.01_B19361.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![图12.1 – 使用bitbake-layers创建新层](img/Figure_12.01_B19361.jpg)'
- en: Figure 12.1 – Creating a new layer using bitbake-layers
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1 – 使用bitbake-layers创建新层
- en: 'After creating the layer, we need to include it in the `build/conf/bblayers.conf`
    file using the following command:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 创建层之后，我们需要使用以下命令将其包含在`build/conf/bblayers.conf`文件中：
- en: '![Figure 12.2 – Adding meta-newlayer to build/conf/bblayers.conf](img/Figure_12.02_B19361.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![图12.2 – 将meta-newlayer添加到build/conf/bblayers.conf](img/Figure_12.02_B19361.jpg)'
- en: Figure 12.2 – Adding meta-newlayer to build/conf/bblayers.conf
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2 – 将meta-newlayer添加到build/conf/bblayers.conf
- en: Tip
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The `bitbake-layers` tool, by default, generates the layer with layer priority
    6\. We can still customize the priority using parameters.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`bitbake-layers`工具默认生成的层优先级为6。我们仍然可以通过参数自定义优先级。'
- en: 'The last command generates the layer, as shown in the following figure:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一条命令会生成层，如下图所示：
- en: '![Figure 12.3 – The meta-newlayer layout when created](img/Figure_12.03_B19361.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图12.3 – 创建时的meta-newlayer布局](img/Figure_12.03_B19361.jpg)'
- en: Figure 12.3 – The meta-newlayer layout when created
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3 – 创建时的meta-newlayer布局
- en: The default layer configuration file for `meta-newlayer` is the minimal configuration
    to get the layer working. However, it can be customized to include configurations
    required in the future.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`meta-newlayer`的默认层配置文件是让层正常工作的最小配置。然而，它可以定制以包含未来所需的配置。'
- en: 'The following figure shows the content of default `conf/layer.conf` for the
    `meta-newlayer` layer we just created:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了我们刚创建的`meta-newlayer`层的默认`conf/layer.conf`内容：
- en: '![Figure 12.4 – The meta-newlayer/conf/layer.conf minimal configuration](img/Figure_12.04_B19361.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图12.4 – `meta-newlayer/conf/layer.conf`最小配置](img/Figure_12.04_B19361.jpg)'
- en: Figure 12.4 – The meta-newlayer/conf/layer.conf minimal configuration
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4 – `meta-newlayer/conf/layer.conf`最小配置
- en: 'Some commonly used variables that may need to be added or changed are `LAYERVERSION`
    and `LAYERDEPENDS`. Those are useful if our layer requires other layers to work.
    Both variables’ names must be suffixed with the layer’s name, as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常用的变量可能需要添加或更改，它们是`LAYERVERSION`和`LAYERDEPENDS`。这些变量在我们的层需要其他层才能工作时很有用。两个变量的名称必须以层的名称作为后缀，如下所示：
- en: '`LAYERVERSION`: This is an optional variable that specifies the version of
    the layer in a single number. This variable is used within the `LAYERDEPENDS`
    variable to depend on a specific layer version – for example, `LAYERVERSION_meta-newlayer
    = "``1"`.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LAYERVERSION`：这是一个可选变量，用于指定层的版本号。该变量在`LAYERDEPENDS`变量中使用，用于依赖特定版本的层—例如，`LAYERVERSION_meta-newlayer
    = "``1"`。'
- en: '`LAYERDEPENDS`: This lists the layers that the recipes depend upon, separated
    by spaces – for example, we add the dependency for version `2` of `meta-otherlayer`
    with `LAYERDEPENDS_meta-newlayer += "``meta-otherlayer:2"`.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LAYERDEPENDS`：列出了配方所依赖的层，层之间用空格隔开—例如，我们通过`LAYERDEPENDS_meta-newlayer += "``meta-otherlayer:2"`添加对版本`2`的`meta-otherlayer`的依赖。'
- en: An error is incurred if a dependency cannot be satisfied or the version numbers
    do not match. The base of the layer structure is now created. In the following
    sections, we will learn how to extend it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果无法满足依赖关系或版本号不匹配，则会发生错误。层结构的基础已创建。在接下来的章节中，我们将学习如何扩展它。
- en: Adding metadata to the layer
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向层添加元数据
- en: Layer metadata can serve two goals – add new software, or feature and modify
    existing metadata.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 层元数据可以实现两个目标——添加新软件或特性，以及修改现有元数据。
- en: We can include several metadata files on a new layer, such as recipes, images,
    and `bbappend` files. There are several examples of `bbappend` files on `meta-yocto-bsp`
    and `meta-yocto`. We will explore some of their common uses in [*Chapter 13*](B19361_13.xhtml#_idTextAnchor158),
    *Customizing* *Existing Recipes*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在新层中包含多个元数据文件，如配方、图像和 `bbappend` 文件。`meta-yocto-bsp` 和 `meta-yocto` 中有几个
    `bbappend` 文件的示例。我们将在 [*第 13 章*](B19361_13.xhtml#_idTextAnchor158) 中探讨它们的一些常见用途，*自定义*
    *现有配方*。
- en: In the next sections, we will go through some common modifications to layer
    metadata.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将介绍一些常见的层元数据修改。
- en: Creating an image
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建图像
- en: Image files are, in essence, a set of packages grouped for a purpose and configured
    in a controlled way. We can create an image from scratch or create one by reusing
    an existing one and adding the extra necessary packages.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图像文件本质上是一组为某个目的而分组的包，并以受控方式进行配置。我们可以从头开始创建图像，也可以通过重用现有图像并添加额外的必要包来创建图像。
- en: 'We should reuse an existing image when possible, making code maintenance more
    manageable and highlighting the functional differences. For example, we may want
    to include an application and remove an image feature from the `core-image-full-cmdline`
    image file. In that case, we can create an image in the `recipes-mine/images/my-image-full-cmdline.bb`
    file with the following lines of code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应尽可能重用现有图像，这样可以使代码维护更加易于管理，并突出功能差异。例如，我们可能希望包含一个应用程序并从 `core-image-full-cmdline`
    图像文件中移除一个图像功能。在这种情况下，我们可以在 `recipes-mine/images/my-image-full-cmdline.bb` 文件中创建一个图像，包含以下代码行：
- en: '![Figure 12.5 – The content of my-image-full-cmdline.bb](img/Figure_12.05_B19361.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.5 – my-image-full-cmdline.bb 的内容](img/Figure_12.05_B19361.jpg)'
- en: Figure 12.5 – The content of my-image-full-cmdline.bb
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.5 – my-image-full-cmdline.bb 的内容
- en: 'The `core-image` class provides image features that offer helpful building
    blocks of commonly used functionality and should be used when creating an image
    from scratch. For example, we can create an image in the `recipes-mine/images/my-image-strace.bb`
    file consisting of the following lines of code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`core-image` 类提供了图像功能，提供了常用功能的有用构建块，创建图像时应该使用它。例如，我们可以在 `recipes-mine/images/my-image-strace.bb`
    文件中创建一个包含以下代码行的图像：'
- en: '![Figure 12.6 – The content of my-image-strace.bb](img/Figure_12.06_B19361.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.6 – my-image-strace.bb 的内容](img/Figure_12.06_B19361.jpg)'
- en: Figure 12.6 – The content of my-image-strace.bb
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.6 – my-image-strace.bb 的内容
- en: Tip
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The list appending operator (`+=`) guarantees that a new `EXTRA_IMAGE_FEATURES`
    variable can be added by `build/conf/local.conf`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 列表追加操作符（`+=`）确保可以通过 `build/conf/local.conf` 添加新的 `EXTRA_IMAGE_FEATURES` 变量。
- en: '`CORE_IMAGE_EXTRA_INSTALL` is the variable we should use to include extra packages
    in the image when we inherit the `core-image` class, which facilitates image creation.
    The class adds support for the `IMAGE_FEATURES` variable, which avoids duplication
    of code.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`CORE_IMAGE_EXTRA_INSTALL` 是我们在继承 `core-image` 类时应使用的变量，它有助于图像的创建。该类为 `IMAGE_FEATURES`
    变量添加了支持，避免了代码重复。'
- en: 'Currently, the following image features are supported, as detailed in the *Image
    Features* section of the *Yocto Project Reference* *Manual* ([https://docs.yoctoproject.org/4.0.4/ref-manual/features.html#image-features](https://docs.yoctoproject.org/4.0.4/ref-manual/features.html#image-features)):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '目前，支持以下图像功能，详细信息请见 *Yocto 项目参考手册* 中的 *图像功能* 部分 ([https://docs.yoctoproject.org/4.0.4/ref-manual/features.html#image-features](https://docs.yoctoproject.org/4.0.4/ref-manual/features.html#image-features)):'
- en: '`allow-empty-password`: Allows Dropbear and OpenSSH to accept logins from accounts
    that have an empty password string.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allow-empty-password`：允许 Dropbear 和 OpenSSH 接受来自密码为空的账户的登录。'
- en: '`allow-root-login`: Allows Dropbear and OpenSSH to accept `root` logins.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allow-root-login`：允许 Dropbear 和 OpenSSH 接受 `root` 登录。'
- en: '`dbg-pkgs`: Installs debug symbol packages for all packages installed in a
    given image.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbg-pkgs`：为给定图像中安装的所有包安装调试符号包。'
- en: '`debug-tweaks`: Makes an image suitable for development (for example, allows
    root logins, logins without passwords – including root ones, and enables post-installation
    logging).'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`debug-tweaks`: 使镜像适合开发（例如，允许 root 登录、无密码登录——包括 root 登录，并启用后安装日志记录）。'
- en: '`dev-pkgs`: Installs development packages (headers and extra library links)
    for all packages installed in a given image.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dev-pkgs`: 为给定镜像中所有已安装的包安装开发包（头文件和额外的库链接）。'
- en: '`doc-pkgs`: Installs documentation packages for all packages installed in a
    given image.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`doc-pkgs`: 安装所有已安装包的文档包。'
- en: '`empty-root-password`: This feature, or `debug-tweaks`, is required if you
    want to allow root login with an empty password.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`empty-root-password`: 如果希望允许以空密码进行 root 登录，则需要此功能或 `debug-tweaks`。'
- en: '`hwcodecs`: Installs hardware acceleration codecs.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hwcodecs`: 安装硬件加速编解码器。'
- en: '`lic-pkgs`: Installs license packages for all packages installed in a given
    image.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lic-pkgs`: 安装所有已安装包的许可证包。'
- en: '`nfs-server`: Installs an NFS server.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nfs-server`: 安装 NFS 服务器。'
- en: '`overlayfs-etc`: Configures the `/etc` directory to be in `overlayfs`. This
    allows you to store device-specific information elsewhere, especially if the root
    filesystem is configured as read-only.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`overlayfs-etc`: 配置 `/etc` 目录使用 `overlayfs`。这使你可以将设备特定的信息存储在其他位置，特别是当根文件系统配置为只读时。'
- en: '`package-management`: Installs package management tools and preserves the package
    manager database.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package-management`: 安装包管理工具并保留包管理数据库。'
- en: '`perf`: Installs profiling tools such as `perf`, `systemtap`, and **LTTng**.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`perf`: 安装性能分析工具，如 `perf`、`systemtap` 和 **LTTng**。'
- en: '`post-install-logging`: Enables you to log postinstall script runs in the `/var/log/postinstall.log`
    file on the first boot of the image on the target system.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post-install-logging`: 使你能够在目标系统的首次启动时，将后安装脚本的运行记录到 `/var/log/postinstall.log`
    文件中。'
- en: '`ptest-pkgs`: Installs `ptest` packages for all ptest-enabled recipes.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ptest-pkgs`: 安装为所有启用 `ptest` 的配方提供的 `ptest` 包。'
- en: '`read-only-rootfs`: Creates an image whose root filesystem is read-only.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`read-only-rootfs`: 创建一个根文件系统为只读的镜像。'
- en: '`read-only-rootfs-delayed-postinsts`: When specified in conjunction with `read-only-rootfs`,
    it specifies that post-install scripts are still permitted.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`read-only-rootfs-delayed-postinsts`: 与 `read-only-rootfs` 配合使用时，指定仍然允许后安装脚本的执行。'
- en: '`serial-autologin-root`: When specified in conjunction with `empty-root-password`,
    it will automatically login as `root` on the serial console.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`serial-autologin-root`: 与 `empty-root-password` 配合使用时，将自动在串行控制台上以 `root` 用户登录。'
- en: '`splash`: Enables you to show a splash screen during boot. By default, this
    screen is provided by `psplash`, which does allow customization.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`splash`: 使你能够在启动过程中显示启动画面。默认情况下，该画面由 `psplash` 提供，允许进行自定义。'
- en: '`ssh-server-dropbear`: Installs the Dropbear minimal SSH server.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ssh-server-dropbear`: 安装 Dropbear 最小化 SSH 服务器。'
- en: '`ssh-server-openssh`: Installs the OpenSSH SSH server, which is more full-featured
    than Dropbear. Note that if both the OpenSSH SSH server and the Dropbear minimal
    SSH server are present in `IMAGE_FEATURES`, then OpenSSH will take precedence
    and Dropbear will not be installed.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ssh-server-openssh`: 安装 OpenSSH SSH 服务器，其功能比 Dropbear 更全面。请注意，如果 `IMAGE_FEATURES`
    中同时存在 OpenSSH SSH 服务器和 Dropbear 最小化 SSH 服务器，则 OpenSSH 会优先安装，Dropbear 将不会被安装。'
- en: '`stateless-rootfs`: Specifies that an image should be created as stateless
    – when using `systemd`, `systemctl-native` will not be run on the image, leaving
    the image to be populated at runtime by `systemd`.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stateless-rootfs`: 指定创建一个无状态的镜像——在使用 `systemd` 时，`systemctl-native` 将不会在镜像上运行，镜像将在运行时由
    `systemd` 填充。'
- en: '`staticdev-pkgs`: Installs static development packages, which are static libraries
    (for example, `*.a` files), for all packages installed in a given image.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`staticdev-pkgs`: 安装静态开发包，这是为给定镜像中所有已安装包提供的静态库（例如，`*.a` 文件）。'
- en: '`tools-debug`: Installs debugging tools such as `strace` and `gdb`.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tools-debug`: 安装调试工具，如 `strace` 和 `gdb`。'
- en: '`tools-sdk`: Installs a full SDK that runs on a device.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tools-sdk`: 安装一个完整的 SDK，运行在设备上。'
- en: '`tools-testapps`: Installs device testing tools (for example, touchscreen debugging).'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tools-testapps`: 安装设备测试工具（例如，触摸屏调试）。'
- en: '`weston`: Installs Weston (a reference Wayland environment).'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`weston`: 安装 Weston（参考 Wayland 环境）。'
- en: '`x11-base`: Installs the X server with a minimal environment.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x11-base`: 安装具有最小环境的 X 服务器。'
- en: '`x11`: Installs the X server.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x11`: 安装 X 服务器。'
- en: '`x11-sato`: Installs the OpenedHand Sato environment.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x11-sato`: 安装 OpenedHand Sato 环境。'
- en: Adding a package recipe
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加包配方
- en: Poky includes several classes that makes the process for the most common development
    tools as projects abstract, based on Autotools, CMake, and Meson. A package recipe
    is how we can instruct BitBake to perform the `fetch`, `unpack`, `patch`, `configure`,
    `compile`, and `install` tasks on our application, kernel module, or any software
    a project provides. In addition, a list of classes included in Poky can be seen
    in the *Classes* section in the *Yocto Project Reference* *Manual* ([https://docs.yoctoproject.org/4.0.4/ref-manual/classes.html](https://docs.yoctoproject.org/4.0.4/ref-manual/classes.html)).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Poky 包含多个类，这些类将基于 Autotools、CMake 和 Meson 的常见开发工具的过程抽象为项目。一个软件包食谱是我们如何指示 BitBake
    执行 `fetch`、`unpack`、`patch`、`configure`、`compile` 和 `install` 等任务的方式，适用于我们的应用程序、内核模块或项目提供的任何软件。此外，可以在*Yocto
    项目参考手册*的*类*部分查看 Poky 中包含的类的列表（[https://docs.yoctoproject.org/4.0.4/ref-manual/classes.html](https://docs.yoctoproject.org/4.0.4/ref-manual/classes.html)）。
- en: 'A straightforward recipe that executes the `compile` and `install` tasks explicitly
    is provided as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了一个简单的食谱，显式地执行 `compile` 和 `install` 任务，如下所示：
- en: '![Figure 12.7 – A manually crafted helloworld recipe](img/Figure_12.07_B19361.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.7 – 手动创建的helloworld食谱](img/Figure_12.07_B19361.jpg)'
- en: Figure 12.7 – A manually crafted helloworld recipe
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.7 – 手动创建的helloworld食谱
- en: 'The `do_compile` and `do_install` code blocks provide the Shell Script command
    for us to build and install the resulting binary into the destination directory,
    referenced as `${D}`, which aims to relocate the installation directory to a path
    inside the `build/tmp/work/` directory. Suppose that we are working on an Autotools-based
    project. If so, we can avoid a lot of code duplication by using the `autotools`
    class in the stripped example, extracted from the recipe in the `poky/meta/recipes-core/dbus-wait/dbus-wait_git.bb`
    file, as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`do_compile` 和 `do_install` 代码块为我们提供了 Shell 脚本命令，用于构建并将生成的二进制文件安装到目标目录中，该目录被引用为
    `${D}`，其目的是将安装目录重新定位到 `build/tmp/work/` 目录中的一个路径。假设我们正在处理一个基于 Autotools 的项目。如果是这样，我们可以通过使用
    `autotools` 类来避免大量的代码重复，示例如下，从 `poky/meta/recipes-core/dbus-wait/dbus-wait_git.bb`
    文件中的食谱中提取：'
- en: '![Figure 12.8 – The content of poky/meta/recipes-core/dbus-wait/dbus-wait_git.bb](img/Figure_12.08_B19361.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.8 – poky/meta/recipes-core/dbus-wait/dbus-wait_git.bb 的内容](img/Figure_12.08_B19361.jpg)'
- en: Figure 12.8 – The content of poky/meta/recipes-core/dbus-wait/dbus-wait_git.bb
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.8 – poky/meta/recipes-core/dbus-wait/dbus-wait_git.bb 的内容
- en: 'The simple act of inheriting the `autotools` class in *line 19* is to provide
    all the code required to do the following tasks:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第 19 行*继承 `autotools` 类的简单操作就是提供执行以下任务所需的所有代码：
- en: Update the `configure` script code and artifacts
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新 `configure` 脚本代码和工件
- en: Update the `libtool` scripts
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新 `libtool` 脚本
- en: Run the `configure` script
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 `configure` 脚本
- en: Run `make`
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 `make`
- en: Run `make install`
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 `make install`
- en: The same concepts apply to other building tools, as is the case for **CMake**
    and **Meson**. Additionally, the number of supported classes is growing in every
    release to support new build systems and avoid code duplication.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的概念适用于其他构建工具，正如**CMake**和**Meson**的情况。此外，支持的类数量在每个版本中不断增长，以支持新的构建系统并避免代码重复。
- en: Automatically creating a base package recipe using devtool
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 devtool 自动创建基本包食谱
- en: 'As we learned in the *Creating a recipe from an external Git repository* section
    in [*Chapter 9*](B19361_09.xhtml#_idTextAnchor115), *Developing with the Yocto
    Project*, `devtool` automates the process of creating a recipe based on an existing
    project with the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[*第 9 章*](B19361_09.xhtml#_idTextAnchor115)的*从外部 Git 仓库创建食谱*一节中所学到的，*使用
    Yocto 项目开发*，`devtool` 可以通过以下命令自动化基于现有项目创建食谱的过程：
- en: '![Figure 12.9 – The command line to generate the recipe for bbexample](img/Figure_12.09_B19361.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.9 – 用于生成bbexample食谱的命令行](img/Figure_12.09_B19361.jpg)'
- en: Figure 12.9 – The command line to generate the recipe for bbexample
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.9 – 用于生成bbexample食谱的命令行
- en: 'Behind the scenes, `devtool` ran the `recipetool` to generate a recipe and
    automatically configure all pre-built information into the new recipe file. The
    end result is stored in the `workspace` directory, a layer maintained by `devtool`.
    To copy the recipe file to the target layer, we can use the `devtool` command,
    as shown here:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，`devtool` 运行了 `recipetool` 来生成食谱，并将所有预构建的信息自动配置到新的食谱文件中。最终结果存储在 `workspace`
    目录中，这是 `devtool` 维护的一个层。要将食谱文件复制到目标层，我们可以使用 `devtool` 命令，如下所示：
- en: '![Figure 12.10 – The command line to deploy the bbexample recipe to meta-newlayer](img/Figure_12.10_B19361.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.10 – 将bbexample配方部署到meta-newlayer的命令行](img/Figure_12.10_B19361.jpg)'
- en: Figure 12.10 – The command line to deploy the bbexample recipe to meta-newlayer
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.10 – 将bbexample配方部署到meta-newlayer的命令行
- en: 'The created `meta-newlayer/recipes-bbexample/bbexample/bbexample_git.bb` file
    is shown in the following snippet:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的`meta-newlayer/recipes-bbexample/bbexample/bbexample_git.bb`文件如下所示：
- en: '![Figure 12.11 – The content of bbexamle_git.bb](img/Figure_12.11_B19361.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.11 – bbexamle_git.bb的内容](img/Figure_12.11_B19361.jpg)'
- en: Figure 12.11 – The content of bbexamle_git.bb
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.11 – bbexamle_git.bb的内容
- en: The `devtool` has created a base recipe, which should not be taken as a final
    recipe. You should check for compilation options, extra metadata information,
    and so on.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`devtool`已创建一个基础配方，这不应被视为最终配方。你应该检查编译选项、额外的元数据等。'
- en: Adding support to a new machine definition
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为新机器定义添加支持
- en: Even though creating a new machine definition for use in Poky is a straightforward
    task, it shouldn’t be underestimated. Depending on the set of features we need
    to support at the BSP layer, it can involve checking the bootloader, kernel, and
    hardware support drivers.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管为Poky创建新机器定义是一个简单的任务，但不应低估其复杂性。根据我们在BSP层需要支持的功能集，可能需要检查引导加载程序、内核和硬件支持驱动程序。
- en: The Yocto Project supports ARM, ARM64, x86, x86-64, PowerPC, PowerPC 64, MIPS,
    MIPS64, RISC-V 32, and RISC-V 64, representing the most currently used embedded
    architectures.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Yocto项目支持ARM、ARM64、x86、x86-64、PowerPC、PowerPC 64、MIPS、MIPS64、RISC-V 32和RISC-V
    64，代表目前最常用的嵌入式架构。
- en: 'The prevailing set of variables used in a machine definition is as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 机器定义中使用的主要变量集如下：
- en: '`TARGET_ARCH`: This sets the machine architecture – for example, ARM and x86-64'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TARGET_ARCH`: 设置机器架构——例如，ARM和x86-64'
- en: '`PREFERRED_PROVIDER_virtual/kernel`: This overrides the default kernel (`linux-yocto`)
    if you need to use a specific one'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PREFERRED_PROVIDER_virtual/kernel`: 如果需要使用特定内核，这会覆盖默认的内核（`linux-yocto`）'
- en: '`SERIAL_CONSOLES`: This defines serial consoles and their speeds'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SERIAL_CONSOLES`: 定义串行控制台及其速度'
- en: '`MACHINE_FEATURES`: This describes hardware features, so the software stack
    required is included in the images by default'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MACHINE_FEATURES`: 描述硬件特性，以便所需的软件栈默认包含在映像中'
- en: '`KERNEL_IMAGETYPE`: This is used to choose the kernel image type – for example,
    `bzImage` or `Image`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KERNEL_IMAGETYPE`: 用于选择内核镜像类型——例如，`bzImage`或`Image`'
- en: '`IMAGE_FSTYPES`: This sets the generated filesystem image types – for example,
    `tar.gz`, `ext4`, and `ubifs`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IMAGE_FSTYPES`: 设置生成的文件系统映像类型——例如，`tar.gz`、`ext4`和`ubifs`'
- en: 'You can see examples of machine definition files inside the Poky source code
    in the `meta-yocto-bsp/conf/machine/` directory. When describing a new machine,
    we should pay special attention to specific features supported by it in `MACHINE_FEATURES`.
    This way, the software needed to help these features is installed into the images.
    The values currently available for `MACHINE_FEATURES` are listed as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Poky源代码中的`meta-yocto-bsp/conf/machine/`目录中查看机器定义文件的示例。描述新机器时，我们应特别注意在`MACHINE_FEATURES`中支持的特定功能。这样，所需的软件就会安装到映像中。当前`MACHINE_FEATURES`的可用值如下：
- en: '`acpi`: The hardware has ACPI (x86/x86-64 only)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`acpi`: 硬件具有ACPI（仅限x86/x86-64）'
- en: '`alsa`: The hardware has ALSA audio drivers'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alsa`: 硬件具有ALSA音频驱动'
- en: '`apm`: The hardware uses APM (or APM emulation)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apm`: 硬件使用APM（或APM仿真）'
- en: '`bluetooth`: The hardware has integrated BT'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bluetooth`: 硬件集成了蓝牙'
- en: '`efi`: Support for booting through EFI'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`efi`: 支持通过EFI引导'
- en: '`ext2`: The hardware HDD or microdrive'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ext2`: 硬件硬盘或微型硬盘'
- en: '`keyboard`: The hardware has a keyboard'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keyboard`: 硬件具有键盘'
- en: '`numa`: The hardware has non-uniform memory access'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numa`: 硬件具有非统一内存访问'
- en: '`pcbios`: Support for booting through BIOS'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pcbios`: 支持通过BIOS引导'
- en: '`pci`: The hardware has a PCI bus'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pci`: 硬件具有PCI总线'
- en: '`pcmcia`: The hardware has PCMCIA or CompactFlash sockets'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pcmcia`: 硬件具有PCMCIA或CompactFlash插槽'
- en: '`phone`: Mobile phone (voice) support'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`phone`: 移动电话（语音）支持'
- en: '`qemu-usermode`: QEMU can support user-mode emulation for this machine'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qemu-usermode`: QEMU可以为此机器提供用户模式仿真'
- en: '`qvga`: The machine has a QVGA (320x240) display'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qvga`: 机器具有QVGA（320x240）显示屏'
- en: '`rtc`: The machine has a real-time clock'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rtc`: 机器具有实时时钟'
- en: '`screen`: The hardware has a screen'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`screen`: 硬件具有显示屏'
- en: '`serial`: The hardware has serial support (usually RS232)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`serial`: 硬件具有串行支持（通常是RS232）'
- en: '`touchscreen`: The hardware has a touchscreen'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`touchscreen`: 硬件具有触摸屏'
- en: '`usbgadget`: The hardware is USB gadget device-capable'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`usbgadget`：硬件支持USB小工具设备'
- en: '`usbhost`: The hardware is USB host-capable'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`usbhost`：硬件支持USB主机功能'
- en: '`vfat`: FAT filesystem support'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vfat`：支持FAT文件系统'
- en: '`wifi`: The hardware has integrated Wi-Fi'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wifi`：硬件集成了Wi-Fi'
- en: Wrapping an image for your machine
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为你的机器打包一个镜像
- en: Creating a ready-to-use image for a machine should be addressed at the end of
    any BSP support layer development. The type of image depends on the processor,
    peripherals included on the board, and project restrictions.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个可供机器使用的镜像应该在任何BSP支持层开发的最后进行。镜像的类型取决于处理器、板上包含的外设和项目的限制。
- en: The `wic`, which provides a flexible way to generate this image. It allows the
    creation of partitioned images based on a template file (`.wks`), written in a
    common language that describes the target image layout. The language definition
    can be found in the *OpenEmbedded Kickstart (.wks) Reference* section from *The
    Yocto Project Reference* *Manual* ([https://docs.yoctoproject.org/4.0.4/ref-manual/kickstart.html#openembedded-kickstart-wks-reference](https://docs.yoctoproject.org/4.0.4/ref-manual/kickstart.html#openembedded-kickstart-wks-reference)).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`wic`提供了一种灵活的方式来生成此镜像。它允许基于模板文件（`.wks`）创建分区镜像，模板文件是用描述目标镜像布局的通用语言编写的。语言定义可以在*OpenEmbedded
    Kickstart (.wks)参考*部分中找到，该部分来自*Yocto项目参考*手册（[https://docs.yoctoproject.org/4.0.4/ref-manual/kickstart.html#openembedded-kickstart-wks-reference](https://docs.yoctoproject.org/4.0.4/ref-manual/kickstart.html#openembedded-kickstart-wks-reference)）。'
- en: 'The `.wks` file is placed in our layer inside the `wic` directory. It is common
    to have multiple files in this directory to specify different image layouts. However,
    it is essential to remember that the chosen structure must match the machine –
    for example, when considering the use of an i.MX-based machine that boots using
    U-Boot from an SD card with two partitions, one for the boot files and the other
    for `rootfs`. The respective `.wks` file is shown here:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`.wks`文件被放置在我们层中的`wic`目录下。这个目录通常会有多个文件，用于指定不同的镜像布局。然而，必须记住所选择的结构必须与机器匹配——例如，当考虑使用一个基于i.MX的机器，该机器通过SD卡上的U-Boot启动，SD卡有两个分区，一个用于启动文件，另一个用于`rootfs`。相应的`.wks`文件如下所示：'
- en: '![Figure 12.12 – An example of a .wks file for an i.MX device using SPL](img/Figure_12.12_B19361.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图12.12 – 使用SPL的i.MX设备的.wks文件示例](img/Figure_12.12_B19361.jpg)'
- en: Figure 12.12 – An example of a .wks file for an i.MX device using SPL
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.12 – 使用SPL的i.MX设备的.wks文件示例
- en: To enable the `wic`-based image generation, it is a matter of adding `wic` to
    `IMAGE_FSTYPES`. We can also define the `.wks` file to be used by setting the
    `WKS_FILE` variable.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用基于`wic`的镜像生成，只需将`wic`添加到`IMAGE_FSTYPES`中即可。我们还可以通过设置`WKS_FILE`变量来定义要使用的`.wks`文件。
- en: Using a custom distribution
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用自定义发行版
- en: The creation of a distribution is a mix of simplicity and complexity. Creating
    the distribution file is straightforward but significantly impacts Poky’s behavior.
    Depending on our options, it may cause a binary incompatibility with previously
    built binaries.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个发行版是简单与复杂的结合。创建发行版文件是直接的，但对Poky的行为有重大影响。根据我们的选项，它可能会导致与以前构建的二进制文件的不兼容。
- en: The distribution is where we define global options, such as the toolchain version,
    graphical backends, and support for **OpenGL**. We should make a distribution
    only if the default settings provided by Poky fail to fulfill our requirements.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 发行版是我们定义全局选项的地方，如工具链版本、图形后端和对**OpenGL**的支持。只有当Poky提供的默认设置无法满足我们的要求时，我们才应该创建一个发行版。
- en: 'Usually, we intend to change a small set of options from Poky. For example,
    we remove the `<layer>/conf/distro/my-distro.conf` file is as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们打算改变Poky中的少量选项。例如，我们删除了`<layer>/conf/distro/my-distro.conf`文件，其内容如下：
- en: '![Figure 12.13 – An example of a custom distribution file](img/Figure_12.13_B19361.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图12.13 – 自定义发行版文件的示例](img/Figure_12.13_B19361.jpg)'
- en: Figure 12.13 – An example of a custom distribution file
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.13 – 自定义发行版文件的示例
- en: 'To use the distribution just created, we need to add the following piece of
    code to the `build/conf/local.conf` file:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用刚刚创建的发行版，我们需要将以下代码添加到`build/conf/local.conf`文件中：
- en: '![Figure 12.14 – The line to set DISTRO on build/conf/local.conf](img/Figure_12.14_B19361.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图12.14 – 设置DISTRO的行，在`build/conf/local.conf`中](img/Figure_12.14_B19361.jpg)'
- en: Figure 12.14 – The line to set DISTRO on build/conf/local.conf
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.14 – 设置DISTRO的行，在`build/conf/local.conf`中
- en: 'The `DISTRO_FEATURES` variable may influence how the recipes are configured
    and the packages are installed in images – for example, if we want to use sound
    in any machine and image, the `alsa` features must be present. The following list
    shows the present state for the `DISTRO_FEATURES`-supported values, as detailed
    in the *Distro Features* section in the *Yocto Project Reference* *Manual* ([https://docs.yoctoproject.org/4.0.4/ref-manual/features.html#distro-features](https://docs.yoctoproject.org/4.0.4/ref-manual/features.html#distro-features)):'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`DISTRO_FEATURES` 变量可能会影响配方的配置方式以及包在镜像中的安装方式——例如，如果我们想在任何机器和镜像中使用声音，必须具备 `alsa`
    功能。以下列表显示了 `DISTRO_FEATURES` 支持值的当前状态，详细信息请参见 *Distro Features* 部分，位于 *Yocto Project
    Reference* *Manual*（[https://docs.yoctoproject.org/4.0.4/ref-manual/features.html#distro-features](https://docs.yoctoproject.org/4.0.4/ref-manual/features.html#distro-features)）：'
- en: '`3g`: Includes support for cellular data'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`3g`: 包括对蜂窝数据的支持'
- en: '`acl`: Includes Access Control List support'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`acl`: 包括访问控制列表（Access Control List，简称 ACL）支持'
- en: '`alsa`: Includes Advanced Linux Sound Architecture support (OSS compatibility
    kernel modules are installed if available)'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alsa`: 包括高级 Linux 声音架构（Advanced Linux Sound Architecture，简称 ALSA）支持（如果有的话，会安装
    OSS 兼容内核模块）'
- en: '`api-documentation`: Enables the generation of API documentation during recipe
    builds'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`api-documentation`: 在配方构建过程中启用生成 API 文档'
- en: '`bluetooth`: Includes Bluetooth support (integrated BT only)'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bluetooth`: 包括蓝牙支持（仅集成 BT）'
- en: '`cramfs`: Includes CramFS support'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cramfs`: 包括 CramFS 支持'
- en: '`debuginfod`: Includes support for getting ELF debugging information through
    a `debuginfod` server'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`debuginfod`: 包括通过 `debuginfod` 服务器获取 ELF 调试信息的支持'
- en: '`ext2`: Includes tools to support devices with an internal HDD/Microdrive for
    storing files (instead of Flash-only devices)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ext2`: 包括支持具有内部 HDD/Microdrive 的设备的工具（用于存储文件，适用于仅 Flash 设备以外的设备）'
- en: '`gobject-introspection-data`: Includes data to support GObject introspection'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gobject-introspection-data`: 包括支持 GObject 反射的数据'
- en: '`ipsec`: Includes IPSec support'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ipsec`: 包括 IPSec 支持'
- en: '`ipv4`: Includes IPv4 support'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ipv4`: 包括对IPv4的支持'
- en: '`ipv6`: Includes IPv6 support'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ipv6`: 包括对 IPv6 的支持'
- en: '`keyboard`: Includes keyboard support'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keyboard`: 包括对键盘的支持'
- en: '`ldconfig`: Includes support for `ldconfig` and `ld.so.conf` on the target'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ldconfig`: 包括对目标设备上的 `ldconfig` 和 `ld.so.conf` 的支持'
- en: '`ld-is-gold`: Uses the gold linker instead of the standard GNU linker (`bfd`)'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ld-is-gold`: 使用 gold 链接器，而非标准的 GNU 链接器（`bfd`）'
- en: '`lto`: Enables Link-Time Optimization'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lto`: 启用链接时优化（Link-Time Optimization）'
- en: '`multiarch`: Enables you to build applications with multiple architecture support'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`multiarch`: 使您能够构建支持多种架构的应用程序'
- en: '`nfc`: Includes support for Near Field Communication'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nfc`: 包括对近场通信（Near Field Communication，简称 NFC）的支持'
- en: '`nfs`: Includes NFS client support'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nfs`: 包括 NFS 客户端支持'
- en: '`nls`: Includes **Native Language** **Support** (**NLS**)'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nls`: 包括 **本地语言** **支持**（**NLS**）'
- en: '`opengl`: Includes the Open Graphics Library, a cross-language, multi-platform
    API, used to render two- and three-dimensional graphics'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opengl`: 包括 Open Graphics Library 支持，它是一个跨语言、多平台的 API，用于渲染二维和三维图形'
- en: '`overlayfs`: Includes OverlayFS support'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`overlayfs`: 包括 OverlayFS 支持'
- en: '`pam`: Includes **Pluggable Authentication Module** (**PAM**) support'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pam`: 包括 **可插拔身份验证模块**（**PAM**）支持'
- en: '`pci`: Includes PCI bus support'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pci`: 包括 PCI 总线支持'
- en: '`pcmcia`: Includes PCMCIA/CompactFlash support'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pcmcia`: 包括对 PCMCIA/CompactFlash 的支持'
- en: '`polkit`: Includes Polkit support'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`polkit`: 包括 Polkit 支持'
- en: '`ppp`: Includes PPP dial-up support'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ppp`: 包括 PPP 拨号支持'
- en: '`ptest`: Enables you to build the package tests that were supported by individual
    recipes'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ptest`: 使您能够构建由各个配方支持的包测试'
- en: '`pulseaudio`: Includes support for PulseAudio'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pulseaudio`: 包括对 PulseAudio 的支持'
- en: '`seccomp`: Enables you to build applications with `seccomp` support, allowing
    the applications to strictly restrict the system calls that they are allowed to
    invoke'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`seccomp`: 使您能够构建支持 `seccomp` 的应用程序，从而严格限制应用程序可调用的系统调用'
- en: '`selinux`: Includes support for `meta-selinux`)'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selinux`: 包括对 `meta-selinux` 的支持'
- en: '`smbfs`: Includes SMB network client support'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`smbfs`: 包括 SMB 网络客户端支持'
- en: '`systemd`: Includes support for this `init` manager, a full replacement for
    `init`, with parallel starting of services, reduced shell overhead, and other
    features'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`systemd`: 包括对此 `init` 管理器的支持，完全替代 `init`，并具备并行启动服务、减少 shell 开销等功能'
- en: '`usbgadget`: Includes USB Gadget Device support'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`usbgadget`: 包括 USB 小工具设备支持'
- en: '`usbhost`: Includes USB Host support'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`usbhost`: 包括 USB 主机支持'
- en: '`usrmerge`: Merges the `/bin`, `/sbin`, `/lib`, and `/lib64` directories into
    their respective counterparts in the `/usr` directory to provide better package
    and application compatibility'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`usrmerge`：将 `/bin`、`/sbin`、`/lib` 和 `/lib64` 目录合并到 `/usr` 目录下的相应目录中，以提供更好的包和应用程序兼容性'
- en: '`vfat`: Includes FAT filesystem support'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vfat`：包括对 FAT 文件系统的支持'
- en: '`vulkan`: Includes support for the Vulkan API'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vulkan`：包括对 Vulkan API 的支持'
- en: '`wayland`: Includes the Wayland display server protocol and the library that
    supports it'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wayland`：包括 Wayland 显示服务器协议及其支持库'
- en: '`wifi`: Includes Wi-Fi support (integrated only)'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wifi`：包括 Wi-Fi 支持（仅限集成）'
- en: '`x11`: Includes the X server and libraries'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x11`：包括 X 服务器及其库'
- en: '`xattr`: Includes support for extended file attributes'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xattr`：包括对扩展文件属性的支持'
- en: '`zeroconf`: Includes support for zero-configuration networking'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zeroconf`：包括对零配置网络的支持'
- en: MACHINE_FEATURES versus DISTRO_FEATURES
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MACHINE_FEATURES 与 DISTRO_FEATURES
- en: The `DISTRO_FEATURES` and `MACHINE_FEATURES` variables work together to provide
    feasible support for the final system. When a machine supports a feature, this
    does not imply that the target system supports it because the distribution must
    provide its underlying base.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`DISTRO_FEATURES` 和 `MACHINE_FEATURES` 变量一起工作，为最终系统提供可行的支持。当机器支持某个特性时，并不意味着目标系统也支持它，因为发行版必须提供其底层基础支持。'
- en: For example, if a machine supports Wi-Fi but the distribution does not, the
    applications used by the operating system will be built with Wi-Fi support disabled
    so that the outcome will be a system without Wi-Fi support. On the other hand,
    if the distribution provides Wi-Fi support and a machine does not, the modules
    and applications needed for the Wi-Fi will not be installed in images built for
    this machine. However, the operating system and its modules have support for Wi-Fi
    enabled.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果某台机器支持 Wi-Fi，但该发行版不支持，那么操作系统使用的应用程序将构建为禁用 Wi-Fi 支持的版本，因此最终的系统将不包含 Wi-Fi
    支持。另一方面，如果发行版提供了 Wi-Fi 支持而机器不支持，那么构建该机器的镜像时将不会安装 Wi-Fi 所需的模块和应用程序。然而，操作系统及其模块将启用
    Wi-Fi 支持。
- en: Understanding the scope of a variable
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解变量的作用范围
- en: 'The BitBake metadata has thousands of variables, but the scope where these
    variables are available depends on where it is defined. There are two kinds of
    variables, as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake 元数据包含成千上万的变量，但这些变量可用的作用范围取决于定义它的位置。变量有两种类型，如下所示：
- en: 'Variables defined in configuration files are global to every recipe, also referred
    to as configuration metadata. The parsing order of the main configuration files
    is shown as follows:'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件中定义的变量是全局的，适用于每个配方，也称为配置元数据。主配置文件的解析顺序如下所示：
- en: '`build/conf/local.conf`'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build/conf/local.conf`'
- en: '`<``layer>/conf/machines/<machine>.conf`'
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<``layer>/conf/machines/<machine>.conf`'
- en: '`<``layer>/conf/distro/<distro>.conf`'
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<``layer>/conf/distro/<distro>.conf`'
- en: Variables defined within recipe files have recipe visibility scope that is local
    to the specific recipe only during the execution of its tasks.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在配方文件中定义的变量具有配方可见性范围，仅在执行任务时对特定配方有效。
- en: Summary
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered how to create a new layer and metadata. First, we
    saw how to create a machine configuration, a distribution definition, and recipe
    files. Then, we learned how to make images and include our application in an image.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了如何创建新的层和元数据。首先，我们了解了如何创建机器配置、发行版定义和配方文件。然后，我们学习了如何制作镜像并将应用程序包含到镜像中。
- en: In the next chapter, we will access some examples of the most common customization
    cases used by an additional layer, such as modifying existing packages, adding
    extra options to `autoconf`, applying a new patch, and including a new file to
    a package. We will see how to configure `BusyBox` and `linux-yocto`, the two packages
    commonly customized when making an embedded system.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将访问一些额外层常用的定制案例示例，例如修改现有包、向 `autoconf` 添加额外选项、应用新补丁以及将新文件包含到包中。我们将看到如何配置
    `BusyBox` 和 `linux-yocto`，这两个包是嵌入式系统制作过程中常见的定制包。
