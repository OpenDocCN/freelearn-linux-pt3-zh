- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Exploring External Layers
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索外部层
- en: One of the most charming features of Poky is the flexibility of using external
    layers. In this chapter, we will examine why this is a vital capability and how
    we can take advantage of it. We will also look at the different types of layers
    and their directory trees layout. Finally, at the end of this chapter, we will
    learn to include a new layer in our project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Poky最具魅力的特点之一是使用外部层的灵活性。在本章中，我们将探讨为什么这是一个至关重要的功能，以及如何利用它。我们还将了解不同类型的层及其目录树布局。最后，在本章结束时，我们将学习如何将新层包含到我们的项目中。
- en: Powering flexibility with layers
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过层提供灵活性
- en: Poky contains metadata spread over configuration definition files such as machine
    and distro files, classes, and recipes, covering everything from simple applications
    to full graphical stacks and frameworks. There are multiple places that BitBake
    can load metadata collection from, which are known as metadata layers.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Poky包含散布在配置定义文件（如机器和发行版文件）、类和食谱中的元数据，涵盖了从简单应用程序到完整图形堆栈和框架的所有内容。BitBake可以从多个地方加载元数据集合，这些地方被称为元数据层。
- en: The biggest strength of using layers is the ability to split metadata into logical
    units, which enables users to pick only the metadata collection needed for a project.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 使用层的最大优势是能够将元数据分割成逻辑单元，这使得用户只需选择项目所需的元数据集合。
- en: 'Using metadata layers enables us to do the following:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用元数据层使我们能够执行以下操作：
- en: Improve code reuse
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改善代码复用
- en: Share and scale work across different teams, communities, and vendors
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不同团队、社区和供应商之间共享并扩展工作
- en: Increase the Yocto Project community’s code quality, as multiple developers
    and users focus together on a particular metadata layer that is of interest to
    them
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高Yocto项目社区的代码质量，因为多个开发者和用户会共同关注他们感兴趣的特定元数据层。
- en: We can configure the system for different reasons, such as the need to enable/disable
    a feature or change build flags to enable architecture-specific optimizations.
    These are examples of customizations that can be done using layers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以出于不同的原因配置系统，例如需要启用/禁用某个功能或更改构建标志以启用特定架构优化。这些都是使用层进行定制的示例。
- en: 'In addition, we should organize metadata in different layers instead of creating
    our custom project environment, changing recipes, and modifying files in the Poky
    layer. The more separated an organization is, the easier it is to reuse the layers
    in future projects, as the Poky source code is split into different layers as
    well. It contains three layers by default, as we can see in the output of the
    following command line:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们应该将元数据组织在不同的层中，而不是创建自定义项目环境、更改食谱或修改Poky层中的文件。组织越分离，未来项目中重用层就越容易，因为Poky源代码也分为不同的层。默认情况下，它包含三个层，正如我们从以下命令行的输出中看到的那样：
- en: '![Figure 11.1 – The result of bitbake-layers show-layers](img/Figure_11.1_B19361.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图11.1 – bitbake-layers show-layers的结果](img/Figure_11.1_B19361.jpg)'
- en: Figure 11.1 – The result of bitbake-layers show-layers
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1 – bitbake-layers show-layers的结果
- en: 'The command-line output shows the following three essential properties of any
    layer:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行输出显示任何层的以下三个基本属性：
- en: '`meta` string.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`meta` 字符串。'
- en: '`BBPATH` variable.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BBPATH` 变量。'
- en: '`.bbappend` files should be concatenated. It means that if two layers include
    the same recipe file (`.bb`), the one with the highest priority is used. In the
    case of `.bbappend`, every `.bbappend` file is included in the original recipe.
    The layer priority determines the order of inclusion, so the `.bbappend` files
    within the highest priority layers are appended first, followed by the others.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.bbappend`文件应该是连接在一起的。这意味着，如果两个层包含相同的食谱文件（`.bb`），则优先级最高的那个文件会被使用。对于`.bbappend`，每个`.bbappend`文件都会包含在原始食谱中。层的优先级决定了包含的顺序，因此优先级最高层中的`.bbappend`文件会最先附加，其他层的文件则依次附加。'
- en: Taking Poky as an example, it has three central individual layers. The `meta-yocto-bsp`
    layer is the Poky reference **Board Support Package** (**BSP**) layer. It contains
    machine configuration files and recipes to configure packages for the machines.
    As it is a reference BSP layer, it can be used as an example.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以Poky为例，它有三个主要的单独层。`meta-yocto-bsp`层是Poky的参考**板级支持包**（**BSP**）层。它包含机器配置文件和食谱，用于为机器配置软件包。作为参考BSP层，它可以作为示例使用。
- en: The `meta-poky` layer is the Poky reference distribution layer. It contains
    a distribution configuration used in Yocto Project by default. This default distribution
    is described in the `poky.conf` file, and it is widely used for testing products.
    It can be used as a starting point when designing your own distribution.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`meta-poky` 层是 Poky 参考分发层。它包含 Yocto 项目默认使用的分发配置。此默认分发在 `poky.conf` 文件中进行了描述，广泛用于测试产品。它可以作为设计自定义分发时的起点。'
- en: Another kind of layer is the software layer, which includes only applications
    or configuration files for applications and can be used on any architecture. There
    is a massive list of software layers. To name only a few, we have `meta-java`,
    `meta-qt5`, and `meta-browser`. The `meta-java` layer provides Java runtime and
    SDK support, the `meta-qt5` layer includes Qt5 support, and `meta-browser` supports
    web browsers such as Firefox and Chrome.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种层是软件层，它仅包含应用程序或应用程序的配置文件，可以用于任何架构。软件层的种类繁多。举几个例子，`meta-java`、`meta-qt5` 和
    `meta-browser`。`meta-java` 层提供 Java 运行时和 SDK 支持，`meta-qt5` 层包括 Qt5 支持，`meta-browser`
    支持 Firefox 和 Chrome 等网页浏览器。
- en: The `meta` layer is the OpenEmbedded Core metadata, which contains the recipes,
    classes, and the QEMU machine configuration files. It can be considered a mixed
    layer type, as it has software collection, BSP definition, and the distribution
    used by Yocto Project as the baseline.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`meta` 层是 OpenEmbedded 核心元数据，包含食谱、类和 QEMU 机器配置文件。它可以视为一种混合层类型，因为它具有软件集合、BSP
    定义和 Yocto 项目用作基础的分发。'
- en: Sometimes, your product may have special requirements, and changes in the `build/conf/local.conf`
    file will need to be made as required. The most adequate and maintainable solution
    is to create a distribution layer to place the distribution definition file.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您的产品可能有特殊需求，需要根据要求修改 `build/conf/local.conf` 文件。最合适且可维护的解决方案是创建一个分发层，将分发定义文件放在其中。
- en: Tip
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The `build/conf/local.conf` file is a volatile file that is not supposed to
    be tracked by Git.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`build/conf/local.conf` 文件是一个易变的文件，不应由 Git 跟踪。'
- en: We should not rely on it to set package versions, providers, and the system
    features for products but use it instead just as a shortcut for testing purposes
    during development.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不应依赖它来设置包版本、提供者和产品的系统功能，而应仅将其作为开发过程中测试的快捷方式。
- en: Avoiding adding custom settings in `build/conf/local.conf` helps to make our
    builds reproducible afterward.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 避免在 `build/conf/local.conf` 中添加自定义设置，有助于使我们的构建过程在之后可复现。
- en: Detailing a layer’s source code
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 详细描述一个层的源代码
- en: 'Usually, a layer has a directory tree, as shown in the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，一个层会有一个目录树，如下图所示：
- en: '![Figure 11.2 – The standard layer layout](img/Figure_11.2_B19361.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.2 – 标准层布局](img/Figure_11.2_B19361.jpg)'
- en: Figure 11.2 – The standard layer layout
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2 – 标准层布局
- en: Inside this directory are two files, `<layer>/COPYING` and `<layer>/README`,
    a license and a message to a user respectively. In `<layer>/README`, we must specify
    any other dependency and information that the layer’s users need to know. The
    `meta-` prefix for the layer is not a requirement but a commonly used naming convention.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在此目录中有两个文件，`<layer>/COPYING` 和 `<layer>/README`，分别是许可证和给用户的消息。在 `<layer>/README`
    中，我们必须指定层的用户需要知道的任何其他依赖关系和信息。`meta-` 前缀对于层来说不是必需的，但它是常用的命名约定。
- en: The `classes` folder should hold the classes specific to that layer (the `.bbclass`
    files). It is an optional directory.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`classes` 文件夹应包含该层特定的类（`.bbclass` 文件）。这是一个可选的目录。'
- en: The `<layer>/conf` folder is mandatory and should provide the configuration
    files (the `.conf` files). The layer configuration file, `<layer>/conf/layer.conf`,
    which will be covered in detail in the next chapter, is the file with the layer
    definition.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`<layer>/conf` 文件夹是必需的，应提供配置文件（`.conf` 文件）。层配置文件 `<layer>/conf/layer.conf`
    将在下一章详细介绍，它是包含层定义的文件。'
- en: 'An example of the directory layout of the `<layer>/conf` folder is shown in
    *Figure 11**.2*, where **(a)** shows the structure for a BSP layer and **(b)**
    shows the structure for a distribution layer:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图 11.2*所示，`<layer>/conf` 文件夹的目录布局示例，其中 **(a)** 展示了 BSP 层的结构，**(b)** 展示了分发层的结构：
- en: '![Figure 11.3 – The <layer>/conf layout for BSP and distribution layers](img/Figure_11.3_B19361.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.3 – BSP 和分发层的 <layer>/conf 布局](img/Figure_11.3_B19361.jpg)'
- en: Figure 11.3 – The <layer>/conf layout for BSP and distribution layers
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3 – BSP 和分发层的 <layer>/conf 布局
- en: 'The `recipe-*` folder is a cluster of recipes separated by category – for example,
    `recipes-core`, `recipes-bsp`, `recipes-graphic`, `recipes-multimedia`, and `recipes-kernel`.
    Inside each folder, starting with the `recipes-` prefix, there is a directory
    with the recipe name or a group of recipes. Inside it, the recipe files are placed,
    whose names end with `.bb` or `.bbappend`. For example, we can find the following
    screenshot from `meta` layer:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`recipe-*` 文件夹是按类别分隔的配方集群——例如，`recipes-core`、`recipes-bsp`、`recipes-graphic`、`recipes-multimedia`
    和 `recipes-kernel`。在每个以 `recipes-` 为前缀的文件夹内，有一个目录，存放着配方名称或一组配方。里面放置的是以 `.bb` 或
    `.bbappend` 结尾的配方文件。例如，我们可以从 `meta` 层中找到以下截图：'
- en: '![Figure 11.4 – An example of the recipes-* layout](img/Figure_11.4_B19361.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.4 – 配方-*布局示例](img/Figure_11.4_B19361.jpg)'
- en: Figure 11.4 – An example of the recipes-* layout
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – 配方-*布局示例
- en: Adding meta layers
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加元层
- en: We can find the most of available meta layers at [http://layers.openembedded.org](http://layers.openembedded.org).
    There are hundreds of meta layers from the Yocto Project, OpenEmbedded, communities,
    and companies that can be manually cloned inside the project source directory.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 [http://layers.openembedded.org](http://layers.openembedded.org) 找到大多数可用的元层。这里有来自
    Yocto 项目、OpenEmbedded、各社区和公司的数百个元层，可以手动克隆到项目的源代码目录中。
- en: 'To include, for example, `meta-oe` (one of the several meta layers inside the
    `meta-openembedded` repository) in our project, we can change the content of the
    configuration files or use BitBake command lines. However, we first need to fetch
    the layer’s source code. Run the following command from your Poky source directory:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要在我们的项目中包含 `meta-oe`（`meta-openembedded` 仓库中的多个元层之一），我们可以修改配置文件的内容，或使用 BitBake
    命令行。然而，我们首先需要获取该层的源代码。请在您的 Poky 源代码目录中运行以下命令：
- en: '![Figure 11.5 – Cloning the meta-openembedded layer](img/Figure_11.5_B19361.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.5 – 克隆 meta-openembedded 层](img/Figure_11.5_B19361.jpg)'
- en: Figure 11.5 – Cloning the meta-openembedded layer
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.5 – 克隆 meta-openembedded 层
- en: 'We need to modify the `build/conf/bblayer.conf` file to add the layer location,
    using its absolute path. See **line 12** in *Figure 11**.6* as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要修改 `build/conf/bblayer.conf` 文件，添加层的位置，使用其绝对路径。请参见**第 12 行**，如 *图 11.6*
    所示：
- en: '![Figure 11.6 – The content of build/conf/bblayers.conf after including the
    meta-openembedded layer](img/Figure_11.6_B19361.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.6 – 在包含 meta-openembedded 层后，`build/conf/bblayers.conf` 的内容](img/Figure_11.6_B19361.jpg)'
- en: Figure 11.6 – The content of build/conf/bblayers.conf after including the meta-openembedded
    layer
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.6 – 在包含 meta-openembedded 层后，`build/conf/bblayers.conf` 的内容
- en: 'Alternatively, we can use the `bitbake-layers` tool to perform the inclusion
    for us. This can be done using the following command from the `build` directory:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们可以使用`bitbake-layers`工具来为我们执行包含操作。这可以通过在`build`目录下运行以下命令来完成：
- en: '![Figure 11.7 – The command line to add the layer location](img/Figure_11.7_B19361.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.7 – 添加层位置的命令行](img/Figure_11.7_B19361.jpg)'
- en: Figure 11.7 – The command line to add the layer location
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.7 – 添加层位置的命令行
- en: The Yocto Project layer ecosystem
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Yocto 项目层生态系统
- en: 'It is convenient to create a layer. To make all the available layers easier
    to access, the OpenEmbedded community has developed an index, available at http://layers.openembedded.org,
    where most of them can be found. An example of its **Layers** tab is shown as
    follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个层是非常方便的。为了让所有可用的层更容易访问，OpenEmbedded 社区开发了一个索引，地址为 [http://layers.openembedded.org](http://layers.openembedded.org)，大部分层都可以在这里找到。其**Layers**标签页的示例如下所示：
- en: '![Figure 11.8 – The OpenEmbedded Layer Index for Kirkstone](img/Figure_11.8_B19361.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.8 – OpenEmbedded 层索引（Kirkstone）](img/Figure_11.8_B19361.jpg)'
- en: Figure 11.8 – The OpenEmbedded Layer Index for Kirkstone
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.8 – OpenEmbedded 层索引（Kirkstone）
- en: 'Another convenient use case for the OpenEmbedded Layer Index website is to
    search for a specific software type or recipe. The OpenEmbedded Layer Index can
    save the day by allowing us to search for the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: OpenEmbedded 层索引网站的另一个方便的用例是搜索特定的软件类型或配方。OpenEmbedded 层索引可以通过允许我们搜索以下内容来帮助我们：
- en: Machines
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器
- en: Distributions
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发行版
- en: Layers
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 层
- en: Recipes
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配方
- en: Classes
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类别
- en: 'The `bitbake-layers` tool also supports the use of the OpenEmbedded Layer Index.
    For example, to add the `meta-oe` layer, we can use the following command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`bitbake-layers` 工具还支持使用 OpenEmbedded 层索引。例如，要添加 `meta-oe` 层，我们可以使用以下命令：'
- en: '![Figure 11.9 – Fetching a layer from the OpenEmbedded Layer index](img/Figure_11.9_B19361.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.9 – 从 OpenEmbedded 层索引获取一个层](img/Figure_11.9_B19361.jpg)'
- en: Figure 11.9 – Fetching a layer from the OpenEmbedded Layer index
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.9 – 从 OpenEmbedded 层索引中获取一个层
- en: Summary
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小结
- en: In this chapter, we introduced the concept of layering. We learned about the
    directory structure in detail and the content in each layer type. In addition,
    we saw how to add an external layer to our project manually or by using the BitBake
    command line, as well as how to use the OpenEmbedded Layer index to find the available
    layers we need easily.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了层的概念。我们详细了解了目录结构以及每种层类型中的内容。此外，我们还学习了如何手动或使用 BitBake 命令行将外部层添加到我们的项目中，以及如何使用
    OpenEmbedded 层索引轻松找到我们需要的可用层。
- en: In the next chapter, we will learn more about why we need to create new layers
    and what the common metadata included in them is (such as machine definition files,
    recipes, and images). We will wrap it all up with an example of distribution customization.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将进一步了解为什么需要创建新层，以及它们中包含的常见元数据是什么（如机器定义文件、食谱和镜像）。最后，我们将通过一个分发定制的例子来总结。
