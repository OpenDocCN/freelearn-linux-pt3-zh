- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Understanding Variables and Pipelines
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解变量和管道
- en: In the previous chapter, you saw how the shell interprets users’ commands, and
    you saw various examples of how to craft your commands. In this chapter, I’ll
    tell you about variables and pipelines.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，您看到了shell如何解释用户的命令，并看到了如何编写您自己的命令的各种示例。在本章中，我将告诉您有关变量和管道的内容。
- en: The ability to create variables and assign values to them is an important part
    of any programming environment. As you would expect, both `bash` and `zsh` have
    this capability. In the first part of this chapter, we’ll cover the basics about
    environmental variables and programming variables.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 创建变量并为其分配值的能力是任何编程环境的重要组成部分。正如您期望的那样，`bash`和`zsh`都具备这种能力。在本章的第一部分，我们将介绍有关环境变量和编程变量的基础知识。
- en: In the second part of the chapter, we’ll cover how to use pipelines. Pipelines
    are very simple, and you might have already used them at some point. So, I promise
    to make this write-up both short and sweet. (Actually, there’s not a lot to say
    just yet about either of these topics, which is why I’m combining both of them
    into one chapter.)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第二部分，我们将介绍如何使用管道。管道非常简单，您可能已经在某个时候使用过它们。因此，我保证会简短而言之地介绍这个内容。（实际上，关于这两个主题，现在还没有太多需要讲的，这就是为什么我将它们合并到一个章节中。）
- en: 'Topics in the chapter include:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题包括：
- en: Understanding environmental variables
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解环境变量
- en: Understanding programming variables
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解编程变量
- en: Understanding pipelines
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解管道
- en: If you’re ready, let’s get started.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您准备好了，让我们开始吧。
- en: Understanding Environmental Variables
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解环境变量
- en: '**Environmental variables** control the configuration and functioning of the
    operating system shell. When you install either a Linux or Unix/Unix-like operating
    system such as FreeBSD or OpenIndiana, you’ll find that a default set of environmental
    variables has already been defined at both the global and user levels.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**环境变量** 控制操作系统 shell 的配置和功能。当您安装Linux或类Unix操作系统（如FreeBSD或OpenIndiana）时，您会发现在全局和用户级别已经定义了一组默认的环境变量。'
- en: 'To see the list of environmental variables and their settings, use the `env`
    command, like so:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看环境变量及其设置的列表，请使用`env`命令，就像这样：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The complete list of environmental variables is very extensive. Fortunately,
    you don’t need to memorize what each and every item does for you. Most of the
    ones that you do need to know are self-explanatory.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量的完整列表非常广泛。幸运的是，您不需要记住每个项的作用。您所需了解的大多数变量都是不言自明的。
- en: 'Instead of viewing the entire list, you can also view the value of a specific
    item. Just use the `echo` command, and precede the variable name with a `$`, like
    so:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是查看整个列表，您还可以查看特定项的值。只需使用`echo`命令，并在变量名之前加上`$`符号，就像这样：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here we see that I (`donnie`) am the current logged-in user, what my path setting
    is, and what my default editor is. You would view the value of any other environmental
    variable the same way.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我（`donnie`）是当前登录用户，我的路径设置是什么，以及我的默认编辑器是什么。您可以以同样的方式查看任何其他环境变量的值。
- en: An important thing to note is that the names of all environmental variables
    always consist of all upper-case letters. Nothing in either the operating system
    or the shell prevents the use of lower-case letters, but there is a very good
    reason for not using them. It’s just that variable names are case-sensitive. Best
    practice dictates using nothing but upper-case letters for environmental variable
    names and either all lower-case letters or a mix of upper and lower-case letters
    for programming variable names. This will prevent you from accidentally overwriting
    the value of an environmental variable. (I’ll show you more about that in the
    next section.)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的注意事项是，所有环境变量的名称始终由全部大写字母组成。操作系统或shell中没有任何东西阻止使用小写字母，但不使用它们有一个非常好的理由。变量名称是区分大小写的。最佳实践是仅使用大写字母命名环境变量，对于编程变量名称则可以使用全部小写字母或大小写混合。这将防止您意外地覆盖环境变量的值。（我将在下一节中展示更多相关内容。）
- en: As I mentioned before, environmental variables are configured at both the global
    and user levels. Variable settings at the global level affect all users of `bash`
    and `zsh`. For `bash`, you’ll find most of these global settings in the `/etc/profile`
    file, the `/etc/bashrc` file, and various files in the `/etc/profile.d/` directory.
    For `zsh`, you’ll find these settings in the `/etc/zprofile`, `/etc/zshrc`, and
    `/etc/zshenv` files. (Note that `zsh` also references the same `/etc/profile`
    file that `bash` references.) If you were to open one of these files at this point,
    you likely won’t understand much of what’s going on in them. That’s okay, because
    for now that doesn’t matter. But, you’ll easily be able to find where the environmental
    variables are set, because the variable names are all in upper-case letters.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前提到的，环境变量可以在全局和用户级别进行配置。全局级别的变量设置会影响所有 `bash` 和 `zsh` 用户。对于 `bash`，你会在 `/etc/profile`
    文件、`/etc/bashrc` 文件以及 `/etc/profile.d/` 目录中的各种文件中找到这些全局设置。对于 `zsh`，你会在 `/etc/zprofile`、`/etc/zshrc`
    和 `/etc/zshenv` 文件中找到这些设置。（请注意，`zsh` 也会引用与 `bash` 相同的 `/etc/profile` 文件。）如果你此时打开其中一个文件，你可能并不理解它们的内容。没关系，因为现在这并不重要。但你会很容易找到环境变量的设置位置，因为变量名都是大写字母。
- en: 'Now, let’s say you don’t like a particular setting. For example, let’s say
    that you want to customize your command-line prompt to your own liking. Here on
    my Fedora workstation, my `bash` prompt looks like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设你不喜欢某个特定的设置。举个例子，假设你想自定义命令行提示符以符合自己的喜好。在我的 Fedora 工作站上，我的 `bash` 提示符是这样的：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The format of the prompt is determined by the `PS1` environmental variable.
    We can see the `PS1` settings like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 提示符的格式由 `PS1` 环境变量决定。我们可以像这样查看 `PS1` 的设置：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here’s the breakdown of what you’ve just seen:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你刚刚看到的内容的解析：
- en: '`[`: This is a literal character, which is the first thing we see in the prompt.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[`: 这是一个字面字符，它是我们在提示符中看到的第一个字符。'
- en: '`\u`: This causes the current user’s username to appear.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\u`：这会使当前用户的用户名显示出来。'
- en: '`@`: This is another literal character.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@`：这是另一个字面字符。'
- en: '`\h`: This causes the first component of the machine’s hostname to appear.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\h`：这会使机器的主机名的第一个组件显示出来。'
- en: '`\W`: This causes the name of the current working directory to appear. Note
    that the upper-case W doesn’t cause the entire pathname to appear.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\W`：这会显示当前工作目录的名称。请注意，大写的 W 不会显示整个路径名。'
- en: '`]`: This is another literal character.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`]`：这是另一个字面字符。'
- en: '`\$`: This causes the `$` to show for all normal users, and the `#` to appear
    for the root user.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\$`：这会使所有普通用户看到 `$`，而根用户看到 `#`。'
- en: A while ago, I said that we can use the `\` to force the shell to interpret
    a metacharacter as a literal character. Here though, we see another use for the
    `\`. When configuring the `PS1` parameters, the `\` indicates that we’re about
    to use a **macro** command. (Think of a macro as a command that runs when you
    perform some simple action, such as hitting a specific key or clicking on a specific
    button.)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 不久前，我说过我们可以使用 `\` 强制 shell 将元字符解释为字面字符。但在这里，我们看到了 `\` 的另一种用法。当配置 `PS1` 参数时，`\`
    表示我们将要使用一个**宏**命令。（可以将宏看作是当你执行某个简单操作时，例如按下特定的键或点击特定的按钮时会运行的命令。）
- en: 'Now, let’s say that we want the entire path of the current working directory
    to appear, along with the current date and time. To do that, we’ll replace the
    `\W` with `\w`, and add the `\d` and `\t` macros, like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们想让当前工作目录的整个路径显示出来，同时显示当前的日期和时间。为此，我们将 `\W` 替换为 `\w`，并添加 `\d` 和 `\t` 宏，像这样：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Note that I had to surround the new parameter within a pair of quotes so that
    the shell would interpret the metacharacters properly. Also, note what happens
    when I `cd` into a down-level directory:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我必须将新参数用一对引号括起来，以便 shell 能正确解释元字符。同时，注意当我执行`cd`进入下一级目录时会发生什么：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Substituting the `/w` for the `/W` causes the entire path of the current working
    directory to show up.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 将`/w`替换为`/W`会显示当前工作目录的整个路径。
- en: When you configure the `PS1` parameter from the command-line, the new settings
    will disappear as soon as you either log out from the machine or close the terminal
    window. To make the setting permanent, just edit the `.bashrc` file that’s in
    your home directory. Add the `export PS1="[\d \t \u@\h \w]$ "` line to the end
    of the file, and you’ll see the new prompt the next time you either log into the
    machine or open a new terminal window.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当你从命令行配置`PS1`参数时，新的设置将在你注销机器或关闭终端窗口后消失。为了使设置永久生效，只需编辑位于主目录中的`.bashrc`文件。在文件末尾添加`export
    PS1="[\d \t \u@\h \w]$ "`这一行，下一次你登录机器或打开一个新终端窗口时，就会看到新的提示符。
- en: There are still a lot more ways to customize the command prompt that I haven’t
    shown you. For a more complete list, see the reference that I provided in the
    *Further Reading* section. Also, note that I’ve only covered how to do this with
    `bash`, because `zsh` uses different command prompt parameters. (I’ll show you
    all about that in *Chapter 22, Using the Z Shell*.)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 还有很多其他方式可以自定义命令提示符，我没有一一展示。有关更完整的列表，请查看我在*进一步阅读*部分提供的参考资料。还要注意，我这里只展示了如何使用`bash`进行设置，因为`zsh`使用不同的命令提示符参数。（在*第22章，使用Z
    Shell*中我会详细介绍这部分内容。）
- en: I can read your mind, and can see that you’re wondering what environmental variables
    have to do with shell scripting. Well, it’s just that sometimes you’ll need to
    have your script perform a specific action that depends upon the value of a specific
    environmental variable. For example, let’s say that you only want the script to
    run for the root user, and not for any unprivileged user. Since we know that the
    user identification number for the root user is `0`, we can write code that allows
    the script to run if the `UID` variable is set to `0`, and to prevent the script
    from running if the `UID` is set to anything other than `0`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我能读懂你的心思，看到你在想环境变量与 Shell 脚本有什么关系。其实，有时候你需要让脚本执行一个依赖于特定环境变量值的特定操作。例如，假设你只希望脚本在
    root 用户下运行，而不是在任何没有特权的用户下运行。由于我们知道 root 用户的用户标识号是`0`，我们可以编写代码，允许脚本在`UID`变量设置为`0`时运行，而当`UID`设置为非`0`时则阻止脚本运行。
- en: And by the way, I apologize if it seems a bit creepy that I can read your mind.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，如果我能读懂你的心思而让你觉得有些不自在，我为此道歉。
- en: That does it for our introduction to environmental variables. Let’s now take
    a quick look at programming variables.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们对环境变量的介绍。现在让我们快速看看编程变量。
- en: Understanding Programming Variables
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解编程变量
- en: Sometimes, it’s necessary to define variables to use in your scripts. You can
    define, view, and unset these variables as needed for your programming needs.
    Note that although the system will allow you to create programming variable names
    with all upper-case letters, it’s considered bad form to do so. Best practice
    is to always name your programming variables with lower-case letters, so that
    you won’t risk accidentally overwriting the value of an environmental variable
    with the same name. (Of course, you won’t cause any long-term damage by overwriting
    an environmental variable. But, why risk overwriting an environmental variable
    that you might need to use later in your script?)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，定义变量在脚本中是必要的。你可以根据需要定义、查看和取消设置这些变量。请注意，尽管系统允许你使用全大写字母来创建编程变量名，但这被认为是一种不太好的做法。最佳实践是始终使用小写字母来命名编程变量，这样你就不会冒险用相同名字覆盖环境变量的值。（当然，覆盖环境变量不会造成长期损害。但是，为什么要冒险覆盖一个你以后可能需要在脚本中使用的环境变量呢？）
- en: 'To show how this all works, let’s create some programming variables from the
    command-line, and view the assigned values. First, we’ll create the `car` variable
    and assign to it the value `Ford`, like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示这些内容是如何工作的，让我们从命令行创建一些编程变量，并查看它们的值。首先，我们将创建`car`变量，并将其值设置为`Ford`，如下面所示：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To view the value of a variable, use `echo`, and precede the name of the variable
    with a `$`, just as we did with the environmental variables. Now, let’s open a
    child shell with the `bash` command, to see if we can still view the value of
    this `car` variable, and then exit back to the parent shell, like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看变量的值，使用`echo`，并在变量名之前加上`$`，就像我们对环境变量所做的那样。现在，让我们使用`bash`命令打开一个子 shell，看看我们是否还能查看到这个`car`变量的值，然后退出回到父
    shell，如下所示：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can’t see the value of `car` this time, because we didn’t **export** the
    variable. Exporting the variable will permit a child shell to access the variable.
    As you might have guessed, we’ll use the `export` command to do this, like so:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们看不到`car`的值，因为我们没有**导出**这个变量。导出变量将允许子Shell访问该变量。正如你可能猜到的，我们将使用`export`命令来完成这个操作，像这样：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This time, we see that the value of `car` now shows up in the child shell.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们看到`car`的值现在在子Shell中显示了出来。
- en: We’ll be working with variables throughout the rest of this book, so you’ll
    be learning a lot more about how to use them. For now though, this quick introduction
    is enough.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书的余下部分中使用变量，所以你将学习更多关于如何使用它们的内容。不过目前，快速介绍就足够了。
- en: Next, let’s do some plumbing.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们做一些管道操作。
- en: Understanding Pipelines
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解管道
- en: A **pipe** will take the output of one command and use it as the input for another
    command. It’s represented by the `|` symbol, which is on the same key as the backslash.
    You’ll often invoke a simple **pipeline** from the command-line for various purposes.
    But, you can also create very complex, multi-stage pipelines for your shell scripts.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**管道**会将一个命令的输出作为另一个命令的输入。它由`|`符号表示，这个符号与反斜杠在同一个键上。你通常会从命令行调用一个简单的**管道**进行各种目的。但你也可以为Shell脚本创建非常复杂的多阶段管道。'
- en: '![](img/B21693_03_01.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21693_03_01.png)'
- en: 'Figure 3.1: Creating a pipeline. Note that stdout is short for Standard Output,
    and stdin is short for Standard Input.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1：创建管道。请注意，stdout是标准输出的简称，而stdin是标准输入的简称。
- en: 'To see how this can be useful, let’s say that you want to look at a listing
    of all files in a certain directory. But, there are so many files that the output
    would scroll off of the screen where you’d never be able to see it. You can solve
    the problem by taking the output of the `ls` command and using it as the input
    for the `less` command. It would look something like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看看这如何有用，假设你想查看某个目录中所有文件的列表。但是文件太多，输出会滚动出屏幕，你根本看不到它。你可以通过将`ls`命令的输出作为`less`命令的输入来解决这个问题。它看起来像这样：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `ls -l` listing will open in the `less` pager, so that you can scroll through
    the output or perform searches for particular text strings.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`ls -l`的列表将会在`less`分页器中打开，你可以滚动输出或搜索特定的文本字符串。'
- en: 'Now, let’s say that I only want to see files with the text string `alma` in
    their filenames. That’s easy enough. I’ll just pipe the `ls -l` output into `grep`,
    like so:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我只想看到文件名中包含文本字符串`alma`的文件。这很简单。我只需将`ls -l`的输出管道到`grep`中，像这样：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, let’s say that I don’t want to see the filenames, but I do want to know
    how many files there are. I’ll just add another pipe stage, like so:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我不想看到文件名，但我确实想知道有多少个文件。我只需再添加一个管道阶段，像这样：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `wc -l` command counts the number of lines in the output, which in this
    case tells us how many files I have that contain the text string `alma` in their
    filenames.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`wc -l`命令计算输出中的行数，在这个例子中，它告诉我们在文件名中包含文本字符串`alma`的文件数量。'
- en: If you’re not familiar with `grep`, just understand for now that it’s a utility
    that can search for either specific text strings or for text patterns. It can
    search through text files without you having to open them, or it can search for
    text strings or patterns in the output that you would pipe into it from another
    command.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不熟悉`grep`，目前只需理解它是一个可以搜索特定文本字符串或文本模式的工具。它可以在不打开文件的情况下搜索文本文件，或者它可以搜索从另一个命令的输出管道到它中的文本字符串或模式。
- en: Okay, I’ve shown you some simple examples of how to create pipelines from the
    command-line. Now, I want to show you something that I hope you’ll *never* do.
    This involves using the `cat` utility.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我已经向你展示了一些如何从命令行创建管道的简单例子。现在，我想向你展示一些我希望你*永远*不要做的事情。这涉及到使用`cat`工具。
- en: 'One thing that you can do with `cat` is to dump the contents of a text file
    to your screen. It’s mainly useful for viewing small files, as you see here:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`cat`你可以将文本文件的内容输出到屏幕上。这主要用于查看小文件，正如你在这里看到的：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you use `cat` to view a large file, the output will scroll off of the screen
    where you might not be able to view it. I have seen cases where somebody would
    still use `cat` to dump the file, and then pipe the output into `less`, like so:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用`cat`查看一个大文件，输出将滚动出屏幕，你可能无法查看它。我见过有人仍然使用`cat`来转储文件，然后将输出管道到`less`，像这样：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'I’ve also seen people pipe `cat` output into `grep` to search for a text string,
    like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我也看到过有人将 `cat` 的输出通过管道传递给 `grep` 来查找文本字符串，像这样：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Both of these examples work, but it requires less typing to just use either
    `less` or `grep` without `cat`, like so:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个例子都可以工作，但直接使用 `less` 或 `grep` 而不通过 `cat`，会少输入一些内容，像这样：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In other words, although piping `cat` output into other utilities does work,
    it’s less efficient than just directly using the other utilities, and can make
    your scripts a bit less efficient and a bit harder to read. And, as a real-life
    lover of cats, it always bothers me to see someone engaging in `cat` abuse.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，尽管将 `cat` 的输出通过管道传递给其他工具是可行的，但它比直接使用其他工具效率低，可能会让你的脚本变得不那么高效，也更难阅读。而且，作为一个爱猫的人，每次看到有人用
    `cat` 进行滥用时，我总是感到很烦。
- en: What I’ve shown you here is just scratching the surface of what you can do with
    pipelines. A major reason why Linux and Unix administrators need to create shell
    scripts is to automate the extraction and formatting of information from either
    text files or the output of certain programs. Doing that often requires very long,
    complex, multi-stage pipelines with a different extraction or formatting utility
    at each stage. Before you can start doing that, you’ll need to learn how to use
    these utilities, which you’ll begin doing in *Chapter 6, Text Stream Filters –
    Part 1*. And, before we can get to that, we need to cover a few more basic functions
    of `bash` and `zsh`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我展示的只是管道操作的冰山一角。Linux 和 Unix 管理员需要创建 shell 脚本的一个主要原因是自动化从文本文件或某些程序输出中提取和格式化信息。这通常需要非常长、复杂的、多阶段的管道，每个阶段都有不同的提取或格式化工具。在你能开始做这些之前，你需要学习如何使用这些工具，你将在
    *第六章，文本流过滤器 - 第1部分* 中开始学习。而在我们进入那部分之前，还需要再介绍一些 `bash` 和 `zsh` 的基础功能。
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Although this chapter has been rather short, we covered a good bit of important
    information. We began by looking at environmental variables, showing how to modify
    one of them, and explaining why you might need to use environmental variables
    in your shell scripts. Next, we covered programming variables, explaining how
    to create and export them. Finally, we did a bit of plumbing work by creating
    some pipelines.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这一章比较简短，但我们已经覆盖了许多重要的信息。我们首先查看了环境变量，展示了如何修改其中一个变量，并解释了在 shell 脚本中为何需要使用环境变量。接着，我们讲解了编程变量，说明了如何创建和导出它们。最后，我们做了一些管道操作。
- en: In the next chapter, we’ll cover the concept of input/output redirection. I’ll
    see you there.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将介绍输入/输出重定向的概念。我们下次见。
- en: Questions
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which of the following metacharacters allows you to view the assigned value
    of a variable?
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些元字符允许你查看变量的赋值？
- en: '`*`'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`*`'
- en: '`%`'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`%`'
- en: '`$`'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$`'
- en: '`^`'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`^`'
- en: Which of the following statements is true?
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪项陈述是正确的？
- en: It’s perfectly correct to use either all upper-case or all lower-case letters
    to create your programming variable names.
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用全大写或全小写字母来创建编程变量名都是完全正确的。
- en: Variable names are not case-sensitive.
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 变量名不区分大小写。
- en: You should always use upper-case letters to create the names of programming
    variables.
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建编程变量名时，应始终使用大写字母。
- en: You should always use lower-case letters to create the names of programming
    variables.
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建编程变量名时，应始终使用小写字母。
- en: How would you cause a child shell to recognize a variable that you created in
    the parent shell?
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使子 shell 识别你在父 shell 中创建的变量？
- en: In the child shell, import the variable from the parent shell.
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在子 shell 中，从父 shell 导入变量。
- en: In the parent shell, use the `export` keyword when creating the variable.
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在父 shell 中，创建变量时使用 `export` 关键字。
- en: You can’t, because the parent shell and child shell are isolated from each other.
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你不能这样做，因为父 shell 和子 shell 是相互隔离的。
- en: The child shell and the parent shell always share variables by default.
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 子 shell 和父 shell 默认会共享变量。
- en: Which of these metacharacters would you use to take the output of one command
    and use it at the input of another command?
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会使用以下哪些元字符将一个命令的输出传递给另一个命令作为输入？
- en: '`$`'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$`'
- en: '`|`'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`|`'
- en: '`&`'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`&`'
- en: '`%`'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`%`'
- en: Further Reading
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'How to Change/Set up bash custom prompt (PS1) in Linux: [https://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html](https://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 Linux 中更改/设置 bash 自定义提示符（PS1）：[https://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html](https://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html)
- en: 'How to Count Files in a Directory in Linux?: [https://www.linuxjournal.com/content/how-count-files-directory-linux](https://www.linuxjournal.com/content/how-count-files-directory-linux)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何计算 Linux 中目录下的文件数？：[https://www.linuxjournal.com/content/how-count-files-directory-linux](https://www.linuxjournal.com/content/how-count-files-directory-linux)
- en: Answers
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: c
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: c
- en: d
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: d
- en: b
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: b
- en: b
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: b
- en: Join our community on Discord!
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区！
- en: Read this book alongside other users, Linux experts, and the author himself.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他用户、Linux 专家以及作者本人一同阅读本书。
- en: Ask questions, provide solutions to other readers, chat with the author via
    Ask Me Anything sessions, and much more. Scan the QR code or visit the link to
    join the community.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 提问、为其他读者提供解决方案、通过“问我任何问题”环节与作者聊天，还有更多内容等你参与。扫描二维码或访问链接加入社区。
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/SecNet](https://packt.link/SecNet)'
- en: '![](img/QR_Code10596186092701843.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code10596186092701843.png)'
- en: Leave a Review!
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 留下评论！
- en: Thank you for purchasing this book from Packt Publishing—we hope you enjoy it!
    Your feedback is invaluable and helps us improve and grow. Once you've completed
    reading it, please take a moment to leave an Amazon review; it will only take
    a minute, but it makes a big difference for readers like you.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您从 Packt 出版社购买本书—我们希望您喜欢它！您的反馈对我们至关重要，能帮助我们改进和成长。阅读完本书后，请花一点时间在 Amazon 上留下评论；这只需一分钟，但对像您一样的读者帮助巨大。
- en: Scan the QR code below to receive a free ebook of your choice.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描下面的二维码，获得你选择的免费电子书。
- en: '[https://packt.link/NzOWQ](https://packt.link/NzOWQ)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/NzOWQ](https://packt.link/NzOWQ)'
- en: '![](img/review.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/review.png)'
