- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Printer and Email – Setting Up Printers and Email Services on Linux Servers
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打印机和电子邮件 – 在 Linux 服务器上设置打印机和电子邮件服务
- en: In this chapter, we are going to set up printer and email services. These services
    are vital to any company, big or small. The ability to print documentation is
    a necessity for many things. This can include documentation and handouts. Along
    with printing, we will be setting up email services for servers. This will allow
    mail servers to send out emails of the reports we create based on the type of
    reports we set up or programs that utilize email to complete tasks, such as alerting
    the user or providing configuration compliance reports. Through the use of email
    services, we will be able to ensure that nothing is overlooked when it comes to
    our systems.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将设置打印机和电子邮件服务。这些服务对任何公司，无论大小，都是至关重要的。打印文档的能力是许多工作所需的，这可能包括文档和手册。除了打印，我们还将为服务器设置电子邮件服务。这将允许邮件服务器根据我们设置的报告类型或使用电子邮件完成任务的程序（例如，向用户发送警报或提供配置合规性报告）发送报告。通过使用电子邮件服务，我们可以确保在管理系统时没有任何遗漏。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: Learning about printer services and setting them up manually
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解打印机服务并手动设置它们
- en: Setting up printer services via Ansible Automation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 Ansible 自动化设置打印机服务
- en: Learning about email services and setting them up manually
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解电子邮件服务并手动设置它们
- en: Setting up email services via Ansible Automation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 Ansible 自动化设置电子邮件服务
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You need to have applied the configuration from [*Chapter 1*](B18607_01.xhtml#_idTextAnchor016),
    *Block Storage – Learning How to Provision Block Storage on Red Hat Enterprise
    Linux*, in order to do the hands-on portion of this chapter. The relevant example
    files and playbooks can be found on the GitHub repository at [https://github.com/PacktPublishing/Red-Hat-Certified-Specialist-in-Services-Management-and-Automation-EX358-Exam-Guide/tree/main/Chapter06](https://github.com/PacktPublishing/Red-Hat-Certified-Specialist-in-Services-Management-and-Automation-EX358-Exam-Guide/tree/main/Chapter06).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要先应用[*第一章*](B18607_01.xhtml#_idTextAnchor016)中的配置，*块存储 – 了解如何在 Red Hat Enterprise
    Linux 上配置块存储*，才能进行本章的动手操作部分。相关的示例文件和剧本可以在 GitHub 仓库[https://github.com/PacktPublishing/Red-Hat-Certified-Specialist-in-Services-Management-and-Automation-EX358-Exam-Guide/tree/main/Chapter06](https://github.com/PacktPublishing/Red-Hat-Certified-Specialist-in-Services-Management-and-Automation-EX358-Exam-Guide/tree/main/Chapter06)中找到。
- en: Setting up GitHub access
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 GitHub 访问权限
- en: Please refer to the instructions found in [*Chapter 1*](B18607_01.xhtml#_idTextAnchor016),
    *Block Storage – Learning How to Provision Block Storage on Red Hat Enterprise
    Linux*, to gain access to GitHub. You can find the Ansible automation playbooks
    for this chapter at [https://github.com/PacktPublishing/Red-Hat-Certified-Specialist-in-Services-Management-and-Automation-EX358-/tree/main/ch6](https://github.com/PacktPublishing/Red-Hat-Certified-Specialist-in-Services-Management-and-Automation-EX358-/tree/main/ch6).
    Remember, these are only suggested playbooks, they do not represent the only way
    these solutions can be written.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考[*第一章*](B18607_01.xhtml#_idTextAnchor016)中的说明，*块存储 – 了解如何在 Red Hat Enterprise
    Linux 上配置块存储*，以便访问 GitHub。你可以在[https://github.com/PacktPublishing/Red-Hat-Certified-Specialist-in-Services-Management-and-Automation-EX358-/tree/main/ch6](https://github.com/PacktPublishing/Red-Hat-Certified-Specialist-in-Services-Management-and-Automation-EX358-/tree/main/ch6)找到本章的
    Ansible 自动化剧本。请记住，这些只是建议的剧本，它们并不是解决方案唯一的编写方式。
- en: You can always change them using raw, shell, or cmd to achieve the same results,
    but we seek to demonstrate the best way to accomplish our goals. Also keep in
    mind that we are not using the FCQN required in future versions of Ansible, as
    that will not be supported in the exam, which tests against Ansible 2.9.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你总是可以使用 raw、shell 或 cmd 来修改它们，以实现相同的结果，但我们旨在展示达成目标的最佳方法。还请记住，我们没有使用将来版本的 Ansible
    中要求的 FCQN，因为该功能在考试中不被支持，考试是基于 Ansible 2.9 版本进行的。
- en: Learning about printer services and setting them up manually
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解打印机服务并手动设置它们
- en: Systems need the ability to print in many cases. This could be in order to output
    some data that you need to deliver at a presentation, or due to the need to print
    material for later referencing. Through the use of printer services, we can set
    up and configure a print queue that will allow us to do just that. We will be
    able to control how and when the printer prints as well as which printer is set
    as the default. With this knowledge, you can set up printers on both RHEL desktops
    and servers. For the hands-on portion of the exercise, you will need a network
    printer on the same network as your servers.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，系统需要打印能力。这可能是为了输出一些需要在演示中传递的数据，或者是为了打印后续参考的材料。通过打印服务的使用，我们可以设置和配置打印队列，使我们能够做到这一点。我们可以控制打印机何时以及如何打印，以及哪个打印机被设置为默认打印机。掌握了这些知识，你可以在
    RHEL 桌面和服务器上设置打印机。在练习的实际操作部分，你需要一个与服务器位于同一网络的网络打印机。
- en: 'Let’s get started. First, we are going to install the `cups` package to provide
    the dependencies that we need to aggregate. We will do this with the commands
    in the following screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。首先，我们将安装 `cups` 包，以提供我们需要聚合的依赖项。我们将使用以下截图中的命令来执行此操作：
- en: '![Figure 6.1 – Install cups package](img/Figure_6.01_B18607.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1 – 安装 cups 包](img/Figure_6.01_B18607.jpg)'
- en: Figure 6.1 – Install cups package
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 安装 cups 包
- en: 'By installing the `cups` package, we install all the packages needed to create
    print queues and query printers directly attached to other servers or print servers.
    We will need to enable and start the service, as shown in the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通过安装 `cups` 包，我们安装了创建打印队列和直接查询连接到其他服务器或打印服务器的打印机所需的所有包。我们需要启用并启动服务，如以下截图所示：
- en: '![Figure 6.2 – Start and enable cups for printer setup](img/Figure_6.02_B18607.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2 – 启动和启用 cups 进行打印机设置](img/Figure_6.02_B18607.jpg)'
- en: Figure 6.2 – Start and enable cups for printer setup
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – 启动和启用 cups 进行打印机设置
- en: 'Next, we are going to enable firewall rules to allow `631/tcp`, which is the
    typical port that printers serve from. We also enable mDNS, which allows dynamic
    discovery through the **Internet Printing Protocol** (**IPP**). The commands needed
    are in the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将启用防火墙规则以允许 `631/tcp`，这是打印机通常提供服务的端口。我们还启用 mDNS，通过**互联网打印协议**（**IPP**）进行动态发现。所需的命令如下截图所示：
- en: '![Figure 6.3 – Add the required firewall rules to discover printers and printing](img/Figure_6.03_B18607.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – 添加所需的防火墙规则以发现打印机和打印](img/Figure_6.03_B18607.jpg)'
- en: Figure 6.3 – Add the required firewall rules to discover printers and printing
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 添加所需的防火墙规则以发现打印机和打印
- en: 'The next step for setting up printing on your system is to look up network
    printers. We will use the `ippfind` tool to do that with the command shown in
    the following screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 设置打印系统的下一步是查找网络打印机。我们将使用 `ippfind` 工具执行此操作，命令如下截图所示：
- en: '![Figure 6.4 – Use the ippfind tool to look up network printers](img/Figure_6.04_B18607.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4 – 使用 ippfind 工具查找网络打印机](img/Figure_6.04_B18607.jpg)'
- en: Figure 6.4 – Use the ippfind tool to look up network printers
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – 使用 ippfind 工具查找网络打印机
- en: 'After we have located our printers, we will take the one we would like to target
    and create a print queue for it. This will allow us to queue up print jobs to
    send to the printer. This provides the ability to enable and disable the printer’s
    printing functionality, while maintaining the print queue when the printer is
    offline or disabled (unless you intervene manually or through Ansible Automation).
    We can see the print queue created with the `lpadmin` command. (Note that is an
    *L* at the start of `lpadmin`.) We will utilize the following flags: `-p`, `-v`,
    `-m`, and `-E`. These mean the following: `-p queue` name, `-v device` url, while
    `-m everywhere` is the IPP definition, and `-E` is for immediate enabling of the
    printer queue. Please first ensure that the DNS name is routable for the printer
    or add it to `/etc/hosts` in order to ensure reachability. The full command utilized
    can be seen in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们定位到打印机后，我们将选择我们希望目标的打印机并为其创建一个打印队列。这将允许我们将打印任务排队并发送到打印机。这提供了启用和禁用打印机打印功能的能力，同时在打印机离线或禁用时保持打印队列（除非你手动干预或通过
    Ansible 自动化）。我们可以通过`lpadmin`命令看到创建的打印队列。（注意`lpadmin`前有一个*L*字母。）我们将使用以下标志：`-p`，`-v`，`-m`，和`-E`。这些的含义如下：`-p
    queue`名称，`-v device` URL，而`-m everywhere`是IPP定义，`-E`用于立即启用打印机队列。请首先确保打印机的DNS名称是可路由的，或者将其添加到`/etc/hosts`中以确保可访问性。完整的命令可以在以下截图中看到：
- en: '![Figure 6.5 – Configure the print queue](img/Figure_6.05_B18607.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.5 – 配置打印队列](img/Figure_6.05_B18607.jpg)'
- en: Figure 6.5 – Configure the print queue
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – 配置打印队列
- en: 'Next, we are going to set the default printer so that when you create a print
    job it is sent to the right printer. This is normally used when you have multiple
    printers and need to ensure you print to the right one, perhaps at a specific
    location in a building or due to needing to utilize a certain type of printer.
    The command to set the default printer can be seen in the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将设置默认打印机，以便当你创建打印任务时，它将发送到正确的打印机。这通常在你有多台打印机时使用，并且需要确保打印到正确的打印机，可能是在大楼中的特定位置，或者因为需要使用某种类型的打印机。设置默认打印机的命令可以在以下截图中看到：
- en: '![Figure 6.6 – Set the default printer](img/Figure_6.06_B18607.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.6 – 设置默认打印机](img/Figure_6.06_B18607.jpg)'
- en: Figure 6.6 – Set the default printer
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6 – 设置默认打印机
- en: 'Next, we are going to create a simple text file to print and test that our
    print queue is set up correctly. In my case, my file looks like the following
    screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个简单的文本文件来进行打印，并测试我们的打印队列是否已正确设置。在我的例子中，文件如下所示：
- en: '![Figure 6.7 – Create a test document to print](img/Figure_6.07_B18607.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.7 – 创建一个测试文档进行打印](img/Figure_6.07_B18607.jpg)'
- en: Figure 6.7 – Create a test document to print
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – 创建一个测试文档进行打印
- en: 'After we have created the text file to print, we are going to go and actually
    print it. This is done with the command found in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建了文本文件进行打印后，我们将实际打印它。这可以通过以下截图中的命令完成：
- en: '![Figure 6.8 – Print test document](img/Figure_6.08_B18607.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.8 – 打印测试文档](img/Figure_6.08_B18607.jpg)'
- en: Figure 6.8 – Print test document
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – 打印测试文档
- en: If the printer successfully printed your page, then you are able to create and
    control printer jobs on `rhel1.example.com`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果打印机成功打印了你的页面，那么你就可以在`rhel1.example.com`上创建和控制打印任务。
- en: 'Next, let’s see how to disable and enable the print queue. When you disable
    the printer, it will queue the print jobs instead of sending them to the printer.
    This can be seen in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何禁用和启用打印队列。当你禁用打印机时，它将排队打印任务，而不是将它们发送到打印机。这可以从以下截图中看到：
- en: '![Figure 6.9 – Disable printer and then attempt to print](img/Figure_6.09_B18607.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.9 – 禁用打印机然后尝试打印](img/Figure_6.09_B18607.jpg)'
- en: Figure 6.9 – Disable printer and then attempt to print
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9 – 禁用打印机然后尝试打印
- en: 'We are then going to check the current print queue and how it is not moving
    forward as the printer is disabled. After that, we will cancel the print jobs
    so that they do not print when we re-enable the printer. Going to the home directory
    and using the commands found in the following screenshot will show the print queue
    and cancel the print jobs:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将检查当前的打印队列，并查看它如何因为打印机被禁用而无法前进。之后，我们将取消打印任务，以防在重新启用打印机时它们继续打印。进入主目录并使用以下截图中的命令将显示打印队列并取消打印任务：
- en: '![Figure 6.10 – Print queue shows stalled jobs due to the printer being disabled](img/Figure_6.10_B18607.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.10 – 打印队列显示由于打印机禁用而导致的暂停任务](img/Figure_6.10_B18607.jpg)'
- en: Figure 6.10 – Print queue shows stalled jobs due to the printer being disabled
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.10 – 打印队列显示由于打印机禁用而导致的暂停任务
- en: 'To ensure that we will still be able to print, next we are going to re-enable
    the print queue. This will allow any print jobs to be sent to our default printer.
    This is accomplished by the command in the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为确保我们仍然能够打印，接下来我们将重新启用打印队列。这将使任何打印任务都能够发送到我们的默认打印机。这是通过下图所示的命令完成的：
- en: '![Figure 6.11 – Re-enable the print queue after clearing the print queue](img/Figure_6.11_B18607.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.11 – 清除打印队列后重新启用打印队列](img/Figure_6.11_B18607.jpg)'
- en: Figure 6.11 – Re-enable the print queue after clearing the print queue
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.11 – 清除打印队列后重新启用打印队列
- en: In this section, we set up a print queue to allow a Linux device to print to
    a network printer. This information is crucial when you need to be able to create
    physical documentation. This could be for handouts at a company event or for an
    internal meeting. The ability to print is necessary and knowing how to set up
    a print queue enables that ability. Next, we are going to set up a print queue
    using Ansible Automation.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们设置了一个打印队列，使 Linux 设备能够打印到网络打印机。这些信息在你需要创建纸质文档时至关重要。这可能是公司活动的宣传资料或内部会议的文件。能够打印是必需的，而了解如何设置打印队列则使这一能力得以实现。接下来，我们将通过
    Ansible 自动化设置打印队列。
- en: Setting up printer services via Ansible Automation
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 Ansible 自动化设置打印服务
- en: We are going to start this section off by creating a playbook for enabling print
    services using `cups`. We will then create playbooks to enable and disable the
    print queues and also to drain any queued print jobs that might be in line to
    print. This will allow us to control setting up printers over many devices via
    automation, which will shorten the time to completion considerably.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过创建一个用于启用 `cups` 打印服务的 playbook 开始本节内容。然后，我们将创建 playbook 来启用和禁用打印队列，并处理任何可能排队等待打印的任务。这将使我们能够通过自动化在多个设备上设置打印机，从而大大缩短完成时间。
- en: 'First, we will start with a playbook directory, inside of which we will have
    an inventory file with a list of the servers we want to set up services on. In
    our case, we are going to set up a print queue on `rhel1.example.com` and `rhel2.example.com`.
    This will allow us to showcase using Ansible Automation in more than just a single
    playbook. We are going to create a `cups_playbook` directory, inside of which
    we are going to first create the inventory file shown in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将从一个 playbook 目录开始，目录内将包含一个清单文件，列出我们希望在其上设置服务的服务器。在我们的例子中，我们将在 `rhel1.example.com`
    和 `rhel2.example.com` 上设置打印队列。这将使我们能够展示如何在多个 playbook 中使用 Ansible 自动化。我们将创建一个
    `cups_playbook` 目录，并在其中首先创建下图所示的清单文件：
- en: '![Figure 6.12 – Inventory file for playbook](img/Figure_6.12_B18607.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.12 – playbook 的清单文件](img/Figure_6.12_B18607.jpg)'
- en: Figure 6.12 – Inventory file for playbook
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12 – playbook 的清单文件
- en: 'Next, we are going to start the playbook as we always have by creating the
    top level of the playbook. The following shows the format that is required for
    the beginning of all playbooks when using Ansible Automation. The start of the
    playbook can be seen in the following code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将像往常一样开始 playbook，首先创建 playbook 的顶层结构。以下是使用 Ansible 自动化时，所有 playbook 开始时需要的格式。playbook
    的开始可以在以下代码中看到：
- en: '[PRE0]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, let’s move on to the tasks. These include installing `cups`, configuring
    firewall rules, and setting up the printer queue. For this, you will need to know
    the URL of the printer ahead of time, so you might need to gather that information
    from the server using the following code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们继续处理任务。这些任务包括安装 `cups`、配置防火墙规则以及设置打印队列。为此，你需要提前知道打印机的 URL，因此你可能需要通过以下代码从服务器上收集该信息：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In my case, I will be using the Brother printer that is at the bottom of the
    printer-finding command output in the preceding snippet.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的例子中，我将使用在前面代码片段的打印机查找命令输出底部显示的 Brother 打印机。
- en: 'With that information, we can write out the command that we learned earlier
    to set up the print queue. You can see the tasks for installing `cups`, firewall
    configuration, and print queue setup in the following code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些信息，我们可以编写出我们之前学到的命令来设置打印队列。你可以在以下代码中看到安装 `cups`、配置防火墙和设置打印队列的任务：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will run the playbook with the following command, including the `-v` flag
    for verbose output such as when the print queue is shown enabled:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下命令运行playbook，并包括`-v`标志以获得详细输出，比如显示打印队列已启用时：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output from this successful playbook run is truncated but you can see where
    the print queue was enabled in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 该playbook运行成功后的输出被截断，但你可以在以下截图中看到打印队列被启用的地方：
- en: '![Figure 6.13 – Successful playbook run for the cups create playbook](img/Figure_6.13_B18607.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图6.13 – cups创建playbook的成功运行](img/Figure_6.13_B18607.jpg)'
- en: Figure 6.13 – Successful playbook run for the cups create playbook
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.13 – cups创建playbook的成功运行
- en: 'Next, we are going to write a playbook to disable the print queue and then
    another to enable it. Here you can see the playbook code to disable the print
    queue:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将编写一个playbook来禁用打印队列，然后编写另一个playbook来启用它。这里你可以看到禁用打印队列的playbook代码：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output of this playbook run for disabling the print queue can be seen in
    the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 该playbook运行成功后禁用打印队列的输出可以在以下截图中看到：
- en: '![Figure 6.14 – Successful playbook run for the cups disable playbook](img/Figure_6.14_B18607.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图6.14 – cups禁用playbook的成功运行](img/Figure_6.14_B18607.jpg)'
- en: Figure 6.14 – Successful playbook run for the cups disable playbook
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.14 – cups禁用playbook的成功运行
- en: 'The playbook shown in the following code enables the print queue:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码中显示的playbook启用打印队列：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output for enabling the print queue can be seen in the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 启用打印队列的输出可以在以下截图中看到：
- en: '![Figure 6.15 – Successful playbook run for the cups enable playbook](img/Figure_6.15_B18607.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图6.15 – cups启用playbook的成功运行](img/Figure_6.15_B18607.jpg)'
- en: Figure 6.15 – Successful playbook run for the cups enable playbook
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.15 – cups启用playbook的成功运行
- en: In this section, we learned how to set up print queues through Ansible Automation.
    This can be extremely useful in an enterprise environment where you might be setting
    up many servers that need to print to the same printer. By setting up Ansible
    Automation playbooks to do the work for you, you free up your time for other more
    meaningful work.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何通过Ansible自动化设置打印队列。这在企业环境中非常有用，在这种环境中，你可能需要为许多需要打印到同一台打印机的服务器设置打印队列。通过设置Ansible自动化playbook来完成这项工作，你可以腾出时间来做其他更有意义的工作。
- en: Learning about email services and setting them up manually
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解电子邮件服务并手动设置
- en: Email services are an essential part of any infrastructure. The ability to send
    email reports or alerts to a dedicated email list is one of the reasons that email
    is so useful. Using the `postfix` package, you are able to set up full email relays
    or null clients that forward emails to other relays. This allows you to control
    how your email is routed in your network. In this section, we will see how to
    set up a null client for these purposes. We will install `postfix` to control
    email from the server, set up firewall rules, and finally set up the null client
    settings both manually and through Ansible Automation.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件服务是任何基础设施中不可或缺的一部分。能够将电子邮件报告或警报发送到专用邮件列表是电子邮件如此有用的原因之一。使用`postfix`包，你可以设置完整的邮件中继或空客户端，将邮件转发到其他中继。这使你能够控制邮件在网络中的路由方式。在本节中，我们将看到如何为这些目的设置空客户端。我们将安装`postfix`来控制来自服务器的电子邮件，设置防火墙规则，并最终手动和通过Ansible自动化设置空客户端。
- en: 'The first thing we have to do is install `postfix`. Running the command to
    install `postfix` can be seen in the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要做的是安装`postfix`。安装`postfix`的命令可以在以下截图中看到：
- en: '![Figure 6.16 – Install postfix](img/Figure_6.16_B18607.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图6.16 – 安装postfix](img/Figure_6.16_B18607.jpg)'
- en: Figure 6.16 – Install postfix
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.16 – 安装postfix
- en: 'We are then going to view the configuration file for `postfix`. This is not
    the best way to set up `postfix` as the `postconf` command is normally used to
    change the required settings. The configuration file can be seen truncated in
    the following screenshot and is located at `/etc/postfix/main.cf`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将查看`postfix`的配置文件。这并不是设置`postfix`的最佳方式，因为`postconf`命令通常用于更改所需的设置。配置文件可以在以下截图中看到，并位于`/etc/postfix/main.cf`：
- en: '![Figure 6.17 – Postfix main.cf truncated](img/Figure_6.17_B18607.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图6.17 – Postfix main.cf 截断](img/Figure_6.17_B18607.jpg)'
- en: Figure 6.17 – Postfix main.cf truncated
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.17 – Postfix main.cf 截断
- en: 'Using the `postconf` command, you can see the same configuration without the
    comments, as shown in the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`postconf`命令，你可以看到相同的配置，但没有注释，如以下截图所示：
- en: "![Figure 6.18 – Output from \uFEFFthe postconf command truncated](img/Figure_6.18_B18607.jpg)"
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图6.18 – 截断的postconf命令输出](img/Figure_6.18_B18607.jpg)'
- en: Figure 6.18 – Output from the postconf command truncated
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.18 – 截断的postconf命令输出
- en: 'Next, we are going to make the required changes to the system to set up what
    is needed for `postfix` to work as a null client, as shown in the following screenshot:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将对系统进行必要的更改，以设置`postfix`作为空客户端所需的内容，如下截图所示：
- en: '![Figure 6.19 – Using the postconf command to change configuration values](img/Figure_6.19_B18607.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图6.19 – 使用postconf命令更改配置值](img/Figure_6.19_B18607.jpg)'
- en: Figure 6.19 – Using the postconf command to change configuration values
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.19 – 使用postconf命令更改配置值
- en: This allows you to make changes to your `postfix` configuration based on the
    requirements set by Red Hat during your exam.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得你能够根据Red Hat在考试中设置的要求，对`postfix`配置进行更改。
- en: Let’s look at an example of what you may need to set for a null client setup.
    A null client is just a server that passes emails on to another server and does
    not accept any email itself.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个设置空客户端的示例。空客户端只是一个将电子邮件转发到另一个服务器的服务器，自己不接收任何电子邮件。
- en: 'The first setting to change is `inet_interfaces`, making it `loopback-only`,
    as shown in the following command:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个要更改的设置是`inet_interfaces`，将其设置为`loopback-only`，如以下命令所示：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then we are going to set the `myorigin` parameter to use the domain name, in
    our case, `example.com`, as seen in the following code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将设置`myorigin`参数，使用域名，在我们的例子中是`example.com`，如下代码所示：
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, we are going to set `inet_protocols` to `ipv4` purely for simplicity,
    as shown in the following code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将`inet_protocols`设置为`ipv4`，纯粹是为了简化，如下代码所示：
- en: '[PRE8]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The next setting we are going to change is the `mydestination` parameter, as
    `postfix` is allowed to deliver mail if this value is populated. To ensure that
    nothing is delivered to this server locally, we will remove all settings. We are
    going to change the `mydestination` setting to blank, per the following code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们要更改的是`mydestination`参数，因为如果该值被填充，`postfix`会允许投递邮件。为了确保没有任何邮件会在本地投递到此服务器，我们将删除所有设置。我们将把`mydestination`设置为空，如下代码所示：
- en: '[PRE9]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, let’s alter the `mynetworks` parameter in order to submit messages to
    the mail relay for any network hosts. We will set this to our loopback IP in order
    for it to take effect, as seen in the following code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们修改`mynetworks`参数，以便将消息提交到邮件中继供任何网络主机使用。我们将其设置为我们的回环IP地址，以便生效，如下代码所示：
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The next thing we are going to set is an error message for local delivery.
    This helps us confirm that local delivery is disabled. This is accomplished in
    the following code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们要设置的是本地投递的错误消息。这有助于我们确认本地投递已被禁用。通过以下代码实现：
- en: '[PRE11]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, we are going to point to an active mail relay that can deliver email
    locally and to the company’s mail servers. This is done with the following code:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将指向一个能够本地投递电子邮件并发送到公司邮件服务器的活动邮件中继。通过以下代码实现：
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We have now set up the `postfix` mail service. Now, let’s open the firewall,
    start the service, and enable it. These commands can be seen in the following
    screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经设置好了`postfix`邮件服务。接下来，让我们打开防火墙，启动服务并启用它。以下截图展示了这些命令：
- en: '![Figure 6.20 – Enable and start the service, add firewall rules, and reload
    the firewall](img/Figure_6.20_B18607.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图6.20 – 启用并启动服务，添加防火墙规则，重新加载防火墙](img/Figure_6.20_B18607.jpg)'
- en: Figure 6.20 – Enable and start the service, add firewall rules, and reload the
    firewall
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.20 – 启用并启动服务，添加防火墙规则，重新加载防火墙
- en: 'If you start and enable the `postfix` service before configuring, you need
    to make sure to reload the service again to ensure that the changes have been
    accepted and check the status, as shown in the following screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在配置之前启动并启用`postfix`服务，你需要确保重新加载服务，以确保更改已被接受，并检查状态，如下截图所示：
- en: '![Figure 6.21 – Check the status of postfix](img/Figure_6.21_B18607.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图6.21 – 检查postfix状态](img/Figure_6.21_B18607.jpg)'
- en: Figure 6.21 – Check the status of postfix
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.21 – 检查postfix状态
- en: In this section, we learned how to set up a null client email server. This is
    useful for setting up email notifications to be sent from a server to send reports
    or alerts. We learned how to manipulate `postfix` with the `postconf` command
    and which variables need to be changed to create a null client.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何设置空客户端邮件服务器。这对于从服务器发送电子邮件通知、报告或警报非常有用。我们学习了如何使用 `postconf` 命令操作
    `postfix`，以及需要更改哪些变量来创建一个空客户端。
- en: Setting up email services via Ansible Automation
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 Ansible 自动化设置邮件服务
- en: 'We are going to set up `postfix` with Ansible Automation using a set of variables
    and a loop. This will allow us to create the same setup that we got when doing
    things manually, but done here in an iterative manner using a loop. First, we
    will set up our playbook directory and then our inventory file. The inventory
    file can be seen in the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Ansible 自动化与一组变量和循环一起设置 `postfix`。这将允许我们创建与手动操作相同的设置，但在这里通过使用循环以迭代方式完成。首先，我们将设置我们的
    playbook 目录，然后是我们的清单文件。清单文件如下截图所示：
- en: '![Figure 6.22 – Inventory for email playbook](img/Figure_6.22_B18607.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.22 – 邮件 playbook 的清单](img/Figure_6.22_B18607.jpg)'
- en: Figure 6.22 – Inventory for email playbook
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.22 – 邮件 playbook 的清单
- en: 'We are going to start our playbook with the normal starting format, as seen
    in the following code:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从正常的起始格式开始我们的 playbook，代码如下所示：
- en: '[PRE13]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After we have set up the beginning of the playbook, let’s create the tasks
    required to get the playbook to successfully configure a null client. We will
    use a loop and loop over the variables we provide to the playbook. We can see
    the playbook in the following code:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们设置好 playbook 的开头部分后，接下来创建使 playbook 成功配置空客户端所需的任务。我们将使用循环，并对提供给 playbook
    的变量进行循环。我们可以在以下代码中看到这个 playbook：
- en: '[PRE14]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'With that done, let’s run the playbook with the following command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，使用以下命令运行 playbook：
- en: '[PRE15]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The truncated output of this playbook when successfully run can be seen in
    the following screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 成功运行 playbook 后的截断输出可以在以下截图中看到：
- en: '![Figure 6.23 – Successful email setup playbook run](img/Figure_6.23_B18607.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.23 – 成功的邮件设置 playbook 执行](img/Figure_6.23_B18607.jpg)'
- en: Figure 6.23 – Successful email setup playbook run
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.23 – 成功的邮件设置 playbook 执行
- en: 'Finally, let’s check and confirm our configuration of `mynetworks` to ensure
    that it is only using `127.0.0.0/8`, as shown in the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们检查并确认 `mynetworks` 的配置，以确保它仅使用 `127.0.0.0/8`，如以下截图所示：
- en: '![Figure 6.24 – Confirming the settings changed in the postfix configuration](img/Figure_6.24_B18607.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.24 – 确认在 postfix 配置中更改的设置](img/Figure_6.24_B18607.jpg)'
- en: Figure 6.24 – Confirming the settings changed in the postfix configuration
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.24 – 确认在 postfix 配置中更改的设置
- en: In this section, we learned how to set up a `postfix` null client using Ansible
    Automation. This is a great way to set up your mail servers easily using predetermined
    values that can span multiple hosts. This allows you to quickly set up these servers
    without having to install and then type in the configuration commands on each
    and every server.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何使用 Ansible 自动化设置 `postfix` 空客户端。这是一种通过预设值轻松设置邮件服务器的好方法，这些值可以跨多个主机使用。这样，你可以快速设置这些服务器，而无需在每台服务器上单独安装并输入配置命令。
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小结
- en: In this chapter, we went over how to print from a server and how to set up email
    hosts to correctly forward emails to a relay using a null server. This allows
    you to set up subordinate systems to other masters. With this knowledge, you can
    successfully print from your servers or Linux clients along with sending and receiving
    mail transmissions. In the next chapter, we are going to work with MariaDB and
    the MySQL commands that are available for it. A database is a powerful tool that
    allows you to create backends for web servers and for programs that need a database
    to run. This will allow you to control your data points with ease. We will do
    this both manually and via Ansible Automation to make your life easier when setting
    up multiple databases throughout the course of your career.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了如何从服务器打印以及如何设置邮件主机以正确地将邮件转发到使用空服务器的中继。这样，你可以将从属系统设置为其他主服务器。通过这些知识，你可以成功地从你的服务器或
    Linux 客户端打印，同时发送和接收邮件传输。在下一章中，我们将学习 MariaDB 和可用的 MySQL 命令。数据库是一个强大的工具，可以为 Web
    服务器和需要数据库支持的程序创建后台。这将使你能够轻松控制数据点。我们将通过手动操作和 Ansible 自动化来完成此任务，让你在整个职业生涯中设置多个数据库时更加轻松。
