- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Virtualization and Containers
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟化与容器
- en: Going back to the 1990s, most companies had physical servers and IT stacks from
    a single vendor that did not allow *legacy applications* to run on another vendor’s
    hardware. This led to large, multi-service server environments that were very
    complex to manage.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 回到 1990 年代，大多数公司使用来自单一供应商的物理服务器和 IT 堆栈，这些堆栈无法在其他供应商的硬件上运行*传统应用程序*。这导致了庞大的多服务服务器环境，非常复杂且难以管理。
- en: As companies upgraded their IT environments with less expensive servers, operating
    systems, and applications from a variety of vendors, they began to underutilize
    physical hardware. Each server could only run one specific task from one vendor.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 随着公司通过更便宜的服务器、操作系统和来自多个供应商的应用程序升级其 IT 环境，他们开始低效使用物理硬件。每台服务器只能运行一个特定任务且仅来自一个供应商。
- en: '**Virtualization** was the natural solution to two problems: companies could
    partition their servers and run legacy applications on multiple types and versions
    of operating systems and servers began to be used more efficiently, reducing the
    costs associated with purchasing, installation, cooling, and maintenance.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**虚拟化**是解决两个问题的自然方案：公司可以将服务器分区并在多种类型和版本的操作系统上运行传统应用程序，同时服务器的使用效率得到提高，从而减少了与购买、安装、冷却和维护相关的成本。'
- en: The next step was the containerization of these services. **Containerization**
    is a form of virtualization. The goal of virtualization is to run multiple instances
    of the operating system on a single server, while containerization runs a single
    instance of the operating system, with multiple user spaces to isolate the processes
    from each other and provide the service.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的步骤是对这些服务进行容器化。**容器化**是一种虚拟化形式。虚拟化的目标是在单台服务器上运行多个操作系统实例，而容器化则运行一个操作系统实例，并通过多个用户空间将进程相互隔离，以提供服务。
- en: 'In this chapter, we will take a brief tour of *virtualization* and *containerization*
    by covering the following main topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将简要介绍*虚拟化*和*容器化*，并涵盖以下主要内容：
- en: Virtualization with QEMU, KVM, and **libvirt**
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 QEMU、KVM 和 **libvirt** 进行虚拟化
- en: Using GNOME Boxes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GNOME Boxes
- en: Discovering OCI containers with Podman
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Podman 发现 OCI 容器
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete the topics mentioned in this chapter, you must install the packages
    indicated in each section. In each section, you will find instructions for the
    different types of installation for each package as required.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本章提到的主题，您必须安装每个部分中指示的包。在每个部分中，您将找到每个包所需的不同安装方式的说明。
- en: Virtualization with QEMU, KVM, and libvirt
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 QEMU、KVM 和 libvirt 进行虚拟化
- en: Fedora Linux comes with native support for virtualization extensions. This support
    is provided by **Kernel-based Virtual Machine** (**KVM**) and is available as
    a *kernel module*. **QEMU/KVM** in combination with the **Libvirt management toolkit**
    is the standard virtualization method in Fedora Linux.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Fedora Linux 原生支持虚拟化扩展。该支持由**基于内核的虚拟机**（**KVM**）提供，并作为*内核模块*可用。**QEMU/KVM**与**Libvirt
    管理工具包**结合是 Fedora Linux 中的标准虚拟化方法。
- en: '**Quick Emulator** (**QEMU**) is a full system emulator that works together
    with KVM and allows you to create virtual machines with hardware and peripherals.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**快速仿真器**（**QEMU**）是一个完整的系统仿真器，它与 KVM 一起工作，允许您创建具有硬件和外设的虚拟机。'
- en: Finally, `libvirt` is the API layer and allows you to manage the infrastructure
    – that is, create and run virtual machines. It includes a local virtual network
    that enables secure communication between virtual guest systems with each other
    and with the host. libvirt’s default configuration also allows *NAT access* to
    the public network, which is useful for virtual machines or containers that don’t
    have direct access to the public interface.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`libvirt` 是 API 层，它允许您管理基础架构——也就是创建并运行虚拟机。它包括一个本地虚拟网络，支持虚拟客户系统之间以及与主机之间的安全通信。libvirt
    的默认配置还允许对公共网络进行*NAT 访问*，这对于没有直接访问公共接口的虚拟机或容器非常有用。
- en: 'The following figure illustrates the QEMU/KVM architecture with `libvirt`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了带有 `libvirt` 的 QEMU/KVM 架构：
- en: '![Figure 13.1 – The QEMU/KVM architecture](img/B19121_13_1.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.1 – QEMU/KVM 架构](img/B19121_13_1.jpg)'
- en: Figure 13.1 – The QEMU/KVM architecture
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.1 – QEMU/KVM 架构
- en: Let’s take a brief look at the management tools.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要了解一下管理工具。
- en: Management tools
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理工具
- en: '`libvirt` is a C toolkit that interacts with the virtualization capabilities
    of Fedora Linux. The main package includes the `libvirtd` server for exporting
    virtualization support.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`libvirt` 是一个与 Fedora Linux 虚拟化功能交互的 C 工具包。主包包括 `libvirtd` 服务器，用于导出虚拟化支持。'
- en: 'The basic management tools are as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 基本管理工具如下：
- en: '**virsh**: This is the main interface for managing **virsh** guest domains.
    The program can *create*, *pause*, and *shutdown* domains. It also *lists* the
    current domains and their status.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**virsh**：这是管理 **virsh** 来宾域的主要接口。该程序可以*创建*、*暂停* 和 *关闭* 域。它还可以*列出*当前的域及其状态。'
- en: '**Virt-manager**: This is a desktop tool for managing virtual machines. It
    provides *life cycle control* of current virtual machines (startup/shutdown, pause/resume,
    and suspend/restore), provisions new virtual machines and various types of storage,
    manages virtual networks, gives access to the graphical console of virtual machines,
    and generates performance statistics locally or remotely:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Virt-manager**：这是一个用于管理虚拟机的桌面工具。它提供当前虚拟机的*生命周期控制*（启动/关机、暂停/恢复、挂起/恢复）、配置新的虚拟机和各种类型的存储、管理虚拟网络、访问虚拟机的图形控制台，并生成本地或远程的性能统计数据：'
- en: '![Figure 13.2 – Virtual Machine Manager](img/B19121_13_2.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.2 – 虚拟机管理器](img/B19121_13_2.jpg)'
- en: Figure 13.2 – Virtual Machine Manager
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.2 – 虚拟机管理器
- en: '**virt-viewer**: This is a minimal tool for displaying the graphical console
    of a virtual machine. It accesses the console using the **VNC** or **SPICE** protocol.
    Refer to the virtual guest based on its *name*, *ID*, or *UUID*. If the guest
    is not running yet, the viewer could wait until it starts before attempting to
    connect to the console. The viewer could connect to remote hosts to look up console
    information, as well as connect to the remote console using the same network transport.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**virt-viewer**：这是一个用于显示虚拟机图形控制台的简洁工具。它通过**VNC** 或 **SPICE** 协议访问控制台。可以根据虚拟机的*名称*、*ID*
    或 *UUID* 进行访问。如果虚拟机尚未运行，查看器会等待它启动后再尝试连接控制台。查看器可以连接到远程主机以查找控制台信息，并通过相同的网络传输连接到远程控制台。'
- en: '`virt-install` obtains the minimum files necessary to start the installation
    process, allowing the guest to get the rest of the operating system distribution
    as needed. PXE booting and importing an existing disk image (thus skipping the
    installation phase) are also supported.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`virt-install` 获取启动安装过程所需的最小文件，允许来宾根据需要获取其余的操作系统分发版。也支持PXE引导和导入现有磁盘镜像（从而跳过安装阶段）。'
- en: With the proper command-line arguments, `virt-install` can run completely unattended,
    with the guest “booting” itself. This allows for easy automation of the guest
    installation.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过适当的命令行参数，`virt-install` 可以完全无人值守地运行，来宾系统“自我启动”。这使得来宾安装过程的自动化变得简单。
- en: Using `virt-install` capabilities enables you to streamline the process of creating
    virtual machines, minimizing the installation time. Let’s learn how to perform
    this procedure.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `virt-install` 的功能可以简化虚拟机创建过程，最小化安装时间。让我们来学习如何执行这个过程。
- en: Streamlining the creation of virtual machines
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简化虚拟机创建过程
- en: 'QEMU uses the `qcow` file format for disk image files. It stands for *QEMU
    Copy On Write*. The `qcow` format uses a disk storage optimization strategy that
    delays the allocation of storage until it is needed. Files within the `qcow` format
    could contain a variety of disk images that are generally associated with specific
    guest operating systems. There are three versions of the format: `qcow`, `qcow2`,
    and `qcow3`.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: QEMU 使用 `qcow` 文件格式存储磁盘镜像文件。它代表 *QEMU Copy On Write*。`qcow` 格式采用一种延迟分配存储的磁盘存储优化策略，直到需要时才分配存储。`qcow`
    格式内的文件可以包含多种与特定来宾操作系统相关的磁盘镜像。该格式有三个版本：`qcow`、`qcow2` 和 `qcow3`。
- en: At the time of writing, the vast majority of distributions, including Fedora
    Linux, offer a *cloud-ready* downloadable version. One of the available options
    is the `qcow2` image disk format.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 截至撰写时，绝大多数发行版，包括 Fedora Linux，都提供*云端准备*的可下载版本。其中一个可选项是 `qcow2` 镜像磁盘格式。
- en: '**OpenStack**, an *open standard cloud computing platform*, provides a web
    page that references cloud images for many distributions and operating systems
    (which you’ll find in the next example).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**OpenStack**，一个*开放标准的云计算平台*，提供了一个网页，引用了许多发行版和操作系统的云镜像（您将在下一个示例中看到）。'
- en: Using the `virt-customize` command-line tool, you can modify the downloadable
    disk image to import it as a *ready-to-use* virtual machine.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`virt-customize`命令行工具，你可以修改下载的磁盘镜像，将其导入为*即用型*虚拟机。
- en: 'Follow these steps to create a virtual machine in a short time with these three
    tools:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤，使用这三种工具快速创建虚拟机：
- en: Before starting, verify that your workstation runs virtualization-enabled from
    the **BIOS**/**UEFI**.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始之前，请验证你的工作站是否在**BIOS**/**UEFI**中启用了虚拟化功能。
- en: Note
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This process depends on the manufacturer of your workstation. Please refer to
    the manufacturer’s documentation to confirm that they have virtualization capability
    enabled in the BIOS/UEFI.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程依赖于工作站制造商，请参考制造商文档确认他们是否在BIOS/UEFI中启用了虚拟化能力。
- en: 'Confirm that the processor of your workstation has the flags that support virtualization:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认你的工作站的处理器是否支持虚拟化的标志：
- en: '[PRE0]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Use the **sudo** command to install the packages required for virtualization:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**sudo**命令安装虚拟化所需的软件包：
- en: '**qemu-kvm**'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**qemu-kvm**'
- en: '**virt-manager**'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**virt-manager**'
- en: '**virt-viewer**'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**virt-viewer**'
- en: '**guestfs-tools**'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**guestfs-tools**'
- en: '**virt-install**'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**virt-install**'
- en: '**genisoimage**:'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**genisoimage**：'
- en: '[PRE1]'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Use your browser to navigate to [https://docs.openstack.org/image-guide/obtain-images.html](https://docs.openstack.org/image-guide/obtain-images.html)
    and download the **qcow2** disk image of the chosen distribution/operating system:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用浏览器访问[https://docs.openstack.org/image-guide/obtain-images.html](https://docs.openstack.org/image-guide/obtain-images.html)并下载所选发行版/操作系统的**qcow2**磁盘镜像：
- en: '![Figure 13.3 – OpenStack – Get images](img/B19121_13_3.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.3 – OpenStack – 获取镜像](img/B19121_13_3.jpg)'
- en: Figure 13.3 – OpenStack – Get images
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.3 – OpenStack – 获取镜像
- en: 'For this example, download the Fedora Linux image. Use your browser to navigate
    to [https://fedoraproject.org/cloud/download/](https://fedoraproject.org/cloud/download/):'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于此示例，请下载 Fedora Linux 镜像。使用浏览器访问[https://fedoraproject.org/cloud/download/](https://fedoraproject.org/cloud/download/)：
- en: '![Figure 13.4 – The Fedora Cloud download page](img/B19121_13_4.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.4 – Fedora Cloud 下载页面](img/B19121_13_4.jpg)'
- en: Figure 13.4 – The Fedora Cloud download page
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.4 – Fedora Cloud 下载页面
- en: Download the `qcow2` image for `x86_64` architectures.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 下载适用于`x86_64`架构的`qcow2`镜像。
- en: Note
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Each image requires about 400 MB of disk space. Ensure that you have enough
    storage space to store them and let them grow as they get used.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 每个镜像大约需要400 MB的磁盘空间。确保你有足够的存储空间来存放它们，并且在使用过程中它们会不断增长。
- en: 'Move the downloaded **qcow2** image to the **KVM** working directory in **/var/lib/libvirt/images**:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的**qcow2**镜像移动到**KVM**工作目录**/var/lib/libvirt/images**中：
- en: '[PRE2]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'A best practice is to copy the **qcow2** image with the virtual machine name
    instead of moving it. Reuse the original downloaded image to create many virtual
    machines:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践是复制**qcow2**镜像并使用虚拟机名称，而不是移动它。可以重复使用原始下载的镜像来创建多个虚拟机：
- en: '**$ sudo cp** **Fedora-Cloud-Base-38-1.6.x86_64.qcow2 /var/lib/****libvirt/images/vmtest01.qcow2**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ sudo cp** **Fedora-Cloud-Base-38-1.6.x86_64.qcow2 /var/lib/****libvirt/images/vmtest01.qcow2**'
- en: 'Use the **virt-customize** command to modify the downloaded image:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**virt-customize**命令来修改下载的镜像：
- en: '[PRE3]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: $ ssh-keygen -t ecdsa -b 521 -f labkey
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ ssh-keygen -t ecdsa -b 521 -f labkey
- en: '[PRE4]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on the **ssh-keygen** command, refer to the command manual:
    **man ssh-keygen**.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 有关**ssh-keygen**命令的更多信息，请参考命令手册：**man ssh-keygen**。
- en: '**--uninstall** allows us to uninstall the software contained by default in
    the downloaded image.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**--uninstall**选项允许我们卸载下载镜像中默认包含的软件。'
- en: '**cloud-init** is a suite that helps initialize an image for use in OpenStack.
    In this case, it is not necessary since a basic functional level of customization
    works best here.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**cloud-init**是一个帮助初始化镜像以供OpenStack使用的工具集。在这种情况下，由于基本的功能性定制已能最佳工作，因此不需要使用它。'
- en: Note
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If the **cloud-init** package is not uninstalled, the VM will take a long time
    to boot as it waits for the parameters for initialization with **cloud-init scripts**.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果**cloud-init**软件包没有被卸载，虚拟机启动时将会等待**cloud-init脚本**的初始化参数，从而导致启动时间较长。
- en: 'Since it is a Fedora Linux image, the SELinux contexts must *relabel* with
    the **--selinux-relabel** option as several files must be changed or removed:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于这是一个 Fedora Linux 镜像，必须使用**--selinux-relabel**选项对 SELinux 上下文进行*重新标签*，因为需要更改或删除多个文件：
- en: '![Figure 13.5 – Customizing the qcow2 image](img/B19121_13_5.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.5 – 自定义 qcow2 镜像](img/B19121_13_5.jpg)'
- en: Figure 13.5 – Customizing the qcow2 image
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.5 – 自定义 qcow2 镜像
- en: Now that we’ve finished customizing, let’s import the disk image as a new virtual
    machine.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了定制，让我们将磁盘镜像导入为新的虚拟机。
- en: 'To import the disk image as a new virtual machine, use the **virt-install**
    command:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将磁盘映像导入为新的虚拟机，请使用 **virt-install** 命令：
- en: '[PRE5]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let’s look at each of the options we used in detail:'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们详细看看我们使用的每个选项：
- en: '**virt-install** is the command-line tool for creating new VMs.'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**virt-install** 是一个用于创建新虚拟机的命令行工具。'
- en: '**--name** sets the name of the new guest VM instance. The name must remain
    *unique* among all guests known to the hypervisor on the connection, including
    those not currently active.'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**--name** 设置新虚拟机实例的名称。名称必须在连接中超管所知道的所有虚拟机中保持*唯一*，包括那些当前不活跃的虚拟机。'
- en: '**--memory** indicates the memory to allocate for the guest in MiB.'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**--memory** 指定分配给虚拟机的内存（以 MiB 为单位）。'
- en: '**--vcpus** indicates the number of **vcpus** to configure for the guest.'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**--vcpus** 指定为虚拟机配置的 **vcpus** 数量。'
- en: '**–disk** specifies the device to use as storage for the guest. In this case,
    this is the path to the disk image.'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**–disk** 指定用作虚拟机存储的设备。在此情况下，这是磁盘映像的路径。'
- en: '**--import** indicates that the disk image gets imported as a new VM building
    a guest around this disk image.'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**--import** 表示将磁盘映像导入为新虚拟机，围绕此磁盘映像构建一个虚拟机。'
- en: '**--osinfo** optimizes the guest configuration for a specific operating system
    version or distribution. In this case, **fedora38** is indicated.'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**--osinfo** 优化虚拟机配置，以适配特定的操作系统版本或发行版。在此案例中，指定的是 **fedora38**。'
- en: Note
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To find the list of supported operating system name values, use the **virt-install**
    command – that is, **virt-install --****osinfo list**.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找支持的操作系统名称值列表，请使用 **virt-install** 命令——即 **virt-install --****osinfo list**。
- en: '**--noautoconsole** specifies not to try to connect to the guest console automatically:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**--noautoconsole** 指定不自动连接到虚拟机控制台：'
- en: '![Figure 13.6 – Creating a new virtual machine](img/B19121_13_6.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.6 – 创建新虚拟机](img/B19121_13_6.jpg)'
- en: Figure 13.6 – Creating a new virtual machine
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.6 – 创建新虚拟机
- en: 'Verify the status of the created virtual machine:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证已创建虚拟机的状态：
- en: '[PRE6]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here’s the output:'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![Figure 13.7 – Verifying the new virtual machine’s status](img/B19121_13_7.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.7 – 验证新虚拟机的状态](img/B19121_13_7.jpg)'
- en: Figure 13.7 – Verifying the new virtual machine’s status
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.7 – 验证新虚拟机的状态
- en: Now, let’s connect to the virtual machine via SSH.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过 SSH 连接到虚拟机。
- en: 'Use the **virsh** command to find the IP address that was assigned by the virtualization
    **DHCP** service:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **virsh** 命令查找由虚拟化 **DHCP** 服务分配的 IP 地址：
- en: '[PRE7]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here’s the output:'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![Figure 13.8 – Finding the VM’s IP address](img/B19121_13_8.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.8 – 查找虚拟机的 IP 地址](img/B19121_13_8.jpg)'
- en: Figure 13.8 – Finding the VM’s IP address
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.8 – 查找虚拟机的 IP 地址
- en: 'Use the **ssh** command and the SSH key to access the virtual machine:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **ssh** 命令和 SSH 密钥访问虚拟机：
- en: '[PRE8]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You will get the following output:'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '![Figure 13.9 – Accessing the VM](img/B19121_13_9.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.9 – 访问虚拟机](img/B19121_13_9.jpg)'
- en: Figure 13.9 – Accessing the VM
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.9 – 访问虚拟机
- en: With that, you can get a working virtual machine up and running in a short time.
    Mastering these commands speeds up this task.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些步骤，你可以在短时间内启动一个正常工作的虚拟机。掌握这些命令可以加速这个过程。
- en: Before moving on to containerization, which is virtualization in miniature form,
    let’s look at the tool that GNOME includes as part of its desktop suite.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入容器化（微型虚拟化形式）之前，让我们看看 GNOME 在其桌面套件中包含的工具。
- en: Using GNOME Boxes
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GNOME Boxes
- en: '**GNOME Boxes** is an application of the GNOME desktop environment that’s used
    to access remote or virtual systems. Boxes uses the QEMU, KVM, and Libvirt virtualization
    technologies.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**GNOME Boxes** 是 GNOME 桌面环境中的一个应用程序，用于访问远程或虚拟系统。Boxes 使用 QEMU、KVM 和 Libvirt
    虚拟化技术。'
- en: Besides the virtualization extensions seen in the previous section, Boxes requires
    at least *20 GB of storage space* and *500 MB of RAM* to allocate to virtual machines.
    GNOME recommends at least 8 GB of RAM and 20 GB of storage on the workstation
    to run Boxes efficiently. Boxes assigns resources to virtual machines *automatically*
    and *dynamically* based on the vendor’s recommendations.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面章节中提到的虚拟化扩展外，Boxes 至少需要 *20 GB 存储空间* 和 *500 MB RAM* 分配给虚拟机。GNOME 建议工作站至少配备
    8 GB 的 RAM 和 20 GB 存储空间，以高效运行 Boxes。Boxes 会根据厂商建议*自动*和*动态*分配资源给虚拟机。
- en: 'Let’s review the process of creating a virtual machine with **Boxes**:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下使用 **Boxes** 创建虚拟机的过程：
- en: 'To access Boxes, open *Activities Overview* and type **Boxes**:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要访问 Boxes，请打开 *活动概览* 并输入 **Boxes**：
- en: '![Figure 13.10 – GNOME Boxes via Activities Overview](img/B19121_13_10.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.10 – 通过活动概览访问 GNOME Boxes](img/B19121_13_10.jpg)'
- en: Figure 13.10 – GNOME Boxes via Activities Overview
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.10 – 通过活动概览访问 GNOME Boxes
- en: 'The main Boxes window will appear. To create a new virtual machine, click on
    the *plus* (**+**) button in the top-left corner:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主 Boxes 窗口将出现。要创建新虚拟机，点击左上角的*加号*（**+**）按钮：
- en: '![Figure 13.11 – GNOME Boxes main window](img/B19121_13_11.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.11 – GNOME Boxes 主窗口](img/B19121_13_11.jpg)'
- en: Figure 13.11 – GNOME Boxes main window
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.11 – GNOME Boxes 主窗口
- en: 'Boxes offers two options for creating a new virtual machine:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Boxes 提供两种创建新虚拟机的选项：
- en: '![Figure 13.12 – Creating a new virtual machine with Boxes](img/B19121_13_12.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.12 – 使用 Boxes 创建新的虚拟机](img/B19121_13_12.jpg)'
- en: Figure 13.12 – Creating a new virtual machine with Boxes
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.12 – 使用 Boxes 创建新的虚拟机
- en: 'They are as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 它们如下所示：
- en: '**Install from File**: When using this option, you must state the location
    of the **ISO** image of the operating system to install in the new virtual machine'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从文件安装**：使用此选项时，必须指定新虚拟机中要安装的操作系统的**ISO**镜像位置。'
- en: '**Download OS**: This option selects an operating system version or distribution
    and downloads the corresponding image for installation in the new virtual machine:'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**下载操作系统**：此选项选择操作系统版本或发行版，并下载相应的镜像以安装到新虚拟机中：'
- en: '![Figure 13.13 – Selecting an operating system image](img/B19121_13_13.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.13 – 选择操作系统镜像](img/B19121_13_13.jpg)'
- en: Figure 13.13 – Selecting an operating system image
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.13 – 选择操作系统镜像
- en: For this example, let’s download the ISO image by ourselves.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，我们自己下载 ISO 镜像。
- en: 'Use your browser to navigate to [https://fedoraproject.org/workstation/download/](https://fedoraproject.org/workstation/download/):'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用浏览器访问 [https://fedoraproject.org/workstation/download/](https://fedoraproject.org/workstation/download/)：
- en: '![Figure 13.14 – Fedora Workstation download page](img/B19121_13_14.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.14 – Fedora Workstation 下载页面](img/B19121_13_14.jpg)'
- en: Figure 13.14 – Fedora Workstation download page
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.14 – Fedora Workstation 下载页面
- en: Download the `x86_64` architectures.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 下载 `x86_64` 架构。
- en: 'In **Boxes**, click on the *plus* sign (**+**) and select the **Install from
    File** option. Navigate to the location of the downloaded **ISO** image and click
    the **Open** button:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Boxes**中，点击*加号*（**+**）并选择**从文件安装**选项。导航到下载的**ISO**镜像所在位置并点击**打开**按钮：
- en: '![Figure 13.15 – Creating a new virtual machine](img/B19121_13_15.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.15 – 创建新的虚拟机](img/B19121_13_15.jpg)'
- en: Figure 13.15 – Creating a new virtual machine
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.15 – 创建新的虚拟机
- en: Boxes will display the virtual machine creation options. Use the default options
    and click the **Create** button.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Boxes 将显示虚拟机创建选项。使用默认选项并点击**创建**按钮。
- en: 'The installation of the downloaded image – in this case, Fedora Workstation
    – starts on a bare-metal machine:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载的镜像（在本例中为 Fedora Workstation）的安装将在裸机上开始：
- en: '![Figure 13.16 – Fedora Workstation live image](img/B19121_13_16.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.16 – Fedora Workstation 实时镜像](img/B19121_13_16.jpg)'
- en: Figure 13.16 – Fedora Workstation live image
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.16 – Fedora Workstation 实时镜像
- en: 'In the Fedora Workstation installation window, click the **Install Fedora**
    button and continue installing the operating system:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Fedora Workstation 安装窗口中，点击**安装 Fedora**按钮并继续安装操作系统：
- en: '![Figure 13.17 – Fedora Linux installation window](img/B19121_13_17.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.17 – Fedora Linux 安装窗口](img/B19121_13_17.jpg)'
- en: Figure 13.17 – Fedora Linux installation window
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.17 – Fedora Linux 安装窗口
- en: 'Once the installation has finished, click on the **Finish installation** button
    and restart the virtual machine:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，点击**完成安装**按钮并重启虚拟机：
- en: '![Figure 13.18 – Finishing virtual machine installation](img/B19121_13_18.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.18 – 完成虚拟机安装](img/B19121_13_18.jpg)'
- en: Figure 13.18 – Finishing virtual machine installation
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.18 – 完成虚拟机安装
- en: 'Upon restarting the virtual machine, it will appear in the main **Boxes** window:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在重启虚拟机后，它将出现在主**Boxes**窗口中：
- en: '![Figure 13.19 – The Boxes main window](img/B19121_13_19.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.19 – Boxes 主窗口](img/B19121_13_19.jpg)'
- en: Figure 13.19 – The Boxes main window
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.19 – Boxes 主窗口
- en: 'Click on the virtual machine icon to access it:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击虚拟机图标以访问它：
- en: '![Figure 13.20 – Accessing the virtual machine](img/B19121_13_191.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.20 – 访问虚拟机](img/B19121_13_191.jpg)'
- en: Figure 13.20 – Accessing the virtual machine
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.20 – 访问虚拟机
- en: 'The virtual machine window takes up the space of the main **Boxes** window
    and allows us to use it graphically, as a remote session:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机窗口占据了主**Boxes**窗口的空间，并允许我们以图形方式使用它，就像远程会话一样：
- en: '![Figure 13.21 – Fedora Workstation virtual machine](img/B19121_13_20.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.21 – Fedora 工作站虚拟机](img/B19121_13_20.jpg)'
- en: Figure 13.21 – Fedora Workstation virtual machine
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.21 – Fedora 工作站虚拟机
- en: Now, use the virtual machine for the tasks assigned to it.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用虚拟机来执行分配给它的任务。
- en: 'If the virtual machine gets turned off, it will appear in the main window,
    as shown in the following figure:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果虚拟机关闭，它会出现在主窗口中，如下图所示：
- en: '![Figure 13.22 – The virtual machine turned off in Boxes](img/B19121_13_21.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.22 – 盒子中的虚拟机关闭](img/B19121_13_21.jpg)'
- en: Figure 13.22 – The virtual machine turned off in Boxes
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.22 – 盒子中的虚拟机关闭
- en: 'Right-click on the virtual machine icon to access the administration options:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击虚拟机图标以访问管理选项：
- en: '![Figure 13.23 – Virtual machine management options](img/B19121_13_22.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.23 – 虚拟机管理选项](img/B19121_13_22.jpg)'
- en: Figure 13.23 – Virtual machine management options
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.23 – 虚拟机管理选项
- en: To turn on the virtual machine, double-click its icon.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动虚拟机，双击其图标。
- en: GNOME Boxes is a simple application for accessing and managing virtual machines.
    It does not provide *granular management* and *automation facilities* of `virsh`,
    but it is a good tool to become familiar with the use of virtual machines.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: GNOME Boxes 是一个简单的应用程序，用于访问和管理虚拟机。它不提供 `virsh` 的 *精细管理* 和 *自动化功能*，但它是一个很好的工具，可以帮助熟悉虚拟机的使用。
- en: A more granular method, with less creation time and better optimization of host
    resources, is to use containers.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 一种更精细的方法，创建时间更短，且主机资源优化更好，就是使用容器。
- en: Now, let’s learn how Fedora Linux implements the use of open containers.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们学习 Fedora Linux 如何实现开放容器的使用。
- en: Discovering OCI containers with Podman
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Podman 发现 OCI 容器
- en: A Linux container, roughly speaking, works like the virtualization process,
    where we import a *pre-built image* of an operating system and create a virtual
    machine from it. In the case of containers, the image only packages the *programs
    and their minimal dependencies* needed for the operation of an application.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 粗略来说，Linux 容器的工作原理类似于虚拟化过程，我们导入操作系统的 *预构建镜像* 并从中创建虚拟机。在容器的情况下，镜像仅打包了应用程序操作所需的
    *程序及其最小依赖项*。
- en: A container is a set of one or more processes that stand isolated from the rest
    of the system.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是一组与系统其他部分隔离的一个或多个进程。
- en: 'The kernel provides the following main components:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 内核提供以下主要组件：
- en: '**namespaces** to ensure process isolation'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **namespaces** 来确保进程隔离。
- en: '**cgroups** to control system resources'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **cgroups** 来控制系统资源。
- en: '**SELinux** to ensure separation between the host and container, as well as
    between containers'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **SELinux** 确保主机与容器之间，以及容器与容器之间的隔离。
- en: The administration interface interacts with the kernel components and provides
    tools for *building and managing* containers. All the files needed to run a container
    come from an image.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 管理接口与内核组件交互，并提供用于 *构建和管理* 容器的工具。运行容器所需的所有文件来自于镜像。
- en: Container images live in an external repository called a **registry**. To create
    a container, download the registry image and generate a runnable copy of the application
    on the host. These processes require a runtime and the image needs to be in a
    specific format to run.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 容器镜像存储在一个名为 **registry** 的外部仓库中。要创建容器，需要下载注册表镜像并生成一个可在主机上运行的应用程序副本。这些过程需要运行时，并且镜像需要是特定格式才能运行。
- en: The Linux Foundation sponsors the **Open Container Initiative** (**OCI**) project
    with the purpose of creating open industry standards around container formats
    and runtimes.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 基金会赞助 **开放容器倡议** (**OCI**) 项目，目的是围绕容器格式和运行时创建开放的行业标准。
- en: 'The OCI currently contains three specifications:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 目前 OCI 包含三个规范：
- en: The **Runtime Specification** (**runtime-spec**). This specifies how to run
    a filesystem bundle that is unpacked on disk.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行时规范** (**runtime-spec**) 。该规范指定了如何运行解压缩到磁盘上的文件系统包。'
- en: The **Image Specification** **(image-spec**). This provides interoperable tools
    for building, transporting, and preparing a container image for running.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**镜像规范** (**image-spec**) 。该规范提供了可互操作的工具，用于构建、传输和准备容器镜像以供运行。'
- en: The **Distribution Specification** (**distribution-spec**). This defines an
    API protocol to ease and standardize content distribution.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分发规范** (**distribution-spec**) 。该规范定义了一个 API 协议，用于简化和标准化内容分发。'
- en: An OCI implementation would download an OCI image and then unpack that image
    into an OCI runtime filesystem bundle.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 OCI 实现会下载一个 OCI 镜像，然后将该镜像解压到 OCI 运行时文件系统包中。
- en: Fedora Linux implements **Podman** for OCI container management.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Fedora Linux 实现了**Podman**用于 OCI 容器管理。
- en: 'Podman relies on an *OCI-compliant container runtime* (`runc`, `crun`, `runv`,
    and so on) to interact with the operating system and create the running containers
    via the command line:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Podman 依赖于*OCI 合规的容器运行时*（`runc`、`crun`、`runv` 等）与操作系统进行交互，并通过命令行创建运行中的容器：
- en: '![Figure 13.24 – Podman interaction](img/B19121_13_23.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.24 – Podman 交互](img/B19121_13_23.jpg)'
- en: Figure 13.24 – Podman interaction
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.24 – Podman 交互
- en: Containers controlled with Podman can be run by `root` or an *unprivileged user*.
    Podman manages the entire container ecosystem, including pods, containers, container
    images, and container volumes, using the `libpod` library.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Podman 控制的容器可以由`root`或*非特权用户*运行。Podman 管理整个容器生态系统，包括 Pod、容器、容器镜像和容器卷，使用 `libpod`
    库。
- en: 'To run containers as a non-root user, you must have some considerations about
    the resources you use:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要以非 root 用户身份运行容器，必须考虑所使用的资源：
- en: The container images get stored in the user’s home directory (**$HOME/.local/share/containers/storage/**)
    instead of **/var/lib/containers**
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器镜像将存储在用户的主目录（**$HOME/.local/share/containers/storage/**）中，而不是**/var/lib/containers**
- en: 'Due to not having **root** privileges, these rules must be followed:'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于没有**root**权限，必须遵循以下规则：
- en: No capability to access a port less than **1024**
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法访问低于**1024**的端口
- en: Storage must live on a local filesystem
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储必须保存在本地文件系统中
- en: Let’s start by installing the utility.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从安装实用程序开始。
- en: 'Installing Podman requires administrator privileges. As the `root` user, run
    the `dnf` command:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Podman 需要管理员权限。以 `root` 用户身份运行 `dnf` 命令：
- en: '[PRE9]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, let’s create an example container to exemplify the scope of the utility
    as a *non-root user*:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个示例容器，以展示作为*非 root 用户*时该实用程序的作用：
- en: 'Verify rootless configuration:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证无根配置：
- en: '[PRE10]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should see the following output:'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![Figure 13.25 – Podman rootless configuration](img/B19121_13_24.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.25 – Podman 无根配置](img/B19121_13_24.jpg)'
- en: Figure 13.25 – Podman rootless configuration
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.25 – Podman 无根配置
- en: 'Create a base container. Use the **podman pull** command to download the image:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个基础容器。使用 **podman pull** 命令下载镜像：
- en: '[PRE11]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The Red Hat **Universal Base Image** (**UBI**) enables you to build, share,
    and collaborate with containerized applications.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Red Hat **通用基础镜像**（**UBI**）使你能够构建、共享并与容器化应用进行协作。
- en: 'Here’s the output:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![Figure 13.26 – Obtaining the container image](img/B19121_13_25.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.26 – 获取容器镜像](img/B19121_13_25.jpg)'
- en: Figure 13.26 – Obtaining the container image
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.26 – 获取容器镜像
- en: After the download is complete, verify and inspect the image.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，验证并检查镜像。
- en: 'Use the **podman images** command to list the downloaded images:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **podman images** 命令列出下载的镜像：
- en: '[PRE12]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here’s the output:'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![Figure 13.27 – Listing container images](img/B19121_13_26.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.27 – 列出容器镜像](img/B19121_13_26.jpg)'
- en: Figure 13.27 – Listing container images
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.27 – 列出容器镜像
- en: Use `image ID` to inspect it.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `镜像 ID` 来检查它。
- en: 'Inspecting the downloaded image provides us with information on the creation
    and use of the image, besides the available variables to use on it. Use the **podman
    inspect** command with the name of the image or its ID:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查下载的镜像可以为我们提供有关镜像创建和使用的信息，以及可用的变量。使用**podman inspect**命令并指定镜像的名称或 ID：
- en: '[PRE13]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You will see the following output:'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '![Figure 13.28 – Inspecting the UBI image](img/B19121_13_27.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.28 – 检查 UBI 镜像](img/B19121_13_27.jpg)'
- en: Figure 13.28 – Inspecting the UBI image
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.28 – 检查 UBI 镜像
- en: Now, let’s create a container from the downloaded image.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从下载的镜像创建一个容器。
- en: 'Run a container of the UBI image to display the operating system version:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 UBI 镜像的容器以显示操作系统版本：
- en: '[PRE14]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here’s the output:'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![Figure 13.29 – Running a container](img/B19121_13_28.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.29 – 运行容器](img/B19121_13_28.jpg)'
- en: Figure 13.29 – Running a container
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.29 – 运行容器
- en: The container is a base image of RHEL9 that’s running on Fedora Linux.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 该容器是运行在 Fedora Linux 上的 RHEL9 基础镜像。
- en: 'Now, let’s create an example of a containerized service. Follow these steps:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个容器化服务的示例。按照以下步骤操作：
- en: 'Use your browser to navigate to [https://registry.fedoraproject.org/](https://registry.fedoraproject.org/):'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用浏览器访问[https://registry.fedoraproject.org/](https://registry.fedoraproject.org/)：
- en: '![Figure 13.30 – Fedora Project container image registry](img/B19121_13_29.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.30 – Fedora 项目容器镜像注册表](img/B19121_13_29.jpg)'
- en: Figure 13.30 – Fedora Project container image registry
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.30 – Fedora 项目容器镜像注册表
- en: 'Find the latest *web server image* (**httpd**) and copy its **pull** command:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到最新的*网页服务器镜像*（**httpd**）并复制其**pull**命令：
- en: '[PRE15]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Change the **pull** command so that it uses **podman** instead of **docker**.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 修改**pull**命令，使其使用**podman**而非**docker**。
- en: 'Download the container image and verify it:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载容器镜像并验证：
- en: '[PRE16]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You should get the following output:'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![Figure 13.31 – Getting the httpd image](img/B19121_13_30.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.31 – 获取httpd镜像](img/B19121_13_30.jpg)'
- en: Figure 13.31 – Getting the httpd image
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.31 – 获取httpd镜像
- en: 'Test run the container for the **httpd** image:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对**httpd**镜像进行容器的测试运行：
- en: '[PRE17]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here’s the output:'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是输出内容：
- en: '![Figure 13.32 – Running the httpd image container](img/B19121_13_31.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.32 – 运行httpd镜像容器](img/B19121_13_31.jpg)'
- en: Figure 13.32 – Running the httpd image container
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.32 – 运行httpd镜像容器
- en: Running the `httpd` image container in this way inhibits the use of the Terminal.
    Let’s run it with a custom name and in the background.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式运行`httpd`镜像容器会阻止使用终端。让我们用自定义名称并在后台运行它。
- en: 'Run the **httpd** image container as **myapache** and in the background. Use
    the **--name** and **-d** options with the **podman** **run** command:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以**myapache**作为名称，并在后台运行`httpd`镜像容器。使用**--name**和**-d**选项与**podman run**命令一起使用：
- en: '[PRE18]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You should see the following output:'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![Figure 13.33 – Running the container and verifying its status](img/B19121_13_32.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.33 – 运行容器并验证其状态](img/B19121_13_32.jpg)'
- en: Figure 13.33 – Running the container and verifying its status
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.33 – 运行容器并验证其状态
- en: Inspect the running container to find information you can use to access the
    service.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 检查运行中的容器，找到你可以用来访问服务的信息。
- en: 'Use the **podman** **inspect** command:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**podman** **inspect**命令：
- en: '[PRE19]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You should see the following:'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到以下内容：
- en: '![Figure 13.34 – Looking for access to the containerized service](img/B19121_13_33.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.34 – 查找容器化服务的访问](img/B19121_13_33.jpg)'
- en: Figure 13.34 – Looking for access to the containerized service
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.34 – 查找容器化服务的访问
- en: The containerized service has no `IPAddress` assigned to it but opens ports
    `8080` and `8443`. Check the logs for more information.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 容器化服务没有分配`IPAddress`，但打开了端口`8080`和`8443`。检查日志以获取更多信息。
- en: 'Use the **podman logs** command to review the logs:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**podman logs**命令查看日志：
- en: '[PRE20]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here’s the output:'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是输出内容：
- en: '![Figure 13.35 – Reviewing service logs](img/B19121_13_34.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.35 – 审查服务日志](img/B19121_13_34.jpg)'
- en: Figure 13.35 – Reviewing service logs
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.35 – 审查服务日志
- en: In the logs of the containerized service, find the IP address that opens port
    `8443`. Verify access to the service with this information.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器化服务的日志中，找到打开端口`8443`的IP地址。使用这些信息验证服务的访问情况。
- en: 'Verify access to the containerized service. Use the following **curl** command:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证访问容器化服务。使用以下**curl**命令：
- en: '[PRE21]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here’s the output:'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是输出内容：
- en: '![Figure 13.36 – Verifying access to the web service](img/B19121_13_35.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.36 – 验证对网页服务的访问](img/B19121_13_35.jpg)'
- en: Figure 13.36 – Verifying access to the web service
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.36 – 验证对网页服务的访问
- en: The service fails to answer on port `8443` or `8080`.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 服务未能在端口`8443`或`8080`上响应。
- en: This is due to the container port not referring to a host port. Delete the container
    and recreate it with the reference to a local port.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为容器端口没有引用主机端口。删除容器并重新创建它，引用本地端口。
- en: 'Remove the container. First, use the **stop** option to interrupt the container
    run and then the **rm** option to delete the container with the **podman** command:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除容器。首先，使用**stop**选项中断容器运行，然后使用**rm**选项删除容器，命令为**podman**：
- en: '[PRE22]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You should see the following output:'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![Figure 13.37 – Removing the container](img/B19121_13_36.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.37 – 删除容器](img/B19121_13_36.jpg)'
- en: Figure 13.37 – Removing the container
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.37 – 删除容器
- en: Verify that the `myapache` container is not running anymore. Use the `podman
    ps` command to do so.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 验证`myapache`容器是否已经不再运行。使用`podman ps`命令进行验证。
- en: 'Recreate the **myapache** container by mapping the container’s port, **8080**,
    to local port **8080**. Add the **-p** option to the **podman run** command that
    we ran in *step 4*:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将容器的端口**8080**映射到本地端口**8080**，重新创建**myapache**容器。在我们在*第4步*中运行的**podman run**命令中添加**-p**选项：
- en: '[PRE23]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here’s the output:'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是输出内容：
- en: '![Figure 13.38 – Mapping the container port to the local port](img/B19121_13_37.jpg)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.38 – 映射容器端口到本地端口](img/B19121_13_37.jpg)'
- en: Figure 13.38 – Mapping the container port to the local port
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.38 – 映射容器端口到本地端口
- en: Use the **podman ps** command to confirm that the port was mapped correctly.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **podman ps** 命令确认端口是否正确映射。
- en: 'Test the service again but on local port **8080**:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新测试服务，但在本地端口**8080**上：
- en: '[PRE24]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You should see the following output:'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![Figure 13.39 – Testing service access](img/B19121_13_38.jpg)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.39 – 测试服务访问](img/B19121_13_38.jpg)'
- en: Figure 13.39 – Testing service access
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.39 – 测试服务访问
- en: Now that the service is accessible, it shows the Apache test page.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 现在服务可访问，显示了 Apache 测试页面。
- en: An application that always runs on a single host accesses local disk storage
    to get the information it needs while running. These storage volumes remain both
    *logically* and *physically* persistent. Containerized dynamic and elastic deployments
    separate the logical and physical states of application storage.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 一个始终在单个主机上运行的应用程序，通过访问本地磁盘存储来获取运行所需的信息。这些存储卷在*逻辑上*和*物理上*都保持持久性。容器化的动态和弹性部署将应用程序存储的逻辑状态和物理状态分开。
- en: A containerized application could be *logically resident but physically transient*
    due to the redistribution and scaling capabilities inherent in OCI technologies.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 OCI 技术固有的重新分配和扩展能力，容器化应用程序可能是*逻辑常驻但物理临时*的。
- en: If a container resides on a host, but that container stops working, the container
    manager could start a new instance on another host. The application may need some
    data available when it is running; this is known as logical persistence. Since
    container information is ephemeral by default, the storage is physically transient.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个容器驻留在主机上，但该容器停止工作，容器管理器可以在另一台主机上启动一个新的实例。该应用程序可能需要在运行时访问一些数据，这被称为逻辑持久性。由于容器信息默认是临时的，因此存储在物理上是短暂的。
- en: In containerized storage in general, the trend is to integrate *persistent storage*
    with *ephemeral containers* as best as possible.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器化存储中，一般的趋势是尽可能将*持久存储*与*短暂容器*结合起来。
- en: 'Now, let’s learn how to add persistent storage to our containerized service.
    Follow these steps:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们学习如何为我们的容器化服务添加持久存储。请按照以下步骤操作：
- en: 'Stop and remove the **myapache** container:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止并移除 **myapache** 容器：
- en: '[PRE25]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the user’s home directory, create the working directory for persistent storage
    of the **myapache** container:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在用户的主目录中，为 **myapache** 容器创建持久存储的工作目录：
- en: '[PRE26]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now, let’s create a custom home page for our service.
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，让我们为我们的服务创建一个自定义主页。
- en: 'Create the **index.html** file inside the persistent storage directory we created
    for the **myapache** container:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们为 **myapache** 容器创建的持久存储目录中创建 **index.html** 文件：
- en: '[PRE27]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Regenerate the **myapache** container with the **-v** option to add persistent
    storage as a volume of the **myapache** container.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **-v** 选项重新生成 **myapache** 容器，将持久存储作为 **myapache** 容器的卷添加。
- en: 'Run the container again with the option to attach the volume mentioned previously.
    As with the port, the local directory must be mapped to the container directory.
    In this case, since it deals with files, add the **-Z** option to apply the SELinux
    policy from the container directory to the local directory:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用之前提到的挂载卷选项重新运行容器。与端口一样，本地目录必须映射到容器目录。在这种情况下，由于涉及文件操作，添加 **-Z** 选项，将 SELinux
    策略从容器目录应用到本地目录：
- en: '[PRE28]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Verify that the container is running, as well as that you have access to the
    service:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证容器是否正在运行，并确认你能访问该服务：
- en: '![Figure 13.40 – Testing the container with persistent storage](img/B19121_13_39.jpg)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.40 – 测试具有持久存储的容器](img/B19121_13_39.jpg)'
- en: Figure 13.40 – Testing the container with persistent storage
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.40 – 测试具有持久存储的容器
- en: Now, our web service has persistent storage. This can be managed locally or
    independently of the container instance(s) running with the content.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的 web 服务具有持久存储。这个存储可以在本地管理，或独立于运行内容的容器实例进行管理。
- en: This service could manage itself as a container and give this management to
    `systemd` as part of the system. Let’s learn how set up self-management.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务可以作为容器自行管理，并将此管理交给 `systemd` 作为系统的一部分。让我们学习如何设置自我管理。
- en: 'Using the same `myapache` container from the previous example, follow these
    steps:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 使用之前示例中的相同 `myapache` 容器，按照以下步骤操作：
- en: 'Stop and remove the **myapache** container:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止并移除 **myapache** 容器：
- en: '[PRE29]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To make the **myapache** container self-managed, add a command that determines
    the health of the container. In our case, we will use the **curl** command from
    the previous example. Use the **--health-cmd** and **--health-interval** options
    to define them in the container:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使**myapache**容器自主管理，添加一个命令来确定容器的健康状况。在我们的示例中，我们将使用之前示例中的**curl**命令。使用**--health-cmd**和**--health-interval**选项在容器中定义这些选项：
- en: '[PRE30]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Here’s the output:'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '![Figure 13.41 – Making the container self-managed](img/B19121_13_40.jpg)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.41 – 使容器自主管理](img/B19121_13_40.jpg)'
- en: Figure 13.41 – Making the container self-managed
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.41 – 使容器自主管理
- en: Verify the creation of the container. Then, use the `podman` `ps` command.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 验证容器的创建情况。然后，使用`podman` `ps`命令。
- en: 'To check the health of the container, run the **podman healthcheck** **run**
    command:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查容器的健康状况，运行**podman healthcheck** **run**命令：
- en: '[PRE31]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Here’s the output:'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '![Figure 13.42 – Reviewing the health of the container](img/B19121_13_41.jpg)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.42 – 审查容器健康状况](img/B19121_13_41.jpg)'
- en: Figure 13.42 – Reviewing the health of the container
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.42 – 审查容器健康状况
- en: 'The output of the preceding command should return nothing. Run an **echo**
    command on the special variable, **$?**, to get the output of the command:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述命令的输出应该不返回任何内容。运行**echo**命令查看特殊变量**$?**的输出，以获取命令的结果：
- en: '[PRE32]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Thus, the `myapache` container indicates when it is working correctly – that
    is, it is self-managing. This management could delegate to the operating system
    as part of one of its services. For this, `systemd` must be set up to support
    services that are started from the user session. Follow these steps:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`myapache`容器能够指示其何时工作正常——也就是说，它是自主管理的。这种管理可以作为操作系统服务的一部分委托给操作系统。为此，必须设置`systemd`来支持从用户会话启动的服务。按照以下步骤进行：
- en: 'As **root**, enable user lingering by running the **loginctl** command:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为**root**，通过运行**loginctl**命令启用用户持久化：
- en: '[PRE33]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Create a directory to host the containerized services and change to that directory:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个目录来托管容器化服务，并切换到该目录：
- en: '[PRE34]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Build the configuration files for **systemd** using the **podman** **generate**
    command:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**podman** **generate**命令构建**systemd**的配置文件：
- en: '[PRE35]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Here’s the output:'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '![Figure 13.43 – Containerized service configuration file](img/B19121_13_42.jpg)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.43 – 容器化服务配置文件](img/B19121_13_42.jpg)'
- en: Figure 13.43 – Containerized service configuration file
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.43 – 容器化服务配置文件
- en: The preceding command creates the `container-myapache.service` unit file with
    the configuration for `systemd` to manage.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令会创建`container-myapache.service`单元文件，并为`systemd`管理配置。
- en: 'Reload the user’s daemons by running the following **systemctl** command:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下**systemctl**命令重新加载用户的守护进程：
- en: '[PRE36]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Enable the user’s containerized service by running the following **systemctl**
    command:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下**systemctl**命令启用用户的容器化服务：
- en: '[PRE37]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Verify the status of the containerized service by running the following **systemctl**
    command:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下**systemctl**命令验证容器化服务的状态：
- en: '[PRE38]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You should see the following output:'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该能看到以下输出：
- en: '![Figure 13.44 – Verifying the containerized service](img/B19121_13_43.jpg)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.44 – 验证容器化服务](img/B19121_13_43.jpg)'
- en: Figure 13.44 – Verifying the containerized service
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.44 – 验证容器化服务
- en: Finally, verify that the containerized service continues to operate. Use the
    `curl` command we used previously.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，验证容器化服务是否继续运行。使用我们之前使用过的`curl`命令。
- en: With that, we’ve learned how to use OCI containers, from their simple use to
    creating a containerized service that’s managed by the operating system.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些内容，我们已经学习了如何使用OCI容器，从简单的使用到创建由操作系统管理的容器化服务。
- en: Fedora Linux implements the use of OCI containers as a way to ease service management.
    With this bouquet of possibilities, depending on the workload, we can choose a
    virtual machine, either created with a cloud-based image or created with its installation
    image traditionally. Alternatively, we can use containers if we only need to deploy
    a simple service such as `myapache`.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: Fedora Linux 实现了OCI容器的使用，以便简化服务管理。根据工作负载的不同，我们可以选择虚拟机，虚拟机可以使用基于云的镜像创建，或者使用传统的安装镜像创建。或者，如果我们只需要部署一个简单的服务，如`myapache`，我们也可以选择使用容器。
- en: I hope these options can help you improve the performance of your day-to-day
    tasks as a Linux system administrator.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这些选项能帮助你提高作为Linux系统管理员的日常工作效率。
- en: Summary
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we provided a quick overview of the methods for creating a
    virtual machine. In my opinion, the easiest and fastest way is to rely on the
    use of pre-built cloud images. In a couple of steps, and with enough practice,
    we can have them working in a matter of minutes.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要概述了创建虚拟机的方法。在我看来，最简单和最快的方法是依赖于使用预构建的云镜像。通过几步操作，经过一定的练习，我们可以在几分钟内使其运行。
- en: Besides that, we used Gnome Boxes as a traditional method of creating virtual
    machines with an installation image. This method is a bit slower but allows us
    to customize the guest operating system installation.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，我们还使用Gnome Boxes作为一种传统的方法，通过安装镜像来创建虚拟机。这种方法稍微慢一些，但允许我们定制来宾操作系统的安装。
- en: Next, we looked at services, where we learned how to use OCI containers implemented
    by Fedora Linux. This is a simple option for creating containerized services because
    it gives us the power to customize them so that they meet our needs. For example,
    we can use them for persistent storage, self-management, or even to delegate a
    containerized service as a system service managed by `systemd`.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们研究了服务，在其中我们学习了如何使用Fedora Linux实现的OCI容器。这是一种简单的创建容器化服务的方式，因为它赋予了我们定制这些服务的能力，以满足我们的需求。例如，我们可以将它们用于持久化存储、自我管理，甚至将一个容器化服务委派为由`systemd`管理的系统服务。
- en: All these tools make up an arsenal that could ease the performance of a Linux
    system administrator’s day-to-day tasks. As we mentioned in [*Chapter 10*](B19121_10_split_000.xhtml#_idTextAnchor208),
    “*a good system administrator backs up, automates, and studies in their* *spare
    time*.”
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些工具构成了一个武器库，可以帮助缓解Linux系统管理员日常任务的执行。正如我们在[*第10章*](B19121_10_split_000.xhtml#_idTextAnchor208)中提到的，“*一个优秀的系统管理员会在*
    *空闲时间* *进行备份、自动化和学习*。”
- en: Congratulations on making it to the end of this book! I hope you found it useful.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你读完了本书！希望你觉得它有用。
- en: Further reading
  id: totrans-355
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 延伸阅读
- en: 'To learn more about the topics covered in this chapter, you can visit the following
    link:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解本章所涵盖的更多内容，您可以访问以下链接：
- en: '*Build a lab in 5 minutes with three simple* *commands*: [https://www.redhat.com/sysadmin/build-lab-quickly](https://www.redhat.com/sysadmin/build-lab-quickly)'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过三个简单的* *命令在5分钟内建立实验室*：[https://www.redhat.com/sysadmin/build-lab-quickly](https://www.redhat.com/sysadmin/build-lab-quickly)'
