- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PowerShell 7 for Linux and macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is commonly said that Linux is the most popular operating system for servers,
    and while this is true, it doesn’t acknowledge that there are nearly as many types
    of Linux as there are actual servers. Whereas Windows and macOS are closely engineered
    and maintained by companies that are concerned that everybody should be running
    homogenous, secure, and often forcibly updated code, the Linux world is far more
    unrestricted, with a multiplicity of free, open source, and often barely maintained
    variations that seem to hang around on servers for years or sometimes decades.
    In this chapter, we’re going to look at how we can use PowerShell on some of the
    more common varieties of Linux; in our case, Ubuntu and CentOS, a free version
    of **Red Hat Enterprise** **Linux** (**RHEL**).
  prefs: []
  type: TYPE_NORMAL
- en: We’re going to start by looking at how we can get access to a Linux machine
    to practice on; without that, this chapter would be pretty boring. Once we’ve
    got a machine, we will look at three different ways of installing PowerShell,
    using package managers and direct download.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we’ll install VS Code and see how to set it up on CentOS 7 before
    going on to look at some of the main differences we will see running PowerShell
    on Linux rather than Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will look at one of the most common ways of using PowerShell on Linux: remote
    sessions over the **Secure Shell** (**SSH**) protocol. This is important and is
    easily the most common way I see people logging in to Linux machines.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we’ll take a quick look at how easy it is to install PowerShell and
    VS Code on macOS using the free open source package manager, Homebrew.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main topics we will cover in this chapter are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing PowerShell 7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing VS Code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running PowerShell on Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remoting with OpenSSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell for macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unless we already have a client running some form of Linux, we’ll need a Linux
    device to work on. There’s a really easy way to get one and a slightly harder
    way to get one. I’ve done both on my machine to get the screenshots for this chapter,
    providing a Ubuntu server (with no graphical interface) and a CentOS desktop client.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Ubuntu server is very easy to install:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to **Control Panel** | **Programs and Features** | **Turn Windows features
    on and off** and make sure the checkbox for **Windows Subsystem for Linux** is
    checked, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.1 – Enabling Windows Subsystem for Linux](img/B17600_14_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.1 – Enabling Windows Subsystem for Linux
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows Subsystem for Linux** is displayed inside the red box.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once **Windows Subsystem for Linux** (**WSL**) is enabled, reboot, go to the
    Microsoft Store ([https://apps.microsoft.com](https://apps.microsoft.com)), and
    select a Linux application. I’m using the latest version of Ubuntu – 22.04:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.2 – An Ubuntu app on the Microsoft Store](img/B17600_14_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.2 – An Ubuntu app on the Microsoft Store
  prefs: []
  type: TYPE_NORMAL
- en: All I’ve done here is search for Ubuntu in the search box and select the most
    recent app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Install**, and a Microsoft Store window will open; click on **Get**,
    and once the app is downloaded, the button will change to **Open**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.3 – The Microsoft Store app](img/B17600_14_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.3 – The Microsoft Store app
  prefs: []
  type: TYPE_NORMAL
- en: 'Click `Installing, this may take a few minutes...`. After a few minutes, we’ll
    be asked to create a username and then input a password twice, and that’s it.
    We now have a Ubuntu server running inside WSL on Windows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.4 – Ubuntu on WSL](img/B17600_14_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.4 – Ubuntu on WSL
  prefs: []
  type: TYPE_NORMAL
- en: In the first line, I’ve created a new username, `nickp` (imaginative), and in
    the second and third, I’ve input the new password. Ubuntu hides the password when
    you type, but unlike Windows, it doesn’t do it by displaying dots or asterisks.
    It just displays... nothing.
  prefs: []
  type: TYPE_NORMAL
- en: And that’s it – our Ubuntu environment is ready to have PowerShell installed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: These instructions are for Windows 10 Pro build 19045\. Different platforms
    such as Windows 11 or Windows Server may have different instructions for installing
    WSL. Also, this is WSL. There is another version called WSL2 for later operating
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve also installed CentOS into Oracle VirtualBox; it would work just as well
    from the Microsoft Store, but I want a separate machine with a GUI we can use
    for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instructions for installing VirtualBox are available here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.virtualbox.org/manual/UserManual.html#installation](https://www.virtualbox.org/manual/UserManual.html#installation)'
  prefs: []
  type: TYPE_NORMAL
- en: It’s pretty straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once VirtualBox is installed, we’ll need to download a CentOS image from here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://isoredirect.centos.org/centos/7/isos](http://isoredirect.centos.org/centos/7/isos)'
  prefs: []
  type: TYPE_NORMAL
- en: 'And we need to create a VM to install it on. There are good instructions for
    that here: [https://www.linuxfordevices.com/tutorials/centos/centos-on-virtualbox](https://www.linuxfordevices.com/tutorials/centos/centos-on-virtualbox).'
  prefs: []
  type: TYPE_NORMAL
- en: I’ve installed CentOS 7 with a GNOME desktop GUI so that we can have a look
    at how to install PowerShell on older operating systems; I find that a lot of
    the Linux systems I work with are getting on a bit. I’m still using Ubuntu 12.04
    in some places. Precise Pangolin was a great name for an operating system, but
    really, we should all be on Jammy Jellyfish – at least for the sake of security.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, to follow the section on macOS, we’ll need a Mac of some description.
    I’m an absolute cheapskate, so I’ve borrowed a MacBook from my friend Paul that’s
    running OS 13, Ventura, which is pretty recent. Thanks, Paul.
  prefs: []
  type: TYPE_NORMAL
- en: Now we’ve covered the sort of environment we’ll need and how to install it,
    let’s look at installing PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PowerShell 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Somewhat perversely, I find that installing PowerShell on Linux is probably
    easier than installing it on Windows, despite PowerShell being developed for Windows.
    Microsoft publishes good scripts that we can use for the supported versions of
    Linux; note, though, that there are very few supported flavors: RHEL, Ubuntu,
    Alpine, and Debian.'
  prefs: []
  type: TYPE_NORMAL
- en: This doesn’t mean we can’t install PowerShell on other versions, only that Microsoft
    doesn’t provide any support for us. Microsoft only supports specific recent versions
    as well. Because of the rate at which both operating systems change, it’s worth
    making sure that our versions of PowerShell and Linux are on the supportability
    matrix; otherwise, we may get unexpected results, as we will see when we look
    at installing on CentOS.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with Ubuntu, which I’ve got running in WSL on my Windows 10 client.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PowerShell on Ubuntu 22.04
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we are going to install PowerShell 7.4 on Ubuntu 22.04\. Ubuntu
    is running inside WSL on my Windows 10 client, but it will work just as well on
    a VM or a physical machine. There are detailed alternative instructions here:
    [https://learn.microsoft.com/en-us/powershell/scripting/install/install-ubuntu](https://learn.microsoft.com/en-us/powershell/scripting/install/install-ubuntu).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s have a go. We’re going to run the commands shown next:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first line, we are updating the local packages with the latest versions
    from the default repositories. This is good practice before installing any software
    on Linux. We use the `sudo` command to tell Linux that we want to use administrator
    privileges, or root privileges, to run the command. Obviously, to do that, we
    need to actually have those privileges, and we will be asked to input our account
    password to confirm that before we can run the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the second line, we’re installing some prerequisite packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the third line, we are grabbing the exact version of the operating system
    and then using that in the fourth line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'dpkg, the Ubuntu package management system:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the sixth line, we’re deleting the key file for security:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: sudo apt-get update
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, in the eighth line, we’re installing PowerShell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Linux is quite chatty, and we’ll see 60 or 70 lines of output as we type the
    preceding commands, but the process is very straightforward and works well.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start PowerShell, we simply type `pwsh`, and we will be taken to a PowerShell
    prompt, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.5 – Starting PowerShell on Ubuntu](img/B17600_14_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.5 – Starting PowerShell on Ubuntu
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, I started PowerShell with `pwsh`. Once PowerShell
    started, I called the `$PSVersionTable` automatic variable to get some information
    about the environment, including the version of PowerShell, the edition, and which
    operating system is running. I closed PowerShell by typing `exit`. If I’d wanted
    to keep PowerShell running in the background, I could have typed `bash` and gone
    to a Bash prompt instead. As we can see, we get the same color coding on Linux
    that we see on Windows, which helps to keep the experience consistent across platforms.
  prefs: []
  type: TYPE_NORMAL
- en: It’s good to know that tab completion works in Linux as well. One of the things
    that trips me up most often with Linux is capitalization; PowerShell on Windows
    has made me lazy. Therefore, being able to use tabs to complete paths is really
    useful. Note that PowerShell itself is not case-sensitive on Linux; `get-process`
    works just as well as `Get-Process`.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look now at installing PowerShell on CentOS.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PowerShell on CentOS 8 and 9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Installing the latest version of PowerShell on recent versions of CentOS, CentOS
    8, or CentOS 9 (and also RHEL and Fedora) is very similar to installing it on
    Ubuntu, but using the `yum` package manager for RHEL 8 or the `dnf` package manager
    for RHEL 9; if anything, it’s even easier. Do note, however, that Microsoft only
    officially supports PowerShell on RHEL, not on CentOS or Fedora. We’re going to
    run the commands shown next:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first line, we’re using the `curl` application rather than `wget` to
    fetch PCM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: sudo rpm -i packages-microsoft-prod.rpm
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the third line, we’re removing the key files, again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the fourth line, we’re updating the package lists now we’ve registered the
    new repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: sudo dnf install powershell -y
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Troubleshooting tip
  prefs: []
  type: TYPE_NORMAL
- en: If this doesn’t work, there’s a pretty good chance that it’s the proxy settings.
    There are at least three different places in CentOS where we might find the proxy
    settings. For `yum`, it’s `/etc/yum.conf`. For `dnf`, it’s `/etc/dnf/dnf.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: What happens if we want to use PowerShell on an older version, though? We must
    install a specific older version of PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: 'For RHEL 7 (and, therefore, CentOS 7), the last definitely good version of
    PowerShell was 7.2\. Early releases of 7.3 work, but later releases don’t, as
    they rely on Linux libraries that aren’t compatible with CentOS 7\. What we see
    if we try to install a recent version of PowerShell are error messages such as
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The answer here is to install PowerShell 7.2\. Let’s see how we do that.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PowerShell on CentOS 7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Installing by direct download is really easy on CentOS; it’s one line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'All we’re doing here is using `yum`, the package manager on CentOS 7, to fetch
    and install a package from a URL. The trick here is knowing the URL of the package
    you need to download, though. All the packages are maintained on GitHub by Microsoft,
    here: [https://github.com/PowerShell/PowerShell/releases/](https://github.com/PowerShell/PowerShell/releases/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To download a release, click on the link in the name of the package (in our
    case, `powershell-7.2.17-1.rh.x86_64.rpm`, and copy the hyperlink: [https://github.com/PowerShell/PowerShell/releases/download/v7.2.17/powershell-7.2.17-1.rh.x86_64.rpm](https://github.com/PowerShell/PowerShell/releases/download/v7.2.17/powershell-7.2.17-1.rh.x86_64.rpm).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have that, we pass it to `sudo yum install`, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.6 – Installing PowerShell on CentOS 7 using a direct download](img/B17600_14_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.6 – Installing PowerShell on CentOS 7 using a direct download
  prefs: []
  type: TYPE_NORMAL
- en: In the first line, I’ve run the direct download command, as shown previously.
    The rest of the screen output is chat from the operating system, telling us what
    it is doing. There are quite a few more lines of this before we finally get to
    run PowerShell. It’s a very easy way to install PowerShell; the downside is that
    we don’t register the Microsoft repository.
  prefs: []
  type: TYPE_NORMAL
- en: That is pretty much all we’re going to cover on installing PowerShell on Linux;
    we’ve covered representatives of the two main families of Linux, Ubuntu and CentOS,
    and we’ve looked at how we can install different versions of PowerShell. Let’s
    look now at how we can install VS Code on Linux. We’ll be using my CentOS system
    because that has a GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Installing VS Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Installing VS Code on Linux is straightforward. On recent Ubuntu machines,
    we can use `snapd`, a package management system for Ubuntu, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: And that’s it. On RHEL and CentOS machines, we may need to enable `snapd` first,
    before we can use it to install code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re going to run the commands shown next:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first line, we are installing the `snapd` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '/snap to /var/lib/snapd/snap:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, we need to log out and log back in, or reboot the machine, to make
    sure that everything is updated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’re now ready to use `snap` to install VS Code, as before. The big advantage
    of using `snap` is that it will keep VS Code updated in the background.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also install VS Code manually if we don’t have access to `snap`. We
    can do it like this on CentOS 7:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This will register the Microsoft GPG encryption keys with `rpm`, the CentOS
    7 package manager. Next, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create an empty text file called `vscode.repo`. We need to add some
    lines to this file and save it, so type this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Press *Ctrl* and *X* to exit, and answer `y` when prompted to save the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `vscode.repo` file should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.7 – The vscode.repo file in nano](img/B17600_14_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.7 – The vscode.repo file in nano
  prefs: []
  type: TYPE_NORMAL
- en: When we create the file, it is empty, and we must type in the code and then
    save and exit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, to install VS Code, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: That’s it. We can start VS Code by typing `code` at the terminal prompt. VS
    Code works exactly the same way in Linux as it does in Windows. Refer to the *Configuring
    VS Code for PowerShell* section of [*Chapter 5*](B17600_05.xhtml#_idTextAnchor096),
    *PowerShell Control Flow – Conditionals* *and Loops*.
  prefs: []
  type: TYPE_NORMAL
- en: Now we’ve got everything installed, let’s look at how we can use PowerShell
    on Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Running PowerShell on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mostly, PowerShell works exactly the same on Linux as it does on Windows, but
    obviously, there are some differences between the two underlying operating systems
    that we need to be aware of and subsequently understand how PowerShell handles
    them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Case sensitivity is the obvious one; while `get-content` works as well as `Get-Content`
    on Linux, `get-content ./myfile.txt` doesn’t work if the file is called `MyFile.txt`;
    see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.8 – The importance of capitalization](img/B17600_14_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.8 – The importance of capitalization
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, if the capitalization of the path or filename is incorrect,
    then PowerShell can’t find the file. The best way I have found to compensate for
    this is to use tab completion as much as possible, as tab completion ignores capitalization,
    so typing `myfi` and pressing *Tab* will find a file called `MyFile.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The filesystems are different, also. Linux doesn’t use letters to distinguish
    drives and uses forward slashes (`/`) instead of backslashes (`\`). PowerShell
    recognizes both as a file path separator, so there is no functional difference
    between `Get-Content ./MyFile.txt` and `Get-Content .\MyFile.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.9 – Versatile path separators](img/B17600_14_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.9 – Versatile path separators
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we get the contents of the file whichever file path separator
    we choose. This makes writing cross-platform scripts easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'I have made my views on aliases known already, and it appears my furious letter
    writing has paid off, because PowerShell 7 on Linux no longer includes common
    aliases such as `ls`, although they persist when running PowerShell 7 on Windows.
    Instead, PowerShell now calls the Bash command, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.10 – Fewer aliases in PowerShell 7 on Linux](img/B17600_14_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.10 – Fewer aliases in PowerShell 7 on Linux
  prefs: []
  type: TYPE_NORMAL
- en: We can see the difference between running `ls` in Bash and PowerShell in the
    preceding screenshot. The output is the same, but we don’t get the color coding
    we get when running in Bash. By contrast, we get a completely different type of
    output when we run `Get-ChildItem`. Compare this to the behavior on Windows, where
    `ls` is an alias for `Get-ChildItem`. Other Linux commands that are no longer
    aliased include `cp`, `mv`, `rm`, `cat`, `man`, `mount`, and `ps`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running as an administrator is different on Linux, as well. People familiar
    with Linux will be used to running commands with the `sudo` prefix to run the
    command as root. This won’t work in PowerShell. Instead, we must start PowerShell
    with `sudo`, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This will give us a new PowerShell session running with root privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Given that one of the big attractions of running PowerShell on Linux (and macOS,
    and ARM) is that we can start to write cross-platform scripts, how do we know
    which platform our script is running on? Easy – we test the automatic variables.
    There are three automatic variables called `$IsWindows`, `$IsLinux`, and `$IsMacOS`,
    which return either `true` or `false`, depending on the operating system. We can
    use these variables to write `if` statements in our scripts that alter behavior
    depending on the environment.
  prefs: []
  type: TYPE_NORMAL
- en: Activity – Writing a cross-platform script
  prefs: []
  type: TYPE_NORMAL
- en: Given what we’ve learned previously, write a cross-platform script that will
    run on both Windows and Linux and return five running processes with the highest
    current CPU usage. Output the processes in descending order to a text file with
    a name that includes the name of the computer it was run on.
  prefs: []
  type: TYPE_NORMAL
- en: We can get the name of the computer in Windows with `$env:computername`, and
    in Linux by typing `hostname`.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, much of the time, we won’t actually be running commands and scripts
    directly on a Linux machine; most of the time, we will want to remote into it.
    In the next section, we’ll look at the recommended way of remoting into Linux
    machines.
  prefs: []
  type: TYPE_NORMAL
- en: Remoting with OpenSSH
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We saw in [*Chapter 12*](B17600_12.xhtml#_idTextAnchor236), *Securing PowerShell*,
    that remoting was a powerful way to establish a connection with a machine and
    take control. When we looked at remoting in that chapter, we explored remoting
    over the **Windows Remote Management** (**WinRM**) protocol on other Windows machines.
    We mentioned that we could also use SSH to establish remote sessions. Linux does
    not support the WinRM protocol, so we must use SSH to remotely administer it.
  prefs: []
  type: TYPE_NORMAL
- en: OpenSSH is an open source SSH toolset that is almost ubiquitous on Linux and
    other Unix machines. Since 2018, it has been available for Windows and makes managing
    heterogeneous environments much easier. It can be a bit tricky to set up, but
    once it is working, it makes remoting very easy. Let’s take a look.
  prefs: []
  type: TYPE_NORMAL
- en: Checking that PowerShell has OpenSSH support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing to check is that our version of PowerShell 7 has got OpenSSH
    support; if we’ve downloaded and installed it from GitHub, then we should be OK,
    but first, let’s check using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: If we see parameter sets called `SSHHost` and `SSHHostHashParam`, then we are
    good to go. If not, then we should download a recent version of PowerShell 7 from
    GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Installing OpenSSH on Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We only need to install OpenSSH on Windows if we are going to want to remote
    into that Windows machine. If we’re going to remote from it to other machines,
    then we can skip installing it; PowerShell already has a working SSH client that
    will allow us to connect to Linux machines using PowerShell remoting.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we decide we want to install an OpenSSH server, then we first need to check
    if we are running on a viable version of Windows and that we have the correct
    rights. Start an elevated administrator PowerShell session, and type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what I get on my machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.11 – Checking OpenSSH prerequisites on Windows](img/B17600_14_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.11 – Checking OpenSSH prerequisites on Windows
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see, my rights test returns `True`, so I do have the correct rights,
    and when I run `winver.exe`, the pop-up window shows I am running Windows 10 22H2,
    more recent than the minimum version of Windows 10 1809\. We’re ready to install.
    In the elevated prompt we’ve just used, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This will install OpenSSH. We also need to start the `sshd` service and set
    it to automatically start up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to configure `sshd` to allow PowerShell to use it. Open `notepad.exe`
    as an administrator (right-click and choose `C:\ProgramData\ssh\sshd_config` file,
    add the following lines above the last entry in the file, and save the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The `-``nologo` parameter isn’t needed if we’re using PowerShell 7.4 or later.
    Be careful not to save the file as `sshd_config.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: Warning!
  prefs: []
  type: TYPE_NORMAL
- en: Wait! What’s that `c:/progra~1/powershell/7/pwsh.exe` path all about? Working
    with non-Microsoft open source software on Windows can be frustrating at times.
    OpenSSH is an example. It doesn’t understand paths with a space in them, even
    if the path is enclosed in single or double quotes, and so we have to use something
    called 8.3 format, which is the short filename format that we used to use with
    older Microsoft operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, it’s even more complicated. Some releases of OpenSSH don’t like
    that format either; when we add the PowerShell subsystem into the `sshd_config`
    file, the `sshd` service refuses to start. The answer here is to side-load another
    copy of PowerShell into a directory with no spaces and no names longer than eight
    characters. To get mine to work, I downloaded the PowerShell 7.4 ZIP file from
    the PowerShell GitHub pages, unblocked it by right-clicking on the downloaded
    file, selecting `c:\scratch\pwsh`. I then added this line to `sshd_config`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Subsystem powershell` `c:/scratch/pwsh/pwsh.exe -sshs`'
  prefs: []
  type: TYPE_NORMAL
- en: And now, the `sshd` service will start normally.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, restart the service with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: And that’s it. Our Windows machine is ready to receive PowerShell remoting over
    OpenSSH.
  prefs: []
  type: TYPE_NORMAL
- en: Installing OpenSSH on Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we have to configure OpenSSH on Linux. We’re going to use my CentOS 7
    machine, which already has OpenSSH installed, but if we wanted to install it on
    an Ubuntu machine, we’d need to install it first with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Once OpenSSH is installed, we need to edit the `sshd_config` file at `/etc/ssh`.
    To do this, we need to start our text editor with `sudo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we save the file. Next, we need to restart the `sshd` service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'And then, we set it to start automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: And that’s us set up for remoting. Note that the final command may throw an
    error if it is already enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Running remote sessions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using remote sessions over SSH is just as easy as using them over WinRM, which
    we saw in [*Chapter 12*](B17600_12.xhtml#_idTextAnchor236), *Securing PowerShell*.
    We start out by creating a session object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that we’re using the `-HostName` parameter, not the `-ComputerName`
    parameter. This tells PowerShell to create an SSH session, not a WinRM one. We’ll
    be asked to input the user’s password, and then the session object is created.
    We can then use the variable containing the session object to start a remote session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll see the prompt change to reflect the machine that we are remoting into,
    and we are straight into a PowerShell session on that machine. To leave the session,
    we can just type `exit` and return to the local machine. This is how it looks
    in practice:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.12 – SSH remoting into a Linux server](img/B17600_14_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.12 – SSH remoting into a Linux server
  prefs: []
  type: TYPE_NORMAL
- en: 'The numbering in the preceding screenshot is explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In *line 1*, I’m creating a new session object and storing it in a variable.
    I’m passing the IP address of the remote machine because I haven’t set up name
    resolution. I’m also passing the username of a user on the remote machine who
    has the right to log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In *line 2*, I am asked for the remote user’s password; once it is provided,
    the session object is created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In *line 3*, I’m calling the `$session` variable, and the properties of the
    new session are displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In *line 4*, I’m passing the `$session` variable to `Enter-PSSession`, and I’m
    entering a remote session.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In *line 5*, we can see that the prompt has changed to `[nick@192.168.56.101]:
    PS /home/nick>`, which tells us I’m in a PowerShell session on the machine at
    `192.168.56.101` and I’m logged in as `nick`. The working directory is `/home/nick`.
    I’m running the `Get-Process` PowerShell cmdlet, looking for processes containing
    the `shell` string, and I get two `gnome` processes returned. This is definitely
    Linux – my CentOS 7 GUI box, to be precise. If we run it on Ubuntu, we may not
    see any processes at all if there is no GUI installed.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In *line 6*, I run the `hostname` Bash command, and the name of the remote
    system is returned: `localhost.localdomain`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In *line 7*, just so there is no doubt, we can see that the value of the `$IsLinux`
    automatic variable is `True`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, on *line 8*, I type `exit` and am returned to my local PowerShell session
    running on Windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The trouble is, I’ve used a username and password combination here, and many
    Linux machines will be set up to use key-based authentication. Let’s take a look
    at how we can set that up.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Key-based authentication is a more secure way of using SSH for PowerShell remoting.
    It also makes it easier to automate scripts, as once it is set up, no one needs
    to manually enter a password. Let’s look at how we can get it working.
  prefs: []
  type: TYPE_NORMAL
- en: 'PowerShell 7 includes a utility called `Ssh-keygen` that we can use to create
    a public/private key pair that we can use to authenticate ourselves to the remote
    machine. We can use it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: We’re asking PowerShell to generate a key pair using the Ed21559 algorithm,
    which is quite modern. Older systems may require that we use the RSA algorithm
    instead. We will be asked for a path to save the files to; it’s best to accept
    the default one by just pressing *Enter*. We will also be asked to enter a passphrase;
    again, this is optional, and we can just press *Enter* twice to save the files
    with no passphrase.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can save the public key onto the Linux machine in the `.ssh` directory
    of the user we want to log in with. PowerShell has another utility called `scp`
    that we can use to copy the file across (note that we might need to create a .`ssh`
    directory first):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'I’m using `scp` with two parameters here – the first is the path to the file
    we’ve created, and the second is the path we want it copied to. We’ll be asked
    to provide the password for the remote user again, but that’s the last time we’ll
    need to do that. Now, when we log in as that user, we will pass a hash of our
    private key on the local machine that pairs with the hash of the public key on
    the remote machine, and we will be recognized as the remote user. This is how
    it looks on my machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.13 – Setting up key-based authentication](img/B17600_14_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.13 – Setting up key-based authentication
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding screenshot, I’ve run the commands needed to set up key-based
    authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: In *line 1*, I am running `Ssh-keygen` to create my key pair.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In *line 2*, I’m accepting the default path by pressing *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In *line 3*, I’m setting a blank passphrase by pressing *Enter* twice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In *line 4*, I’m using `scp` to copy the public key across to the user `.ssh`
    directory on the remote machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In *line 5*, I’m providing the password – hopefully for the last time ever.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In *line 6*, I am storing a new session object in a variable called `$sessionSSH`.
    Notice that I am not providing a password, but I am providing the path to the
    private key in the `-``KeyFilePath` parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In *line 7*, I’m calling the variable to check the properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In *line 8*, I am entering the session using the `$``sessionSSH` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the final line, we can see that the prompt has changed to reflect that I
    am working in a remote session.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There’s an awful lot more to using SSH, but that is enough to get us started.
    Let’s move on to the final section of this chapter: *PowerShell* *for macOS*.'
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell for macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: macOS is very similar to Linux; both operating systems are based on elements
    of Unix, and many Linux programs can run on macOS without modifying the source
    code. The differences we will focus on here are how we install PowerShell and
    VS Code. I’ve used a friend’s MacBook, which is running Ventura (macOS 13). If
    anything, installing on macOS is even easier than installing on Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Homebrew on macOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Homebrew is a free open source package manager that works on Linux and macOS,
    but mostly we see it on macOS. It’s very easy to install and use, and it’s what
    we’re going to use to install PowerShell and VS Code on macOS. It’s a one-line
    installation. Open the terminal and type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: We’re passing a `curl` command to the `bash` shell here to download and run
    a Bash script from a URL. We’ll probably be asked to provide our password. macOS
    is just as chatty as Linux, but after a few minutes, we should see a message saying
    `Installation successful!`. Now, we’re ready to install PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PowerShell on macOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once we’ve got Homebrew installed, everything else is easy. To install PowerShell,
    we type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'And that’s it. We can start PowerShell by typing `pwsh` in the terminal. This
    is how it looks on Paul’s machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.14 – Installing PowerShell on macOS](img/B17600_14_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.14 – Installing PowerShell on macOS
  prefs: []
  type: TYPE_NORMAL
- en: In *line 1*, I’m installing PowerShell using Homebrew. In *line 2*, I’m starting
    PowerShell with `pwsh`, and in *line 3*, I’m calling `$PSVersionTable` to check
    what we’ve got.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll need to keep PowerShell updated. We can do that with these two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The first line updates the Homebrew database, and the second upgrades PowerShell
    based on the most recent information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, to uninstall PowerShell, we can just type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: However, I’ve no idea why we would want to do that. Let’s look at installing
    VS Code next.
  prefs: []
  type: TYPE_NORMAL
- en: Installing VS Code on macOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can use Homebrew to download and install VS Code using the following command,
    which updates the latest files for Homebrew:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'This installs the `cask` repository if it’s not already present:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'This searches for VS Code in the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'And this line installs it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use the launcher application to start VS Code, or we can add it to the
    `PATH` variable with this `cat` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: We can also install it by downloading it directly from [https://code.visualstudio.com/](https://code.visualstudio.com/)
    and double-clicking the downloaded file.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can uninstall VS Code by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: But I bet we won’t want to.
  prefs: []
  type: TYPE_NORMAL
- en: That’s it for this chapter. Let’s review what we’ve learned.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we saw that there is no standard way to install PowerShell
    and VS Code. We saw how to use package managers to install PowerShell 7 on Ubuntu
    and RHEL, and then used the direct download method to install on an older version
    of Linux: CentOS 7.'
  prefs: []
  type: TYPE_NORMAL
- en: After that, we looked at how we can install VS Code on Linux, with a practical
    example on CentOS 7, again.
  prefs: []
  type: TYPE_NORMAL
- en: We looked at a number of ways PowerShell on Linux differs from running PowerShell
    on Windows, including the filesystem, capitalization, and the use of aliases.
  prefs: []
  type: TYPE_NORMAL
- en: 'We spent some time on an important topic: how we can remote into Linux machines
    using SSH. The use of Linux as a desktop is rare, and the majority of work carried
    out on Linux machines is over remote sessions on SSH, whether that is with PowerShell
    or directly into a Bash terminal.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we had a quick tour of ways of installing PowerShell and VS Code on
    macOS. We saw that it was very easy to both install and uninstall these applications
    using the free open source package manager, Homebrew.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’re going to look at running PowerShell on a different
    processor, ARM, and the associated operating system, Raspbian.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Where would we go to get support installing PowerShell on Kali Linux?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which command are we calling when we type `ls` into a PowerShell session on
    Linux?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which file path separator does PowerShell use on Linux?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How could we easily tell if we were working on a macOS machine?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would we run a PowerShell script with root privileges in Linux?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which cmdlet and parameter would we use to create a new remote session to a
    Linux machine?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which cmdlet and parameter would we use to avoid having to send a password across
    the network?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does `scp` do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is Ed25519?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Install PowerShell* *on Linux*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-linux](https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-linux)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Installing PowerShell* *on Ubuntu*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://learn.microsoft.com/en-us/powershell/scripting/install/install-ubuntu](https://learn.microsoft.com/en-us/powershell/scripting/install/install-ubuntu)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Installing PowerShell on Red Hat Enterprise* *Linux (RHEL)*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://learn.microsoft.com/en-us/powershell/scripting/install/install-rhel](https://learn.microsoft.com/en-us/powershell/scripting/install/install-rhel)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Installing PowerShell* *on macOS*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-macos](https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-macos)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Running Visual Studio Code* *on macOS*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://code.visualstudio.com/docs/setup/mac](https://code.visualstudio.com/docs/setup/mac)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*PowerShell remoting* *over SSH*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://learn.microsoft.com/en-us/powershell/scripting/learn/remoting/ssh-remoting-in-powershell](https://learn.microsoft.com/en-us/powershell/scripting/learn/remoting/ssh-remoting-in-powershell)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Get started with OpenSSH* *for Windows*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse?tabs=gui](https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse?tabs=gui)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*OpenSSH Server configuration for Windows Server* *and Windows*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_server_configuration](https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_server_configuration)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
