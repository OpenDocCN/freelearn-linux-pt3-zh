["```\ndemo@ubuntu:~/includes$ TEST=(first second third fourth fifth)\ndemo@ubuntu:~/includes$ echo $TEST\nfirst\n```", "```\ndemo@ubuntu:~/includes$ echo ${TEST[@]}\nfirst second third fourth fifth\n```", "```\ndemo@ubuntu:~/includes$ echo ${TEST[*]}\nfirst second third fourth fifth\n```", "```\ndemo@ubuntu:~/includes$ echo ${TEST[2]}\nthird\ndemo@ubuntu:~/includes$ echo ${TEST[4]}\nfifth\n```", "```\ndemo@ubuntu:~/includes$ ORDER[2]=second\ndemo@ubuntu:~/includes$ ORDER[3]=third\n```", "```\ndemo@ubuntu:~/includes$ echo ${ORDER[*]}\nsecond third\n```", "```\ndemo@ubuntu:~/includes$ echo ${ORDER[0]}\ndemo@ubuntu:~/includes$ echo ${ORDER[1]}\n```", "```\n#!/bin/bash\n#we are declaring two arrays, one for the names, one for the #phone numbers\nNAMES=(John Luke \"Ivan from work\" Ida \"That guy\")\nNUMBERS=(12345 12344 113312 11111 122222)\n#now we need to pair them up:\nfor i in {0..4}\ndo\n              echo Name:${NAMES[i]} number:${NUMBERS[i]}\ndone\n```", "```\ndemo@ubuntu:~/variable$ bash pairs.sh \nName:John number:12345\nName:Luke number:12344\nName:Ivan from work number:113312\nName:Ida number:11111\nName:That guy number:122222\n```", "```\n#!/bin/bash\n#we are declaring two arrays, one for the names, one for the #phone numbers\nNAMES=(John Luke \"Ivan from work\" Ida \"That guy\")\nNUMBERS=(12345 12344 113312 11111 122222)\n#now we need to pair them up:\nfor i in {0..4}\ndo\n            if [ \"${NAMES[i]}\" == \"$1\" ]\n                          then\n                                       echo Name:${NAMES[i]} number:${NUMBERS[i]}\n            fi\ndone\n```", "```\ndemo@ubuntu:~/variable$ bash search.sh John\nName:John number:12345\ndemo@ubuntu:~/variable$ bash search.sh \ndemo@ubuntu:~/variable$\n```", "```\ndemo@ubuntu:~/variable$ declare -A NAMES\ndemo@ubuntu:~/variable$ NAMES[\"John\"]=12345\ndemo@ubuntu:~/variable$ NAMES[\"Luke\"]=12344\ndemo@ubuntu:~/variable$ NAMES[\"Ivan from work\"]=113312\n```", "```\ndemo@ubuntu:~/variable$ NAMES=([Ida]=11111 [\"That guy\"]=122222)\n```", "```\ndemo@ubuntu:~/variable$ echo ${NAMES[*]}\n11111 122222\n```", "```\ndemo@ubuntu:~/variable$ declare -A NAMES\ndemo@ubuntu:~/variable$ NAMES[\"John\"]=12345\ndemo@ubuntu:~/variable$ NAMES[\"Luke\"]=12344\ndemo@ubuntu:~/variable$ NAMES[\"Ivan from work\"]=113312\ndemo@ubuntu:~/variable$ echo ${NAMES[*]}\n113312 12344 12345\ndemo@ubuntu:~/variable$ NAMES=([Ida]=11111 [\"That guy\"]=122222)\ndemo@ubuntu:~/variable$ echo ${NAMES[*]}\n11111 122222\n```", "```\ndemo@ubuntu:~/variable$ NAMES[\"John\"]=12345\ndemo@ubuntu:~/variable$ NAMES[\"Ivan from work\"]=113312\ndemo@ubuntu:~/variable$ NAMES[\"Luke\"]=12344\ndemo@ubuntu:~/variable$ echo ${NAMES[*]}\n113312 11111 12344 12345 122222\n```", "```\ndemo@ubuntu:~/variable$ declare -A NAMES\ndemo@ubuntu:~/variable$ NAMES[\"John\"]=12345\ndemo@ubuntu:~/variable$ NAMES[\"Luke\"]=12344\ndemo@ubuntu:~/variable$ NAMES[\"Ivan from work\"]=113312\ndemo@ubuntu:~/variable$ NAMES+=([Ida]=11111 [\"That guy\"]=122222)\ndemo@ubuntu:~/variable$ echo ${NAMES[*]}\n113312 11111 12344 12345 122222\n```", "```\ndemo@ubuntu:~/variable$ echo ${NAMES[*]}\n113312 11111 12344 12345 122222\ndemo@ubuntu:~/variable$ unset NAMES[\"John\"]\ndemo@ubuntu:~/variable$ echo ${NAMES[*]}\n113312 11111 12344 122222\n```", "```\n#!/bin/bash\n#we are declaring one associative array for pairs of values: \ndeclare -A PAIRS\nPAIRS=([\"John\"]=12345 [\"Luke\"]=12344 [\"Ivan from work\"] =113312 \\\n[\"Ida\"]=11111 [\"That guy\"]=122222)\n#now we need to get them printed\nfor name in \"${!PAIRS[@]}\"\ndo\n              echo Name:\"$name\" number:${PAIRS[\"$name\"]} \ndone\n```", "```\ndemo@ubuntu:~/variable$ bash associative.sh \nName:Ivan from work number:113312\nName:Ida number:11111\nName:Luke number:12344\nName:John number:12345\nName:That guy number:122222\n```", "```\nUSER=demo\nCMD=testing\nHOSTNAME=demounit\n```", "```\ndemo@ubuntu:~/variable$ SOMEARRAY=(0 1 2 3 4 5)\ndemo@ubuntu:~/variable$ echo ${!SOMEARRAY[*]}\n0 1 2 3 4 5\ndemo@ubuntu:~/variable$ echo ${!SOMEARRAY[@]}\n0 1 2 3 4 5\n```", "```\ndemo@ubuntu:~/variable$ declare -A PAIRS\ndemo@ubuntu:~/variable$ PAIRS=([\"John\"]=12345 [\"Luke\"]=12344 [\"Ivan from work\"]=113312 [\"Ida\"]=11111 [\"That guy\"]=122222)\ndemo@ubuntu:~/variable$ echo ${!PAIRS[@]}\nIvan from work Ida Luke John That guy\ndemo@ubuntu:~/variable$ echo ${!PAIRS[*]}\nIvan from work Ida Luke John That guy\n```", "```\n#!/bin/bash\ndeclare -A PAIRS\nPAIRS=([\"John\"]=12345 [\"Luke\"]=12344 [\"Ivan from work\"] =113312 \\\n[\"Ida\"]=11111 [\"That guy\"]=122222)\n#now we are going to print keys, once using @ and then using \\\n#*\necho \"for first example we are using @ sign\"\nfor name in \"${!PAIRS[@]}\"\ndo\n             echo Number: ${PAIRS[\"$name\"]}\n             echo Name: \"$name\"\n             echo\ndone\necho --------------------------\necho \"then we are using * sign\"\nfor name in \"${!PAIRS[*]}\"\ndo\n        echo Number: ${PAIRS[\"$name\"]}\n             echo Name: \"$name\"\n             echo\ndone\n```", "```\ndemo@ubuntu:~/variable$ bash arrayops.sh \nfor first example we are using @ sign\nNumber: 113312\nName: Ivan from work\nNumber: 11111\nName: Ida\nNumber: 12344\nName: Luke\nNumber: 12345\nName: John\nNumber: 122222\nName: That guy\n--------------------------\nthen we are using * sign\nNumber:\nName: Ivan from work Ida Luke John That guy\n```", "```\ndemo@ubuntu:~/variable$ declare -p PAIRS\ndeclare -A PAIRS=([\"Ivan from work\"]=\"113312\" [Ida]=\"11111\" [Luke]=\"12344\" [John]=\"12345\" [\"That guy\"]=\"122222\" )\n```", "```\ndemo@ubuntu:~/variable$ declare -p PAIRS > PAIRS.save\n```", "```\ndemo@ubuntu:~/variable$ unset PAIRS\ndemo@ubuntu:~/variable$ echo ${!PAIRS[@]}\n```", "```\ndemo@ubuntu:~/variable$ source PAIRS.save \ndemo@ubuntu:~/variable$ echo ${!PAIRS[@]}\nIvan from work Ida Luke John That guy\n```", "```\ndemo@ubuntu:~/variable$ REGULAR=( zero one two three five four \\\n)\ndemo@ubuntu:~/variable$ echo ${REGULAR[@]}\nzero one two three five four\n```", "```\ndemo@ubuntu:~/variable$ shuf -e \"${REGULAR[@]}\"\nthree\none\nzero\nfive\ntwo\nfour\n```", "```\ndemo@ubuntu:~/variable$ REGULAR=( zero one two three four five \\\n)\ndemo@ubuntu:~/variable$ echo ${REGULAR[*]} \nzero one two three four five\ndemo@ubuntu:~/variable$ echo ${REGULAR[*]:2:3}\ntwo three four\ndemo@ubuntu:~/variable$ echo ${REGULAR[*]:0:3}\nzero one two\ndemo@ubuntu:~/variable$ echo ${REGULAR[*]:0:}\ndemo@ubuntu:~/variable$ echo ${REGULAR[*]:0:2}\nzero one\ndemo@ubuntu:~/variable$ echo ${REGULAR[*]:3}\nthree four five\ndemo@ubuntu:~/variable$ echo ${REGULAR[*]:2}\ntwo three four five\ndemo@ubuntu:~/variable$ echo ${REGULAR[*]:2:-2}\nbash: -2: substring expression < 0\n```", "```\ndemo@ubuntu:~/variable$ ANOTHER=(sixth seventh eighth ninth)\ndemo@ubuntu:~/variable$ NEW=\"${REGULAR[*]} ${ANOTHER[*]}\"\ndemo@ubuntu:~/variable$ echo ${NEW[*]}\nzero one two three four five sixth seventh eighth ninth\ndemo@ubuntu:~/variable$ echo ${NEW[@]}\nzero one two three four five sixth seventh eighth ninth\n```", "```\ndemo@ubuntu:~/variable$ echo ${#REGULAR[@]}\n6\ndemo@ubuntu:~/variable$ echo ${#ANOTHER[@]}\n4\ndemo@ubuntu:~/variable$ echo ${#NEW[@]}\n1\n```", "```\ndemo@ubuntu:~/variable$ NEW=(${REGULAR[*]} ${ANOTHER[*]})\ndemo@ubuntu:~/variable$ echo ${#NEW[@]}\n10\ndemo@ubuntu:~/variable$ NEW=(${REGULAR[@]} ${ANOTHER[@]})\ndemo@ubuntu:~/variable$ echo ${#NEW[@]}\n10\ndemo@ubuntu:~/variable$ declare -p NEW\ndeclare -a NEW=([0]=\"zero\" [1]=\"one\" [2]=\"two\" [3]=\"three\" [4]=\"four\" [5]=\"five\" [6]=\"sixth\" [7]=\"seventh\" [8]=\"eighth\" [9]=\"ninth\")\n```", "```\ndemo@ubuntu:~/variable$ NEW=(\"${REGULAR[@]} ${ANOTHER[@]}\")\ndemo@ubuntu:~/variable$ echo ${#NEW[@]}\n9\ndemo@ubuntu:~/variable$ declare -p NEW\ndeclare -a NEW=([0]=\"zero\" [1]=\"one\" [2]=\"two\" [3]=\"three\" [4]=\"four\" [5]=\"five sixth\" [6]=\"seventh\" [7]=\"eighth\" [8]=\"ninth\")\n```", "```\ndemo@ubuntu:~/variable$ TEST1=()\ndemo@ubuntu:~/variable$ declare -p TEST1\ndeclare -a TEST1=()\ndemo@ubuntu:~/variable$ declare -p TEST2\nbash: declare: TEST2: not found\ndemo@ubuntu:~/variable$ echo ${#TEST1[@]}\n0\ndemo@ubuntu:~/variable$ echo ${#TEST2[@]}\n0\n```", "```\ndemo@ubuntu:~/variable$ [[ ${REGULAR[*]} =~ \"one\" ]] && echo \\\nyes || echo no\nyes\ndemo@ubuntu:~/variable$ [[ ${REGULAR[*]} =~ \"something\" ]] && \\\necho yes || echo no\nno\n```", "```\n        #!/bin/bash\n        #check if settings exist\n                   function checkfile {\n               if [ -f setting.list ] \n                          then\n                                         return 0\n                          else.\n                                      return 1\n                                       fi\n}\nfunction assign_settings {\n             echo assigning settings\n             SETTINGS=([\"USER\"]=John [\"LOCALDIR\"]=$PWD \\\n[\"HOSTNAME\"]=hostname)\n\n}\ndeclare -A SETTINGS\nSETTINGS=()\nif checkfile\nthen \n             source setting.list\nelse \n             assign_settings\nfi\necho Settings are:\nfor name in \"${!SETTINGS[@]}\"\ndo\n             echo \"$name\"=${SETTINGS[\"$name\"]}\ndone\ndeclare -p SETTINGS > setting.list\n```", "```\ndemo@ubuntu:~/variable$ bash settings.sh \nassigning settings\nSettings are:\nUSER=John\nHOSTNAME=hostname\nLOCALDIR=/home/demo/variable\ndemo@ubuntu:~/variable$ bash settings.sh \nSettings are:\nUSER=John\nHOSTNAME=hostname\nLOCALDIR=/home/demo/variable\n```"]