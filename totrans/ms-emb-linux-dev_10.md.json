["```\n$ git clone git://git.yoctoproject.org/meta-xilinx \n```", "```\nBBLAYERS ?= \" \\\n  /home/frank/poky/meta \\\n  /home/frank/poky/meta-poky \\\n  /home/frank/poky/meta-yocto-bsp \\\n  \" \n```", "```\nBBLAYERS ?= \" \\\n  /home/frank/poky/meta \\\n  /home/frank/poky/meta-poky \\\n  /home/frank/poky/meta-yocto-bsp \\\n  /home/frank/meta-mine \\\n  /home/frank/build-mine/workspace \\\n  \" \n```", "```\n$ tree meta-example\nmeta-example\n├── classes\n│ ├── class-a.bbclass\n│ ├── ...\n│ └── class-z.bbclass\n├── conf\n│ └── layer.conf\n├── COPYING.MIT\n├── README\n├── recipes-a\n│ ├── package-a\n│ │ └── package-a_0.1.bb\n│ ├── ...\n│ └── package-z\n│ └── package-z_0.1.bb\n├── recipes-b\n│ └── ...\n└── recipes-c\n └── ... \n```", "```\n    $ source poky/oe-init-build-env build-rpi \n    ```", "```\n    $ bitbake-layers show-recipes \n    ```", "```\n    $ find ../poky -name \"*connman*.bb*\" \n    ```", "```\n    $ bitbake -c listtasks connman \n    ```", "```\n    $ bitbake -c clean connman && bitbake connman \n    ```", "```\n    $ bitbake -e | less \n    ```", "```\n    DISTRO_FEATURES=\"acl alsa argp bluetooth ext2 ipv4 ipv6 largefile pcmcia usbgadget usbhost wifi xattr nfs zeroconf pci 3g nfc x11 vfat largefile opengl ptest multiarch wayland vulkan pulseaudio sysvinit gobject-introspection-data ldconfig\" \n    ```", "```\n    $ bitbake -e busybox | grep ^S= \n    ```", "```\n    $ bitbake-getvar -r connman WORKDIR \n    ```", "```\n$ bitbake -e core-image-minimal | grep ^S= \n```", "```\n$ ./tmp-glibc/work/cortexa72-oe-linux/connman/1.42/temp \n```", "```\nbb.plain -> none; Output: logs console\nbb.note -> logger.info; Output: logs\nbb.warn -> logger.warning; Output: logs console\nbb.error -> logger.error; Output: logs console\nbb.fatal -> logger.critical; Output: logs console\nbb.debug -> logger.debug; Output: logs console \n```", "```\nbbplain -> Prints exactly what is passed in. Use sparingly.\nbbnote -> Prints noteworthy conditions with the NOTE prefix.\nbbwarn -> Prints a non-fatal warning with the WARNING prefix.\nbberror -> Prints a non-fatal error with the ERROR prefix.\nbbfatal -> Prints a fatal error and halts the build.\nbbdebug -> Prints debug messages depending on log level. \n```", "```\n# Usage: bbdebug 1 \"first level debug message\"\n# bbdebug 2 \"second level debug message\nbbdebug () {\n    USAGE = 'Usage: bbdebug [123] \"message\"'\n    …\n} \n```", "```\n$ sudo apt install tmux \n```", "```\n$ bitbake -c devshell connman \n```", "```\n$ bitbake -v connman \n```", "```\n$ bitbake -g connman -u taskexp \n```", "```\ndo_deploy () {\n    install ${B}/src/boot/efi/systemd-boot*.efi ${DEPLOYDIR}\n}\naddtask deploy before do_build after do_compile \n```", "```\ndeltask do_deploy \n```", "```\ndo_patch[postfuncs] += \"copy_sources\"\ndo_package_index[depends] += \"signing-keys:do_deploy\"\ndo_rootfs[recrdeptask] += \"do_package_write_deb do_package_qa\" \n```", "```\ndo_package[deptask] += \"do_packagedata\" \n```", "```\ndo_patch[depends] += \"quilt-native:do_populate_sysroot\" \n```", "```\ndo_package_qa[rdeptask] = \"do_packagedata\" \n```", "```\nOLDPKGNAME = \"dbus-x11\"\nPROVIDES:${PN} = \"${OLDPKGNAME}\" \n```", "```\nPREFERRED_PROVIDER_virtual/kernel ?= \"linux-yocto\" \n```", "```\nTOOLCHAIN_TEST_HOST ??= \"localhost\" \n```", "```\ntarget_datadir := \"${datadir}\" \n```", "```\nCXXFLAGS += \"-std=c++11\"\nPACKAGES =+ \"gdbserver\" \n```", "```\nBBPATH .= \":${LAYERDIR}\"\nFILESEXTRAPATHS =. \"${FILE_DIRNAME}/systemd:\" \n```", "```\nCFLAGS:append = \" -DSQLITE_ENABLE_COLUMN_METADATA\"\nPROVIDES:prepend = \"${PN}\" \n```", "```\nVALGRINDARCH ?= \"${TARGET_ARCH}\"\nVALGRINDARCH:aarch64 = \"arm64\"\nVALGRINDARCH:x86-64 = \"amd64\" \n```", "```\nEXTRA_OEMAKE:prepend:task-compile = \"${PARALLEL_MAKE} \"\nEXTRA_OEMAKE:prepend:task-install = \"${PARALLEL_MAKEINST} \"\nDEPENDS = \"attr libaio libcap acl openssl zip-native\"\nDEPENDS:append:libc-musl = \" fts \"\nEXTRA_OECONF:append:libc-musl = \" LIBS=-lfts \"\nEXTRA_OEMAKE:append:libc-musl = \" LIBC=musl \" \n```", "```\nPV = \"${@bb.parse.vars_from_file(d.getVar('FILE', False),d)[1] or '1.0'}\"\nBOOST_MAJ = \"${@\"_\".join(d.getVar(\"PV\").split(\".\")[0:2])}\"\nGO_PARALLEL_BUILD ?= \"${@oe.utils.parallel_make_argument(d, '-p %d')}\" \n```", "```\nmeson_do_install() {\n    DESTDIR='${D}' ninja -v ${PARALLEL_MAKEINST} install\n} \n```", "```\ndef get_noinst_tools_paths (d, bb, tools):\n    s = list()\n    bindir = d.getVar(\"bindir\")\n    for bdp in tools.split():\n        f = os.path.basename(bdp)\n        s.append(\"%s/%s\" % (bindir, f))\n    return \"\\n\".join(s) \n```", "```\nFILES:${PN}-noinst-tools = \\\n\"${@get_noinst_tools_paths(d, bb, d.getVar('NOINST_TOOLS'))}\" \n```", "```\npython sign_rpm () {\n    import glob\n    from oe.gpg_sign import get_signer\n    signer = get_signer(d, d.getVar('RPM_GPG_BACKEND'))\n    rpms = glob.glob(d.getVar('RPM_PKGWRITEDIR') + '/*')\n    signer.sign_rpms(rpms,\n                     d.getVar('RPM_GPG_NAME'),\n                     d.getVar('RPM_GPG_PASSPHRASE'),\n                     d.getVar('RPM_FILE_CHECKSUM_DIGEST'),\n                     int(d.getVar('RPM_GPG_SIGN_CHUNK')),\n                     d.getVar('RPM_FSK_PATH'),\n                     d.getVar('RPM_FSK_PASSWORD'))\n} \n```", "```\npython __anonymous () {\n    systemd_packages = \"${PN} ${PN}-wait-online\"\n    pkgconfig = d.getVar('PACKAGECONFIG')\n    if ('openvpn' or 'vpnc' or 'l2tp' or 'pptp') in pkgconfig.split():\n        systemd_packages += \" ${PN}-vpn\"\n    d.setVar('SYSTEMD_PACKAGES', systemd_packages)\n}\npython () {\n    packages = d.getVar('PACKAGES').split()\n    if d.getVar('PACKAGEGROUP_DISABLE_COMPLEMENTARY') != '1':\n        types = ['', '-dbg', '-dev']\n        if bb.utils.contains('DISTRO_FEATURES', 'ptest', True, False, d):\n            types.append('-ptest')\n        packages = [pkg + suffix for pkg in packages\n                    for suffix in types]\n        d.setVar('PACKAGES', ' '.join(packages))\n    for pkg in packages:\n        d.setVar('ALLOW_EMPTY_%s' % pkg, '1')\n} \n```", "```\ndo_sdk_depends[rdepends] = \"${@get_sdk_ext_rdepends(d)}\" \n```", "```\ndef get_sdk_ext_rdepends(d):\n    localdata = d.createCopy()\n    localdata.appendVar('OVERRIDES', ':task-populate-sdk-ext')\n    return localdata.getVarFlag('do_populate_sdk', 'rdepends') \n```", "```\nSDK_EXT:task-populate-sdk-ext = \"-ext\"\nSDK_DIR:task-populate-sdk-ext = \"${WORKDIR}/sdk-ext\" \n```"]