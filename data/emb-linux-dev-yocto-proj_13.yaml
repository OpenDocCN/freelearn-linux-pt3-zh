- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Customizing Existing Recipes
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义现有食谱
- en: In the course of our work with Yocto Project’s tools, it is expected that we
    will need to customize existing recipes. In this chapter, we will explore some
    examples, such as changing compilation options, enabling or disabling features
    of a recipe, applying an extra patch, and using configuration fragments to customize
    some recipes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Yocto 项目工具的过程中，预计我们需要自定义现有的食谱。在本章中，我们将探讨一些示例，例如更改编译选项、启用或禁用食谱的功能、应用额外的补丁，以及使用配置片段来自定义一些食谱。
- en: Understanding common use cases
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解常见的使用案例
- en: Nowadays, projects usually have a set of layers to provide the required features.
    We certainly need to make changes on top of them to adapt them to our specific
    needs. They may be cosmetic or substantive changes, but the way to make them is
    the same.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，项目通常会有一组层来提供所需的功能。我们肯定需要在这些层的基础上进行更改，以适应我们的特定需求。这些更改可能是外观上的，也可能是实质性的，但实现方法是相同的。
- en: 'We must create a `.bbappend` file to change a preexisting recipe in our project
    layer. For example, suppose the original recipe was named `<original-layer>/recipes-core/app/app_1.2.3.bb`.
    When you create a `.bbappend` file, you can use the `%` wildcard character to
    allow for matching recipe names. So, the `.bbappend` file could have the following
    different forms:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须创建一个 `.bbappend` 文件来更改项目层中的现有食谱。例如，假设原始食谱名为 `<original-layer>/recipes-core/app/app_1.2.3.bb`。当你创建一个
    `.bbappend` 文件时，可以使用 `%` 通配符来匹配食谱名称。因此，`.bbappend` 文件可以有以下不同的形式：
- en: '`App_1.2.3.bbappend`: This applies the change only for the `1.2.3` version'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App_1.2.3.bbappend`：这只适用于 `1.2.3` 版本'
- en: '`app_1.2.%.bbappend`: This applies the change only for the `1.2.y` version'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app_1.2.%.bbappend`：这只适用于 `1.2.y` 版本'
- en: '`app_1.%.bbappend`: This applies the change only for the `1.x` and `1.x.y`
    versions'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app_1.%.bbappend`：这只适用于 `1.x` 和 `1.x.y` 版本'
- en: '`app_%.bbappend`: This applies the change for any version'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app_%.bbappend`：这适用于任何版本'
- en: We can have multiple `.bbappend` files, depending on the intended changes we
    want to apply to the app recipe. Sometimes we can restrict the changes to one
    version, but sometimes, we want to change all available recipes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以有多个 `.bbappend` 文件，具体取决于我们希望对应用食谱进行的更改。有时我们可以将更改限制在某个版本，但有时我们希望更改所有可用的食谱。
- en: Note
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When there is more than one `.bbappend` file for a recipe, all of them are joined
    following the layer’s priority order.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个食谱有多个 `.bbappend` 文件时，所有文件都会按照层的优先级顺序合并。
- en: The `.bbappend` file can be seen as a text appended at the end of the original
    recipe. It empowers us with a highly flexible mechanism to avoid duplicating source
    code to apply the required changes to our project’s layers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`.bbappend` 文件可以看作是附加在原始食谱末尾的文本。它为我们提供了一个高度灵活的机制，避免了重复源代码来应用所需的更改到项目的层。'
- en: Extending a task
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展任务
- en: 'When the task content does not satisfy our requirements, we replace it (providing
    our implementation) or append it. As we will learn more extensively about the
    BitBake metadata syntax in [*Chapter 8*](B19361_08.xhtml#_idTextAnchor110), *Diving
    into BitBake Metadata*, the `:append` and `:prepend` operators can extend a task
    with extra content. For example, to extend a `do_install` task, we can use the
    following code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当任务内容无法满足我们的要求时，我们会替换它（提供我们自己的实现）或附加内容。正如我们在[*第 8 章*](B19361_08.xhtml#_idTextAnchor110)《深入了解
    BitBake 元数据》中将更广泛地学习 BitBake 元数据语法一样，`:append` 和 `:prepend` 运算符可以用来扩展任务并加入额外内容。例如，要扩展
    `do_install` 任务，我们可以使用以下代码：
- en: '![Figure 13.1 – Example on how to extend the do_install task](img/Figure_13.01_B19361.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.1 – 扩展 do_install 任务的示例](img/Figure_13.01_B19361.jpg)'
- en: Figure 13.1 – Example on how to extend the do_install task
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.1 – 扩展 do_install 任务的示例
- en: This way, the new content is concatenated in the original task.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，新的内容就会连接到原始任务中。
- en: Adding extra options to recipes based on Autotools
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于 Autotools 向食谱添加额外选项
- en: 'Let’s assume we have Autotools-based application, along with a preexisting
    recipe for it, and we want to do the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个基于 Autotools 的应用程序，并且有一个现有的食谱，我们希望执行以下操作：
- en: Enable `my-feature`
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用 `my-feature`
- en: Disable `another-feature`
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用 `another-feature`
- en: 'The content of the `.bbappend` file to make the changes will be the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 用于修改的 `.bbappend` 文件内容如下：
- en: '![Figure 13.2 – Adding extra configuration to the Autoconf flags](img/Figure_13.02_B19361.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.2 – 向 Autoconf 标志添加额外配置](img/Figure_13.02_B19361.jpg)'
- en: Figure 13.2 – Adding extra configuration to the Autoconf flags
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.2 – 向 Autoconf 标志添加额外配置
- en: 'The same strategy can be used if we need to enable it conditionally based on
    the hardware we are building for, as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要根据构建的硬件有条件地启用它，同样的策略也可以使用，具体如下：
- en: '![Figure 13.3 – Conditionally adding extra configuration to the Autoconf flags](img/Figure_13.03_B19361.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图13.3 – 有条件地添加额外的配置到Autoconf标志](img/Figure_13.03_B19361.jpg)'
- en: Figure 13.3 – Conditionally adding extra configuration to the Autoconf flags
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.3 – 有条件地添加额外的配置到Autoconf标志
- en: 'The Yocto Project supports many different build systems, and the variables
    to configure them are shown in the following table:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Yocto项目支持多种不同的构建系统，配置它们的变量如下表所示：
- en: '| **Build System** | **Variable** |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| **构建系统** | **变量** |'
- en: '| Autotools | `EXTRA_OECONF` |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| Autotools | `EXTRA_OECONF` |'
- en: '| Cargo | `EXTRA_OECARGO` |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| Cargo | `EXTRA_OECARGO` |'
- en: '| CMake | `EXTRA_OECMAKE` |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| CMake | `EXTRA_OECMAKE` |'
- en: '| Make | `EXTRA_OEMAKE` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| Make | `EXTRA_OEMAKE` |'
- en: '| Meson | `EXTRA_OEMESON` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| Meson | `EXTRA_OEMESON` |'
- en: '| NPM | `EXTRA_OENPM` |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| NPM | `EXTRA_OENPM` |'
- en: '| SCons | `EXTRA_OESCONS` |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| SCons | `EXTRA_OESCONS` |'
- en: '| WAF | `EXTRA_OEWAF` |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| WAF | `EXTRA_OEWAF` |'
- en: Table 13.1 – The list of variables to configure each build system
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 表13.1 – 配置每个构建系统的变量列表
- en: The variables from *Table 13.1* are given as arguments for the respective build
    system.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*表13.1*中的变量作为各自构建系统的参数传递。'
- en: Applying a patch
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用补丁
- en: 'For cases where we need to apply a patch to an existing package, we should
    use `FILESEXTRAPATHS`, which includes new directories in the searching algorithm,
    making the additional file visible to BitBake, as shown here:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在需要对现有软件包应用补丁的情况下，我们应使用`FILESEXTRAPATHS`，该变量会将新目录包含到搜索算法中，使额外的文件对BitBake可见，如下所示：
- en: '![Figure 13.4 – The content of .bbappend is used only to apply mypatch.patch](img/Figure_13.04_B19361.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图13.4 – .bbappend文件内容仅用于应用mypatch.patch](img/Figure_13.04_B19361.jpg)'
- en: Figure 13.4 – The content of .bbappend is used only to apply mypatch.patch
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.4 – .bbappend文件内容仅用于应用mypatch.patch
- en: In the preceding example, `THISDIR` expands to the current directory, and `PN`
    and `PV` expand to the package name and version, respectively. This new path is
    then included in the directories list used for file searching. The prepend operator
    is crucial as it guarantees that the file is picked from this directory, even
    if a file with the same name is added in the lower priority layers in the future.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`THISDIR`展开为当前目录，`PN`和`PV`分别展开为软件包名称和版本。然后，这个新路径会被包含到用于文件搜索的目录列表中。预处理操作符至关重要，因为它保证即使未来在优先级较低的层中添加了相同名称的文件，文件仍然会从此目录中被选中。
- en: BitBake assumes that every file with a `.patch` or `.diff` extension is a patch
    and applies them accordingly.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake假定每个`.patch`或`.diff`扩展名的文件都是补丁文件，并会相应地应用它们。
- en: Adding extra files to the existing packages
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向现有软件包添加额外的文件
- en: 'If we need to include an additional configuration file, we should use `FILESEXTRAPATHS`,
    as explained in the previous example and shown in the following lines of code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要包含额外的配置文件，应使用`FILESEXTRAPATHS`，正如之前示例中所解释的，并在以下代码行中展示：
- en: '![Figure 13.5 – The content of the .bbappend file to install a new configuration
    file](img/Figure_13.05_B19361.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图13.5 – 安装新配置文件的.bbappend文件内容](img/Figure_13.05_B19361.jpg)'
- en: Figure 13.5 – The content of the .bbappend file to install a new configuration
    file
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.5 – 安装新配置文件的.bbappend文件内容
- en: The `do_install:append` function appends the provided block below the metadata
    already available in the original `do_install` function. It includes the command
    to copy our new configuration file into the package’s filesystem. The file is
    copied from `${WORKDIR}` to `${D}` as these are the directories used by Poky to
    build the package and the destination directory used by Poky to create the package.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`do_install:append`函数将提供的代码块追加到原始`do_install`函数中已存在的元数据下方。它包括将新配置文件复制到软件包的文件系统中的命令。文件从`${WORKDIR}`复制到`${D}`，因为这两个目录是Poky用于构建软件包的目录，也是Poky用于创建软件包的目标目录。'
- en: There are many variables to define paths in our recipes, such as `bindir`, `datadir`,
    and `sysconfdir`. The `poky/meta/conf/bitbake.conf` file defines all those commonly
    used variables. The variables exist, so the installation paths of binaries can
    be customized depending on the use case. For example, the native SDK binaries
    require a specific installation path, so the binaries don’t conflict with the
    target ones.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的配方中，有许多变量用来定义路径，例如 `bindir`、`datadir` 和 `sysconfdir`。`poky/meta/conf/bitbake.conf`
    文件定义了所有这些常用变量。这些变量的存在使得可以根据使用场景自定义二进制文件的安装路径。例如，本地 SDK 二进制文件需要特定的安装路径，以避免与目标二进制文件发生冲突。
- en: 'The following table shows the most common variables and their default expanded
    values:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了最常用的变量及其默认展开值：
- en: '| **Variable** | **Default** **Expanded Value** |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| **变量** | **默认展开值** |'
- en: '| `base_bindir` | `/``bin` |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `base_bindir` | `/``bin` |'
- en: '| `base_sbindir` | `/``sbin` |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `base_sbindir` | `/``sbin` |'
- en: '| `sysconfdir` | `/``etc` |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `sysconfdir` | `/``etc` |'
- en: '| `localstatedir` | `/``var` |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `localstatedir` | `/``var` |'
- en: '| `datadir` | `/``usr/share` |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `datadir` | `/``usr/share` |'
- en: '| `bindir` | `/``usr/bin` |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `bindir` | `/``usr/bin` |'
- en: '| `sbindir` | `/``usr/sbin` |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `sbindir` | `/``usr/sbin` |'
- en: '| `libdir` | `/usr/lib` or `/usr/lib64` |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `libdir` | `/usr/lib` 或 `/usr/lib64` |'
- en: '| `libexecdir` | `/``usr/libexec` |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `libexecdir` | `/``usr/libexec` |'
- en: '| `includedir` | `/``usr/include` |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `includedir` | `/``usr/include` |'
- en: Table 13.2 – The list of commonly used variables and their default expanded
    value
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 表 13.2 – 常用变量及其默认展开值的列表
- en: The use of hard coded paths in recipes should be avoided, so we reduce the risk
    of misconfiguration. For example, when using the `usrmerge` `DISTRO_FEATURE`,
    behind the scenes, all recipes set `base_bindir` as `bindir`, so if a recipe uses
    `/bin` as a hard coded path, the installation won’t happen as expected.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 配方中应避免使用硬编码路径，以减少配置错误的风险。例如，当使用 `usrmerge` `DISTRO_FEATURE` 时，所有配方都会将 `base_bindir`
    设置为 `bindir`，因此如果某个配方使用 `/bin` 作为硬编码路径，安装将无法按预期进行。
- en: Understanding file searching paths
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解文件搜索路径
- en: 'When a file (a patch or a generic file) is included in `SRC_URI`, BitBake searches
    for the `FILESPATH` and `FILESEXTRAPATH` variables. The default setting is to
    look in the following locations:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个文件（如补丁或通用文件）被包含在`SRC_URI`中时，BitBake 会搜索 `FILESPATH` 和 `FILESEXTRAPATH` 变量。默认设置是查找以下位置：
- en: '`<``recipe>-<version>/`'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<``recipe>-<version>/`'
- en: '`<``recipe>/`'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<``recipe>/`'
- en: '`files/`'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`files/`'
- en: 'In addition to this, it also checks for `OVERRIDES` for a specific file to
    be overridden in each folder. To illustrate this, consider the `foo_1.0.bb` recipe.
    The `OVERRIDES = "<board>:<arch>"` variable for the file will be searched in the
    following directories, respecting the exact order shown:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，它还会检查每个文件在每个文件夹中是否有要覆盖的`OVERRIDES`。为了说明这一点，考虑`foo_1.0.bb`配方。对于该文件，`OVERRIDES
    = "<board>:<arch>"`变量将在以下目录中按精确顺序进行搜索：
- en: '`foo-1.0/<board>/`'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`foo-1.0/<board>/`'
- en: '`foo-1.0/<arch>/`'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`foo-1.0/<arch>/`'
- en: '`foo-1.0/`'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`foo-1.0/`'
- en: '`foo/<board>/`'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`foo/<board>/`'
- en: '`foo/<arch>/`'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`foo/<arch>/`'
- en: '`foo/`'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`foo/`'
- en: '`files/<board>/`'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`files/<board>/`'
- en: '`files/<arch>/`'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`files/<arch>/`'
- en: '`files/`'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`files/`'
- en: 'This is just illustrative as the list of `OVERRIDES` is huge and machine-specific.
    When we work with our recipe, we can use `bitbake-getvar OVERRIDES` to find the
    complete list of available overrides for a specific machine and use them accordingly.
    See the Poky output as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅仅是举例，因为 `OVERRIDES` 的列表庞大且与机器相关。当我们使用配方时，可以使用 `bitbake-getvar OVERRIDES` 查找特定机器的可用覆盖项列表，并相应地使用它们。以下是
    Poky 的输出示例：
- en: '![Figure 13.6 – Using bitbake-getvar to get the value of the OVERRIDES variable](img/Figure_13.06_B19361.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.6 – 使用 bitbake-getvar 获取 OVERRIDES 变量的值](img/Figure_13.06_B19361.jpg)'
- en: Figure 13.6 – Using bitbake-getvar to get the value of the OVERRIDES variable
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.6 – 使用 bitbake-getvar 获取 OVERRIDES 变量的值
- en: This command is quite useful for debugging the metadata during the debugging
    process.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令在调试过程中非常有用，可以帮助调试元数据。
- en: Changing recipe feature configuration
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改配方功能配置
- en: '`PACKAGECONFIG` is a mechanism to simplify feature set customization for recipes.
    It provides a way to enable and disable the recipe features. For example, the
    recipe has the following configuration:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`PACKAGECONFIG` 是一种简化配方功能集定制的机制。它提供了一种启用和禁用配方功能的方法。例如，配方有如下配置：'
- en: '![Figure 13.7 – Example of PACKAGECONFIG](img/Figure_13.07_B19361.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.7 – PACKAGECONFIG 示例](img/Figure_13.07_B19361.jpg)'
- en: Figure 13.7 – Example of PACKAGECONFIG
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.7 – PACKAGECONFIG 示例
- en: '*Figure 13**.7* has two features: `feature1` and `feature2`. The behavior of
    each feature is defined by six arguments, separated by commas. You can omit any
    argument but must retain the separating commas. The order is essential and specifies
    the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13.7* 有两个功能：`feature1` 和 `feature2`。每个功能的行为由六个参数定义，参数之间用逗号分隔。您可以省略任何参数，但必须保留分隔逗号。顺序至关重要，指定如下：'
- en: Extra arguments if the feature is enabled.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果启用了该功能，额外的参数。
- en: Extra arguments if the feature is disabled.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果功能被禁用，额外的参数。
- en: Additional build dependencies (`DEPENDS`) if the feature is enabled.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果启用了该功能，额外的构建依赖项（`DEPENDS`）。
- en: Additional runtime dependencies (`RDEPENDS`) if the feature is enabled.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果启用了该功能，额外的运行时依赖项（`RDEPENDS`）。
- en: Additional runtime recommendations (`RRECOMMENDS`) if the feature is enabled.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果启用了该功能，额外的运行时推荐项（`RRECOMMENDS`）。
- en: Any conflicting (mutually exclusive) `PACKAGECONFIG` settings for this feature.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该功能的任何冲突（互斥）`PACKAGECONFIG` 设置。
- en: 'We can create a `.bbappend` file that expands the `PACKAGECONFIG` variable’s
    default value to enable `feature2` as well, as shown here:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个 `.bbappend` 文件，扩展 `PACKAGECONFIG` 变量的默认值，以启用 `feature2`，如下面所示：
- en: '![Figure 13.8 – The content of a .bbappend file to expand the PACKAGECONFIG
    variable](img/Figure_13.08_B19361.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.8 – 用于扩展 PACKAGECONFIG 变量的 .bbappend 文件内容](img/Figure_13.08_B19361.jpg)'
- en: Figure 13.8 – The content of a .bbappend file to expand the PACKAGECONFIG variable
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.8 – 用于扩展 PACKAGECONFIG 变量的 .bbappend 文件内容
- en: Note
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To add the same feature to the `build/conf/local.conf` file, we can use `PACKAGECONFIG:pn-<recipename>:append
    = '` `feature2'`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要将相同的功能添加到 `build/conf/local.conf` 文件中，我们可以使用 `PACKAGECONFIG:pn-<recipename>:append
    = '` `feature2'`。
- en: The list of available `PACKAGECONFIG` features for a specific package must be
    checked inside the recipe file, as there is no tool to list them all.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 必须在配方文件中检查特定包的可用 `PACKAGECONFIG` 功能列表，因为没有工具可以列出所有功能。
- en: Configuration fragments for Kconfig-based projects
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于 Kconfig 的项目的配置片段
- en: The Kconfig configuration infrastructure has become popular due to its flexibility
    and expressiveness. Although it started with Linux kernel, some other projects
    use the same infrastructure, such as U-Boot and BusyBox.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Kconfig 配置基础设施因其灵活性和表现力而受到欢迎。尽管它最初用于 Linux 内核，但一些其他项目也使用相同的基础设施，例如 U-Boot 和
    BusyBox。
- en: 'The configuration is based on select-based features where you can enable or
    disable a feature and save the result of this choice in a file for later use.
    So please consider the following figure:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 该配置基于选择性特性，您可以启用或禁用一个特性，并将此选择的结果保存在文件中以供以后使用。请考虑以下图示：
- en: '![Figure 13.9 – Enable or disable TFTPD on BusyBox KConfig](img/Figure_13.09_B19361.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.9 – 在 BusyBox KConfig 上启用或禁用 TFTPD](img/Figure_13.09_B19361.jpg)'
- en: Figure 13.9 – Enable or disable TFTPD on BusyBox KConfig
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.9 – 在 BusyBox KConfig 上启用或禁用 TFTPD
- en: We have control whether the TFTPD support in BusyBox is enabled **(a)** or not
    **(b)**.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以控制是否启用 BusyBox 中的 TFTPD 支持 **(a)** 或不启用 **(b)**。
- en: 'The Yocto Project provides a specialized class to handle the configuration
    of the Kconfig-based project, allowing minor modifications called configuration
    fragments. We can use this to enable or disable features for your machine, for
    example, when configuring `linux-yocto`, we can use `<layer>/recipes-kernel/linux/linux-yocto_%.bbappend`
    as in the following code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Yocto 项目提供了一个专门的类来处理基于 Kconfig 的项目配置，允许进行称为配置片段的微小修改。我们可以使用它来启用或禁用您的机器功能，例如，在配置
    `linux-yocto` 时，我们可以像下面的代码一样使用 `<layer>/recipes-kernel/linux/linux-yocto_%.bbappend`：
- en: '![Figure 13.10 – The .bbappend content for applying a fragment](img/Figure_13.10_B19361.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.10 – 应用片段的 .bbappend 内容](img/Figure_13.10_B19361.jpg)'
- en: Figure 13.10 – The .bbappend content for applying a fragment
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.10 – 应用片段的 .bbappend 内容
- en: 'Every configuration fragment must use the `.cfg` file extension. So, the content
    of the `<layer>/recipes-kernel/linux/linux-yocto/linux-yocto/enable-can.cfg` file
    is shown here:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 每个配置片段必须使用 `.cfg` 文件扩展名。因此，`<layer>/recipes-kernel/linux/linux-yocto/linux-yocto/enable-can.cfg`
    文件的内容如下所示：
- en: '![Figure 13.11 – The content of enable-can.cfg](img/Figure_13.11_B19361.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.11 – enable-can.cfg 的内容](img/Figure_13.11_B19361.jpg)'
- en: Figure 13.11 – The content of enable-can.cfg
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.11 – enable-can.cfg 的内容
- en: 'We can use BitBake to configure or generate the Linux kernel configuration
    file. The `bitbake virtual/kernel -c menuconfig` command that allows us to configure
    the Linux kernel can be seen in the following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 BitBake 配置或生成 Linux 内核配置文件。允许我们配置 Linux 内核的命令 `bitbake virtual/kernel
    -c menuconfig` 如下截图所示：
- en: '![Figure 13.12 – Enabling CAN bus subsystem support using bitbake virtual/kernel
    -c menuconfig](img/Figure_13.12_B19361.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.12 – 使用 bitbake virtual/kernel -c menuconfig 启用 CAN 总线子系统支持](img/Figure_13.12_B19361.jpg)'
- en: Figure 13.12 – Enabling CAN bus subsystem support using bitbake virtual/kernel
    -c menuconfig
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.12 – 使用 bitbake virtual/kernel -c menuconfig 启用 CAN 总线子系统支持
- en: '*Figure 13**.12* shows how to enable CAN bus support using Linux kernel’s `menuconfig`.
    The kernel configuration is changed when exiting and saving from `menuconfig`.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13.12* 显示了如何使用 Linux 内核的 `menuconfig` 启用 CAN 总线支持。退出并保存 `menuconfig` 时，内核配置会发生变化。'
- en: 'The next step is to create the fragment using `bitbake virtual/kernel -c diffconfig`,
    as shown in the following screenshot:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用 `bitbake virtual/kernel -c diffconfig` 创建片段，如下截图所示：
- en: '![Figure 13.13 – The diffconfig option generates the configuration fragment](img/Figure_13.13_B19361.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.13 – `diffconfig` 选项生成配置片段](img/Figure_13.13_B19361.jpg)'
- en: Figure 13.13 – The diffconfig option generates the configuration fragment
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.13 – `diffconfig` 选项生成配置片段
- en: '*Figure 13**.13* displays the log after the command. It is important to note
    that the fragment file is created under the `<build>/tmp/work/` directory, and
    the absolute path is shown in the log. We must copy this fragment file to the
    layer and use it in a `.bbappend` file in order to get it applied.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13.13* 显示了命令执行后的日志。需要注意的是，片段文件会在 `<build>/tmp/work/` 目录下创建，并且绝对路径会在日志中显示。我们必须将此片段文件复制到层中，并在
    `.bbappend` 文件中使用它，以便应用配置。'
- en: Tip
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: To save a complete configuration, we can use `bitbake virtual/kernel -c savedefconfig`.
    This command generates a `defconfig` file to replicate the same configuration.
    This is a complete configuration, not a fragment file.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要保存完整的配置，我们可以使用 `bitbake virtual/kernel -c savedefconfig` 命令。此命令生成一个 `defconfig`
    文件来复制相同的配置。这是一个完整的配置，而不是片段文件。
- en: 'The support for the configuration fragments works for the following recipes:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 配置片段支持适用于以下食谱：
- en: Linux kernel
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 内核
- en: U-Boot
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: U-Boot
- en: BusyBox
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BusyBox
- en: Those recipes also offer the `menuconfig` and `diffconfig` tasks.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这些食谱还提供了 `menuconfig` 和 `diffconfig` 任务。
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to customize existing recipes using the `.bbappend`
    files and benefited from this by avoiding the duplication of source code. We saw
    how to enable or disable a feature, how to apply a patch, and how to use the configuration
    fragment support.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用 `.bbappend` 文件定制现有的食谱，并通过此方法避免了源代码的重复。我们了解了如何启用或禁用某个功能，如何应用补丁，以及如何使用配置片段支持。
- en: In the next chapter, we will discuss how the Yocto Project can help us with
    some legal aspects of producing a Linux-based system using packages under different
    licenses. We will understand which artifacts we need and how Poky can be configured
    to generate the artifacts that should be shared as part of the copyleft compliance
    accomplishment process.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论 Yocto 项目如何帮助我们处理使用不同许可证的包构建基于 Linux 的系统的法律方面。我们将了解需要哪些构件，以及如何配置
    Poky 以生成应作为 copyleft 合规过程一部分共享的构件。
