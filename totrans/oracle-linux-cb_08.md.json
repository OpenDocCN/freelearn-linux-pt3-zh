["```\n$ sudo dnf install -y oraclelinux-automation-manager-release-el8\n$ sudo dnf install -y ansible\n```", "```\n$ sudo dnf install -y dnf-plugins-core\n$ sudo dnf config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n$ sudo dnf install -y packer vagrant terraform\n```", "```\n$ sudo dnf install -y oraclelinux-developer-release-el8\n$ sudo dnf install -y VirtualBox-7.0\n```", "```\n    $ terraform init\n    $ terraform plan\n    terraform init command initializes the working directory containing your Terraform project files and this should always be the first command that you run after you write a new Terraform configuration. After this, it is a good idea to run terraform plan as this will give you a chance to preview/verify the plan. During this command, Terraform will compare your real infrastructure against your configuration. Finally, running terraform apply will display the plan again, but it will additionally give you the chance to enter yes to perform any actions proposed by the plan.When you see the prompt that asks you to `Enter a value`, go ahead and type `yes`, and then press *Enter*.\n    ```", "```\n    instances folder within your Terraform project.This is easy enough to do, but why not automate a bit more so we don’t need to check the OCI console for the public IP address? All we need to do is add a bit more code to our `main.tf` file and we can really start to take things to the next level.Go ahead and add the following code to your `main.tf` file:\n    ```", "```\n    Enter a value prompt, go ahead and type yes, and then press *Enter*.\n    ```", "```\n    ├── playbook.yml\n    └── roles\n        └── users\n            ├── files\n            │   └── wallpaper.jpg\n            └── tasks\n                └── main.yml\n    ```", "```\n    ├── playbook.yml\n    └── roles\n        └── groups\n            └── tasks\n                └── main.yml\n    ```", "```\n    ---\n    dependencies:\n      - role: groups\n    ```", "```\n    $ ansible-playbook playbook.yml\n    ```", "```\n    ├── playbook.yml\n    └── roles\n        ├── base_software\n        │   └── tasks\n        │       └── main.yml\n        ├── containers\n        │   └── tasks\n        │       └── main.yml\n        ├── get_hostname\n        │   └── tasks\n        │       └── main.yml\n        ├── groups\n        │   └── tasks\n        │       └── main.yml\n        ├── update_packages\n        │   ├── meta\n        │   │   └── main.yml\n        │   └── tasks\n        │       └── main.yml\n        ├── uptime\n        │   └── tasks\n        │       └── main.yml\n        └── users\n            ├── files\n            │   └── wallpaper.jpg\n            ├── meta\n            │   └── main.yml\n            └── tasks\n                └── main.yml\n    ```", "```\n$ ansible-playbook playbook.yml\n```", "```\n# hosts\n[host1]\n192.168.2.70\n[host1:vars]\nansible_user=admin\nansible_password=B@by-Y0dA\nansible_connection=ssh\nansible_shell_type=powershell\n[host2]\n192.168.2.71\n[host2:vars]\nansible_user=admin\nansible_password=B@by-Y0dA\nansible_connection=ssh\nansible_shell_type=powershell\n```", "```\n$ ansible-vault encrypt hosts --ask-vault-pass\nNew Vault password:\nConfirm New Vault password:\nEncryption successful\n```", "```\n$ ansible-vault encrypt hosts --vault-password-file vault_password\nEncryption successful\n```", "```\n    'B@by-Y0dA' looks like once encrypted:\n    ```", "```\n    secrets.yml file should look something like this:\n    ```", "```\n    # hosts\n    [host1]\n    192.168.2.70\n    [host1:vars]\n    ansible_user=admin\n    ansible_password={{ admin_password }}\n    ansible_connection=ssh\n    ansible_shell_type=powershell\n    [host2]\n    192.168.2.71\n    [host2:vars]\n    ansible_user=admin\n    ansible_password={{ admin_password }}\n    ansible_connection=ssh\n    ansible_shell_type=powershell\n    ```", "```\n$ vagrant init oraclelinux/7 https://oracle.github.io/vagrant-projects/boxes/oraclelinux/7.json\n```", "```\n# Vagrantfile\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"oraclelinux/7\"\n  config.vm.box_url = \"https://oracle.github.io/vagrant-projects/boxes/oraclelinux/7.json\"\nend\n```", "```\nsudo yum install spacewalk-setup-postgresql spacewalk-postgresql\n```", "```\nsudo spacewalk-setup --non-interactive --answer-file=/tmp/answer-file.txt\n```", "```\nadmin-email = root@localhost\nssl-set-cnames = spacewalk\nssl-set-org = Oracle\nssl-set-org-unit = OLM\nssl-set-city = Raleigh\nssl-set-state = NC\nssl-set-country = US\nssl-password = Password1\nssl-set-email = root@localhost\nssl-config-sslvhost = Y\ndb-backend = postgresql\ndb-name = spaceschema\ndb-user = spaceuser\ndb-password = Password1\ndb-host = localhost\ndb-port = 5432\nenable-tftp = Y\n```", "```\n#!/bin/bash\nyum remove jta -y\necho \"exclude=jta*\" >> /etc/yum.conf\nyum-config-manager --disable ol7_addons\nyum install oracle-release-el7 -y\nyum install oracle-linux-manager-server-release-el7 -y\nyum-config-manager --enable ol7_optional_latest -y\nyum install spacewalk-schema-2.10.14-1.el7 spacewalk-setup-postgresql spacewalk-postgresql spacecmd spacewalk-utils -y\nspacewalk-setup --non-interactive --answer-file=/tmp/answer-file.txt\n```", "```\n└── oracle-linux-manager\n    ├── answer-file.txt\n    ├── provision.sh\n    └── Vagrantfile\n```", "```\n$ vagrant up\n…\n…\n…\n--> default: Running provisioner: shell…\n    default: Running: inline script\n    default: Access Oracle Linux Manager at https://192.168.56.10\n```", "```\n    [DEFAULT]\n    user=ocid1.user.oc1..<unique_ID>\n    fingerprint=<your_fingerprint>\n    key_file=~/.oci/oci_api_key.pem\n    tenancy=ocid1.tenancy.oc1..<unique_ID>\n    region=us-ashburn-1\n    [ADMIN_USER]\n    user=ocid1.user.oc1..<unique_ID>\n    fingerprint=<your_fingerprint>\n    key_file=keys/admin_key.pem\n    pass_phrase=<your_passphrase>\n    ```", "```\n    $ packer init .\n    ```", "```\n    sudo dnf install -y git to install Git on the instance.\n    ```", "```\n    └── vagrant-ol8\n        ├── http\n        │   └── ol8-ks.cfg\n        └── vagrant-ol8.pkr.hcl\n    ```", "```\n    └── ol8-vagrant\n        ├── http\n        │   └── ol8-ks.ks\n        ├── scripts\n        │   └── vagrant-base-box.sh\n        └── vagrant-ol8.pkr.hcl\n    ```", "```\n    $ packer init .\n    ```", "```\n    $ packer build .\n    ```", "```\n    $ vagrant init ol8-x64-virtualbox.box\n    ```", "```\n    $ vagrant up\n    ```"]