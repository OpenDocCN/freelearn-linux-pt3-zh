["```\n→  ~ docker run -it nginx /bin/bash \n```", "```\nroot@e96107c9a58e:/# \n```", "```\nroot@e96107c9a58e:/# echo \"I am immutable\" >> test.txt\nroot@e96107c9a58e:/# cat test.txt\nI am immutable \n```", "```\nroot@e96107c9a58e:/#\nexit \n```", "```\n→  ~ docker run -it nginx /bin/bash\nroot@c3b4d95ab9e6:/# cat test.txt\ncat: test.txt: No such file or directory \n```", "```\n→  ~ docker ps -a\nCONTAINER ID   IMAGE             COMMAND                  CREATED          STATUS                      PORTS                    NAMES\nc3b4d95ab9e6   nginx             \"/docker-entrypoint.…\"   14 minutes ago   Exited (1) 6 minutes ago                             agitated_hofstadter\ne96107c9a58e   nginx             \"/docker-entrypoint.…\"   14 minutes ago   Exited (0) 14 minutes ago                            nervous_gould \n```", "```\n→  ~ docker rm c3b4d95ab9e6\nc3b4d95ab9e6 \n```", "```\n→  ~ docker start e96107c9a58e\ne96107c9a58e \n```", "```\n→  ~ docker ps\nCONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS        PORTS     NAMES\ne96107c9a58e   nginx     \"/docker-entrypoint.…\"   18 minutes ago   Up 1 second   80/tcp    nervous_gould \n```", "```\n→  ~ docker exec -it e96107c9a58e /bin/bash\nroot@e96107c9a58e:/# cat test.txt\nI am immutable \n```", "```\n→ ~ docker rm -f e96107c9a58e\ne96107c9a58e \n```", "```\nFROM alpine\nADD \"https://curl.haxx.se/ca/cacert.pem\" \"/etc/ssl/certs/ca-certificates.crt\"\nADD \"./pkg/linux_amd64/http-echo\" \"/\"\nRUN apk add curl\nENTRYPOINT [\"/http-echo\"] \n```", "```\n docker run --rm --name mywebcontainer -p 80:80 -v /tmp:/usr/share/nginx/html:ro -d nginx \n```", "```\ncat <<EOF > /tmp/index.html\n<!doctype html>\n<h1>Hello World</h1>\n<p>This is my container</p>\n</html>\nEOF \n```", "```\n$ docker image list\nREPOSITORY                                                 TAG                  IMAGE ID       CREATED         SIZE\nnginx                                                      latest               51086ed63d8c   10 days ago     142MB\nvault                                                      latest               22fdc6314051   2 months ago    207MB\ngolang                                                     1.19-alpine          d0f5238dcb8b   2 months ago    352MB \n```", "```\n$ docker ps \n```", "```\nCONTAINER ID   IMAGE          COMMAND                  CREATED              STATUS              PORTS                NAMES\n2aca849eef73   nginx          \"/docker-entrypoint.…\"   About a minute ago   Up About a minute   0.0.0.0:80->80/tcp   mywebcontainer \n```", "```\ndocker exec -it mywebcontainer /bin/bash \n```", "```\ndocker stop mywebcontainer \n```", "```\nmkdir dockerpy && cd dockerpy \n```", "```\nvim echo_server.py \n```", "```\nfrom flask import Flask, request\nimport os\napp = Flask(__name__)\n@app.route('/')\ndef echo():\n    return {\n        \"method\": request.method,\n        \"headers\": dict(request.headers),\n        \"args\": request.args\n    }\n@app.route('/health')\ndef health():\n    return {\"status\": \"healthy\"}\n\nif __name__ == \"__main__\":\n    env_port = os.environ.get(\"PORT\", 8080)\n    app.run(host='0.0.0.0', port=env_port) \n```", "```\nFlask>=3.0.0 \n```", "```\nvim Dockerfile \n```", "```\n# Use an official Python base image\nFROM python:3.12-slim\n\n# Set the working directory inside the container\nWORKDIR /app\n\n# Copy our list of dependencies into the container\nCOPY requirements.txt .\n\n# Install Python dependencies\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy the script into the container\nCOPY echo_server.py .\n\n# Set a healthcheck to kill the container if it's not listening on the internal port\nHEALTHCHECK --interval=30s --timeout=5s \\\n  CMD curl --fail http://localhost:8080/health || exit 1\n\n# Expose port for the application\nEXPOSE 8080\n\nENV PORT=8080\nCMD [\"python\", \"echo_server.py\"] \n```", "```\ndocker build -t dockerpy . \n```", "```\ndocker run --rm -d -p 8080:8080 --name my-dockerpy dockerpy\n(the command will print out the ID of your new container) \n```", "```\ncurl localhost:8080\n{\"args\":{},\"headers\":{\"Accept\":\"*/*\",\"Host\":\"localhost:8080\",\"User-Agent\":\"curl/8.1.2\"},\"method\":\"GET\"} \n```", "```\ndocker exec -it my-dockerpy /bin/sh \n```", "```\ndocker kill my-dockerpy \n```"]