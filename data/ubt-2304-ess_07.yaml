- en: 8\. Using the Bash Shell on Ubuntu 23.04
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. 在Ubuntu 23.04上使用Bash Shell
- en: An essential part of learning to work with Ubuntu and Linux distributions generally
    involves gaining proficiency in working in the shell environment. While graphical
    desktop environments such as GNOME, included with Linux, provide a user-friendly
    interface to the operating system, the shell environment provides far greater
    capabilities, flexibility, and automation than can ever be achieved using graphical
    desktop tools. The shell environment also provides a means for interacting with
    the operating system when a desktop environment is unavailable, a common occurrence
    when working with a server-based operating system such as Ubuntu or a damaged
    system that will not fully boot.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何使用Ubuntu和Linux发行版的一个关键部分是掌握Shell环境的操作。虽然Linux自带的图形桌面环境如GNOME提供了一个用户友好的操作界面，但Shell环境提供的功能、灵活性和自动化远远超过任何图形桌面工具能够实现的水平。Shell环境还为在没有桌面环境时与操作系统进行交互提供了途径，这在使用如Ubuntu这样的基于服务器的操作系统或系统无法完全启动的损坏系统时尤为常见。
- en: Therefore, this chapter aims to provide an overview of the default shell environment
    on Ubuntu (specifically the Bash shell).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，本章旨在提供Ubuntu上默认Shell环境的概述（特别是Bash Shell）。
- en: 8.1 What is a Shell?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 8.1 什么是Shell？
- en: The shell is an interactive command interpreter environment within which commands
    may be typed at a prompt or entered into a file as a script and executed. The
    origins of the shell can be traced back to the early days of the UNIX operating
    system. In fact, in the early days of Linux, before the introduction of graphical
    desktops, the shell was the only way for a user to interact with the operating
    system.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Shell是一个交互式命令解释器环境，用户可以在提示符处输入命令，或者将命令写入文件作为脚本并执行。Shell的起源可以追溯到UNIX操作系统的早期。事实上，在Linux的早期，图形桌面环境还未出现时，Shell是用户与操作系统交互的唯一方式。
- en: A variety of shell environments have been developed over the years. The first
    widely used shell was the Bourne shell, written by Stephen Bourne at Bell Labs.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 多种Shell环境在这些年来相继被开发出来。第一个广泛使用的Shell是Bourne Shell，由Bell Labs的Stephen Bourne编写。
- en: Yet another early creation was the C shell which shared some syntax similarities
    with the C Programming Language and introduced usability enhancements such as
    command-line editing and history.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个早期的创造是C Shell，它与C编程语言在语法上有一些相似之处，并引入了如命令行编辑和历史记录等可用性增强功能。
- en: The Korn shell (developed by David Korn at Bell Labs) is based on features provided
    by both the Bourne and C shells.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Korn Shell（由Bell Labs的David Korn开发）基于Bourne Shell和C Shell提供的功能。
- en: The default shell on Ubuntu is the Bash shell (shorthand for Bourne Again SHell).
    This shell, which began life as an open-source version of the Bourne shell, was
    developed for the GNU Project by Brian Fox and is based on features provided by
    both the Bourne shell and the C shell.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu的默认Shell是Bash Shell（即Bourne Again SHell的缩写）。这个Shell最初作为Bourne Shell的开源版本开发，由Brian
    Fox为GNU项目开发，并基于Bourne Shell和C Shell提供的功能。
- en: 8.2 Gaining Access to the Shell
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 8.2 获取Shell访问权限
- en: From within the GNOME desktop environment, the shell prompt may be accessed
    from a Terminal window by selecting the Activities option in the top bar, entering
    Terminal into the search bar, and clicking the Terminal icon.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在GNOME桌面环境中，可以通过选择顶部栏中的“活动”选项，输入“Terminal”在搜索栏中搜索，然后点击Terminal图标，从终端窗口访问Shell提示符。
- en: When remotely logging into an Ubuntu server, for example, using SSH, the user
    is presented with a shell prompt. The chapter entitled [“Configuring SSH Key-based
    Authentication on Ubuntu 23.04”](SSH_Authentication.xhtml#_idTextAnchor281) will
    cover details on accessing a remote server using SSH. When booting a server-based
    system in which a desktop environment has not been installed, the shell is entered
    immediately after the user completes the login procedure at the physical console
    terminal or remote login session.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当使用SSH远程登录到Ubuntu服务器时，用户会看到一个Shell提示符。本章标题为[“在Ubuntu 23.04上配置基于SSH的身份验证”](SSH_Authentication.xhtml#_idTextAnchor281)，将介绍使用SSH访问远程服务器的详细信息。当启动一个没有安装桌面环境的服务器系统时，用户在物理控制台终端或远程登录会话完成登录过程后，Shell会立即被加载。
- en: 8.3 Entering Commands at the Prompt
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 8.3 在提示符处输入命令
- en: 'Commands are entered at the shell command prompt simply by typing the command
    and pressing the Enter key. While some commands perform tasks silently, most will
    display some form of output before returning to the prompt. For example, the ls
    command can be used to display the files and directories in the current working
    directory:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 命令在 shell 命令提示符下通过键入命令并按回车键输入。虽然有些命令执行时不会显示任何信息，但大多数命令在返回提示符之前会显示某种输出。例如，`ls`
    命令可以用来显示当前工作目录中的文件和目录：
- en: $ ls
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: $ ls
- en: Desktop Documents Downloads Music Pictures Public Templates Videos
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 桌面 文档 下载 音乐 图片 公共 模板 视频
- en: 'The available commands are either built into the shell itself or reside on
    the physical file system. The location on the file system of a command may be
    identified using the which command. For example, to find out where the ls executable
    resides on the file system:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的命令要么是内建到 shell 本身，要么位于物理文件系统中。命令在文件系统中的位置可以使用 `which` 命令查找。例如，想要查找 `ls` 可执行文件在文件系统中的位置：
- en: $ which ls
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: $ which ls
- en: alias ls=’ls --color=auto’
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: alias ls=’ls --color=auto’
- en: /usr/bin/ls
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: /usr/bin/ls
- en: 'Clearly, the ls command resides in the /usr/bin directory. Note also that an
    alias is configured, a topic that will be covered later in this chapter. Using
    the which command to locate the path to commands built into the shell will result
    in a message indicating the executable cannot be found. For example, attempting
    to find the location of the history command (which is built into the shell rather
    than existing as an executable on the file system) will result in output similar
    to the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，`ls` 命令位于 `/usr/bin` 目录。还要注意，已配置了一个别名，这将在本章稍后讨论。使用 `which` 命令查找内建到 shell
    中的命令的路径时，会显示一条消息，表明无法找到可执行文件。例如，尝试查找 `history` 命令的位置（该命令是内建到 shell 中，而不是作为文件系统中的可执行文件存在）时，会显示如下类似的输出：
- en: $ which history
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: $ which history
- en: '/usr/bin/which: no history in (/home/demo/.local/bin:/home/demo/bin:/usr/share/Modules/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '/usr/bin/which: no history in (/home/demo/.local/bin:/home/demo/bin:/usr/share/Modules/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin)'
- en: 8.4 Getting Information about a Command
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 8.4 获取命令信息
- en: 'Many of the commands available to the Linux shell can seem cryptic. To find
    out detailed information about what a command does and how to use it, use the
    man command specifying the name of the command as an argument. For example, to
    learn more about the pwd command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Linux shell 中可用的许多命令看起来可能很难理解。要查找有关命令执行内容及其用法的详细信息，可以使用 `man` 命令，并指定命令的名称作为参数。例如，想要了解更多关于
    `pwd` 命令的信息：
- en: $ man pwd
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: $ man pwd
- en: 'A detailed description of the pwd command will be displayed when the above
    command is executed. Many commands will also provide additional information when
    run with the --help command-line option:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令时，将显示 `pwd` 命令的详细描述。许多命令在使用 `--help` 命令行选项运行时，还会提供额外的信息：
- en: $ wc --help
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: $ wc --help
- en: 8.5 Bash Command-line Editing
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 8.5 Bash 命令行编辑
- en: 'Early shell environments did not provide any form of line editing capabilities.
    This meant that if you spotted an error at the beginning of a long command-line,
    you were typing, you had to delete all the following characters, correct the error
    and then re-enter the remainder of the command. Fortunately, Bash provides a wide
    range of command-line editing options, as outlined in the following table:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的 shell 环境不提供任何形式的行编辑功能。这意味着，如果你在输入一条长命令时，在命令的开头发现了错误，你必须删除所有后续字符，纠正错误，然后重新输入其余命令。幸运的是，Bash
    提供了广泛的命令行编辑选项，具体如下表所示：
- en: '| Key Sequence | Action |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 键序列 | 操作 |'
- en: '| Ctrl-b or Left Arrow | Move the cursor back one position |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl-b 或 左箭头 | 将光标向后移动一个位置 |'
- en: '| Ctrl-f or Right Arrow | Move the cursor forward one position |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl-f 或 右箭头 | 将光标向前移动一个位置 |'
- en: '| Delete | Delete the character currently beneath the cursor |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| Delete | 删除当前光标下的字符 |'
- en: '| Backspace | Delete the character to the left of the cursor |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| Backspace | 删除光标左侧的字符 |'
- en: '| Ctrl-_ | Undo previous change (can be repeated to undo all previous changes)
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl-_ | 撤销上一步更改（可以重复操作以撤销所有之前的更改） |'
- en: '| Ctrl-a | Move the cursor to the start of the line |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl-a | 将光标移动到行首 |'
- en: '| Ctrl-e | Move the cursor to the end of the line |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl-e | 将光标移动到行尾 |'
- en: '| Meta-f or Esc then f | Move cursor forward one word |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| Meta-f 或 Esc 然后 f | 将光标向前移动一个单词 |'
- en: '| Meta-b or Esc then b | Move the cursor back one word |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| Meta-b 或 Esc 然后 b | 将光标向后移动一个单词 |'
- en: '| Ctrl-l | Clear the screen of everything except the current command |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl-l | 清除屏幕上除了当前命令之外的所有内容 |'
- en: '| Ctrl-k | Delete to the end of the line from the current cursor position |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl-k | 删除从当前位置到行尾的内容 |'
- en: '| Meta-d or Esc then d | Delete to end of the current word |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| Meta-d 或 Esc 然后 d | 删除到当前词语的结尾 |'
- en: '| Meta-DEL or Esc then DEL | Delete beginning to the current word |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| Meta-DEL 或 Esc 然后 DEL | 删除当前词语的开头至当前位置的内容 |'
- en: '| Ctrl-w | Delete from the current cursor position to the previous white space
    |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl-w | 删除从当前位置到上一个空白字符的内容 |'
- en: Table 8-1
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 表 8-1
- en: 8.6 Working with the Shell History
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 8.6 使用Shell历史记录
- en: 'In addition to command-line editing features, the Bash shell provides command-line
    history support. A list of previously executed commands may be viewed using the
    history command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 除了命令行编辑功能外，Bash Shell还提供了命令行历史支持。可以使用history命令查看之前执行的命令列表：
- en: $ history
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: $ history
- en: 1 ps
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 1 ps
- en: 2 ls
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 2 ls
- en: 3 ls –l /
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 3 ls -l /
- en: 4 ls
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 4 ls
- en: 5 man pwd
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 5 man pwd
- en: 6 man apropos
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 6 man apropos
- en: In addition, Ctrl-p (or up arrow) and Ctrl-n (or down arrow) may be used to
    scroll back and forth through previously entered commands. Finally, when the desired
    command from the history is displayed, press the Enter key to execute it.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Ctrl-p（或向上箭头）和Ctrl-n（或向下箭头）可用于前后滚动浏览先前输入的命令。当历史记录中显示出所需的命令时，按回车键执行它。
- en: Another option is to enter the ‘!’ character, followed by the first few characters
    of the command to be repeated, followed by the Enter key.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是输入‘!’字符，后跟要重复执行的命令的前几个字符，再按回车键。
- en: 8.7 Filename Shorthand
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 8.7 文件名简写
- en: 'Many shell commands take one or more filenames as arguments. For example, to
    display the content of a text file named list.txt, the cat command would be used
    as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 许多Shell命令需要一个或多个文件名作为参数。例如，要显示名为list.txt的文本文件的内容，可以使用cat命令，如下所示：
- en: $ cat list.txt
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: $ cat list.txt
- en: 'Similarly, the content of multiple text files could be displayed by specifying
    all the file names as arguments:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，通过指定所有文件名作为参数，可以显示多个文本文件的内容：
- en: $ cat list.txt list2.txt list3.txt list4.txt
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: $ cat list.txt list2.txt list3.txt list4.txt
- en: 'Instead of typing in each name, pattern matching can be used to specify all
    files with names matching certain criteria. For example, the ‘*’ wildcard character
    can be used to simplify the above example:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 不必逐个输入每个文件名，可以使用模式匹配来指定所有符合特定条件的文件。例如，可以使用‘*’通配符简化上面的示例：
- en: $ cat *.txt
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: $ cat *.txt
- en: 'The above command will display the content of all files ending with a .txt
    extension. This could be further restricted to any file names beginning with list
    and ending in .txt:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将显示所有以.txt扩展名结尾的文件内容。可以进一步限制，只显示以list开头并以.txt结尾的文件名：
- en: $ cat list*.txt
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: $ cat list*.txt
- en: 'Single character matches may be specified using the ‘?’ character:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 单字符匹配可以使用‘?’字符来指定：
- en: $ cat list?.txt
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: $ cat list?.txt
- en: 8.8 Filename and Path Completion
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 8.8 文件名和路径补全
- en: Rather than typing in a complete file name or path or using pattern matching
    to reduce the amount of typing, the shell provides the filename completion feature.
    To use filename completion, enter the first few characters of the file or path
    name and then press the Esc key twice. The shell will then complete the filename
    for you with the first file or path name in the directory that matches the characters
    you entered. To obtain a list of possible matches, press Esc = after entering
    the first few characters.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 不必输入完整的文件名或路径，或者使用模式匹配来减少输入量，Shell提供了文件名补全功能。要使用文件名补全，输入文件或路径名称的前几个字符，然后按两次Esc键。Shell会根据您输入的字符，在目录中匹配第一个文件或路径名并自动完成文件名。要获取可能匹配的文件名列表，在输入前几个字符后按Esc
    =。
- en: 8.9 Input and Output Redirection
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 8.9 输入和输出重定向
- en: As previously mentioned, many shell commands output information when executed.
    By default, this output goes to a device file named stdout which is essentially
    the terminal window or console in which the shell is running. Conversely, the
    shell takes input from a device file named stdin, which by default is the keyboard.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，许多Shell命令在执行时会输出信息。默认情况下，这些输出会发送到一个名为stdout的设备文件，实际上就是运行Shell的终端窗口或控制台。相反，Shell从一个名为stdin的设备文件获取输入，默认情况下是键盘。
- en: 'Output from a command can be redirected from stdout to a physical file on the
    file system using the ‘>’ character. For example, to redirect the output from
    an ls command to a file named files.txt, the following command would be required:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用‘>’字符将命令的输出从stdout重定向到文件系统中的物理文件。例如，要将ls命令的输出重定向到名为files.txt的文件，可以使用以下命令：
- en: $ ls *.txt > files.txt
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: $ ls *.txt > files.txt
- en: 'Upon completion, files.txt will contain the list of files in the current directory.
    Similarly, the contents of a file may be fed into a command in place of stdin.
    For example, to redirect the contents of a file as input to a command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 执行完成后，files.txt 将包含当前目录中的文件列表。同样，文件的内容可以作为 stdin 输入传递给命令。例如，将文件内容重定向为命令的输入：
- en: $ wc –l < files.txt
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: $ wc –l < files.txt
- en: The above command will display the number of lines in the files.txt file.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将显示 files.txt 文件中的行数。
- en: 'It is important to note that the ‘>’ redirection operator creates a new file
    or truncates an existing file when used. To append to an existing file, use the
    ‘>>’ operator:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，‘>’ 重定向操作符在使用时会创建一个新文件或截断现有文件。要追加到现有文件中，使用 ‘>>’ 操作符：
- en: $ ls *.dat >> files.txt
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: $ ls *.dat >> files.txt
- en: 'In addition to standard output, the shell also provides standard error output
    using stderr. While output from a command is directed to stdout, any error messages
    generated by the command are directed to stderr. This means that if stdout is
    directed to a file, error messages will still appear in the terminal. This is
    generally the desired behavior, though stderr may also be redirected if desired
    using the ‘2>’ operator:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标准输出外，shell 还通过 stderr 提供标准错误输出。当命令的输出被定向到 stdout 时，命令生成的任何错误信息都将定向到 stderr。这意味着如果
    stdout 被定向到文件，错误信息仍然会出现在终端中。通常这是期望的行为，但如果需要，也可以使用 '2>' 操作符将 stderr 定向到其他地方：
- en: $ ls dkjfnvkjdnf 2> errormsg
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: $ ls dkjfnvkjdnf 2> errormsg
- en: On completion of the command, an error reporting that the file named dkjfnvkjdnf
    could not be found will be contained in the errormsg file.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 命令执行完成后，errormsg 文件将包含一个错误信息，报告名为 dkjfnvkjdnf 的文件未找到。
- en: 'Both stderr and stdout may be redirected to the same file using the &> operator:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: stderr 和 stdout 都可以使用 &> 操作符定向到同一个文件：
- en: $ ls /etc dkjfnvkjdnf &> alloutput
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: $ ls /etc dkjfnvkjdnf &> alloutput
- en: On completion of execution, the alloutput file will contain both a listing of
    the contents of the /etc directory and the error message associated with the attempt
    to list a non-existent file.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 执行完成后，alloutput 文件将包含 /etc 目录的内容列表以及尝试列出不存在文件时的错误信息。
- en: 8.10 Working with Pipes in the Bash Shell
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 8.10 在 Bash Shell 中使用管道
- en: 'In addition to I/O redirection, the shell also allows output from one command
    to be piped directly as input to another command. A pipe operation is achieved
    by placing the ‘|’ character between two or more commands on a command line. For
    example, to count the number of processes running on a system, the output from
    the ps command can be piped through to the wc command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 I/O 重定向外，shell 还允许将一个命令的输出直接作为另一个命令的输入。管道操作通过在命令行的两个或多个命令之间放置 ‘|’ 字符来实现。例如，要计算系统上运行的进程数量，可以将
    ps 命令的输出通过管道传递给 wc 命令：
- en: $ ps –ef | wc –l
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: $ ps –ef | wc –l
- en: 'There is no limit to the number of pipe operations that can be performed on
    a command line. For example, to find the number of lines in a file that contain
    the name Smith:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行上可以执行任意数量的管道操作。例如，要查找文件中包含 Smith 名字的行数：
- en: $ cat namesfile | grep Smith | wc –l
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: $ cat namesfile | grep Smith | wc –l
- en: 8.11 Configuring Aliases
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 8.11 配置别名
- en: 'As you gain proficiency with the shell environment, you will likely frequently
    issue commands with the same arguments. For example, you may often use the ls
    command with the l and t options:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你对 shell 环境的熟练，你可能会经常输入带有相同参数的命令。例如，你可能经常使用带有 l 和 t 选项的 ls 命令：
- en: $ ls –lt
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: $ ls –lt
- en: 'To reduce the amount of typing involved in issuing a command, it is possible
    to create an alias that maps to the command and arguments. For example, to create
    an alias such that entering the letter l will cause the ls –lt command to be executed,
    the following statement would be used:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少输入命令时的键入量，可以创建一个别名，映射到命令和参数。例如，要创建一个别名，使得输入字母 l 时会执行 ls –lt 命令，可以使用以下语句：
- en: $ alias l="ls –lt"
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: $ alias l="ls –lt"
- en: Entering l at the command prompt will now execute the original statement.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令提示符下输入 l 将执行原始语句。
- en: 8.12 Environment Variables
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 8.12 环境变量
- en: 'Shell environment variables provide temporary storage of data and configuration
    settings. The shell itself sets up several environment variables that the user
    may change to modify the behavior of the shell. A listing of currently defined
    variables may be obtained using the env command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Shell 环境变量提供了数据和配置设置的临时存储。Shell 本身会设置几个环境变量，用户可以修改这些变量来改变 shell 的行为。可以使用 env
    命令列出当前定义的变量：
- en: $ env
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: $ env
- en: SSH_CONNECTION=192.168.0.19 61231 192.168.0.28 22
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: SSH_CONNECTION=192.168.0.19 61231 192.168.0.28 22
- en: MODULES_RUN_QUARANTINE=LD_LIBRARY_PATH
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: MODULES_RUN_QUARANTINE=LD_LIBRARY_PATH
- en: LANG=en_US.UTF-8
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: LANG=en_US.UTF-8
- en: HISTCONTROL=ignoredups
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: HISTCONTROL=ignoredups
- en: HOSTNAME=demo-pc.ebookfrenzy.com
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: HOSTNAME=demo-pc.ebookfrenzy.com
- en: XDG_SESSION_ID=15
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: XDG_SESSION_ID=15
- en: MODULES_CMD=/usr/share/Modules/libexec/modulecmd.tcl
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: MODULES_CMD=/usr/share/Modules/libexec/modulecmd.tcl
- en: USER=demo
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: USER=demo
- en: ENV=/usr/share/Modules/init/profile.sh
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: ENV=/usr/share/Modules/init/profile.sh
- en: SELINUX_ROLE_REQUESTED=
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: SELINUX_ROLE_REQUESTED=
- en: PWD=/home/demo
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: PWD=/home/demo
- en: HOME=/home/demo
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: HOME=/home/demo
- en: SSH_CLIENT=192.168.0.19 61231 22
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: SSH_CLIENT=192.168.0.19 61231 22
- en: SELINUX_LEVEL_REQUESTED=
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: SELINUX_LEVEL_REQUESTED=
- en: .
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: .
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: 'Perhaps the most useful environment variable is PATH. This defines the directories
    in which the shell will search for commands entered at the command prompt and
    the order in which it will do so. The PATH environment variable for a user account
    on a newly installed Ubuntu system will likely be configured as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 也许最有用的环境变量是PATH。它定义了shell在命令提示符下输入的命令所搜索的目录，以及搜索的顺序。新安装的Ubuntu系统中，用户账户的PATH环境变量通常会被配置如下：
- en: $ echo $PATH
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: $ echo $PATH
- en: /home/demo/.local/bin:/home/demo/bin:/usr/share/Modules/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: /home/demo/.local/bin:/home/demo/bin:/usr/share/Modules/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin
- en: 'Another useful variable is HOME, which specifies the current user’s home directory.
    If, for example, you wanted the shell to also look for commands in the scripts
    directory located in your home directory, you would modify the PATH variable as
    follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的变量是HOME，它指定了当前用户的主目录。例如，如果你希望shell也在主目录中的scripts目录下查找命令，你可以如下修改PATH变量：
- en: $ export PATH=$PATH:$HOME/scripts
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: $ export PATH=$PATH:$HOME/scripts
- en: 'The current value of an existing environment variable may be displayed using
    the echo command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当前已有环境变量的值可以使用echo命令显示：
- en: $ echo $PATH
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: $ echo $PATH
- en: 'You can create your own environment variables using the export command. For
    example:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用export命令创建自己的环境变量。例如：
- en: $ export DATAPATH=/data/files
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: $ export DATAPATH=/data/files
- en: 'A useful trick to assign the output from a command to an environment variable
    involves using back quotes (`) around the command. For example, to assign the
    current date and time to an environment variable called NOW:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 将命令的输出赋值给环境变量的一个有用技巧是使用反引号（`）将命令包围。例如，要将当前的日期和时间赋值给名为NOW的环境变量：
- en: $ export NOW=`date`
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: $ export NOW=`date`
- en: $ echo $NOW
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: $ echo $NOW
- en: Wed Mar 29 12:39:20 PM EDT 2023
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 2023年3月29日 星期三 12:39:20 PM EDT
- en: 'If there are environment variables or alias settings that need to be configured
    each time you enter the shell environment, they may be added to a file in your
    home directory named .bashrc. For example, the following .bashrc file is configured
    to set up the DATAPATH environment variable and an alias:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有需要在每次进入shell环境时配置的环境变量或别名设置，可以将它们添加到你主目录中的.bashrc文件中。例如，以下.bashrc文件配置了DATAPATH环境变量和一个别名：
- en: .bashrc
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .bashrc
- en: Source global definitions
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 来源全局定义
- en: if [ -f /etc/bashrc ]; then
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: if [ -f /etc/bashrc ]; then
- en: . /etc/bashrc
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: . /etc/bashrc
- en: fi
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: fi
- en: User specific environment
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户特定的环境
- en: PATH="$HOME/.local/bin:$HOME/bin:$PATH"
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: PATH="$HOME/.local/bin:$HOME/bin:$PATH"
- en: export PATH
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: export PATH
- en: 'Uncomment the following line if you don’t like systemctl’s auto-paging feature:'
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果你不喜欢systemctl的自动分页功能，请取消注释以下行：
- en: export SYSTEMD_PAGER=
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: export SYSTEMD_PAGER=
- en: User specific aliases and functions
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户特定的别名和函数
- en: export DATAPATH=/data/files
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: export DATAPATH=/data/files
- en: alias l="ls -lt"
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: alias l="ls -lt"
- en: 8.13 Writing Shell Scripts
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 8.13 编写Shell脚本
- en: So far, we have focused exclusively on the interactive nature of the Bash shell.
    By interactive, we mean manually entering commands individually and executing
    them at the prompt. In fact, this is only a small part of what the shell is capable
    of. Arguably one of the most powerful aspects of the shell involves the ability
    to create shell scripts. Shell scripts are text files containing statement sequences
    that can be executed within the shell environment to perform tasks. In addition
    to the ability to execute commands, the shell provides many programming constructs,
    such as for and do loops and if statements, that you might reasonably expect to
    find in a scripting language.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们主要关注的是Bash shell的交互式功能。所谓交互式，是指手动逐个输入命令并在提示符下执行。事实上，这只是shell功能的一小部分。可以说，shell最强大的功能之一就是能够创建shell脚本。Shell脚本是包含一系列语句的文本文件，可以在shell环境中执行以完成任务。除了执行命令的功能外，shell还提供了许多编程构造，例如for和do循环、if语句，这些在脚本语言中也很常见。
- en: Unfortunately, a detailed overview of shell scripting is beyond the scope of
    this chapter. However, many books and web resources dedicated to shell scripting
    do the subject much more justice than we could ever hope to achieve here. In this
    section, therefore, we will only be providing a very small taste of shell scripting.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，Shell 脚本的详细概述超出了本章的范围。然而，许多专门讨论 Shell 脚本的书籍和网络资源，比我们能在此章节中展示的要详细得多。因此，在本节中，我们仅会提供
    Shell 脚本的一个非常小的概述。
- en: 'The first step in creating a shell script is to create a file (for this example,
    we will name it simple.sh) and add the following as the first line:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 Shell 脚本的第一步是创建一个文件（在此示例中，我们将其命名为 simple.sh），并将以下内容作为第一行添加：
- en: '#!/bin/sh'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '#!/bin/sh'
- en: 'The #! is called the “shebang” and is a special sequence of characters indicating
    that the path to the interpreter needed to execute the script is the next item
    on the line (in this case, the sh executable located in /bin). This could equally
    be, for example, /bin/csh or /bin/ksh if either were the interpreter you wanted
    to use.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '#! 被称为“shebang”，是一个特殊的字符序列，表示脚本执行所需解释器的路径位于行的下一个项目（在本例中，sh 可执行文件位于 /bin）。如果你想使用其他解释器，比如
    /bin/csh 或 /bin/ksh，也可以按这种方式进行设置。'
- en: 'The next step is to write a simple script:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是编写一个简单的脚本：
- en: '#!/bin/sh'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '#!/bin/sh'
- en: for i in *
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: for i in *
- en: do
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: do
- en: echo $i
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: echo $i
- en: done
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: done
- en: 'All this script does is iterate through all the files in the current directory
    and display the name of each file. This script may be executed by passing the
    name of the script through as an argument to sh:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本的功能仅仅是遍历当前目录中的所有文件，并显示每个文件的名称。可以通过将脚本的名称作为参数传递给 `sh` 来执行该脚本：
- en: $ sh simple.sh
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: $ sh simple.sh
- en: 'To make the file executable (thereby negating the need to pass it through to
    the sh command), the chmod command can be used:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使文件可执行（从而不再需要将其传递给 sh 命令），可以使用 chmod 命令：
- en: $ chmod +x simple.sh
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: $ chmod +x simple.sh
- en: 'Once the execute bit has been set on the file’s permissions, it may be executed
    directly. For example:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置了文件的执行权限，就可以直接执行该文件。例如：
- en: $ ./simple.sh
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: $ ./simple.sh
- en: 8.14 Summary
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 8.14 小结
- en: We briefly toured the Bash shell environment in this chapter of Ubuntu Essentials.
    In the world of graphical desktop environments, it is easy to forget that an operating
    system’s true power and flexibility can often only be utilized by dropping down
    below the user-friendly desktop interface and using a shell environment. Moreover,
    familiarity with the shell is necessary to administer and maintain server-based
    systems that do not have the desktop installed or when attempting to repair a
    system damaged to the point that the desktop or Cockpit interface will no longer
    launch.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章《Ubuntu Essentials》中，我们简要介绍了 Bash Shell 环境。在图形桌面环境的世界中，很容易忘记操作系统的真正功能和灵活性往往只能通过退出用户友好的桌面界面，进入
    Shell 环境来发挥。而且，熟悉 Shell 是管理和维护没有安装桌面的服务器系统或在系统损坏到无法启动桌面或 Cockpit 界面时进行修复的必要条件。
- en: The shell’s capabilities go far beyond the areas covered in this chapter. If
    you are new to the shell, we strongly encourage you to seek additional resources.
    Once familiar with the concepts, you will quickly find that it is quicker to perform
    many tasks using the shell in a terminal window than to wade through menus and
    dialogs on the desktop.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Shell 的功能远远超出了本章所涵盖的范围。如果你是 Shell 新手，我们强烈建议你查阅更多资源。一旦熟悉了这些概念，你会很快发现，在终端窗口中使用
    Shell 执行许多任务比在桌面上通过菜单和对话框操作要更快速。
