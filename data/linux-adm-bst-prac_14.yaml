- en: '*Chapter 11*: Troubleshooting'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第11章*：故障排除'
- en: Few things are as challenging in systems administration as **troubleshooting**
    when problems have risen. Troubleshooting is hard at the best of times, but as
    system administrators our job is almost always to troubleshoot a system that is
    either currently running in production and has to remain functional while we attempt
    to fix some aspect of it or is currently down and we have to get it back up and
    running in production as quickly as possible. The ability to work at a reasonable
    pace without the business losing money actively as we do so typically does not
    exist for us or when it does, is the exception rather than the rule. Troubleshooting
    is hard, critical, and stressful.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统管理中，**故障排除**是最具挑战性的任务之一，尤其是在问题出现时。故障排除即使在最理想的情况下也很困难，但作为系统管理员，我们的工作几乎总是需要排除一个系统中的问题，系统要么正在生产环境中运行并且必须在我们尝试修复某个方面时保持正常运行，要么系统已经宕机，我们必须尽快让它恢复生产环境中的运行。通常我们并没有足够的能力在不让业务因此丧失收入的情况下进行修复，即使有，这也是例外而非常态。故障排除既困难，又至关重要，还充满压力。
- en: Troubleshooting involves more than just fixing an obvious technical problem,
    applying business logic is critical as well. We have to understand our troubleshooting
    in the greater context of the workload and the business and apply more than simple
    technical know-how. There is fixing a problem, and there is fixing the workload,
    and there is evaluating the needs of the workflow, and in the end there is maintaining
    the viability of the business.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 故障排除不仅仅是解决明显的技术问题，应用商业逻辑同样至关重要。我们必须在更大的工作负载和业务背景下理解我们的故障排除，并应用不仅仅是简单的技术知识。既有解决问题的方式，也有解决工作负载的方式，还有评估工作流需求的方式，最终的目标是保持业务的可行性。
- en: 'In this chapter we are going to cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: The high cost of disaster avoidance
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免灾难的高成本
- en: Triage skills and staff
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初步评估技能与员工
- en: Logical approaches to troubleshooting
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑性故障排除方法
- en: Investigating versus fixing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调查与修复
- en: The high cost of disaster avoidance
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免灾难的高成本
- en: In this chapter we are going to talk extensively about what to do after there
    has been a disaster. Throughout this book we consider ways to avoid disaster.
    Something that is easy to overlook is that there is a cost to protecting our workloads
    against failures and that we have to weigh that against the cost of the failure
    itself combined with the likeliness that that disaster will even happen.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将详细讨论灾难发生后该做些什么。在本书中，我们考虑了如何避免灾难的方法。一个容易被忽视的事实是，保护工作负载免受故障的过程中是有成本的，我们必须将这一点与故障本身的成本以及灾难发生的可能性进行权衡。
- en: Too often we are told, or it is implied that disasters are to be avoided at
    all costs. This is crazy and should never be the case. Disaster avoidance has
    a cost, and that cost can be quite high. The disaster itself will have a cost
    and while that cost might be quite high, it is not always.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们常常被告知，或者暗示灾难必须不惜一切代价避免。这是荒谬的，绝不应当如此。避免灾难是有成本的，而且这个成本可能相当高。灾难本身也会带来成本，虽然这个成本可能相当高，但并不总是如此。
- en: 'The risk that we take is that the cost of avoiding a disaster is sometimes
    greater than the cost of the disaster itself. There was a time when it was common
    for companies to spend tens of thousands of dollars on fault tolerant solutions
    to protect workloads whose common failure scenarios would only cause a fraction
    of that cost in losses. The disaster was literally less of a disaster than the
    disaster avoidance was! And the disaster avoidance is a certain cost, a disaster
    is only a potential cost. If we equate both to costs we could simplify the evaluation
    to a simple question such as this: *Is it better to lose $50,000 today, or to
    maybe lose $10,000 tomorrow?* That makes it far easier than it would otherwise
    be and removes most emotional response.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所面临的风险是，避免灾难的成本有时会超过灾难本身的成本。曾经有一段时间，公司常常花费数万美元购买容错解决方案，以保护那些常见故障场景只会造成少部分损失的工作负载。灾难本身实际上比避免灾难的成本更低！而且灾难避免是一个确定的成本，而灾难只是一个潜在的成本。如果我们将两者视作成本进行比较，我们可以简化评估为一个简单的问题：*今天损失50,000美元，还是明天可能损失10,000美元，哪个更好？*
    这样比其他方式要简单得多，并且能去除大部分情绪化反应。
- en: The phrase I like to use about overspending on disaster avoidance is that it
    is like shooting yourself in the face today, to avoid maybe getting a headache
    tomorrow.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢用一句话来形容在灾难避免上过度消费，那就是：今天为了避免明天可能的头痛而对自己开枪。
- en: Never treat the disaster in a disaster prevention plan as a certainty, it is
    not. There is only a possibility that it will happen. Evaluate and use math.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要将灾难防范计划中的灾难视为必然发生，它并非必然发生。它只有可能发生。评估并运用数学方法。
- en: In this chapter we are going to look more deeply into how support should work
    in a business, improving support posture for your IT organization, learn about
    triage needs, discuss finding the right people for your troubleshooting team,
    and then delve into when to investigate, and when to fix our issues.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨支持在企业中的运作方式，如何改善IT组织的支持姿态，了解急救需求，讨论如何找到合适的人来组成故障排除团队，然后深入讨论何时调查问题，何时解决问题。
- en: This is some of the hardest, most ambiguous, and ultimately most important material
    for us to cover.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们要覆盖的一些最困难、最模糊且最终最重要的内容。
- en: Sources of solutions
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案的来源
- en: Where do we get the solutions to problems that arise when we are system administrators?
    I want to start this conversation with my own career anecdote, because I think
    that everyone gets very different perspectives on how IT support works in the
    broadest of senses and understanding different perspectives is important before
    we start to define what good looks like.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 作为系统管理员，我们从哪里获得解决问题的方法呢？我想通过我自己的职业故事来开始这段话题，因为我认为每个人对IT支持在广义上的运作方式有非常不同的看法，理解这些不同的视角在我们开始定义“好的支持”是什么之前是非常重要的。
- en: When I first started working in IT, and for the first nearly two decades, it
    was an assumption that any and all issues would be resolved by the IT department.
    Of course, situations existed where applying patches, updated, or fixes from a
    vendor would be part of the process, but acquiring those patches, testing them,
    applying them, and so forth were always completely handled by the IT staff. Even
    the idea that you could ask a vendor to assist, guide, or advise was foreign let
    alone attempting to actually do so. Reaching out to a vendor for support was assumed
    to be an absolutely last resort situation and reserved only for those moments
    when it was believed that there was an unknown and as of yet unaddressed flaw
    in the hardware or software that had been identified and that it would be passed
    over to the vendor to fix that before handing it back to IT to apply said updates
    or fixes, if they ever became available.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当我刚开始从事IT工作时，尤其是在前近二十年，大家普遍认为任何和所有问题都应由IT部门来解决。当然，也有一些情况需要应用厂商的补丁、更新或修复，但获取这些补丁、测试它们、应用它们等工作总是由IT员工全权处理。甚至认为可以请求厂商提供帮助、指导或建议的想法也显得陌生，更别提实际去做了。联系厂商寻求支持被认为是绝对的最后手段，只在认为硬件或软件中存在未知且尚未解决的缺陷时才会使用，这时将问题交给厂商修复，然后再由IT部门应用更新或修复（如果有的话）。
- en: During this era IT, and especially system administrators, were expected to know
    systems inside and out, be able to address reasonably any issue that could arise,
    and quite frankly figure out what needed to be done. No ifs, no ands, and certainly
    no buts. If you did not know how a system worked or what might be wrong you were
    expected to use knowledge and logic and get to the bottom of it. A thorough understanding
    of how systems worked, even if specific details were sometimes lacking, and good
    logic essentially always would allow you to resolve an issue.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个时代，IT，尤其是系统管理员，预计能够全面了解系统的运作，能够解决可能出现的任何问题，坦率地说，还要弄清楚需要做什么。没有如果，没有但是，当然没有“也许”。如果你不知道一个系统如何工作或可能出现什么问题，那么你就需要依靠知识和逻辑去找出问题的根源。对系统的工作原理有透彻的理解，即使有时缺乏具体的细节，良好的逻辑通常也能让你解决问题。
- en: It was not until the very end of the 2000s that I first encountered IT shops
    that would rely on vendors and resellers for some aspect of their support. The
    idea that systems were being run that the company and its IT organization (internal
    or external, does not matter) could not install, configure, and support was totally
    foreign to me and to most people I had been in the industry with for years. If
    you required support from the vendor sometimes, how did you not need it all of
    the time? What purpose was the IT team fulfilling if they were not the ones who
    possessed the requisite knowledge to implement and operate the systems that were
    under their purview? You need far more knowledge to plan and consider all solution
    options than it takes to fix the singular one that you finally deploy. If you
    need your vendor for day-to-day tasks, then you obviously lack the necessary skill
    sets and experience for the more critical high level decision making and that
    is something that a vendor cannot help with. Sadly, many organizations end up
    simply lacking all capability around solution planning and this explains why so
    many horrendous solutions that should obviously have been known to not meet the
    business needs get deployed.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 直到2000年代末，我才首次遇到那些依赖供应商和经销商来提供某些方面支持的IT部门。公司和其IT组织（无论是内部的还是外部的，都不重要）无法安装、配置和支持的系统，这个概念对我和我多年来在行业中的大多数同事来说都是完全陌生的。如果你偶尔需要供应商的支持，为什么你不需要全天候的支持呢？如果IT团队不具备实施和运营他们负责的系统所需的知识，那它们的存在有什么意义？你需要更多的知识来规划和考虑所有解决方案选项，而不仅仅是修复你最终部署的那个单一方案。如果你需要供应商来处理日常任务，那显然你缺乏进行更为重要的高层决策所需的技能和经验，而这是供应商无法提供帮助的。遗憾的是，许多组织最终在解决方案规划方面完全缺乏能力，这也解释了为什么那么多明显无法满足业务需求的糟糕解决方案会被部署。
- en: Today is seems that the world is focused on support coming from sales organizations
    and vendors, rather than from IT, but this creates two critical problems. First,
    what is IT even there to do if they are not in the critical support path. Are
    they even needed? And second, how is a vendor supposed to have the range of skills
    necessary to do internal IT needs when all they do is support products that the
    make? The disconnect here is significant.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，似乎大家都将焦点放在了来自销售组织和供应商的支持上，而不是来自IT部门，但这带来了两个关键问题。首先，如果IT不在关键的支持路径上，它到底是做什么的呢？它们真的有必要存在吗？其次，当供应商仅仅支持他们自己生产的产品时，怎么可能具备满足内部IT需求的所有技能呢？这里的脱节是相当显著的。
- en: There is no magic support
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并没有魔法支持
- en: There tends to be this sort of unspoken belief, often amongst managers but sometimes
    even from IT people, that there is a group of magic companies out there, in the
    technological arena that can provide more or less unlimited support in a way that
    internal IT cannot. It is imagined, I suppose, that these companies are not comprised
    of human beings or perhaps it is thought that the vendors of servers, storage,
    and operating systems have secret manuals full of information not released to
    the public that include secret codes that tell misbehaving systems to start working
    again.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 经常会有一种不言而喻的信念，通常是在管理者中间，甚至有时是IT人员中，也会认为有一些神奇的公司，在技术领域内可以提供类似于无限的支持，而这种支持是内部IT无法提供的。我猜想，大家可能以为这些公司并非由人类组成，或者认为服务器、存储和操作系统的供应商拥有一些不公开的秘密手册，里面充满了那些不公开的信息，包括秘密代码，可以让失常的系统重新开始工作。
- en: In the real world, hardware and software vendors know essentially nothing that
    their customers do not know, at least not when it comes to the operations of their
    devices. It is no different than if you called up Ford or Toyota and asked them
    how to drive a race car, instead of asking race car drivers. Sure, the car companies
    will have some people on staff with a good idea of how a car will be driven under
    performance conditions, but none of them can possess more knowledge than actual
    race car drivers and they certainly will not have as much expertise on the ground
    as the driver currently going around the track.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，硬件和软件供应商基本上不知道他们的客户不了解的事情，至少在设备操作方面是如此。这和你打电话给福特或丰田，问他们如何驾驶一辆赛车是一样的，而不是去问赛车手。当然，汽车公司会有一些员工对赛车在性能条件下如何驾驶有一定了解，但他们没有任何人比实际的赛车手掌握更多的知识，他们显然也不会比正在赛道上绕圈的车手有更多的实践经验。
- en: Hardware and software vendors are just groups of people, made up from and hired
    from the same pool of IT talent that any other firm has access to, in fact it
    is likely if you have worked in the industry for any length of time that someone
    you know will go from working in the field to working for a vendor, or vice versa,
    and there is a decent chance that this will happen to you yourself. I myself have
    been an engineer at at least half a dozen of the big ten vendors in the industry
    and at none of them was there any special sauce knowledge doled out in secret.
    All of our customer support or even internal support knowledge was acquired the
    same way that it was by customers. Sometimes customers actually had more access
    to our own documentation than we did!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件和软件供应商只是一些由 IT 人才组成的团队，和任何其他公司从相同的人才库中招聘的人一样，事实上，如果你在行业中工作了一段时间，你会发现你认识的人可能会从现场工作转到供应商公司，反之亦然，而且很有可能这种情况也会发生在你自己身上。我自己曾在至少六家大型供应商公司担任过工程师，在这些公司中，没有任何特殊的“秘密”知识被隐藏起来。我们所有的客户支持甚至内部支持知识，获取方式和客户一样。有时候，客户实际上比我们还更能接触到我们的文档！
- en: If vendors knew how to make their products work so much better than they were
    working in the field, they would do anything that they could to get that information
    out there. Almost all major vendors have extensive documentation, training, certification,
    and other programs in the hopes that IT workers in the field will be able to do
    work on their own without anything going wrong at all and being able to fix it
    themselves whenever possible. It is not in their interest to have people say that
    the products do not work properly and that the vendor has to step in to fix things.
    The vendors desperately want IT to be able to properly deploy, configure, and
    maintain in the field without vendor involvement. That looks good for marketing
    and it generates the maximum profits. It also makes for the best relationship
    with IT which, by and large, is the biggest promoter and the biggest gatekeeper
    to hardware and software being purchased.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果供应商知道如何让他们的产品在现场工作得比目前好得多，他们会尽一切可能将这些信息传递出去。几乎所有主要供应商都有广泛的文档、培训、认证和其他项目，希望现场的
    IT 工作人员能够独立完成工作，且不出现任何问题，尽可能自己解决问题。供应商并不希望人们说产品无法正常工作，供应商必须介入修复问题。供应商迫切希望 IT 能够在没有供应商介入的情况下，正确地部署、配置和维护产品。这对市场营销有好处，也能带来最大化的利润。同时，这也有助于建立与
    IT 的最佳关系，而 IT 大体上是硬件和软件采购的最大推广者和最大门槛守卫者。
- en: Perhaps there is a mistaken belief that the best of the best IT staff will automatically
    be gobbled up by vendors leaving the rest of the field with only those that could
    not cut it. That might sound plausible, but it is anything but reality. First,
    few vendors have the deep pockets that people imagine and there are often customers
    far more willing and able to pay and attract the top tier talent. Second, vendor
    support work is often very different from normal IT work and few people drawn
    into IT in general enjoy it as much simply because the technical and business
    aspects are different, while highly related the two jobs differ in significant
    ways so there is no automatic flow back and forth. Third, extremely little support
    from any vendor is as technical as an IT role would be. Vendor roles tend to involve
    sales and account management, following detailed rules and scripts, and implementing
    things in a pre-defined way designed not to accommodate IT processes, but sales
    ones. Bottom line, the best IT people rarely want to end up in vendor jobs and
    those that do tend to do so not because the vendor jobs are better for their IT
    aspirations, but because they saw an opportunity to leverage their expertise while
    leaving IT as a field. Many vendors have no real IT support at all.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 也许有人误以为，最优秀的 IT 人员会自动被供应商吸纳，剩下的领域只会留下那些无法胜任的人。这听起来可能有些道理，但实际上完全不是这样。首先，很少有供应商像人们想象的那样有雄厚的资金，而且往往有些客户比供应商更愿意支付并吸引顶尖人才。其次，供应商的支持工作通常与普通
    IT 工作有很大的不同，很多人进入 IT 行业时并不喜欢这些工作，因为技术和商业方面的差异，虽然这两个职位高度相关，但也存在显著的区别，因此并没有形成自动的流动。第三，任何供应商提供的支持工作都没有
    IT 职位那样技术性强。供应商的职位通常涉及销售和客户管理、遵循详细的规则和流程，并按照预定的方式实施，目的是为了适应销售流程，而非 IT 流程。总的来说，最优秀的
    IT 人员很少愿意进入供应商工作，而那些愿意的人往往并不是因为供应商的工作更符合他们的 IT 理想，而是因为他们看到了一个利用自己专业知识的机会，同时离开了
    IT 领域。许多供应商根本没有真正的 IT 支持。
- en: Remember that vendors make products, they do not *do IT*. So, what a vendor
    is typically prepared to help support is quite different than what an IT department
    should be doing for their organizations. Even when they have great IT resources
    on staff, those resources are unlikely to be allowed to provide true IT support
    to a customer. Vendors typically only want to, and often only can, provide support
    within the very tight confines of *operating their product as intended*. It is
    not uncommon at all for IT organizations to know as much or more about vendor
    products and how to implement them best than the vendor does. The vendor simply
    does not have any reason to have that knowledge. A hammer maker is not likely
    to know as much about driving nails using their hammers as carpenters do. Engineers
    at Toyota are unlikely to be able to drive their own cars as well as professional,
    full time race car drivers. Canonical is unlikely to know the best way to deploy
    Ubuntu in your organization compared to your internal system administrators.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，供应商生产产品，而不是*提供IT服务*。因此，供应商通常能提供的支持与IT部门在其组织中应做的事情有很大不同。即使他们的员工拥有强大的IT资源，这些资源也不太可能被允许为客户提供真正的IT支持。供应商通常只希望并且往往只能在*按预期操作其产品*的非常狭窄范围内提供支持。IT组织知道的关于供应商产品的知识，甚至如何最好地实施这些产品，往往与供应商知道的一样多或更多，这并不罕见。供应商根本没有必要掌握这些知识。比如，制锤工并不可能像木匠那样了解如何使用他们的锤子钉钉子。丰田的工程师也不太可能像职业赛车手那样驾驶他们自己的车。Canonical相比你们的内部系统管理员，不太可能知道在你们的组织中如何最佳地部署Ubuntu。
- en: The skills of vendors, mainly hardware engineering or software engineer (or
    both) are different than IT skills and even the most amazing of vendors have little
    reason to be especially good at IT tasks. It just is not their wheelhouse, why
    would they have those skills, they are not a part of their business. That is our
    business for those of us in IT.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 供应商的技能，主要是硬件工程或软件工程（或者两者兼有），与IT技能不同，即便是最优秀的供应商也没有特别的理由在IT任务上表现出色。那根本不是他们的擅长领域，他们为什么要具备这些技能呢？这不是他们业务的一部分。对于我们这些从事IT工作的人来说，这才是我们的业务。
- en: What vendors should be good at, and generally are, is in knowing their products.
    They know when there is a flaw to be fixed, they know how companies are tending
    to use their products in most cases, they know what changes are coming in the
    future (but may not be free to disclose this to customers.) The vendor is a valuable
    resource, but only if kept in a logical context.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 供应商应该擅长的，并且通常也擅长的，是了解他们的产品。他们知道什么时候有缺陷需要修复，他们知道大多数公司在如何使用他们的产品方面的趋势，他们知道未来会有哪些变动（但可能无法向客户透露这些信息）。供应商是一个宝贵的资源，但前提是要在合适的逻辑框架下使用他们。
- en: 'Because vendors do not sell IT, but rather products, it makes no sense for
    a vendor to maintain highly skilled IT resources on any scale, if at all. The
    idea that they would even be able to do what any internal IT can do is pretty
    absurd, it just does not make any sense. It is most common for vendors to employ
    mid-career and junior resources when they do offer some amount of IT assistance
    because there is simply no value to having more expensive resources on staff.
    Customers coming to a vendor to attempt to get IT resources cannot be treating
    IT as a priority or logically and therefore there is no reason to provide them
    expensive resources that they are not prepared to leverage: the profits on selling
    lower cost services are simply far greater. And customers who are sophisticated
    enough to need high end IT resources would know not to engage a vendor for that
    need.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因为供应商卖的不是IT服务，而是产品，所以没有理由在任何规模上，甚至完全没有，保持高度专业化的IT资源。即便他们能够做到内部IT所能做的任何事情，这种想法也是相当荒谬的，根本没有意义。供应商在提供一定量的IT帮助时，通常会聘用中级和初级人员，因为没有必要聘用更昂贵的资源。来找供应商寻求IT资源的客户不可能把IT当作优先事项或做出合乎逻辑的选择，因此也没有理由为他们提供昂贵的资源——这些资源他们并没有准备好利用：销售低成本服务的利润远大于高成本服务。而那些足够成熟，真正需要高端IT资源的客户，通常知道不应该向供应商寻求这种帮助。
- en: So, there is no magic. Vendors do not know things that we do not know. Generally,
    they know far less, at least of what is important in our environment. They have
    little to no access to the necessary business knowledge to make reasonable IT
    decisions. They are not at liberty to approach problems or solutions with the
    breadth of skill and products across the industry but only the products that they
    provide, complimentary products, and processes that encourage greater use of their
    products. They have no alignment with the values of IT and are financially encouraged
    to work in their interest, not yours. There are no shortcuts, the level of support
    that should be available from IT resources is second to none, no other organization
    has the knowledge and mandate to support your organization the way that your IT
    (which should almost always include external IT resources from non-vendors) does.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，没有什么魔法。供应商并不知道我们不知道的事情。通常，他们知道的内容要少得多，至少在我们环境中重要的东西，他们知道得更少。他们几乎没有获取必要的业务知识来做出合理的
    IT 决策的权限。他们不能以跨行业的广泛技能和产品来处理问题或解决方案，而只能依赖他们提供的产品、互补产品以及鼓励更多使用其产品的流程。他们与 IT 的价值观没有对接，并且在财务上鼓励他们为自己的利益工作，而不是为你的利益工作。没有捷径，IT
    资源应该提供的支持水平是无与伦比的，没有任何其他组织能够像你的 IT（通常应包括来自非供应商的外部 IT 资源）那样支持你的组织。
- en: There are essentially three ways that we can get support for our systems. First,
    we have internal IT staff. Presumably given the context of this book, that is
    the systems administration person or team. Second, we have external IT resources
    from paid IT firms that provide external IT, rather than sales, resources and
    get paid to be an extension of the internal IT team either ad hoc or perhaps all
    of the time. And then third, there are vendors and value added resellers (vendor
    representatives.)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 支持我们系统的方式本质上有三种。首先，我们有内部 IT 员工。根据本书的背景，这指的是系统管理员或团队。第二，我们有来自付费 IT 公司的外部 IT 资源，这些公司提供外部
    IT 服务，而非销售服务，且他们为扩展内部 IT 团队而收费，可以是临时性的，也可以是长期的。第三，我们有供应商和增值经销商（供应商代表）。
- en: We have to remember that IT is not a special case and the sellers of products
    are not our business advisors. Just as sellers' agents in real estate cannot represent
    buyers, and buyers' agents cannot represent sellers we have the same conflict
    of interest and opposing representation in IT. The internal IT department and
    any external IT service providers are paid for representing the needs of the business
    and are legally, as well as ethically, required to do so. On the other side vendors
    and resellers are paid through sales profits or commissions and are financially
    renumerated for representing the needs of the vendor and are legally required
    to do so and ethically they are bound to the vendors, not to the customer. That
    does not mean that a vendor and reseller cannot be friendly, useful, important,
    or professional, of course they can be and should be. It simply means that they
    are representatives of product sellers and we, as IT professionals, are representatives
    of our constituent businesses.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须记住，IT 不是一个特殊的例外，产品销售商也不是我们的商业顾问。就像房地产中的销售代理不能代表买方，买方代理也不能代表卖方一样，IT 领域也存在利益冲突和对立的代理关系。内部
    IT 部门和任何外部 IT 服务提供商的职责是代表企业的需求，他们在法律和道德上都有义务这样做。另一方面，供应商和经销商通过销售利润或佣金获得报酬，代表供应商的需求，他们在法律上有义务这样做，从道德上讲，他们对供应商负责，而不是对客户负责。当然，这并不意味着供应商和经销商不能友好、有用、重要或专业，他们当然可以，也应该这样做。这仅仅意味着他们是产品销售商的代表，而我们作为
    IT 专业人士，则是我们所服务企业的代表。
- en: We can work together, and we can do so best by understanding each others roles
    and obligations. In other walks of life we rarely feel that sales people or product
    representatives are looking out for our best interests rather than trying to promote
    their wares, yet in IT this is a common point of confusion.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以合作，最好的方式是理解彼此的角色和职责。在其他行业中，我们很少觉得销售人员或产品代表是为我们的最佳利益着想，而不是试图推广他们的商品，但在 IT
    领域，这却是一个常见的混淆点。
- en: Of course vendors as well as their reseller representatives (correctly called
    VARs but often presenting themselves as MSPs, but be careful not to confuse a
    true IT service firm with a reseller just hoping that their customers do not question
    the name) can be valuable allies and we should not completely discount them. They
    can be part of our solution process, especially when it comes to getting access
    to special tools, beta components, patches, release information, bug fixes, replacement
    hardware, and other components that come from the engineering group, rather than
    aspects handled by IT.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，供应商及其经销商代表（准确来说称为VARs，但常常以MSPs的身份出现，但要小心不要将真正的IT服务公司与那些只希望客户不质疑其名称的经销商混淆）可以是宝贵的盟友，我们不应完全忽视他们。他们可以成为我们解决方案的一部分，尤其是在获取特殊工具、测试版组件、补丁、发布信息、错误修复、更换硬件以及其他来自工程团队的组件（而不是IT处理的部分）时。
- en: Visualizing what IT handles and what engineering handles
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 形象化IT负责的部分和工程负责的部分
- en: Even as IT professionals it is sometimes confusing to understand what falls
    under IT and what falls under the engineering (of a vendor or a software engineering
    department.) But the answers here should be quite simple.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 即便作为IT专业人员，有时理解什么属于IT范畴，什么属于供应商工程（或软件工程部门）范畴，也可能令人困惑。但这里的答案应该非常简单。
- en: As IT professionals, we use products made by others and assemble those products
    into complete solutions. We do not make Linux, we do not create a new database
    engine, we do not write the applications that our businesses run. We also do not
    form sheet metal, run chip fabs, or otherwise build computer hardware components,
    but we might buy parts and assemble them into a computer in rare circumstances
    (like how a mechanic might assemble car parts, but not actually pour metal to
    make them.)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 作为IT专业人员，我们使用他人制作的产品，并将这些产品组装成完整的解决方案。我们不制作Linux，我们不创建新的数据库引擎，我们不编写企业运行的应用程序。我们也不制造钣金，不运营芯片厂，或以其他方式制造计算机硬件组件，但在少数情况下，我们可能会购买部件并将其组装成计算机（就像机械师可能组装汽车零部件，但不实际铸造金属做零件一样）。
- en: Vendors are responsible for making the tools and products that IT is responsible
    for then using and operating. Vendors write the operating systems, we in IT install
    them. Vendors make the applications, we install them. Vendors are involved in
    making products, not solutions. IT solves organizational challenges, it does not
    make products.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 供应商负责制造IT部门负责使用和操作的工具和产品。供应商编写操作系统，我们在IT部门安装它们。供应商制作应用程序，我们安装它们。供应商参与的是产品的制造，而不是解决方案的创造。IT解决的是组织性挑战，而不是生产产品。
- en: If we were talking cars, perhaps it is more clear. Car vendors build cars. Customers
    ride in cars. The two obviously have an important relationship with each other,
    but it is pretty obvious that designing and building cars is a very different
    task than plotting a course and driving to a destination. We can obviously see
    the vendor making tools for us to use, and we are car buyers using those tools
    to solve transportation challenges. Apply this logic to IT and voila.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们谈论的是汽车，也许会更清楚。汽车供应商制造汽车。顾客乘坐汽车。这两者显然有着重要的相互关系，但显然，设计和制造汽车是一个非常不同的任务，而不是规划路线并开车到目的地。我们显然可以看到供应商为我们制造工具，而我们是使用这些工具来解决交通运输问题的汽车买家。将这种逻辑应用到IT领域，便能一目了然。
- en: Real support, the most important support, is always going to come from our own
    IT team (which always includes external IT staff as well.) Our own IT staff not
    only has the broad range of business knowledge necessary to make key support decisions,
    but also has the range of potential solutions to work around vendor limitations.
    It is common that solutions are bigger than can be addressed by a single product
    vendor in isolation.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的支持，最重要的支持，始终来自我们自己的IT团队（这其中通常也包括外部IT工作人员）。我们自己的IT团队不仅具备做出关键支持决策所需的广泛业务知识，而且还拥有解决供应商限制的潜在解决方案范围。解决方案通常是一个单一产品供应商无法单独处理的。
- en: To give an analogy, if you were a logistics firm and you needed to get a shipping
    container from New York to Los Angeles and your truck broke down, of course you
    might ask the truck manufacturer for information on repairing the truck, but you
    would not stop there. You would look at replacement trucks, renting a truck, other
    truck vendors, consider the cost of using another logistics partner to ship on
    your behalf while you are down, or consider switching to rail or sea transport!
    Of all of those things, only repairing or maybe replacing your initial truck is
    within the potential scope of support of the truck manufacturer, and even repairing
    it from them is much more limited in scope than you would likely get with a mechanic.
    A skilled mechanic might be able to propose partial functionality, third party
    parts, or alternative fixes that are not possible from, or approved by, the original
    vendor. The original vendor has value here, important value, but only a tiny fraction
    of the value that the overall department would have.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，如果你是一家物流公司，需要将一个集装箱从纽约运送到洛杉矶，而你的卡车坏了，当然你可能会向卡车制造商咨询修理信息，但你不会就此止步。你会考虑更换卡车、租用卡车、寻找其他卡车供应商，考虑在维修期间使用其他物流伙伴为你运输，或考虑改用铁路或海运！在所有这些选择中，只有修理或许更换你的初始卡车，才可能是卡车制造商的支持范围，甚至从他们那里修理它的范围也远远不如你从修理工那里得到的帮助。一个熟练的修理工可能会提出部分功能的恢复、第三方配件，或者一些原厂供应商无法提供或批准的替代修理方案。原厂供应商在这里有其价值，重要的价值，但只是整体部门价值的一个小小部分。
- en: It takes a much broader scope to properly deal with most disasters. Rarely do
    we want to just sit on our hands waiting for a vendor to determine if an issue
    belongs to them or not, and then decide if you have valid support or not, and
    then decide how they are going to deal with it. Even a great vendor, with great
    support has their hands dramatically tied compared to what IT staff should be
    doing. IT has, or should have, the scope to do whatever is necessary to protect
    the company. That might involve engaging the preexisting vendor or it might involve
    working around a vendor, or perhaps it just involves coordinating multiple vendors.
    Even when a vendor does need to be involved, IT should be overseeing that vendor.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 处理大多数灾难需要更广泛的范围。我们很少愿意坐等供应商判断问题是否属于他们，然后再决定是否有有效的支持，再决定他们如何处理这个问题。即使是优秀的供应商，拥有出色的支持，相比于
    IT 员工应该做的事情，他们的能力也是受到极大限制的。IT 部门拥有或应该拥有足够的权限，做任何必要的事情来保护公司。这可能涉及与现有供应商合作，或者可能需要绕过供应商，或者仅仅是协调多个供应商的工作。即使需要供应商介入，IT
    部门也应当负责监督这些供应商。
- en: IT vendor managements
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IT 供应商管理
- en: More than any other IT department, system administration often has to interact
    with vendors and has a greater level of need to oversee them directly. At the
    same time, system administration is also the department most likely to not have
    any vendors, at least not in the traditional sense.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他 IT 部门相比，系统管理部门更常与供应商互动，也更需要直接监督这些供应商。同时，系统管理部门也是最可能没有任何供应商的部门，至少在传统意义上是如此。
- en: Vendors should not be thought of as a department, but rather more like a specific
    tool. A tool that needs to be overseen and used when appropriate, but at the direction
    and discretion of IT. A vendor on their own lack's direction and control.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 供应商不应被视为一个部门，而更像是一个特定的工具。一个需要监督并在适当时使用的工具，但使用权和决定权在 IT 部门。单独的供应商缺乏方向和控制。
- en: Managing the vendors for the hardware, software, and services of an IT department
    should be an every day task of that department. The vendor relationship at that
    level is important as this is the level at which technical know-how should be
    exchanged. For us, as Linux system administrators, this means direct contact with
    our operating system vendor counterparts at vendors such as IBM Red Hat and Canonical
    who can keep us apprised of patches, upcoming changes, release dates, security
    alerts, and so forth and, in some cases, may be focused technical resources for
    us to lean on.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 管理 IT 部门的硬件、软件和服务供应商应当是该部门的日常任务。这个层级的供应商关系非常重要，因为这是技术知识应当交换的层级。对于我们 Linux 系统管理员来说，这意味着与像
    IBM Red Hat 和 Canonical 这样的供应商的操作系统供应商对接，他们可以让我们及时了解补丁、即将发布的更改、发布日期、安全警报等，有时也可能成为我们依赖的专门技术资源。
- en: Systems administration may have many other types of vendors as well. We may
    have to work with server hardware, storage, database, and even application vendors
    at times. That there are so many potential vendors highlights how critical IT
    management of the vendors are. Without IT oversight, there is no coordination
    between those vendors and no mandate for them to collaborate or to work towards
    a common goal. The mandate to work towards the good of the business lies solely
    with IT in this case. It is for IT and IT alone to ensure that the vendor resources
    at its disposal are used for the good of the business when appropriate, rather
    than being sales efforts for the vendors.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 系统管理可能还涉及许多其他类型的供应商。我们可能需要与服务器硬件、存储、数据库，甚至应用程序供应商合作。供应商众多，强调了IT管理供应商的重要性。没有IT的监督，这些供应商之间没有协调，也没有要求他们进行合作或朝着共同目标努力。此时，推动业务发展的责任完全在于IT。只有IT才能确保在适当的情况下，利用供应商资源为业务发展提供帮助，而不是让其成为供应商的销售行为。
- en: The best practice is that support should come from within. Fundamentally, at
    the core of it all, we should see our IT team (inclusive of internal staff and
    external staff) as our solutions team both to design our solutions up front and
    to deal with them when something goes wrong. When vendors are required to be part
    of the solution process they should be engaged, managed, and overseen by the IT
    team and managed as just another resource.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践是支持应当来自内部。根本上，所有的核心内容应该是，我们应将IT团队（包括内部和外部工作人员）视为解决方案团队，不仅是为了前期设计解决方案，也是为了在出现问题时处理它们。当供应商需要参与解决方案过程时，他们应当由IT团队进行协调、管理和监督，并且作为另一种资源进行管理。
- en: Triage skills and staff
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分类技能和人员
- en: 'Most companies fail dramatically when disaster strikes because triage processes
    either do not exist or are too poor. The skills to run the business day to day
    are different than the decision-making processes needed in real time in a crisis:
    there is little time for meetings, almost no ability to consult with different
    parties, and planning is out of the question. When in this mode we need someone
    leading who is trusted, handles stress well, and is a perceiver rather than a
    planner - someone who thrives running with rapid decision making and does not
    need to have planned their events ahead of time. Planning is excellent and as
    much as is reasonable should be done ahead of time, but everyone involved from
    junior IT staff to senior executive staff should understand that true emergencies
    cannot be adequately planned for, and real life will involve many unknowns that
    have to be evaluated on the fly.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数公司在灾难发生时会遭遇严重失败，因为分类流程要么不存在，要么非常不完善。日常运营所需的技能与危机中实时决策所需的决策过程是不同的：几乎没有时间开会，几乎没有与不同方协商的能力，规划根本不可能进行。在这种模式下，我们需要的是一个值得信赖、能应对压力且更倾向于观察而非规划的人——一个能快速决策、且不需要提前规划事件的人。规划固然重要，合理的规划应尽可能提前完成，但从初级IT人员到高级管理人员，每个人都应该明白，真正的紧急情况是无法充分预见的，现实生活中会有很多未知情况需要即时评估。
- en: Our first process when there is a disaster is to head into triage mode. We need
    to know what exactly is not working, what has happened, what is the impact - basically
    we need to know the status, of everything. Is this something we think that we
    can fix in minutes? Is this going to require some investigation? How are people
    impacted? Are we losing money, productivity, customers?
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生灾难时，我们的第一个过程就是进入分类模式。我们需要准确知道什么地方出了问题，发生了什么，影响是什么——基本上，我们需要知道一切的状态。我们认为这能在几分钟内解决吗？需要进行调查吗？人们受到了什么影响？我们在失去金钱、生产力或客户吗？
- en: There are so many ways that we can be impacted by a disaster. Being able to
    quickly get a grasp of the business effects, how does each department play into
    the big picture, which teams can work just fine, which teams are dead in the water,
    are there teams that are functional but limping, and so forth is absolutely critical
    and can mean all of the difference between everyone just standing around being
    unsure what to do and a triage manager getting things fixed right away. We need
    status, and we need a lot of it, very quickly.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 灾难可能会对我们产生多种影响。能够迅速掌握业务影响，了解各个部门在大局中的作用，哪些团队能正常运作，哪些团队处于停滞状态，哪些团队能运作但在艰难维持，等等，都是至关重要的。这一点可能意味着从大家都站在那里不知所措到一个分类经理迅速解决问题的巨大差异。我们需要状态信息，并且需要大量的信息，且非常迅速地获得。
- en: In most cases a surprisingly small amount of our time is actually focused on
    solving a technical problem. This may be because it is simply a hardware failure
    and we just have to wait for replacement hardware to arrive. Or maybe it is complete
    software failure and we just have to rebuild our systems. Sometimes deep technical
    investigation has value, and sometimes it requires a lot of know-how to the cause
    of an issue, but this is not the majority case. We are much more likely to have
    a relatively quick fix, or at least quick in terms of the amount of administrator
    time is necessary to use during the process. When fixes take a long time, it is
    most typically because there is a third party that needs to be waited on.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，我们真正用于解决技术问题的时间竟出乎意料地少。这可能是因为只是硬件故障，我们只需要等待替换硬件到达。或者可能是完全的软故障，我们只需重建系统。有时候，深入的技术调查是有价值的，而且确实需要很多专业知识来查找问题的根源，但这并非大多数情况。我们更可能遇到相对快速的修复，至少在管理员需要投入的时间上是相对快速的。当修复时间很长时，通常是因为需要等待第三方的支持。
- en: Typically, we are going to mentally focus on the technical aspects of an outage.
    Other aspects of most outages are more important. Some organizations have operational
    triage experts who step in and handle these aspects of an outage allowing us as
    system administrators to focus purely on the technical aspects under our auspices.
    For most businesses, though, dealing with an IT disaster is going to require IT
    oversight from beginning to end. In the majority of cases, the very team that
    we would hope would step in to assist IT in solving issues and managing the triage
    of the operational environment gets in the way of finding solutions rather than
    being part of the solution.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们会将注意力集中在停机的技术方面。停机的其他方面通常更为重要。一些组织拥有操作分诊专家，他们介入并处理停机的这些方面，使我们作为系统管理员能够专注于我们职责范围内的技术问题。然而，对于大多数企业而言，处理IT灾难从头到尾都需要IT的监督。在大多数情况下，我们希望帮助IT解决问题并管理操作环境分诊的团队，反而成为了寻找解决方案的障碍，而不是解决方案的一部分。
- en: I can give status, or I can fix things
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我可以提供状态更新，或者我可以解决问题。
- en: Everyone who has ever dealt with any kind of outage, disaster, or what have
    you impacting a business knows that the expected behavior is not for executives
    and management to jump in and start to find ways to protect the business or to
    run interference to assist you in dealing with the problem that you are suddenly
    tasked with; but instead the very people we depend on to create an environment
    to minimize impact and to make us effective almost universally turn on us and
    begin demanding explanations, status reports, updates, estimates, promises, and
    miracles all of which are pointless at best and completely undermine the business
    at worst.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 每个曾经处理过任何形式的停机、灾难或其他影响企业的事件的人都知道，预期的反应不是让高管和管理层冲进来，开始寻找保护企业的方式，或在你突然被指派处理问题时提供帮助，而是我们依赖的那些人，应该创造一个最小化影响的环境并让我们有效工作，但几乎普遍会转而要求我们提供解释、状态报告、更新、估算、承诺和奇迹，所有这些充其量是无用的，最坏的情况是完全破坏了业务。
- en: Even under ideal conditions reports, status, updates, measurements and the like
    have a cost and come at the expense, even if only a small degree, from productivity.
    During a disaster, it is rare for anyone except those in the most critical positions
    of attempting to mitigate and fix the disaster to have any ability to provide
    status. So, the most expected event is that everyone will descend on those few,
    critical positions and demand status updates.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在理想情况下，报告、状态更新、测量等也有成本，并且这些成本通常会从生产力中扣除，哪怕是极小的部分。在灾难发生时，除了那些在最关键岗位上试图减轻和解决灾难的人，很少有人能提供状态更新。所以，最常见的情况是，所有人都会集中在那些少数关键岗位上，要求状态更新。
- en: There are several problems here that are all really obvious to us, working in
    these positions, but often lost on those who are now experiencing an impact to
    their productivity. We have two tools at our disposal to help with this. One,
    show this book to those in management and ask them to take the time to understand
    the situation. The second is planning. Make sure that as a part of your disaster
    planning and preparation process that there is training for management, and a
    policies and procedural plan, as to how status will be given, who may ask for
    it, and from whom. Consider designating and official spokesperson for IT (and
    other departments) who can spend all of their time giving updates as they are
    not involved in any other aspect of the disaster recovery efforts. Perhaps they
    will run a war room in person, or maintain an email messaging group, they could
    manage a chat room, or head a conference call that others can dial into as needed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个问题，对于我们这些从事这些职位的人来说，这些问题显而易见，但对于那些现在正在经历生产力受影响的人来说，往往是无法察觉的。我们有两种工具可以帮助解决这个问题。第一，把这本书展示给管理层，让他们花时间理解情况。第二是规划。确保在灾难规划和准备过程中，管理层有相关培训，以及政策和程序计划，明确如何提供状态更新、谁可以索取这些更新，以及从谁那里获取。考虑指定IT（及其他部门）的官方发言人，他们可以将所有时间用于提供更新，因为他们不参与灾难恢复工作的其他方面。也许他们会亲自主持一个战情室，或者维护一个电子邮件消息组，管理一个聊天室，或者主持一个电话会议，其他人可以根据需要拨入。
- en: Then any updates that exist can be passed, proactively, to this mandated reporter(s)
    and they can maintain that status for the organization. The entire organization
    should understand the critical nature of having a mandated point of reporting
    so that the team actually attempting to solve the issues and get the company back
    to full functionality can spend their time saving the company rather than reporting
    on its failures. Obviously the business has some business needs to know as much
    as possible about what is happening. More impactful is political problems internally
    as managers feel that they, too, have to provide status that they cannot have
    and many layers of organizations will have people acting emotionally and potentially
    willing to cause significant financial damage in the hopes of appearing to be
    concerned or just to satisfy their desire to know more than anyone can really
    know.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，任何现有的更新可以主动传递给这些指定的报告人员，他们可以为组织维持这一状态。整个组织应当理解设立一个指定报告点的重要性，这样，真正试图解决问题并让公司恢复正常运作的团队，可以将时间用于拯救公司，而不是报告公司的失败。显然，企业有一些业务需求，需要尽可能多地了解发生的事情。更具影响力的是内部的政治问题，管理者会觉得他们也必须提供他们无法获得的状态，而组织中的多个层级往往会有情绪化的人，他们可能会故意造成重大的财务损失，希望看起来更关心，或只是为了满足自己想要知道更多信息的欲望。
- en: When training management as to why IT (and other departments) cannot provide
    extensive updates we need them to understand why we, as the people attempting
    to remediate the issue, cannot be spending time giving status updates.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在培训管理层时，解释为什么IT（及其他部门）不能提供详尽的更新，我们需要他们理解，作为试图解决问题的人，我们不能花时间提供状态更新。
- en: We don't have any information to give. Fundamentally, this is the biggest piece
    of the puzzle. While we might have a simple answer like *the replacement part
    is scheduled to get here tomorrow* typically we know nothing about how long something
    is going to take to fix. Most things in IT are fixed essentially the moment that
    we know what the issue is. Until it is completely fixed we normally are only working
    from hypothesis. Pushing us for information really just ends up being analogous
    to demanding that we feed intentionally false information because have nothing
    else to provide. It is like torturing a prisoner that does not know any information,
    but if you torture them they are likely to just make something up in the hopes
    of the torture stopping.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有任何信息可以提供。基本上，这是这个问题的最大难点。虽然我们可能会有一个简单的答案，比如*替换部件计划明天到达*，但通常我们对修复需要多长时间一无所知。IT中的大多数问题在我们知道是什么问题时，本质上就已经解决了。直到完全修复，我们通常只是从假设中工作。向我们索要信息，实际上就等同于要求我们故意提供虚假的信息，因为我们没有其他可以提供的东西。这就像是在折磨一个不知道任何信息的囚犯，如果你折磨他们，他们很可能会编造些东西，只是希望折磨能停止。
- en: We are busy. If things have not already been resolved, chances are we are completely
    engaged in trying to get them resolved. All of the time used to give status has
    to come from the time working on resolving the issue. It is more than simply wasting
    time, it is also causing interruptions and demoralizing those trying to resolve
    things. It sends a huge organizational message that the issue does not matter
    very much and that the efforts to get it fixed are not appreciated as they should
    be. It makes IT wonder *if management is not prioritizing getting things fixed,
    why would we?*
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都很忙。如果事情还没有解决，很可能我们正在全力以赴地试图解决它们。用来提供状态更新的时间必须从解决问题的时间中挤出。这不仅仅是浪费时间，它还会造成中断，打击那些在解决问题的人士的士气。它传递了一个巨大的组织信息，那就是问题并不那么重要，而且解决问题的努力没有得到应有的重视。这会让IT部门产生*如果管理层都不优先解决问题，我们为什么要做？*的想法。
- en: '*Political Risk*. In attempting to get everyone who wants to be able to *plan*
    a disaster information to work from those working to resolve the issue are generally
    in a very tough position of having to guess quite heavily as to when things will
    be finally resolved. Most organizations handle this uncertainty, which cannot
    be helped, quite negatively. Intentional bad information is often rewarded, honesty
    is often punished. Putting your information providers into a position of potentially
    having to *just tell people what they want to hear* or *providing inaccurate information
    for political protection* means that the business may then operate with bad data
    causing unnecessary additional financial loss. It is a terrible time to be pushing
    for bad data over no data, yet it is when it is most likely to happen.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*政治风险*。在试图让所有想要获得灾难信息以便做出*规划*的人能够从那些正在解决问题的人那里获取信息时，他们通常处于一个非常困难的境地，需要大胆猜测最终问题何时能解决。大多数组织都会对这种无法避免的不确定性采取非常消极的态度。故意提供错误信息往往会得到奖励，而诚实则常常受到惩罚。将信息提供者置于可能不得不*只告诉人们他们想听的*或*提供不准确的信息以保护自己政治利益*的位置，意味着公司可能会用错误的数据运营，从而导致不必要的额外财务损失。在这个时候推动错误的数据而不是没有数据是非常糟糕的，但这正是最有可能发生的时刻。'
- en: Priorities. If the organization starts to prioritize, from management, the perception
    that reports, status meetings, calls, and other things that do nothing to resolve
    the issue to get the company back running at full speed are more important than
    finding a solution, this will naturally, and absolutely should, change how IT
    or any other department tackles the problem. If any issue is so trivial that we
    have meetings to discuss timelines instead of fixing the system, then overtime,
    rescheduling family events, even skipping lunch all become absurd IT sacrifices
    that obviously have no value to the company. We would never do any of those things
    just for some meeting, and if that meeting is more important than finding a solution,
    we have a relative value assessment that gives us a lot to work with.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 优先事项。如果组织开始从管理层开始优先考虑那些报告、状态会议、电话和其他无法解决问题的事情，而这些事情并不能帮助公司恢复正常运转，那么这将自然而然地，也应该绝对改变IT或任何其他部门处理问题的方式。如果任何问题都是如此琐碎，以至于我们开会讨论时间表而不是修复系统，那么随着时间的推移，加班、重新安排家庭活动，甚至跳过午餐，都会成为显然对公司没有价值的IT牺牲。我们绝不会仅仅为了某个会议而做这些事情，如果那个会议比找到解决方案更重要，那我们就有了相对价值评估，能够帮助我们找到行动的方向。
- en: So how should management act? Management needs to do all the opposite. If status
    even matters, and we understand that it generally does, then have someone that
    is not involved in the remediation handle those communications. Keep priorities
    clear. Assign teams to run interference and keep all interruptions away from the
    team attempting to fix broken systems. Have people bring them food, drinks, coffee,
    run errands, whatever is needed - show that they matter, a lot, instead of suggesting
    that they do not matter. Do not punish messengers for delivering bad news, reward
    them for honesty. Empathize and think about the best results for the business.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 那么管理层应该如何行动呢？管理层需要做完全相反的事情。如果状态更新重要，我们理解它通常确实很重要，那么就让那些没有参与修复工作的人来处理这些沟通。保持优先事项清晰。指定团队来进行干预，避免所有打扰到正在修复系统的团队成员。让人们为他们送餐、饮料、咖啡，或者做些杂务，无论需要什么——让他们感到重要，而不是暗示他们不重要。不要因为传递坏消息而惩罚信息传递者，要奖励他们的诚实。站在他们的立场，考虑对公司最有利的结果。
- en: All things that are easy to say and hard to do when disaster has struck. Plan
    ahead, have these discussions, make a plan, get executive sign off before things
    happen. Have an action plan to put in place that says who is in charge, how things
    happen, and so on.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是容易说却难以做到的事情，尤其是在灾难发生时。提前规划，进行这些讨论，制定计划，在事情发生之前获得高层批准。制定一个行动计划，明确谁负责，事情如何进行，等等。
- en: Our first stage of triage is an assessment. Do we have a plan to get back online
    quickly? We need to know the situation as it stands, and we need to then relay
    that information somehow to management. From here, things get tricky. There are
    so many variables that teaching triage is anything but easy. Someone who excels
    at triage needs to be able to take the situation as it is and gauge a range of
    issues from ways to fix the existing problem, potential options to work around
    it, and in many cases, how to modify the organization to best react to it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的首个分诊阶段是评估。我们是否有一个快速恢复在线的计划？我们需要了解当前的情况，然后需要以某种方式将这些信息传达给管理层。从这里开始，情况变得复杂。由于变量太多，教学分诊并非易事。擅长分诊的人需要能够评估现有的情况，找出解决当前问题的方法、可行的替代方案，并且在许多情况下，如何调整组织以便更好地应对。
- en: This is very much a *thinking outside of the box* scenario. We need, at this
    point, to look at the big picture and figure out how to best keep the finances
    of the business running. This might seem like a management task, and again, ideally
    it is, but IT should play a role as we have certain types of insight that might
    be lacking elsewhere.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这的确是一个*跳出框架思考*的情景。此时我们需要从大局出发，找出如何最好地保持企业的财务运转。这看起来可能像是管理层的任务，理想情况下确实是如此，但IT部门也应发挥作用，因为我们具备一些其他部门可能缺乏的见解。
- en: Outside of technical fixes, mitigation strategies will vary broadly based on
    the type of business, type of impact, and so on. Should we send everyone to get
    coffee? Maybe plan for a long lunch? Get everyone home on vacation now to save
    on insurance because it is going to be a while before anyone is productive again?
    Perhaps moving people to paper or from email to instant messaging? Use downtime
    from one type of task to focus on others. Perhaps we do a deep office cleaning
    while people have the time - unplug those cables and really get the place clean.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 除了技术修复外，应对策略会根据业务类型、影响类型等因素有很大差异。我们是不是应该让大家去喝咖啡？也许计划一个长时间的午餐？现在就让大家去休假，以节省保险费用，因为可能要过一段时间才会有人重新变得高效？也许可以让大家从纸质工作转到即时消息，而不是继续使用电子邮件？利用一种任务的空闲时间来集中精力做其他任务。也许在大家有空的时候，我们可以进行一次彻底的办公室清洁——拔掉那些电缆，真正把地方清理干净。
- en: Big emergencies can present big opportunities as well. I have seen several times
    when companies have used catastrophic outages as chances to enact sweeping updates
    and changes that would require big time approval or large downtimes normally,
    but which could be slipped in during an outage that is happening anyway. I once
    even had an ISP based outage that was predicted to last so long that a team ran
    from New York to Washington, D.C. with a truck, put a rack of servers into the
    truck, and ran to a new location that was waiting and ready in New York and pulled
    of a datacenter migration that had been *indefinitely on hold* because of the
    necessary downtime and was able to bring workloads back online from New York before
    the ISP was able to restore service in Washington, D.C. A somewhat minor outage
    was turned into a huge *win* by the department. A large project that was struggling
    to get scheduled and approved was pulled off purely as a bonus while the team
    was able to simultaneously enact a significant *fix* by going to an alternative
    datacenter to overcome the limitations caused by the ISPs leased line at the original
    location.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 大规模紧急情况也可能带来大机会。我曾多次看到公司将灾难性停机当作机会，执行本来需要长时间审批或会导致大规模停机的重大更新和变更，但这些操作可以在反正已经发生的停机事件中顺利进行。有一次，我甚至遇到一个ISP故障，预计会持续很长时间，结果一个团队从纽约开车赶往华盛顿D.C.，将一排服务器装入卡车，赶到纽约一个准备好的新地点，成功地执行了一个本因必需停机而被*无限期搁置*的数据中心迁移，并在ISP恢复华盛顿D.C.服务之前，将工作负载从纽约恢复上线。一次看似小规模的停机，反而变成了部门的巨大*胜利*。一个大项目在艰难地等待安排和审批时，恰巧作为意外的好处被成功执行，同时团队通过迁移到备用数据中心，克服了原始地点由ISP租用线路所带来的限制，实现了一个重要的*修复*。
- en: '**Triage** is hard because it requires that we be creative, open to alternative
    ideas, able to avoid panic, think broadly and outside of the box, and do so with
    little planning or preparation. If your organization does not have someone suited
    to this role, and relatively few do, then this is something you should be outsourcing,
    but your system administrator is one of the most likely candidates for it as the
    skillsets and aptitude of administration tend strongly towards triage and disaster
    recovery as compared to engineering and planning skillsets.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**急救**很难，因为它要求我们具备创造性、开放的思维、避免恐慌、广泛地思考并跳出常规框架，并且通常没有太多的规划或准备。如果你的组织没有一个合适的人来担任这个角色，而实际上很少有人适合，那么这应该是你外包的工作，但系统管理员是最有可能胜任此角色的人，因为系统管理员的技能和素质往往更适合急救和灾难恢复，而非工程和规划。'
- en: In many cases outages result in far more than a single workload being inaccessible
    and prioritization within the technology space is also required. Your triage person
    or team needs a deep understanding of how workloads interrelate to one another,
    which ones depend on others, what can be worked around, what can be skipped, and
    how all of these workloads relate to the business itself. Only by knowing the
    scope of the technology as well as the business can anyone provide valuable insight
    into what to fix, in what order, and how the business can potentially work around
    things.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，停机不仅仅意味着一个工作负载无法访问，还需要在技术领域进行优先级排序。你的急救人员或团队需要深入了解各个工作负载之间的相互关系，哪些依赖于其他工作负载，哪些可以绕过，哪些可以跳过，以及这些工作负载如何与业务本身相关。只有了解技术范围和业务的关系，才能为修复顺序、优先级排序以及业务如何潜在应对提供有价值的见解。
- en: I wish that we were able to provide concrete guidance as to how best to survive
    a disaster, but we cannot. Disasters come in so many shapes and sizes, and the
    ways that we can deal with them are more numerous still. You are best served by
    learning how to think, how to react, and being as prepared as possible for any
    eventuality.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望我们能够提供具体的指导，告诉大家如何在灾难中生存，但我们做不到。灾难有各种形式和大小，我们应对它们的方法也更多。最好的方法是学习如何思考、如何反应，并尽可能为任何可能的情况做好准备。
- en: 'Staffing for triage: The perceiver'
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 急救人员的招聘：感知者
- en: I had the great benefit of once working for a large IT department where deep
    psychological analysis was part and parcel in the general managerial processes.
    This might sound like a terrible thing, but the approach was excellent and the
    company used proper psychoanalysis to learn how people work, how they would work
    together, who was expected to be strong or weak in different areas, and how best
    to combine people to achieve the best results.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾经有幸在一个大型IT部门工作，在那里，深度心理分析是管理过程的一部分。这听起来可能是件可怕的事，但这种方法非常优秀，公司运用了适当的心理分析来了解人们的工作方式、他们如何一起工作、谁在不同领域可能是强者或弱者，以及如何最好地组合人员以取得最佳结果。
- en: I do not want to go in to detail in all of the ways that these techniques were
    or could be helpful, but one specific thing that I want to touch on is the idea
    of the Judger and Perceiver scale of the Myers-Briggs test. I am not a psychologist,
    so I recommend that you research the test and its interpretation on your own,
    and understand that like with all psychology it is both greatly accepted as well
    as heavily disputed as to its efficacy. I will not argue for or against here,
    but only say that understanding the judging to perceiving preference pair is highly
    valuable.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我不想详细讨论这些技巧在何种情况下有帮助或可能有帮助，但我想提到的一个具体概念是迈尔斯-布里格斯性格测试中的“评判者”和“感知者”量表。我不是心理学家，所以我建议你自行研究这个测试及其解释，并理解像所有心理学一样，它的有效性既被广泛接受，也受到激烈争议。我在这里不会辩论赞成或反对，只是想说理解“评判”与“感知”偏好对的确非常有价值。
- en: I generally describe the Judge as a *planner*, one who likes to organize and
    put things in their place before an event occurs. The Perceiver is more a *reactor*
    or a *responder*, someone who wants to take the world as it comes and react to
    it in the moment.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我通常将评判者描述为一个*计划者*，喜欢在事件发生前整理和安排事物。感知者则更像是一个*反应者*或*应答者*，喜欢按部就班地接受世界的挑战，并在当下做出反应。
- en: In our world, engineers and most managers are judgers. Their role, their value
    comes from thinking ahead and organizing the business or the technology to do
    what it needs to do. Perceivers tend to excel at being administrators, rather
    than engineers, and are exactly who you need to have at the ready when there is
    a disaster. Your perceiver personalities are your natural candidates for those
    who are likely to be good at handling triage operations and thinking on their
    feet. Humanity is naturally diverse to complement one another to handle multiple
    aspects of life and this is a great example of that.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的世界里，工程师和大多数经理人都是判断型人格（Judgers）。他们的角色和价值在于提前思考，并组织业务或技术，以便完成需要做的事情。知觉型人格（Perceivers）则往往更擅长做管理员，而不是工程师，他们正是你在灾难发生时所需要的人。知觉型的人格是处理紧急情况、临场应变的自然候选人。人类天生是多样的，彼此互补，共同应对生活的多个方面，这正是这一点的典型例证。
- en: There is far more to being the right person or team member for the job than
    just fitting an aptitude on a personality test. The Myers-Briggs assessment is
    simply a tool for identifying who might be strong or weak for different positions,
    and for explaining how people tend to think and feel. For me, discovering that
    I was a strong perceiver and a weak Judger was influential in helping me to understand
    myself and how to communicate things about me to other people. It also gave me
    tools to help me to understand other people in my life so that I could communicate
    better and set expectations better when they operate differently from me.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 成为合适的人选或团队成员，远不止是符合某项能力测试中的个性类型。迈尔斯-布里格斯评估仅仅是一个工具，用来识别哪些人可能在不同职位上表现得强或弱，并解释人们通常如何思考和感受。对我而言，发现自己是一个强项知觉型和弱项判断型的人，帮助我深刻理解自己，也让我学会如何将我的特点传达给他人。它还为我提供了工具，帮助我理解生活中的其他人，以便更好地沟通，并在他们的行为与我不同的时候，设定更好的期望。
- en: Whether your company uses a formal process, or you just take an online survey
    to learn about yourself, I recommend the Myers-Briggs and similar tools for simply
    helping you to understand yourself better, if nothing else. The better you know
    yourself, the better you can be prepared to succeed where you are strong and to
    ask for help where you are weak. If you are a team leader or manager, this kind
    of information can be useful in helping to understand your team better and how
    they can work together to be stronger.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你的公司是否使用正式的流程，还是你仅仅通过在线调查来了解自己，我都推荐使用迈尔斯-布里格斯（Myers-Briggs）等工具，至少可以帮助你更好地了解自己。你越了解自己，就越能在擅长的领域做好准备，并在薄弱的地方寻求帮助。如果你是团队领导或经理，这类信息对于帮助你更好地理解团队成员以及他们如何协作以变得更强大也很有帮助。
- en: Do not be tempted to read too much into psychology tools or try to apply them
    too broadly. By and large these tools are best when applied to yourself and when
    you approach them openly and honestly with a desire to learn not about your own
    strengths, but about your weaknesses and use them for self-improvement. Remember
    that a test of this nature is not about comparative results, one result is not
    better or worse than another; all people live on scales and neither end of the
    scale, nor the middle, is a good or bad result. Strong teams, however, are generally
    built from a variety of different combinations of aptitudes and personalities
    to cover many different needs.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 不要过度解读心理学工具或试图将它们广泛应用。总的来说，这些工具在应用于自己时最有效，当你以开放和诚实的态度，带着学习自己弱点的愿望，而非仅仅是发现自己的优点时，使用这些工具能起到自我提升的作用。记住，这类测试并不是关于结果的比较，某个结果并不比另一个更好或更差；每个人都处于不同的维度中，维度的两端或中间都没有好与坏之分。然而，强大的团队通常由多种不同的能力和个性的组合组成，以满足多方面的需求。
- en: I hope that I have just filled you with confidence and ideas that you will use
    to take your triage process to the next level rather than causing a panic attack
    about the complexities and uncertainties of dealing with disasters - that should
    not be the takeaway here. Use any panic that you are feeling now as motivation
    to immediately start your planning and documentation, and to kick off conversations
    with management to get stakeholder buy in now. Make it a priority and you can
    quickly move from being unprepared to being at the forefront of businesses ready
    to respond best to almost any circumstance.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望我刚才所说的能让你充满信心和灵感，让你能够将分诊过程提升到一个新的水平，而不是让你对处理灾难的复杂性和不确定性感到恐慌——这不是你应该从中学到的重点。把现在的恐慌当作动力，立即开始你的计划和文档工作，并与管理层展开对话，争取利益相关者的支持。把这作为优先事项，你可以迅速从没有准备好转变为在几乎任何情况下都能最佳响应的领先企业。
- en: Do not feel that the person who has to handle triage has to be you. Maybe you
    are the best person for the job, maybe you are not. Very few people have the right
    personality and triage is a very special aptitude to have. What is important is
    identifying your triage person or team, whoever they are. Everyone has a role
    to play, find your place, and find the right people for the roles you have to
    fill.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 不要觉得必须由你来处理分诊工作。也许你是做这项工作的最佳人选，也许你不是。很少有人拥有合适的个性，而分诊是一项非常特殊的能力。重要的是要确定你的分诊人员或团队，不管他们是谁。每个人都有自己的角色，找到你的定位，并找到合适的人来填补你需要的角色。
- en: Our best practice in regards to staffing is to identify your triage people before
    there is a disaster and have them documented and in place to take over, and empowered
    to take over, when the time comes. Do not let the decision process of finding
    someone with a triage aptitude wait until the clock is ticking on your downtime,
    and do not let politics become the focus, rather than solutions, when time is
    of the essence.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 关于人员配置的最佳实践是，在灾难发生之前就确定你的分诊人员，并确保他们的角色已被文档化并随时可以接管，且有足够的权限在时机成熟时接管。不要等到停机时钟开始倒计时时才开始寻找具备分诊能力的人，也不要让政治成为焦点，而不是解决方案，因为时间至关重要。
- en: Logical approaches to troubleshooting
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除的逻辑方法
- en: Possibly the hardest thing that we have to do as system administrators is troubleshoot
    problems. It is one thing to be able to deploy a system initially, but a very
    different thing to be able to troubleshoot it when things start to go wrong. With
    systems administration there are so many places where things can go wrong for
    us; we sit at the nexus of so many technologies and so many possibilities that
    tracking down the source of issues can be very challenging.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 作为系统管理员，可能最困难的事情就是故障排除。能够最初部署一个系统是一回事，但当问题出现时，能够排除故障则完全是另一回事。在系统管理中，我们有太多地方可能出问题；我们坐落于众多技术和无数可能性交汇的地方，追踪问题的源头可能非常具有挑战性。
- en: Not surprisingly, experience makes this far easier than anything. The more you
    get experienced with maintaining and managing systems the more likely you are
    to be able to quickly *feel* your way around a system and often just sense what
    might be wrong when things get tricky. Nothing really trumps just knowing how
    a system will react when things are healthy and being able to sense what is wrong
    based on its behavior. Senior diagnosticians are often brought in for exactly
    this reason. With enough experience often you can just feel when an index, a cache,
    a disk, or lack of RAM is the issue.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 毫不奇怪，经验使得这一切变得比任何事情都容易。你在维护和管理系统上经验越丰富，就越能快速地*感知*一个系统，并且通常能够在情况变得复杂时就能感觉到可能出问题的地方。没有什么比真正了解一个系统在正常情况下的反应以及根据其行为感知问题更有价值了。资深的诊断专家通常正是因这一点而被召集。通过足够的经验，你往往能直觉地感觉到是索引、缓存、磁盘或内存不足的问题。
- en: Short of sheer experience, our next best tools are a deep understanding of our
    own systems and how they interact, deep knowledge of technology fundamentals as
    they apply to our situation, and logical troubleshooting.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 除了纯粹的经验，我们的下一个最佳工具是深入理解我们自己的系统及其相互作用、对适用于我们情况的技术基础知识的深入了解，以及逻辑性的故障排除方法。
- en: Of course, in many situations failures are going to be quick and obvious. The
    power is out, a hard drive has failed, a key database has been deleted. There
    is nothing to track down, only things to be solved. Other times, though, we get
    complicated issues that could be caused by almost anything and we may have to
    track down something truly difficult to pinpoint.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在许多情况下，故障是迅速且明显的。停电了，硬盘坏了，关键的数据库被删除了。没有什么需要追踪的，只有需要解决的事情。但在其他时候，我们会遇到一些复杂的问题，可能由几乎任何因素引起，我们可能需要追踪到一个真正难以定位的问题。
- en: It amazes me how often I am brought in to assist with troubleshooting only to
    find that the work that has already been done is haphazard and is often redundant.
    Of course, at times, some guesses at easy to test failure points or early tests
    of known common fail points can speed discovery, but we have to be careful not
    to lose track of what we are doing and learn systematically from what we test.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我吃惊的是，我经常被叫来协助故障排除，但发现已经做过的工作往往是杂乱无章的，而且通常存在冗余。当然，有时候，一些对容易测试的故障点的猜测，或者对已知常见故障点的早期测试，确实能加速发现问题，但我们必须小心，不能迷失方向，而是要从我们测试的内容中系统性地学习。
- en: Stories of troubleshooting
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 故障排除的故事
- en: A benefit of being an author is getting to regale you with tales of my own historic
    troubleshooting and there is no one to roll their eyes or cut me off and you cannot
    just walk away when you are bored. So here we go.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 作为作者的一个好处就是我可以和你分享我自己的故障排除历史故事，而且没有人会翻白眼或者打断我，你也不能在感到无聊时就离开。所以，来吧。
- en: One time I was called in to work on a system that was used for an extremely
    low latency application and the team had discovered intermittent problems with
    the application receiving responses from other systems. The issue would arise
    every so many minutes that a response would be received several nanoseconds later
    than it was expected to have arrived. Yes, nanoseconds! Nothing broke, no results
    were wrong, but there was just this tiny delay, and not very often.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有一次，我被叫去处理一个用于超低延迟应用的系统，团队发现应用在接收其他系统响应时会偶尔出现问题。问题是在每隔几分钟后，响应会比预期晚几纳秒到达。没错，纳秒！没有任何崩溃，结果也没有错误，只是有一个非常微小的延迟，且并不常发生。
- en: After much research, we finally found the issue through a combination of research
    and system understanding. Identifying what was happening was eventually done by
    hours of staring at a top monitor and looking for processes that were active around
    the time that the delay would occur.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 经过大量研究，我们最终通过研究和系统理解的结合找到了问题。最终，通过数小时盯着top命令的监视器，观察在延迟发生时活跃的进程，我们成功地找出了问题。
- en: Eventually the process possibilities were whittled down it was discovered that
    a memory garbage collection process that was soon thereafter discontinued in the
    kernel was using excessive system resources in its default settings and causing
    the system to halt for just a few nanoseconds while it processed memory for cleaning.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，经过缩小可能的过程范围，发现内核中一个很快被废弃的内存垃圾回收过程在其默认设置下消耗了过多的系统资源，并导致系统在处理内存清理时暂停几纳秒。
- en: I was able to address the issue by setting the garbage collection process to
    only clean a portion of RAM on each cycle allowing it to work much faster. We
    ran into the issue only because we had so much physical RAM in the server that
    the garbage collection process took measurable time, something generally not expected.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我通过将垃圾回收过程设置为每次清理部分内存，使其运行得更快，从而解决了这个问题。之所以会出现这个问题，是因为服务器上有大量物理内存，导致垃圾回收过程占用了可测量的时间，而这通常是意料之外的。
- en: In this case, good research and patience were certainly important. Being able
    to *feel* the delay in the system based on the measuring tools (no human can actually
    feel a delay that short), and then using logic to determine how a process doing
    memory garbage collection could, and would, impact a process of this nature had
    to come together to make troubleshooting possible. Without a deep understanding
    of how the system runs, it would be out of the question.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，良好的研究和耐心无疑是重要的。能够基于测量工具*感觉*到系统中的延迟（没有人能真正感觉到如此短的延迟），然后运用逻辑推理来判断进行内存垃圾回收的过程如何以及为什么会影响这种性质的进程，所有这些必须结合起来才能使故障排除成为可能。如果没有对系统运行机制的深入理解，这是不可能做到的。
- en: When troubleshooting anything I find that there are two key techniques that
    I am telling people to use over and over again. The first is to be systematic
    and to work from one end or the other. Avoid hopping around and testing at random.
    If you are testing network connectivity, for example, start at the near end of
    the stack and start building up a base of knowledge based on testing.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行故障排除时，我发现有两个关键技巧我总是反复告诉大家使用。第一个是要有条理，工作时从一端或另一端开始。避免四处跳跃或随意测试。例如，如果你在测试网络连接，可以从网络栈的近端开始，并基于测试逐步建立知识基础。
- en: In the networking example we can start with checking if our network connection
    is plumbed? Does it have an IP address? Can it ping the gateway? The ISP? A public
    IP? Is it able to resolve DNS? Can it reach the system to which it is supposed
    to connect? Can it reach the right port? Does it get a proper response?
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络故障排除的例子中，我们可以从检查网络连接是否正常开始：它是否有IP地址？能否 ping 通网关？ISP？公共IP？是否能够解析DNS？是否能访问它应该连接的系统？是否能够访问正确的端口？是否得到了合适的响应？
- en: Instead of jumping around and testing different pieces, working from the nearest
    point and exploring helps us to understand exactly when things fail, and it tells
    us quickly.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 与其四处跳跃进行不同的测试，不如从最近的点开始，逐步探索，这样有助于我们准确地了解问题在哪一刻发生了故障，并迅速给出反馈。
- en: The other key technique that I always teach is *work from what you know*. Basically,
    establish your facts. There might be many things that you do not know, but you
    cannot worry about those things. The unknown will always exist. There are always
    things that you can know, though, and these we have to establish and work from.
    Use the facts that we have to build up a larger body of knowledge by finding more
    and more things that we know for certain.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个我总是教给大家的关键技巧是*从已知的事实开始工作*。基本上，要先确认事实。你可能有很多不知道的事情，但不能因此而担忧。这些未知总是存在的。然而，总是有一些你可以确认的事实，我们必须从这些已知的事实开始，利用它们来逐步建立更大的知识体系，找到越来越多我们能确定的事情。
- en: For example, if you can ping a remote server then you know that you have working
    plumbing, working routing, and that all of the equipment between you and that
    remote server is all working. Or if you know that a specific database is up and
    running and working properly, then you know that its operating system is also
    up and running, and that the hypervisor that it is on is up and running, and that
    the bare metal server that that hypervisor is installed on is up and running.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你能 ping 通远程服务器，那么你就知道你的网络连接、路由工作正常，且你和远程服务器之间的所有设备都在正常工作。或者，如果你知道某个特定的数据库正在运行并且一切正常，那么你也知道它的操作系统在正常运行，承载它的虚拟化管理程序也在正常运行，而虚拟化管理程序所安装的裸金属服务器也在正常运行。
- en: It is always surprising to me how often people who are troubleshooting will,
    take the time to establish the facts, but then question them again. In the example
    above, they might decide that because they are seeing an issue that maybe the
    hypervisor has failed and go to check it again, even knowing that they just proved
    that it was still working. Or in the networking example, convincing themselves
    that they need to check on the status of a router that they just used to prove
    that networking could pass through it correctly.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我感到惊讶的是，在故障排除过程中，人们总是会花时间确认事实，但之后又质疑这些事实。在上面的例子中，他们可能会觉得看到一个问题后，可能是虚拟化管理程序出现了故障，然后再次去检查它，尽管他们刚刚已经证明它依然在正常工作。或者在网络问题中，他们可能会说服自己需要检查一个路由器的状态，而他们之前刚刚用这个路由器验证过网络是否能正常通过。
- en: Going down the proverbial rabbit hole and making yourself (or your team) prove
    over and over again that something is or is not working that you already know
    the status of is a waste of time at best and can be extremely frustrating for
    those working with you. Once you start the pattern of reestablishing what you
    already solidly know, rather than trying to determine something new, you will
    likely continue doing so. It is very tempting to focus on those things and lose
    sight of growing the body of knowledge pertaining to the issue at hand.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 深入“兔子洞”并让自己（或团队）一遍又一遍地证明你已经知道的事情是否正常，是在浪费时间，最好的情况下，这会非常令人沮丧。一旦你开始反复确认自己已经确定的事实，而不是去探寻新的信息，你很可能会一直这样做。很容易将注意力集中在这些事情上，从而忽略了扩展与当前问题相关的知识体系。
- en: I find that writing down what we know to be true, whether as a starting point
    or from investigation, is a good tool. If we feel that we have to test again something
    that we already proven, then we have a problem. Why do we not trust what we have
    already proven? Why did we feel that it was proven if we now doubt it? What is
    the point of testing if we are not going to trust the results of the testing?
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现，将我们知道的事实写下来，无论是作为起点还是从调查中得出，都是一个很好的工具。如果我们觉得必须再次测试我们已经证明的某个事情，那我们就有问题了。为什么我们不信任已经证明的事实？如果现在我们怀疑它，那当初为什么觉得它已经证明了？如果我们不打算相信测试结果，那测试又有什么意义呢？
- en: If we test, prove, and then we are going to spin our wheels endlessly. This
    is a needless waste of time, time that we cannot afford during an outage. Either
    we need to approach what we consider to be fact differently, or we need to trust
    the assessment. By establishing trusted facts, we can use them to narrow down
    the possible issues.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们测试、证明，然后又在原地打转，那就是无意义的时间浪费，而在系统停机期间我们是无法承受这些浪费的。我们要么需要以不同的方式看待我们认为是事实的事情，要么就需要信任这个评估。通过建立可信的事实，我们可以利用它们来缩小可能的问题范围。
- en: Troubleshooting is hard both because it is very technical when many factors
    are probably unknown, and because it is emotional being done when there is stress
    and sometimes even panic. This is generally compounded by additional needs and
    pressure from our organizations as well. Keeping a clear head is key. Breath,
    focus, get caffeine, talk out the issue, post on technical peer review communities
    and forums, and maybe even engage the vendor. Have your resources written down
    as it is easy to forget steps when stressed.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 故障排除之所以困难，一方面是因为它非常技术性，许多因素可能未知，另一方面也因为在压力甚至是恐慌的情况下进行的操作带有情绪性。通常，这种情况还会被我们组织的额外需求和压力加剧。保持清醒的头脑是关键。深呼吸，集中精力，喝点咖啡，把问题说出来，发布到技术同行评审社区和论坛，甚至可以与供应商沟通。把你的资源写下来，因为在紧张时容易忘记步骤。
- en: Technical social media in problem solving
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术社交媒体在问题解决中的作用
- en: For more than two decades one of my strongest resources for dealing with serious
    issues has surprisingly been technical social media. I do not mean traditional
    social media outlets, but forums built solely for technical exchange of ideas.
    When faced with design challenges or, far more importantly, broken systems that
    need to be fixed, I have found that for me and my team that posting those problems
    to a forum to be absolutely invaluable.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 超过二十年来，我处理严重问题的一个最强大的资源竟然是技术社交媒体。我并不是指传统的社交媒体平台，而是专门为技术思想交流建立的论坛。当面临设计挑战或更重要的，系统故障需要修复时，我发现对我和我的团队来说，将这些问题发布到论坛上是非常宝贵的。
- en: The reasons why this is so important are not always evident. The obvious benefit
    is that there are many seasoned professionals happy to provide a fresh set of
    eyes on your problem and may easily spot something that you have missed, or they
    may provide insights or suggest tools of which you were not aware.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这一点之所以如此重要，原因并不总是显而易见的。最明显的好处是，许多经验丰富的专业人士愿意为你的问题提供新的视角，可能轻松发现你忽略的某个细节，或者提供一些见解或建议一些你之前不知道的工具。
- en: The bigger benefit, however, is in the process of requesting help. More times
    than not the act itself of having to write out what is wrong, the need to express
    it clearly in writing, and documenting the steps that I have followed will reveal
    to me, even before anyone has a chance to respond to me, what might be wrong.
    Writing down my steps encourages me to also be more methodical and to think about
    what obvious questions others will ask me causing me to attempt to fill in the
    gaps, follow good processes, and document far more than I would normally do for
    myself.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，真正的好处在于请求帮助的过程。往往，必须写出问题所在、需要清晰表达并记录我所采取的步骤的行为本身，会让我在别人回应我之前，自己就能发现问题所在。将步骤写下来鼓励我更加有条理，也让我考虑到别人可能会问的显而易见的问题，这促使我尝试填补空白，遵循良好的流程，并记录比我平时为自己做的更多的内容。
- en: I use this process of posting for public review for my own team, as well; and
    I make others do it. Of course there are details that cannot be posted publicly,
    and sometimes the entire process is too sensitive to be public at all even without
    identifiable details, but generally at least some degree of the disaster can be
    reviewed publicly for assistance. Using these kinds of forums for communicating
    amongst my own team works wonderfully and encourages the same good behavior of
    thinking through what has been done, approaching how to explain the problem differently,
    and forces clearer documentation of the troubleshooting process between team members
    because even the documentation process is being reviewed publicly in real time.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我也会将这个公开评审的过程用于我的团队，并要求其他人也这么做。当然，有些细节不能公开发布，有时候即使没有可识别的细节，整个过程也过于敏感，不适合公开，但通常至少有一定程度的灾难可以公开供他人协助审查。使用这种方式在团队内部进行沟通非常有效，并且鼓励大家认真思考已做的工作，尝试不同的方式解释问题，并迫使团队成员之间对故障排除过程的文档进行更清晰的记录，因为即使是文档过程也会在实时中公开审查。
- en: This same process then provides documentation and automatic timeline of troubleshooting
    to use for a post mortem process. I often also invite post mortem review, generally
    informally, via the same mechanism. People are always happy to critique decisions.
    You have to be prepared to accept a bit of a brutal review.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这个相同的过程随后提供了故障排除的文档和自动时间线，用于事后分析。我经常也邀请事后分析的审查，通常是通过相同的机制进行非正式的审查。人们总是乐于批评决策。你必须准备好接受一些严厉的评价。
- en: No one is a bigger proponent of the value of public peer review in focus environments
    than me. I have been championing this movement since the late 1990s and spent
    a great deal of my career working in the public eye through these communities.
    It has taught me many things that I would have never been exposed to and it has
    forced me to work differently knowing that everything that I do will be examined,
    reviewed, and questioned. Being prepared to explain every decision, to defend
    every outcome, to resort to logic and math because your arguments for or against
    a decision themselves are permanently recorded for review makes you rethink what
    you say and, I believe, pushes you to be better at everything that you do. It
    is easy to make an irrational argument when you think that no one is going to
    question you or that no one will notice.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 没有人比我更支持在专注的环境中进行公共同行评审的价值了。我从1990年代末开始倡导这一运动，并在这些社区中通过公共平台度过了我的职业生涯。它教会了我很多我从未接触过的东西，并且迫使我以不同的方式工作，因为我知道我所做的一切都将被审查、评估和质疑。准备好解释每一个决策，捍卫每一个结果，依靠逻辑和数学来支持你的决策，无论是赞成还是反对，因为你的论点将永久记录供审查，这会促使你重新思考自己的话语，我相信，这也促使你在所有工作中变得更加优秀。因为当你认为没有人会质疑你，或者没有人会注意时，很容易做出不合理的论点。
- en: 'Troubleshooting best practices are simple: be methodical, document everything,
    and line up your resources before you need to rely on them.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 故障排除的最佳实践很简单：要有条理，记录一切，并在需要依赖资源之前将其准备好。
- en: Next, we are going to look at when it even makes sense to go through this process
    or if we should simply start over.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨何时开始执行这个过程是合理的，或者我们是否应该直接从头开始。
- en: Investigating versus fixing
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调查与修复
- en: When we start working to deal with an outage, data loss, or other disaster,
    the natural inclination is to focus on finding a root cause, fixing that root
    cause, and then getting systems back into a working state. It makes sense, it
    is the obvious course of events, and it is emotionally satisfying to work through
    the process.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始处理宕机、数据丢失或其他灾难时，最自然的倾向是集中精力找出根本原因，修复这个根本原因，然后将系统恢复到正常状态。这是合乎逻辑的，是显而易见的事件进程，且情感上也令人满足。
- en: The problem with this process is that it is based on a few flawed beliefs. It
    is a method derived from things like getting your car or house repaired after
    there is damage or an accident. The underlying principle being that the object
    or system in question is very expensive to acquire and in relative terms, cheap
    to repair.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程的问题在于它基于一些错误的信念。这是一种源于像汽车或房屋在受损或发生事故后进行维修的做法。其基本原则是，相关的物体或系统非常昂贵，而修复相对便宜。
- en: It also focuses on the value of determining why something has occurred over
    the value of getting systems up and running again. The assumption is that if something
    has happened once that it is expected to happen again and that by knowing what
    has failed and why that we will be able to avoid the almost inevitable recurring
    failures in the future.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 它还侧重于确定发生某些问题的原因的价值，胜过让系统重新运行的价值。假设如果某件事发生过一次，它很可能会再次发生，通过了解发生了什么和为什么发生，我们可以避免未来几乎不可避免的重复故障。
- en: Of course, in IT and business systems, typically the cost to build is less than
    the cost to fix. More importantly the cost to build is more predictable than fixing.
    We should, if we have planned well and documented, be able to implement a new
    system in a known about of time with extreme reliability. Fixing an issue may
    or may not happen quickly, it represents a lot of unknowns. A fix may take a very
    long time, and the fix may not be reliable. Root cause analysis can be time consuming
    and unreliable.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在IT和商业系统中，通常构建的成本低于修复的成本。更重要的是，构建的成本比修复更具可预测性。如果我们进行了良好的规划和文档记录，我们应该能够在已知的时间内，以极高的可靠性实现新系统。修复问题可能很快，也可能不快，它代表着许多未知因素。修复可能需要很长时间，而且修复可能不可靠。根本原因分析可能是耗时且不可靠的。
- en: In most cases getting a system back up and running as quickly as possible carries
    great value, and while determining why a problem has occurred and finding a potential
    means of avoiding it in the future has little value. Business infrastructure experiences
    extraordinary change rates in everything from hardware to software to system design.
    A hardware failure that has happened today is unlikely to repeat in the same way.
    Software will likely be patched, updated, and modified quickly and worrying that
    old bugs will return is possible, but not a scenario worth a large amount of concern.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，尽快让系统恢复运行具有很大的价值，而确定问题发生的原因并找到未来避免它的潜在方法的价值较小。商业基础设施在硬件、软件和系统设计等各个方面经历着巨大的变化。今天发生的硬件故障不太可能以相同的方式重复发生。软件可能会被快速修补、更新和修改，虽然担心旧的bug会重现是可能的，但这并不是值得过多关注的情形。
- en: If we were dealing with a car, house, road, bridge, or other large object of
    this nature failures are likely to recur as the system faces small, if any, changes,
    over time. We need to determine the point of failure, determine the risk of recurrence,
    and find a way to protect against it. It is hard to separate ourselves from this
    mindset.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们处理的是汽车、房屋、道路、桥梁或其他此类大型物体，故障可能会随着时间的推移在系统几乎没有变化的情况下再次发生。我们需要确定故障点，评估重复发生的风险，并找到防护措施。很难摆脱这种思维方式。
- en: We have to evaluate the value to the business. What is the value of getting
    the system back up and running? What is the value to finding the root cause? We
    have to compare these values and, most of the time, we will find that solutions
    triumph over investigation.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须评估对业务的价值。让系统恢复运行的价值是什么？找到根本原因的价值是什么？我们需要比较这些价值，通常情况下，我们会发现解决方案优于调查。
- en: The fix versus investigate decision gets more and more weighted towards fixing
    when we have more modern infrastructure with imaged systems, state machines, and
    infrastructure as code. The greater the quality of our automation, the faster
    and less costly it is to recreate systems and the lower the value to investigating
    an issue.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们拥有更现代化的基础设施，包括镜像系统、状态机和基础设施即代码时，修复与调查的决策将越来越偏向修复。我们的自动化质量越高，重建系统的速度越快、成本越低，调查问题的价值就越低。
- en: We also have to consider the possibility that with the right infrastructure
    that we can recreate a mirror system to use for diagnostics when it is deemed
    necessary. We can create an initial rebuild to get systems back up and running
    and build a mirror, if it makes sense, to use in order to attempt to recreate
    the failure and determine if there is a way or reason to protect against it in
    the future. Spending time attempting to identify the cause of and fixing an issue
    during an outage may not be the best way to accomplish that goal, even if it is
    deemed to be necessary.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须考虑到，凭借合适的基础设施，我们可以重建一个镜像系统，用于必要时的诊断。我们可以创建一个初步重建来让系统重新运行，并在有意义的情况下创建一个镜像，以便用来尝试重现故障，并确定是否有方法或原因来防止未来的类似故障。在停机期间，花费时间尝试识别原因并修复问题，可能并不是实现这一目标的最佳方式，即使它被认为是必要的。
- en: It is all cost analysis, but one that has to be done very quickly. The unknowns
    are very difficult sticking points here because the time to determine the root
    cause is completely unknown and may take minutes or days.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这完全是成本分析，但必须非常迅速地完成。这里的未知因素是非常困难的难点，因为确定根本原因的时间完全不可知，可能需要几分钟，也可能需要几天。
- en: 'This logic of just starting over applies to desktops as well as to servers.
    Even end user workstations have every opportunity to be interchangeable and designed
    in such a way to allow for rapid redeployment. If we are using images, automated
    software installation, and other automation it is quite standard for desktops,
    laptops, or whatever we are using for end users to be able to be deployed new
    often in a matter of minutes. A fresh deployment is more than just getting these
    systems back up and running with maximum efficiency, it also provides an opportunity
    for a completely clean installation as a bonus. Any cruft, malware, corruption
    or similar that might have happened on the machine will be wiped away and the
    end user will start as fresh as if their machine had just rolled off of the assembly
    line. In this way, we get a silver lining: a fresh rebuild process that we often
    would struggle to schedule but, ideally, would be doing on a semi-regular basis
    anyway.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这种从头开始的逻辑不仅适用于桌面，也适用于服务器。即使是最终用户工作站，也有机会做到可互换，并设计成能够快速重新部署的方式。如果我们使用镜像、自动化软件安装和其他自动化方式，那么桌面、笔记本或任何我们为最终用户使用的设备，都能在几分钟内进行新的部署。全新的部署不仅仅是让这些系统以最大效率恢复运行，它还提供了一个全新安装的机会，作为额外的福利。任何可能发生在机器上的冗余、恶意软件、损坏或类似问题都会被清除，最终用户将像机器刚从生产线下线一样全新地开始。通过这种方式，我们得到了一个银色的边际：一个全新的重建过程，我们通常很难安排，但理想情况下，我们应该定期进行。
- en: Rebuildable systems, whether desktops, servers, or cloud instances, all mean
    that we only need available hardware to be able to recover and move on from most
    disasters. That also means, assuming that our backups are stored somewhere online
    or offsite, that we have the ability to walk into a new site and rebuild our entire
    company there. That flexible and level of comfort is a game changer - something
    very few companies were able to consider even just a few years ago. Knowing that
    starting over *from scratch* is always a possibility makes us think about everything
    that we do in disaster recovery completely differently.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 可重建的系统，无论是桌面、服务器还是云实例，都意味着我们只需要可用的硬件就能从大多数灾难中恢复并继续前进。这也意味着，假设我们的备份存储在某个在线或异地的位置，我们有能力进入一个新的站点，并在那儿重建整个公司。这种灵活性和舒适感是一个改变游戏规则的因素——几年前，几乎没有公司能考虑到这一点。知道从
    *头开始* 重新开始始终是可能的，让我们在灾难恢复中完全不同地看待我们所做的一切。
- en: In my own experience, even fifteen years ago, long before we had the automation
    and complexity of today's environments, we were moved almost entirely to *restore
    fast, only examine what we can after things are back online* and the ability to
    do so has only increased since then. Today we should, in almost all cases, be
    thinking of rebuilding from scratch as the default assumed starting point and
    we should only resort to more complicated forms of recovery when the situation
    demands it; and we should carefully evaluate why a situation today would demand
    it. That does not mean that rebuilds should be the only tool on our toolbelt,
    being the majority case in no way implies that they are the only correct solution,
    just that they are the most likely to be correct.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，即使是在十五年前，在我们拥有今天这种自动化和复杂环境之前，我们几乎完全被迫 *仅仅快速恢复，只有在恢复上线后才进行检查*，而实现这一点的能力从那时起就一直在增强。今天，在几乎所有情况下，我们应该把从头重建作为默认的假设起点，只有在情况要求时才
    resort 更复杂的恢复方式；我们还应该仔细评估今天为什么会有这样的需求。这并不意味着重建应该是我们工具箱中唯一的工具，重建是大多数情况并不意味着它是唯一正确的解决方案，只是它最有可能是正确的。
- en: Traditionally there was a stigma to rebuilding, as if it meant that we had given
    up or were in over our heads. We have to fight this incorrect emotional response.
    The right way to recover an environment is whatever creates the best situation
    for the organization, as a whole. As with everything that we do, emotion plays
    no role here. This is a financial and risk calculation only. We do what is best
    for the company, and that is all.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，重建存在某种污名化，好像这意味着我们放弃了或是力不从心。我们必须抗拒这种不正确的情绪反应。恢复环境的正确方法是创造对整个组织最有利的局面。就像我们做的所有事情一样，情感在这里不起作用。这只是一个财务和风险计算的问题。我们做的是对公司最有利的事，仅此而已。
- en: '**Best practice**:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**：'
- en: Evaluate each situation, but when in down err on the side of a clean rebuild.
    No one size fits all, but rebuilding should be the better option in most cases.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估每种情况，但在低谷时，应倾向于彻底重建。没有一种方法适合所有情况，但在大多数情况下，重建应该是更好的选择。
- en: Design systems to be able to be rebuilt quickly, easily, and automatically.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计系统时要确保它们能够快速、轻松、自动地重建。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: Disaster recovery, triage, proper staffing for emergencies, organizational preparedness,
    managerial oversight of processes during disaster situations, and every other
    aspect of a critical failure scenario is hard, scary, and stressful. How companies
    decide to handle these times often determines which companies survive, and which
    ones fail. We have to have the right people in place, as many organizational processes
    and procedures as possible, great documentation, deep knowledge of our systems,
    and the flexibility to do whatever it takes to make the business successful through
    hard times to truly succeed.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 灾难恢复、紧急分类、为紧急情况配备适当的人员、组织准备工作、在灾难情境下的管理过程监督，以及应对关键故障场景的其他各个方面都是困难、令人恐惧且压力重重的。公司如何处理这些时刻，往往决定了哪些公司能生存下来，哪些公司会失败。我们必须确保有合适的人在岗，尽可能多的组织流程和程序，出色的文档，深入的系统知识，以及应对困难时期所需的灵活性，以使公司度过难关，取得真正的成功。
- en: 'Every company struggles with these same things. These are not simple tactics
    that we can apply overnight. It requires buy in from organizational stakeholders,
    it requires professionalism and planning not just before events transpire, but
    maintaining those processes and professionalism during times of panic when stress
    causes almost anyone to act irrationally. On one side we can view this as stressful
    and difficult, but on the other we can recognize it for what it is: a place where
    nearly all organizations struggle, most fail, and our greatest opportunity shine.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 每个公司都在与这些问题作斗争。这些不是我们能一夜之间就能应用的简单战术。它需要组织利益相关者的支持，需要专业精神和规划，不仅在事件发生之前，而且在压力使几乎每个人都可能做出非理性行为的恐慌时刻，也要维持这些流程和专业精神。从一方面来看，我们可以将此视为充满压力和困难，但从另一方面来看，我们可以认识到它的本质：这是几乎所有组织都在挣扎的地方，大多数组织失败，而这是我们闪耀的最大机会。
- en: Disaster planning and disaster recovery are easily your best chances to take
    the system administration role and grow it to something larger than the role and,
    often, larger than the IT organization itself. You cannot effectively isolate
    disaster preparedness to solely the IT department; it requires cooperation across
    all departments. Systems administration can lead, rather than follow, and make
    IT the core business unit that it always should have been.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 灾难规划和灾难恢复无疑是你承担系统管理角色并将其发展为比原本角色更大，甚至通常比IT部门本身更大的机会。你无法仅将灾难准备工作局限于IT部门；它需要跨部门的合作。系统管理可以领先，而不是跟随，使IT成为应有的核心业务单元。
- en: I realize that for many, the capabilities and scope of the IT department are
    deeply mired in politics and cannot easily be made fungible. Challenge yourself
    to at least evaluate, to consider, what it would take to push your organization
    in new directions. No organization should force IT to wear the sales hat just
    to convince the organization to do what is right for itself, but here in the real
    world our ability to sell ourselves, our department, and our ideas is often the
    difference between being heralded as the savior of the company, or just ignored.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我意识到，对于许多人来说，IT部门的能力和范围深受政治因素的影响，难以轻易变得灵活。挑战自己，至少要评估并考虑一下，推动组织朝新的方向发展需要什么。没有任何组织应该强迫IT戴上销售帽，仅仅为了说服组织做对自己有利的事，但在现实世界中，我们推销自己、我们的部门和我们的想法的能力，往往决定了我们是否会被誉为公司的救世主，或者只是被忽视。
- en: Remember that solutions come from you and not from vendors. Keep vendors and
    their scope in mind and remember that while disasters represent a great chance
    for you to save your organization, they also represent a huge opportunity for
    vendors to find new sales opportunities at a time when fear and emotions make
    well considered planning all but nonexistent. Rethink how you view vendors, make
    the context of the support relationship utmost in your mind. Always know who represents
    your interest and who is looking for where you can best serve them.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，解决方案来自于你，而不是供应商。牢记供应商及其范围，并记住，虽然灾难是你挽救组织的绝佳机会，它们也是供应商在恐惧和情绪主导下找到新销售机会的巨大机会，此时周全的规划几乎不存在。重新思考你如何看待供应商，把支持关系的背景放在心中最重要的位置。时刻了解谁代表了你的利益，谁在寻找你为他们提供服务的最佳机会。
- en: The postmortem
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事后分析
- en: Putting a sidebar in the summary may seem out of place, but I think postmortems
    are much like a summary of a disaster themselves. So why not discuss them here?
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在总结中加一个边栏可能显得不合适，但我认为事后分析本身就像是灾难的总结。那么为什么不在这里讨论一下呢？
- en: Most companies skip the all-important task of performing a post mortem. Postmortems
    are not about placing blame, and if that is what your company wants to use them
    for then it is probably better to avoid them, but in a healthy organization they
    serve as a critical learning tool on many levels.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数公司跳过了执行事后分析这一极为重要的任务。事后分析不是为了归咎于谁，如果公司想要用它来做这种事情，那么最好避免进行事后分析，但在健康的组织中，它们作为一个多层次的关键学习工具。
- en: A good postmortem is going to expose mistakes in system design, documentation,
    planning, policies, procedures, and just about any other aspect of our systems.
    It should also aid us in identifying people who are strong or weak during a crisis.
    We should be using our postmortem processes to discover where we were weak and
    how we can improve, or potentially to determine not to change at all.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一次好的事后分析将揭示系统设计、文档、规划、政策、流程以及我们系统的几乎所有其他方面的错误。它还应该帮助我们识别在危机期间表现强或弱的人员。我们应该通过事后分析过程来发现我们在哪里存在弱点，如何改进，或者有可能决定不做任何更改。
- en: A postmortem should also allow us to evaluate our decision processes that led
    to where we are today. This is almost universally overlooked and is actually where
    our true value of a postmortem exists. Changing the outcomes of individual plans
    or decisions is good, but generally minor, but finding entire decisionmaking processes
    that are failing gives us an opportunity to make changes that impact all decisions
    going forward.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 事后分析还应允许我们评估导致我们今天处境的决策过程。这几乎是普遍被忽视的，而实际上这才是事后分析真正的价值所在。改变个别计划或决策的结果是好的，但通常只是微小的，但发现整个决策过程的失败则为我们提供了一个机会，能够对所有未来的决策产生影响并进行改变。
- en: Learning how to make decisions is important and few organizations or people
    ever focus on the quality of the decision-making process and even fewer companies
    track it and attempt to improve it over time. This is a huge lost opportunity.
    Decision making is something that happens over and over again. Making better decisions
    on a regular basis is vastly more important than fixing individual decisions.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 学会做决策很重要，但很少有组织或个人关注决策过程的质量，更少的公司跟踪并试图随着时间的推移改善这一过程。这是一个巨大的失误。决策是一个不断发生的过程。定期做出更好的决策比修正个别决策更为重要。
- en: Postmortems need to dig into *why did we decide to do what we did* and then
    examine if that was a good decision, but we must not fall into the trap of applying
    current knowledge to old decisions. The *if we had only known* game is a dangerous
    one. We have to evaluate what we could have known at the time and determine if
    we researched enough, thought it through properly, applied true business goals
    and so forth.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 事后分析需要深入探讨*我们为什么做出当初的决定*，然后评估这个决定是否正确，但我们不能陷入用当前的知识来评判过去的决定的陷阱。*如果我们早知道的话*这种推测游戏是非常危险的。我们必须评估当时我们能知道什么，并确定是否做了足够的调研、是否充分考虑了、是否应用了真正的商业目标等等。
- en: It is easy to project knowledge after the fact and say *see, things failed,
    we lost money, that is someone's fault*. Emotionally, that feels like it must
    be true, but it is not. It could be true, but that is not likely a productive
    thing to determine. Bad things happen, risk is part of business, there is not
    always someone at fault causing these bad things to happen. Working in IT we deal
    with calculated risk every day. What we need to know in a post-mortem is if we
    calculated it correctly and took the right chances.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在事后很容易做出推测并说*看，事情失败了，我们损失了钱，这是某人的错*。从情感上看，这似乎是必须正确的，但实际上并非如此。它可能是对的，但这通常不是一个有生产力的判断。坏事发生了，风险是商业的一部分，并非总有某个人在背后导致这些坏事的发生。在IT行业，我们每天都在处理经过计算的风险。在事后分析中，我们需要知道的是我们是否做出了正确的计算并抓住了正确的机会。
- en: A great example of good risk is when we have to travel from New York to Los
    Angeles. We can take a plane or we can drive. If we look primarily at our safety
    during the trip, flying feels scary and driving does not seem scary at all. Yet
    the chances that we die in a car crash over such a long distance is many times
    higher than the risk of dying in a plane crash. If we took a plane and the plane
    did indeed crash, it would be tempting to use the new knowledge that that particular
    flight was going to crash to say that the right decision would have been to drive,
    but that is wrong. The flight was still the right decision. Both approaches had
    their risks and the flight was the vastly lower of the two risks. We use knowledge
    that that particular flight would crash because there is no way to have known
    that ahead of time. We were playing it safe, we made the right call; but no option
    is without risks and punishing people for making good choices is a terrible outcome.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 一个关于良好风险的好例子是我们需要从纽约旅行到洛杉矶。我们可以乘飞机，也可以开车。如果我们主要关注旅行中的安全，飞行会让人感到害怕，而开车则似乎一点也不可怕。然而，在这么长的距离下，发生车祸的死亡几率远远高于飞机失事的风险。如果我们坐飞机，而飞机确实发生了坠机事故，我们可能会用这次飞行即将坠毁的知识来判断，正确的决定是应该开车，但那是错误的。飞行依然是正确的决定。这两种方式都有风险，而飞行的风险明显较低。我们之所以会用这次飞行会坠毁的知识，是因为在事前无法知道这一点。我们是在规避风险，做出了正确的决定；但没有任何选项是没有风险的，而因为做出了正确选择而惩罚别人，是一种糟糕的结果。
- en: People need to be rewarded for making tough choices, especially when they make
    the right rough choices. If we look to place blame, we risk punishing people for
    simply having made any decision at all, and if we do that we push them towards
    avoiding the decisions that protect the business to avoid being in the line of
    fire for false blame. Of course, if truly bad decisions were made, we want to
    discover that. It is just a very difficult task to maintain a focus on organizational
    and personal improvement rather than using postmortems to find scapegoats or deflect
    culpability.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 人们需要因做出艰难决策而获得奖励，尤其是在他们做出了正确的艰难决策时。如果我们寻求归咎于某人，就有可能因为某人做出了任何决定而惩罚他们。如果我们这样做，就会推动他们避免那些有助于保护业务的决策，以避免成为错误指责的对象。当然，如果做出了真正糟糕的决策，我们是希望能够发现的。保持专注于组织和个人改进，而不是将事后分析用来寻找替罪羊或推卸责任，确实是一个非常困难的任务。
- en: Used correctly, postmortems are a powerful tool. Used incorrectly, they are
    a waste of time or potentially worse. Even if the organization lacks the capability
    of performing good postmortems, do so just within IT. If IT itself has politics
    that make this impossible, do so just within systems administration. Even if no
    one else participates, do it for yourself.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果正确使用，事后分析是一个强大的工具。如果使用不当，它会浪费时间，甚至可能更糟。即使组织没有能力进行良好的事后分析，也可以仅在IT部门内部进行。如果IT部门本身存在让这种分析不可能的政治因素，也可以仅在系统管理层内部进行。即使没有其他人参与，也要为自己进行事后分析。
- en: Document your post-mortems. People have a tendency to remember disasters negatively
    and to emotionally assign fault where none existed or where it is not deserved.
    Keep post-mortem documentation on hand as it is often useful for defending people,
    teams, or processes later. Good documentation, even after the fact, is a powerful
    tool.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 记录你的事后分析。人们倾向于消极地记住灾难，并情绪化地归咎于并不存在或不应承担责任的人。保持事后分析的文档，因为它通常在以后为保护个人、团队或流程提供帮助。即使是事后，良好的文档依然是一个强大的工具。
- en: Remember that a post-mortem does not just need to ask *could we have avoided
    this disaster* but also *even if we could have, should we have?* Often the cost
    of avoiding disaster is greater than the risk cost of having the disaster. A post-mortem
    should cover the decision-making process, the decision itself, as well as the
    response to the disaster.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，事后分析不仅需要问*我们是否能够避免这场灾难*，还需要问*即便我们能，是否应该避免？*通常，避免灾难的成本往往大于灾难发生的风险成本。事后分析应当涵盖决策过程、决策本身以及对灾难的应对。
- en: I hope that the ideas and concepts in this chapter will help you to break out
    of the mindset of traditional roles and to tear apart *the box* and let your approach
    to disaster recovery reflect the best of what you and your organization can muster.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望本章中的思想和概念能帮助你打破传统角色的思维定势，拆除*框架*，让你在灾难恢复方面的方式体现出你和你的组织所能展现的最佳能力。
- en: There is an obvious lack of discussion around Docker and other modern container
    technologies for a book on Linux. This is not an accident, it's actually by design.
    The reason for this is that Docker and its kin are application container technologies
    that leverage other technologies that we have already addressed, and their practices
    are their own concern. At the system administration level, application containers
    are simply another workload - one that happens to use Type-C virtualization and
    manage its own dependencies and updates. Docker or other application container
    management is beyond the scope of this book as well as general system administration.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在关于Linux的书籍中，显然缺少对Docker和其他现代容器技术的讨论。这并非偶然，而是经过设计的。其原因在于，Docker及其同类技术是应用容器技术，它们利用了我们已经讨论过的其他技术，而它们的实践则是它们自己的问题。从系统管理员的角度来看，应用容器只是另一种工作负载——它恰好使用了Type-C虚拟化并管理自己的依赖关系和更新。Docker或其他应用容器管理超出了本书以及一般系统管理的范围。
- en: In most cases, the system administrator is responsible for managing these technologies,
    but they're not special cases. Workloads are the same as we have discussed throughout
    this book. Even though they may have their own names, their own mechanisms, and
    their own management tools, all of these things are still governed by general
    case guidelines and rules that we should already know as system administrators.
    You will need to learn, if you're going to work with these technologies, and you
    very likely will if you're a system administrator today, many things that pertain
    specifically to the application container platform and management tools that you'll
    be using and apply that knowledge to what we've already learned.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，系统管理员负责管理这些技术，但它们并不是特殊的案例。工作负载与我们在本书中讨论的其他工作负载相同。尽管它们可能有自己的名称、机制和管理工具，但所有这些仍然受到我们作为系统管理员应当已经掌握的一般情况准则和规则的约束。如果你打算与这些技术打交道，且如果你现在是系统管理员，几乎肯定会这样做，你将需要学习许多与应用容器平台及其管理工具特定相关的知识，并将这些知识应用到我们已经学到的内容上。
- en: Best practices focus on learning the general cases, the rules that always apply,
    then figuring out how different techniques, technologies, and products are covered
    by the general cases.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践专注于学习一般情况，即总是适用的规则，然后弄清楚不同的技术、技术方法和产品如何符合这些一般情况。
