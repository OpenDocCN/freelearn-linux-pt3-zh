- en: 9\. Managing CentOS 8 Users and Groups
  prefs: []
  type: TYPE_NORMAL
- en: During the installation of CentOS 8, the installer created a root, or superuser
    account, and required that a password be configured. The installer also provided
    the opportunity to create a user account for the system. We should not lose sight
    of the fact that CentOS 8 is actually an enterprise class, multi-user and multi-tasking
    operating system. In order to use the full power of CentOS 8, therefore, it is
    likely that more than one user will need to be given access to the system. Each
    user should have his or her own user account login, password, home directory and
    privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Users are further divided into groups for the purposes of easier administration
    and those groups can have different levels of privileges. For example, you may
    have a group of users who work in the Accounting department. In such an environment
    you may wish to create an accounts group and assign all the Accounting department
    users to that group.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we will cover the steps to add, remove and manage users and
    groups on a CentOS 8 system. There are a number of ways to manage users and groups
    on a CentOS 8 system, the most common options being command-line tools and the
    Cockpit web interface. In this chapter we will look at both approaches.
  prefs: []
  type: TYPE_NORMAL
- en: 9.1 User Management from the Command-line
  prefs: []
  type: TYPE_NORMAL
- en: 'New users may be added to a CentOS 8 system via the command-line using the
    useradd utility. To create a new user account, enter a command similar to the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: useradd john
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, this will create a home directory for the user in the /home directory
    (in this case /home/john). To specify a different home directory, use the -d command-line
    option when creating the account:'
  prefs: []
  type: TYPE_NORMAL
- en: useradd -d /users/johnsmith john
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the account has been created, a password needs to be assigned using the
    passwd tool before the user will be able to log into the system:'
  prefs: []
  type: TYPE_NORMAL
- en: passwd john
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Changing password for user john.
  prefs: []
  type: TYPE_NORMAL
- en: 'New password:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Retype new password:'
  prefs: []
  type: TYPE_NORMAL
- en: 'passwd: all authentication tokens updated successfully.'
  prefs: []
  type: TYPE_NORMAL
- en: 'An existing user may be deleted via the command-line using the userdel utility:'
  prefs: []
  type: TYPE_NORMAL
- en: userdel john
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is also possible to remove the user’s home directory and mail spool as part
    of the deletion process:'
  prefs: []
  type: TYPE_NORMAL
- en: userdel --remove john
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All users on a CentOS 8 system are members of one or more groups. By default,
    new users are added to a private group with the same name as the user (in the
    above example, the account created for user john was a member of a private group
    also named john). As an administrator, it makes sense to organize users into more
    logical groups. For example all sales people might belong to a sales group, while
    accounting staff might belong to the accounts group and so on. New groups are
    added from the command-line using the groupadd command-line tool, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: groupadd accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use the usermod tool to add an existing user to an existing group from the
    command-line:'
  prefs: []
  type: TYPE_NORMAL
- en: usermod -G accounts john
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add an existing user to multiple existing groups, run the usermod command
    with the -G option:'
  prefs: []
  type: TYPE_NORMAL
- en: usermod -G accounts,sales,support john
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Note that the above commands remove the user from any supplementary groups
    which are not listed after the -G, but to which the user is currently a member.
    To retain any current group memberships, use the -a flag to append the new group
    memberships:'
  prefs: []
  type: TYPE_NORMAL
- en: usermod -aG accounts,sales,support john
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An existing group may be deleted from a system using the groupdel utility:'
  prefs: []
  type: TYPE_NORMAL
- en: groupdel accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Note that if the group to be deleted is the primary or initial group for any
    user it cannot be deleted. The user must first be deleted, or assigned a new primary
    group using the usermod command before the group can be removed. A user can be
    assigned to a new primary group using the usermod -g option:'
  prefs: []
  type: TYPE_NORMAL
- en: usermod -g sales john
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: groupdel accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To find out the groups to which a user belongs, simply run the groups command.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: $ groups john
  prefs: []
  type: TYPE_NORMAL
- en: 'john : john accounts support'
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, a user account will not be able to perform tasks that require superuser
    (root) privileges unless they know the root password. It is, however, possible
    to configure a user account so that privileged tasks can be performed using the
    sudo command. This involves adding the user account as a member of the wheel group,
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: usermod -aG wheel john
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once added to the wheel group, the user will be able to perform otherwise restricted
    tasks using sudo as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: $ sudo dnf update
  prefs: []
  type: TYPE_NORMAL
- en: '[sudo] password for demo:'
  prefs: []
  type: TYPE_NORMAL
- en: Updating Subscription Management repositories.
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: 'The sudo capabilities of the wheel group may be modified by editing the /etc/sudoers
    file and locating the following section:'
  prefs: []
  type: TYPE_NORMAL
- en: Allows people in group wheel to run all commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '%wheel ALL=(ALL) ALL'
  prefs: []
  type: TYPE_NORMAL
- en: Same thing without a password
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '%wheel ALL=(ALL) NOPASSWD: ALL'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To disable sudo for all wheel group members, comment out the second line as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Allows people in group wheel to run all commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '%wheel ALL=(ALL) ALL'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To allow wheel group members to use sudo without entering a password (for security
    reasons this is not recommended), uncomment the corresponding line in the sudoers
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: Same thing without a password
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '%wheel ALL=(ALL) NOPASSWD: ALL'
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting here that behind the scenes, all of these commands are simply
    making changes to the /etc/passwd, /etc/group and /etc/shadow files on the system.
  prefs: []
  type: TYPE_NORMAL
- en: 9.2 User Management with Cockpit
  prefs: []
  type: TYPE_NORMAL
- en: 'If the Cockpit web interface is installed and enabled on the system (a topic
    covered in the chapter entitled [“An Overview of the CentOS 8 Cockpit Web Interface”](../Text/Cockpit_Overview.xhtml#_idTextAnchor081)),
    a number of user management tasks can be performed within the Accounts screen
    shown in [Figure 9-1](../Text/User_Management.xhtml#_idTextAnchor128) below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/centos_8_cockpit_users.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-1
  prefs: []
  type: TYPE_NORMAL
- en: 'The screen will display any existing user accounts on the system and provides
    a button to add additional accounts. To create a new account, click on the Create
    New Account button and enter the requested information in the resulting dialog
    ([Figure 9-2](../Text/User_Management.xhtml#_idTextAnchor129)). Note that the
    option is also available to create the account but to lock it until later:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/rhel_8_cockpit_add_new_user.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-2
  prefs: []
  type: TYPE_NORMAL
- en: 'To modify a user account, select it from the main screen and make any modifications
    to the account details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/rhel_8_cockpit_edit_user.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-3
  prefs: []
  type: TYPE_NORMAL
- en: This screen allows a variety of tasks to be performed including locking or unlocking
    the account, changing the password or forcing the user to configure a new password.
    If the Server Administrator option is selected, the user will be added to the
    wheel group and permitted to use sudo to perform administrative tasks. A button
    is also provided to delete the user from the system.
  prefs: []
  type: TYPE_NORMAL
- en: If the user will be accessing the system remotely using an SSH connection with
    key encryption, the user’s public key may be added within this screen. SSH access
    and authentication will be covered later in [“Configuring SSH Key-based Authentication
    on CentOS 8”](../Text/SSH_Authentication.xhtml#_idTextAnchor181).
  prefs: []
  type: TYPE_NORMAL
- en: 9.3 Summary
  prefs: []
  type: TYPE_NORMAL
- en: As a multi-user operating system, CentOS 8 has been designed to support controlled
    access for multiple users. During installation, the root user account was created
    and assigned a password and the option to create a user account was also provided.
    Additional user accounts may be added to the system using a set of command-line
    tools or via the Cockpit web interface. In addition to user accounts, Linux also
    implements the concept of groups. New groups can be added and users assigned to
    those groups using command-line tools and each user must belong to at least one
    group. By default a standard, non-root user does not have permission to perform
    privileged tasks. Users that are members of the special wheel group, however,
    may perform privileged tasks by making use of the sudo command.
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Understanding CentOS 8 Software Installation and Management
  prefs: []
  type: TYPE_NORMAL
- en: It is highly unlikely that a newly installed CentOS 8 system will contain all
    of the software packages to perform the tasks for which it is intended. Even once
    all the required software has been installed, it is almost certain that newer
    versions of many of those packages will be released during the lifespan of the
    system. In some cases, you will need to ensure that these latest package releases
    are installed on the system to ensure that any bugs are fixed. In other cases,
    however, an older version of a particular software package may need to be kept
    on the system for compatibility with other software.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces the basic concepts of software management on CentOS
    8, explains how these issues are addressed, introduces the concepts of repositories,
    software packages and the CentOS Application Stream (AppStream) and explores how
    to list, install and remove the software packages that make up a functioning CentOS
    8 system.
  prefs: []
  type: TYPE_NORMAL
- en: 10.1 Repositories
  prefs: []
  type: TYPE_NORMAL
- en: Linux is essentially comprised of a set of base packages that provide the core
    functionality of the operating system together with a range of other packages
    and modules that add functionality and features on top of the base operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'When CentOS 8 is first installed, a number of different packages will be installed
    depending on the software options selected during the installation phase. Once
    the system is up and running, however, additional software can be installed as
    needed. Typically, all software that is part of CentOS 8 (in other words software
    that is not provided by a third party vendor) is downloaded and installed on the
    system using the dnf command. As we have seen in earlier chapters, this typically
    consists of a command similar to the following being issued at the command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf install httpd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When such a command is issued, the requested software is downloaded from a
    remote repository and installed on the local system. By default, CentOS 8 is configured
    to download software from two repositories named BaseOS and AppStream. Running
    the following command will provide a list of the repositories the system is currently
    configured to use when downloading software:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf repolist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Last metadata expiration check: 0:01:02 ago on Thu 14 Nov 2019 03:43:07 PM
    EST.'
  prefs: []
  type: TYPE_NORMAL
- en: repo id repo name status
  prefs: []
  type: TYPE_NORMAL
- en: AppStream CentOS-8 - AppStream 5,089
  prefs: []
  type: TYPE_NORMAL
- en: BaseOS CentOS-8 - Base 2,843
  prefs: []
  type: TYPE_NORMAL
- en: extras CentOS-8 - Extras 3
  prefs: []
  type: TYPE_NORMAL
- en: google-chrome google-chrome 3
  prefs: []
  type: TYPE_NORMAL
- en: The above example shows that repositories for both AppStream and BaseOS are
    enabled on the system. Note also that repositories may also be added for third
    party software, as is the case for the Google Chrome repository listed above.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additional repositories may be added to the system by placing entries in the
    /etc/dnf/dnf.conf file, or by adding .repo files to the /etc/yum.repos.d/ directory.
    Alternatively, the repository may be added using the dnf config-manager tool,
    passing the URL of the .repo file for the repository as a command-line argument:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf config-manager --add-repo https://url/of/repo/file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 10.2 The BaseOS Repository
  prefs: []
  type: TYPE_NORMAL
- en: 'The BaseOS repository contains the packages that make up the core functionality
    of the operating system. These software elements are downloaded in the form of
    Red Hat Package Manager (RPM) package files and then installed on the system.
    A typical CentOS 8 system will have around 1500 RPM packages installed. To see
    a list of all the RPM packages currently installed on the system simply run the
    rpm command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: rpm -qa | more
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: qemu-kvm-block-rbd-2.12.0-41.el8+2104+3e32e6f8.x86_64
  prefs: []
  type: TYPE_NORMAL
- en: kyotocabinet-libs-1.2.76-17.el8.x86_64
  prefs: []
  type: TYPE_NORMAL
- en: cyrus-sasl-scram-2.1.27-0.3rc7.el8.x86_64
  prefs: []
  type: TYPE_NORMAL
- en: curl-7.61.1-5.el8.x86_64
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of packages available for installation from the BaseOS repository is
    available by running the dnf command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To obtain a list of packages that match a search string use dnf as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf search "search string"
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is also possible to identify which package contains a specific file:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf provides filename
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf provides /etc/httpd/conf/httpd.conf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Last metadata expiration check: 0:03:03 ago on Thu 14 Nov 2019 03:43:07 PM
    EST.'
  prefs: []
  type: TYPE_NORMAL
- en: 'httpd-2.4.37-12.module_el8.0.0+185+5908b0db.x86_64 : Apache HTTP Server'
  prefs: []
  type: TYPE_NORMAL
- en: 'Repo : AppStream'
  prefs: []
  type: TYPE_NORMAL
- en: 'Matched from:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Filename : /etc/httpd/conf/httpd.conf'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install a package, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf install packagename
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similarly, to delete a package:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf delete packagename
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When a newer version of a BaseOS package is made available it will be downloaded
    and installed when the system is next updated, typically via the dnf command:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf update
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any updated packages will replace the older version currently installed on the
    system. While this is generally the ideal situation when working with base operating
    system packages, this is not necessarily the desired behavior when dealing with
    other packages such as programming environments or development libraries where
    upgrading to a new version may cause compatibility issues with other packages
    installed in the system. This issue is addressed by the AppStream repository.
  prefs: []
  type: TYPE_NORMAL
- en: 10.3 The AppStream Repository
  prefs: []
  type: TYPE_NORMAL
- en: The AppStream repository manages software in terms of packages, modules, streams
    and profiles. AppStream packages are, once again, RPM packages as outlined in
    the previous section describing BaseOS. AppStream modules, on the other hand,
    are groups of packages that belong together or for which dependencies exist (for
    example the group of packages that would need to be installed together when building
    a web server). Each module can have multiple streams, where each module stream
    represents a different version of the software module.
  prefs: []
  type: TYPE_NORMAL
- en: Consider, for example, a CentOS 8 system hosting a web site which depends on
    version 7.1 of the PHP scripting language. The server still needs to receive any
    updates to PHP 7.1 to benefit from patches and bug fixes, but is not compatible
    with the latest version of PHP (version 7.2). Before the introduction of AppStream,
    it would have been difficult to continue receiving version 7.1 updates when newer
    versions have been released.
  prefs: []
  type: TYPE_NORMAL
- en: To address this issue, the CentOS software management tools can use the AppStream
    repository to subscribe only to a specific stream for a specific module (in this
    case the version 7.1 stream of the PHP module).
  prefs: []
  type: TYPE_NORMAL
- en: In addition to streams, modules may also be sub-classed by module profile. Module
    profiles provide different configurations of packages that make up a module to
    be installed dependent on the requirements of the system. The nodejs JavaScript
    runtime environment module, for example, is available for installation using either
    the development or minimal profiles. On a system where development is taking place
    using nodejs, the development profile would most likely be used. When the software
    developed using nodejs is deployed, the minimal system containing just the runtime
    might be installed instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view the list of modules available for installation use the dnf command
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf module list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CentOS-8 - AppStream
  prefs: []
  type: TYPE_NORMAL
- en: Name Stream Profiles Summary
  prefs: []
  type: TYPE_NORMAL
- en: 389-ds 1.4 default 389 Directory Server (base)
  prefs: []
  type: TYPE_NORMAL
- en: App-cpanminus 1.7044 [d] default [d] Get, unpack, build and install CPAN modules
  prefs: []
  type: TYPE_NORMAL
- en: DBD-MySQL 4.046 [d] default [d] A MySQL interface for Perl
  prefs: []
  type: TYPE_NORMAL
- en: DBD-Pg 3.7 [d] default [d] A PostgreSQL interface for Perl
  prefs: []
  type: TYPE_NORMAL
- en: DBD-SQLite 1.58 [d] default [d] SQLite DBI driver
  prefs: []
  type: TYPE_NORMAL
- en: DBI 1.641 [d] default [d] A database access API for Perl
  prefs: []
  type: TYPE_NORMAL
- en: YAML 1.24 [d] default [d] Perl parser for YAML
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: [d]efault, [e]nabled, [x]disabled, [i]nstalled'
  prefs: []
  type: TYPE_NORMAL
- en: The first column in the list is the name of the module, the second the stream
    name (which is typically the version of the module). The letter after the stream
    name indicates whether the stream is the default (i.e. this is the stream that
    will be used for installation if no specific stream is referenced) or if it has
    been enabled for use when performing installations. The third column lists the
    profiles available for the corresponding package together with an indication of
    whether the profile is the default, has been installed or is disabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'The dnf command to list information about a specific module is structured as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf module list modulename
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following output, for example, lists information about the PHP modules
    available for installation:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf module list php
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: Name Stream Profiles Summary
  prefs: []
  type: TYPE_NORMAL
- en: php 7.1 devel, minimal, default [d] PHP scripting language
  prefs: []
  type: TYPE_NORMAL
- en: php 7.2 [d] devel, minimal, default [d] PHP scripting language
  prefs: []
  type: TYPE_NORMAL
- en: Clearly version 7.2 will be installed on the system by default, and the module
    is available in development, default and minimal profile configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install a module using the default stream and profile, the dnf command can
    be used with the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf install @modulename
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf install @php
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Alternatively, a stream may be specified from which to perform the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf install @modulename:stream
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf install @php:7.2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, a profile may also be declared as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf install @modulename:stream/profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For example, to install the minimal set of packages for PHP 7.2:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf install @php:7.2/minimal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After executing the above command, the PHP modules will now be listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: php 7.1 [e] devel, minimal [i], default [d] PHP scripting language
  prefs: []
  type: TYPE_NORMAL
- en: php 7.2 [d][e] common [d], devel, minimal [i] PHP scripting language
  prefs: []
  type: TYPE_NORMAL
- en: The “[e]” indicator in the stream column tells us that the 7.2 stream has been
    enabled while the “[i]” in the profile column shows that the module has been installed
    using the minimal profile.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable a stream without installing a module, use dnf as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf module enable modulename
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similarly, a stream may be disabled as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf module disable modulename
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To uninstall a module, use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf module remove modulename
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Additional information about a module may be identified using the following
    dnf command:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf module info modulename
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To find out which RPM packages make up the different profiles of a specific
    module and stream combination, use dnf as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf module info --profile modulename:stream
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf module info --profile php:7.2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Last metadata expiration check: 0:02:11 ago on Thu 14 Nov 2019 04:31:25 PM
    EST.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name : php:7.2:8000020190628155007:ad195792:x86_64'
  prefs: []
  type: TYPE_NORMAL
- en: 'common : php-cli'
  prefs: []
  type: TYPE_NORMAL
- en: ': php-common'
  prefs: []
  type: TYPE_NORMAL
- en: ': php-fpm'
  prefs: []
  type: TYPE_NORMAL
- en: ': php-json'
  prefs: []
  type: TYPE_NORMAL
- en: ': php-mbstring'
  prefs: []
  type: TYPE_NORMAL
- en: ': php-xml'
  prefs: []
  type: TYPE_NORMAL
- en: 'devel : libzip'
  prefs: []
  type: TYPE_NORMAL
- en: ': php-cli'
  prefs: []
  type: TYPE_NORMAL
- en: ': php-common'
  prefs: []
  type: TYPE_NORMAL
- en: ': php-devel'
  prefs: []
  type: TYPE_NORMAL
- en: ': php-fpm'
  prefs: []
  type: TYPE_NORMAL
- en: ': php-json'
  prefs: []
  type: TYPE_NORMAL
- en: ': php-mbstring'
  prefs: []
  type: TYPE_NORMAL
- en: ': php-pear'
  prefs: []
  type: TYPE_NORMAL
- en: ': php-pecl-zip'
  prefs: []
  type: TYPE_NORMAL
- en: ': php-process'
  prefs: []
  type: TYPE_NORMAL
- en: ': php-xml'
  prefs: []
  type: TYPE_NORMAL
- en: 'minimal : php-cli'
  prefs: []
  type: TYPE_NORMAL
- en: ': php-common'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, to switch from one module stream to another, simply run the installation
    command referencing the new stream as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf install @modulename:otherstream
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This command will download the packages for the new stream and either upgrade
    or downgrade the existing packages to the specified version. Once this process
    is complete, resynchronize module packages for the new stream:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf distro-sync
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 10.4 Summary
  prefs: []
  type: TYPE_NORMAL
- en: The CentOS 8 system is comprised of RPM format software packages that are downloaded
    and installed from the CentOS BaseOS and AppStream repositories. Additional repositories
    can be added to the system for installation packages as needed.
  prefs: []
  type: TYPE_NORMAL
- en: The BaseOS repository contains the packages that implement the base core functionality
    of the operating system. The AppStream packages, on the other hand, provide additional
    features and functionality that will be installed selectively depending on the
    purpose for which the system is being configured. In a complex system of this
    nature, there can be a significant amount of package interdependency where part
    of the system may require a specific version of another software package to function
    correctly. AppStreams allow modules and profiles to be created that contain all
    of the dependent packages necessary to install a particular feature together at
    the correct version level. AppStreams also allow installed packages to receive
    updates to the current version without having to download the next major version,
    thereby avoiding disrupting the dependencies of other packages.
  prefs: []
  type: TYPE_NORMAL
