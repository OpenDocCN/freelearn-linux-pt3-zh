["```\n# dnf list emacs*\n```", "```\n# dnf list emacs-* | wc -l\n85\n```", "```\n$ emacs\n```", "```\n    $ emacs --no-window-system\n    ```", "```\n$ nano\n```", "```\nexport VISUAL=vim\nEDITOR variable.\nA `VISUAL` editor is a full-screen editor such as vim or emacs.\nAn `EDITOR` editor works without using the terminal’s functionality (such as the old `ed` or `ex` mode of vi).\nFor example, when invoking an editor through Bash, Bash tries the `VISUAL` editor first. If `VISUAL` fails (because the terminal doesn’t support a full-screen editor), it tries `EDITOR`.\nWith both variables set to `vim`, grant their use as the default text editor.\nUnlike emacs or nano, vim does not use key combinations. The vim editor works in two modes: *Command* and *Insert*. Now let’s review its basic usage.\nThe basics\nThe vim modes are essential in its use. To switch between modes, use the *Esc* key. The following figure shows the editing flow for a file with vim:\n![Figure 7.26 – Vim workflow](img/B19121_07_26.jpg)\n\nFigure 7.26 – Vim workflow\nTo create or open a file with vim, run the `vim` command in the terminal. This opens vim to its splash screen, in command mode:\n![Figure 7.27 – Vim splash screen](img/B19121_07_27.jpg)\n\nFigure 7.27 – Vim splash screen\nTo start typing, and to switch to insert mode, press the *Esc* key and then the *I* key. The screen changes. In the upper-left corner the cursor appears, and in the bottom taskbar, the mode appears as **INSERT**:\n![Figure 7.28 – Insert mode](img/B19121_07_28.jpg)\n\nFigure 7.28 – Insert mode\nAfter typing, to return to command mode, press the *Esc* key. This clears the mode in the bottom bar.\n![Figure 7.29 – Command mode](img/B19121_07_29.jpg)\n\nFigure 7.29 – Command mode\nThe normal mode contains a command-line mode. Here, a variety of tasks, such as saving or quitting the file, can be run.\nTo enter command-line mode, press the colon key (`:`) and type the command for the desired task. The following table shows the commands for the most common tasks:\n\n  Save/Quit\n |\n\n  Write buffer\n |\n  `:w`\n |\n\n  Quit\n |\n  `:q`\n |\n\n  Write and quit\n |\n  `:``wq`\n |\n\n  Abandon buffer\n |\n  `:``q!`\n |\n\n  Other\n |\n\n  Find down\n |\n  `:/[``string]`\n |\n\n  Set numbers\n |\n  `:``se nu`\n |\n\n  No numbers\n |\n  `:``se nonu`\n |\n\nTable 7.5 – Commands for common tasks\nIn normal mode, also, file editing tasks can be run. No need to press the colon key (`:`). Just run the command for the editing task needed. The following table shows the most common editing commands:\n\n  Insert\n |\n\n  After cursor\n |\n  `a`\n |\n\n  At the end of line\n |\n  `A`\n |\n\n  Before cursor\n |\n  `i`\n |\n\n  At beginning of line\n |\n  `I`\n |\n\n  Open line below\n |\n  `o`\n |\n\n  Open line above\n |\n  `O`\n |\n\n  Yank word\n |\n  `yw`\n |\n\n  Yank line\n |\n  `yy`\n |\n\n  Put (paste)\n |\n  `p`\n |\n\n  Change\n |\n\n  Word\n |\n  `cw`\n |\n\n  Line\n |\n  `cc`\n |\n\n  Rest of line\n |\n  `C`\n |\n\n  Under cursor\n |\n  `s`\n |\n\n  Replace character\n |\n  `r`\n |\n\n  Delete\n |\n\n  Word\n |\n  `dw`\n |\n\n  Line\n |\n  `dd`\n |\n\n  Rest of line\n |\n  `D`\n |\n\n  Under cursor\n |\n  `x`\n |\n\n  Before cursor\n |\n  `X`\n |\n\n  Transpose\n |\n  `xp`\n |\n\nTable 7.6 – Commands for editing tasks\nNote\nVim includes a *tutor* to learn how to use it. To start the tutor, run the **vimtutor** command.\nThe flexibility and power of Vim make it an essential tool in system administration.\nLet’s now get an overview of the advanced use of Vim.\nMastering vim\nFor many people, `vim` seems as complex as `emacs`. But in practice, with reference to *Figure 7**.26*, the editing flow is simpler. The only thing to get used to is switching between modes.\nAs proof of this, let’s use the same example used earlier with `emacs` to edit the `test` file, composed of the contents of the `/etc/passwd` and `/etc/group` files. Follow these steps:\n\n1.  In the terminal, as a *non-root user*, run the **vim** command. To browse for the file, type a colon (**:**) and the letter **e** with a space. Type the letter **t** to browse for the **test** file and then press the *Tab* key. Vim shows in the bottom bar the files whose names begin with **t**:\n\n![Figure 7.30 – Browse for the test file](img/B19121_07_30.jpg)\n\nFigure 7.30 – Browse for the test file\n\n1.  To split the screen, as in **emacs**, type a colon (**:**) and then the **split** command:\n\n![Figure 7.31 – Split screen](img/B19121_07_31.jpg)\n\nFigure 7.31 – Split screen\n\n1.  To switch screens, press the *Ctrl* key plus the *w* key twice (*Ctrl+ww*). Scroll down until you find the plus sign (**+**) characters added in the **emacs** example:\n\n![Figure 7.32 – Search for plus characters](img/B19121_07_32.jpg)\n\nFigure 7.32 – Search for plus characters\n\n1.  Let’s replace these plus signs (**+**) with asterisks (*****). Type a colon (**:**) and type the percent sign (**%**) plus the **s** letter. This indicates to **vim** that this is a substitution. Next, type a slash (**/**) to state the string to be replaced and again another slash (**/**) to type the characters that will replace the original string. Type another slash (**/**) and then the letter **g** to tell **vim** that the substitution must take place *globally*:\n\n![Figure 7.33 – Replacing characters](img/B19121_07_33.jpg)\n\nFigure 7.33 – Replacing characters\n\n1.  Press the *Enter* key and **vim** performs the substitution. The bottom bar displays a message of the completed task:\n\n![Figure 7.34 – Modifying the test file](img/B19121_07_34.jpg)\n\nFigure 7.34 – Modifying the test file\n\n1.  To save and quit the file, type a colon (**:**) followed by the letters **w** and **q**, and then press the *Enter* key.\n\nNote\nOn the internet, you can find more commands and advanced uses of **vim**. A very useful resource is the post *50 Useful Vim* *Commands*: [https://vimtricks.com/p/50-useful-vim-commands/](https://vimtricks.com/p/50-useful-vim-commands/).\nPimp my vim\nLike `emacs`, Vim expands its capabilities with the installation of plugins and packages, in addition to customizing the interface to provide information or help edit the file. Beyond the look and feel, it adds features that increase the usability of the editor.\nUnlike `emacs`, Vim uses a variety of initialization files where settings and customizations are included. Some of the most relevant files are as follows:\n\n*   `:help doc-file-list` to get the complete list.\n*   `tags` file used to find information in the documentation files\n*   **/****usr/share/vim/vim90/syntax/syntax.vim**\n\n    System-wide syntax initializations\n\n*   **/****usr/share/vim/vim90/syntax/*.vim**\n\n    Syntax files for various languages\n\n*   **/****usr/share/vim/vimrc**\n\n    System-wide Vim initializations\n\n*   **~/.****vimrc**\n\n    Personal Vim initializations\n\n*   `:options` command. A nice way to view and set options.\n\nThe file that contains the Vim initializations is `vimrc`. The `vimrc` file is a collection of the following:\n\n*   Configurations\n*   Custom commands\n*   Custom functions\n*   Mappings\n*   Plugins\n\nLet’s take a look at some examples of each of them.\nConfigurations\nIn normal mode, it is possible to configure Vim to add some features. For example, to add numbers to lines to identify them, type a colon (`:`) followed by `set nu`:\n![Figure 7.35 – Numbered lines](img/B19121_07_35.jpg)\n\nFigure 7.35 – Numbered lines\nThis setting only remains enabled as long as the editor is open. Closing the editor disables it.\nKeep this setting enabled by adding it to the `.``vimrc` file.\nThese settings could help with syntax while editing the file. For example, when editing YAML files, you could configure the `.vimrc` file in a basic way as follows:\n\n```", "```\n\n*   [**1**] A tab is two spaces\n*   [**2**] Expand tabs\n*   [**3**] Auto-indenting\n\nCustom commands\nIn Vim, we can create custom commands to perform tasks. For example, we could create a command that tells us today’s date in various formats:\n\n*   In the **.vimrc** file, add the following line:\n\n    ```", "```\n\n     *   In Vim command mode, run the **TellDate** command as follows:\n\n    ```", "```\n\n![Figure 7.36 – Custom date](img/B19121_07_36.jpg)\n\nFigure 7.36 – Custom date\n\n*   To get the current time, run the **TellDate** command as follows:\n\n    ```", "```\n\n![Figure 7.37 – Current time](img/B19121_07_37.jpg)\n\nFigure 7.37 – Current time\nCustom functions\nAs seen previously, Vim allows us to run a built-in or custom command from command mode. But it is not limited to one; it could run a set of commands or series of instructions within the same command mode. Or they get written to a file and generated in a running Vim instance (`:source path/to/file`). Some of these files come up as part of the configuration from the `.``vimrc` file.\nThese scripts use **Vimscript** (also called **VimL**). This **Vim** ex-command subset provides many features that could be expected from a scripting language, such as values, variables, functions, and loops.\nIt is very common for a script to mix features of a scripting language and raw ex-commands.\nThe `.vimrc` file includes some files describing functions that extend the capabilities of the text editor. These functions get called using the native Vimscript `let` function, which assigns a value to a variable.\nThe function structure uses the following syntax:\n\n```", "```\n\n The following table shows the most common functions of Vimscript:\n\n  Buffer\n |\n  Marks\n |\n\n  Current line number\n |\n  `line('.')`\n |\n  Position of a mark\n |\n  `getpos(\"'a\")`\n |\n\n  `col('.')`\n |\n  `setpos(\"'a\",...)`\n |\n\n  `col('$')`\n |\n  Position of selection start\n |\n  `getpos(\"'<\")`\n |\n\n  Current line as string\n |\n  `getline('.')`\n |\n  Cursor\n |\n\n  Get line 1\n |\n  `getline(1)`\n |\n  Moves cursor\n |\n  `cursor(line,col)`\n |\n\n  Get lines 1-5\n |\n  `getline(1, 5)`\n |\n  `cursor(line,col,off,curswant)`\n |\n\n  Next blank line, returns line number\n |\n  `search('^$')`\n |\n  Returns [bufnum, line, col, off, curswant]\n |\n  `getcurpos()`\n |\n\n  Search but don’t move cursor\n |\n  `search('^$','n')`\n |\n  Date/time\n |\n  `strftime('%c')`\n |\n\n   |   |  `strftime('%c', getftime('file.c'))`\n |\n\nTable 7.7 – Vimscript common functions\nMappings\nVim allows us to customize key mappings. It is useful to change the definition of the keys typed on the keyboard. The most common use is to define a sequence of commands for a function key. For example, if want to map the `x` key to the `dd` command to delete lines, in normal mode, in the `.vimrc` file, add the following line:\n\n```", "```\n\n Mapping applies in four modes: *normal*, *visual*, *selection*, and *operator-pending*.\nFor help with mapping, commands, and modes, run the following in command mode:\n\n```", "```\n\n ![Figure 7.38 – Mapping help](img/B19121_07_38.jpg)\n\nFigure 7.38 – Mapping help\nPlugins\nVim plugins are installed via packages. A Vim package is a *directory* or *repository* that contains one or more plugins that depend on each other. Among its main features are the following:\n\n*   Downloaded as a compressed file and unzipped in its own directory, which avoids it mixing with others and makes it easy to update and remove\n*   Contain plugins loaded at startup and others that are only loaded when needed with **:packadd**\n\nThe directory recommended to install Vim packages inside is the user’s `.``vim` directory.\nTo exemplify the process, let’s install the most used plugin: **Vim Airline**.\nVim Airline is a plugin that replaces the standard Vim status line with a useful status bar, and provides useful information about the working file, including the following:\n\n*   Filename\n*   Save status\n*   File type\n*   Encoding\n*   Position\n*   Word count\n\n**Vim mode**\nTo install Vim Airline, follow these steps:\n\n1.  In the home directory of the *non-root user*, as the *non-root user*, create the **.****vim** directory:\n\n    ```", "```\n\n     2.  Change to the **.vim** directory. Download the Vim Airline package from its repository on GitHub ([https://github.com/vim-airline/vim-airline](https://github.com/vim-airline/vim-airline)):\n\n    ```", "```\n\n![Figure 7.39 – Download Vim Airline](img/B19121_07_39.jpg)\n\nFigure 7.39 – Download Vim Airline\n\n1.  Decompress the Vim Airline package:\n\n    ```", "```\n\n![Figure 7.40 – Decompressing the package](img/B19121_07_40.jpg)\n\nFigure 7.40 – Decompressing the package\n\n1.  Move the Vim Airline version directory as **vim-airline**\n\n    ```", "```\n\n![Figure 7.41 – Renaming a directory](img/B19121_07_41.jpg)\n\nFigure 7.41 – Renaming a directory\n\n1.  Create the **pack/dist/start** path. Move the **vim-airline** directory into the **pack/dist/start** path:\n\n    ```", "```\n\n![Figure 7.42 – Relocating the vim-airline directory](img/B19121_07_42.jpg)\n\nFigure 7.42 – Relocating the vim-airline directory\nVim Airline is a Vimscript version of Powerline ([https://github.com/powerline/powerline](https://github.com/powerline/powerline)) written in Python.\nPowerline includes a font with pretty symbols. To get these symbols with Vim Airline, install the patched font.\n\n1.  As the **root** user, or with **sudo** if a non-root user has the privileges, install the **powerline-fonts** package using the **dnf** command:\n\n    ```", "```\n\n![Figure 7.43 – Installing the Powerline font](img/B19121_07_43.jpg)\n\nFigure 7.43 – Installing the Powerline font\n\n1.  Switch to the home directory and edit the **.vimrc** file to enable the font use. Add the line **let g:airline_powerline_fonts =** **1**:\n\n    ```", "```\n\n![Figure 7.44 – Enabling font usage](img/B19121_07_44.jpg)\n\nFigure 7.44 – Enabling font usage\n\n1.  Edit the **test** file and check the new status bar:\n\n    ```", "```\n\n![Figure 7.45 – vim-airline status bar](img/B19121_07_45.jpg)\n\nFigure 7.45 – vim-airline status bar\n\n1.  When changing modes, the bar also changes its color to differentiate between the modes:\n    *   This is what it looks like in Insert mode:\n\n![Figure 7.46 – Insert mode](img/B19121_07_46.jpg)\n\nFigure 7.46 – Insert mode\n\n*   The following is what it looks like in Command mode:\n\n![Figure 7.47 – Command mode](img/B19121_07_47.jpg)\n\nFigure 7.47 – Command mode\nNote\nChanging or customizing the color scheme is available. For further reference, visit the **vim-airlines-themes** repository on GitHub: [https://github.com/vim-airline/vim-airline-themes](https://github.com/vim-airline/vim-airline-themes).\nThis way, the plugin installation and configuration work in our editor.\nThere are many plugins, some very specialized, that complement Vim, with a similar installation.\nNote\nOn the internet, you’ll find many examples of packages and plugins. As a personal recommendation, visit these posts with specialized recommendations to improve Vim:\n\n*   *5 useful Vim tplugins for* *developers*: [https://opensource.com/article/19/1/vim-plugins-developers](https://opensource.com/article/19/1/vim-plugins-developers)\n*   *Top five Vim plugins for* *sysadmins*: [https://www.redhat.com/sysadmin/five-vim-plugins](https://www.redhat.com/sysadmin/five-vim-plugins)\n\nThis concludes our walk-through of the text editors. In the following chapters, we’ll make use of them, adding plugins or packages for specialized tasks to help us with the system administration of our Linux systems.\nSummary\nIn this chapter, we learned in depth about text editors, beginning with the fundamental understanding that in Unix/Linux, *everything is a file*. Thus, the use of the terminal as a tool to edit files eases the tasks of system configuration.\nWe took our first steps in **Emacs**. While it is known to be a very complex editor for novices, we offered a basic guide to get started with it.\nWe also reviewed the use of **Nano**, the default text editor in several distributions, including Fedora Linux.\nWe also deep-dived into the use of **Vim**, a well-known and recommended file editing tool for file management.\nThe decision is up to you, dear reader, to choose an editor of your preference.\nIn the next chapter, we will review the **LibreOffice** suite and its different programs for creating and editing commonly used file formats.\nFurther reading\nTo learn more about the topics covered in this chapter, you can visit the following links:\n\n*   The Linux Documentation Project: Text editors\n\n    [https://tldp.org/LDP/intro-linux/html/sect_06_01.html](https://tldp.org/LDP/intro-linux/html/sect_06_01.html)\n\n*   *9 Best Text Editors for the Linux* *Command Line*\n\n    [https://itsfoss.com/command-line-text-editors-linux/](https://itsfoss.com/command-line-text-editors-linux/)\n\n*   *Linux skills: 9 tutorials to get more from your* *text editor*\n\n    [https://www.redhat.com/sysadmin/text-editor-roundup-2022](https://www.redhat.com/sysadmin/text-editor-roundup-2022)\n\n*   *A beginner’s guide to text editing* *with Emacs*\n\n    [https://www.redhat.com/sysadmin/beginners-guide-emacs](https://www.redhat.com/sysadmin/beginners-guide-emacs)\n\n*   *How to get started with the* *Vi editor*\n\n    [https://www.redhat.com/sysadmin/get-started-vi-editor](https://www.redhat.com/sysadmin/get-started-vi-editor)\n\n```"]