- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Detailing the Temporary Build Directory
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 详细说明临时构建目录
- en: In this chapter, we will try to understand the contents of the temporary build
    directory after image generation and see how BitBake uses it in the baking process.
    In addition, we will learn how some of these directories can assist us by acting
    as a valuable source of information when things do not work as expected.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将尝试理解镜像生成后临时构建目录的内容，并了解BitBake如何在烘焙过程中使用它。此外，我们还将了解这些目录如何在出现问题时，通过作为宝贵的信息源来帮助我们。
- en: Detailing the build directory
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 详细说明构建目录
- en: 'The build directory is a central information and artifact source for every
    Poky user. Its main directories are as follows:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 构建目录是每个Poky用户的核心信息和产物源。它的主要目录如下：
- en: '`conf`: This contains the configuration files we use to control Poky and BitBake.
    We first used this directory in [*Chapter 2*](B19361_02.xhtml#_idTextAnchor031),
    *Baking Our Poky-Based System*. It stores configuration files, such as `build/conf/local.conf`
    and `build/conf/bblayers.conf`.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conf`：此目录包含我们用来控制Poky和BitBake的配置文件。我们第一次使用该目录是在[*第2章*](B19361_02.xhtml#_idTextAnchor031)，《烘焙我们的基于Poky的系统》中。它存储了配置文件，如`build/conf/local.conf`和`build/conf/bblayers.conf`。'
- en: '`downloads`: This stores all the downloaded artifacts. It works as a download
    cache. We talked about it in detail in [*Chapter 5*](B19361_05.xhtml#_idTextAnchor077),
    *Grasping the* *BitBake Tool*.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`downloads`：此目录存储所有下载的构建产物，充当下载缓存。我们在[*第5章*](B19361_05.xhtml#_idTextAnchor077)，《掌握BitBake工具》中详细讨论过它。'
- en: '`sstate-cache`: This contains the snapshots of the packaged data. It is a cache
    mainly used to speed up the future build process, as it is used as a cache for
    the building process. This folder is detailed in [*Chapter 7*](B19361_07.xhtml#_idTextAnchor097),
    *Assimilating* *Packaging Support*.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sstate-cache`：此目录包含打包数据的快照。它是一个缓存，主要用于加速未来的构建过程，因为它作为构建过程的缓存。这一文件夹在[*第7章*](B19361_07.xhtml#_idTextAnchor097)，《掌握打包支持》中有详细介绍。'
- en: '`tmp`: This is the temporary build directory and the main focus of this chapter.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tmp`：这是临时构建目录，是本章的主要内容。'
- en: Constructing the build directory
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建目录的构建
- en: In the previous chapters, we learned about Poky’s inputs and outputs in abstract
    high-level detail. We already know that BitBake uses metadata to generate different
    types of artifacts, including images. Besides the generated artifacts, BitBake
    creates other content during this process, which may be used in several ways,
    dependent on our goals.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们以抽象的高层次细节了解了Poky的输入和输出。我们已经知道，BitBake使用元数据生成不同类型的构建产物，包括镜像。除了生成的构建产物，BitBake在此过程中还创建了其他内容，这些内容可能根据我们的目标以不同的方式使用。
- en: 'BitBake performs several tasks and continuously modifies the build directory
    during the build process. Therefore, we can understand it better by following
    the usual BitBake execution flow, as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake执行多个任务，并在构建过程中不断修改构建目录。因此，我们可以通过遵循常见的BitBake执行流程来更好地理解它，流程如下：
- en: '`build/download` directory.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build/download` 目录。'
- en: '`build/tmp/work` directory. When the source code is ready, the required modifications
    are applied (for example, applying necessary patches and checking out the correct
    Git revision).'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build/tmp/work` 目录。当源代码准备好后，将应用必要的修改（例如，应用必要的补丁并签出正确的Git修订版）。'
- en: '`./configure`) and building (for example, `make`).'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`./configure`）和构建（例如，`make`）。'
- en: '`make install`) in a staging directory under `build/tmp/work/<...>/image`.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`make install`）在`build/tmp/work/<...>/image`下的暂存目录中。'
- en: '`build/tmp/work/<...>/recipe-sysroot` and `build/tmp/work/<...>/recipe-sysroot-native`.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build/tmp/work/<...>/recipe-sysroot` 和 `build/tmp/work/<...>/recipe-sysroot-native`。'
- en: '`.rpm`, `.ipk`, `.deb`, or `.tar`.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.rpm`、`.ipk`、`.deb` 或 `.tar`。'
- en: '**Quality Assurance (QA) checks**: When building a recipe, the build system
    performs various QA checks on the output to ensure that common issues are detected
    and reported.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**质量保证（QA）检查**：在构建配方时，构建系统对输出执行各种QA检查，以确保能够检测到并报告常见问题。'
- en: Exploring the temporary build directory
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索临时构建目录
- en: Understanding the temporary build directory (`build/tmp`) is critical. The temporary
    build directory is created just after the build starts, and it’s essential for
    helping us identify why something didn’t behave as expected.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 了解临时构建目录（`build/tmp`）至关重要。临时构建目录在构建开始后立即创建，并且对于帮助我们识别某些行为未按预期发生的原因非常重要。
- en: 'The following figure shows the contents of the `build/tmp` directory:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了`build/tmp`目录的内容：
- en: '![Figure 6.1 – Contents of build/tmp](img/Figure_6.1_B19361.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1 – build/tmp目录的内容](img/Figure_6.1_B19361.jpg)'
- en: Figure 6.1 – Contents of build/tmp
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – `build/tmp` 的内容
- en: 'The most critical directories found within it are as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 其中最关键的目录如下所示：
- en: '`deploy`: This contains the build products, such as images, binary packages,
    and SDK installers.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deploy`：该目录包含构建产物，如映像、二进制包和 SDK 安装程序。'
- en: '`sysroots-components`: This contains a representation of `recipes-sysroot`
    and `recipes-sysroot-native`, which allows BitBake to know where each component
    is installed. This is used to create recipe-specific `sysroots` during the build.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sysroots-components`：该目录包含 `recipes-sysroot` 和 `recipes-sysroot-native` 的表示，允许
    BitBake 知道每个组件安装的位置。这用于在构建过程中创建特定配方的 `sysroots`。'
- en: '`sysroots-uninative`: This includes `glibc` (a C library), which is used when
    native utilities are generated. This, in turn, improves the reuse of shared state
    artifacts across different host distributions.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sysroots-uninative`：该目录包含 `glibc`（C 库），当生成本地工具时使用它。反过来，这有助于在不同主机发行版之间共享状态工件的重用。'
- en: '`work`: This contains the working source code, a task’s configuration, execution
    logs, and the contents of generated packages.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`work`：该目录包含工作源代码、任务的配置、执行日志以及生成的包的内容。'
- en: '`work-shared`: This is a `work` directory used for sharing the source code
    with multiple recipes. `work-shared` is only used by a subset of recipes, for
    example, `linux-yocto` and `gcc`.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`work-shared`：这是一个用于与多个配方共享源代码的 `work` 目录。`work-shared` 仅用于一部分配方，例如 `linux-yocto`
    和 `gcc`。'
- en: Understanding the work directory
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解工作目录
- en: 'The `build/tmp/work` directory is organized by architecture. For example, when
    working with the `qemux86-64` machine, we have the following four directories:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`build/tmp/work` 目录按架构组织。例如，当使用 `qemux86-64` 机器时，我们有以下四个目录：'
- en: '![Figure 6.2 – The contents of the build/tmp/work directory](img/Figure_6.2_B19361.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2 – `build/tmp/work` 目录的内容](img/Figure_6.2_B19361.jpg)'
- en: Figure 6.2 – The contents of the `build/tmp/work` directory
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – `build/tmp/work` 目录的内容
- en: '*Figure 6**.2* shows an example of possible directories under `build/tmp/work`
    for an `x86-64` host and a `qemux86-64` target. They are architecture- and machine-dependent,
    as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6.2* 显示了 `x86-64` 主机和 `qemux86-64` 目标下 `build/tmp/work` 目录可能的目录结构示例。它们是架构和机器相关的，如下所示：'
- en: '`all-poky-linux`: This directory contains the working build directories for
    the architecture-agnostic packages. These are mostly scripts or interpreted language-based
    packages, for example, Perl scripts and Python scripts.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`all-poky-linux`：该目录包含架构无关的软件包的工作构建目录。这些通常是脚本或基于解释语言的软件包，例如 Perl 脚本和 Python
    脚本。'
- en: '`core2-64-poky-linux`: This directory contains the working build directories
    for the packages common to `x86-64`-based targets using the optimization tuned
    for `core2-64`.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core2-64-poky-linux`：该目录包含针对 `x86-64` 基于目标并使用为 `core2-64` 优化的包的工作构建目录。'
- en: '`qemux86_64-poky-linux`: This directory contains the working build directories
    for packages specific to the `qemux86-64` machine.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qemux86_64-poky-linux`：该目录包含针对 `qemux86-64` 机器的软件包的工作构建目录。'
- en: '`x86_64-linux`: This directory holds the working build directories for the
    packages that are targeted to run on the build host machine.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x86_64-linux`：该目录包含面向构建主机机器运行的软件包的工作构建目录。'
- en: This componentized structure is necessary to allow building system images and
    packages for multiple machines and architectures within one `build` directory
    without conflicts. The target machine we will use is `qemux86-64`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这种组件化结构是必需的，以便在一个 `build` 目录内为多个机器和架构构建系统映像和软件包，而不会发生冲突。我们将使用的目标机器是 `qemux86-64`。
- en: 'The `build/tmp/work` directory is useful when checking for misbehavior or building
    failures. Its contents are organized in sub-directories following this pattern:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`build/tmp/work` 目录在检查异常行为或构建失败时非常有用。其内容按照以下模式组织在子目录中：'
- en: '![Figure 6.3 – The pattern used in sub-directories of the build/tmp/work directory](img/Figure_6.3_B19361.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – 用于 `build/tmp/work` 目录下子目录的模式](img/Figure_6.3_B19361.jpg)'
- en: Figure 6.3 – The pattern used in sub-directories of the build/tmp/work directory
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 用于 `build/tmp/work` 目录下子目录的模式
- en: 'Some of the directories under the tree shown in *Figure 6**.3* are as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 6.3* 中显示的树形结构下的某些目录如下所示：
- en: '`<sources>`: This is extracted source code of the software to be built. The
    `WORKDIR` variable points to this directory.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<sources>`：这是将要构建的软件的提取源代码。`WORKDIR` 变量指向该目录。'
- en: '`image`: This contains the files installed by the recipe.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image`：该目录包含由配方安装的文件。'
- en: '`package`: The extracted contents of output packages are stored here.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package`：输出包的提取内容存储在这里。'
- en: '`packages-split`: The contents of output packages, extracted and split into
    sub-directories, are stored here.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`packages-split`：输出包的内容被提取并分割成子目录，存储在这里。'
- en: '`temp`: This stores BitBake’s task code and execution logs.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`temp`：存储BitBake的任务代码和执行日志。'
- en: Tip
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: We can automatically remove the `work` directory after each recipe compilation
    cycle to reduce disk usage, adding `INHERIT += "rm_work"` in the `build/conf/local.conf`
    file.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在每次配方编译周期后自动删除`work`目录，以减少磁盘使用量，只需在`build/conf/local.conf`文件中添加`INHERIT
    += "rm_work"`。
- en: 'The structure of the `work` directory is the same for all architectures. For
    every recipe, a directory with the recipe name is created. Taking the machine-specific
    `work` directory and using the `sysvinit-inittab` recipe as an example, we see
    the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`work`目录的结构对于所有架构都是相同的。对于每个配方，都会创建一个以配方名称命名的目录。以特定于机器的`work`目录并以`sysvinit-inittab`配方为例，我们看到以下内容：'
- en: '![Figure 6.4 – Content of build/tmp/work/core2-64-poky-linux/pm-utils/1.4.1-r1/](img/Figure_6.4_B19361.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4 – build/tmp/work/core2-64-poky-linux/pm-utils/1.4.1-r1/的内容](img/Figure_6.4_B19361.jpg)'
- en: Figure 6.4 – Content of build/tmp/work/core2-64-poky-linux/pm-utils/1.4.1-r1/
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – build/tmp/work/core2-64-poky-linux/pm-utils/1.4.1-r1/的内容
- en: The `sysvinit-inittab` recipe is an excellent example, as it is machine-specific.
    This recipe contains the `inittab` file that defines the serial console to spawn
    the login process, which varies from machine to machine.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`sysvinit-inittab`配方是一个很好的例子，因为它是特定于机器的。该配方包含定义串行控制台以启动登录过程的`inittab`文件，而该过程因机器而异。'
- en: Note
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The build system uses the directories shown in the preceding figure that are
    not detailed here. Therefore, you should not need to work with them, except if
    you are working on build tool development.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 构建系统使用前面图中显示的目录，但这些目录在这里未详细介绍。因此，除非你从事构建工具开发，否则你不需要与这些目录打交道。
- en: The `work` directory is handy for debugging purposes; we cover this in [*Chapter
    10*](B19361_10.xhtml#_idTextAnchor129), *Debugging with the* *Yocto Project*.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`work`目录对于调试非常有用，我们将在[*第10章*](B19361_10.xhtml#_idTextAnchor129)中讲解，*使用Yocto项目进行调试*。'
- en: Understanding the sysroot directories
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解sysroot目录
- en: The `sysroot` directory plays a critical role in the Yocto Project. It creates
    an individual and isolated environment for each recipe. This environment, set
    for each recipe, is essential to ensure reproducibility and avoid contamination
    with the host machine’s packages.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`sysroot`目录在Yocto项目中起着至关重要的作用。它为每个配方创建一个独立且隔离的环境。这个为每个配方设置的环境对于确保可重现性并避免与主机机器的包污染是必不可少的。'
- en: After we build the `procps` recipe, version `3.3.17`, we get two sets of `sysroot`
    directories – `recipes-sysroot` and `recipes-sysroot-native`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建`procps`配方版本`3.3.17`之后，我们会得到两套`sysroot`目录——`recipes-sysroot`和`recipes-sysroot-native`。
- en: 'Inside each `sysroot` set, there is a sub-directory called `sysroot-provides`.
    This directory lists the packages installed on each respective `sysroot`. Following
    is the `recipe-sysroot` directory:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个`sysroot`集合内部，有一个名为`sysroot-provides`的子目录。该目录列出了安装在各自`sysroot`上的包。以下是`recipe-sysroot`目录：
- en: '![Figure 6.5 – Content of the recipe-sysroot directory under build/tmp/work
    for recipe procps](img/Figure_6.5_B19361.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.5 – recipe-sysroot目录下的内容，位于build/tmp/work，适用于procps配方](img/Figure_6.5_B19361.jpg)'
- en: Figure 6.5 – Content of the recipe-sysroot directory under build/tmp/work for
    recipe procps
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – recipe procps的recipe-sysroot目录内容
- en: 'The `recipe-sysroot-native` directory includes the build dependencies used
    on the host system during the build process. It encompasses the compiler, linker,
    tools, and more. At the same time, the `recipe-sysroot` directory has the libraries
    and headers used in the target code. The following figure shows the `recipe-sysroot-native`
    directory:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`recipe-sysroot-native`目录包含在构建过程中用于主机系统的构建依赖项。它包括编译器、链接器、工具等。同时，`recipe-sysroot`目录包含目标代码中使用的库和头文件。下图显示了`recipe-sysroot-native`目录：'
- en: '![Figure 6.6 – Content of the recipe-sysroot-native directory under build/tmp/work
    for recipe procps](img/Figure_6.6_B19361.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.6 – recipe-sysroot-native目录下的内容，位于build/tmp/work，适用于procps配方](img/Figure_6.6_B19361.jpg)'
- en: Figure 6.6 – Content of the recipe-sysroot-native directory under build/tmp/work
    for recipe procps
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6 – recipe procps的recipe-sysroot-native目录内容
- en: When we see a missing header or a link failure, we must double-check whether
    our `sysroot` directory (target and host) contents are correct.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们看到缺少头文件或链接失败时，我们必须仔细检查我们的`sysroot`目录（目标和主机）内容是否正确。
- en: Summary
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored the contents of the temporary build directory after
    image generation. We saw how BitBake uses it during the baking process.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了生成镜像后临时构建目录的内容。我们看到了BitBake在构建过程中如何使用它。
- en: In the next chapter, we will better understand how packaging is done in Poky,
    how to use package feeds, the **Package Revision** (**PR**) service, and how they
    may help our product maintenance.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更好地理解在Poky中如何进行打包，如何使用软件包源、**软件包修订版**（**PR**）服务，以及它们如何帮助我们进行产品维护。
