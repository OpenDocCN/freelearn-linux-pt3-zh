["```\n    /var/lib/pgsql/data/log to get more information. This log file is the default log file for all PostgreSQL-related activities, as we will see when troubleshooting its SELinux support in the *Troubleshooting sepgsql* section.\n    ```", "```\n    shared_preload_libraries = 'sepgsql' # (change requires restart)\n    ```", "```\n    # systemctl stop postgresql\n    ```", "```\n    \\l command, which we used earlier to check whether the database is functioning properly.\n    ```", "```\n    sepgsql function sepgsql_getcon(), which retrieves the current context for the session.\n    ```", "```\npostgres=# CREATE USER testuser PASSWORD 'somepassword';\n```", "```\nlocal\t\tall\tpostgres\t\t\t\t\tpeer\nlocal\t\tall\ttestuser\t\t\t\t\tmd5\nhost\t\tall\ttestuser\t\t127.0.0.1/32\tmd5\nhost\t\tall\ttestuser\t\t192.168.100.0/24\tmd5\n```", "```\n# setsebool -P selinuxuser_postgresql_connect_enabled on\n```", "```\n(typeattributeset cil_gen_require sepgsql_client_type)\n(typeattributeset cil_gen_require user_t)\n(typeattributeset cil_gen_require sepgsql_trusted_proc_t)\n(typeattributeset cil_gen_require sepgsql_ranged_proc_t)\n(typeattributeset sepgsql_client_type (user_t))\n(roleattributeset cil_gen_require user_r)\n(roletype user_r sepgsql_trusted_proc_t)\n(roletype user_r sepgsql_ranged_proc_t)\n```", "```\npolicy_module(local_sepgsql, 1.0)\ngen_require(`\n\trole user_r;\n\ttype user_t;\n')\npostgresql_role(user_r, user_t)\n```", "```\n# semodule -i local_sepgsql.cil\n```", "```\n# su postgres -c \"/usr/bin/psql postgres\"\npostgres=# SET sepgsql.debug_audit = true;\nSET\npostgres=# SELECT sepgsql_getcon();\n...\n```", "```\nsepgsql.debug_audit = true\n```", "```\nSTATEMENT:  SET sepgsql.debug_audit = true\nSTATEMENT:  SELECT sepgsql_getcon();\nLOG:  SELinux: allowed { execute } \\\n  scontext=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023 \\\n  tcontext=system_u:object_r:sepgsql_proc_exec_t:s0 \\\n  tclass=db_procedure name=\"pg_catalog.sepgsql_getcon()\"\n```", "```\nERROR:  SELinux: security policy violation\n```", "```\n# seinfo --class | grep db_\ndb_blob\ndb_column\ndb_database\ndb_language\ndb_procedure\ndb_schema\ndb_sequence\ndb_table\ndb_tuple\ndb_view\n```", "```\n# su postgres -c \"/usr/bin/psql postgres\"\npostgres=# CREATE DATABASE db_test;\nCREATE DATABASE\n```", "```\npostgres=# \\c db_test;\ndb_test=# CREATE TABLE tb_users(uid int primary key, name text, mail text, address text, salt text, phash text);\n```", "```\ndb_test=# SELECT objname,provider,label FROM pg_seclabels WHERE objname='tb_users';\n objname  | provider | label\n----------+----------+----------------------------------------\n tb_users | selinux  | unconfined_u:object_r:sepgsql_table_t:s0\n```", "```\ndb_test=# GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO testuser;\ndb_test=# INSERT INTO tb_users VALUES (1, 'Sven Vermeulen', 'some@example.com', 'Some Place 10001, Somewhere', 'abc123', 'f5ba94...3');\ndb_test=# INSERT INTO tb_users VALUES (2, 'Lisa McCarthy', 'lisa@example.com', 'Lisa Place 15, Someplace', 'def456', 'ba53f2...0');\n```", "```\ndb_test=> SELECT * FROM tb_users;\n```", "```\ndb_test# SECURITY LABEL ON COLUMN tb_users.phash IS 'system_u:object_r:sepgsql_secret_table_t:s0';\n```", "```\ndb_test=> SELECT * FROM tb_users;\nERROR:  SELinux: security policy violation\n```", "```\ndb_test=> SELECT uid, name, mail, address, salt from tb_users;\n```", "```\npostgres=# CREATE FUNCTION compare_hash(fuid int, fphash text) RETURNS boolean AS 'SELECT phash = regexp_replace(fphash, ''[^a-f0-9]*'', '''', ''g'') FROM tb_users WHERE uid = fuid' LANGUAGE sql;\npostgres=# CREATE FUNCTION set_hash(fuid int, fphash text) RETURNS int AS 'UPDATE tb_users SET phash = regexp_replace(fphash, ''[^a-f0-9]*'', '''', ''g'') WHERE uid = fuid RETURNING uid' LANGUAGE sql;\n```", "```\ndb_test=# SELECT objname,provider,label FROM pb_seclabels WHERE objname LIKE 'compare_hash%';\n```", "```\ndb_test=# SECURITY LABEL ON FUNCTION compare_hash(fuid integer, fphash text) IS 'system_u:object_r:sepgsql_trusted_proc_exec_t:s0';\ndb_test=# SECURITY LABEL ON FUNCTION set_hash(fuid integer, fphash text) IS 'system_u:object_r:sepgsql_trusted_proc_exec_t:s0';\n```", "```\ndb_test=> SELECT compare_hash(1, 'abc123');\nf\ndb_test=> SELECT set_hash(1, 'abc123');\n1\ndb_test=> SELECT compare_hash(1, 'abc123');\nt\n```", "```\ndb_test=# SECURITY LABEL ON COLUMN tb_users.mail IS 'system_u:object_r:sepgsql_table_t:s0:c903';\ndb_test=# SECURITY LABEL ON COLUMN tb_users.address IS 'system_u:object_r:sepgsql_table_t:s0:c903';\n```", "```\ndb_test=> SELECT sepgsql_getcon();\nuser_u:user_r:user_t:s0-s0:c0.c100\ndb_test=> SELECT uid,name,mail,address FROM tb_users;\nERROR:  SELinux: security policy violation;\n```", "```\ndb_test=> SELECT sepgsql_getcon();\nuser_u:user_r:user_t:s0-s0:c0.c100,c900.c904\ndb_test=> SELECT uid,name,mail,address FROM tb_users;\n```", "```\n# semanage login -l\nLogin Name     SELinux User    MLS/MCS Range    ...\n...\ntaylor         user_u          s0-s0:c0.c100,c900.c903 ...\n```", "```\ndb_test=> SELECT sepgsql_getcon();\nuser_u:user_r:user_t:s0-s0:c0.c100;\ndb_test=> SELECT sepgsql_setcon('user_u:user_r:user_t:s0-s0:c0.c100,c900.c903');\ndb_test=> SELECT sepgsql_getcon();\nuser_u:user_r:user_t:s0-s0:c0.c100,c900.c903\n```", "```\n(typeattributeset cil_gen_require mcs_constrained_type)\n(typeattributeset cil_gen_require user_t)\n(typeattributeset mcs_constrained_type (user_t))\n```", "```\n$ psql -U testuser -h ppubssa3ed db_test\npsql: FATAL:  SELinux: unable to get peer label: Protocol not available\n```", "```\n# netlabelctl cipsov4 add local doi:2\n```", "```\n# netlabelctl unlbl add interface:eth0 address:192.168.100.0/24 label:user_u:user_r:user_t:s0\n```", "```\n# netlabelctl map del default\n# netlabelctl map add default address:0.0.0.0/0 protocol:unlbl\n# netlabelctl map add default address:::/0 protocol:unlbl\n# netlabelctl map add default address:127.0.0.1 protocol:cipsov4,2\n```"]