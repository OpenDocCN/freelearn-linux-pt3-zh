- en: '19'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '19'
- en: Deploying Ubuntu in the Cloud
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在云端部署 Ubuntu
- en: Up until now, in each chapter, we’ve been working with an instance of Ubuntu
    installed on either a local virtual machine, a physical computer or server, or
    even a Raspberry Pi. We’ve learned how to deploy Ubuntu on such devices, and we’ve
    even gone as far as deploying virtual machines as well as containers. These on-premises
    devices have served us well, but the concept of cloud computing has become quite
    popular, even more so since the previous edition of this book. In this chapter,
    we’re going to take a look at running Ubuntu in the cloud. Specifically, we’ll
    deploy an Ubuntu instance on **Amazon Web Services** (**AWS**), which is a very
    popular platform for cloud computing. While we won’t go into extreme detail on
    AWS (it’s an extremely large and complex platform), you’ll definitely get a feel
    for what it’s like to deploy resources in the cloud, which will be more than enough
    to get you started.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在每一章中，我们一直在使用安装在本地虚拟机、物理计算机或服务器上的 Ubuntu 实例，甚至是 Raspberry Pi。我们已经学会了如何在这些设备上部署
    Ubuntu，甚至还深入到虚拟机和容器的部署。这些本地设备一直为我们提供了良好的服务，但云计算的概念已经变得非常流行，尤其是自本书上一版以来。在本章中，我们将探索如何在云端运行
    Ubuntu。具体来说，我们将部署一个 Ubuntu 实例在**亚马逊云服务**（**AWS**）上，这是一种非常流行的云计算平台。虽然我们不会详细讲解 AWS（它是一个庞大而复杂的平台），但你一定会对在云端部署资源的感觉有所了解，这对你入门已足够。
- en: 'This exploration will involve the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本次探索将涉及以下主题：
- en: Understanding the difference between on-premises and cloud infrastructure
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解本地基础设施与云基础设施的区别
- en: Important considerations when considering cloud computing as a potential solution
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在考虑将云计算作为潜在解决方案时需要注意的重要事项
- en: Becoming familiar with some basic AWS concepts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉一些基础的 AWS 概念
- en: Creating an AWS account
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 AWS 账户
- en: Choosing a region
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择区域
- en: Deploying Ubuntu as an AWS EC2 instance
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署 Ubuntu 作为 AWS EC2 实例
- en: Creating and deploying Ubuntu AMIs
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建并部署 Ubuntu AMI
- en: Automatically scaling Ubuntu EC2 deployments with Auto Scaling
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自动扩展实现 Ubuntu EC2 部署的自动扩展
- en: 'Keeping costs down: understanding how to save money and make cost-effective
    decisions'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 降低成本：了解如何节省开支并做出具有成本效益的决策
- en: 'Taking the cloud further: additional resources to grow your knowledge'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进一步探索云计算：额外的资源来扩展你的知识
- en: Since cloud computing is something of a different mindset than we’re used to,
    we’ll first go through a few sections that are dedicated to helping us understand
    the difference, as well as some of the considerations we should make before choosing
    to implement Ubuntu in the cloud. In the next section, we’ll explore how the concept
    of cloud computing differs from on-premises hardware.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于云计算的思维方式与我们习惯的方式有所不同，我们首先将介绍一些章节，帮助我们理解这种差异，以及在选择将 Ubuntu 实现到云端之前应考虑的一些因素。在下一节中，我们将探讨云计算的概念如何与本地硬件有所不同。
- en: Understanding the difference between on-premises and cloud infrastructure
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解本地基础设施与云基础设施的区别
- en: As mentioned at the very beginning of this chapter, we’ve been solely utilizing
    on-premises Ubuntu installations thus far. Even if we’re running Ubuntu on a virtual
    machine in our data center, it’s still considered an on-premises installation
    even when it’s not on physical hardware. In short, an on-premises installation
    is something that resides locally with us, regardless of the type of server that
    serves as the foundation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章开头所提到的，我们至今一直仅使用本地安装的 Ubuntu。即使我们在数据中心的虚拟机上运行 Ubuntu，它仍然被视为本地安装，即使它不是运行在物理硬件上。简而言之，本地安装是指在我们本地运行的安装，无论其基础服务器类型如何。
- en: 'The first difference when it comes to cloud computing might be somewhat obvious:
    it’s the exact opposite of a resource being on-premises. With a cloud instance
    of Ubuntu, it’s someone else’s hardware that it runs on. Most of the time, we
    won’t know what kind of server a cloud instance is running on—when we subscribe
    to the services of a cloud provider and pay a fee to run a server on that platform,
    we’re able to access the operating system just like we would a virtual machine,
    with little knowledge of the underlying data center. Although utilizing a cloud
    instance will have some sort of recurring cost, we don’t need to worry about monitoring
    hardware components or replacing failed physical devices. With the cloud, that
    becomes someone else’s problem.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在云计算中，第一个区别可能是比较显而易见的：它正好与资源本地化的概念相反。使用云实例的Ubuntu时，实际上是在别人的硬件上运行。大多数时候，我们并不知道云实例运行在什么样的服务器上——当我们订阅云服务提供商的服务并支付费用来在该平台上运行服务器时，我们就像使用虚拟机一样访问操作系统，几乎不需要了解底层数据中心的情况。尽管使用云实例会有一些持续的费用，但我们不需要担心监控硬件组件或更换损坏的物理设备。对于云服务来说，这些问题由别人来解决。
- en: There are various cloud providers you can choose from, with **AWS**, **Google
    Cloud Platform** (**GCP**), and **Microsoft Azure** being popular choices. Those
    are three very popular platforms. Each of them has its own strengths and weaknesses,
    and even some differentiation as far as how resources on the platform are managed.
    For the most part, there’s no right or wrong choice here, it’s important to research
    each of the platforms and make the appropriate decision for you and your organization.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择各种云服务提供商，其中**AWS**、**Google Cloud Platform**（**GCP**）和**Microsoft Azure**是比较流行的选择。这三大平台都非常流行。它们各自有优缺点，甚至在平台上资源管理方面有所不同。在大多数情况下，这里没有绝对对错的选择，重要的是研究每个平台并为你和你的组织做出合适的决定。
- en: In addition to cloud providers, there are also **Virtual Private Server** (**VPS**)
    providers. There used to be more of a distinction between a full cloud provider
    and a VPS provider – but as time goes on, the line between the two types of platforms
    is becoming increasingly thin. For the most part, VPS providers are lighter or
    “simpler” alternatives to standard cloud providers. They provide the same core
    features, such as allowing you to build virtual machines – but they don’t usually
    offer as many features as full cloud providers do. Nowadays, VPS providers are
    rolling out new features regularly and are catching up to cloud providers in terms
    of features. Examples of popular VPS providers include **DigitalOcean** and **Linode**,
    among others. In fact, even Amazon themselves have gotten into the VPS business,
    offering a VPS alternative to their own platform, called **Amazon Lightsail**.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了云服务提供商之外，还有**虚拟私人服务器**（**VPS**）提供商。以前，完整的云服务提供商和VPS提供商之间有较大的区别——但随着时间的推移，这两种平台之间的界限越来越模糊。大多数情况下，VPS提供商是标准云服务提供商的较轻或“简化”版。它们提供相同的核心功能，例如允许你构建虚拟机——但通常不像完整的云服务提供商那样提供那么多功能。如今，VPS提供商正在定期推出新功能，并在功能方面赶上了云服务提供商。流行的VPS提供商包括**DigitalOcean**和**Linode**等。实际上，连亚马逊自己也进入了VPS业务，提供一种名为**Amazon
    Lightsail**的VPS替代方案。
- en: For your organization, which should you choose between a full cloud provider
    and VPS provider? Many administrators would answer this question without hesitation
    and recommend a full cloud provider. I can certainly see their point – why go
    with a “lighter” platform when you can use a solution that has all the bells and
    whistles? However, based on my experience with many organizations, I wouldn’t
    recommend going with a full cloud provider without first finding out if a VPS
    provider has all the features you need. The reason for this is that one of the
    trade-offs of having more features is that complexity increases. With an increase
    in complexity comes a larger responsibility to manage resources on that platform.
    And that complexity can create a very large administration overhead. For that
    reason, I don’t recommend full cloud providers like AWS or Azure to small organizations
    with limited IT staff. For those organizations, VPS providers would be best as
    the burden of administration is lower. Larger organizations with a team of administrators
    should have no problem tackling something like AWS.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你的组织，你应该在完全云提供商和VPS提供商之间选择哪一个？许多管理员会毫不犹豫地回答这个问题，并推荐使用完全云提供商。我当然能理解他们的观点——为什么要选择一个“轻量级”平台，而可以使用一个具备所有功能的解决方案呢？然而，根据我与许多组织的经验，我不建议在没有首先确认VPS提供商是否拥有你所需要的所有功能的情况下选择完全云提供商。原因在于，拥有更多功能的权衡之一就是复杂性增加。复杂性的增加意味着你需要承担更多的责任来管理该平台上的资源。而这种复杂性可能会带来非常大的管理开销。因此，我不建议像AWS或Azure这样的完全云提供商给IT人员有限的小型组织。对于这些组织，VPS提供商是最合适的选择，因为管理负担较小。对于有一支管理员团队的大型组织来说，处理像AWS这样的服务不成问题。
- en: As I mentioned, we’ll be going over AWS in this chapter. Even if you’re not
    considering migrating resources to the cloud, it’s something that’s still worth
    practicing. If nothing else, you’ll gain some familiarity with another platform,
    which will increase your skillset and marketability. And I don’t know about you,
    but speaking for myself, I really enjoy checking out technologies and learning
    something new.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我提到的，我们将在本章中讨论AWS。即使你没有考虑将资源迁移到云上，练习这项技术仍然是值得的。至少，你可以对另一个平台有一些熟悉，这将增加你的技能和市场竞争力。而且我不知道你怎么样，但就我个人而言，我真的很喜欢了解新技术和学习新的东西。
- en: However, perhaps I’m getting ahead of myself. Before you migrate anything to
    the cloud, the most important question to ask right now is whether or not creating
    cloud resources is appropriate for your goals. That’s exactly what we’ll explore
    in the next section. We’ll also explore some of the differences in mindset when
    it comes to cloud computing as well.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，也许我有些超前了。在你将任何资源迁移到云之前，现在最重要的问题是，创建云资源是否符合你的目标。这正是我们将在下一部分探讨的内容。我们还将探讨云计算中的一些思维方式差异。
- en: Important considerations when considering cloud computing as a potential solution
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考虑云计算作为潜在解决方案时的重要事项
- en: 'Before choosing to sign up with a provider, it’s important to first make sure
    that creating cloud resources is a good idea for you or your organization in the
    first place. Often, IT professionals can get so excited when it comes to a new
    trend that they may make the mistake of trying to use such a service even when
    it doesn’t make sense to do so. Above all, as an administrator, it’s important
    to utilize the best tool available for whatever it is that you wish to accomplish,
    instead of using a technology just because you’re excited about it. Cloud computing
    is awesome for sure, but for some use cases, it’s just not a good fit. This is
    similar to containers as well: containerization is an exciting technology but
    some applications just don’t run well on that platform. It takes trial and error.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择注册某个提供商之前，首先要确保创建云资源对你或你的组织来说是一个好主意。IT专业人员常常会对新兴趋势感到兴奋，以至于可能会犯错，尝试使用这样的服务，即使这样做并不合适。最重要的是，作为一名管理员，应该利用最合适的工具来完成你想做的事情，而不是仅仅因为对某项技术感到兴奋就去使用它。云计算无疑是很棒的，但对于某些使用场景来说，它并不合适。这与容器化类似：容器化是一项令人兴奋的技术，但某些应用程序在这个平台上运行并不好。它需要经过反复试验。
- en: There are some considerable benefits when it comes to cloud computing. When
    it comes to physical servers, the hardware will fail eventually. It’s not a matter
    of “if” but “when.” All hardware *will* fail eventually. And even if you have
    hardware that doesn’t end up failing in the short term and lasts for a long time,
    it will be made obsolete by more powerful hardware that is more efficient. When
    it comes to managing physical servers, you’ll need to replace the hardware eventually.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算有一些显著的好处。就物理服务器而言，硬件最终会出现故障。这不是“是否”会发生的问题，而是“何时”发生的问题。所有硬件*最终都会*故障。即使你拥有的硬件短期内没有发生故障，并且能够持续很长时间，它也会被更强大、更高效的硬件所淘汰。管理物理服务器时，最终需要更换硬件。
- en: This is also true when it comes to cloud computing; the hardware such services
    run on will need to be replaced whenever it fails or becomes obsolete (whichever
    happens first). The difference is that when that happens, the liability on you
    (the administrator) is greatly reduced. You won’t have to order a new server,
    replace parts, or even pay attention to the hardware at all. It’s solely the responsibility
    of the cloud service or VPS provider to keep track of that. A virtual machine
    you run on a cloud platform could be running on a physical server that’s a couple
    of years old, and then tomorrow be moved to a brand-new piece of hardware. And
    you might not even be aware that it was ever moved.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于云计算也是适用的；这些服务运行的硬件在发生故障或变得过时时（无论哪种情况先发生）都需要被替换。不同之处在于，当这种情况发生时，你（作为管理员）的责任大大减少。你无需再订购新服务器，替换零部件，甚至无需关注硬件。保持硬件运行的责任完全由云服务或VPS提供商承担。你在云平台上运行的虚拟机可能运行在一台已经使用了几年时间的物理服务器上，第二天可能会被迁移到一台全新的硬件上。你甚至可能没有意识到它曾经被迁移过。
- en: The trade-off, though, is potentially the cost. The reason why I mention cost
    as a “potential” trade-off is that whether or not it’s cheaper for your organization
    to purchase physical servers or pay a monthly fee for servers in the cloud comes
    down to which offers a better **Return on Investment** (**ROI**). To better understand
    this, consider an organization that utilizes only on-premises hardware for their
    data center with no cloud resources being used at all. Let’s also assume that
    every 3 years or so, they have to replace some of the more critical servers with
    newer hardware; and every 5-10 years the less-important servers are replaced.
    There’s also a need to pay for full-time administrators with specialties in managing
    physical hardware, as well as maintaining a cooling system and making sure a room
    is available to designate as a data center. Also, consider the electric bill for
    running your own data center. Add all of this up—how much is it costing the organization
    on average?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，权衡的关键可能在于成本。我之所以将成本作为一个“潜在”的权衡因素提到，是因为你是否选择购买物理服务器还是支付每月的云服务器费用，最终取决于哪个方案能带来更好的**投资回报率**（**ROI**）。为了更好地理解这一点，可以考虑一个只使用本地硬件的数据中心的组织，完全不使用云资源。假设每3年左右，他们必须用更先进的硬件替换一些关键的服务器；而每5-10年，替换不太重要的服务器。还需要支付全职管理员的薪资，这些管理员需要具备管理物理硬件的专长，并维护冷却系统，确保有房间可作为数据中心使用。同时，还需要考虑自己运行数据中心的电费。将这些费用加总起来——这些开销平均会给组织带来多大成本？
- en: With physical infrastructure, you’re paying an up-front cost to purchase servers
    every time you need to do so. With cloud computing, you never have to purchase
    physical server hardware, but instead you’re paying a fee each and every month
    for the privilege of utilizing cloud infrastructure. When you add up the monthly
    costs for cloud resources, how much would that cost the organization? Would it
    cost more than running physical hardware or less?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于物理基础设施来说，每次需要服务器时，你都需要支付一次性的费用来购买服务器。而云计算则不需要你购买物理服务器硬件，而是每个月支付费用，以便能够使用云基础设施。当你把云资源的月度费用加起来时，这样的开销会对组织造成多大负担？它的成本会比运行物理硬件高还是低？
- en: Often, whether or not running a server in the cloud results in cost savings
    (or ends up being cost prohibitive) comes down to what types of services you wish
    to use on that platform. Running more virtual machines in the cloud is generally
    fairly inexpensive, and might often result in cost savings when compared to running
    physical infrastructure of your own. However, an example of something that might
    end up being cost prohibitive in the cloud is storage.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，是否在云中运行服务器能节省成本（或最终变得过于昂贵）取决于你希望在该平台上使用的服务类型。在云中运行更多虚拟机通常是相对便宜的，并且与运行自己的物理基础设施相比，可能会带来成本节省。然而，云中可能会变得过于昂贵的一个例子就是存储。
- en: If your organization doesn’t store much data, then storage costs won’t really
    be a concern. Many companies are perfectly satisfied with employees utilizing
    something like Google Drive for shared storage and won’t even need cloud storage
    at all. Some organizations, especially those that develop software, have *massive*
    storage needs. For these companies, there could be tens or even hundreds of terabytes
    of data being stored, as well as the bandwidth costs for the data going in and
    out of the company. If you were to attempt to migrate such a large amount of data
    to a cloud server provider, you wouldn’t have to manage the storage hardware anymore,
    but your costs for cloud storage would go up dramatically and might easily be
    much more expensive than it costs you to continue to use physical hardware. Personally,
    I’ve seen storage costs result in tens of thousands of dollars extra in monthly
    billing.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的组织存储的数据量不大，那么存储成本就不会是个问题。许多公司完全满意让员工使用Google Drive之类的共享存储，甚至根本不需要云存储。一些组织，尤其是软件开发公司，*拥有庞大的*存储需求。对于这些公司来说，可能需要存储数十甚至数百TB的数据，以及数据进出公司的带宽费用。如果你试图将这么大量的数据迁移到云服务提供商那里，你不再需要管理存储硬件，但云存储的费用将大幅增加，可能比继续使用物理硬件的成本还要贵得多。我个人曾看到过存储成本每月额外增加数万美元。
- en: Another consideration is stability. It’s often argued that utilizing a cloud
    provider will result in a more stable infrastructure. That mindset seems to make
    sense at first, considering that by using a cloud provider you’re no longer responsible
    for managing the hardware. There’s definitely some truth to the claim that cloud
    resources are more stable, but it’s not quite that simple. Cloud providers *do*
    experience downtime, and it happens more often than you’d think.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要考虑的因素是稳定性。人们常常认为，使用云服务提供商可以实现更稳定的基础设施。这个观点一开始似乎有道理，因为使用云服务提供商意味着你不再需要管理硬件。云资源更稳定这一说法确实有一定的道理，但事情并不那么简单。云服务提供商*确实*会经历停机，而且这种情况发生的频率比你想象的还要高。
- en: Cloud providers will often advertise a high level of uptime, often measured
    in “9s.” For example, AWS offers a general uptime of 99.999%, as of the date this
    book is being prepared for publishing. That sounds great, doesn’t it? Before you
    get too excited about a cloud provider’s uptime claim, it’s important to also
    know what exactly they count as part of that uptime. If an upstream provider,
    such as a backend internet resource, goes down and service is completely unavailable,
    they may not count that and continue to claim the same amount of uptime. Massive
    outages of cloud providers are not uncommon; in 2017, Amazon’s S3 service suffered
    a major outage due to one of their engineers mistyping a command. In that situation,
    many services on the internet were unavailable to customers. So while it is true
    that a cloud service provider is less likely to suffer an outage than you are
    to witness hardware failures, it’s important to keep in mind that outages are
    still possible. We can’t ever assume any service (our own or otherwise) is bulletproof.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 云服务提供商通常会宣传较高的正常运行时间，通常用“9”来衡量。例如，截至本书出版准备时，AWS提供99.999%的正常运行时间。这听起来很棒，不是吗？在你对云服务提供商的正常运行时间声明感到兴奋之前，了解他们究竟是如何计算这一正常运行时间的也很重要。如果上游提供商（如后端互联网资源）发生故障，服务完全不可用，他们可能不会把这一情况计入停机时间，依然声称保持同样的正常运行时间。云服务提供商的大规模故障并不罕见；例如，2017年亚马逊的S3服务由于一名工程师输入命令错误而发生了重大故障，导致许多互联网上的服务无法提供给用户。因此，虽然云服务提供商的故障发生率通常低于硬件故障的发生率，但仍需记住，停机会时有发生。我们永远不能假设任何服务（无论是我们的还是其他的）是万无一失的。
- en: Automation is a very important consideration with the cloud. If your resources
    encounter an issue, it’s a really good idea to have an automated means of re-deploying
    your important services. On a physical server, you can set it up exactly as you
    want it and take an image of the hard drive in case the server fails. Cloud providers
    offer you essentially the same service, giving you the ability to create images
    of your important servers so you can redeploy them in the future should you need
    to do so.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化是云计算中的一个重要考虑因素。如果你的资源遇到问题，最好有一种自动化的方式来重新部署你的关键服务。在物理服务器上，你可以按需求设置服务器并将硬盘镜像保存，以防服务器发生故障。云服务提供商基本上也为你提供相同的服务，允许你创建重要服务器的镜像，以便将来需要时重新部署。
- en: If you do go with a cloud provider, make sure you keep regular backups as well
    as images. And be sure to keep a copy of at least the most recent backups locally
    outside of the cloud provider, because if the cloud provider itself goes down
    then you also lose the backup. I can probably better summarize this by advising
    you to not become over-confident in the stability of your cloud provider. Always
    assume your infrastructure will fail eventually, regardless of where it’s located
    or how stable their marketing team claims it is.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择了云服务提供商，务必定期备份并保存镜像文件。同时，确保至少将最新的备份保存在本地，远离云服务提供商，因为如果云服务提供商发生故障，你也会失去备份。更简洁地说，我建议你不要对云服务提供商的稳定性过于自信。无论其营销团队如何宣传，始终假设你的基础设施最终会失败，且要做好准备，防止其发生。
- en: The warnings I have given around the stability of cloud providers are not intended
    to scare you away from using them, but instead to steer you toward maintaining
    good hygiene with the cloud, just as you would with physical infrastructure. Basically,
    to be successful when it comes to managing servers, you’ll have to assume that
    cloud providers can fail just as easily as on-premises equipment, and make sure
    you’re well prepared if there is ever an issue. Cloud providers actually provide
    you with all the tools you need in order to build a stable infrastructure that’s
    easily reproducible and recoverable. If you utilize those tools effectively, you
    shouldn’t have anything to worry about. We’ll explore these concepts further as
    we go along, but you can go as far as to have cloud servers recover *themselves*
    when a problem occurs. It all depends on how you architect your solution.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我对云服务提供商稳定性的警告，并不是要吓唬你远离使用它们，而是希望你能够像管理物理基础设施一样，保持良好的云使用习惯。简单来说，要在服务器管理中取得成功，你必须假设云服务提供商的故障与本地设备一样容易发生，并且要确保在遇到问题时你已经做好了充分的准备。云服务提供商实际上为你提供了所有必要的工具，以构建一个稳定、可复制、可恢复的基础设施。如果你有效地利用这些工具，应该不必担心任何问题。我们将在接下来的内容中深入探讨这些概念，实际上，你甚至可以让云服务器在问题发生时自动*恢复*，这完全取决于你如何设计你的解决方案。
- en: It’s also important that you understand any company policies (and laws) that
    may exist regarding data retention, what type of information is allowed to be
    stored within the cloud, or any other rule or regulation that might be in place
    in your area. (GDPR is a great example of legal requirements.) If in doubt, consulting
    with your company’s management, security, and human resources teams would be a
    great place to start when it comes to what data-related policies and laws may
    be applicable while you design your cloud solution.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，了解关于数据保存、云中可以存储什么类型的信息或你所在地区可能存在的任何相关政策或法律也非常重要。（GDPR是法律要求的一个很好的例子。）如果有疑问，可以咨询公司管理层、安全团队和人力资源部门，这将是你在设计云解决方案时，了解与数据相关的政策和法律的一个好起点。
- en: In the next section, we’re going to explore some concepts specific to AWS, so
    we’ll have a stronger foundation of knowledge to use for building an actual cloud
    solution later on in this chapter.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将探讨一些特定于AWS的概念，这样我们就能为后续章节中构建实际的云解决方案打下更坚实的知识基础。
- en: Becoming familiar with some basic AWS concepts
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 熟悉一些基本的AWS概念
- en: As discussed earlier, AWS is one of several competing cloud service providers.
    For the purpose of this chapter, AWS was chosen because more than any other provider,
    the platform requires an administrator to adopt a completely different mindset
    when it comes to managing infrastructure. This different mindset is a healthy
    one even outside of AWS, so it represents a logical evolution at this point in
    our journey.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，AWS 是多个竞争的云服务提供商之一。在本章中选择 AWS，是因为与其他任何提供商相比，这个平台要求管理员在管理基础设施时采取完全不同的心态。这种不同的心态即使在
    AWS 之外也是健康的，因此它在我们旅程的这个阶段代表了一个合理的进化。
- en: Up until now, we’ve discussed server installations as essentially pets, meaning
    we want to keep them around, make sure they’re healthy, and if something goes
    wrong, try to fix it. We want to keep our servers operational for as long as possible.
    We want to be able to rely on them, and that helps our organization - customers
    and clients appreciate using a website or service that is stable, with minimal
    or no downtime.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直将服务器的安装看作是宠物，意味着我们希望它们一直存在，确保它们健康，如果出了问题，我们会尽力修复。我们希望尽可能长时间地保持服务器的正常运行。我们希望能够依赖它们，这有助于我们的组织——客户和用户更愿意使用一个稳定、最小化或没有停机时间的网站或服务。
- en: That last part, minimal downtime, doesn’t change regardless of the mindset we
    use when managing our infrastructure. Downtime and service disruption is bad in
    this industry, and that’s always going to be the case. The difference is what
    we do about it, and how we go about recovering from it. In fact, we can even try
    our best to automatically recover when we have a problem. If the customer never
    notices there was ever an issue, even better.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点，最小化停机时间，无论我们以什么样的心态管理基础设施，这一点都不会改变。在这个行业中，停机和服务中断是非常不好的，这一点始终不变。不同之处在于我们如何处理这个问题，以及我们如何去恢复。事实上，我们甚至可以尽最大努力在出现问题时自动恢复。如果客户从未注意到曾经发生过问题，那就更好了。
- en: With AWS, the mindset is different – we consider our servers as disposable,
    not as pets. This may seem a bit surprising at first, but if we effectively use
    the tools we’re provided, we can build an infrastructure that is scalable. This
    concept in particular is known as **Auto Scaling** and is a very important aspect
    of AWS. With Auto Scaling, resources are automatically created and destroyed as
    demand increases and decreases. For example, let’s say that your web server receives
    more visitors than normal, and its CPU is starting to max out. Auto Scaling would
    then bring up a new web server automatically, and with a load balancer, route
    clients between instances as needed to spread the load. You can set the maximum
    number of instances that can be brought online, and then when the load decreases,
    the servers that were brought online to handle the load will automatically get
    deleted. This means that you can architect your cloud solution such that you’ll
    have the exact number of servers in existence as you need at any given time.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 AWS 时，心态是不同的——我们将服务器视为一次性使用品，而非宠物。这一观点一开始可能让人感到有些意外，但如果我们有效地利用所提供的工具，就可以构建一个可扩展的基础设施。这个概念特别被称为**自动扩展**，是
    AWS 的一个非常重要的方面。通过自动扩展，资源会根据需求的增加和减少自动创建和销毁。例如，假设你的网页服务器接收到的访问量比平常多，且其 CPU 已经接近最大负载。此时，自动扩展会自动启动一个新的网页服务器，并通过负载均衡器将客户端按需分配到不同的实例，从而分担负载。你可以设置可以启动的最大实例数量，然后当负载减少时，之前为应对负载而启动的服务器会自动被删除。这意味着你可以设计你的云解决方案，使得在任何时刻都能拥有恰好所需数量的服务器。
- en: 'Another level above Auto Scaling is **Auto healing**. Just as the name implies,
    auto healing means that if your server runs into a problem, it will automatically
    be “healed,” and in the case of cloud computing, this means the instance will
    be disposed of and recreated from a known good image or template. This is the
    ultimate goal of AWS (or pretty much any implementation): to have infrastructure
    that is not only scalable but also able to recover by itself. For example, perhaps
    you have a pair of web servers that handle requests from clients. One of them
    encounters some sort of issue and fails some sort of test that would imply that
    the server is unreliable. Such a test is known as a **health check**. With auto
    healing, a server that fails health checks is considered unhealthy and is deleted.
    With Auto Scaling, you also set a minimum number of servers for your application.
    If the number of servers falls below the minimum, then a new one is created to
    replace it. Depending on how you architect your solution, the customer may notice
    some degradation if the application is running on fewer servers, but that’s only
    temporary. Everything will return back to normal when the new server comes online.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 自动伸缩之上的另一个层级是**自动修复**。顾名思义，自动修复意味着，如果你的服务器出现问题，它会自动“修复”。在云计算中，这意味着实例将被销毁并从已知的良好镜像或模板中重新创建。这是
    AWS（或者几乎所有类似实现）的终极目标：拥有不仅可扩展，而且能够自我恢复的基础设施。例如，也许你有一对处理客户端请求的 Web 服务器。其中一台遇到问题并未通过某种测试，测试表明该服务器不可靠。这样的测试被称为**健康检查**。通过自动修复，未通过健康检查的服务器会被认为是不健康的并被删除。借助自动伸缩，你还可以为你的应用设置最小服务器数量。如果服务器数量低于最低要求，则会创建一台新服务器来替代它。根据你的架构设计，客户可能会注意到应用在少数服务器上运行时的性能下降，但这只是暂时的。当新服务器上线时，一切会恢复正常。
- en: With AWS, Auto Scaling and auto healing are extremely important. I’ve seen many
    administrators make the mistake of not utilizing those features of the platform,
    and that should never be the case. Without such high-availability features, you
    risk having your server go away at any moment. This may be a bigger problem than
    you think. AWS consists of physical servers all over the world, and just like
    any other physical server, hardware failures are not only possible but happen
    regularly. If your application is running on a physical host within an AWS data
    center that encounters a hardware failure, your server may get deleted when they
    go and replace it. With Auto Scaling, this isn’t a problem. A new virtual server
    will be brought online to replace the one that was removed.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AWS 中，自动伸缩和自动修复是非常重要的。我曾见过许多管理员没有利用平台的这些功能，这绝不应该发生。如果没有这些高可用性功能，你的服务器随时可能会停止运行。这可能比你想象的更严重。AWS
    的物理服务器遍布全球，和其他物理服务器一样，硬件故障不仅是可能的，而且经常发生。如果你的应用运行在 AWS 数据中心的某台物理主机上，而该主机发生硬件故障，在更换硬件时，可能会导致你的服务器被删除。使用自动伸缩，这就不是问题了。一台新的虚拟服务器将上线，替代被移除的服务器。
- en: But without Auto Scaling, this can result in manually having to rebuild your
    server. Don’t worry though, we’ll cover Auto Scaling in this very chapter, so
    you’ll definitely understand how to implement it before we’re done.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果没有自动伸缩，这可能会导致你需要手动重建服务器。不过不用担心，我们将在本章中讲解自动伸缩，所以在我们讲解完之前，你一定会理解如何实现它。
- en: The concepts around high availability are not limited to AWS. Similar features
    exist on other cloud platforms as well. The main difference between competing
    cloud providers is the marketing terms they use for these features, but you can
    set up similar infrastructure on each. With AWS, they really focus on this aspect
    though, so it’s important to learn. But even if you’re not utilizing AWS in production
    at your organization, the concepts around being able to easily recover from disasters
    are still important and can still be implemented. If nothing else, you should
    at least consider implementing automation for rebuilding servers so you don’t
    have to do so much manual work if a problem occurs.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 高可用性相关的概念不限于 AWS，其他云平台也有类似的功能。不同云服务提供商之间的主要区别在于它们为这些功能所使用的营销术语，但你可以在每个平台上设置类似的基础设施。不过，AWS
    确实非常注重这一方面，因此学习这些概念是很重要的。但即使你在公司生产环境中没有使用 AWS，能够轻松从灾难中恢复的概念仍然很重要，且是可以实现的。至少，你应该考虑为重建服务器实现自动化，这样如果发生问题时，你就不必做那么多手动操作。
- en: 'Back to AWS: there are many services within the platform that you can use that
    will provide a variety of features. In fact, there are well over a hundred different
    services within the platform. Therefore, it’s impossible for us to cover each
    in this chapter. It would be difficult to cover every service even in a book dedicated
    only to AWS. But don’t let the number of services overwhelm you; you’ll only need
    to learn about the services that are related to what you’re trying to achieve
    with the platform. For example, if your organization doesn’t develop multiplayer
    computer games, then learning the GameLift service will be of no benefit to you
    at all. In this chapter, we’ll focus on the services required to get you up and
    running with a basic web server running in the cloud. The following services and
    terms will be discussed:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 回到AWS：该平台内有许多服务可供使用，这些服务提供了各种功能。实际上，平台内有一百多种不同的服务。因此，我们无法在本章中覆盖每一项服务。即使是在专门讲解AWS的书籍中，覆盖所有服务也是一件非常困难的事情。但是，不要让服务的数量让你感到不知所措；你只需要学习与实现你在平台上目标相关的服务。例如，如果你的组织不开发多人电子游戏，那么学习GameLift服务对你完全没有帮助。在本章中，我们将重点介绍启动并运行一个基本的云端Web服务器所需的服务。以下服务和术语将会讨论：
- en: '**Virtual Private Cloud** (**VPC**): A VPC is a higher-level abstraction of
    your overall cloud network and resources. Each of the servers and related services
    you provision will fit within a VPC. You can think of a VPC as your overall network.
    In your organization, you may have various routers, gateways, firewalls, virtual
    machines, printers, or other network-connected devices. Your organization’s network
    is essentially a VPC in AWS, a software version of a complete network.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟私有云** (**VPC**)：VPC是对你整个云网络和资源的高级抽象。你所配置的每一台服务器和相关服务都会被部署在VPC中。你可以把VPC看作是你整体的网络。在你的组织中，可能有各种路由器、网关、防火墙、虚拟机、打印机或其他网络连接设备。你组织的网络本质上就是AWS中的VPC，是一个完整网络的软硬件版本。'
- en: '**Elastic Compute Cloud** (**EC2**): EC2 is the service within AWS that your
    virtual machines will run in. Individual virtual machines within AWS are referred
    to as EC2 instances. You can think of this service as the AWS equivalent of VMware
    ESXi, Microsoft Hyper-V, Proxmox, or whatever virtual machine platform you’re
    more familiar with. EC2 instances, just like a virtual machine, have memory and
    CPU allocated to them and run an operating system. We’ll run Ubuntu in an EC2
    instance before the end of the chapter.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性计算云** (**EC2**)：EC2是AWS中运行虚拟机的服务。AWS中的独立虚拟机被称为EC2实例。你可以把这个服务看作是AWS版的VMware
    ESXi、Microsoft Hyper-V、Proxmox或你更熟悉的虚拟机平台。EC2实例就像虚拟机一样，具有分配的内存和CPU，并运行操作系统。在本章结束之前，我们将在EC2实例中运行Ubuntu。'
- en: '**Elastic Block Store** (**EBS**): As you learn more about AWS, you’ll notice
    that even the simplest component seems to have a marketing buzzword attached.
    EBS provides block storage, essentially the same type of storage we’ve been working
    with all along. So in a nutshell, an EBS volume is a hard disk. When you create
    an EC2 instance, the operating system for your server will run from an EBS volume,
    and you can set the size of the volume accordingly. We’ll work through this later
    in the chapter.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性块存储** (**EBS**)：随着你对AWS了解的深入，你会发现即使是最简单的组件，似乎也附加了一个营销术语。EBS提供块存储，本质上是我们一直在使用的相同类型的存储。所以简而言之，EBS卷就是硬盘。当你创建一个EC2实例时，服务器的操作系统将从EBS卷中运行，你可以相应地设置卷的大小。我们将在本章稍后详细讲解。'
- en: '**Elastic Load Balancer** (**ELB**): As you may be able to guess from the name,
    an ELB is the AWS equivalent of a load balancer and offers similar features. This
    allows you to have multiple EC2 instances serving your application, and you can
    create an ELB to route traffic between them. ELB is actually a feature of EC2
    and not its own service.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性负载均衡器** (**ELB**)：正如你从名称中可以猜到的，ELB是AWS的负载均衡器，相当于提供类似的功能。这使得你可以让多个EC2实例为你的应用提供服务，并且你可以创建一个ELB来在这些实例之间路由流量。ELB实际上是EC2的一个特性，而不是独立的服务。'
- en: '**Identity and Access Management** (**IAM**): IAM is the tool within AWS that
    you’ll use to create and manage user accounts, determine user permissions, and
    even create API keys that can be used to programmatically access and manage AWS.
    Basically, it’s your one-stop shop for all things related to user privileges,
    regardless of whether the “user” is a human or a script.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份与访问管理** (**IAM**)：IAM是AWS中的工具，用于创建和管理用户账户，确定用户权限，甚至创建API密钥，以便程序化访问和管理AWS。基本上，它是你处理与用户权限相关的一站式服务，无论“用户”是人类还是脚本。'
- en: '**Route 53**: Although we’re not going to cover Route 53 in this book, I recommend
    at least understanding what it is in case you need it in the future. If you do
    decide to utilize AWS in production, Route 53 will simplify the process of managing
    DNS entries and also registering new domain names. If your organization is a managed
    service provider, you may find yourself using this quite a bit.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Route 53**：虽然我们本书不会涉及Route 53，但我建议你至少了解它，以防未来需要。如果你决定在生产环境中使用AWS，Route 53将简化DNS条目的管理过程，并且还能注册新的域名。如果你的组织是一个托管服务提供商，你可能会经常使用这个服务。'
- en: '**Simple Storage Service** (**S3**): Amazon’s S3 service is another offering
    we’re not going to cover in this chapter, but it’s a good idea to know that it
    exists and what it’s for, in case you find a use for it later. S3 is actually
    a very popular service, and it provides **object storage**.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单存储服务** (**S3**)：亚马逊的S3服务是我们本章不会涉及的另一项服务，但了解它的存在以及它的用途是个好主意，以防你以后需要用到它。S3实际上是一个非常流行的服务，提供**对象存储**。'
- en: Object storage is a new type of storage that is different than a disk (virtual
    or physical) that you add to your server, format, and mount. While you can still
    mount S3 on your server, it doesn’t have a filesystem (such as ext4 or STON),
    nor does it understand permissions. It’s simply a name-object pair, where you
    store files, and they have a name. With S3, you create “buckets,” and each bucket
    can have files stored inside. Each bucket name must be unique. S3 is very useful
    if you want to make downloadable files available to your clients or store backup
    files.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对象存储是一种新的存储类型，区别于你添加到服务器上的磁盘（虚拟或物理），你需要格式化并挂载它。虽然你仍然可以将S3挂载到服务器上，但它没有文件系统（如ext4或STON），也不理解权限。它仅仅是一个名称-对象对，你在其中存储文件，并且每个文件都有一个名称。使用S3时，你创建“存储桶”，每个存储桶可以存储文件。每个存储桶的名称必须唯一。如果你想将可下载文件提供给客户或存储备份文件，S3非常有用。
- en: '**Elastic Kubernetes** **Service** (**EKS**): In the previous chapter, we covered
    Kubernetes and even set up our own cluster. AWS has its own Kubernetes solution,
    called **EKS**. Although we’re not going to cover it in this book, it’s worth
    considering if you want to continue to use Kubernetes and have your containers
    running in a managed service, rather than managing your own cluster. EKS combines
    Kubernetes with the flexibility of the AWS platform, so it’s a very useful service
    to consider.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性Kubernetes服务** (**EKS**)：在上一章中，我们介绍了Kubernetes，甚至设置了我们自己的集群。AWS有自己的Kubernetes解决方案，称为**EKS**。虽然本书不会涵盖它，但如果你想继续使用Kubernetes，并希望将容器运行在托管服务中，而不是管理自己的集群，这个服务是值得考虑的。EKS结合了Kubernetes与AWS平台的灵活性，因此它是一个非常有用的服务。'
- en: '**Security groups**: Access to many AWS resources from the public internet
    is disabled by default; security groups are used to determine what is able to
    access a resource within AWS, and you can allow or disallow access by IP address
    as well as port. With regard to EC2 instances, outbound access is allowed by default,
    but every port is blocked inbound. You can create a security group that allows
    specific IPs to access the instance, which increases security. We’ll see an example
    of this later.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全组**：默认情况下，来自公共互联网的许多AWS资源访问是禁用的；安全组用于确定什么可以访问AWS中的资源，你可以根据IP地址和端口来允许或拒绝访问。关于EC2实例，默认情况下允许出站访问，但每个端口都被阻止入站。你可以创建一个安全组，允许特定的IP访问实例，从而提高安全性。稍后我们会看到一个例子。'
- en: Now that we have some basic understanding out of the way, we can get started
    and build an application in the cloud, running on AWS.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了基本的了解，可以开始构建一个运行在AWS上的云应用程序了。
- en: Creating an AWS account
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建AWS账户
- en: As mentioned in the previous section, a VPC within AWS represents a high-level
    abstraction of your overall network. All of the resources that we create will
    run inside a VPC. Therefore, we’ll need to create a VPC first before we can create
    an EC2 instance and deploy Ubuntu.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 正如上一节所提到的，AWS中的VPC代表了你整体网络的高层次抽象。我们创建的所有资源都将运行在VPC内部。因此，我们需要首先创建VPC，才能创建EC2实例并部署Ubuntu。
- en: Before we can create a VPC though, we’ll need an AWS account. Before this chapter,
    I typically advised you to use whatever hardware you have available in order to
    create Ubuntu installations to work with the platform. This time, we’re going
    to utilize an actual cloud provider, which comes at a cost. While there are free
    components available for a limited time with a new account, it’s up to you, the
    reader, to keep track of billing. We’ll discuss costs in greater detail later
    in this chapter. But as a general rule of thumb for now, always use whatever the
    cheapest option is. If a free instance type is available, go with that. Of course,
    if you’re intending to deploy actual resources for production use within an organization,
    then you’ll want to choose whatever instance type is appropriate for the use case.
    For our purposes, we’re just learning the platform for the first time, so be sure
    to go with the lowest-cost resources available and delete everything when you’re
    done.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们创建VPC之前，我们需要一个AWS账户。在本章之前，我通常建议你使用手头可用的硬件来创建Ubuntu安装，以便与平台进行配合。这次，我们将使用一个实际的云服务提供商，虽然这会有一定费用。虽然新账户可以在有限时间内免费使用一些组件，但账单的管理由你——读者来负责。我们将在本章稍后部分详细讨论费用。但作为一个初步的指导原则，现在你应该始终选择最便宜的选项。如果有免费的实例类型可用，选择它。当然，如果你打算在组织中部署实际的资源进行生产使用，那么你需要根据使用案例选择合适的实例类型。对于我们而言，我们只是第一次学习这个平台，所以一定要选择最低成本的资源，完成后记得删除所有内容。
- en: That last point is especially important – the free tier is not unlimited, and
    if you forget to delete something, you might receive a bill at some point. What
    I recommend is to keep a running list of everything you create in AWS, so you
    have a list of things to delete if you don’t wish to continue using the platform.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一条尤为重要——免费套餐并不是无限的，如果你忘记删除某些东西，可能会在某个时候收到账单。我建议你保持一个记录，列出你在AWS中创建的所有内容，这样如果不打算继续使用平台时，你就可以有清单来删除这些内容。
- en: You should also remove any snapshots/storage volumes, or anything else that
    you end up creating. Better yet, if you aren’t going to use the AWS account in
    production, you can simply delete the account so that it doesn’t continue to bill
    you. If ever in doubt, be sure to consult the documentation for billing within
    AWS itself.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该删除任何快照/存储卷，或者你创建的其他任何东西。更好的做法是，如果你不打算在生产中使用AWS账户，你可以直接删除账户，以免它继续向你收费。如果有疑问，请务必查阅AWS内部关于账单的文档。
- en: Signing up for AWS
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册AWS账户
- en: Now it’s time for us to create our own AWS account. In this section (and in
    each of the remaining sections of this chapter) I’ll walk you through each step
    when it comes to navigating AWS. It’s important to keep in mind that the **AWS
    Management Console** that we’ll be navigating has a history of changing quite
    often. In fact, the console has changed no fewer than twice since the previous
    edition of this book was written, and that’s not even counting the fact that in
    the third edition, the interface changed in the middle of writing the previous
    version of this chapter. The screenshots and walkthrough are accurate as of the
    time this chapter has been written, but it’s always possible (and quite likely)
    that the interface will be updated *again* at some point. That said, if the screenshots
    or layout have changed, you should still be able to follow the instructions here
    since the verbiage generally doesn’t typically change, just the layout. With that
    said, let’s get started.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候创建我们自己的AWS账户了。在本节（以及本章剩余的各节中），我将带你逐步完成导航AWS的每个步骤。需要记住的是，我们将要使用的**AWS管理控制台**有时会发生频繁变化。事实上，自从本书上一版写成以来，控制台至少已经变动了两次，甚至不算在第三版时，界面就在写作本章之前发生过变化。这里的截图和操作步骤是截至本章编写时准确的，但界面可能会在某个时候再次更新，甚至很可能会更新。如果截图或布局发生了变化，你仍然可以按照这里的说明操作，因为用词通常不会变化，变化的只是布局。既然如此，让我们开始吧。
- en: 'To begin, navigate to [https://aws.amazon.com](https://aws.amazon.com) and
    you should see an orange button in the upper-right corner with the label **Create
    an AWS Account**. It’s possible that the layout of the page may change after publication,
    but you should see a button to create a new account somewhere on the page:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，访问[https://aws.amazon.com](https://aws.amazon.com)，你应该会在右上角看到一个橙色的按钮，上面标有**创建
    AWS 账户**。发布后页面的布局可能会有所变化，但你应该能在页面的某个位置看到创建新账户的按钮：
- en: '![](img/B18425_19_01.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_01.png)'
- en: 'Figure 19.1: The AWS main page'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.1：AWS 主页面
- en: 'When you click the button to create a new account, a form will appear asking
    you for basic information. An example of some of the fields you may be asked for
    is shown in *Figure 19.2*, though the exact information you may be asked for may
    vary. Fill out each field accordingly, then click **Continue**:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击按钮以创建新账户时，系统会弹出一个表单，要求你提供基本信息。你可能被要求填写的一些字段示例如*图 19.2*中所示，尽管实际要求提供的信息可能会有所不同。根据要求填写每个字段，然后点击**继续**：
- en: '![](img/B18425_19_02.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_02.png)'
- en: 'Figure 19.2: Signing up for a new AWS account'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.2：注册新的 AWS 账户
- en: 'After you click **Continue**, another screen will appear asking you to fill
    out additional fields, such as your full name, company name, address, and so on.
    This process will also include asking you to provide credit card details as well,
    so proceed through each screen and enter the required information. At the end
    of the process, you’ll see a selection where you can choose your support plan:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在点击**继续**后，系统会出现另一个页面，要求你填写更多信息，如全名、公司名称、地址等。这个过程还会要求你提供信用卡信息，所以请逐步完成每个页面并输入所需信息。完成整个过程后，你将看到一个选择框，在其中你可以选择你的支持计划：
- en: '![](img/B18425_19_03.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_03.png)'
- en: 'Figure 19.3: Choosing a support plan while signing up for an AWS account'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.3：在注册 AWS 账户时选择支持计划
- en: If you are asked to select a support plan during the process, choose the one
    that makes sense for your use case. If you’re going to be using AWS to create
    production instances for your organization, the Developer or Business plan may
    offer additional value to you. If you’re only going through the process to learn
    AWS and work through the examples in this chapter, choose the Basic plan.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在过程中系统要求你选择一个支持计划，请选择最适合你使用场景的计划。如果你打算使用 AWS 创建生产实例供你的组织使用，开发者或商业计划可能会为你提供额外的价值。如果你仅仅是为了学习
    AWS 并通过本章中的示例进行操作，请选择基础计划。
- en: 'Once you’ve finished the process of creating your new account, it may take
    some time before your new account is ready. When it is, you should receive an
    e-mail saying that it’s ready for use. After you do receive that e-mail, you’ll
    be able to log in. To do so, navigate to [https://aws.amazon.com](https://aws.amazon.com)
    and click the **Sign In to the Console** button, which will bring you to another
    page where you can type in your account login info:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成了创建新账户的过程，可能需要一些时间才能使你的新账户准备好。当账户准备好后，你应该会收到一封邮件，告知你可以开始使用。收到这封邮件后，你将能够登录。为此，访问[https://aws.amazon.com](https://aws.amazon.com)，然后点击**登录到控制台**按钮，这会将你带到另一个页面，在该页面你可以输入账户登录信息：
- en: '![](img/B18425_19_04.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_04.png)'
- en: 'Figure 19.4: Signing in as Root user'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.4：作为 Root 用户登录
- en: Here, you have a choice to log in as the root user or an IAM user. We haven’t
    created any IAM users yet, so we only have a root user at this point. The root
    user is accessed by signing in with the same e-mail address that you’ve provided
    during the sign-up process. Enter that e-mail address in the prompt, click **Next**,
    then enter your password on the next screen.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以选择以 root 用户或 IAM 用户身份登录。我们还没有创建任何 IAM 用户，所以此时只有 root 用户。root 用户通过使用你在注册过程中提供的相同电子邮件地址登录来访问。请输入该电子邮件地址并点击**下一步**，然后在下一个页面输入你的密码。
- en: 'If all goes well, you should be logged in and see the **AWS Management Console**:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你应该已经登录并看到**AWS 管理控制台**：
- en: '![](img/B18425_19_05.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_05.png)'
- en: 'Figure 19.5: The AWS Management Console main screen'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.5：AWS 管理控制台主界面
- en: Now that you have access to the management console, you can begin using AWS.
    Before we start creating cloud resources, we should implement some basic security
    to protect our account.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已访问到管理控制台，你可以开始使用 AWS。在我们开始创建云资源之前，我们应该实施一些基本的安全措施来保护我们的账户。
- en: Implementing basic user security
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施基本用户安全
- en: Before we continue any further, there are some very important security best
    practices we should employ regarding the ability to authenticate to our AWS account.
    Although it’s very likely that our new account was created as a test account for
    following along with examples in this chapter, we should make it a habit to always
    protect our AWS account, regardless of how important it actually is.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们需要采用一些非常重要的安全最佳实践，来确保能够安全地进行AWS账户身份验证。虽然我们新建的账户很可能是用来跟随本章示例进行测试的账户，但我们应该养成始终保护我们的AWS账户的习惯，无论它实际上有多重要。
- en: We can begin with protecting the root account, as it’s a common target for hackers.
    Specifically, we should enable two-factor authentication for this account. Doing
    so will make it much harder for an outside threat to access it, since they would
    need access to your second factor in addition to your password. Since we’re already
    logged in as the root user at this point, we can set this up immediately.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从保护根账户开始，因为它是黑客的常见攻击目标。具体来说，我们应该为该账户启用双因素身份验证。这样，外部威胁要访问该账户将变得更加困难，因为他们除了需要您的密码外，还需要获取您的第二个认证因素。由于我们此时已经以根用户身份登录，因此可以立即设置此功能。
- en: In the management console, you’ll see a search field near the top of the screen.
    If you already know the name of the service you would like to configure, you can
    begin typing its name in the search field, and if your query matches an available
    service, it will show it in the list. If you don’t know the name of the service
    you’d like to use, you can click on **Services** in the top-left corner of the
    console, to see a complete list of the services available.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在管理控制台中，您会在屏幕顶部看到一个搜索框。如果您已经知道要配置的服务名称，可以开始在搜索框中输入该名称，如果您的查询与可用服务匹配，它会显示在列表中。如果您不知道要使用的服务名称，可以点击控制台左上角的**服务**，以查看所有可用服务的完整列表。
- en: 'For setting up second-factor authentication, we will access the IAM service.
    You can start typing `IAM` into the search field, and it should show it as an
    available option. Go ahead and click on it:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置第二因素身份验证，我们将访问IAM服务。您可以开始在搜索框中输入`IAM`，它应该会显示为一个可用选项。点击它继续：
- en: '![](img/B18425_19_06.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_06.png)'
- en: 'Figure 19.6: Using search within the AWS Management Console to locate the IAM
    service'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.6：在AWS管理控制台中使用搜索功能定位IAM服务
- en: When the IAM dashboard appears, you may see a security alert that complains
    about the root user not having **Multi-Factor Authentication** (**MFA**) enabled.
    Although enabling this feature is optional, I recommend you enable it.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当IAM仪表板出现时，您可能会看到一个安全警告，提醒根用户未启用**多因素身份验证**（**MFA**）。虽然启用此功能是可选的，但我建议您启用它。
- en: 'MFA is critical for ensuring the security of any account that is important
    to your organization, especially an account for a cloud computing provider such
    as AWS. MFA will enhance the security of the account in terms of authentication,
    requiring an additional factor before a user will be able to access the account.
    The root account is the most critical account to protect in AWS, since it has
    full access to every available service. To enable MFA, click on the button that
    reads **Add MFA** (or similar verbiage if the layout on this page changes):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: MFA对于确保任何对您组织重要的账户的安全至关重要，尤其是像AWS这样的云计算提供商账户。MFA将增强账户的身份验证安全性，要求在用户能够访问账户之前提供额外的验证因素。根账户是AWS中最需要保护的账户，因为它对所有可用服务都有完全访问权限。要启用MFA，点击标有**添加MFA**的按钮（如果页面布局发生变化，文案可能会有所不同）：
- en: '![](img/B18425_19_07.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_07.png)'
- en: 'Figure 19.7: IAM dashboard, with an alert that MFA is recommended to be set
    up'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.7：IAM仪表板，显示推荐设置MFA的警报
- en: 'Next, click on **MFA** to expand it (if it isn’t already), and then click on
    the **Activate MFA** button:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，点击**MFA**展开它（如果尚未展开），然后点击**激活MFA**按钮：
- en: '![](img/B18425_19_08.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_08.png)'
- en: 'Figure 19.8: Setting up MFA (continued)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.8：设置MFA（续）
- en: 'The next screen will give you a choice of which type of device to use to facilitate
    MFA. The default (**Virtual MFA device**) is a good one to go with if you don’t
    have a physical hardware key, such as a YubiKey. If you have no other preference,
    choose the **Virtual MFA device** option and click **Continue**:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 下一屏将给您一个选择，可以选择使用哪种设备来辅助MFA。如果您没有物理硬件密钥，如YubiKey，默认选项（**虚拟MFA设备**）是一个不错的选择。如果您没有其他偏好，选择**虚拟MFA设备**选项并点击**继续**：
- en: '![](img/B18425_19_09.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_09.png)'
- en: 'Figure 19.9: Choosing a type of MFA device to set up'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.9：选择要设置的 MFA 设备类型
- en: To set up your virtual MFA device, you’ll need to download a second-factor application
    to serve this purpose. Google Authenticator is a popular choice here, but I recommend
    Authy instead. Both are perfectly acceptable, but Authy also features a desktop
    app you can use, as well as the ability to recover your account if your primary
    device is not accessible for any reason. Authy is compatible with Google Authenticator,
    so you can typically use it with services that offer a Google Authenticator option.
    To continue, reveal the QR code, scan it with your phone app, and then type in
    two subsequent values generated by the app.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置虚拟 MFA 设备，您需要下载一个第二因素认证应用程序来完成此操作。Google Authenticator 是一个流行的选择，但我推荐使用 Authy。两者都完全可接受，但
    Authy 还提供桌面应用程序，并且如果您的主设备由于某种原因无法访问，还可以恢复您的账户。Authy 与 Google Authenticator 兼容，因此通常可以与提供
    Google Authenticator 选项的服务一起使用。要继续，请显示二维码，用手机应用扫描它，然后输入应用生成的两个随后的值。
- en: 'Finally, click **Assign MFA** to finalize the process:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，点击**分配 MFA**以完成过程：
- en: '![](img/B18425_19_10.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_10.png)'
- en: 'Figure 19.10: Setting up the MFA device'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.10：设置 MFA 设备
- en: Now that we have two-factor authentication enabled for our root account, we
    should stop using that account immediately. This is actually a best practice when
    it comes to AWS; it’s recommended that you create individual accounts for the
    individuals that will work on your AWS account, giving them the permissions they
    need to perform the tasks they need to complete. We’ll discuss the **principle
    of least privilege** in *Chapter 21*, *Securing Your Server*, but it doesn’t hurt
    to start thinking about the concept now. For now, what we’ll do is create an administrator
    account for ourselves that we can use in place of the root account. We can always
    use the new account to create additional users if we need to do so.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为根账户启用了双因素身份验证，我们应该立即停止使用该账户。这实际上是 AWS 的最佳实践；建议为将在您的 AWS 账户上工作的人创建个人账户，给予他们完成所需任务的权限。我们将在*第
    21 章*《保护您的服务器》中讨论**最小权限原则**，但现在开始考虑这一概念也无妨。现在，我们要做的是为自己创建一个管理员账户，用来替代根账户。如果需要，我们可以随时使用新账户创建其他用户。
- en: 'To create a new administrator account, we will again utilize the IAM console.
    Once there, you’ll see a **Users** link on the left, and then you can click the
    blue **Add users** button to begin the process:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的管理员账户，我们将再次使用 IAM 控制台。在那里，您会看到左侧有一个**用户**链接，然后可以点击蓝色的**添加用户**按钮开始该过程：
- en: '![](img/B18425_19_11.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_11.png)'
- en: 'Figure 19.11: Setting up a new administrative user for AWS'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.11：为 AWS 设置新管理员用户
- en: 'The next screen will have you type the desired username, as well as setting
    **Access Type**. For the username, you can name the user whatever you’d like.
    For **Access Type**, we’ll choose **AWS Management Console access**. Click **Next:
    Permissions** to continue:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 下一屏幕将要求您输入所需的用户名，并设置**访问类型**。对于用户名，您可以根据需要给用户命名。对于**访问类型**，我们将选择**AWS 管理控制台访问**。点击**下一步：权限**继续：
- en: '![](img/B18425_19_12.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_12.png)'
- en: 'Figure 19.12: Setting up a new administrative user for AWS'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.12：为 AWS 设置新管理员用户
- en: 'Next, we will set up the appropriate permissions for our user. The third icon,
    labeled **Attach existing policies directly**, is the first selection we’ll make
    here, and then below that we’ll place a mark next to the check box for **Administrative
    Access**, and then we’ll click **Next: Tags**:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为我们的用户设置适当的权限。第三个图标，标记为**直接附加现有策略**，是我们在这里做出的第一个选择，然后在下面，我们会在**管理员访问**的复选框旁边打勾，然后点击**下一步：标签**：
- en: '![](img/B18425_19_13.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_13.png)'
- en: 'Figure 19.13: Setting up a new administrative user for AWS (continued)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.13：为 AWS 设置新管理员用户（续）
- en: 'We can skip the tags screen by leaving the fields blank and clicking **Next:
    Review**.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将字段留空并点击**下一步：审查**来跳过标签屏幕。
- en: 'The next screen will provide us with an overview, and if everything appears
    to be correct here, we can click **Create user**:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 下一屏幕将为我们提供一个概览，如果一切看起来正确，我们可以点击**创建用户**：
- en: '![](img/B18425_19_14.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_14.png)'
- en: 'Figure 19.14: Setting up a new administrative user for AWS (continued)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.14：为 AWS 设置新管理员用户（续）
- en: 'Finally, we’ll see a confirmation message that our user was created. If you
    chose to have a randomly generated password during the process, you should also
    see a button there to retrieve it:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们会看到一条确认信息，显示我们的用户已创建。如果在过程中选择了随机生成密码，你也会看到一个按钮，用于检索该密码：
- en: '![](img/B18425_19_15.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_15.png)'
- en: 'Figure 19.15: Setting up a new administrative user for AWS (continued)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.15：为 AWS 设置新管理员用户（续）
- en: You can now log in to the AWS Management Console with the new user and the password
    that was provided. You will also need the **account ID**, which is visible within
    the URL on this screen (it’s the number right after `https://`). To make it easier,
    you can click on the URL that’s shown in order to have the account ID autofilled.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以使用新用户和提供的密码登录 AWS 管理控制台。你还需要 **账户 ID**，该 ID 可在此页面的 URL 中找到（它位于 `https://`
    后面的数字）。为了方便起见，你可以点击显示的 URL 来自动填充账户 ID。
- en: Going forward, I recommend that you use the new user we’ve created for managing
    the AWS account, as it’s a good practice to not use the root account unless you
    absolutely have to. In addition, I recommend you follow the procedure to set up
    MFA as we did earlier, but this time with the new user.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 未来，我建议你使用我们为管理 AWS 账户创建的新用户，因为除非万不得已，否则不应使用 root 账户。此外，我还建议你按照我们之前的步骤为新用户设置
    MFA（多因素身份验证）。
- en: Choosing a region
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择区域
- en: As discussed earlier, a VPC within AWS is the high-level abstraction of your
    overall network. You can have multiple VPCs, which is similar to the concept of
    managing several physical networks. In fact, we already have VPCs created for
    us in our account, so we won’t need to create one. In the future, keep in mind
    that creating additional VPCs is an option, should you ever need to have more
    than one. In our account, we have a default VPC in each **Region**, so choosing
    which one to utilize comes down to which region is most appropriate for our use.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，AWS 中的 VPC 是你整体网络的高级抽象。你可以拥有多个 VPC，这类似于管理多个物理网络的概念。实际上，我们的账户中已经为我们创建了 VPC，因此无需再创建。在未来，记住，如果你需要多个
    VPC，可以选择创建额外的 VPC。在我们的账户中，每个 **区域** 都有一个默认的 VPC，所以选择使用哪个 VPC 取决于哪个区域最适合我们的使用需求。
- en: For production use, you’ll want to create instances in AWS that are as close
    to your customer as you can get. For example, let’s say that the customers that
    your organization markets to are primarily located in the Eastern United States.
    There’s a region available within AWS that is available that’s labeled **US East**,
    so that would be an obvious choice in that scenario. You’re not limited to regions
    within the USA though; there are regions available all over the world, such as
    in Germany, China, and Canada (among others). In a nutshell, you’ll want to create
    resources as close to your customers as possible. If you don’t have a preference,
    you can choose to utilize whichever region is closer to you.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 对于生产环境使用，你需要在 AWS 中创建离客户尽可能近的实例。例如，假设你的组织的客户主要位于美国东部，那么 AWS 中有一个被标记为 **US East**
    的区域，在这种情况下它将是一个明显的选择。不过，你不仅仅局限于美国的区域；在全球范围内也有许多区域可供选择，比如德国、中国和加拿大（等其他地区）。简而言之，你应该尽量在离客户最近的地方创建资源。如果你没有特别偏好，可以选择离你最近的区域。
- en: Although it’s beyond the scope of this book, AWS offers a service called **CloudFront**
    that acts as a **Content Delivery Network** (**CDN**) that you can use to make
    your resources available in various edge locations that users can be routed to
    in order to ensure they’re retrieving your content from a location closest to
    where they are geographically. For organizations that produce media content, this
    is especially valuable. If this is something that might benefit you, I recommend
    reading more about CloudFront.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然超出了本书的范围，但 AWS 提供了一项名为 **CloudFront** 的服务，它充当 **内容分发网络**（**CDN**），你可以使用它将资源分发到多个边缘位置，从而确保用户从最接近他们地理位置的地方获取内容。对于制作媒体内容的组织来说，这尤其有价值。如果这对你有帮助，建议你深入了解
    CloudFront。
- en: 'In addition, there are often multiple **Availability Zones** within various
    regions, which allow you to get even closer to your target audience. For example,
    when it comes to the US East region, there are two availability zones inside it,
    one in Virginia as well as another in Ohio. Availability zones not only give us
    the ability to get another step closer to our customers but also offer us additional
    options for redundancy. For example, if one availability zone goes down for whatever
    reason, you can route your customers to another. Availability zones have a specific
    naming syntax that consists of both the name of the region as well as the availability
    zone within that region. Using the Eastern United States as an example again,
    the two availability zones there are labeled **us-east-1** for Virginia and **us-east-2**
    for Ohio. Not all regions will have multiple availability zones, though. Canada
    currently only has one region with one availability zone: **ca-central-1**.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，各个区域通常会有多个**可用区**，这可以让你更接近你的目标受众。例如，关于美国东部区域，它包含两个可用区，一个位于弗吉尼亚，另一个位于俄亥俄。可用区不仅能让我们更接近客户，还为我们提供了更多的冗余选项。例如，如果一个可用区由于某种原因发生故障，你可以将客户流量引导到另一个可用区。可用区有特定的命名规则，包括区域名称和该区域内的可用区名称。以美国东部为例，那里有两个可用区，分别标记为**us-east-1**（弗吉尼亚）和**us-east-2**（俄亥俄）。不过，并非所有区域都有多个可用区。目前，加拿大只有一个区域和一个可用区：**ca-central-1**。
- en: In addition to availability zones, there are also **local zones**, which are
    intended to allow you to set up resources even closer to your customers than availability
    zones are able to get. Local zones are a great choice if your application is sensitive
    to network latency, such as running a server for an online game. We won’t go over
    local zones in this book at all, because this is a very new offering from AWS,
    and there are only two of them in existence as of the time this book is being
    prepared for publishing. Amazon intends to add additional local zones in the future,
    so there may be more of them available by the time you’re reading this. If your
    organization offers a service that is sensitive to network latency, this may be
    a feature you’ll want to keep up to date on as they roll it out to more locations.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 除了可用区外，还有**本地区**，本地区旨在让你能够将资源设置得比可用区更接近你的客户。如果你的应用程序对网络延迟非常敏感，比如运行一个在线游戏的服务器，本地区是一个很好的选择。我们在本书中不会详细讨论本地区，因为这是AWS的一个全新产品，截至本书出版准备时，只有两个本地区。亚马逊计划在未来增加更多的本地区，因此到你阅读本书时，可能会有更多的本地区可用。如果你的组织提供对网络延迟敏感的服务，这是一个你可能需要关注的功能，随着它向更多地区推广。
- en: For now, the only consideration is which region will benefit your customers
    by being as close to them as possible. When it comes to following along with the
    examples in this book though, choosing a region closest to you geographically
    is a good idea.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，唯一需要考虑的因素是哪个区域能为你的客户提供尽可能接近的服务。不过，在跟随本书示例操作时，选择离你地理位置最近的区域是个不错的选择。
- en: Now that we’ve selected our region, how about we create an actual Ubuntu instance
    in the cloud? That’s exactly what we’ll do in the next section.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经选择了区域，接下来如何在云端创建一个实际的 Ubuntu 实例呢？这正是我们在下一节要做的事情。
- en: Deploying Ubuntu as an AWS EC2 instance
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署 Ubuntu 作为 AWS EC2 实例
- en: 'With a great deal of discussion out of the way, it’s time to create an actual
    Ubuntu deployment in the cloud. This will allow us to see the AWS service in action
    and give us some working experience with the EC2 service. This requires two individual
    steps: the first to create a required IAM role and the second to create our instance.
    Let’s first make sure we understand the requirements of the IAM role, then we’ll
    set up the role and then create our new instance.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在大量讨论之后，是时候在云端创建一个实际的 Ubuntu 部署了。这将使我们能够看到 AWS 服务的实际操作，并为我们提供一些 EC2 服务的实际经验。这需要两个独立的步骤：第一个是创建所需的
    IAM 角色，第二个是创建我们的实例。我们先确保理解 IAM 角色的要求，然后设置角色并创建我们的新实例。
- en: Setting up an IAM role for Session Manager
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为 Session Manager 设置 IAM 角色
- en: '**Session Manager** is a service within AWS that we can use to access a command
    prompt for our instance. It’s actually part of **Systems Manager** and not its
    own service. If you want to access Session Manager, you will need to search for
    Systems Manager, and you’ll find Session Manager as a service underneath that.
    You’ll see this shortly.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**会话管理器** 是 AWS 中的一项服务，我们可以用它来访问实例的命令提示符。它实际上是 **系统管理器**（Systems Manager）的一部分，而不是独立的服务。如果你想访问会话管理器，你需要搜索系统管理器，你会在其下找到会话管理器作为一项服务。你很快就会看到这一点。'
- en: Why should we use Session Manager? Just like with any other Linux server, we
    can still use OpenSSH to connect to the EC2 instance we’ll be creating, just as
    we have many times while working with non-AWS instances throughout this book.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们要使用会话管理器？就像使用任何其他 Linux 服务器一样，我们仍然可以使用 OpenSSH 连接到我们即将创建的 EC2 实例，就像在本书中处理非
    AWS 实例时做的那样。
- en: There’s nothing wrong with using OpenSSH; with the right settings it can be
    a very secure option. In fact, we will explore methods of better securing it in
    *Chapter 21*, *Securing Your Server*. With AWS, we can use Session Manager as
    an alternative to OpenSSH, and it’s a worthwhile alternative to learn that offers
    additional security in that its backend security is not something we have to manage
    ourselves. In addition, we can control access to it through the AWS console as
    well.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 OpenSSH 是没有问题的；在正确的设置下，它可以是一个非常安全的选择。实际上，我们将在 *第 21 章*，*保护你的服务器* 中探索更好地保护它的方法。对于
    AWS，我们可以使用会话管理器作为 OpenSSH 的替代方案，这个值得学习的替代方案提供了额外的安全性，因为其后台安全性不需要我们自己管理。此外，我们还可以通过
    AWS 控制台控制对它的访问。
- en: By default, Session Manager is not accessible at all. It requires a specific
    package to be installed within Ubuntu Server for it to work, and it also requires
    specific permissions to be enabled. The required package for Ubuntu is preinstalled
    by default, so the first requirement will be automatically taken care of for us
    immediately when we create our instance.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，会话管理器是完全无法访问的。它需要在 Ubuntu 服务器中安装特定的包才能工作，并且还需要启用特定的权限。Ubuntu 的所需软件包默认已预安装，因此第一个要求在我们创建实例时会立即自动处理。
- en: For the second requirement of adding permissions, we’ll need to create an IAM
    role to allow the EC2 instance we’re about to create to communicate with the Session
    Manager service. When I mentioned earlier that Session Manager isn’t accessible
    by default, this is why—it’s missing the permissions needed until we add them.
    To add the required permissions, we’ll access the IAM service within the AWS console,
    the very same one that we used earlier to create a user account for ourselves.
    IAM itself has many tricks up its sleeves, more than just simply allowing us to
    create users. It also allows us to create **IAM roles**, which give us the ability
    to add permissions to entire objects. For example, we can create a role with the
    permissions that are required, and then we can attach that role to any EC2 instance
    to immediately give it the ability to be connected to by Session Manager.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 对于添加权限的第二个要求，我们需要创建一个 IAM 角色，以便我们即将创建的 EC2 实例能够与会话管理器服务进行通信。我之前提到过会话管理器默认是无法访问的，这就是原因——它缺少所需的权限，直到我们添加它们。为了添加所需的权限，我们将访问
    AWS 控制台中的 IAM 服务，这与我们之前创建用户帐户时使用的相同。IAM 本身有许多技巧，不仅仅是允许我们创建用户。它还允许我们创建 **IAM 角色**，这使我们能够为整个对象添加权限。例如，我们可以创建一个具有所需权限的角色，然后将该角色附加到任何
    EC2 实例上，以立即使其能够通过会话管理器进行连接。
- en: Let’s get started and set up the required IAM role for Session Manager. Return
    to the IAM section of the AWS console that we’ve worked with a few times now,
    and we’ll create the required role.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始设置会话管理器所需的 IAM 角色。返回到我们已经操作过几次的 AWS 控制台中的 IAM 部分，我们将创建所需的角色。
- en: 'In the IAM menu on the left side of the window, click on **Roles**, and then
    click on the blue button labeled **Create role**:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在窗口左侧的 IAM 菜单中，点击 **角色**，然后点击标有 **创建角色** 的蓝色按钮：
- en: '![](img/B18425_19_16.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_16.png)'
- en: 'Figure 19.16: Creating an IAM role to enable Session Manager'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.16：创建一个 IAM 角色以启用会话管理器
- en: 'On the next screen, make sure **AWS service** is selected, and in the menu
    below that, choose **EC2** as the service. Click **Next** to continue along:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，确保选择 **AWS 服务**，然后在下面的菜单中选择 **EC2** 作为服务。点击 **下一步** 继续：
- en: '![](img/B18425_19_17.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_17.png)'
- en: 'Figure 19.17: Creating an IAM role to enable Session Manager (continued)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.17：创建一个 IAM 角色以启用会话管理器（续）
- en: Next, we are able to attach policies to our role. In the search field that appears,
    we can type a keyword to narrow down the list, and then click on a checkbox next
    to a policy we wish to attach to our role. A full overview of all of the built-in
    policies and what they’re for is beyond our scope, but as a short summary, each
    service within AWS has pre-built policies that can be attached to a role, which
    allows access to various features. Specific to our needs, we will add the **AmazonSSMFullAccess**
    policy to the role we’re creating.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以将策略附加到我们的角色。在出现的搜索框中，我们可以输入一个关键词来缩小列表，然后点击我们希望附加到角色上的策略旁边的复选框。对于所有内置策略的全面概述以及它们的用途超出了我们的范围，但简要来说，AWS
    中的每项服务都有预构建的策略，可以附加到角色上，从而访问各种功能。针对我们的需求，我们将把**AmazonSSMFullAccess**策略添加到我们正在创建的角色中。
- en: 'The purpose of this will become clearer when we create our EC2 instance, so
    for now, click **Next** to continue on:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的目的将在我们创建 EC2 实例时变得更加清晰，所以现在，点击**下一步**继续：
- en: '![](img/B18425_19_18.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_18.png)'
- en: 'Figure 19.18: Attaching the AmazonSSMFullAccess policy to our role'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.18：将 AmazonSSMFullAccess 策略附加到我们的角色
- en: 'The next screen that will appear will give us the ability to add one or more
    tags. We’ll skip this for now, but you can feel free to add any tags you’d like
    here. Tags allow you to attach information to a resource and aren’t limited to
    IAM roles. You can add any descriptive information you feel is pertinent, if you
    wish. Tags are simply **key: value** pairs, so there’s no specific naming scheme
    to follow here. Add tags if you wish to do so, and when you’re finished with this
    screen click **Next: Review**.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来出现的屏幕将让我们有机会添加一个或多个标签。我们暂时跳过这一部分，但你可以在这里自由添加任何你想要的标签。标签可以让你为资源附加信息，且不限于 IAM
    角色。你可以根据需要添加任何你认为相关的描述性信息。标签仅仅是**键：值**对，所以这里没有特定的命名规则。如果你希望添加标签，可以添加，完成后点击**下一步：审核**。
- en: 'The final screen will give us a review of the settings we’ve chosen so far,
    as well as an option to name the role, and add a description if we wish to do
    so. Although it’s optional, I recommend giving the role a name, to make it easier
    to identify later. When you’re finished, click **Create role**:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的屏幕会让我们回顾到目前为止选择的设置，并提供一个选项来为角色命名，若需要，也可以添加描述。虽然这不是必须的，但我建议为角色命名，以便日后更容易识别。当你完成后，点击**创建角色**：
- en: '![](img/B18425_19_19.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_19.png)'
- en: 'Figure 19.19: Adding a name and description to our role'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.19：为我们的角色添加名称和描述
- en: When it comes to setting up our IAM role, we’re all set—the role has been created
    and we can go ahead and use it. Next, it’s time to create our Ubuntu instance.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到设置 IAM 角色时，我们已经准备好——角色已创建，我们可以继续使用它。接下来，是时候创建我们的 Ubuntu 实例了。
- en: Creating an Ubuntu Server instance in AWS
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 AWS 中创建 Ubuntu 服务器实例
- en: 'Now it’s time to see our work come together and create our Ubuntu instance.
    In the AWS console, we should first access the EC2 service to get started. You
    can easily find any service by typing its name into the search box within the
    console; so if you start typing EC2 into that field, you should see **EC2** on
    the list. After you click on that, click on **Instances** on the left side of
    the screen. After doing that, you’ll see a screen with a button labeled **Launch
    instances**:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候看看我们的工作成果，并创建我们的 Ubuntu 实例了。在 AWS 控制台中，我们首先应该访问 EC2 服务以开始。你可以通过在控制台的搜索框中输入服务名称来轻松找到任何服务；所以如果你开始输入
    EC2，应该会在列表中看到**EC2**。点击它后，点击屏幕左侧的**实例**。这样做之后，你会看到一个屏幕，上面有一个标有**启动实例**的按钮：
- en: '![](img/B18425_19_20.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_20.png)'
- en: 'Figure 19.20: The main window of the EC2 service'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.20：EC2 服务的主窗口
- en: 'Normally, the **Instances** section of the EC2 console will show us a list
    of all of our server instances, but unless you’ve read ahead, we don’t have any
    yet so the window is blank. When you click on **Launch instances**, you’ll see
    various operating systems in the list. But for our purposes, Ubuntu is shown in
    the **Quick Start** section, so we’ll select that:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，EC2 控制台中的**实例**部分会显示所有服务器实例的列表，但除非你已经提前阅读过，否则我们目前还没有任何实例，所以这个窗口是空白的。当你点击**启动实例**时，你会在列表中看到各种操作系统。但为了我们的目的，Ubuntu
    显示在**快速开始**部分，所以我们选择它：
- en: '![](img/B18425_19_21.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_21.png)'
- en: 'Figure 19.21: The Ubuntu option for EC2'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.21：EC2 的 Ubuntu 选项
- en: 'Further down, make sure that **t2.micro** is selected, which should show the
    verbiage **Free tier eligible** alongside it. That’s the instance type that we’ll
    want to use:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在下方，确保选择了**t2.micro**，旁边应该会显示**免费套餐适用**。这就是我们想要使用的实例类型：
- en: '![](img/B18425_19_22.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_22.png)'
- en: 'Figure 19.22: Choosing an instance type'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.22：选择实例类型
- en: On the **Choose an Instance Type** screen, there will be quite a few instance
    types from which to choose. I selected the **t2.micro** instance type, and I recommend
    you do the same. It’s eligible for the free tier, which is a special tier you’ll
    have access to within the first 12 months of the age of the account. You most
    likely wouldn’t choose this instance type for a production server, as it will
    be quite slow—it only has 1 CPU and 1 GiB of memory. And it’s a burstable instance
    type, which means the speed fluctuates based on usage. It’s able to burst to take
    care of busy workloads, but its ability to do so depends on CPU credits that it
    earns in a particular time. A full explanation is beyond the scope of this chapter,
    but if you’re going to use AWS in production, it’s a good idea to read about the
    various instance types available. Although you don’t see it in the screenshot,
    you should also see the cost on this page as well. But again, we’ll utilize the
    free tier for now.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在**选择实例类型**页面上，会有许多实例类型供您选择。我选择了**t2.micro**实例类型，建议您也选择这个类型。它符合免费套餐的条件，这是您在账户创建后的前
    12 个月内可以访问的一个特别套餐。对于生产服务器来说，您很可能不会选择这个实例类型，因为它会非常慢——它只有 1 个 CPU 和 1 GiB 的内存。而且它是一个可突发的实例类型，这意味着其速度会根据使用情况波动。它能够在繁忙的工作负载下进行突发处理，但它的能力取决于它在特定时间内获得的
    CPU 积分。对于这个章节来说，详细的解释超出了范围，但如果您打算在生产环境中使用 AWS，建议您了解各种可用的实例类型。尽管截图中没有显示，您在此页面上也应该能看到费用。但我们现在仍将利用免费套餐。
- en: 'Further down the page, you’ll generate a new key pair, assuming you don’t have
    one already. This will be used for connecting to the instance via SSH. To generate
    a new key, click **Create new key pair**:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面下方，您将生成一个新的密钥对，假设您之前还没有。此密钥将用于通过 SSH 连接到实例。要生成新的密钥，点击**创建新密钥对**：
- en: '![](img/B18425_19_23.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_23.png)'
- en: 'Figure 19.23: Key pair settings during instance creation'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.23：实例创建过程中密钥对设置
- en: 'The next screen that appears will allow us to configure the key, such as setting
    encryption options. For our purposes, we can leave the defaults as is after giving
    the key a name, and then we can click **Create key pair**:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来出现的页面将允许我们配置密钥，例如设置加密选项。为了我们的目的，我们可以在给密钥命名后保留默认设置，然后点击**创建密钥对**：
- en: '![](img/B18425_19_24.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_24.png)'
- en: 'Figure 19.24: Customizing our SSH key'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.24：自定义我们的 SSH 密钥
- en: 'The previous step will trigger your browser to download the SSH key that you’ve
    generated. Be sure to keep it in a safe place. You can use the key you’ve just
    downloaded to connect to your instance via OpenSSH with a command similar to the
    following:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 上一步将触发浏览器下载您生成的 SSH 密钥。请务必将其保存在安全的地方。您可以使用刚刚下载的密钥通过 OpenSSH 连接到实例，命令类似于以下内容：
- en: '[PRE0]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For me, if I add the path of my key as well as the public IP address listed
    for my instance, the command becomes this:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 对我而言，如果我添加我的密钥路径以及实例列出的公共 IP 地址，那么命令将变成这样：
- en: '[PRE1]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: From here, managing the server is just a matter of interacting with its shell
    and entering commands.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，管理服务器只是与其 Shell 进行交互并输入命令的问题。
- en: 'But anyway, I’m getting ahead of myself. After you safeguard your key, we can
    move on to the next section by scrolling down. Network settings are what we’ll
    work on next:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，算了，我有点急于表达。在您保护好密钥之后，我们可以通过向下滚动继续到下一部分。接下来我们将处理网络设置：
- en: '![](img/B18425_19_25.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_25.png)'
- en: 'Figure 19.25: Setting options for our new EC2 instance'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.25：为我们的新 EC2 实例设置选项
- en: The first consideration on this screen is where we’ll allow OpenSSH connections
    from. The default option, `0.0.0.0/0`, allows connections from anywhere (and is
    even labeled as such). As we’ll discuss in *Chapter 21*, *Securing Your Server*,
    allowing SSH connections publicly is a bad idea, since outside threat actors might
    try to use that as a means to access the server. With the instance we’re creating
    right now, we can make a case for allowing connections from anywhere, since it’s
    a test instance for the purposes of learning (and we’ll be deleting the instance
    before the close of the chapter). However, it might be a better idea to get into
    the habit of restricting access to OpenSSH to specific IP addresses. To do that,
    you can choose the option **My IP** from the dropdown, which will restrict access
    to OpenSSH to your public IP address.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 此屏幕上的第一个考虑是我们将允许从哪些位置进行 OpenSSH 连接。默认选项 `0.0.0.0/0` 允许从任何地方进行连接（并且甚至有相应标签）。正如我们在*第
    21 章*《保护您的服务器》中将要讨论的，公开允许 SSH 连接是一件糟糕的事，因为外部威胁者可能会尝试利用这一点来访问服务器。对于我们现在创建的实例，我们可以主张允许来自任何地方的连接，因为这是一个用于学习的测试实例（并且我们将在本章结束前删除该实例）。然而，养成将
    OpenSSH 访问限制为特定 IP 地址的习惯可能是一个更好的选择。为此，您可以从下拉菜单中选择**我的 IP**选项，这将把 OpenSSH 访问限制为您的公共
    IP 地址。
- en: If you do choose to restrict access, keep in mind that unless your public IP
    is static, it can change at any time. When it does, you’ll lose access to your
    EC2 instances via OpenSSH. You can regain access by updating the security group
    for the instance to include your new IP address, but that inconvenience is a small
    price to pay for added security benefit.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择限制访问，请记住，除非您的公共 IP 是静态的，否则它可能会随时更改。当它更改时，您将无法通过 OpenSSH 访问您的 EC2 实例。您可以通过更新实例的安全组，包含您的新
    IP 地址来恢复访问，但这种不便是为增加安全性所付出的微小代价。
- en: 'Continuing in that same section, we have an option to allow traffic in addition
    to OpenSSH:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一部分中，我们可以选择允许 OpenSSH 之外的流量：
- en: '![](img/B18425_19_26.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_26.png)'
- en: 'Figure 19.26: Network settings while creating an EC2 instance on AWS'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.26：在 AWS 上创建 EC2 实例时的网络设置
- en: The other options, **HTTPS** and **HTTP** respectively, are essential if you’re
    planning on setting up a website on the instance. It’s very common to restrict
    OpenSSH on a web server, while at the same time allowing full access to ports
    `80` and `443` from the public `internet`. The reason for this is, OpenSSH gives
    you access to manage the server, so we definitely wouldn’t want that open to the
    public. When it comes to a website, we’ll most likely want the general public
    to be able to access it, which is why we allow those options. You should only
    check the latter two boxes in the situation where you’re actually planning on
    setting up a web server. For our needs, we should allow these boxes, since we
    will be installing Apache later.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 另外的选项，**HTTPS** 和 **HTTP**，如果您计划在实例上设置网站，至关重要。如果您在 Web 服务器上使用 OpenSSH，通常会限制它的访问，同时允许公共`internet`对端口
    `80` 和 `443` 进行完全访问。原因是，OpenSSH 给您提供了管理服务器的权限，因此我们肯定不希望公开该访问权限。对于网站，我们很可能希望公众能够访问它，这就是为什么我们允许这两个选项的原因。只有在您确实计划设置
    Web 服务器的情况下，才应该勾选这两个选项。对于我们的需求，我们应该允许这些选项，因为稍后我们将安装 Apache。
- en: 'Next, we’ll configure the **storage** for our instance:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为实例配置**存储**：
- en: '![](img/B18425_19_27.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_27.png)'
- en: 'Figure 19.27: Storage options while creating an EC2 instance'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.27：创建 EC2 实例时的存储选项
- en: By default, your EC2 instance will be set up with 8 GiB of storage space. As
    indicated in the highlighted message on the screen, you can get up to 30 GB of
    EBS storage space as part of the free tier, if you’re eligible. For that reason,
    you can consider setting this higher. You can also add additional storage volumes
    to the instance, which might help if you wanted to segregate storage between block
    storage devices. We shouldn’t need that for our use case in this chapter.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，您的 EC2 实例将配置为 8 GiB 的存储空间。如屏幕上高亮显示的消息所示，如果您符合条件，您可以在免费套餐中获得最多 30 GB 的
    EBS 存储空间。因此，您可以考虑将此存储空间设置得更高。您还可以向实例添加额外的存储卷，这在您希望在块存储设备之间划分存储时会有所帮助。在本章的使用案例中，我们不需要这么做。
- en: 'Below that, the final section on this screen allows you to configure **Advanced
    details**. There are quite a few extra options here, but we’ll be ignoring all
    but one of them. At the very bottom, there’s a large text box labeled **User data**.
    This is the only option within the advanced details section we’ll change:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在该部分下方，屏幕的最后一部分允许你配置**高级详细信息**。这里有相当多的额外选项，但我们只会忽略其中除了一个的所有选项。在最底部，有一个大文本框，标有**用户数据**。这是我们唯一会更改的高级详细信息选项：
- en: '![](img/B18425_19_28.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_28.png)'
- en: 'Figure 19.28: Adding user data for our EC2 instance'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.28：为我们的 EC2 实例添加用户数据
- en: The **User data** section is often overlooked, but it’s *incredibly* useful.
    But what exactly is this for, and what does it do? If I didn’t know any better
    myself, I’d probably assume that this is where you’d add information that pertains
    to your users. But that’s not what it’s for. What**User data**allows you to do
    is add a series of commands, or even a full script, that you’d like to have executed
    as the instance is created.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户数据**部分常常被忽视，但它*非常*有用。那么它到底是做什么的呢？如果我自己不太了解的话，我可能会认为这里是添加与用户相关的信息。但事实并非如此。**用户数据**允许你添加一系列命令，甚至是一个完整的脚本，在实例创建时自动执行。'
- en: Already, you can think of any command you might run, or configuration you might
    tweak, any time you set up a server. Instead of manually executing setup commands
    after the instance is online, you can simplify this quite a bit and have much
    of that done automatically before you even log in for the first time.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以想到，在设置服务器时，任何你可能执行的命令或调整的配置。与其在实例上线后手动执行设置命令，不如简化这个过程，在你第一次登录之前就能自动完成大部分工作。
- en: 'In my case, I’ve added the following code to the **User data** field:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的例子中，我已将以下代码添加到**用户数据**字段中：
- en: '[PRE2]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you think the code that I’ve added resembles a Bash script, then you’re
    correct—that’s exactly what it is. I added four lines of Bash statements to the
    **User data** field, to have some commands run automatically. The code should
    be relatively straightforward: I have it set up to update the repository index,
    then perform a full system upgrade.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认为我添加的代码像是一个 Bash 脚本，那么你是对的——这正是它的用途。我在**用户数据**字段中添加了四行 Bash 语句，以便自动执行一些命令。代码应该是相对简单的：我设置它先更新存储库索引，然后执行完整的系统升级。
- en: This is important; we always want our servers to start with the latest patches
    available. As a proof of concept, I added a statement to install Apache. Notice
    that I included the `-y` option to all of the `apt` commands. This automatically
    responds “yes” to any question `apt` may ask, since we don’t have a display hooked
    up to this server and are unable to answer questions ourselves. Without that option,
    the user data will fail to apply.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这很重要；我们始终希望我们的服务器以最新的补丁启动。作为概念验证，我添加了一条安装 Apache 的命令。请注意，我在所有 `apt` 命令中都加入了
    `-y` 选项。这会自动对 `apt` 可能提出的任何问题回答“是”，因为我们没有显示器连接到这台服务器，无法自己回答问题。如果没有这个选项，用户数据将无法应用。
- en: Anyway, the moment of truth is here – it’s time to launch our instance, and
    we can do so by clicking the **Launch instance** button near the bottom of the
    page. Assuming we didn’t forget anything along the way, our new Ubuntu Server
    cloud instance is moments away from existing!
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，关键时刻到了——是时候启动我们的实例了，我们可以通过点击页面底部的**启动实例**按钮来完成。如果我们没有在过程中遗漏什么，我们的新 Ubuntu
    Server 云实例即将启动！
- en: 'At this point, we should see the new instance in the list of EC2 instances
    in our account, and it will take some time for it to be ready for use. When the
    status indicates that the instance is **Running**, then that means it’s ready
    for us to connect to:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们应该能在我们账户中的 EC2 实例列表中看到新的实例，并且它将需要一些时间才能准备好使用。当状态显示实例为**运行中**时，意味着它已经准备好可以连接了：
- en: '![](img/B18425_19_29.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_29.png)'
- en: 'Figure 19.29: Checking the status of our EC2 instance'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.29：检查我们 EC2 实例的状态
- en: 'In order to set up a connection so we can manage the instance, we’ll need to
    change the **IAM role** for the instance. If you recall, we created an IAM role
    earlier, and this is where we’ll attach that role to our new instance. This will
    ensure that the settings within the role are applied to the instance, which in
    turn will give us access to Session Manager for connecting to that instance. To
    change the IAM role, we’ll check the box to the left of the instance, then click
    on **Actions** at the top of the screen. In the menu that opens, click on **Security**,
    and then **Modify IAM role**:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置连接以便我们管理实例，我们需要更改实例的**IAM角色**。如果您还记得，我们之前创建了一个IAM角色，这里我们将把该角色附加到新的实例上。这样可以确保角色中的设置应用到实例，从而使我们能够访问会话管理器，连接到该实例。要更改IAM角色，我们需要勾选实例左侧的框，然后点击屏幕顶部的**操作**。在弹出的菜单中，点击**安全**，然后点击**修改IAM角色**：
- en: '![](img/B18425_19_30.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_30.png)'
- en: 'Figure 19.30: Navigating to the IAM role settings for an EC2 instance'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.30：导航到EC2实例的IAM角色设置
- en: 'The screen that follows is where we’ll change the IAM role to the one we created
    earlier:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的屏幕是我们将更改IAM角色为我们之前创建的角色的地方：
- en: '![](img/B18425_19_31.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_31.png)'
- en: 'Figure 19.31: Changing the IAM role of an instance'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.31：更改实例的IAM角色
- en: 'After you click **Update IAM role**, you’ll be brought back to the list of
    current EC2 instances. If you click on the blue instance ID text near the name
    of the instance, you’ll be taken to a screen where you can customize additional
    options for the instance:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**更新IAM角色**后，您将返回当前EC2实例的列表。如果点击实例名称旁边的蓝色实例ID文本，您将进入一个可以自定义实例其他选项的屏幕：
- en: '![](img/B18425_19_32.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_32.png)'
- en: 'Figure 19.32: Additional EC2 instance settings'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.32：额外的EC2实例设置
- en: 'Among the various items on the page, of special interest to us is the **Connect**
    button. If we click on that, we’ll begin the process of setting up a remote connection
    we can use to manage the instance. On the screen that appears, click on the **Session
    Manager** tab:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面上的各种项目中，我们特别关注的是**连接**按钮。如果我们点击它，我们将开始设置远程连接的过程，以便管理实例。在出现的屏幕上，点击**会话管理器**标签：
- en: '![](img/B18425_19_33.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_33.png)'
- en: 'Figure 19.33: Preparing a session to connect to an instance'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.33：准备连接到实例的会话
- en: 'Once you click the **Connect** button, a new browser window will appear that
    you can use to issue commands to your instance:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦点击**连接**按钮，新的浏览器窗口将会出现，您可以使用它向实例发出命令：
- en: '![](img/B18425_19_34.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_34.png)'
- en: 'Figure 19.34: An instance session open within a web browser'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.34：在Web浏览器中打开的实例会话
- en: 'In *Figure 19.34*, I entered the following command in order to display details
    for the version of Ubuntu that was deployed in the instance:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图19.34*中，我输入了以下命令以显示实例中部署的Ubuntu版本的详细信息：
- en: '[PRE3]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `/etc/os-release` file is included with all Ubuntu installations, and as
    you can see from the output, it contains some information regarding the version
    of Ubuntu we’re running. That command was entered directly into the Session Manager
    window, to show that the connection is actually working and we can now configure
    the instance right from within our web browser!
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`/etc/os-release`文件包含在所有Ubuntu安装中，从输出中可以看到，它包含一些关于我们正在运行的Ubuntu版本的信息。该命令是直接输入到会话管理器窗口中的，以表明连接实际上已经成功，并且我们现在可以直接在Web浏览器中配置实例！'
- en: 'If you recall, we added **User Data** earlier, and that included a command
    to install Apache. If you enter the public IP address of your EC2 instance into
    a web browser, you should see the default Apache web page:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还记得，我们之前添加了**用户数据**，其中包括一个安装Apache的命令。如果将EC2实例的公共IP地址输入到Web浏览器中，您应该能看到默认的Apache网页：
- en: '![](img/B18425_19_35.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_35.png)'
- en: 'Figure 19.35: The Apache default web page running on an EC2 instance'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.35：在EC2实例上运行的Apache默认网页
- en: Congratulations! You’ve successfully deployed Ubuntu Server to the cloud, and
    now have an actual web server running on it. That’s all there is to it. Using
    Session Manager is also simple; all you need to do to customize the server further
    is right-click on it, click **Connect**, and you can then continue to build the
    instance. That’s awesome!
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已经成功将Ubuntu Server部署到云端，现在已经有一个实际运行的Web服务器了。就这么简单。使用会话管理器也很简单；您只需要右键点击服务器，点击**连接**，然后继续构建实例。这太棒了！
- en: What’s not so awesome, though, is when something happens to your server and
    you have to start over and rebuild it from scratch. In the next section, we’re
    going to explore the process of creating an image of the server that we can utilize
    to deploy customized versions of Ubuntu.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，**不太理想**的是，当服务器出现问题时，你不得不重新开始并从头构建它。在接下来的部分，我们将探讨如何创建一个服务器镜像，利用它来部署定制版的Ubuntu。
- en: Creating and deploying Ubuntu AMIs
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建并部署Ubuntu AMI
- en: Just about every cloud platform I know of includes some sort of feature that
    can be used to create images of the instance’s hard disk. An image can be used
    to create copies of the original server, as well as acting as a starting point
    so if the server needs to be rebuilt, we won’t have to start over from scratch.
    In AWS, images are known as **Amazon Machine Images** (**AMIs**). For all intents
    and purposes, there’s nothing very unique about AMIs; if you’ve worked with disk
    images in the past, it’s the same thing. When it comes to what to include in an
    AMI, you can (and should) use your imagination here—anything you find yourself
    manually setting up or configuring while rolling out a new server is a candidate
    to be included in an image, and the more customizations you include inside the
    image, the more time it will save you later.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道的几乎所有云平台都有类似的功能，可以用来创建实例硬盘的镜像。镜像可以用来创建原始服务器的副本，并且作为一个起点，这样如果服务器需要重建，我们就不必从头开始。在AWS中，镜像被称为**Amazon机器镜像**（**AMIs**）。从本质上讲，AMIs并没有什么特别的地方；如果你之前使用过磁盘镜像，它们是一样的。至于AMIs中包含什么内容，你可以（而且应该）在这方面发挥想象力——任何你在部署新服务器时手动设置或配置的内容，都可以考虑纳入镜像，镜像中包含的自定义项越多，后续节省的时间就越多。
- en: Let’s see this in action and create an image of the server we’ve just set up.
    We should consider shutting down our server first, although this isn’t required.
    Taking an AMI of a server that is shut down is preferred over doing the same on
    a server that is running. When the server is shut down, nothing is writing to
    its disk, so we don’t have to worry about corruption if we’re capturing an AMI
    in the middle of a critical write operation. The likelihood of running into an
    issue while creating an AMI of a running server is very small, but I recommend
    shutting down the server if you can just to be on the safe side.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下这个过程，并创建我们刚刚设置好的服务器镜像。我们可以考虑先关闭服务器，尽管这不是必需的。最好在服务器关闭时创建AMI，而不是在服务器运行时创建。当服务器关闭时，磁盘上不会有任何写操作，所以我们不必担心在关键写入操作中间捕获AMI时出现数据损坏。在创建运行中的服务器的AMI时遇到问题的可能性非常小，但如果可以的话，我建议你还是先关闭服务器，以确保安全。
- en: 'In the EC2 console of AWS, you can right-click on the instance to access **Session
    Manager**, and then you can simply power it off from the command prompt:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS的EC2控制台中，你可以右键点击实例进入**会话管理器**，然后可以通过命令行界面直接关闭它：
- en: '[PRE4]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In AWS, it can take a minute or two for an instance to power down. You can
    refresh the page after some time, and the status should change to **Stopped**:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS中，实例关闭可能需要一两分钟的时间。你可以过一会儿刷新页面，状态应该会变为**已停止**：
- en: '![](img/B18425_19_36.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_36.png)'
- en: 'Figure 19.36: Checking the status of an EC2 instance'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.36：检查EC2实例的状态
- en: 'Once the instance has stopped, you can right-click on it to begin the process
    of creating an AMI. Hover over **Image and templates** and then click **Create
    image**:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦实例关闭，你可以右键点击它，开始创建AMI的过程。将鼠标悬停在**镜像和模板**上，然后点击**创建镜像**：
- en: '![](img/B18425_19_37.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_37.png)'
- en: 'Figure 19.37: The Apache default web page running on an EC2 instance'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.37：在EC2实例上运行的Apache默认网页
- en: 'Next, we can enter some details about our AMI. Give it a name and a description.
    This information will help others you work with understand what the image is for,
    and it can also help you remember why you’ve created the image later on down the
    road. There are other options on this page, but we can leave the rest as is. A
    name and description should be good enough for now. Once you’re finished, click
    **Create image** to continue:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以为我们的AMI输入一些详细信息，给它一个名称和描述。这些信息将帮助你合作的其他人了解该镜像的用途，同时也能帮助你日后记得为什么要创建这个镜像。页面上还有其他选项，但我们可以保持默认设置。现在，名称和描述就足够了。完成后，点击**创建镜像**继续：
- en: '![](img/B18425_19_38.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_38.png)'
- en: 'Figure 19.38: Creating a new AMI'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.38：创建新的AMI
- en: 'Believe it or not, that’s all there is to it. The process of creating an AMI
    is very straightforward, with just a few steps. You should now see a confirmation
    screen, letting you know the image is in the process of being created:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 相信与不信，这就是全部内容。创建AMI的过程非常简单，只需要几个步骤。你现在应该看到一个确认屏幕，告诉你镜像正在创建中：
- en: '![](img/B18425_19_39.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_39.png)'
- en: 'Figure 19.39: Confirmation while creating a new AMI'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.39：创建新AMI时的确认
- en: 'If you click on the underlined text that contains the AMI ID, you’ll be directed
    to the AMI section of the EC2 console, where it will show your image on the list:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击包含AMI ID的下划线文本，你将被引导到EC2控制台中的AMI部分，那里将显示你创建的镜像：
- en: '![](img/B18425_19_40.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_40.png)'
- en: 'Figure 19.40: Our newly created AMI, available for use'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.40：我们新创建的AMI，已可使用
- en: In the AMI section of the EC2 console, you should see the list narrowed down
    to just the AMI we created just now. We only have one AMI anyway, unless you created
    multiple AMIs for practice. At the end, the **Status** column should read **available**
    if the AMI is ready for use. If not, give it some time, and refresh the page later.
    Sometimes it can take a few minutes. But with regard to creating an AMI, that’s
    it!
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在EC2控制台的AMI部分，你应该看到列表已缩小到仅显示我们刚刚创建的AMI。我们总共有一个AMI，除非你为练习创建了多个AMI。最后，**状态**列应该显示**可用**，表示该AMI已准备好使用。如果没有，稍等一会儿，稍后刷新页面。有时需要几分钟的时间。但关于创建AMI，就是这些！
- en: Now that we have an AMI, how do we go about using it? Well, that’s even easier
    actually. Simply right-click on the AMI on the list and click **Launch**. You’ll
    see the same launch settings we worked through earlier when we originally created
    the instance, but this time, we’re using our own AMI instead of the one provided
    to us. And now, we have our own custom AMI of Ubuntu with Apache built in that
    we can use to simplify our process a bit. Keep in mind, though, that our original
    instance is still stopped. You can return to your list of EC2 instances and start
    it by right-clicking on it, then clicking **Start**, but you don’t have to; we’re
    going to work through a fun automation example shortly.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经有了一个AMI，我们该如何使用它呢？其实这更简单了。只需右键点击AMI列表中的AMI，然后点击**启动**。你将看到我们之前创建实例时所用的相同启动设置，不过这次，我们使用的是自定义的AMI，而不是提供给我们的那个AMI。现在，我们拥有了一个内置Apache的自定义Ubuntu
    AMI，可以用来简化我们的过程。不过请记住，我们的原始实例仍然是停止状态。你可以返回EC2实例列表，右键点击该实例，然后选择**启动**，但这不是必需的；我们将很快展示一个有趣的自动化示例。
- en: In the next section, we’re going to take a look at the concept of Auto Scaling.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨自动扩展（Auto Scaling）的概念。
- en: Automatically scaling Ubuntu EC2 deployments with Auto Scaling
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自动扩展进行Ubuntu EC2部署的自动扩展
- en: If we maintain one or more servers for our organization, it’s hard to predict
    sometimes what the demand will be on that server. In the case of a popular news
    site, some articles may be more popular than others, and if something goes viral
    online, then requests to our site can increase by orders of magnitude in a short
    period of time. In the past, keeping up with customer demand was a very tedious
    process, one that may result in having to purchase an entirely new server with
    more powerful hardware. With our instance being in the cloud, we have more flexibility
    and can automate the process of bringing more servers online. And that’s exactly
    what we’re going to work on in this section.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们为组织维护一台或多台服务器，有时很难预测服务器的需求量。以一个热门新闻网站为例，某些文章可能比其他文章更受欢迎，如果某篇文章在网上病毒式传播，那么请求量可能会在短时间内激增几个数量级。过去，跟上客户需求是一个非常繁琐的过程，可能导致需要购买一台配置更强大硬件的全新服务器。而现在，借助云中的实例，我们有了更多的灵活性，可以自动化上线更多服务器的过程。这正是我们将在本节中研究的内容。
- en: Before we get started, keep in mind that we don’t actually have a popular server
    in AWS; we only have a simple test server that’s currently running Apache. We
    can simulate things to a point, but **Auto Scaling** is one of those things that
    requires a bit of practice to fully utilize. We will definitely get a working
    example here, though.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，请记住，我们在AWS中实际上并没有一台热门服务器；我们只有一台当前运行Apache的简单测试服务器。我们可以模拟某些情况，但**自动扩展（Auto
    Scaling）**是一个需要一定实践才能完全利用的功能。不过我们肯定会在这里得到一个有效的示例。
- en: 'But another important thing to keep in mind is that the more instances we run,
    the higher the potential cost. We’ll explore how to keep costs down in the next
    section, but as a general rule of thumb, delete whatever you’re not using. As
    you’ve gone through examples in this chapter, we’ve set up our own EC2 instance.
    This is great: we were able to practice some concepts around AWS and put that
    to use. But if we leave something running that we don’t need, we can have a surprise
    bill. It’s a good idea to write yourself a reminder to delete everything in your
    test AWS account when we’re done with the chapter, so you won’t have to worry
    about that.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 但另一个重要的事情是，运行的实例越多，潜在的费用就越高。我们将在下一节中探讨如何降低成本，但作为一个通用的经验法则，删除你不使用的任何东西。在本章的示例中，我们已经设置了自己的EC2实例。这很好：我们能够实践一些关于AWS的概念并付诸实践。但如果我们留下不需要的实例运行，就可能会收到意外账单。建议你在本章结束时为自己写个提醒，删除测试AWS账户中的所有内容，这样就不用担心这个问题了。
- en: Continuing, one of the requirements of Auto Scaling is that we have an AMI ready
    that it will use to bring additional servers online. Since we’ve worked through
    creating an AMI in the previous section, we already have that requirement met.
    If you haven’t already worked through the previous section, make sure you do so
    before we continue. The process of setting up Auto Scaling involves a handful
    of steps, and we’ll work through each in their own subsection within this chapter.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，Auto Scaling的一个要求是，我们必须有一个AMI可供使用，用来在线启动额外的服务器。由于我们已经在前一节中完成了AMI的创建，所以这个要求已经满足。如果你还没有完成前一节的内容，确保在继续之前完成它。设置Auto
    Scaling的过程涉及一些步骤，我们将在本章中为每个步骤单独设置小节。
- en: Creating a launch template
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建启动模板
- en: Earlier in the chapter, we walked through the process of creating a new EC2
    instance. We chose the option to launch an instance, and then configured various
    settings within multiple screens we worked through. We chose Ubuntu as our platform,
    added user data, and set an IAM role (among other things). What a **launch template**
    does is allow us to automate these choices. A launch template gives us the ability
    to automate the entire launch process.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的早些时候，我们演示了创建新EC2实例的过程。我们选择了启动实例选项，然后在多个屏幕中配置了各种设置。我们选择了Ubuntu作为平台，添加了用户数据，并设置了IAM角色（以及其他内容）。**启动模板**的作用是让我们能够自动化这些选择。启动模板使我们能够自动化整个启动过程。
- en: 'On the left-hand menu of the EC2 console, there will be a link titled **Launch
    Templates**. Click on it. Once you do, you can click on the orange button labeled
    **Create launch template**. You’ll then see a form you’ll need to fill out, where
    you select all the defaults for the launch template. There’s no screenshot on
    this page, because it’s quite long and won’t fit on one page. Instead, I’ll include
    the relevant options below, with a short description and a recommendation regarding
    what to set the option to:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在EC2控制台的左侧菜单中，会有一个名为**启动模板**的链接。点击它。点击后，你可以点击标有**创建启动模板**的橙色按钮。然后，你会看到一个需要填写的表单，在表单中选择启动模板的所有默认选项。该页面没有截图，因为它非常长，无法容纳在一页上。因此，我将在下面提供相关选项，附上简短的描述以及建议设置该选项的推荐值：
- en: '**Launch template name**: This is simply a name for your launch template; set
    it to the name you feel is most appropriate. Note that this cannot contain spaces.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动模板名称**：这只是一个给启动模板的名称；设置为你认为最合适的名称。请注意，名称中不能包含空格。'
- en: '**Template version description**: For the description, you can add some details
    that you think are relevant to the purpose of the launch template.'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模板版本描述**：对于描述，你可以添加一些你认为与启动模板目的相关的细节。'
- en: '**Amazon Machine Image** (**AMI**): Choose the AMI that you created in the
    previous section. You should see it listed if you click on the **My AMIs** tab,
    and ensure **Owned by me** is selected. This will narrow down the list of AMIs
    quite a bit, and since we’ve only created one AMI, it should be easy to find.'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon机器镜像**（**AMI**）：选择你在前一节中创建的AMI。如果你点击**我的AMI**标签，应该能看到它，并确保选择了**由我拥有**。这将大大缩小AMI的列表，因为我们只创建了一个AMI，所以应该很容易找到。'
- en: '**Key pair** (**login**): When you created the EC2 instance earlier, it had
    you create an OpenSSH key pair. If you drop down this list, that same key pair
    should be available. Choose that same key.'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密钥对**（**登录**）：当你之前创建EC2实例时，它要求你创建一个OpenSSH密钥对。如果你下拉此列表，应该可以找到相同的密钥对。选择那个相同的密钥。'
- en: '**Instance type**: If you recall, we chose t2.micro as the instance type earlier.
    That’s a good selection for this field as well, since t2.micro is eligible for
    the free tier.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实例类型**：如果你记得，之前我们选择了 t2.micro 作为实例类型。这也是该字段的一个不错选择，因为 t2.micro 符合免费层的条件。'
- en: '**Security groups**: Earlier, when we added a security group, we set it up
    to allow OpenSSH and Apache. Feel free to choose that same security group for
    this.'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全组**：之前我们添加安全组时，已经设置允许 OpenSSH 和 Apache。你可以继续选择相同的安全组。'
- en: '**IAM instance profile**: This option is a bit hidden, but you should see it
    as soon as you expand **Advanced details** near the bottom. Although this is optional,
    it’s a good idea to select the IAM profile we created earlier, to ensure we have
    access to Session Manager for each instance the launch template creates.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IAM 实例配置文件**：这个选项稍微隐藏一点，但只要你展开页面底部的**高级设置**，就可以看到。虽然这个选项是可选的，但建议选择我们之前创建的
    IAM 配置文件，以确保每个由启动模板创建的实例都可以访问 Session Manager。'
- en: With all of those details set, click **Create Launch Template** near the bottom
    of this screen. Now we have our launch template created and configured, and we
    can use it as part of the Auto Scaling feature we’re in the process of building.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好所有细节后，点击页面底部的**创建启动模板**。现在我们已经创建并配置了启动模板，可以将其作为正在构建的自动伸缩功能的一部分使用。
- en: Creating an Auto Scaling group
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自动伸缩组
- en: Our next requirement is to create an **Auto Scaling group**, which will be a
    shorter process than setting up the launch template. An Auto Scaling group is
    a logical group of instances that are related to the overall application. We will
    add our launch template to this group and use it to customize requirements such
    as how many instances to have online.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一个步骤是创建**自动伸缩组**，这个过程比设置启动模板要简单。自动伸缩组是与整个应用程序相关的一组实例。我们将把启动模板添加到该组，并用它来定制一些要求，比如在线实例的数量。
- en: 'Back in the EC2 dashboard, you’ll find an option for creating Auto Scaling
    groups in the menu on the left side of the screen, closer to the bottom. Once
    there, give it a name:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 EC2 仪表盘，你会在左侧菜单的底部找到创建自动伸缩组的选项。进入后，给它命名：
- en: '![](img/B18425_19_41.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_41.png)'
- en: 'Figure 19.41: Naming the Auto Scaling group'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.41：为自动伸缩组命名
- en: 'Further down on that same screen, we will choose the launch template we created
    earlier. Go ahead and do so, and then click **Next**:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一页面的下方，我们将选择之前创建的启动模板。请继续操作，然后点击**下一步**：
- en: '![](img/B18425_19_42.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_42.png)'
- en: 'Figure 19.42: Selecting a launch template for our new Auto Scaling group'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.42：为我们的新自动伸缩组选择启动模板
- en: 'On the next screen, several additional sections worth of options will appear.
    The first of which will have you configure some defaults around networking. For
    the VPC, you can leave that as is, and for the availability zone, you can simply
    choose the first on the list:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个页面上，会出现几个额外的选项部分。第一个部分将让你配置一些网络设置。对于 VPC，可以保持默认设置，选择第一个可用区即可：
- en: '![](img/B18425_19_43.png)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_43.png)'
- en: 'Figure 19.43: Creating an Auto Scaling group (continued)'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.43：创建自动伸缩组（续）
- en: 'Continuing, the next section will ask us about our preference around instance
    types. On my end, I chose the **Manually add instance types** option, and then
    **t2.nano** as the instance type:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，下一部分会询问我们对实例类型的偏好。在我的选择中，我选择了**手动添加实例类型**，然后选择了**t2.nano**作为实例类型：
- en: '![](img/B18425_19_44.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_44.png)'
- en: 'Figure 19.44: Creating an Auto Scaling group (continued)'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.44：创建自动伸缩组（续）
- en: 'Once you’re finished choosing your instance type(s), there’s nothing left for
    us to do on this particular page, so click **Next** to continue. This will take
    you to another section, this time asking you if you want to create a load balancer.
    In the first section of this screen, choose to **Attach to a new load balancer**:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了选择实例类型，当前页面不再需要我们做其他操作，点击**下一步**继续。这将带你进入下一个部分，询问你是否要创建负载均衡器。在此页面的第一部分，选择**附加到新的负载均衡器**：
- en: '![](img/B18425_19_45.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_45.png)'
- en: 'Figure 19.45: Creating an Auto Scaling group (continued)'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.45：创建自动伸缩组（续）
- en: A **load balancer** allows us to route clients between multiple servers, so
    the end-users only see one endpoint, but behind the load balancer we can have
    more than one server available to serve client connections. This is going to be
    key to setting up our auto-scaled test site, so we’ll definitely want to configure
    this.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '**负载均衡器**允许我们在多台服务器之间路由客户端请求，因此最终用户只会看到一个端点，但在负载均衡器后面我们可以有多个服务器来提供客户端连接。这是设置我们自动扩展测试站点的关键步骤，因此我们一定要配置这个选项。'
- en: 'After choosing to create a new load balancer, we can configure additional options
    in the next section. Most of these options we’ll leave at their defaults, but
    there are a few things we’ll want to pay attention to:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择创建新负载均衡器后，我们可以在下一部分配置其他选项。我们大部分选项会保持默认设置，但有些地方需要注意：
- en: '**Load balancer type**: By default, **Application Load Balancer** should be
    selected. If it isn’t, then make sure that’s the highlighted option before continuing.'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡器类型**：默认情况下，应该选择**应用负载均衡器**。如果不是，请确保在继续之前选择该选项。'
- en: '**Load balancer name**: This is simply a name for your load balancer; set it
    to the name you feel is most appropriate. Note that this field is somewhat limited
    on what types of characters it will accept, so it’s best to keep the name simple.'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡器名称**：这只是你负载均衡器的名称；设置为你认为最合适的名称。请注意，这个字段对于字符类型的接受有一定限制，所以最好保持名称简单。'
- en: '**Availability Zones and subnets**: We’ll need at least two availability zones
    for the load balancer, and one will be chosen for you already. The quickest way
    through this section is to enable the next availability zone in the list.'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可用区和子网**：我们至少需要两个可用区用于负载均衡器，其中一个已经为你选择。通过启用列表中的下一个可用区，可以快速完成这一部分。'
- en: 'There are other options on this screen, but the next thing we’ll be doing is
    creating a **target group**, which is directly underneath the availability zone
    options. There, we’ll choose to create a **target group**:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕上还有其他选项，但接下来我们要做的是创建**目标组**，这个选项就在可用区选项的下方。在那里，我们将选择创建**目标组**：
- en: '![](img/B18425_19_46.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_46.png)'
- en: 'Figure 19.46: Creating an Auto Scaling group (continued)'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.46：创建自动扩展组（续）
- en: 'A **target group** is a logical grouping of EC2 instances that serve a common
    goal. A load balancer will send traffic to a target group, and instances within
    that group will answer the request. If an instance is not a member of a target
    group, then it won’t be a part of our application. It’s not uncommon for an organization
    to have more than one app, and as a result, several target groups. After you choose
    to create a target group, you can accept the default name if you wish, and then
    we should be finished with configuring our auto-scaling group. Click **Next**
    to continue, which will bring us to a section where we can configure our **scaling
    policy**:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标组**是一个逻辑分组，其中包含为共同目标服务的 EC2 实例。负载均衡器会将流量发送到目标组，组内的实例将响应请求。如果某个实例不是目标组的成员，它就不会成为我们应用的一部分。一个组织有多个应用程序并不罕见，因此也会有多个目标组。创建目标组后，你可以选择接受默认名称，然后我们就可以完成自动扩展组的配置。点击**下一步**继续，这将带我们进入可以配置**扩展策略**的部分。'
- en: '![](img/B18425_19_47.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_47.png)'
- en: 'Figure 19.47: Creating an Auto Scaling group (continued)'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.47：创建自动扩展组（续）
- en: 'This is where the magic happens: we can choose the minimum number of instances
    to have running at any one time and the maximum number of instances we will allow
    the application to scale up to. We can leave each field at **1** for now.'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是魔法发生的地方：我们可以选择在任何时刻运行的实例的最小数量，以及允许应用扩展到的最大实例数量。现在可以将每个字段保持为**1**。
- en: That should be about all we’ll need to configure for our auto scaling group.
    You can click **Skip to review** to take a shortcut that will take you to the
    final screen of the process, which will show you an overview of your selections.
    If you’re satisfied with the settings that are shown, you can finalize the process
    by clicking **Create Auto Scaling group**.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该是我们为自动扩展组配置所需的全部内容。你可以点击**跳过到审核**，通过快捷方式直接进入过程的最后屏幕，那里会显示你选择的概览。如果你对显示的设置满意，可以通过点击**创建自动扩展组**来完成该过程。
- en: At this point, our Auto Scaling group is created, and we should have everything
    ready to go. At first, we’ll have **0** instances within this group, so we’ll
    see the current number of instances shown as **0**.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们的自动扩展组已创建，我们应该一切就绪。最初，我们将看到该组中有**0**个实例，因此当前实例数会显示为**0**。
- en: 'After it finishes updating capacity, it will automatically spin up a new EC2
    instance in order to meet our requirement of always having one instance online.
    If we check our list of EC2 instances, we should have a new one on the list now:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 更新容量完成后，它将自动启动一个新的 EC2 实例，以满足我们始终保持一个实例在线的要求。如果我们检查我们的 EC2 实例列表，现在应该会看到一个新的实例：
- en: '![](img/B18425_19_48.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_48.png)'
- en: 'Figure 19.48: A new instance was created as part of our Auto Scaling configuration'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.48：作为我们自动扩展配置的一部分，创建了一个新实例
- en: As you can see in the screenshot, the original EC2 instance has a state of **Stopped**.
    We stopped it earlier so that we could create an AMI of that instance. In my case,
    I never started that instance again after creating the AMI, so it’s completely
    stopped. The Auto Scaling configuration went ahead and created a new instance,
    because its requirement of having at least one instance running was not met.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在截图中看到的，原始的 EC2 实例状态为**停止**。我们之前停止了它，以便创建该实例的 AMI。在我的案例中，创建 AMI 后我没有再次启动该实例，所以它完全处于停止状态。自动扩展配置继续进行，并创建了一个新实例，因为它的要求是至少有一个实例在运行，而这个要求没有得到满足。
- en: Before we implement the final component we need for everything to function properly,
    let’s take a moment to understand the value that we already have in place. If
    we were to increase the number of desired instances within the Auto Scaling group,
    then it would immediately spin up a new instance for us. Although advanced usage
    is more appropriate for a book that’s dedicated to AWS, we can set this up to
    automatically happen when the CPU of our instance gets to a certain point, which
    can trigger Auto Scaling to bring another one online.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们实现最后一个必要组件之前，让我们先花一点时间了解一下我们已经设置好的内容。如果我们增加自动扩展组中所需的实例数，它将立即为我们启动一个新实例。尽管高级用法更适合写成一本专门讲解
    AWS 的书，但我们可以设置，当实例的 CPU 达到某个阈值时，自动扩展会触发并启动另一个实例。
- en: With just a single instance, we don’t have Auto Scaling in play yet, but we
    can easily enable that. Another benefit that we get automatically is auto healing,
    and we have that benefit even with a single instance. If something were to happen
    to our only running instance, Auto Scaling will bring a new one online to replace
    it automatically.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 目前只有一个实例，我们还没有启用自动扩展，但我们可以轻松启用这一功能。我们自动获得的另一个好处是自动修复，即使只有一个实例，我们也能享受这个好处。如果我们唯一的运行实例出现问题，自动扩展将自动启动一个新的实例来替代它。
- en: In this situation, the website will be down for several minutes while the new
    instance is being created, but a bit of downtime is certainly better than having
    to manually replace the server ourselves. If we set the desired instances to a
    number higher than 1, a user will not notice anything if one of the servers goes
    down, the other will take care of the load while the new one comes up. These are
    amazing benefits to be able to take advantage of and will give us additional peace
    of mind right away. To test this yourself, feel free to delete the running EC2
    instance by right-clicking it and then clicking **Terminate**. The instance should
    then get terminated, and a new one should appear within several minutes to replace
    it.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，网站将在新实例创建期间停机几分钟，但几分钟的停机时间总比我们自己手动替换服务器要好。如果我们将所需实例数设置为大于 1，当其中一个服务器出现故障时，其他服务器会继续承担负载，同时新的实例上线。这些都是能够充分利用的令人惊叹的好处，并且会立即为我们带来额外的安心。若要自己测试，可以通过右键单击正在运行的
    EC2 实例并选择**终止**来删除它。该实例应会被终止，并且几分钟内会出现一个新实例来替代它。
- en: Since we have a load balancer in use, this changes the way that we’ll access
    the application that’s running on our instance(s), which in this case is Apache
    (we had Apache installed when we built our AMI, so every instance will automatically
    have Apache set up). Normally, we can access the application by navigating to
    the public IP address of the instance. We can still do this, actually – and the
    same is true for other instances within our load balancer setup as well. But in
    order to benefit from the overall solution we’ve built, we should instead access
    the application from the **DNS name** of the load balancer. This will ensure that
    our request is routed through the load balancer, rather than directly to a specific
    server. If you navigate to the **Load balancers** section of the management console,
    you should see the DNS name there. Going forward, the application or services
    you run on your instances should be served by having users access it via that
    DNS name.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在使用负载均衡器，这会改变我们访问在实例上运行的应用程序的方式。在本例中，应用程序是 Apache（我们在构建 AMI 时安装了 Apache，因此每个实例都会自动设置
    Apache）。通常，我们可以通过访问实例的公网 IP 地址来访问应用程序。实际上，我们仍然可以这样做 —— 对于负载均衡器设置中的其他实例也是如此。但为了充分利用我们构建的整体解决方案，我们应该通过负载均衡器的**DNS
    名称**来访问应用程序。这将确保我们的请求通过负载均衡器路由，而不是直接发送到某个特定的服务器。如果你进入管理控制台的**负载均衡器**部分，你应该能在那里看到
    DNS 名称。以后，你在实例上运行的应用程序或服务应该通过该 DNS 名称来提供给用户访问。
- en: Congratulations! At this point, you’ve created a complete load-balanced solution
    in AWS that will automatically heal from failures. Feel free to experiment a bit
    more, and then when you’re finished, consider removing the test components we’ve
    created in this chapter to avoid a cost later on.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！到目前为止，你已经在 AWS 中创建了一个完整的负载均衡解决方案，该方案能够自动从故障中恢复。可以自由进行更多实验，完成后，考虑删除本章中创建的测试组件，以避免未来的费用。
- en: Speaking of cost, in the next section, we’ll talk a bit further about how to
    manage costs and keep our bills under control.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 说到成本，下一节我们将进一步讨论如何管理成本并控制账单。
- en: 'Keeping costs down: understanding how to save money and make cost-effective
    decisions'
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 降低成本：理解如何节省开支并做出高效的决策
- en: As you just saw, there were many components and configurations we had to implement
    in order to build a load-balanced solution in AWS. As we grow our AWS infrastructure
    and implement more solutions, we should also keep an eye on our bill. Although
    we can utilize the free tier for now, production applications will likely need
    more powerful instances than what the free tier will provide, and the free tier
    itself won’t last forever. Not only that, but we should also know how to check
    how our bill is trending to make sure we don’t accidentally implement something
    that is expensive or waste money by running something we no longer need.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你刚才看到的，我们必须实现许多组件和配置，以在 AWS 中构建负载均衡解决方案。随着我们逐步扩展 AWS 基础设施并实现更多解决方案，我们也应该密切关注账单。虽然我们现在可以使用免费层，但生产环境中的应用通常需要比免费层提供的实例更强大的实例，而免费层本身也不是永久有效的。更重要的是，我们还应该了解如何检查账单趋势，确保不会无意间实现某些昂贵的操作，或者因运行不再需要的服务而浪费资金。
- en: In this section, we’ll explore some concepts around billing. Although it’s beyond
    the scope of this chapter to do a complete deep dive into the world of billing,
    the subsections that follow will provide you with essential advice to help prevent
    unexpected charges.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨一些关于计费的概念。虽然本章的范围无法深入探讨计费的所有细节，但接下来的子章节将为你提供一些基本建议，帮助你避免意外的费用。
- en: Viewing billing information
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看计费信息
- en: 'Within AWS, the billing section is its own service along with others, such
    as EC2 and S3\. You can find the **Billing** area from the service list. Once
    there, you’ll be shown the **Billing & Cost Management Dashboard**, which will
    show you your current expenses and allow you to see current and past billing information:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AWS 中，计费部分是一个独立的服务，类似于 EC2 和 S3 等其他服务。你可以从服务列表中找到**计费**区域。进入后，你将看到**计费与成本管理仪表盘**，它会展示你当前的支出，并允许你查看当前和过去的计费信息：
- en: '![](img/B18425_19_49.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_19_49.png)'
- en: 'Figure 19.49: Viewing the Billing & Cost Management Dashboard'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.49：查看计费与成本管理仪表盘
- en: Since the account I’m working with currently was just created a week or so ago,
    and I’m only using instances in the free tier, I have no costs currently. But
    if I did incur charges, I’d see the current balance on the main page of the dashboard.
    In addition, I’ll receive the same information in a monthly statement that is
    sent to the primary email account.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我目前正在使用的账户是在大约一周前创建的，并且我只在免费层中使用实例，所以目前没有费用。但是，如果我确实产生了费用，我会在仪表板主页上看到当前余额。此外，我将收到发送到主要电子邮件账户的每月对账单中的相同信息。
- en: However, I don’t recommend waiting for the bill to arrive before checking your
    totals. To effectively manage billing, you should check this dashboard manually,
    which might enable you to catch an error before the end of the month, which might
    save you money. The links on the left will give you additional billing information,
    as well as providing a way of accessing previous bills.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我不建议等账单到达后再检查您的总额。为了有效管理计费，您应该手动检查这个仪表板，这可能使您在月底之前捕捉到错误，从而节省您的金钱。左侧的链接将为您提供额外的计费信息，并提供访问以前账单的方法。
- en: Adding a billing alert
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一个计费警报
- en: In this section, I’m going to give you some high-level tips regarding some of
    the things you can do in order to help keep your AWS bill down.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我将为您提供一些关于如何帮助控制AWS账单的高级技巧。
- en: In the previous section, I recommended that you check the bill regularly instead
    of only when the monthly invoice arrives. While that is good advice (if I do say
    so myself), the reality is that server administrators like us are busy and may
    not remember to check the bill on a regular basis. This is why we typically set
    up system alerts to notify us when our servers are encountering an issue. Similarly,
    we can actually set up an alert inside our AWS account that can notify us if our
    bill gets too high. In fact, even though the AWS account we’ve been working with
    was likely only created as a test account, it’s especially important that we add
    a billing alert so we can be alerted if any of our experiments were misconfigured
    in such a way that we’re incurring costs we didn’t intend to.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我建议您定期检查账单，而不仅仅是在月度发票到达时检查。虽然这是一个好建议（如果我这么说的话），但现实情况是，像我们这样的服务器管理员忙碌，可能不会记得定期检查账单。这就是为什么我们通常设置系统警报来在我们的服务器遇到问题时通知我们。同样，我们实际上可以在我们的AWS账户内设置一个警报，以通知我们如果我们的账单过高。事实上，尽管我们一直在使用的AWS账户可能只是作为一个测试账户创建的，但特别重要的是我们添加一个计费警报，以便在我们的实验出现误配置导致我们产生不希望的费用时能够得到警告。
- en: In the *Further reading* section at the end of the chapter, I have included
    a link to AWS documentation that details how to set up billing alerts, and I definitely
    recommend you enable them. If you’re using an AWS account for your organization
    to run actual production servers, it’s a good idea to enable billing alerts there
    as well. In fact, be sure to create billing alerts in every AWS account you manage.
    Another important element to consider is removing backups that aren’t needed anymore,
    which can also lower costs.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时的*进一步阅读*部分，我包含了一篇AWS文档的链接，详细介绍了如何设置计费警报，我强烈推荐您启用它们。如果您的组织正在使用AWS账户运行实际的生产服务器，建议在那里启用计费警报。事实上，确保在您管理的每个AWS账户中创建计费警报也非常重要。另一个需要考虑的重要因素是删除不再需要的备份，这也可以降低成本。
- en: Removing unneeded backups
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除不需要的备份
- en: This may seem like a no-brainer, but you’d be surprised—every organization I’ve
    ever worked for or consulted with in regard to AWS has run into an issue where
    backups get out of control and generate large costs. My personal record for witnessing
    a waste of money in this manner is one company that had over 23,000 unnecessary
    snapshots in their account, sitting around for over 5 years. I don’t remember
    the exact dollar amount, but this error cost them thousands of dollars a month
    for years!
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来很简单，但您会惊讶——我曾经为或咨询过的每个AWS相关组织都遇到过备份失控导致大额支出的问题。我个人目睹过的浪费金钱的记录是一家公司在其账户中有超过23,000个不必要的快照，堆积了超过5年的时间。我不记得确切的金额，但这个错误使他们每个月损失成千上万美元多年！
- en: Backups themselves are extremely important though, and the previous example
    might’ve been understandable if the organization had legal requirements that forced
    them to retain all backups for a specific period (such as 5 years). And backups,
    as you well know by now, are essential if the organization runs into some sort
    of issue and needs to restore something from the past. But the general rule of
    thumb here is to ensure that when the day comes to add an automatic backup feature,
    you also implement (and regularly test) an automatic cleanup procedure as well.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 备份本身非常重要，前一个例子如果该组织有法律要求，强制要求保留所有备份一段特定时间（如 5 年），或许能理解。而且备份，你现在应该已经知道，对于组织遇到某些问题并需要恢复过去的数据来说至关重要。但这里的普遍规则是，确保当你添加自动备份功能时，也要实施（并定期测试）自动清理程序。
- en: Running EC2 instances only when they’re needed
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 只在需要时运行 EC2 实例
- en: Many organizations do business around the clock and all year round, while others
    conduct business only during daytime business hours. While it might not be immediately
    apparent why this matters, consider the fact that you don’t get charged for an
    EC2 instance while it’s powered off. You do get charged for things like storage
    regardless of its state, but you aren’t charged for the instance itself if it
    is not running. If your organization has a server that is only used during certain
    hours, consider stopping the instance outside of that time period and then starting
    it back up when it’s needed.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 许多组织全天候全年无休地进行业务，而其他组织则只在日间工作时间进行业务。虽然这可能不是一眼就能看出来的原因，但可以考虑一个事实：当 EC2 实例关闭时，你不会为其收费。无论其状态如何，你都会为存储付费，但如果实例未运行，则不会为该实例本身收费。如果你的组织有只在特定时段使用的服务器，可以考虑在该时段之外停止实例，并在需要时重新启动它。
- en: There’s additional functionality in AWS that allows you to automatically schedule
    an instance to run only during certain hours, so there are ways to ensure your
    infrastructure is available when it’s needed. Make sure you keep this in mind
    as you navigate AWS; if you’re creating a new server, is it going to be necessary
    to make it run 24/7, or is it only necessary to run it at certain times? You’d
    be surprised how much money this may save you.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 中有额外的功能，允许你自动安排实例仅在特定时间运行，因此有方法确保你的基础设施在需要时可用。在使用 AWS 时，请确保记住这一点；如果你正在创建一个新服务器，它是否需要
    24/7 不间断运行，还是只需要在某些特定时间运行？你会惊讶于这可以节省多少费用。
- en: Stopping or terminating unneeded EC2 instances
  id: totrans-326
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 停止或终止不需要的 EC2 实例
- en: Similar to the advice in the previous section about having instances run only
    when necessary, consider deleting instances completely if they’re not needed at
    all. Unless you’re utilizing a very specific type of instance, you won’t be billed
    for an EC2 instance that doesn’t exist. Make a habit of deleting things when you’re
    done with them. If you think you may need a server again in the future but you’re
    not sure, consider creating an AMI of the server, and then removing it. Although
    the AMI itself will have a cost, it’s going to be less than running an actual
    server.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 与前一部分关于仅在必要时运行实例的建议类似，如果实例完全不需要，考虑将其彻底删除。除非你正在使用非常特定类型的实例，否则不会对不存在的 EC2 实例收费。养成使用完就删除的习惯。如果你认为未来可能需要某个服务器但又不确定，考虑为该服务器创建
    AMI 然后将其移除。尽管 AMI 本身会产生费用，但这会比运行实际服务器便宜。
- en: This advice isn’t exclusive to EC2 instances; other services within AWS will
    also cause you to incur costs if you don’t clean them up. Make sure to keep an
    eye on other components and services that charge by usage, such as RDS, S3, EBS
    volumes, and so on.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 这些建议不仅仅适用于 EC2 实例；AWS 中的其他服务如果不进行清理也会产生费用。确保关注其他按使用量计费的组件和服务，例如 RDS、S3、EBS 卷等。
- en: So, there you have it—with some basic advice, you should be able to keep your
    billing under control. And even if you make a mistake, as long as you’ve configured
    billing alerts, you should be notified and be able to correct the problem quickly.
    I can understand if some of the billing advice was overwhelming, but you’ll get
    used to it. AWS has a lot of components that can make up a bill, but as long as
    you set up alerts and delete items you’re not using, you shouldn’t have any problems.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，就这些内容来说——通过一些基本的建议，你应该能控制你的账单。即使你犯了错误，只要你设置了账单提醒，你应该会收到通知并能够迅速纠正问题。我理解如果一些账单建议让你感到有些不知所措，但你会逐渐适应的。AWS有很多组件会构成账单，但只要你设置了提醒并删除不使用的项目，就不会有问题。
- en: We’ve gone over quite a bit in this chapter, but where should you go from here?
    In the next section, I’ll provide some advice for continuing your learning and
    taking your AWS skills to the next level.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中已经讲了很多内容，但接下来该做什么呢？在接下来的章节中，我会提供一些关于如何继续学习并将你的AWS技能提升到更高水平的建议。
- en: 'Taking the cloud further: additional resources to grow your knowledge'
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步探索云计算：更多资源帮助你提升知识
- en: AWS is a huge service, and we haven’t even scratched the surface of the platform
    in this chapter. We’ve just created a simple load-balanced application in an earlier
    section, and we’ll even learn how to automate creating cloud resources in the
    next chapter. But if you’ve found this chapter fun and want to work with AWS more
    and enhance your skills, I thought I’d provide some additional advice that will
    hopefully help you do that.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: AWS是一个庞大的服务平台，我们在本章中只触及了它的表面。我们在之前的章节中创建了一个简单的负载均衡应用，接下来的章节中，我们还会学习如何自动化创建云资源。如果你觉得本章内容有趣，想要更深入地使用AWS并提升技能，我想提供一些额外的建议，希望能帮到你。
- en: Online training and labs
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在线培训和实验室
- en: 'There is quite a bit in the way of online resources to expand your knowledge.
    Some of these resources are free, such as a section of the AWS website that provides
    free hands-on training: [https://aws.amazon.com/training/digital/](https://aws.amazon.com/training/digital/)'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 网上有很多资源可以帮助你扩展知识。其中一些资源是免费的，例如AWS网站的一部分提供免费的实践培训：[https://aws.amazon.com/training/digital/](https://aws.amazon.com/training/digital/)
- en: While you may already be aware of the value of YouTube when it comes to training
    videos, it’s a great source of knowledge. (And you may have even stumbled across
    my YouTube channel, over at Learn Linux TV.)
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可能已经知道YouTube在培训视频方面的价值，但它仍然是一个很好的知识来源。（你甚至可能已经偶然发现了我的YouTube频道——Learn Linux
    TV。）
- en: There are many videos on YouTube that can provide training, but that’s not the
    only source of video content; Packt Publishing features video training courses
    as well, in addition to Udemy, which also has some great content.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: YouTube上有很多可以提供培训的视频，但这并不是唯一的视频内容来源；Packt出版公司也提供视频培训课程，此外，Udemy也有一些很棒的内容。
- en: Overall, there’s no shortage of training materials available, but I’d recommend
    starting with the free training provided by AWS that I’ve mentioned above, as
    well as the additional training content that Amazon makes available at [https://aws.training](https://aws.training).
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，培训资料是丰富的，但我建议你先从我上面提到的AWS提供的免费培训开始，并参考亚马逊在[https://aws.training](https://aws.training)上提供的额外培训内容。
- en: Certification
  id: totrans-338
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认证
- en: While it will take a bit of work, achieving one or more certifications in AWS
    will lead you down a path where you’ll learn the platform in much greater detail.
    In addition, individuals with AWS certifications are in high demand in the IT
    industry, so achieving certification is a good idea all around. I recommend looking
    into the **AWS Certified Cloud Practitioner** credential, which is a more entry-level
    certification that is approachable to those just starting out.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然需要付出一些努力，但获得一个或多个AWS认证将引领你走上一条可以更深入了解该平台的道路。此外，拥有AWS认证的人在IT行业中需求量很大，因此获得认证是一个不错的选择。我推荐你了解**AWS认证云从业者**证书，它是一个更适合刚入门的人的初级认证。
- en: After you grow your expertise, you may want to consider the **AWS Certified
    Sysops Administrator** credential, which is more challenging but will boost your
    knowledge even further.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在你提升自己的专业知识后，可能会考虑获得**AWS认证系统运营管理员**证书，它更具挑战性，但能进一步提升你的知识。
- en: Keep experimenting and learning
  id: totrans-341
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 继续尝试和学习
- en: Even if you don’t decide to achieve a certification, keep experimenting with
    the platform. Getting your hands on the technology and making use of it on a regular
    basis is usually the best way to learn and keep your skills sharp. Try to create
    additional types of infrastructure, build and rebuild test instances, and above
    all, have fun. For many people, there’s no greater way to learn something than
    to get your hands dirty and experience it. I also recommend you follow any blogs
    around cloud computing and related technologies as well.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您决定不去获得认证，也要继续在平台上进行实验。亲自操作技术并定期使用它通常是学习和保持技能的最佳方式。尝试创建其他类型的基础设施，构建和重建测试实例，最重要的是，享受过程。对很多人来说，学习某样东西最好的方式就是亲身体验。我还建议您关注任何关于云计算和相关技术的博客。
- en: AWS documentation
  id: totrans-343
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS文档
- en: 'The documentation provided by AWS is well written and very detailed. You can
    learn everything you need to know from the AWS documentation alone. The documentation
    pages are above and beyond the typical level of quality you would expect from
    such a large service; Amazon takes the AWS documentation seriously. The documentation
    pages are available here: [https://docs.aws.amazon.com/index.xhtml](https://docs.aws.amazon.com/index.xhtml).'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 'AWS提供的文档写得非常好且详尽。您可以仅凭AWS文档了解所需的所有信息。这些文档页面超出了您对如此大型服务通常期待的质量水平；亚马逊非常重视AWS文档。这些文档页面可以在这里找到:
    [https://docs.aws.amazon.com/index.xhtml](https://docs.aws.amazon.com/index.xhtml)。'
- en: New resources for learning about AWS are being created on a regular basis, so
    keep your eyes open for new books, training videos, and more as you study the
    platform. I think you’ll have a lot of fun taking your skills to the next level
    and exploring everything the AWS platform has to offer.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 用于学习AWS的新资源定期发布，所以在学习平台的过程中，保持关注新书籍、培训视频等。我相信，提升技能、探索AWS平台的所有功能将非常有趣。
- en: Summary
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter has been one of the most involved in the entire book so far, and
    you’ve accomplished a lot. During the course of this chapter, you learned about
    AWS, set up your own cloud server, set up Auto Scaling to ensure that your server
    is able to automatically heal from disasters, and even set up a load balancer
    to enable routing between multiple instances. Make sure you take some time to
    let all this knowledge sink in before continuing on, and I also recommend you
    spend some additional time with AWS before moving on to the next chapter.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章是到目前为止全书中最具挑战性的一章，您已经完成了许多任务。在这一章中，您学习了AWS，搭建了自己的云服务器，设置了自动伸缩，以确保服务器能自动从灾难中恢复，甚至配置了负载均衡器，以便在多个实例之间进行路由。请确保在继续之前，花些时间消化这些知识，我也建议您在进入下一章之前，花些额外的时间深入了解AWS。
- en: Speaking of the next chapter, we’re going to work with AWS again, but this time,
    we’re going to focus on learning Terraform, which is an awesome tool that will
    enable us to automate the building of our cloud resources from the ground up.
    It’s going to be a lot of fun.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 说到下一章，我们将再次与AWS合作，但这次我们将专注于学习Terraform，这是一个很棒的工具，它将使我们能够从零开始自动化构建云资源。这个过程会非常有趣。
- en: Further reading
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Amazon Elastic Compute Cloud documentation: [https://learnlinux.link/ec2-docs](https://learnlinux.link/ec2-docs)'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '亚马逊弹性计算云文档: [https://learnlinux.link/ec2-docs](https://learnlinux.link/ec2-docs)'
- en: 'Security groups for your VPC: [https://learnlinux.link/vpc-docs](https://learnlinux.link/vpc-docs)'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '您VPC的安全组: [https://learnlinux.link/vpc-docs](https://learnlinux.link/vpc-docs)'
- en: 'Auto Scaling documentation: [https://learnlinux.link/as-docs](https://learnlinux.link/as-docs)'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '自动伸缩文档: [https://learnlinux.link/as-docs](https://learnlinux.link/as-docs)'
- en: 'Amazon Machine Images (AMIs) : [https://learnlinux.link/ami-docs](https://learnlinux.link/ami-docs)'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '亚马逊机器映像（AMIs）: [https://learnlinux.link/ami-docs](https://learnlinux.link/ami-docs)'
- en: 'Amazon Elastic Kubernetes Service documentation: [https://learnlinux.link/eks-docs](https://learnlinux.link/eks-docs)'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '亚马逊弹性Kubernetes服务文档: [https://learnlinux.link/eks-docs](https://learnlinux.link/eks-docs)'
- en: 'AWS Billing Alert documentation: [https://learnlinux.link/cw-docs](https://learnlinux.link/cw-docs)'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'AWS计费警报文档: [https://learnlinux.link/cw-docs](https://learnlinux.link/cw-docs)'
- en: Join our community on Discord
  id: totrans-356
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们在Discord上的社区
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的Discord空间，与作者和其他读者讨论：
- en: '[https://packt.link/LWaZ0](https://packt.link/LWaZ0)'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/LWaZ0](https://packt.link/LWaZ0)'
- en: '![](img/QR_Code50046724-1955875156.png)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code50046724-1955875156.png)'
