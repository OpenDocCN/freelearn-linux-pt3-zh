- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DNS, DHCP, and IP Addressing – Gaining Deeper Knowledge of Red Hat Linux Networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to dig deeper into networking. We will discuss
    `192.168.1.10`, with a gateway address of `192.168.1.1`, whereas with DHCP, the
    IP information is provided by a DHCP server and the system goes through a handshake
    mechanism to obtain an IP and the DNS and gateway information on the connected
    subnet. We will go into more detail about static addressing and DHCP addressing
    later in this chapter. We will also be setting up a DHCP server to provide IP
    addressing information to systems on your network both manually and through Ansible
    Automation.
  prefs: []
  type: TYPE_NORMAL
- en: We are then going to look at how we can find other addresses on the internet
    through the **Dynamic Name System** (**DNS**), which attaches **Fully Qualified
    Domain Names** (**FQDNs**) to IP addresses. This translates things such as [http://redhat.com](http://redhat.com)
    to an IP address that your computer can then use to reach from your web browser
    or other connectivity sources such as Telnet or SSH. This is all handled through
    domain name registrars where the DNS is associated with the website to IP (and
    vice versa) information. We will set up a DNS server both manually and through
    Ansible Automation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Diving deeper into Linux networking where we look at DNS, DHCP, and static IP
    addressing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up static IP addresses for times when DHCP is not available but you
    still need to make that service reachable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the basic out-of-the-box DHCP configuration to get online fast when available
    on your network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning what the DNS is and why you need to know about it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The technical requirements for this chapter are covered in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up GitHub access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please refer to the instructions found in [*Chapter 1*](B18607_01.xhtml#_idTextAnchor016),
    *Block Storage – Learning How to Provision Block Storage on Red Hat Enterprise
    Linux*, to gain access to GitHub. You will find the Ansible Automation playbooks
    for this chapter at the following link: [https://github.com/PacktPublishing/Red-Hat-Certified-Specialist-in-Services-Management-and-Automation-EX358-Exam-Guide/tree/main/Chapter05](https://github.com/PacktPublishing/Red-Hat-Certified-Specialist-in-Services-Management-and-Automation-EX358-Exam-Guide/tree/main/Chapter05).
    Remember, these are suggested playbooks and are not the only way you can write
    them to make the playbooks work for you.'
  prefs: []
  type: TYPE_NORMAL
- en: You can always change them up using raw, shell, or CMD to achieve the same results,
    but we are demonstrating the best way to accomplish our goals. Also keep in mind
    that we are not using the FQCN that is needed in the future version of Ansible,
    as that will not be supported in the exam since it is testing against Ansible
    2.9.
  prefs: []
  type: TYPE_NORMAL
- en: Diving deeper into Linux networking where we look at DNS, DHCP, and static IP
    addressing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have briefly talked about Linux networking and what it means to you
    – the ability to provide and gain access to your servers, applications, and so
    on that reside on your and other networks. We will take that a step past the initial
    setup of the IP addressing of an interface and build upon what we have learned
    so far in this book. We will show you not only how your devices get your IP, gateway,
    and DNS configurations but also how to provide those services to your servers
    and applications.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will go over the importance of each aspect of the different items.
    Your IP address is like your home address. Your gateway is like your driveway
    out into the world. The DNS is like your GPS because it shows you how to reach
    your online destination. The configuration of all of these things, either automatically
    through DHCP or manually through static addressing, is the bare minimum needed
    to get online and reach your destination.
  prefs: []
  type: TYPE_NORMAL
- en: We have talked previously about IP addressing and how static addressing is done
    manually through interface configuration. The same is true for DHCP; however,
    your system talks to another device to automatically obtain the information it
    needs to get online. This information includes the DNS, which is the GPS of how
    you locate the different things you are looking to find online, such as e-commerce
    websites, news, and so on. We will delve deeper into each of these categories
    as we move through this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up static IP addresses for times when DHCP is not available but you
    still need to make that service reachable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is for times when you don’t have DHCP or when you need to always ensure
    the same address. This will provide the IP address, gateway, DNS, and routing
    that comes along with that setup; you sometimes need to enable the system via
    static configurations. You will notice that in the following screenshot, it did
    get a DHCP address but for our purposes, we are going to assume it received the
    incorrect address that is needed for the application. We will show the current
    IP address on the server using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the IP address information that is currently
    configured on the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – IP addressing based on DHCP currently](img/Figure_5.01_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – IP addressing based on DHCP currently
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in order to resolve this issue, we are going to set the system up statically
    using the `nmtui` command to gain a GUI-style interface, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Initiated GUI using the nmtui command](img/Figure_5.02_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – Initiated GUI using the nmtui command
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the GUI, we are going to choose the **Edit a connection** option. This
    will allow us to choose our interface and set the appropriate settings manually.
    Choosing the right interface after selecting the mentioned option is shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 5.3 – \uFEFFThe Edit a connection option chosen and the correct interface\
    \ highlighted](img/Figure_5.03_B18607.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – The Edit a connection option chosen and the correct interface highlighted
  prefs: []
  type: TYPE_NORMAL
- en: 'After choosing the correct interface, we are going to choose the **Manual**
    setting so we can open up the needed fields for manipulation, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Selecting Manual to open up the Ethernet settings for configuration](img/Figure_5.04_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.4 – Selecting Manual to open up the Ethernet settings for configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'We will then set the correct configuration for the interface. This might be
    information that you have to obtain from your network team in some cases. The
    reason behind that is that you have to know your DNS, gateway, and subnet range.
    These may not be known to you as a server admin, and that’s why DHCP is preferred,
    at least for desktop usage, as it auto-populates all of these fields. The following
    screenshot shows the required configuration to get this interface up and connected
    to the world:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – IP address with subnet range, gateway, and DNS for the required
    connectivity options](img/Figure_5.05_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.5 – IP address with subnet range, gateway, and DNS for the required
    connectivity options
  prefs: []
  type: TYPE_NORMAL
- en: 'From there, you would save this information and exit the `nmtui` GUI and then
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output from the command is shown in the following screenshot from the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Command to reload the interface to gain the new settings you
    specified](img/Figure_5.06_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6 – Command to reload the interface to gain the new settings you specified
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can run the following command from SSH if you do not have
    direct access to the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following screenshot, you can see the output of the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Command to reload network manager in order to gain the new static
    settings](img/Figure_5.07_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.7 – Command to reload network manager in order to gain the new static
    settings
  prefs: []
  type: TYPE_NORMAL
- en: Using the basic out-of-the-box DHCP configuration to get online fast when available
    on your network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Out-of-the-box DHCP addressing will give you the IP addressing you need when
    physically connected to a network with a router and DHCP server running in order
    to obtain an IP automatically and connect to the network. This allows you to get
    online quickly without the need to know the connectivity settings such as subnet,
    gateway, or routing information.
  prefs: []
  type: TYPE_NORMAL
- en: Using DHCP at initial interface connectivity provided by an external source
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you first fire up your computer and plug it into the network, by default,
    most systems are configured to try to use DHCP. This handshake method allows for
    connectivity to the internet to occur faster and without direct intervention.
    For instance, in RHEL, when you fire up the interface when installing it, you
    will automatically have the configuration set to DHCP. This is due to most users
    having a serving DHCP server. This means that a handshake occurs between the DHCP
    server and the RHEL machine to provide it with connectivity information. This
    occurs in the form of the **DHCP Discover** message or the computer or client
    server asking for connectivity. The server replies with a **DHCP Offer** to provide
    the information. The client then responds with the **DHCP Request** for the information
    to connect. Finally, the DHCP server responds with a **DHCP Acknowledgement**
    that includes the information for connectivity. This can be seen in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – DHCP handshake](img/Figure_5.08_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.8 – DHCP handshake
  prefs: []
  type: TYPE_NORMAL
- en: Once you have the information from the DHCP server, your machine will be configured
    with an IP address, gateway, and DNS. This allows you to get online quicker and
    without the hassle of setting up the information yourself. In some cases, this
    is necessary because you neither have the required information (such as what IP
    addresses are free on your network) nor do you know what the gateway or DNS addresses
    are. By using DHCP, you are able to connect to the network reliably and without
    conflict and reach your local network.
  prefs: []
  type: TYPE_NORMAL
- en: In most enterprise environments, however, you will not use a DHCP server for
    application servers, but you will in most cases for providing connectivity to
    workers. Most application production servers are set through static or through
    automation using the next available application IP. This is why it is such a big
    deal to be able to set up a DHCP server as you will want the connectivity to be
    easy for your workers to be able to log in and get right to work. Knowing there
    is a need for a DHCP server, we will use it as a motivation to set up a DHCP server
    that will provide connectivity to internal workers at your company or your family
    at home.
  prefs: []
  type: TYPE_NORMAL
- en: 'With a DHCP server running and having connectivity, either through physical
    Ethernet or Wi-Fi, here is how you can set up DHCP IP addressing for your device.
    For this, you will need direct access to the server via the console or through
    the VM manager. Using the following command, you can check what your IP address
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'As the following screenshot demonstrates, your device currently has no IP address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9 – There is currently no IP address associated with the connected
    enp0s3 interface](img/Figure_5.09_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.9 – There is currently no IP address associated with the connected
    enp0s3 interface
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to use `nmtui` again as we did when working with static addresses,
    but this time, we will choose **Automatic**, which utilizes DHCP, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10 – Choosing the Automatic option within nmtui interface settings](img/Figure_5.10_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.10 – Choosing the Automatic option within nmtui interface settings
  prefs: []
  type: TYPE_NORMAL
- en: 'After you choose the `nmtui`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11 – Activating a connection within nmtui](img/Figure_5.11_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.11 – Activating a connection within nmtui
  prefs: []
  type: TYPE_NORMAL
- en: 'After you choose **Activate a connection**, you then need to choose the interface
    that is physically connected, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.12 – Choosing the correct interface you previously set up to enable
    connectivity](img/Figure_5.12_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.12 – Choosing the correct interface you previously set up to enable
    connectivity
  prefs: []
  type: TYPE_NORMAL
- en: 'After that is activated, the interface should come up and complete the DHCP
    handshake that was outlined previously to gain the information needed to make
    a network connection. Using the following command, you can see what IP address
    was obtained automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The connectivity information that was automatically obtained is shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.13 – The IP address and routing of the gateway](img/Figure_5.13_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.13 – The IP address and routing of the gateway
  prefs: []
  type: TYPE_NORMAL
- en: We have just set up your server or client machine to acquire network connectivity
    using DHCP. Through the automated system, you will be able to get online fast
    without having to worry about manually setting anything up. This is a big advantage
    for things that do not always need to have the same IP but only need network connectivity.
    Next, we will talk about creating a DHCP server to provide this type of functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up DHCP server configuration manually to provide DHCP services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some cases, there will not be a DHCP server already set up on the network.
    As a system administrator, it may fall upon you to set one up. This is due to
    the need for a DHCP server for desktop support in many cases, and a necessity
    to get workers online fast and with minimal effort. This could mean that they
    are physically plugged into the network using Wi-Fi or a **Virtual Private Network**
    (**VPN**) to connect. Regardless of how they are connecting, if they fall within
    the authorized connectivity, we need to provide them with the correct addressing
    information. This allows them access not only to the internet but also to their
    systems within the intranet of the internal company. Let’s get started with setting
    up a DHCP server manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing you are going to need to do is to install the `dhcp-server`
    package using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This output can be seen in the commands shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.14 – Installing the required dhcp-server package](img/Figure_5.14_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.14 – Installing the required dhcp-server package
  prefs: []
  type: TYPE_NORMAL
- en: 'From there, we will need to set the parameters within the correct configuration
    file so that `dhcp-server` knows what information to provide to the client machines.
    Using the following command, we can open and edit the `dhcpd.conf` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.15 – Editing the dhcpd.conf file to set the required network settings](img/Figure_5.15_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.15 – Editing the dhcpd.conf file to set the required network settings
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to save us somewhat of a headache, there is a trick that can be utilized.
    The trick is to look at the example of a configuration file and copy and paste
    the options. Once you''ve done that, you would then need to edit the options to
    match what your network requires to have the server provide the correct information
    to the clients. Using the following command, we can view the examples of working
    DHCP servers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This example can be found in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 5.16 – Example of a configured dhcp\uFEFFd.conf file](img/Figure_5.16_B18607.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 5.16 – Example of a configured dhcpd.conf file
  prefs: []
  type: TYPE_NORMAL
- en: 'Further within the example, you will see the main portion of what is necessary
    to set up that internal DHCP server for your clients. This portion is shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.17 – The necessary items fall under the “A slightly different configuration”
    section](img/Figure_5.17_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.17 – The necessary items fall under the “A slightly different configuration”
    section
  prefs: []
  type: TYPE_NORMAL
- en: 'By copying the subnet section and pasting it into the `dhcpd.conf` file, you
    can then edit it to the values you need easily without worrying about whether
    you missed any items. This configuration file is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.18 – Configuration for dhcp-server that provides a 192.168.1.0/24
    network](img/Figure_5.18_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.18 – Configuration for dhcp-server that provides a 192.168.1.0/24 network
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have all of the correct settings in your `dhcpd.conf` file, you can
    then start and enable the `dhcp-server` daemon in order to ensure that the server
    is running. We will use the following commands to enable and start the `dhcpd`
    service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The results of the commands are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.19 – Starting and enabling the service so that it starts at boot](img/Figure_5.19_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.19 – Starting and enabling the service so that it starts at boot
  prefs: []
  type: TYPE_NORMAL
- en: 'After we have started and enabled the service, it is always a good idea to
    check and ensure that the system has successfully started. We can use the following
    command to view the status of the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The status of `running` is shown in the following screenshot for `dhcp-server`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.20 – The status of running is shown for dhcp-server thus confirming
    it has been set up correctly](img/Figure_5.20_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.20 – The status of running is shown for dhcp-server thus confirming
    it has been set up correctly
  prefs: []
  type: TYPE_NORMAL
- en: 'As with all other services, we want to reach the outside world, for which we
    need to open a firewall to allow incoming broadcast requests for a DHCP lease.
    We will use the following commands to open and reload the firewall:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Opening the firewall command output is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.21 – Opening firewall ports for DHCP and reloading the firewall
    to allow connectivity](img/Figure_5.21_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.21 – Opening firewall ports for DHCP and reloading the firewall to
    allow connectivity
  prefs: []
  type: TYPE_NORMAL
- en: 'Previously, we skipped double-checking to ensure that the firewall rule was
    actually in place. This time, I wanted to showcase how you can check and see whether
    a service is allowed through your firewall. We will use the following command
    to view the services currently allowed by the firewall:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following screenshot, the command shows that the DHCP service is listed:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 5.22 – Using the \uFEFFfirewall-cmd --list-services command; you can\
    \ see it includes DHCP](img/Figure_5.22_B18607.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 5.22 – Using the firewall-cmd --list-services command; you can see it
    includes DHCP
  prefs: []
  type: TYPE_NORMAL
- en: We have set up a DHCP server to provide connectivity to client devices connected
    to the subnet. This allows you to control what IP addresses devices receive from
    static DHCP addressing to next-in-line IP address pools. We briefly showcased
    options such as `default-lease-time`, which is the time the machine will keep
    the IP address before making a new request, for example. Also, with static MAC
    address mapping, it allows you to know ahead of time what IP address your machine
    will receive from a DHCP server. This is helpful when setting up Ansible playbooks
    to run against a specific IP address, for example. Next, we are going to talk
    about how to set this service up through Ansible Automation to ensure that it
    is easily repeatable and to lower the possibility of human error.
  prefs: []
  type: TYPE_NORMAL
- en: Automating DHCP server configuration to provide DHCP services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to start by setting up Ansible’s inventory of systems, which,
    in our case, is [rhel1.example.com](https://rhel1.example.com) for our target
    device for the DHCP server. This will allow us to target only the device we are
    looking to run against; also, we will call out the server in our playbook to ensure
    that only `rhel1` is configured. Make a directory for your playbook, or you can
    have one directory with all of your playbooks, but it will use the same inventory
    so keep that in mind. In our case, we are going to make a directory in our `Documents`
    folder for the playbook and inventory to reside in, named `dhcp_server_playbook`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The inventory file should look something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.23 – DHCP server inventory file for the playbook to create the DHCP
    server](img/Figure_5.23_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.23 – DHCP server inventory file for the playbook to create the DHCP
    server
  prefs: []
  type: TYPE_NORMAL
- en: 'We will then move on to the playbook itself, where we will create tasks to
    install the DHCP server. First, we are going to want to point toward the inventory
    group we created so that no other hosts are updated. We will also set the `become`
    state to `true` in order to escalate our privileges, and `become_method` to `sudo`
    so that Ansible knows how to escalate privileges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We then need to add some tasks to start building the DHCP server itself. We
    will start by installing the `dhcp-server` package using the `package` module.
    We will set the task to install the latest version of the package as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: After we have installed the server, we will then set the configuration files
    using the templating module through the use of a Jinja template.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s look at the playbook layout, and then we will address the templates.
    We will use the `template` module to copy a template we have built to the system
    in order to configure `dhcp-server`. You will notice we are using a predefined
    variable of `playbook_dir` in order to point to the right location for the file.
    This is built into Ansible and is not something you need to configure yourself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s take a look at the `jinja2` template, which shows a normal `dhcpd.conf`
    layout for the subnet we want to create, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.24 – dhcpd.conf.j2 file for use with the Ansible playbook](img/Figure_5.24_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.24 – dhcpd.conf.j2 file for use with the Ansible playbook
  prefs: []
  type: TYPE_NORMAL
- en: 'After this is completed, we will then start and enable the service. Open the
    firewall rules for `dhcp` and reload the firewall:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we are going to run the playbook in order to set up the DHCP server.
    We will use the following command; if you have keys fully set up, this is not
    necessary, but I wanted to show you how to do it with passwords:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The output from running the playbook is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.25 – Successful run of the dhcp_server_playbook.yml](img/Figure_5.25_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.25 – Successful run of the dhcp_server_playbook.yml
  prefs: []
  type: TYPE_NORMAL
- en: With this running successfully, you can point your server toward the system
    to look for a DNS server. Since my system is currently on a DHCP server, it makes
    it harder to test as I am bridging the connections, but you can change the configuration
    to use a non-bridged connection such as an internal network in VirtualBox and
    you will be able to test the DHCP to see what it provides.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned how to automate the setup of a DHCP server. This
    allows us to provide DHCP to systems automatically. This allows the ease of use
    of connecting to a new network for client computers when running in an enterprise
    environment. Next, we will discuss the DNS and how that relates to network connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: Learning about the DNS and why you need to know about it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DNS is important to learn about as it simplifies how we find addresses of networked
    devices on the world wide web. Without the DNS to allow FQDNs to translate into
    IP addresses, we would all have to search for websites via IP. This would become
    confusing as there are so many websites we use today that remembering all the
    IP addresses for them would be hectic and unmanageable. This would inevitably
    lead to a database that you would have to look at each time you wanted to go to
    a website. Thus, the DNS was born, and it provides that function allowing you
    to remember friendly names of websites in order to access them, such as [google.com](https://google.com).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up DNS server configuration manually to provide DNS services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing we will need to do is install the `bind` package for the DNS
    to be able to run. This allows for the daemon needed to serve the DNS entries
    to the systems. We will start by using `sudo dnf install bind -y`, with the output
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 5.26 – Bind \uFEFFbeing installed through the package manager](img/Figure_5.26_B18607.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 5.26 – Bind being installed through the package manager
  prefs: []
  type: TYPE_NORMAL
- en: 'After `bind` is installed, we are going to go to the documentation to get a
    clear look at the items that need to be set. We can find the `named.conf` file
    example shown at the following path in the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.27 – Documentation location for bind settings](img/Figure_5.27_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.27 – Documentation location for bind settings
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have installed `bind` for the DNS, we are going to configure the `/etc/named.conf`
    file in order to set up the needed parameters. This file’s location is shown in
    the following screenshot and edited with the `sudo vi /``etc/named.conf` command:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 5.28 – Command to edit the /etc/named.conf file to configure \uFEFF\
    the DNS](img/Figure_5.28_B18607.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 5.28 – Command to edit the /etc/named.conf file to configure the DNS
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice that the first things that need to be set up are the listening
    ports and interfaces. The DNS listens on port `53` as that is the well-known (default)
    port for the DNS that is set up in the networking world. We are going to adjust
    the settings so that we listen for incoming requests on port `53` on any interface
    connected to the network. This configuration is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.29 – Interface settings for DNS port 53](img/Figure_5.29_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.29 – Interface settings for DNS port 53
  prefs: []
  type: TYPE_NORMAL
- en: 'The next portion of the configuration file we are concerned with is the location
    of the zone files. A zone file is what tells the DNS what IP addresses to give
    to an FQDN (these files are what are looked up when you search for a website such
    as [www.google.com](https://www.google.com)), which then returns an IP address
    to your computer via the DNS so that it can reach the destination. In this case,
    as you can see in the following screenshot, the location of these files is the
    `/``var/named` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.30 – Zone file directory location](img/Figure_5.30_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.30 – Zone file directory location
  prefs: []
  type: TYPE_NORMAL
- en: 'When setting up an authoritative DNS server, or what is known as a top-level
    DNS server, you will want to set `recursion` to `no` for something like a lab
    environment or even an exam where you would like DNS to learn from other DNS servers''
    upstream information. Then, to save that information, such as a DNS entry, you
    will want `recursion` set to `yes`. In our case, for this example, we are setting
    it to `no` as we want to be top level, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.31 – Recursion is set to no for authoritative DNS servers](img/Figure_5.31_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.31 – Recursion is set to no for authoritative DNS servers
  prefs: []
  type: TYPE_NORMAL
- en: 'The next thing we are going to set up is a zone file location for a master
    forward lookup zone. A forward lookup zone is used to look up the IP address of
    the DNS FQDN when provided. This allows for your computer or server to be able
    to find the item that it is attempting to reach over the internet or intranet.
    The `example.com` zone is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.32 – The example.com zone file location provided to the named.conf
    file](img/Figure_5.32_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.32 – The example.com zone file location provided to the named.conf
    file
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we are going to set up a reverse zone lookup file location within the
    `named.conf` file. This is so that if you were to look up the IP address in your
    system, it would provide the FQDN for that IP address. This `192.168.1.0` PTR
    record, which, in our case, will point to `example.com`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.33 – PTR record location provided to named.conf file for 192.168.1.0
    zone](img/Figure_5.33_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.33 – PTR record location provided to named.conf file for 192.168.1.0
    zone
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have added the needed zone file locations to `named.conf`, we need
    to create the zone files for DNS to be able to look up information related to
    the DNS records. We can use the localhost example provided in `/var/named/named.localhost`
    to showcase the needed items for a zone file. This zone file example is shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.34 – Example zone file for DNS records](img/Figure_5.34_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.34 – Example zone file for DNS records
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the previous screenshot, there are some different items we need
    to go into detail about. First would be the `@` with a `.`) of the administrator
    of the DNS server. The next important items listed in this file are the records
    themselves. These include `A` records (which are IPV4 DNS records), `AAAA` records
    (which are IPV6 records), and `NS` records (which are name server records and
    determine what the DNS servers that are utilized are set at and are needed for
    all zone files). The serial number is important as it helps to identify whether
    a DNS record that is retrieved by the host machine is up to date or not. The end
    `.` (dot) is used on the named items when they are FQDNs that can be reached.
    In the following screenshot, you will see how we set up a simple zone file for
    `example.com`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.35 – Zone file configured for example.com with A records and NS
    records set](img/Figure_5.35_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.35 – Zone file configured for example.com with A records and NS records
    set
  prefs: []
  type: TYPE_NORMAL
- en: 'Following that zone setup, we will then set up the PTR zone for reverse DNS
    lookup. This is accomplished in the same format but with the reverse DNS layout
    of the IP address in reverse of the record, which allows servers to be discovered
    using the IP address instead of the name. This record type and setup are shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.36 – Zone file for PTR reverse DNS lookup of the 192.168.1.0 subnet
    for example.com](img/Figure_5.36_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.36 – Zone file for PTR reverse DNS lookup of the 192.168.1.0 subnet
    for example.com
  prefs: []
  type: TYPE_NORMAL
- en: 'After our configuration files are set up and our zone files are populated,
    we will then want to enable and start the named service provided by the `bind`
    package to provide the DNS to systems pointed at it for DNS records. This is accomplished
    with the commands in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 5.37 – Start and enable the named service to provide \uFEFFthe DNS](img/Figure_5.37_B18607.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 5.37 – Start and enable the named service to provide the DNS
  prefs: []
  type: TYPE_NORMAL
- en: 'To ensure that the DNS is up and running, we will use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now view the output status of the named service, as shown in the following
    screenshot, which shows it is actively running without any failures:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 5.38 – Status of the named service for \uFEFFthe DNS](img/Figure_5.38_B18607.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 5.38 – Status of the named service for the DNS
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to ensure that the DNS service can be reached by outside systems,
    we need to allow it within the firewall. We will use the following commands to
    start, enable, and apply firewall rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `firewalld` setup, start and enable output, and commands are shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.39 – Allowed DNS and then reloaded the firewall for connectivity](img/Figure_5.39_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.39 – Allowed DNS and then reloaded the firewall for connectivity
  prefs: []
  type: TYPE_NORMAL
- en: 'To ensure that the system is providing the DNS records that we set up in the
    zone files, we will do a dig lookup on the specific DNS server for a system we
    propagated in the zone file. Keep in mind that whenever you update a zone file,
    you need to reload `named.service` as well. We will use the `dig` command to do
    a DNS lookup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the `dig or lookup of a record from a DNS server`
    from the DNS server we created the information for `rhel2.example.com`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.40 – DNS dig lookup of the rhel2.example.com server](img/Figure_5.40_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.40 – DNS dig lookup of the rhel2.example.com server
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned how to manually set up a DNS server. This is crucial
    in enhancing your understanding of how the DNS works and why it is used. We showed
    how forward and reverse zones are set up to allow for connectivity as well as
    installing the service needed. Next, we are going to delve into automating a DNS
    server creation using Ansible Automation.
  prefs: []
  type: TYPE_NORMAL
- en: Automating DNS server configuration to provide DNS services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next up, we are going to learn how to set up a DNS server using Ansible Automation
    through Jinja templates as we did with our DHCP setup. These files might need
    to be altered for your setup, but you will come to understand the principles of
    how to complete the Ansible playbook.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to start by creating the directory for the playbook using the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of these commands can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.41 – Creating the playbook directory](img/Figure_5.41_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.41 – Creating the playbook directory
  prefs: []
  type: TYPE_NORMAL
- en: 'We are then going to create the inventory inside the new directory. This inventory
    example can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.42 – Example of an inventory](img/Figure_5.42_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.42 – Example of an inventory
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will start writing our playbook and then move on to creating the
    Jinja2 templates. As always, we will begin our playbook as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will move on to the tasks that we need to complete in order to install
    `bind`, which installs `named.service`, which runs the DNS server. We will then
    copy over the configuration files for `named.conf` and the zones. Then, we will
    update the firewall and test the name resolution. Please keep in mind that you
    will want to substitute any IP addresses for those of your systems and your DNS
    server for this playbook. The tasks are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Once that is complete, we will create our `named.conf` and zone files as `.``j2`
    templates.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `named.conf` file can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.43 – The named.conf file truncated for reading](img/Figure_5.43_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.43 – The named.conf file truncated for reading
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the forward zone file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.44 – Forward zone file example.com.zone.j2](img/Figure_5.44_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.44 – Forward zone file example.com.zone.j2
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we have the reverse zone file for the PTR records in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.45 – Reverse zone file 1.168.192.zone.j2](img/Figure_5.45_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.45 – Reverse zone file 1.168.192.zone.j2
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating that, we will run the playbook using the following command again,
    which illustrates if you need to run the command without SSH keys set up. If you
    have SSH keys set up, you can omit `-k -ask-become`. Also, we are going to add
    verbosity so that we can see more of the standard out type of logs output by adding
    `-v`; this command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a successful playbook run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.46 – Playbook output](img/Figure_5.46_B18607.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.46 – Playbook output
  prefs: []
  type: TYPE_NORMAL
- en: This wraps up working with Ansible Automation to automate your DNS servers.
    The use of Ansible Automation allows you to create these servers easily, and when
    you need to replicate them for any reason, such as **Disaster Recovery** (**DR**),
    you are able to do so quickly. This allows you to ensure that the configurations
    are copied over correctly every time without errors that can sometimes occur during
    human intervention.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about IP addressing, DHCP, and DNS. We learned what
    is needed to get you started connecting on the internet and how it applies to
    you and your company. We were able to set up these programs to establish automatic
    DNS and DHCP via your very own servers. This allows you to control how your network
    is set up and how you connect to the intranet or internet. In the next chapter,
    we are going to learn about printers and email. The ability to set up these services
    is crucial to normal enterprise infrastructure and an important part of every
    company. Email servers and print servers are important as they allow the company
    to perform day-to-day business without faltering. I look forward to seeing you
    in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 3: Red Hat Linux 8 – Configuring and Maintaining Applications with Automation
    and a Comprehensive Review with Exam Tips'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, you will learn to set up and maintain applications manually and
    automatically, and we will also provide a comprehensive review and tips and tricks
    to pass the EX358 exam.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part contains the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B18607_06.xhtml#_idTextAnchor076), *Printer and Email – Setting
    up Printers and Email Services on Linux Servers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B18607_07.xhtml#_idTextAnchor085), *Databases – Setting up and Working
    with MariaDB SQL Databases*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B18607_08.xhtml#_idTextAnchor094), *Web Servers and Web Traffic
    – Learning How to Create and Control Traffic*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B18607_09.xhtml#_idTextAnchor104), *Comprehensive Review and Test
    Exam Questions*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B18607_10.xhtml#_idTextAnchor123), *Tips and Tricks to Help
    with the Exam*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
