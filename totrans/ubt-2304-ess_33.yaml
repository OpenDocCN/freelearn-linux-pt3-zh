- en: 34\. Adding a New Disk to an Ubuntu 23.04 Volume Group and Logical Volume
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we looked at adding a new disk drive to an Ubuntu system,
    creating a partition and file system, and then mounting that file system to access
    the disk. An alternative to creating fixed partitions and file systems is to use
    Logical Volume Management (LVM) to create logical disks comprising space from
    one or more physical or virtual disks or partitions. The advantage of using LVM
    is that space can be added to or removed from logical volumes without spreading
    data over multiple file systems.
  prefs: []
  type: TYPE_NORMAL
- en: Let us take, for example, the root (/) file system of an Ubuntu-based server.
    Without LVM, this file system would be created with a specific size when the operating
    system is installed. If a new disk drive is installed, there is no way to allocate
    any of that space to the / file system. The only option would be to create new
    file systems on the new disk and mount them at particular mount points. In this
    scenario, you would have plenty of space on the new file system, but the / file
    system would still be nearly full. The only option would be to move files onto
    the new file system. With LVM, the new disk (or part thereof) can be assigned
    to the logical volume containing the home file system, thereby dynamically extending
    the space available.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look at the steps necessary to add new disk space to
    both a volume group and a logical volume to add additional space to the home file
    system of an Ubuntu system.
  prefs: []
  type: TYPE_NORMAL
- en: 34.1 An Overview of Logical Volume Management (LVM)
  prefs: []
  type: TYPE_NORMAL
- en: LVM provides a flexible and high-level approach to managing disk space. Instead
    of each disk drive being split into partitions of fixed sizes onto which fixed-size
    file systems are created, LVM provides a way to group disk space into logical
    volumes that can be easily resized and moved. In addition, LVM allows administrators
    to carefully control disk space assigned to different groups of users by allocating
    distinct volume groups or logical volumes to those users. When the space initially
    allocated to the volume is exhausted, the administrator can add more space without
    moving the user files to a different file system.
  prefs: []
  type: TYPE_NORMAL
- en: 'LVM consists of the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: 34.1.1 Volume Group (VG)
  prefs: []
  type: TYPE_NORMAL
- en: The Volume Group is the high-level container with one or more logical and physical
    volumes.
  prefs: []
  type: TYPE_NORMAL
- en: 34.1.2 Physical Volume (PV)
  prefs: []
  type: TYPE_NORMAL
- en: A physical volume represents a storage device such as a disk drive or other
    storage media.
  prefs: []
  type: TYPE_NORMAL
- en: 34.1.3 Logical Volume (LV)
  prefs: []
  type: TYPE_NORMAL
- en: A logical volume is equivalent to a disk partition and, as with a disk partition,
    can contain a file system.
  prefs: []
  type: TYPE_NORMAL
- en: 34.1.4 Physical Extent (PE)
  prefs: []
  type: TYPE_NORMAL
- en: Each physical volume (PV) is divided into equal size blocks known as physical
    extents.
  prefs: []
  type: TYPE_NORMAL
- en: 34.1.5 Logical Extent (LE)
  prefs: []
  type: TYPE_NORMAL
- en: Each logical volume (LV) is divided into equal size blocks called logical extents.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we are creating a new volume group called VolGroup001\. This volume
    group needs physical disk space to function, so we allocate three disk partitions
    /dev/sda1, /dev/sdb1, and /dev/sdb2\. These become physical volumes in VolGroup001\.
    We would then create a logical volume called LogVol001 within the volume group
    comprising the three physical volumes.
  prefs: []
  type: TYPE_NORMAL
- en: If we run out of space in LogVol001, we add more disk partitions as physical
    volumes and assign them to the volume group and logical volume.
  prefs: []
  type: TYPE_NORMAL
- en: 34.2 Getting Information about Logical Volumes
  prefs: []
  type: TYPE_NORMAL
- en: As an example of using LVM with Ubuntu, we will work through an example of adding
    space to the / file system of a standard Ubuntu installation. Anticipating the
    need for flexibility in the sizing of the root partition, Ubuntu sets up the /
    file system as a logical volume (called ubuntu_lv) within a volume group called
    ubuntu-vg. Before making any changes to the LVM setup, however, it is essential
    first to gather information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the mount command will output information about a range of mount points,
    including the following entry for the home filesystem:'
  prefs: []
  type: TYPE_NORMAL
- en: /dev/mapper/ubuntu--vg-ubuntu--lv on / type ext4 (rw,relatime)
  prefs: []
  type: TYPE_NORMAL
- en: 'Information about the volume group can be obtained using the vgdisplay command:'
  prefs: []
  type: TYPE_NORMAL
- en: vgdisplay
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '--- Volume group ---'
  prefs: []
  type: TYPE_NORMAL
- en: VG Name ubuntu-vg
  prefs: []
  type: TYPE_NORMAL
- en: System ID
  prefs: []
  type: TYPE_NORMAL
- en: Format lvm2
  prefs: []
  type: TYPE_NORMAL
- en: Metadata Areas 1
  prefs: []
  type: TYPE_NORMAL
- en: Metadata Sequence No 2
  prefs: []
  type: TYPE_NORMAL
- en: VG Access read/write
  prefs: []
  type: TYPE_NORMAL
- en: VG Status resizable
  prefs: []
  type: TYPE_NORMAL
- en: MAX LV 0
  prefs: []
  type: TYPE_NORMAL
- en: Cur LV 1
  prefs: []
  type: TYPE_NORMAL
- en: Open LV 1
  prefs: []
  type: TYPE_NORMAL
- en: Max PV 0
  prefs: []
  type: TYPE_NORMAL
- en: Cur PV 1
  prefs: []
  type: TYPE_NORMAL
- en: Act PV 1
  prefs: []
  type: TYPE_NORMAL
- en: VG Size <295.04 GiB
  prefs: []
  type: TYPE_NORMAL
- en: PE Size 4.00 MiB
  prefs: []
  type: TYPE_NORMAL
- en: Total PE 75529
  prefs: []
  type: TYPE_NORMAL
- en: Alloc PE / Size 75529 / <295.04 GiB
  prefs: []
  type: TYPE_NORMAL
- en: Free PE / Size 0 / 0
  prefs: []
  type: TYPE_NORMAL
- en: VG UUID IIGC9W-1UBx-fajE-SMoK-rUdn-qw8E-0omd5P
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see in the above example, the ubuntu-vg volume group has a physical
    extent size of 4.00MiB and has a total of 295.04GB available for allocation to
    logical volumes. Currently, 75529 physical extents are allocated, equaling the
    total capacity. Therefore, we must add one or more physical volumes to increase
    the space allocated to any logical volumes in the ubuntu-vg volume group. The
    vgs tool is also helpful for displaying a quick overview of the space available
    in the volume groups on a system:'
  prefs: []
  type: TYPE_NORMAL
- en: vgs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'VG #PV #LV #SN Attr VSize VFree'
  prefs: []
  type: TYPE_NORMAL
- en: ubuntu-vg 1 1 0 wz--n- <295.04g 0
  prefs: []
  type: TYPE_NORMAL
- en: 'Information about logical volumes in a volume group may similarly be obtained
    using the lvdisplay command:'
  prefs: []
  type: TYPE_NORMAL
- en: lvdisplay
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '--- Logical volume ---'
  prefs: []
  type: TYPE_NORMAL
- en: LV Path /dev/ubuntu-vg/ubuntu-lv
  prefs: []
  type: TYPE_NORMAL
- en: LV Name ubuntu-lv
  prefs: []
  type: TYPE_NORMAL
- en: VG Name ubuntu-vg
  prefs: []
  type: TYPE_NORMAL
- en: LV UUID DaPi0C-vwvy-UudI-aUJQ-mFqx-rIhZ-rT7uHH
  prefs: []
  type: TYPE_NORMAL
- en: LV Write Access read/write
  prefs: []
  type: TYPE_NORMAL
- en: LV Creation host, time ubuntu, 2023-07-26 15:42:23 -0400
  prefs: []
  type: TYPE_NORMAL
- en: LV Status available
  prefs: []
  type: TYPE_NORMAL
- en: '# open 1'
  prefs: []
  type: TYPE_NORMAL
- en: LV Size <295.04 GiB
  prefs: []
  type: TYPE_NORMAL
- en: Current LE 75529
  prefs: []
  type: TYPE_NORMAL
- en: Segments 1
  prefs: []
  type: TYPE_NORMAL
- en: Allocation inherit
  prefs: []
  type: TYPE_NORMAL
- en: Read ahead sectors auto
  prefs: []
  type: TYPE_NORMAL
- en: '- currently set to 256'
  prefs: []
  type: TYPE_NORMAL
- en: Block device 253:0
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the above example, 295.04 GiB of the space in volume group ubuntu-vg
    is allocated to logical volume ubuntu-lv (for the / file system).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we know what space is being used, it is often helpful to understand
    which devices are providing the space (in other words, which devices are being
    used as physical volumes). To obtain this information, we need to run the pvdisplay
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: pvdisplay
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '--- Physical volume ---'
  prefs: []
  type: TYPE_NORMAL
- en: PV Name /dev/sda3
  prefs: []
  type: TYPE_NORMAL
- en: VG Name ubuntu-vg
  prefs: []
  type: TYPE_NORMAL
- en: PV Size <295.04 GiB / not usable 4.00 MiB
  prefs: []
  type: TYPE_NORMAL
- en: Allocatable yes (but full)
  prefs: []
  type: TYPE_NORMAL
- en: PE Size 4.00 MiB
  prefs: []
  type: TYPE_NORMAL
- en: Total PE 75529
  prefs: []
  type: TYPE_NORMAL
- en: Free PE 0
  prefs: []
  type: TYPE_NORMAL
- en: Allocated PE 75529
  prefs: []
  type: TYPE_NORMAL
- en: PV UUID mdde89-ZZS8-6ila-qoZy-ofLp-zxEq-dhifen
  prefs: []
  type: TYPE_NORMAL
- en: Clearly, the space controlled by logical volume ubuntu-vg is provided via a
    physical volume located on /dev/sda2\.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know more about our LVM configuration, we can add space to the volume
    group and the logical volume contained within.
  prefs: []
  type: TYPE_NORMAL
- en: 34.3 Adding Additional Space to a Volume Group from the Command-Line
  prefs: []
  type: TYPE_NORMAL
- en: Just as with the previous steps to gather information about the current Logical
    Volume Management configuration of an Ubuntu system, changes to this configuration
    can be made from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the remainder of this chapter, we will assume that a new disk has been added
    to the system and that the operating system sees it as /dev/sdb. We shall also
    assume this is a new disk with no existing partitions. If existing partitions
    are present, they should be backed up, and then the partitions should be deleted
    from the disk using the fdisk utility. For example, assuming a device represented
    by /dev/sdb containing two partitions as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: fdisk -l /dev/sdb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Disk /dev/sdb: 14.46 GiB, 15525216256 bytes, 30322688 sectors'
  prefs: []
  type: TYPE_NORMAL
- en: 'Disk model: USB 2.0 FD'
  prefs: []
  type: TYPE_NORMAL
- en: 'Units: sectors of 1 * 512 = 512 bytes'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sector size (logical/physical): 512 bytes / 512 bytes'
  prefs: []
  type: TYPE_NORMAL
- en: 'I/O size (minimum/optimal): 512 bytes / 512 bytes'
  prefs: []
  type: TYPE_NORMAL
- en: 'Disklabel type: dos'
  prefs: []
  type: TYPE_NORMAL
- en: 'Disk identifier: 0x4c33060b'
  prefs: []
  type: TYPE_NORMAL
- en: Device Boot Start End Sectors Size Id Type
  prefs: []
  type: TYPE_NORMAL
- en: /dev/sdb1 2048 30322687 30320640 14.5G 83 Linux
  prefs: []
  type: TYPE_NORMAL
- en: 'Once any filesystems on these partitions have been unmounted, they can be deleted
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: fdisk /dev/sdb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to fdisk (util-linux 2.37.4).
  prefs: []
  type: TYPE_NORMAL
- en: Changes will remain in memory only, until you decide to write them.
  prefs: []
  type: TYPE_NORMAL
- en: Be careful before using the write command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Command (m for help): d'
  prefs: []
  type: TYPE_NORMAL
- en: Selected partition 1
  prefs: []
  type: TYPE_NORMAL
- en: Partition 1 has been deleted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Command (m for help): w'
  prefs: []
  type: TYPE_NORMAL
- en: The partition table has been altered.
  prefs: []
  type: TYPE_NORMAL
- en: Calling ioctl() to re-read partition table.
  prefs: []
  type: TYPE_NORMAL
- en: Syncing disks.
  prefs: []
  type: TYPE_NORMAL
- en: Before moving to the next step, remove any entries in the /etc/fstab file for
    these filesystems so that the system does not attempt to mount them on the next
    reboot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the disk is ready, the next step is to convert this disk into a physical
    volume using the pvcreate command (also wiping the dos signature if one exists):'
  prefs: []
  type: TYPE_NORMAL
- en: pvcreate /dev/sdb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'WARNING: dos signature detected on /dev/sdb at offset 510\. Wipe it? [y/n]:
    y'
  prefs: []
  type: TYPE_NORMAL
- en: Wiping dos signature on /dev/sdb.
  prefs: []
  type: TYPE_NORMAL
- en: Physical volume "/dev/sdb" successfully created.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the creation fails with a message that reads “Device /dev/<device> excluded
    by a filter”, it may be necessary to wipe the disk using the wipefs command before
    creating the physical volume:'
  prefs: []
  type: TYPE_NORMAL
- en: wipefs -a /dev/sdb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '/dev/sdb: 8 bytes were erased at offset 0x00000200 (gpt): 45 46 49 20 50 41
    52 54'
  prefs: []
  type: TYPE_NORMAL
- en: '/dev/sdb: 8 bytes were erased at offset 0x1fffffe00 (gpt): 45 46 49 20 50 41
    52 54'
  prefs: []
  type: TYPE_NORMAL
- en: '/dev/sdb: 2 bytes were erased at offset 0x000001fe (PMBR): 55 aa'
  prefs: []
  type: TYPE_NORMAL
- en: '/dev/sdb: calling ioctl to re-read partition table: Success'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the physical volume created, we now need to add it to the volume group
    (in this case, ubuntu-vg) using the vgextend command:'
  prefs: []
  type: TYPE_NORMAL
- en: vgextend ubuntu-vg /dev/sdb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Volume group "ubuntu-vg" successfully extended
  prefs: []
  type: TYPE_NORMAL
- en: 'The new physical volume has now been added to the volume group and is ready
    to be allocated to a logical volume. To do this, we run the lvextend tool providing
    the size by which we wish to extend the volume. In this case, we want to extend
    the size of the root logical volume by 14 GB. Note that we need to provide the
    path to the logical volume, which can be obtained from the lvdisplay command (in
    this case, /dev/ubuntu-vg/ubuntu-lv):'
  prefs: []
  type: TYPE_NORMAL
- en: lvextend -L+14G /dev/ubuntu-vg/ubuntu-lv
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Size of logical volume ubuntu-vg/ubuntu-lv changed from <295.04 GiB (75529 extents)
    to <309.04 GiB (79113 extents).
  prefs: []
  type: TYPE_NORMAL
- en: Logical volume ubuntu-vg/ubuntu-lv successfully resized.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step is to resize the file system residing on the logical volume to
    use the additional space. The way this is performed will depend on the filesystem
    type, which can be identified using the following df command and checking the
    Type column:'
  prefs: []
  type: TYPE_NORMAL
- en: df -T /
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Filesystem Type 1K-blocks Used Available Use% Mounted
  prefs: []
  type: TYPE_NORMAL
- en: /dev/mapper/ubuntu--vg-ubuntu--lv ext4 303396024 22139044 265772260 8% /
  prefs: []
  type: TYPE_NORMAL
- en: 'If / is formatted using the XFS filesystem, it can be resized using the xfs_growfs
    utility:'
  prefs: []
  type: TYPE_NORMAL
- en: xfs_growfs /
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If, on the other hand, the filesystem is of type ext2, ext3, or ext4, the resize2fs
    utility should be used instead when performing the filesystem resize:'
  prefs: []
  type: TYPE_NORMAL
- en: resize2fs /dev/ubuntu-vg/ubuntu-lv
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the resize completes, the file system will have been extended to use the
    additional space provided by the new disk drive. All this has been achieved without
    moving a single file or restarting the server. As far as users on the system are
    concerned, nothing has changed (except that there is now more disk space).
  prefs: []
  type: TYPE_NORMAL
- en: 34.4 Summary
  prefs: []
  type: TYPE_NORMAL
- en: Volume groups and logical volumes provide an abstract layer on top of the physical
    storage devices on an Ubuntu system to provide a flexible way to allocate the
    space provided by multiple disk drives. This allows disk space allocations to
    be made and changed dynamically without the need to repartition disk drives and
    move data between filesystems. This chapter has outlined the basic concepts of
    volume groups and logical and physical volumes while demonstrating how to manage
    these using command-line tools.
  prefs: []
  type: TYPE_NORMAL
