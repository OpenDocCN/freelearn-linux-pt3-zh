- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Shell and Its Commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll be doing a lot of things in the shell, such as installing packages, making
    new users, creating directories, modifying permissions of files, and so on. These
    will be the basics but will be your first interaction with the shell to understand
    what is happening behind it and to get more confident. In order to improve our
    effectiveness with the shell, we’ll be devoting an entire chapter to it this time
    around.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: A basic definition of a shell in order to understand how it works, including
    an overview of its features and a description of the most common shells
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use basic commands in order to get familiarized with Linux (in this chapter,
    CentOS version 8 will be used)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic notions about how to use commands to change the ownership of files and
    directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a shell?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Computer software known as a *shell* makes an operating system’s services accessible
    to users or other programs.
  prefs: []
  type: TYPE_NORMAL
- en: A shell is a program that receives commands and sends them to the operating
    system for processing, to put it simply. In an interactive session, the user has
    the option of typing commands from the keyboard, or they can be written in a shell
    script that can be reused. On a Unix-type system such as Linux in the past, it
    was the sole **user interface** (**UI**) accessible. Today, in addition to **command-line
    interfaces** (**CLIs**) such as shells, we also have **graphical** **UIs** (**GUIs**).
  prefs: []
  type: TYPE_NORMAL
- en: The fundamental capability of shells is the ability to launch command-line programs
    that are already installed on the system. They also offer built-ins and scripting
    control structures such as conditionals and loops. Each shell has its own way
    of doing that. Some shells still support the Bourne shell, one of the original
    shells that was created for an early Unix system by a programmer named Steve Bourne
    and later standardized in the `csh`/`tcsh`, `zsh`, and `fish`, purposefully utilize
    a different syntax.
  prefs: []
  type: TYPE_NORMAL
- en: In order to use command-line shells, a user must be knowledgeable about commands,
    their calling syntax, and the fundamentals of the shell’s specific scripting language.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Linux user can utilize a variety of shells, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sh`: A POSIX-compatible Bourne shell. In modern distros, it’s usually just
    **Bourne again shell** (**Bash**) running in compatibility mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`csh`/`tcsh`: These come from the **Berkeley Software Distribution** (**BSD**)
    Unix system family but are also available on Linux; their scripting syntax is
    similar to that of C, and they are incompatible with the Bourne shell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ksh`: A Bourne shell derivative that was once very popular.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bash`: Bash is the most common Linux shell and was created for the GNU project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zsh` and `fish`: These are highly customizable and feature-rich shells that
    are intentionally different from `sh` derivatives and require learning, but have
    large communities of enthusiasts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They all share similar properties, but each has its own unique attributes.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will assume you are using Bash since it’s the default in most
    Linux distributions.
  prefs: []
  type: TYPE_NORMAL
- en: The Unix shell and Bash command language were both developed by Brian Fox for
    the GNU project. These were intended to serve as free software replacements for
    the Bourne shell. Since its introduction in 1989, it has remained the default
    login shell for the vast majority of Linux distributions. Linus Torvalds ported
    Bash and the **GNU Compiler Collection** (**GCC**) to Linux as one of the initial
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bash has the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: The shell will check to see whether a command is built in before searching through
    a list of directories to locate the program if not. This set is known as the search
    path. By running the `echo $PATH` command in Bash, you can view it. The `home`
    directory and its subdirectory are included in the search path in addition to
    the current directory. You are able to create your own programs and call them
    up just by inputting their names. No matter which directory you are now in, a
    program such as this will be found and launched if it is stored in the `bin` directory.
    We will find out more about the Linux directory structure in [*Chapter 3*](B18575_03.xhtml#_idTextAnchor040),
    *The* *Linux* *Filesystem*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As with other Linux programs, the shell has a current directory linked to it.
    When looking for files, Linux-based programs begin in the current directory. To
    move the current directory to another location in the Linux filesystem, use the
    `cd` shell command. The current working directory is typically visible in the
    command prompt of modern shells. To check the version of your shell, run the `echo
    $SHELL` command. You will get an output such as `/bin/bash`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A command is executed by designating it. The majority of Linux commands are
    just programs that the shell runs. For instance, the following `ls` command scans
    the current directory and lists the names of its files: `ls -la`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Commands frequently have argument strings that could, for example, be filenames.
    For instance, the following command switches to the `tmp` directory in your `home`
    directory. The shell interprets the tilde character as your `home` directory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Multiple arguments are required for some commands. The copy command, for instance,
    requires two arguments: the file to copy and its destination. This is demonstrated
    as follows by copying `file1` to a new file, `file2`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The flag or option argument strings for some commands typically start with
    `-`. The flags change how the invoked application behaves. When the following
    command is used, `ls` outputs a lengthy listing of files arranged by creation
    time:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Wildcards will be expanded by the shell to match filenames in the current directory.
    For example, to display a directory listing of files named `anything.sh`, type
    the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`cat` is an abbreviation for *concatenate*. When run, the following command
    will show you the contents of one or more files without requiring you to open
    them for editing:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The shell has the ability to pipe data from one program’s output to another’s
    input. `|` is the pipe symbol. To count the number of words in `testfile.txt`,
    we can concatenate the file and pass the output into the `wc` program, like so:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Or, to count the number of lines from a `testfile.txt` file, we can use the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You can create aliases for commands or groups of commands that you use frequently
    or find difficult to input. For instance, we could use the `top10` alias to find
    the top 10 files in the current directory. `head` will show only the top lines.
    An alias is a shortcut for a command—for example, rather than remembering a very
    long command, you can create an alias that you can remember easily. Here’s an
    example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Some variables are predefined, such as `$HOME`, which is your `home` directory.
    To see a list of assigned variables, type the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A **manual** (**man**) page is like a manual with instructions and descriptions
    about each command. Run the following command to view the man page for Bash:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Scripts* of shell commands can be written. These can be called just like compiled
    programs (that is, just by naming them). For instance, we first create a file
    in `/bin` containing the following in order to construct a script named `top10.sh`
    that displays the top 10 biggest files in the current directory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We must next use the `chmod` command to make the file executable before we
    can run it normally:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See the man page on `bash` for more details (type `man bash`).
  prefs: []
  type: TYPE_NORMAL
- en: The up arrow key on the keyboard in Bash’s extra mechanism enables you to access
    and modify past commands. The most recent command is displayed on Terminal again
    when you press the up arrow key. To access previous commands, press the up arrow
    key once more. Press *Enter* to run the command once more. Use the *Delete* key
    to remove characters from the command’s end, or the back arrow key to move the
    cursor and change the command’s contents by inserting or deleting characters.
  prefs: []
  type: TYPE_NORMAL
- en: By using the `history` command, you can view the history of commands.
  prefs: []
  type: TYPE_NORMAL
- en: You can rerun any command from the history by pressing `!` and the line number—for
    example, `!345`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to interact with the shell and what is happening when
    you type these commands, in the next section, we will try to practice some basic
    commands to make you more confident when you interact with Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Basic shell commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s a rundown of some of the possible commands. For more information, see
    the man page for each command. Using the `man` command, you can view these online.
    Simply type `man` followed by the command name you wish to see (for example, if
    you want to learn more about the `cat` command, simply type `man cat`):'
  prefs: []
  type: TYPE_NORMAL
- en: '`pwd`: The `pwd` command can be used to determine which directory you are in.
    Its name is an abbreviation for `/`). You can see the `pwd` command in use in
    the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.1 – pwd command, showing the working directory](img/Figure_2.01_B18575.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – pwd command, showing the working directory
  prefs: []
  type: TYPE_NORMAL
- en: '`mkdir`: `mkdir` is the command to use when you need to make a new directory.
    Put `mkdir packt` on your command line to make a directory with that name. To
    list your created directory, use the `ls –ld <directory_name>` command. You can
    see the `mkdir` command in use here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.2 – mkdir command](img/Figure_2.02_B18575.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – mkdir command
  prefs: []
  type: TYPE_NORMAL
- en: '`rmdir`: To delete a directory, use `rmdir`. However, `rmdir` can only be used
    to remove an empty directory. To remove files and directories, use `rm -rf directoryname/`
    (where `–rf` will recursively remove all the files and directories from inside
    the directory). To check whether a directory has been removed, use `ls –ld <directory_name>`.
    The `rmdir` command is shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.3 – rmdir command](img/Figure_2.03_B18575.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – rmdir command
  prefs: []
  type: TYPE_NORMAL
- en: '`touch`: The command’s initial intent was to set the file modification date
    to the current time. But since it will make a file if one doesn’t already exist,
    it’s frequently used to make empty files. Here’s an example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`ls`: Use the `ls` command to see all files and directories inside the directory
    you are in. If you want to see hidden files, use the `ls -a` command. By using
    the `ls -la` command, you can see all the files and directories as a list, as
    illustrated here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.4 – ls command](img/Figure_2.04_B18575.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – ls command
  prefs: []
  type: TYPE_NORMAL
- en: '`cp`: To copy files from the command line, use the `cp` command. This requires
    two arguments: the first specifies the location of the file to be copied, and
    the second specifies where to copy it. It could be a new folder or a new file
    (in case you need a copy of it). You can see the `cp` command in use here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.5 – cp and ls commands](img/Figure_2.05_B18575.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – cp and ls commands
  prefs: []
  type: TYPE_NORMAL
- en: '`mv`: You can use the `mv` command to move a file or directory from one location
    to another or even to rename a file. For example, you can rename a file from `file1.txt`
    to `file2.txt` by running the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`rm`: `rm` is used to remove files or directories, while the `-r` or `–f` parameter
    is used to recursively remove a directory (`-r`) or force remove a file or directory
    (`-f`). As always, use `man` to find out all the options possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`locate`: The `locate` command is useful when you forget the location of a
    file. Using the `-i` argument helps to ignore case sensitivity. So, if you want
    to find a file named `file1.txt`, run the `locate -i file1.txt` command. This
    is the equivalent of search in Windows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are some basic commands that showed you how to list a file, check your
    working directory, create a directory, copy a file to another file, and so on.
    In the next section, we will use some more advanced commands.
  prefs: []
  type: TYPE_NORMAL
- en: Intermediate shell commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous section, we used some basic commands in order to get used to
    Terminal. In this section, we will get familiar with more advanced commands, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`echo`: The `echo` command allows you to display content that can be added
    to either a new or an existing file or to replace the content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to add content to an existing file, you can use `echo "content to
    be appended" >>file1.txt`. Or, you can use `echo "this content will replace" >
    file1.txt` to replace the content of a file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can see the `echo` command in use here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – echo command](img/Figure_2.06_B18575.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – echo command
  prefs: []
  type: TYPE_NORMAL
- en: '`cat`: The `cat` command is normally used to read the content of a file, as
    illustrated here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.7 – cat command](img/Figure_2.07_B18575.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – cat command
  prefs: []
  type: TYPE_NORMAL
- en: You can use the `cat` command and append the output to a new file using `>>`.
    This is the same for any output—for example, you can use `ls –la >> files-directories.txt`
    to redirect the result of the `ls –la` command into a file.
  prefs: []
  type: TYPE_NORMAL
- en: '`df`: A great command for quickly viewing your filesystem and all mounted drives
    is the `df` command (which stands for *disk-free*). You can see the overall disk
    size, the amount of space used, the amount of space available, the utilization
    percentage, and the partition that the disk is mounted on. I advise using it along
    with the `-h` parameter to make the data legible by humans. The data that you
    see here was derived from the filesystem level or mount point:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.8 – df command](img/Figure_2.08_B18575.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – df command
  prefs: []
  type: TYPE_NORMAL
- en: '`du`: When used appropriately, the `du` command (which stands for disk usage)
    works great. When you need to know the size of a specific directory or subdirectory,
    this command excels. It only reports on the supplied stats at the time of execution
    and operates at the object level. For instance, you can use the `du -sh /Documents`
    command to find out how much disk space Linux’s `Documents` folder consumes. This
    command works well when combined with the `-sh` flags to provide a summary of
    a given item in human-readable form (the directory and all subdirectories). You
    can see the `du` command in use here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.9 – du command](img/Figure_2.09_B18575.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – du command
  prefs: []
  type: TYPE_NORMAL
- en: '`uname`: The `uname` command displays information regarding the operating system
    that your Linux distribution is currently using. The majority of the information
    on the system can be printed by using the `uname -a` command. This displays the
    kernel release date, the version, the processor type, and other related information.
    You can see the `uname` command in use here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.10 – uname command](img/Figure_2.10_B18575.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 – uname command
  prefs: []
  type: TYPE_NORMAL
- en: '`chmod`: The system call and command used to modify the special mode flags
    and access permissions of filesystem objects are called `chmod`. These were first
    referred to collectively as its modes, and the name `chmod` was chosen as an acronym
    for change mode (more details about this in [*Chapter 7*](B18575_07.xhtml#_idTextAnchor118),
    *User and* *Group Management*).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s imagine you wish to change the permissions of a file called `file1.txt`
    so that the following is possible:'
  prefs: []
  type: TYPE_NORMAL
- en: The user can execute, read, and write it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Those in your group can read it and use it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Others may only read it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This command does the trick:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The symbolic permissions notation is used in this example. `u`, `g`, and `o`
    stand for *user*, *group*, and *other*, respectively. The letters `r`, `w`, and
    `x` stand for *read*, *write*, and *execute*, respectively, while the equals sign
    (`=`) signifies *establish the permissions precisely like this*. There are no
    spaces between the various authorization classes; only commas are used to divide
    them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the equivalent command using octal permissions notation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the numbers `7`, `5`, and `4` stand for the user, group, and other permissions,
    respectively, in that sequence. Each digit is made up of the digits `4`, `2`,
    `1`, and `0`, which denote the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`4` stands for *read*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Write* has the prefix `2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1` denotes *execute*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0` means *no authorization*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Therefore, `7` is made up of the permissions `4`+`2`+`1` (read, write, and execute),
    `5` (read, no write, and execute), and `4` (read, no write, and no execute).
  prefs: []
  type: TYPE_NORMAL
- en: '`chown`: To change the owner of system files and directories on Unix and Unix-like
    operating systems, use the `chown` command. This will change the ownership to
    the user (`voxsteel`) and group (`voxsteel`) for a specified filename or directory,
    as illustrated here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use `chgrp` if you’re a non-privileged user and want to modify the group membership
    of a file you own.
  prefs: []
  type: TYPE_NORMAL
- en: '`chgrp`: A filesystem object’s group can be changed to one to which they belong
    using the `chgrp` command, as illustrated in the following snippet. Three sets
    of access permissions are available for a filesystem object: one for owner, one
    for group, and one for others:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Searching the man pages with keywords can help you find a command even if you’ve
    forgotten its name. The `man -k` keyword is the syntax to use. Running this command
    on Terminal, for instance, will list Terminal-specific commands.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Redirection, Bash history, command aliases, command-line trickery, and more
    were some of the more sophisticated ideas related to shell commands that we covered
    in this chapter. Don’t worry if you’re having problems memorizing everything;
    it’s normal to feel overwhelmed by the amount of information presented here at
    first. I’ve been using Linux professionally for over 15 years, and I still don’t
    know everything there is to know about it.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will talk about filesystems, the differences between
    them, and the structure of the main system directories and what are they used
    for.
  prefs: []
  type: TYPE_NORMAL
