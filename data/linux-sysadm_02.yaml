- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: The Shell and Its Commands
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Shell及其命令
- en: We’ll be doing a lot of things in the shell, such as installing packages, making
    new users, creating directories, modifying permissions of files, and so on. These
    will be the basics but will be your first interaction with the shell to understand
    what is happening behind it and to get more confident. In order to improve our
    effectiveness with the shell, we’ll be devoting an entire chapter to it this time
    around.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在shell中做很多事情，比如安装软件包、创建新用户、创建目录、修改文件权限等。这些将是基础内容，但也是你首次与shell交互的机会，帮助你理解背后的工作原理并增加信心。为了提高我们在shell中的效率，我们将专门为它开设一章。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: A basic definition of a shell in order to understand how it works, including
    an overview of its features and a description of the most common shells
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对shell的基本定义，以便理解其工作原理，包括对其功能的概述和对最常见shell的描述
- en: How to use basic commands in order to get familiarized with Linux (in this chapter,
    CentOS version 8 will be used)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用基本命令以熟悉Linux（本章将使用CentOS 8版本）
- en: Basic notions about how to use commands to change the ownership of files and
    directories
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令改变文件和目录所有权的基本概念
- en: What is a shell?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是shell？
- en: Computer software known as a *shell* makes an operating system’s services accessible
    to users or other programs.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 被称为*shell*的计算机软件使操作系统的服务可供用户或其他程序访问。
- en: A shell is a program that receives commands and sends them to the operating
    system for processing, to put it simply. In an interactive session, the user has
    the option of typing commands from the keyboard, or they can be written in a shell
    script that can be reused. On a Unix-type system such as Linux in the past, it
    was the sole **user interface** (**UI**) accessible. Today, in addition to **command-line
    interfaces** (**CLIs**) such as shells, we also have **graphical** **UIs** (**GUIs**).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: shell是一个程序，接收命令并将其发送到操作系统进行处理，简单来说就是这样。在交互式会话中，用户可以选择从键盘输入命令，或者可以将命令写入可以重复使用的shell脚本。在过去的Unix类型系统（如Linux）中，它是唯一可访问的**用户界面**（**UI**）。如今，除了**命令行界面**（**CLI**）如shell外，我们还有**图形用户界面**（**GUI**）。
- en: The fundamental capability of shells is the ability to launch command-line programs
    that are already installed on the system. They also offer built-ins and scripting
    control structures such as conditionals and loops. Each shell has its own way
    of doing that. Some shells still support the Bourne shell, one of the original
    shells that was created for an early Unix system by a programmer named Steve Bourne
    and later standardized in the `csh`/`tcsh`, `zsh`, and `fish`, purposefully utilize
    a different syntax.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: shell的基本功能是启动系统中已经安装的命令行程序。它们还提供内建命令和脚本控制结构，如条件语句和循环。每个shell都有自己的实现方式。有些shell仍然支持Bourne
    shell，这是由程序员Steve Bourne为早期Unix系统创建的原始shell之一，后来在`csh`/`tcsh`、`zsh`和`fish`等shell中得到了标准化，并故意使用不同的语法。
- en: In order to use command-line shells, a user must be knowledgeable about commands,
    their calling syntax, and the fundamentals of the shell’s specific scripting language.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用命令行shell，用户必须了解命令、其调用语法以及shell特定脚本语言的基础知识。
- en: 'A Linux user can utilize a variety of shells, including the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Linux用户可以使用多种shell，包括以下几种：
- en: '`sh`: A POSIX-compatible Bourne shell. In modern distros, it’s usually just
    **Bourne again shell** (**Bash**) running in compatibility mode.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sh`：一种POSIX兼容的Bourne shell。在现代的发行版中，它通常只是以兼容模式运行的**Bourne Again Shell**（**Bash**）。'
- en: '`csh`/`tcsh`: These come from the **Berkeley Software Distribution** (**BSD**)
    Unix system family but are also available on Linux; their scripting syntax is
    similar to that of C, and they are incompatible with the Bourne shell.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`csh`/`tcsh`：这些来自**伯克利软件分发**（**BSD**）Unix系统家族，但也可在Linux上使用；它们的脚本语法类似于C语言，并与Bourne
    shell不兼容。'
- en: '`ksh`: A Bourne shell derivative that was once very popular.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ksh`：一种Bourne shell的衍生版本，曾经非常流行。'
- en: '`bash`: Bash is the most common Linux shell and was created for the GNU project.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bash`：Bash是最常见的Linux shell，由GNU项目创建。'
- en: '`zsh` and `fish`: These are highly customizable and feature-rich shells that
    are intentionally different from `sh` derivatives and require learning, but have
    large communities of enthusiasts.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zsh`和`fish`：这些是高度可定制且功能丰富的shell，与`sh`衍生版本故意不同，需要学习，但有着庞大的爱好者社区。'
- en: They all share similar properties, but each has its own unique attributes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 它们都具有相似的特性，但每个都有自己独特的属性。
- en: In this book, we will assume you are using Bash since it’s the default in most
    Linux distributions.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中，我们将假设你正在使用Bash，因为它是大多数Linux发行版的默认Shell。
- en: The Unix shell and Bash command language were both developed by Brian Fox for
    the GNU project. These were intended to serve as free software replacements for
    the Bourne shell. Since its introduction in 1989, it has remained the default
    login shell for the vast majority of Linux distributions. Linus Torvalds ported
    Bash and the **GNU Compiler Collection** (**GCC**) to Linux as one of the initial
    applications.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Unix Shell和Bash命令语言都是由Brian Fox为GNU项目开发的。它们旨在作为Bourne Shell的自由软件替代品。自1989年推出以来，它一直是大多数Linux发行版的默认登录Shell。Linus
    Torvalds将Bash和**GNU编译器集合**（**GCC**）移植到Linux，作为最初的应用之一。
- en: 'Bash has the following features:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Bash具有以下特点：
- en: The shell will check to see whether a command is built in before searching through
    a list of directories to locate the program if not. This set is known as the search
    path. By running the `echo $PATH` command in Bash, you can view it. The `home`
    directory and its subdirectory are included in the search path in addition to
    the current directory. You are able to create your own programs and call them
    up just by inputting their names. No matter which directory you are now in, a
    program such as this will be found and launched if it is stored in the `bin` directory.
    We will find out more about the Linux directory structure in [*Chapter 3*](B18575_03.xhtml#_idTextAnchor040),
    *The* *Linux* *Filesystem*.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shell会先检查命令是否是内建命令，如果不是，它会通过搜索一系列目录来查找程序。这个集合被称为搜索路径。通过在Bash中运行`echo $PATH`命令，你可以查看它。除了当前目录外，`home`目录及其子目录也包含在搜索路径中。你可以创建自己的程序，并通过输入其名称来调用它们。无论你在哪个目录中，只要程序存储在`bin`目录中，它都会被找到并启动。我们将在[*第3章*](B18575_03.xhtml#_idTextAnchor040)中进一步了解Linux目录结构，*Linux*
    *文件系统*。
- en: As with other Linux programs, the shell has a current directory linked to it.
    When looking for files, Linux-based programs begin in the current directory. To
    move the current directory to another location in the Linux filesystem, use the
    `cd` shell command. The current working directory is typically visible in the
    command prompt of modern shells. To check the version of your shell, run the `echo
    $SHELL` command. You will get an output such as `/bin/bash`.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他Linux程序一样，Shell有一个当前目录与之关联。在查找文件时，基于Linux的程序从当前目录开始。要将当前目录移动到Linux文件系统中的另一个位置，请使用`cd`命令。当前工作目录通常可以在现代Shell的命令提示符中看到。要检查Shell的版本，运行`echo
    $SHELL`命令。你将看到类似于`/bin/bash`的输出。
- en: 'A command is executed by designating it. The majority of Linux commands are
    just programs that the shell runs. For instance, the following `ls` command scans
    the current directory and lists the names of its files: `ls -la`.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过指定命令来执行命令。大多数Linux命令实际上就是Shell运行的程序。例如，以下`ls`命令扫描当前目录并列出文件名：`ls -la`。
- en: 'Commands frequently have argument strings that could, for example, be filenames.
    For instance, the following command switches to the `tmp` directory in your `home`
    directory. The shell interprets the tilde character as your `home` directory:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令通常包含参数字符串，例如文件名。例如，以下命令会切换到你`home`目录中的`tmp`目录。Shell将波浪号字符解释为你的`home`目录：
- en: '[PRE0]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Multiple arguments are required for some commands. The copy command, for instance,
    requires two arguments: the file to copy and its destination. This is demonstrated
    as follows by copying `file1` to a new file, `file2`:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 某些命令需要多个参数。例如，复制命令需要两个参数：要复制的文件和目标位置。以下示范了如何将`file1`复制到新文件`file2`：
- en: '[PRE1]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The flag or option argument strings for some commands typically start with
    `-`. The flags change how the invoked application behaves. When the following
    command is used, `ls` outputs a lengthy listing of files arranged by creation
    time:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 某些命令的标志或选项参数通常以`-`开头。标志会改变被调用应用程序的行为。当使用以下命令时，`ls`会按创建时间输出文件的详细列表：
- en: '[PRE2]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Wildcards will be expanded by the shell to match filenames in the current directory.
    For example, to display a directory listing of files named `anything.sh`, type
    the following:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通配符将由Shell扩展以匹配当前目录中的文件名。例如，要显示名为`anything.sh`的文件列表，可以输入以下命令：
- en: '[PRE3]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`cat` is an abbreviation for *concatenate*. When run, the following command
    will show you the contents of one or more files without requiring you to open
    them for editing:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cat`是*concatenate*的缩写。运行以下命令将显示一个或多个文件的内容，而无需打开它们进行编辑：'
- en: '[PRE4]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The shell has the ability to pipe data from one program’s output to another’s
    input. `|` is the pipe symbol. To count the number of words in `testfile.txt`,
    we can concatenate the file and pass the output into the `wc` program, like so:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shell具有将一个程序的输出数据通过管道传输到另一个程序输入的能力。`|`是管道符号。为了计算`testfile.txt`中的单词数量，我们可以将文件连接并将输出传递给`wc`程序，如下所示：
- en: '[PRE5]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Or, to count the number of lines from a `testfile.txt` file, we can use the
    following command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，要计算`testfile.txt`文件中的行数，我们可以使用以下命令：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can create aliases for commands or groups of commands that you use frequently
    or find difficult to input. For instance, we could use the `top10` alias to find
    the top 10 files in the current directory. `head` will show only the top lines.
    An alias is a shortcut for a command—for example, rather than remembering a very
    long command, you can create an alias that you can remember easily. Here’s an
    example:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以为你常用或难以输入的命令或命令组创建别名。例如，我们可以使用`top10`别名来查找当前目录中的前10个文件。`head`将仅显示前几行。别名是命令的快捷方式——例如，避免记住一个非常长的命令，你可以创建一个容易记住的别名。以下是一个示例：
- en: '[PRE8]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Some variables are predefined, such as `$HOME`, which is your `home` directory.
    To see a list of assigned variables, type the following command:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些变量是预定义的，例如`$HOME`，它是你的`home`目录。要查看分配的变量列表，请输入以下命令：
- en: '[PRE9]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'A **manual** (**man**) page is like a manual with instructions and descriptions
    about each command. Run the following command to view the man page for Bash:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**手册**（**man**）页就像一本包含每个命令的说明和描述的手册。运行以下命令查看Bash的手册页：'
- en: '[PRE10]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Scripts* of shell commands can be written. These can be called just like compiled
    programs (that is, just by naming them). For instance, we first create a file
    in `/bin` containing the following in order to construct a script named `top10.sh`
    that displays the top 10 biggest files in the current directory:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以编写Shell命令的*脚本*。这些脚本可以像已编译的程序一样被调用（即，只需命名它们）。例如，我们首先在`/bin`目录下创建一个包含以下内容的文件，以构建一个名为`top10.sh`的脚本，显示当前目录中最大的前10个文件：
- en: '[PRE11]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We must next use the `chmod` command to make the file executable before we
    can run it normally:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们必须使用`chmod`命令使文件具有可执行权限，才能正常运行它：
- en: '[PRE13]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: See the man page on `bash` for more details (type `man bash`).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`bash`的手册页获取更多详细信息（键入`man bash`）。
- en: The up arrow key on the keyboard in Bash’s extra mechanism enables you to access
    and modify past commands. The most recent command is displayed on Terminal again
    when you press the up arrow key. To access previous commands, press the up arrow
    key once more. Press *Enter* to run the command once more. Use the *Delete* key
    to remove characters from the command’s end, or the back arrow key to move the
    cursor and change the command’s contents by inserting or deleting characters.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在Bash的额外机制中，键盘上的上箭头键使你能够访问和修改过去的命令。当你按下上箭头键时，最近的命令会再次显示在终端上。要访问之前的命令，请再次按下上箭头键。按*Enter*键重新运行该命令。使用*Delete*键从命令末尾删除字符，或使用退格键移动光标并通过插入或删除字符来修改命令的内容。
- en: By using the `history` command, you can view the history of commands.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`history`命令，你可以查看命令历史记录。
- en: You can rerun any command from the history by pressing `!` and the line number—for
    example, `!345`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过按`!`和行号重新执行任何历史命令，例如，`!345`。
- en: Now that you know how to interact with the shell and what is happening when
    you type these commands, in the next section, we will try to practice some basic
    commands to make you more confident when you interact with Terminal.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何与Shell交互以及输入这些命令时发生了什么，在接下来的章节中，我们将尝试实践一些基本命令，让你在与终端交互时更加自信。
- en: Basic shell commands
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本的Shell命令
- en: 'Here’s a rundown of some of the possible commands. For more information, see
    the man page for each command. Using the `man` command, you can view these online.
    Simply type `man` followed by the command name you wish to see (for example, if
    you want to learn more about the `cat` command, simply type `man cat`):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些可能的命令概述。更多信息请查看每个命令的手册页。通过使用`man`命令，你可以在线查看这些内容。只需键入`man`，然后输入你希望查看的命令名称（例如，如果你想了解更多关于`cat`命令的信息，只需键入`man
    cat`）：
- en: '`pwd`: The `pwd` command can be used to determine which directory you are in.
    Its name is an abbreviation for `/`). You can see the `pwd` command in use in
    the following screenshot:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pwd`: `pwd` 命令可以用来确定你当前所在的目录。其名称是 `/` 的缩写。你可以在以下屏幕截图中看到 `pwd` 命令的使用：'
- en: '![Figure 2.1 – pwd command, showing the working directory](img/Figure_2.01_B18575.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1 – pwd 命令，显示工作目录](img/Figure_2.01_B18575.jpg)'
- en: Figure 2.1 – pwd command, showing the working directory
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – pwd 命令，显示工作目录
- en: '`mkdir`: `mkdir` is the command to use when you need to make a new directory.
    Put `mkdir packt` on your command line to make a directory with that name. To
    list your created directory, use the `ls –ld <directory_name>` command. You can
    see the `mkdir` command in use here:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mkdir`: `mkdir` 是用于创建新目录的命令。你可以在命令行中输入 `mkdir packt` 来创建一个名为 packt 的目录。要列出已创建的目录，可以使用
    `ls –ld <directory_name>` 命令。你可以在这里看到 `mkdir` 命令的使用：'
- en: '![Figure 2.2 – mkdir command](img/Figure_2.02_B18575.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2 – mkdir 命令](img/Figure_2.02_B18575.jpg)'
- en: Figure 2.2 – mkdir command
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – mkdir 命令
- en: '`rmdir`: To delete a directory, use `rmdir`. However, `rmdir` can only be used
    to remove an empty directory. To remove files and directories, use `rm -rf directoryname/`
    (where `–rf` will recursively remove all the files and directories from inside
    the directory). To check whether a directory has been removed, use `ls –ld <directory_name>`.
    The `rmdir` command is shown here:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rmdir`: 要删除一个目录，使用 `rmdir`。不过，`rmdir` 只能用于删除空目录。要删除文件和目录，使用 `rm -rf directoryname/`（其中
    `–rf` 将递归删除目录内的所有文件和子目录）。要检查目录是否已被删除，可以使用 `ls –ld <directory_name>` 命令。这里显示了 `rmdir`
    命令的使用：'
- en: '![Figure 2.3 – rmdir command](img/Figure_2.03_B18575.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3 – rmdir 命令](img/Figure_2.03_B18575.jpg)'
- en: Figure 2.3 – rmdir command
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – rmdir 命令
- en: '`touch`: The command’s initial intent was to set the file modification date
    to the current time. But since it will make a file if one doesn’t already exist,
    it’s frequently used to make empty files. Here’s an example:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`touch`: 该命令最初的目的是将文件的修改日期设置为当前时间。但由于它在文件不存在时会创建一个文件，因此它常用于创建空文件。以下是一个示例：'
- en: '[PRE15]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`ls`: Use the `ls` command to see all files and directories inside the directory
    you are in. If you want to see hidden files, use the `ls -a` command. By using
    the `ls -la` command, you can see all the files and directories as a list, as
    illustrated here:'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ls`: 使用 `ls` 命令可以查看当前目录中的所有文件和目录。如果你想查看隐藏文件，可以使用 `ls -a` 命令。通过使用 `ls -la`
    命令，你可以将所有文件和目录以列表的形式查看，如下所示：'
- en: '![Figure 2.4 – ls command](img/Figure_2.04_B18575.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.4 – ls 命令](img/Figure_2.04_B18575.jpg)'
- en: Figure 2.4 – ls command
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – ls 命令
- en: '`cp`: To copy files from the command line, use the `cp` command. This requires
    two arguments: the first specifies the location of the file to be copied, and
    the second specifies where to copy it. It could be a new folder or a new file
    (in case you need a copy of it). You can see the `cp` command in use here:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cp`: 要从命令行复制文件，使用 `cp` 命令。它需要两个参数：第一个指定要复制的文件的位置，第二个指定复制到的位置。可以是一个新文件夹或新文件（如果需要文件副本）。你可以在这里看到
    `cp` 命令的使用：'
- en: '![Figure 2.5 – cp and ls commands](img/Figure_2.05_B18575.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.5 – cp 和 ls 命令](img/Figure_2.05_B18575.jpg)'
- en: Figure 2.5 – cp and ls commands
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – cp 和 ls 命令
- en: '`mv`: You can use the `mv` command to move a file or directory from one location
    to another or even to rename a file. For example, you can rename a file from `file1.txt`
    to `file2.txt` by running the following command:'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mv`: 你可以使用 `mv` 命令将文件或目录从一个位置移动到另一个位置，甚至重命名文件。例如，你可以通过运行以下命令将文件 `file1.txt`
    重命名为 `file2.txt`：'
- en: '[PRE16]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`rm`: `rm` is used to remove files or directories, while the `-r` or `–f` parameter
    is used to recursively remove a directory (`-r`) or force remove a file or directory
    (`-f`). As always, use `man` to find out all the options possible.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rm`: `rm` 用于删除文件或目录，`-r` 或 `–f` 参数用于递归删除目录（`-r`）或强制删除文件或目录（`-f`）。和往常一样，可以使用
    `man` 命令查看所有可用选项。'
- en: '`locate`: The `locate` command is useful when you forget the location of a
    file. Using the `-i` argument helps to ignore case sensitivity. So, if you want
    to find a file named `file1.txt`, run the `locate -i file1.txt` command. This
    is the equivalent of search in Windows.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`locate`: `locate` 命令在你忘记文件位置时非常有用。使用 `-i` 参数可以忽略大小写敏感。因此，如果你想找到一个名为 `file1.txt`
    的文件，可以运行 `locate -i file1.txt` 命令。这相当于 Windows 中的搜索功能。'
- en: These are some basic commands that showed you how to list a file, check your
    working directory, create a directory, copy a file to another file, and so on.
    In the next section, we will use some more advanced commands.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是一些基本命令，展示了如何列出文件、检查当前工作目录、创建目录、将文件复制到另一个文件等等。在接下来的部分，我们将使用一些更高级的命令。
- en: Intermediate shell commands
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中级 shell 命令
- en: 'In the previous section, we used some basic commands in order to get used to
    Terminal. In this section, we will get familiar with more advanced commands, as
    follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一部分，我们使用了一些基本命令来熟悉终端。在这一部分，我们将熟悉更多的高级命令，如下所示：
- en: '`echo`: The `echo` command allows you to display content that can be added
    to either a new or an existing file or to replace the content.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`echo`：`echo` 命令允许你显示内容，可以将其添加到新文件或现有文件中，或替换文件内容。'
- en: If you want to add content to an existing file, you can use `echo "content to
    be appended" >>file1.txt`. Or, you can use `echo "this content will replace" >
    file1.txt` to replace the content of a file.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想向现有文件中添加内容，可以使用 `echo "content to be appended" >>file1.txt`。或者，你可以使用 `echo
    "this content will replace" > file1.txt` 来替换文件中的内容。
- en: 'You can see the `echo` command in use here:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里看到 `echo` 命令的使用：
- en: '![Figure 2.6 – echo command](img/Figure_2.06_B18575.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.6 – echo 命令](img/Figure_2.06_B18575.jpg)'
- en: Figure 2.6 – echo command
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – echo 命令
- en: '`cat`: The `cat` command is normally used to read the content of a file, as
    illustrated here:'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cat`：`cat` 命令通常用于读取文件内容，如这里所示：'
- en: '![Figure 2.7 – cat command](img/Figure_2.07_B18575.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.7 – cat 命令](img/Figure_2.07_B18575.jpg)'
- en: Figure 2.7 – cat command
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7 – cat 命令
- en: You can use the `cat` command and append the output to a new file using `>>`.
    This is the same for any output—for example, you can use `ls –la >> files-directories.txt`
    to redirect the result of the `ls –la` command into a file.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `cat` 命令并将输出追加到新文件中，使用 `>>`。这对于任何输出都适用——例如，你可以使用 `ls –la >> files-directories.txt`
    将 `ls –la` 命令的结果重定向到文件中。
- en: '`df`: A great command for quickly viewing your filesystem and all mounted drives
    is the `df` command (which stands for *disk-free*). You can see the overall disk
    size, the amount of space used, the amount of space available, the utilization
    percentage, and the partition that the disk is mounted on. I advise using it along
    with the `-h` parameter to make the data legible by humans. The data that you
    see here was derived from the filesystem level or mount point:'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`df`：一个用于快速查看文件系统和所有挂载驱动器的优秀命令是 `df` 命令（代表*disk-free*）。你可以看到整体磁盘大小、已用空间、可用空间、利用率百分比以及磁盘挂载的分区。我建议配合
    `-h` 参数使用，这样数据对人类更加可读。你在这里看到的数据是从文件系统级别或挂载点中提取的：'
- en: '![Figure 2.8 – df command](img/Figure_2.08_B18575.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.8 – df 命令](img/Figure_2.08_B18575.jpg)'
- en: Figure 2.8 – df command
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8 – df 命令
- en: '`du`: When used appropriately, the `du` command (which stands for disk usage)
    works great. When you need to know the size of a specific directory or subdirectory,
    this command excels. It only reports on the supplied stats at the time of execution
    and operates at the object level. For instance, you can use the `du -sh /Documents`
    command to find out how much disk space Linux’s `Documents` folder consumes. This
    command works well when combined with the `-sh` flags to provide a summary of
    a given item in human-readable form (the directory and all subdirectories). You
    can see the `du` command in use here:'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`du`：在适当使用时，`du` 命令（代表磁盘使用）效果非常好。当你需要知道特定目录或子目录的大小时，这个命令非常合适。它只报告在执行时提供的统计数据，并且操作是基于对象的。例如，你可以使用
    `du -sh /Documents` 命令来查看 Linux 的 `Documents` 文件夹占用了多少磁盘空间。结合 `-sh` 标志使用时，这个命令可以提供给定项目的摘要，以人类可读的形式显示（包括目录和所有子目录）。你可以在这里看到
    `du` 命令的使用：'
- en: '![Figure 2.9 – du command](img/Figure_2.09_B18575.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.9 – du 命令](img/Figure_2.09_B18575.jpg)'
- en: Figure 2.9 – du command
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9 – du 命令
- en: '`uname`: The `uname` command displays information regarding the operating system
    that your Linux distribution is currently using. The majority of the information
    on the system can be printed by using the `uname -a` command. This displays the
    kernel release date, the version, the processor type, and other related information.
    You can see the `uname` command in use here:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uname`：`uname` 命令显示你的 Linux 发行版当前使用的操作系统信息。通过使用 `uname -a` 命令，可以打印出系统的大部分信息。它显示内核的发布日期、版本、处理器类型以及其他相关信息。你可以在这里看到
    `uname` 命令的使用：'
- en: '![Figure 2.10 – uname command](img/Figure_2.10_B18575.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.10 – uname 命令](img/Figure_2.10_B18575.jpg)'
- en: Figure 2.10 – uname command
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10 – uname 命令
- en: '`chmod`: The system call and command used to modify the special mode flags
    and access permissions of filesystem objects are called `chmod`. These were first
    referred to collectively as its modes, and the name `chmod` was chosen as an acronym
    for change mode (more details about this in [*Chapter 7*](B18575_07.xhtml#_idTextAnchor118),
    *User and* *Group Management*).'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chmod`：用于修改文件系统对象的特殊模式标志和访问权限的系统调用和命令称为 `chmod`。这些最初统称为其模式，`chmod` 这个名字是 change
    mode（更改模式）的首字母缩写（更多细节请参见 [*第 7 章*](B18575_07.xhtml#_idTextAnchor118)，*用户和* *组管理*）。'
- en: 'Let’s imagine you wish to change the permissions of a file called `file1.txt`
    so that the following is possible:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你希望更改名为 `file1.txt` 的文件权限，使得以下操作成为可能：
- en: The user can execute, read, and write it
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以执行、读取和写入它
- en: Those in your group can read it and use it
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组内成员可以读取和使用它
- en: Others may only read it
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他人只能读取它
- en: 'This command does the trick:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令可以解决问题：
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The symbolic permissions notation is used in this example. `u`, `g`, and `o`
    stand for *user*, *group*, and *other*, respectively. The letters `r`, `w`, and
    `x` stand for *read*, *write*, and *execute*, respectively, while the equals sign
    (`=`) signifies *establish the permissions precisely like this*. There are no
    spaces between the various authorization classes; only commas are used to divide
    them.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中使用的是符号权限表示法。`u`、`g` 和 `o` 分别代表 *用户*、*组* 和 *其他*。字母 `r`、`w` 和 `x` 分别代表 *读取*、*写入*
    和 *执行*，而等号（`=`）表示 *准确地设置这些权限*。各个授权类之间没有空格，只有逗号分隔它们。
- en: 'Here is the equivalent command using octal permissions notation:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使用八进制权限表示法的等效命令：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here, the numbers `7`, `5`, and `4` stand for the user, group, and other permissions,
    respectively, in that sequence. Each digit is made up of the digits `4`, `2`,
    `1`, and `0`, which denote the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，数字 `7`、`5` 和 `4` 分别代表用户、组和其他权限，顺序如此。每个数字由 `4`、`2`、`1` 和 `0` 组成，分别表示以下含义：
- en: '`4` stands for *read*'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`4` 代表 *读取*'
- en: '*Write* has the prefix `2`'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*写入* 的前缀是 `2`'
- en: '`1` denotes *execute*'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1` 代表 *执行*'
- en: '`0` means *no authorization*'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0` 代表 *无权限*'
- en: Therefore, `7` is made up of the permissions `4`+`2`+`1` (read, write, and execute),
    `5` (read, no write, and execute), and `4` (read, no write, and no execute).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`7` 由权限 `4`+`2`+`1`（读取、写入和执行）、`5`（读取、无写入和执行）和 `4`（读取、无写入和无执行）组成。
- en: '`chown`: To change the owner of system files and directories on Unix and Unix-like
    operating systems, use the `chown` command. This will change the ownership to
    the user (`voxsteel`) and group (`voxsteel`) for a specified filename or directory,
    as illustrated here:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chown`：要更改 Unix 和类 Unix 操作系统中系统文件和目录的所有者，请使用 `chown` 命令。这将把指定文件名或目录的所有权更改为用户（`voxsteel`）和组（`voxsteel`），如下所示：'
- en: '[PRE19]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Use `chgrp` if you’re a non-privileged user and want to modify the group membership
    of a file you own.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一个非特权用户，且希望修改你拥有的文件的组成员，可以使用 `chgrp`。
- en: '`chgrp`: A filesystem object’s group can be changed to one to which they belong
    using the `chgrp` command, as illustrated in the following snippet. Three sets
    of access permissions are available for a filesystem object: one for owner, one
    for group, and one for others:'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chgrp`：可以使用 `chgrp` 命令将文件系统对象的组更改为其所属的组，如下例所示。文件系统对象有三组访问权限：一个是所有者权限，一个是组权限，一个是其他用户权限：'
- en: '[PRE20]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Searching the man pages with keywords can help you find a command even if you’ve
    forgotten its name. The `man -k` keyword is the syntax to use. Running this command
    on Terminal, for instance, will list Terminal-specific commands.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用关键词搜索手册页可以帮助你找到命令，即使你已经忘记了它的名字。`man -k` 是用于此的语法。例如，在终端运行此命令，将列出特定于终端的命令。
- en: Summary
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Redirection, Bash history, command aliases, command-line trickery, and more
    were some of the more sophisticated ideas related to shell commands that we covered
    in this chapter. Don’t worry if you’re having problems memorizing everything;
    it’s normal to feel overwhelmed by the amount of information presented here at
    first. I’ve been using Linux professionally for over 15 years, and I still don’t
    know everything there is to know about it.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 重定向、Bash 历史、命令别名、命令行技巧等等是本章中涉及的更复杂的 Shell 命令相关概念。如果你在记忆过程中遇到困难，不用担心；一开始面对如此大量的信息时感到不知所措是很正常的。我已经使用
    Linux 专业工作超过 15 年，但仍然没有掌握所有的知识。
- en: In the next chapter, we will talk about filesystems, the differences between
    them, and the structure of the main system directories and what are they used
    for.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将讨论文件系统、它们之间的区别，以及主系统目录的结构和它们的用途。
