- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Meeting the BitBake Tool
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认识 BitBake 工具
- en: With this chapter, we will now begin our journey of learning how the Yocto Project’s
    engine works behind the scenes. As is the case with every journey, communication
    is critical, so we need to understand the language used by the Yocto Project’s
    tools and learn how to get the best out of these tools to accomplish our goals.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始学习 Yocto 项目的引擎如何在幕后运作。就像每段旅程一样，沟通至关重要，因此我们需要理解 Yocto 项目工具使用的语言，并学习如何最大限度地利用这些工具来实现我们的目标。
- en: The preceding chapters introduced us to the standard Yocto Project workflow
    for creating and emulating images. Now, in this chapter, we will explore the concept
    of metadata and how BitBake reads this metadata to make its internal data collections.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 上述章节向我们介绍了创建和仿真镜像的标准 Yocto 项目工作流程。现在，在本章中，我们将探讨元数据的概念，以及 BitBake 如何读取这些元数据以生成内部数据集合。
- en: Understanding the BitBake tool
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 BitBake 工具
- en: The BitBake task scheduler started as a fork from Portage, the package management
    system used in the Gentoo distribution. However, the two projects diverged significantly
    due to different use cases. The Yocto Project and the OpenEmbedded Project are
    intensive users of BitBake. It remains a separate and independent project with
    its own development cycle and mailing list ([bitbake-devel@lists.openembedded.org](mailto:bitbake-devel@lists.openembedded.org)).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake 任务调度器最初是从 Gentoo 分发版中使用的包管理系统 Portage 分叉出来的。然而，由于不同的使用案例，这两个项目的开发方向发生了显著分歧。Yocto
    项目和 OpenEmbedded 项目是 BitBake 的重度用户。它仍然是一个独立的项目，拥有自己的开发周期和邮件列表（[bitbake-devel@lists.openembedded.org](mailto:bitbake-devel@lists.openembedded.org)）。
- en: BitBake is a tool similar to GNU Make. As discussed in [*Chapter 1*](B19361_01.xhtml#_idTextAnchor013),
    *Meeting the Yocto Project*, BitBake is a task executor and scheduler that parses
    Python and Shell Script mixed code.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake 是一个类似于 GNU Make 的工具。如 [*第1章*](B19361_01.xhtml#_idTextAnchor013)，*认识
    Yocto 项目* 中所述，BitBake 是一个任务执行器和调度器，它解析 Python 和 Shell 脚本混合代码。
- en: Therefore, BitBake is responsible for running as many tasks as possible in parallel
    while ensuring they are run respecting their dependencies.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，BitBake 负责尽可能并行地运行多个任务，同时确保这些任务按依赖关系执行。
- en: BitBake metadata collections
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BitBake 元数据集合
- en: For BitBake, there is no metadata outside a metadata collection. Instead, a
    metadata collection has a unique name, and the common term the Yocto Project uses
    for those collections is **Layer**.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 BitBake 来说，元数据没有独立于元数据集合之外的存在。相反，元数据集合有一个独特的名称，Yocto 项目用来描述这些集合的常用术语是 **Layer**。
- en: '[*Chapter 1*](B19361_01.xhtml#_idTextAnchor013), *Meeting the Yocto Project*,
    explains that we have the following layers:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第1章*](B19361_01.xhtml#_idTextAnchor013)，*认识 Yocto 项目*，解释了我们有以下几层：'
- en: '`meta` directory'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`meta` 目录'
- en: '`meta-poky` directory'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`meta-poky` 目录'
- en: '`meta-yocto-bsp` directory'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`meta-yocto-bsp` 目录'
- en: 'The preceding list describes real examples of layers. Every layer contains
    a file called `conf/layer.conf`. This file defines several layer properties, such
    as the collection name and priority. The following figure shows the `conf/layer.conf`
    file for the `meta-poky` layer:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的列表描述了层的实际示例。每个层都包含一个名为 `conf/layer.conf` 的文件。该文件定义了几个层属性，如集合名称和优先级。下图展示了
    `meta-poky` 层的 `conf/layer.conf` 文件：
- en: '![Figure 4.1 – The conf/layer.conf file for the meta-poky layer](img/Figure_4.1_B19361.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.1 – meta-poky 层的 conf/layer.conf 文件](img/Figure_4.1_B19361.jpg)'
- en: Figure 4.1 – The conf/layer.conf file for the meta-poky layer
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – meta-poky 层的 conf/layer.conf 文件
- en: The preceding example is relatively simple but serves as a base for us to illustrate
    the `conf/layer.conf` file principles.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例相对简单，但它作为一个基础，帮助我们说明 `conf/layer.conf` 文件的原理。
- en: In line 8, `BBFILE_COLLECTIONS`, we tell BitBake to create a new metadata collection
    called `yocto`. Next, in line 9, `BBFILE_PATTERN_yocto`, we define the rule to
    match all paths starting with the `LAYERDIR` variable to identify the metadata
    belonging to the `yocto` collection. Finally, in line 10, `BBFILE_PRIORITY_yocto`
    establishes the priority (the higher the number, the higher the priority) of the
    `yocto` collection against the other metadata collections.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在第8行，`BBFILE_COLLECTIONS`，我们告诉 BitBake 创建一个名为 `yocto` 的新元数据集合。接下来，在第9行，`BBFILE_PATTERN_yocto`，我们定义了匹配所有以
    `LAYERDIR` 变量开头的路径的规则，以识别属于 `yocto` 集合的元数据。最后，在第10行，`BBFILE_PRIORITY_yocto` 确定了
    `yocto` 集合与其他元数据集合之间的优先级（数字越大，优先级越高）。
- en: The dependency relation between the layers is vital as it ensures that all required
    metadata is available for use. An example is in line 18 as `LAYERDEPENDS_yocto`,
    from the `conf/layer.conf` file, adds a dependency to the `core`, provided by
    the OpenEmbedded Core layer.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 层之间的依赖关系至关重要，因为它确保所有所需的元数据可供使用。一个例子是在第18行的`LAYERDEPENDS_yocto`，它来自`conf/layer.conf`文件，并为`core`添加了一个依赖关系，`core`由OpenEmbedded
    Core层提供。
- en: '*Figure 4**.2* shows Poky’s layers using the `bitbake-layers` command, as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4.2*展示了使用`bitbake-layers`命令的Poky层，具体如下：'
- en: '![Figure 4.2 – Results of bitbake-layers show-layers for Poky](img/Figure_4.2_B19361.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.2 – bitbake-layers show-layers命令的Poky结果](img/Figure_4.2_B19361.jpg)'
- en: Figure 4.2 – Results of bitbake-layers show-layers for Poky
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – bitbake-layers show-layers命令的Poky结果
- en: Metadata types
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元数据类型
- en: 'There are three major areas where we can classify the metadata used by BitBake.
    They are as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将BitBake使用的元数据分为三个主要领域，具体如下：
- en: Configuration (the `.``conf` files)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置（`.conf` 文件）
- en: Classes (the `.``bbclass` files)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类（`.bbclass` 文件）
- en: Recipes (the `.bb` and `.``bbappend` files)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配方（`.bb` 和 `.bbappend` 文件）
- en: The configuration files define the global content to provide information and
    configure how the recipes work. One typical example of a configuration file is
    the machine file, which has a list of settings that describes the hardware.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件定义了全局内容，用于提供信息并配置配方的工作方式。一个典型的配置文件示例是机器文件，它列出了描述硬件的设置。
- en: The whole system uses the classes that recipes can `inherit` according to their
    needs or by default. They define the commonly used system’s behavior and provide
    the base methods. For example, `kernel.bbclass` abstracts tasks related to building
    and packaging the Linux kernel independently of version or vendor changes.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 整个系统使用配方可以根据需要或默认继承的类。它们定义了系统的常用行为并提供基本方法。例如，`kernel.bbclass`抽象了与构建和打包Linux内核相关的任务，而不受版本或供应商更改的影响。
- en: Note
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The recipes and classes mix Python and Shell Script code.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 配方和类结合了Python和Shell脚本代码。
- en: The classes and recipes describe the tasks to be run and provide the information
    needed to allow BitBake to generate the required task list and its dependencies.
    The inheritance mechanism permits a recipe to inherit one or more classes to promote
    code reuse, improve accuracy, and make maintenance easier. A Linux kernel recipe
    example is `linux-yocto_5.15.bb`, which inherits a set of classes, including `kernel.bbclass`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 类和配方描述了要运行的任务，并提供了所需的信息，允许BitBake生成所需的任务列表及其依赖关系。继承机制允许配方继承一个或多个类，从而促进代码重用，提高准确性，并简化维护。一个Linux内核配方示例是`linux-yocto_5.15.bb`，它继承了一组类，包括`kernel.bbclass`。
- en: BitBake’s most commonly used aspects across all types of metadata (`.conf`,
    `.bb`, and `.bbclass`) are covered in [*Chapter 5*](B19361_05.xhtml#_idTextAnchor077),
    *Grasping the BitBake Tool*, while the metadata grammar and syntax are detailed
    in [*Chapter 8*](B19361_08.xhtml#_idTextAnchor110), *Diving into* *BitBake Metadata*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake在所有类型的元数据（`.conf`、`.bb` 和 `.bbclass`）中最常用的方面已在[*第5章*](B19361_05.xhtml#_idTextAnchor077)《掌握BitBake工具》中进行了涵盖，而元数据语法和语法的详细内容则在[*第8章*](B19361_08.xhtml#_idTextAnchor110)《深入了解BitBake元数据》中进行了阐述。
- en: Taking *Figure 4**.1* into consideration, we need to pay attention to two other
    variables – `BBPATH` and `BBFILES`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到*图 4.1*，我们需要注意另外两个变量——`BBPATH`和`BBFILES`。
- en: '`BBPATH`, on line 2, is analogous to `PATH` but adds a directory to the search
    list for metadata files; the `BBFILES` variable, on line 5, lists the pattern
    used to index the collection recipe files.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 第2行的`BBPATH`类似于`PATH`，但它将目录添加到元数据文件的搜索列表中；第5行的`BBFILES`变量列出了用于索引集合配方文件的模式。
- en: Summary
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: In this chapter, we learned about metadata, metadata collection concepts, and
    the importance of `conf/layer.conf`, which are the base for the understanding
    of the Yocto Project. In the next chapter, we will examine metadata knowledge,
    understand how recipes depend on each other, and how BitBake deals with dependencies.
    Additionally, we will also get a better view of the tasks managed by BitBake,
    download all the required source code, build and generate packages, and see how
    these packages fit into generated images.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了元数据、元数据收集的概念以及`conf/layer.conf`的重要性，这是理解Yocto项目的基础。在下一章中，我们将研究元数据知识，了解配方如何相互依赖，以及BitBake如何处理依赖关系。此外，我们还将更好地了解BitBake管理的任务，下载所有必需的源代码，构建并生成包，并查看这些包如何适配生成的镜像。
