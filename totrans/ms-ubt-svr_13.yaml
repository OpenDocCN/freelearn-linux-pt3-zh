- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Managing Databases
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理数据库
- en: The Linux platform has long been a very popular choice for hosting databases.
    Given the fact that databases power a large majority of popular websites across
    the internet nowadays, this is a very important role for servers to fill. Ubuntu
    Server is also a very popular choice for this purpose, as its stability is a major
    benefit to the hosting community. This time around, we’ll take a look at MariaDB,
    a popular fork of MySQL. The goal won’t be to provide a full walkthrough of MySQL’s
    syntax (as that would be a full book in and of itself), but we’ll focus on setting
    up and maintaining database servers utilizing MariaDB, and we’ll even go over
    how to set up a primary/secondary relationship between them. If you already have
    a firm understanding of how to architect databases, you’ll still benefit from
    this chapter as we’ll be discussing Ubuntu’s implementation of MariaDB in particular,
    which has its configuration organized a bit differently than in other platforms.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 平台一直是托管数据库的热门选择。考虑到如今大多数流行网站的运行依赖于数据库，这是服务器必须承担的一个非常重要的角色。Ubuntu Server
    也是非常受欢迎的选择，其稳定性为托管社区带来了重要的优势。这一次，我们将关注 MariaDB，MySQL 的一个流行分支。目标不是提供 MySQL 语法的完整讲解（因为那将是一本完整的书），而是专注于如何使用
    MariaDB 设置和维护数据库服务器，甚至讲解如何在其之间设置主/从关系。如果你已经对数据库架构有了扎实的理解，这一章依然能让你受益，因为我们将特别讨论
    Ubuntu 对 MariaDB 的实现，它的配置与其他平台有所不同。
- en: 'As we work through setting up our very own MariaDB server, we will cover the
    following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们设置自己的 MariaDB 服务器时，我们将涵盖以下主题：
- en: Preparations for setting up a database server
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置数据库服务器的准备工作
- en: Installing MariaDB
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 MariaDB
- en: Understanding the MariaDB configuration files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 MariaDB 配置文件
- en: Managing MariaDB databases
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理 MariaDB 数据库
- en: Setting up a secondary database server
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置从数据库服务器
- en: As with setting up any server for a particular purpose, we should first think
    about the goal and plan accordingly. So in the next section, we’ll talk about
    some of the higher-level details to consider while preparing a database server.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 就像设置任何服务器一样，我们首先需要考虑目标，并根据目标进行规划。因此，在接下来的部分，我们将讨论在准备数据库服务器时需要考虑的一些更高层次的细节。
- en: Preparations for setting up a database server
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置数据库服务器的准备工作
- en: Before we get started with setting up our database server, there are a few odds
    and ends to get out of the way. As we go through this chapter, we’ll set up a
    basic database server using MariaDB. I’m sure more than a few of my readers are
    familiar with MySQL. MySQL is a tried and true solution that is still in use in
    many data centers today, and that will probably continue to be the case for the
    foreseeable future. There’s a good chance that a popular website or two that you
    regularly visit utilizes it on the backend. So, you may be wondering then, why
    not go over that instead of MariaDB?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始设置数据库服务器之前，有一些琐事需要处理。随着本章的进行，我们将使用 MariaDB 设置一个基础的数据库服务器。我相信我的许多读者都对 MySQL
    比较熟悉。MySQL 是一个经过验证的成熟解决方案，至今仍在许多数据中心中使用，并且在可预见的未来，仍将继续如此。很有可能你经常访问的一些热门网站，在其后台就使用了
    MySQL。所以你可能会想，为什么不讲解 MySQL，而是选择 MariaDB 呢？
- en: There are two reasons why this book will focus on MariaDB. First, the majority
    of the Linux community is migrating over to it (more on that later), and it’s
    also a drop-in replacement for MySQL. This means that any databases or scripts
    you’ve already written for MySQL will most likely work just fine with MariaDB,
    barring some edge cases. In reverse, the commands you practice with MariaDB should
    also function as you would expect on a MySQL server. This is great, considering
    that many MySQL installations are still in use in many data centers, and you’ll
    be able to support those too. For the most part, there are very few reasons to
    stick with MySQL when your existing infrastructure can be ported over to MariaDB,
    and that’s the direction the Linux community is headed toward anyway.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本书聚焦于 MariaDB 有两个原因。首先，Linux 社区的大多数用户正在转向 MariaDB（稍后会详细讨论），而且它也是 MySQL 的一个直接替代品。这意味着你已经为
    MySQL 编写的任何数据库或脚本，很可能也能在 MariaDB 上正常运行，除非遇到某些特殊情况。反过来，你在 MariaDB 上练习的命令，也应该能在
    MySQL 服务器上正常使用。这一点非常好，因为许多 MySQL 安装仍然在许多数据中心使用，而你也能支持这些安装。大多数情况下，当现有的基础设施可以迁移到
    MariaDB 时，几乎没有理由继续使用 MySQL，而 Linux 社区也正朝着这个方向发展。
- en: Why the change? A while back, various distributions of Linux started switching
    to MariaDB from MySQL. Red Hat is one such example; it switched to MariaDB back
    in version 7 of Red Hat Enterprise Linux. Other distributions, such as Arch Linux
    and Fedora, went down the same route. This was partly due to a lack of trust in
    Oracle, the company that now owns MySQL. When Oracle became the owner of MySQL,
    there were some serious questions raised in the open source community regarding
    the future of MySQL as well as its licensing. I’m not going to get into any speculation
    about Oracle, the future of MySQL, or any politics regarding its future since
    it’s not relevant to this book (and I’m not a fan of corporate drama). The fact,
    though, is that many distributions are moving toward MariaDB, and that seems to
    be the future. It’s a great technology, and I definitely recommend it over MySQL
    for several reasons that are unrelated to current controversies.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么会有这种变化？一段时间以前，各种Linux发行版开始从MySQL切换到MariaDB。红帽（Red Hat）就是这样一个例子；它在Red Hat
    Enterprise Linux的第7版中就切换到了MariaDB。其他发行版，如Arch Linux和Fedora，也走上了同样的道路。这部分是由于对现在拥有MySQL的Oracle公司的不信任。当Oracle成为MySQL所有者时，开源社区对MySQL的未来以及其许可证提出了一些严重的问题。我不会对Oracle、MySQL的未来或与其未来相关的任何政治问题进行任何推测，因为这与本书无关（而且我不喜欢企业戏剧）。然而，事实是许多发行版正在向MariaDB迈进，而这似乎是未来。它是一项伟大的技术，基于多个与当前争议无关的原因，我强烈推荐它比MySQL更好。
- en: MariaDB is more than just a fork of MySQL. On its own, it’s a very competent
    database server. The fact that your existing MySQL implementations should be compatible
    with it eases adoption. But more than that, MariaDB makes some very worthwhile
    changes and improvements to MySQL that will only benefit you.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB不仅仅是MySQL的一个分支。它本身是一个非常称职的数据库服务器。现有的MySQL实现兼容性使其更易于采用。但更重要的是，MariaDB对MySQL进行了一些非常有价值的改变和改进，这些改变只会使您受益。
- en: Everything you love about MySQL can be found in MariaDB, plus some cutting-edge
    features that are exclusive to it. But even better is the fact that MariaDB features
    additional clustering options that are leaps and bounds better and more efficient
    than plain old MySQL.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你所喜爱的MySQL中的一切，都可以在MariaDB中找到，再加上一些独有的尖端功能。但更好的是，MariaDB提供了比普通的MySQL更为高效和先进的额外集群选项。
- en: So, hopefully I’ve sold you on the value of MariaDB. Ultimately, whether or
    not you actually use it will depend on the needs of your organization. I’ve seen
    some organizations opt to stick with MySQL, if only for the sole reason that it’s
    what they know. I can understand that if a solution has proven itself in your
    data center, there’s really no reason to change if your database stack is working
    perfectly fine the way it is. To that end, while I’ll be going over utilizing
    MariaDB, it’s possible that the examples may work for MySQL as well. If in doubt,
    MariaDB is recommended for the examples in this chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，希望我已经向您展示了MariaDB的价值。最终，您是否真正使用它将取决于您组织的需求。我见过一些组织选择坚持使用MySQL，即使只是因为他们熟悉它。我可以理解，如果一个解决方案在您的数据中心中已经证明有效，那么如果您的数据库堆栈运行良好，则没有理由改变它。因此，虽然我将讨论如何使用MariaDB，但本章的示例可能也适用于MySQL。如果有疑问，本章推荐使用MariaDB。
- en: With regard to your server, a good implementation plan is key (as always). I
    won’t spend too much time on this aspect, since by now I know you’ve probably
    been through a paragraph or two in this book where I’ve mentioned the importance
    of redundancy (and I’m sure I’ll mention redundancy again a few more times before
    the last page). At this point, you’re probably just setting up a lab environment
    or test server on which to practice these concepts before using your newfound
    skills in production. But when you do eventually roll out a database server into
    production, it’s crucial to plan for long-term stability. Database servers should
    be regularly backed up, redundant (there I go again), and regularly patched. Later
    on in this chapter, I’ll walk you through setting up a secondary database server,
    which will take care of the redundancy part.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 关于您的服务器，一个良好的实施计划至关重要（一如既往）。我不会在这个方面花太多时间，因为我知道您可能已经在本书的一两段中提到了冗余的重要性（而且我相信在最后一页之前，我还会再提几次冗余）。此时，您可能只是在设置一个实验环境或测试服务器，以便在生产中运用这些概念之前练习这些技能。但是当您最终将数据库服务器投入生产时，计划长期稳定性至关重要。数据库服务器应定期备份、冗余（我又在说冗余了），并定期打补丁。在本章后面的部分，我将指导您设置一个次要的数据库服务器，它将处理冗余部分。
- en: However, that’s not enough on its own, as regular backups are important. There
    are many utilities that allow you to do this, such as `mysqldump`, and you can
    also take snapshots of your virtual machine (assuming you’re not using a physical
    server). Both solutions are valid, depending on your environment. As someone who
    has lost an entire workday attempting to resurrect a fallen database server for
    a client (of which they had no backups or redundancy), my goal is simply to spare
    you that headache.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，光这样做还不够，因为定期备份非常重要。有很多工具可以帮助你完成这项任务，比如`mysqldump`，你也可以拍摄虚拟机的快照（前提是你不是使用物理服务器）。这两种解决方案都是有效的，取决于你的环境。作为一个曾经为客户恢复丢失的数据库服务器（客户没有备份或冗余）而浪费了一整天时间的人，我的目标只是希望你避免那种头疼的经历。
- en: As far as how many resources a database server needs, that solely depends on
    your environment. MariaDB itself does not take up a huge amount of resources,
    but as with MySQL, your usage is dependent on your workload. Either you’ll have
    a few dozen clients connecting, or a few thousand, or more. But one recommendation
    I’ll definitely make is to use **Logical Volume Manager** (**LVM**) for the partition
    that houses your database files. This will certainly spare you grief in the long
    run. As we’ve discussed in *Chapter 9*, *Managing Storage Volumes*, LVM makes
    it very simple to expand a filesystem, especially on a virtual machine.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 至于数据库服务器需要多少资源，这完全取决于你的环境。MariaDB本身并不会占用大量资源，但和MySQL一样，你的使用量依赖于你的工作负载。你可能有几十个客户连接，或者几千个，甚至更多。但我肯定会推荐的一点是，为存储数据库文件的分区使用**逻辑卷管理器**（**LVM**）。从长远来看，这无疑会为你节省很多麻烦。正如我们在*第9章*《*管理存储卷*》中讨论的，LVM使得扩展文件系统变得非常简单，特别是在虚拟机上。
- en: If your database server is on a virtual machine, you can add a disk to the volume
    group and expand it if your database partition starts to get full, and your customers
    will never notice there was ever about to be a problem. Without LVM, you’ll need
    to shut down the server, add a new volume, `rsync` your database server files
    over to the new location, and then bring up the server. Depending on the size
    of your database, this situation can span hours. Do yourself a favor, use LVM.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的数据库服务器运行在虚拟机上，当数据库分区快要满时，你可以向卷组中添加磁盘并扩展它，这样你的客户就永远不会察觉到会出现问题。如果没有LVM，你需要关闭服务器，添加新的卷，使用`rsync`将数据库服务器文件传输到新位置，然后再启动服务器。根据数据库的大小，这个过程可能会持续几个小时。为了省事，使用LVM吧。
- en: 'With that out of the way, we can begin setting up MariaDB. For learning and
    testing purposes, you can use pretty much any server you’d like: physical, virtual,
    or a **Virtual Private Server** (**VPS**). Once you’re ready, let’s move on and
    we’ll get started!'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 说完这些，我们可以开始设置MariaDB了。对于学习和测试目的，你可以使用几乎任何你喜欢的服务器：物理服务器、虚拟服务器或**虚拟私人服务器**（**VPS**）。一旦你准备好了，我们就可以开始了！
- en: Installing MariaDB
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装MariaDB
- en: 'Now we’ve come to the fun part, installing MariaDB. To get the ball rolling,
    we’ll install the `mariadb-server` package:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们进入了有趣的部分，安装MariaDB。为了开始，我们将安装`mariadb-server`软件包：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If your organization prefers to stick with MySQL, the package to install is
    `mysql-server` instead:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的组织倾向于继续使用MySQL，安装的软件包是`mysql-server`：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Although it might be tempting to try out both MySQL and MariaDB to compare and
    contrast their differences, I don’t recommend switching from MariaDB to MySQL
    (or vice versa) on the same server. I’ve seen some very strange configuration
    issues occur on servers that had one installed and then were switched to the other
    (even after wiping the configuration). For the most part, it’s best to pick one
    solution per server and stick with it. As a general rule, MySQL should be used
    if you have legacy databases to support. For brand-new installations, go with
    MariaDB.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可能会想尝试同时对比MySQL和MariaDB的不同之处，但我不推荐在同一台服务器上从MariaDB切换到MySQL（或反之）。我见过一些服务器在安装了其中一个软件包后又切换到另一个软件包时，出现了非常奇怪的配置问题（即便是清除配置之后）。大多数情况下，最好每台服务器只选择一个解决方案并坚持使用。一般来说，如果你需要支持旧的数据库，应该使用MySQL。对于全新的安装，建议使用MariaDB。
- en: 'After you install the `mariadb-server` package, check to make sure the service
    started and is enabled. By default, it should already be running:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`mariadb-server`软件包后，请检查确保服务已经启动并启用。默认情况下，它应该已经在运行：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, we’ll want to add some security to our MariaDB installation (even though
    we’re using MariaDB, the name of the following command hasn’t been updated and
    still includes `mysql` in the name):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要为我们的MariaDB安装增加一些安全设置（尽管我们使用的是MariaDB，但以下命令的名称并没有更新，仍然包含`mysql`）：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: At this point, we haven’t set a `root` password yet, so go ahead and just press
    *Enter* when the script asks for it. This script will ask you additional questions.
    You will be asked if you’d like to switch to **unix_socket authentication**. The
    default answer for this question is yes, but I recommend answering no to this
    question. This will ensure password authentication is used, which is going to
    be better for compatibility. There is a security benefit by switching to `unix_socket
    authentication`, but for our purposes password authentication will suffice. If
    you decide to dive into the subject of database management, switching to `unix_socket
    authentication` might be better in the future.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们还没有设置`root`密码，因此当脚本要求输入密码时，直接按*Enter*即可。脚本还会问你一些其他问题。你将被询问是否希望切换到**unix_socket认证**。这个问题的默认答案是是，但我建议你回答否。这样可以确保使用密码认证，这对于兼容性来说更好。虽然切换到`unix_socket认证`有安全上的好处，但对于我们的目的来说，密码认证已经足够。如果你决定深入学习数据库管理，未来切换到`unix_socket认证`可能会更好。
- en: Continuing, the `mysql_secure_installation` script will ask you if you want
    to set a `root` password. The `root` user for MariaDB is not the same as the `root`
    user on your system, and you definitely should create a password for it. So when
    this comes up, press *y* to tell it you want to create a `root` password, then
    enter that password twice.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`mysql_secure_installation`脚本会询问你是否要设置`root`密码。MariaDB的`root`用户与系统上的`root`用户不同，你肯定应该为它设置一个密码。所以当出现这个问题时，按*y*表示你想要创建一个`root`密码，然后输入该密码两次。
- en: After setting the `root` password, the script will ask you whether you’d like
    to remove anonymous users, and also disallow remote access to the database server.
    You should answer yes to both. The latter is especially important, as there’s
    almost never a situation in which allowing public access to MySQL/MariaDB is a
    good idea. Even if you’re hosting a website for external users, those users only
    need access to the website, not the database server. The website itself will interface
    with the database locally as needed; an external connection wouldn’t be necessary.
    (If you have a standalone database server that’s not publicly accessible to the
    internet, then you will want to answer yes here – just make sure that the database
    server can’t be reached publicly). Continuing for the most part, just answer `yes`
    to everything the script asks you (unless you have a good reason not to).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置`root`密码后，脚本会询问你是否希望删除匿名用户，并且禁用远程访问数据库服务器。你应该对这两个问题都回答是。后者尤为重要，因为几乎没有任何情况下允许MySQL/MariaDB的公共访问是一个好主意。即使你为外部用户托管网站，这些用户只需要访问网站，而不是数据库服务器。网站本身将根据需要与数据库本地交互；外部连接是不必要的。（如果你有一个独立的数据库服务器并且该服务器不能公开访问互联网，那么你应该在这里回答是——只要确保数据库服务器不能被公开访问）。大多数情况下，继续执行，回答脚本询问的所有问题`yes`即可（除非你有充分的理由不这样做）。
- en: 'The entire process after executing `mysql_secure_installation` looks like the
    following, and I’ve included the responses I recommend for each (“y” for yes,
    “n” for no):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 执行完`mysql_secure_installation`后，整个过程如下所示，我已经为每个步骤包含了我推荐的回答（“y”表示是，“n”表示否）：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'At this point, we officially have a fully functional database server. The previous
    command allowed us to apply some basic security, and our database server is now
    available to us. To connect to it and manage it, we’ll use the `mariadb` command
    to access the MariaDB shell, where we’ll enter commands to manage our database(s).
    There are actually two methods to connect to this shell. The first method is by
    simply using the `mariadb` command with `sudo`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经拥有了一个完全功能性的数据库服务器。之前的命令让我们能够应用一些基本的安全设置，现在我们的数据库服务器已经可以使用了。为了连接到它并进行管理，我们将使用`mariadb`命令访问MariaDB的命令行，在这里我们将输入命令来管理我们的数据库。实际上，有两种方法可以连接到这个命令行。第一种方法是简单地使用带有`sudo`的`mariadb`命令：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This particular command works because if you use the `mariadb` command as `root`
    (we used `sudo` in this example) the password is bypassed. In fact, we didn’t
    even enter the username either; `root` is assumed if you are attempting to access
    MariaDB with `sudo`. This is by far the simplest way to connect. However, some
    of you may be accustomed to a different method of authentication if you’ve used
    other Linux distributions: entering the username and password. In that case, the
    command will look like this (it won’t work by default though):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定的命令有效，因为如果你以 `root` 身份使用 `mariadb` 命令（我们在这个例子中使用了 `sudo`），密码会被绕过。实际上，我们甚至没有输入用户名；如果你使用
    `sudo` 访问 MariaDB，默认会假定是 `root`。这是连接的最简单方式。然而，如果你使用过其他 Linux 发行版，可能更习惯于另一种身份验证方法：输入用户名和密码。在这种情况下，命令将如下所示（但默认情况下不会起作用）：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When that command works correctly, it will ask you for your `root` password
    and then let you into the shell.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当该命令正确执行时，它会要求你输入 `root` 密码，然后允许你进入 shell。
- en: It’s recommended to create a different user in order to manage your MariaDB
    installation, as logging in as `root` is not recommended in most cases. We’ll
    be creating additional users later on in this chapter, but for now, the `root`
    account is the only one we have available. It’s common practice to use the root
    account to do the initial setup, and then create a different user for administrative
    purposes going forward. However, the `root` account is still often used for server
    maintenance, so use your best judgment.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐创建一个不同的用户来管理你的 MariaDB 安装，因为在大多数情况下不推荐以 `root` 身份登录。我们将在本章稍后创建其他用户，但现在，`root`
    账户是唯一可用的账户。通常的做法是使用 root 账户进行初步设置，然后为后续的管理工作创建一个不同的用户。不过，`root` 账户仍然常用于服务器维护，因此请根据自己的判断使用它。
- en: So, now that we have access to the MariaDB shell, what can we do with it? The
    commands we’ll execute on this shell allow us to do things such as create and
    delete databases and users, add tables, and so on. The `mariadb` command comes
    from the `mariadb-client-10.6` package, which was installed as a dependency when
    we installed `mariadb-server`. Entering the `mariadb` command by itself with no
    options connects us to the database server on our local machine. This utility
    also lets us connect to external database servers to manage them remotely, which
    we’ll discuss later.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经可以访问 MariaDB shell，我们可以用它做些什么呢？我们在这个 shell 中执行的命令可以让我们进行诸如创建和删除数据库和用户、添加表格等操作。`mariadb`
    命令来自 `mariadb-client-10.6` 包，该包在我们安装 `mariadb-server` 时作为依赖项一起安装。单独输入 `mariadb`
    命令而不加任何选项，将连接到我们本地机器上的数据库服务器。这个工具还允许我们连接到外部数据库服务器，以便远程管理它们，稍后我们会讨论这个功能。
- en: 'The MariaDB shell prompt will look like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB shell 提示符将如下所示：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We’ll get into MariaDB commands and user management later. For now, you can
    exit the shell. To exit, you can type `exit` and press *Enter* or press *Ctrl*
    + *d* on your keyboard.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会深入讨论 MariaDB 命令和用户管理。现在，你可以退出 shell。要退出，你可以键入 `exit` 并按 *Enter* 键，或者按 *Ctrl*
    + *d* 键。
- en: Now, our MariaDB server is ready to go. While you can now move on to the next
    section, you might want to consider setting up another MariaDB server by following
    these steps on another machine. If you have room for another virtual machine,
    it might be a good idea for you to get this out of the way now, since we’ll be
    setting up a secondary database server later.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的 MariaDB 服务器已经准备好。虽然你现在可以继续进入下一部分，但你可能想考虑在另一台机器上按照这些步骤设置另一个 MariaDB 服务器。如果你有空间为另一个虚拟机提供位置，现在做这件事可能是个好主意，因为稍后我们会设置一个备用数据库服务器。
- en: Understanding the MariaDB configuration files
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 MariaDB 配置文件
- en: Now that we have MariaDB installed, let’s take a quick look at how its configuration
    is stored. While we won’t be changing much of the configuration in this chapter
    (aside from adding parameters related to setting up a secondary database instance),
    it’s a good idea to know where to find the configuration, since you’ll likely
    be asked by a developer to tune the database configuration at some point in your
    career. This may involve changing the storage engine, buffer sizes, or countless
    other settings. A full walkthrough on performance tuning is outside the scope
    of this book, but it will be helpful to know how the settings for MariaDB are
    read, since Ubuntu’s implementation is fairly unique.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 MariaDB，让我们快速了解一下它的配置是如何存储的。尽管在本章中我们不会更改太多配置（除了添加与设置次要数据库实例相关的参数），但了解配置文件存放位置是一个好主意，因为将来开发者可能会要求你调整数据库配置。这可能涉及更改存储引擎、缓冲区大小或其他无数设置。关于性能调优的完整指南超出了本书的范围，但了解如何读取
    MariaDB 的设置会很有帮助，因为 Ubuntu 的实现方式相当独特。
- en: 'The configuration files for MariaDB are stored in the `/etc/mysql` directory.
    In that directory, you’ll see the following files by default:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB 的配置文件存储在 `/etc/mysql` 目录中。在该目录下，你默认会看到以下文件：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You’ll also see the following directories:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会看到以下目录：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The configuration file that MariaDB reads on startup is the `/etc/mysql/mariadb.cnf`
    file. This is where you’ll begin perusing when you want to configure the daemon,
    but we’ll get to that soon. The `/etc/mysql/debian-start` file is actually a script
    that sets default values for MariaDB when it starts, such as setting some environment
    variables. It also defines a task that is executed if the `mariadb` process dies
    or exits, and allows it to check for crashed tables.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB 启动时读取的配置文件是 `/etc/mysql/mariadb.cnf` 文件。想要配置守护进程时，你会首先查看这个文件，但我们很快就会讲到。`/etc/mysql/debian-start`
    文件实际上是一个脚本，用于在 MariaDB 启动时设置默认值，例如设置一些环境变量。它还定义了一个任务，当 `mariadb` 进程崩溃或退出时执行，并允许检查崩溃的表。
- en: 'The `debian-start` script also loads the `/etc/mysql/debian.cnf` file, which
    sets some client settings for the `mariadb` daemon. Here’s a list of values from
    that file:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`debian-start` 脚本还加载了 `/etc/mysql/debian.cnf` 文件，该文件为 `mariadb` 守护进程设置了一些客户端设置。以下是该文件中的一些值：'
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The defaults for these values are fine and there’s rarely a reason to change
    them. Essentially, the file sets the default user, host, and socket location.
    If you’ve used MySQL before on other platforms, you may have seen many of those
    settings in the `/etc/my.cnf` file, which is typically the standard file for the
    `mariadb` daemon. With MariaDB on Ubuntu Server, you can see that the default
    layout of the files was changed considerably.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这些值的默认设置已经足够，通常没有必要更改它们。实际上，这个文件设置了默认的用户、主机和套接字位置。如果你之前在其他平台上使用过 MySQL，你可能已经在
    `/etc/my.cnf` 文件中见过许多这样的设置，它通常是 `mariadb` 守护进程的标准文件。在 Ubuntu Server 上使用 MariaDB
    时，你会发现文件的默认布局发生了显著变化。
- en: The `/etc/mysql/mariadb.cnf` file sets the global defaults for MariaDB. However,
    in Ubuntu’s implementation, this default file just includes configuration files
    from the `/etc/mysql/conf.d` and `/etc/mysql/mariadb.conf.d` directories. Within
    those directories, there are additional files ending with the `.cnf` extension.
    Many of these files contain default configuration values that would normally be
    found in a single file, but Ubuntu’s implementation modularizes these settings
    into separate files instead. For our purposes in this book, we’ll be editing the
    `/etc/mysql/conf.d/mysql.cnf` file when it is time to set up a relationship between
    primary and secondary servers.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`/etc/mysql/mariadb.cnf` 文件设置了 MariaDB 的全局默认值。然而，在 Ubuntu 的实现中，这个默认文件只是包含了
    `/etc/mysql/conf.d` 和 `/etc/mysql/mariadb.conf.d` 目录中的配置文件。在这些目录中，有许多文件以 `.cnf`
    扩展名结尾。许多文件包含了通常会出现在单一文件中的默认配置值，但 Ubuntu 将这些设置模块化到单独的文件中。为了本书的目的，当我们需要设置主从服务器关系时，将编辑
    `/etc/mysql/conf.d/mysql.cnf` 文件。'
- en: The other configuration files aren’t relevant for the content of this book,
    and their current values are more than sufficient for what we need. When it comes
    to performance tuning, you may consider creating a new configuration file ending
    with the `.cnf` extension, with specific tuning values as provided by the documentation
    of a software package you want to run that interfaces with a database, or requirements
    given to you by a developer.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 其他配置文件与本书的内容无关，它们的当前值已经足够满足我们的需求。在性能调优方面，你可以考虑创建一个新的以`.cnf`结尾的配置文件，文件中包含特定的调优值，这些值可以通过你想运行的软件包的文档或开发者给出的需求来提供。
- en: 'For additional information on how these configuration files are read, you can
    refer to the `/etc/mysql/mariadb.cnf` file, which includes some helpful content
    at the top of the file that details the order in which these configuration files
    are read, as well as their purpose. Here’s an excerpt of these comments from that
    file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取更多关于这些配置文件是如何被读取的信息，你可以参考`/etc/mysql/mariadb.cnf`文件，文件顶部包含一些有用的内容，详细说明了这些配置文件被读取的顺序及其目的。以下是该文件中这些注释的摘录：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As we can see, when MariaDB starts up, it first reads the `/etc/mysql/mariadb.cnf`
    file, followed `by .cnf` files stored within the `/etc/mysql/conf.d` directory,
    then the `.cnf` files stored within the `/etc/mysql/mariadb.conf.d` directory,
    followed by any user-specific settings stored within a `.my.cnf` file that may
    be present in the user’s `home` directory.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，当 MariaDB 启动时，它首先读取`/etc/mysql/mariadb.cnf`文件，然后是存储在`/etc/mysql/conf.d`目录中的`.cnf`文件，接着是存储在`/etc/mysql/mariadb.conf.d`目录中的`.cnf`文件，最后是任何可能存在于用户`home`目录中的`.my.cnf`文件，其中包含用户特定的设置。
- en: 'With Ubuntu’s implementation, when the `/etc/mysql/mariadb.cnf` file is read
    during startup, the process will immediately scan the contents of `/etc/mysql/conf.d`
    and `/etc/mysql/mariadb.conf.d`, because the `/etc/mysql/mariadb.cnf` file contains
    the following lines:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 的实现中，当启动时读取`/etc/mysql/mariadb.cnf`文件时，系统将立即扫描`/etc/mysql/conf.d`和`/etc/mysql/mariadb.conf.d`的内容，因为`/etc/mysql/mariadb.cnf`文件包含以下几行：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, the order that the configuration files are checked is set to
    the `mariadb.cnf` file first, followed by the `/etc/mysql/conf.d` and `/etc/mysql/mariadb.conf.d`
    directories.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，配置文件检查的顺序是先检查`mariadb.cnf`文件，然后检查`/etc/mysql/conf.d`和`/etc/mysql/mariadb.conf.d`目录。
- en: This may be a bit confusing at first, because the default configuration for
    MariaDB in Ubuntu Server essentially consists of files that redirect to other
    files. But the main takeaway is that any configuration changes you make that are
    not exclusive to MariaDB (basically, configuration that’s compatible with MySQL
    itself) should be placed in a configuration file that ends with the `.cnf` extension,
    and then stored in the `/etc/mysql/conf.d` directory.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始这可能会有点令人困惑，因为在 Ubuntu Server 中 MariaDB 的默认配置基本上由重定向到其他文件的配置文件组成。但要点是，任何你进行的非
    MariaDB 专属的配置更改（基本上是与 MySQL 本身兼容的配置）应放在以`.cnf`结尾的配置文件中，然后存储在`/etc/mysql/conf.d`目录中。
- en: If the configuration you’re wanting to add is for a feature exclusive to MariaDB
    (but not compatible with MySQL itself), the configuration file should be placed
    in the `/etc/mysql/mariadb.conf.d` directory instead. For our purposes, we’ll
    be editing the `/etc/mysql/conf.d/mysql.cnf` file when it comes time to set up
    our primary/secondary replication, since the method we’ll be using is not specific
    to MariaDB.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想添加的配置是 MariaDB 独有的功能（但与 MySQL 本身不兼容），则应将配置文件放在`/etc/mysql/mariadb.conf.d`目录中。对于我们的目的，当我们设置主从复制时，我们将编辑`/etc/mysql/conf.d/mysql.cnf`文件，因为我们使用的方法并不特定于
    MariaDB。
- en: In this section, we discussed MariaDB configuration and how it differs from
    its implementation in other platforms. The way the configuration files are presented
    is not the only difference in Ubuntu’s implementation of MariaDB; there are other
    differences as well. In the next section, we’ll take a look at a few additional
    ways in which Ubuntu’s implementation differs from implementations in other distributions
    of Linux.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了 MariaDB 配置及其与其他平台实现的不同之处。配置文件的呈现方式并不是 Ubuntu 实现 MariaDB 的唯一不同点；还有其他差异。下一节中，我们将查看
    Ubuntu 实现与其他 Linux 发行版实现之间的几种额外差异。
- en: Managing MariaDB databases
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理 MariaDB 数据库
- en: Now that our MariaDB server is up and running, we can finally look into managing
    it. In this section, I’ll demonstrate how to connect to a database server using
    the `mariadb` command, which will allow us to create databases, remove (drop)
    them, and also manage users and permissions.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的MariaDB服务器已经启动并运行，我们终于可以着手管理它了。在本节中，我将演示如何使用`mariadb`命令连接到数据库服务器，这将使我们能够创建数据库、删除（丢弃）它们，并管理用户和权限。
- en: To begin, we’ll need to create an administrative user for MariaDB. The `root`
    account already exists as the default administrative user, but it’s not a good
    idea to allow others to use that account. Instead, it makes more sense to create
    an administrative account separate from `root` for managing our databases. Therefore,
    we’ll begin our discussion on managing databases with user management. The users
    we’ll manage within MariaDB are specific to MariaDB; these are separate from the
    user accounts on the actual system.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要为MariaDB创建一个管理员用户。`root`账户已经存在，作为默认的管理员账户，但允许其他人使用该账户并不安全。相反，为了管理我们的数据库，创建一个与`root`分开的管理员账户会更有意义。因此，我们将从管理用户开始讨论数据库管理。在MariaDB中管理的用户是特定于MariaDB的，它们与实际系统上的用户账户是分开的。
- en: 'To manage and interact with databases, we’ll need to enter the MariaDB shell,
    and the same goes for when it comes to creating database users. Right now, since
    we only have the `root` account, we’ll need to access the current MariaDB implementation
    as `root` in order to set up our administrative user. If you’ve set up standard
    authentication, as we discussed earlier in this chapter, you can access the prompt
    using the standard means:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要管理和与数据库交互，我们需要进入MariaDB shell，创建数据库用户时也是如此。现在，由于我们只有`root`账户，我们需要以`root`身份访问当前的MariaDB实例，以便设置管理员用户。如果你按照本章前面讨论的内容设置了标准认证，你可以通过标准方式访问提示符：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Or, more simply:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，更简单的方式是：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once inside the MariaDB shell, your prompt will change to the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入MariaDB shell，提示符会变成如下所示：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, we can create our new administrative user. I’ll call mine `admin` in my
    examples, but you can use whatever name you’d like. In a company I used to work
    for, we used the username `velociraptor` as our administrative user on our servers,
    since nothing is more powerful than a velociraptor (and they can open doors).
    Feel free to use a clever name, but just make sure you remember it. Using a non-standard
    username has the added benefit of security by obscurity; the name wouldn’t be
    what an intruder would expect.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以创建新的管理员用户。我在示例中将其命名为`admin`，但你可以使用任何你喜欢的名字。在我曾经工作的一个公司里，我们在服务器上使用了用户名`velociraptor`作为管理员用户，因为没有什么比迅猛龙更强大（而且它们可以开门）。你可以随意使用一个聪明的名字，但一定要记住它。使用非标准用户名有一个附加的安全优势，就是通过模糊化提高安全性；这个名字不会是入侵者预期的。
- en: 'Here’s the command to create a new user in MariaDB (replace the username and
    password in the command with your desired credentials):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在MariaDB中创建新用户的命令（将命令中的用户名和密码替换为你所希望的凭据）：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When it comes to MySQL syntax, the commands are not case sensitive (though the
    data parameters are), but it’s common to capitalize instructions to separate them
    from data. During the remainder of this chapter, we’ll be executing some commands
    within the Linux shell, and others within the MariaDB shell. I’ll let you know
    which shell each command needs to be executed in as we come to them, but if you
    are confused, just keep in mind that MariaDB commands are the only ones that are
    capitalized.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL语法方面，命令不区分大小写（尽管数据参数区分大小写），但通常会将指令大写，以便与数据区分开来。在本章的其余部分，我们将在Linux shell中执行一些命令，在MariaDB
    shell中执行其他命令。我会告诉你每个命令需要在哪个shell中执行，但如果你感到困惑，只需要记住，只有MariaDB命令是大写的。
- en: With the preceding commands, we’re creating the `admin` user and restricting
    it to `localhost`. This is important because we don’t want to open up the `admin`
    account to the world. We’re also flushing privileges, which causes MariaDB to
    reload its privileges information. The `FLUSH PRIVILEGES` command should be run
    every time you add a user or modify permissions. I may not always mention the
    need to run this command, so you might want to make a mental note of it and make
    it a habit now.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的命令，我们创建了`admin`用户，并将其限制为`localhost`。这是很重要的，因为我们不想将`admin`账户暴露给全世界。我们还执行了刷新权限操作，这会导致MariaDB重新加载其权限信息。每次添加用户或修改权限时，都应该运行`FLUSH
    PRIVILEGES`命令。我可能不会每次都提到需要运行此命令，所以你现在可以记住它并养成一个习惯。
- en: 'As I mentioned, the previous command created the `admin` user but is only allowing
    it to connect from `localhost`. This means that an administrator would first need
    to log in to the server itself before they would be able to log in to MariaDB
    with the `admin` account. As an example of the same command (but allowing remote
    login from any other location), the following command is a variation that will
    do just that:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前所提到的，前面的命令创建了`admin`用户，但只允许它从`localhost`连接。这意味着管理员必须先登录到服务器本身，才能使用`admin`账户登录MariaDB。以下命令是一个变体，允许从其他任何位置远程登录：
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Can you see the percent symbol (`%`) in place of `localhost`? That basically
    means *everywhere*, which indicates we’re creating a user that can be logged into
    from any source (even external nodes). However, by restricting our user to `localhost`
    with the first command, we’re making our server just a bit more secure. You can
    also restrict access to particular networks, which is desired if you really do
    need to allow a database administrator access to the server remotely:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您能看到`%`符号替代`localhost`吗？这基本上意味着*任何地方*，这表示我们正在创建一个可以从任何来源（甚至外部节点）登录的用户。然而，通过使用第一个命令将用户限制为`localhost`，我们让服务器变得更加安全。您还可以限制访问特定的网络，如果您确实需要远程允许数据库管理员访问服务器的话，这样做是非常必要的：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: That’s a little better, but not as secure as limiting login to `localhost`.
    As you can see, the `%` character is basically a wildcard, so you can restrict
    access to needing to be from a specific IP or even a particular subnet.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这样稍微好一些，但仍然不如将登录限制为`localhost`安全。正如您所看到的，`%`字符基本上是一个通配符，因此您可以通过它来限制访问，只允许特定IP甚至特定子网的访问。
- en: 'So far, all we did is create a new user; we have yet to give this user any
    permissions. We can create a set of permissions (also known as **grants**) with
    the `GRANT` command. First, let’s give our admin user full access to the database
    server when called from `localhost`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所做的只是创建了一个新用户；我们还没有赋予该用户任何权限。我们可以使用`GRANT`命令创建一组权限（也称为**授权**）。首先，我们让管理员用户在从`localhost`调用时可以完全访问数据库服务器：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, we have an administrative user we can use to manage our server’s databases.
    We can use this account for managing our server instead of the `root` account.
    Any logged-on Linux user will be able to access the database server and manage
    it, provided they know the password. To access the MariaDB shell as the `admin`
    user that we created, the following command will do the trick:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了一个可以用来管理服务器数据库的管理员账户。我们可以使用这个账户来管理服务器，而不是使用`root`账户。任何已登录的Linux用户只要知道密码，就可以访问并管理数据库服务器。要以我们创建的`admin`用户身份进入MariaDB命令行，以下命令可以实现：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: After entering the password, you’ll be logged into MariaDB as `admin`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 输入密码后，您将以`admin`身份登录MariaDB。
- en: 'In addition, you can actually provide the password to the `mariadb` command
    without needing to be prompted for it:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您实际上可以直接将密码提供给`mariadb`命令，而无需系统提示输入密码：
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Notice that there is no space in between the `-p` option and the actual password
    (though it’s common to put a space between the `-u` option and the username).
    As useful as it is to provide the username and password in one shot, I don’t recommend
    that you ever use that method. This is because any Linux command you type is saved
    in the history, so anyone can view your command history and they’ll see the password
    in plain text. I only mention it here because I find that many administrators
    do this, even though they shouldn’t. At least now you’re aware of this method
    and why it’s wrong.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`-p`选项和实际密码之间没有空格（尽管通常`-u`选项和用户名之间会有空格）。尽管一次性提供用户名和密码非常方便，但我不建议您使用这种方法。这是因为任何您输入的Linux命令都会被保存到历史记录中，因此任何人都可以查看您的命令历史记录，并且能看到明文的密码。我之所以在这里提到它，是因为我发现许多管理员会这么做，尽管他们不应该这么做。至少现在您了解了这种方法以及它为何不正确。
- en: The `admin` account we created is only intended for system administrators who
    need to manage databases on the server. The password for this account should not
    be given to anyone other than staff employees or administrators that absolutely
    need it. Additional users can be added to the MariaDB server, each with differing
    levels of access. Keep in mind that our `admin` account can manage databases but
    not users. This is important, as you probably shouldn’t allow anyone other than
    server administrators to create users. You’ll still need to log in as `root` to
    manage user permissions.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的`admin`账户仅供需要在服务器上管理数据库的系统管理员使用。该账户的密码不应提供给任何不必要的人员，除非是工作人员或确实需要的管理员。可以向MariaDB服务器添加其他用户，每个用户可以拥有不同的访问权限。请记住，我们的`admin`账户可以管理数据库，但不能管理用户。这一点很重要，因为你可能不应该允许除了服务器管理员以外的任何人创建用户。你仍然需要以`root`身份登录来管理用户权限。
- en: 'It may also be useful to create a read-only user for MariaDB for employees
    who need to be able to read data but not make changes. Back in the MariaDB shell
    (as `root`), we can issue the following command to effectively create a read-only
    user:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为需要能够读取数据但不能修改数据的员工创建MariaDB只读用户也许会很有用。在MariaDB命令行界面（作为`root`用户）中，我们可以执行以下命令来有效地创建一个只读用户：
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: With this command (and flushing privileges afterward), we’ve done two things.
    First, we’ve created a new user and also set up grants for that user with a single
    command. Second, we’ve created a read-only user that can view databases but not
    manage them (we’ve restricted the permissions to `SELECT`). This is more secure.
    In practice, it’s better to restrict a read-only user to a specific database.
    This is typical in a development environment, where you’ll have an application
    that connects to a database over a network and needs to read information from
    it. We’ll go over this scenario soon.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通过此命令（并在之后刷新权限），我们做了两件事。首先，我们创建了一个新用户，并且通过一个命令设置了该用户的权限。第二，我们创建了一个只读用户，允许其查看数据库但不能管理它（我们限制了其`SELECT`权限）。这样更加安全。实际上，最好将只读用户限制在特定数据库内。这在开发环境中尤为典型，在这种环境中，应用程序通过网络连接到数据库并需要从中读取信息。我们很快会讨论这种场景。
- en: 'Next, let’s create a database. At the MariaDB prompt, execute:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个数据库。在MariaDB提示符下，执行：
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'That was easy. We should now have a database on our server named `mysampledb`.
    To list all databases on our server (and confirm our database was created properly),
    we can execute the following command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 很简单。现在我们的服务器上应该有一个名为`mysampledb`的数据库。要列出服务器上的所有数据库（并确认我们的数据库已正确创建），我们可以执行以下命令：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This will produce an output like the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生类似以下的输出：
- en: '![](img/B18425_13_01.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_13_01.png)'
- en: 'Figure 13.1: Listing MariaDB databases'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.1：列出MariaDB数据库
- en: 'The output will show some system databases that were created for us, but our
    new database should be listed among them. We can also list users just as easily:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将显示一些为我们创建的系统数据库，但我们的新数据库应该会出现在其中。我们也可以同样容易地列出用户：
- en: '[PRE25]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Entering this command will result in something similar to the following output:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 输入此命令将产生类似以下的输出：
- en: '![Text  Description automatically generated](img/B18425_13_02.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图像描述自动生成](img/B18425_13_02.png)'
- en: 'Figure 13.2: Listing MariaDB users'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.2：列出MariaDB用户
- en: 'In a typical scenario, when installing an application that needs its own database,
    we’ll create the database and then a user for that database. We’ll normally want
    to give that user permission to only that database, with only as much permission
    as required to allow it to function properly. We’ve already created the `mysampledb`
    database, so if we want to create a user with read-only access to it, we can do
    so with the following command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在典型的场景中，当安装一个需要自己数据库的应用程序时，我们会先创建数据库，然后为该数据库创建一个用户。我们通常希望只授予该用户对该数据库的权限，并且只授予其运行所需的最低权限。我们已经创建了`mysampledb`数据库，因此如果我们想为该数据库创建一个只读访问的用户，我们可以通过以下命令实现：
- en: '[PRE26]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'With one command, we’re not only creating the user `appuser`, but we’re also
    setting a password for it, in addition to allowing it to have `SELECT` permissions
    on the `mysampledb` database. This is equivalent to read-only access. If our user
    needed full access, we could use the following instead:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个命令，我们不仅创建了用户`appuser`，还为其设置了密码，并允许其在`mysampledb`数据库上拥有`SELECT`权限。这相当于只读访问。如果我们的用户需要完全访问权限，我们可以使用以下命令：
- en: '[PRE27]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To double-check that we’ve executed the command correctly, we can use this
    command to show the grants for a particular user:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了再次确认我们正确执行了命令，我们可以使用以下命令来显示特定用户的权限：
- en: '[PRE28]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now, our `appuser` has full access but only to the `mysampledb` database. Of
    course, we should only provide full access to the database if absolutely necessary.
    We can also provide additional permissions, such as `DELETE` (whether or not the
    user has permission to delete rows from database tables), `CREATE` (which controls
    whether the user can add rows to the database), `INSERT` (controls whether or
    not the user can add new rows to a table), `SELECT` (allows the user to read information
    from the database), `DROP` (allows the user to fully remove a database), and `ALL`
    (which gives the user everything). There are other permissions we can grant or
    deny; check the MariaDB documentation for more details. The types of permissions
    you’ll need to grant to a user to satisfy the application you’re installing will
    depend on the documentation for that software. Always refer to the installation
    instructions for the application you’re attempting to install to determine which
    permissions are required for it to run.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的`appuser`拥有对`mysampledb`数据库的完全访问权限。当然，只有在绝对必要时，我们才应该为数据库提供完全访问权限。我们还可以提供其他权限，例如`DELETE`（是否允许用户从数据库表中删除行）、`CREATE`（控制用户是否可以向数据库添加行）、`INSERT`（控制用户是否可以向表格添加新行）、`SELECT`（允许用户从数据库中读取信息）、`DROP`（允许用户完全删除数据库）以及`ALL`（授予用户所有权限）。我们可以授予或拒绝其他权限；有关更多详细信息，请查看MariaDB文档。为了满足你正在安装的软件，所需授予用户的权限类型将取决于该软件的文档。始终参考你正在尝试安装的应用程序的安装说明，以确定它需要哪些权限才能运行。
- en: 'If you’d like to remove user access, you can use the following command to do
    so (substituting `myuser` with the user account you wish to remove):'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想删除用户访问权限，可以使用以下命令来实现（将`myuser`替换为你想删除的用户账户）：
- en: '[PRE29]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, let’s go back to databases. Now that we’ve created the `mysampledb` database,
    what can we do with it? We’ll add tables and rows, of course! A database is useless
    without actual data, so we can work through some examples of adding data to our
    database to see how this works. First, log in to the MariaDB shell as a user with
    full privileges to the `mysampledb` database. Now, we can have some fun and modify
    the contents. Here are some examples you can follow:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回到数据库部分。既然我们已经创建了`mysampledb`数据库，那么我们可以做些什么呢？当然是添加表格和数据行！没有实际数据，数据库是没有意义的，所以我们可以通过一些示例来添加数据，看看它是如何工作的。首先，以具有对`mysampledb`数据库完全权限的用户身份登录MariaDB
    Shell。现在，我们可以开始有趣的部分，修改内容。以下是一些你可以参考的示例：
- en: '[PRE30]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `USE` command allows us to select a database we want to work with. The MariaDB
    prompt will change from `MariaDB [(none)]>` to `MariaDB [mysampledb]>`. This is
    very useful, as the MariaDB prompt changes to indicate which database we are currently
    working with. We basically just told `MariaDB` that for all of the commands we’re
    about to execute, we would like them to be issued against the `mysampledb` database.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`USE`命令允许我们选择要使用的数据库。MariaDB的提示符会从`MariaDB [(none)]>`变为`MariaDB [mysampledb]>`。这个变化非常有用，因为MariaDB的提示符会变化，指示我们当前正在使用哪个数据库。我们基本上是告诉`MariaDB`，对于我们接下来要执行的所有命令，我们希望它们作用于`mysampledb`数据库。'
- en: 'Now, we can `CREATE` a table in our database. It doesn’t matter what you call
    yours, since we’re just practicing. I’ll call mine `Employees`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在数据库中`CREATE`一个表格。你可以随意命名你的表格，因为我们只是在练习。我会将我的表命名为`Employees`：
- en: '[PRE31]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We can verify this command by showing the columns in the database, to ensure
    it shows what we expect:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过展示数据库中的列来验证这个命令，以确保它显示的是我们预期的内容：
- en: '[PRE32]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'With this command, we’ve created a table named `Employees` that has three columns
    (`Name`, `Age`, and `Occupation`). To add new data to this table, we can use the
    following `INSERT` command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个命令，我们创建了一个名为`Employees`的表格，包含三列（`Name`、`Age`和`Occupation`）。要向此表格中添加新数据，我们可以使用以下`INSERT`命令：
- en: '[PRE33]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The example `INSERT` command adds a new employee to our `Employees` table.
    When we use `INSERT`, we insert all the data for each of the columns. Here, we
    have an employee named `Joe`, who is `26` years old and whose occupation is a
    `Ninja`. Feel free to add additional employees; all you would need to do is formulate
    additional `INSERT` statements and provide data for each of the three fields.
    When you’re done, you can use the following command to show all of the data in
    this table:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`INSERT`命令示例将一名新员工添加到我们的`Employees`表中。当我们使用`INSERT`时，我们会为每一列插入所有数据。在这个例子中，我们有一名名叫`Joe`的员工，他`26`岁，职业是`忍者`。你可以随意添加更多员工；只需要编写额外的`INSERT`语句，并为每一列提供数据。当你完成时，可以使用以下命令来显示该表中的所有数据：'
- en: '[PRE34]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '![](img/B18425_13_03.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18425_13_03.png)'
- en: 'Figure 13.3: Listing database rows from a table'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.3：列出表中的数据库行
- en: 'To remove an entry, the following command will do what we need:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除一条记录，以下命令将完成所需操作：
- en: '[PRE35]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Basically, we’re using the `DELETE FROM` command, giving the name of the table
    we wish to delete from (`Employees`, in this case), and then using `WHERE` to
    provide some search criteria for narrowing down our command.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们使用`DELETE FROM`命令，指定我们希望删除的表名（在这个例子中是`Employees`），然后使用`WHERE`来提供一些搜索条件，以便缩小我们的命令范围。
- en: 'The `DROP` command allows us to delete tables or entire databases, and it should
    be used with care. I don’t actually recommend you delete the database we just
    created, since we’ll use it for additional examples. But if you really wanted
    to drop the `Employees` table, you could use:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`DROP`命令允许我们删除表或整个数据库，因此使用时需要小心。我并不建议你删除我们刚刚创建的数据库，因为我们会在后续示例中使用它。但如果你真的想删除`Employees`表，可以使用：'
- en: '[PRE36]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Or use this to drop the entire database:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用这个命令来删除整个数据库：
- en: '[PRE37]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: There is, of course, much more to MariaDB and its MySQL syntax than the samples
    I have provided, but this should be enough to get you through the examples in
    this book. As much as I would love to give you a full walkthrough of the MySQL
    syntax, it would easily push this chapter beyond a reasonable number of pages.
    If you’d like to push your skills beyond the samples of this chapter, there are
    great books available that are dedicated to the subject.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，MariaDB及其MySQL语法远不止我提供的这些示例，但这些应该足够帮助你完成本书中的示例。尽管我非常希望给你提供完整的MySQL语法讲解，但这将会使本章的篇幅过长。如果你希望将技能提升到本章示例之外的层次，可以找到许多专门讲解此主题的优秀书籍。
- en: Before I close this section though, I think it will be worthwhile for you to
    see how to back up and restore your databases. To do this, we have the `mysqldump`
    command at our disposal. Its syntax is very simple, as you’ll see.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在我结束本节之前，我认为你应该了解如何备份和恢复数据库。为此，我们可以使用`mysqldump`命令，它的语法非常简单，正如你将看到的那样。
- en: 'First, exit the MariaDB shell and return to your standard Linux shell. Since
    we’ve already created an `admin` user earlier in the chapter, we’ll use that user
    for the purposes of our backup:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，退出MariaDB命令行并返回标准Linux命令行。由于我们在本章之前已经创建了一个`admin`用户，所以我们将使用该用户来进行备份操作：
- en: '[PRE38]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: With this example, we’re using `mysqldump` to create a copy of the `mysampledb`
    database and storing it in a file named `mysampledb.sql`. Since MariaDB requires
    us to log in, we authenticate to MariaDB using the `-u` option with the username
    `admin` and the `-p` option, which will prompt us for a password. The `--databases`
    option is necessary because, by default, `mysqldump` does not include the `database
    create` statement . However, the `--databases` option forces this, which just
    makes it easier for you to restore. Assuming that we were able to authenticate
    properly, the contents of the `mysampledb` database will be dumped into the `mysampledb.sql`
    file. This export should happen very quickly, since this database probably only
    contains a single table and a few rows. Larger production databases can take hours
    to dump.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用`mysqldump`来创建`mysampledb`数据库的副本，并将其存储在名为`mysampledb.sql`的文件中。由于MariaDB要求我们登录，我们使用`-u`选项和用户名`admin`，以及`-p`选项来进行身份验证，后者会提示我们输入密码。`--databases`选项是必要的，因为默认情况下，`mysqldump`不会包含`database
    create`语句。然而，`--databases`选项强制执行这一点，这样可以更方便地恢复。假设我们能够正确认证，`mysampledb`数据库的内容将被导出到`mysampledb.sql`文件中。由于这个数据库可能只包含一个表和几行数据，导出过程应该非常快速。较大的生产数据库可能需要几个小时来导出。
- en: 'Restoring a backup is fairly simple. We can utilize the `mariadb` command with
    the backup file used as a source of input:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复备份相当简单。我们可以使用`mariadb`命令，将备份文件作为输入源：
- en: '[PRE39]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: So, there you have it. The `mysqldump` command is definitely very handy in backing
    up databases. In the next section, we’ll work through setting up a secondary database
    server.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你看到了。`mysqldump`命令在备份数据库时确实非常方便。在接下来的部分，我们将讨论如何设置次级数据库服务器。
- en: Setting up a secondary database server
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置次级数据库服务器
- en: Redundancy is an amazing thing. If a primary server fails for some reason, you
    can keep your applications running by having a secondary database server available
    in case the original meets its demise. Of course, you can always create regular
    backups of your database servers and restore if necessary, but it’s very hard
    to keep up with databases that are always changing, so backups have a tendency
    to become stale quite fast. A secondary database server enables you to have a
    copy that is always up to date. This doesn’t mean that you no longer need backups,
    but it does give you another option for recovery when faced with a problem.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 冗余是一件了不起的事情。如果主服务器因某些原因发生故障，你可以通过准备一个次级数据库服务器来保持应用程序的运行，以防原服务器发生故障。当然，你也可以定期备份数据库服务器并在必要时恢复，但由于数据库总是在变化，保持备份是非常困难的，因此备份很容易很快过时。次级数据库服务器使你能够拥有一个始终保持最新状态的副本。这并不意味着你不再需要备份，但它确实为你在遇到问题时提供了另一种恢复选项。
- en: The industry is moving away from terms like “Master” and “Slave” to describe
    a primary and secondary server. In this chapter and moving forward, we will use
    the terms “Primary” and “Secondary” to describe the relationship of one main database
    server that replicates to another. Therefore, the verbiage around our actions
    will use “primary” and “secondary,” even though the verbiage inside Ubuntu 22.04
    still uses the old terminology. Just keep in mind that the naming will likely
    switch to a new naming scheme in the future.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 行业正在逐步避免使用“主（Master）”和“从（Slave）”这样的术语来描述主服务器和从服务器。在本章及之后的部分，我们将使用“主（Primary）”和“次（Secondary）”来描述一个主数据库服务器将数据复制到另一个的关系。因此，尽管Ubuntu
    22.04内部仍然使用旧的术语，我们在讨论操作时将使用“primary”和“secondary”这些术语。只需记住，命名方式未来可能会改为新的命名方案。
- en: At this point, we have one database server already. To set up a secondary database
    instance, all you really need in order to begin the process is to set up another
    physical server or virtual machine and install the `mariadb-server` package as
    we did earlier. If you’ve already set up two database servers as recommended earlier
    in the chapter, you’re ready to begin. If not, feel free to spin up another virtual
    machine and follow the process from the *Installing MariaDB* section, which covered
    the initial setup of MariaDB. Go ahead and set up another server if you haven’t
    already done so. Of your two servers, one should be designated as the primary
    and the other as the secondary, so make a note of the IP addresses for each.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有一个数据库服务器。为了设置次级数据库实例，你所需要做的就是设置另一台物理服务器或虚拟机，并像我们之前一样安装`mariadb-server`包。如果你已经按照本章早些时候的建议设置了两台数据库服务器，你就可以开始了。如果没有，随时启动另一台虚拟机，并按照*安装MariaDB*部分的过程进行操作，其中涵盖了MariaDB的初始设置。如果你还没有设置另一台服务器，请去设置一台。在你的两台服务器中，一台应被指定为主服务器，另一台为次级服务器，因此请记下每台服务器的IP地址。
- en: 'To begin, we’ll first start working on the primary. We’ll need to edit the
    `/etc/mysql/conf.d/mysql.cnf` file on the server you wish to be the primary. Currently,
    the file contains just the following line:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将开始处理主服务器。我们需要编辑你希望作为主服务器的服务器上的`/etc/mysql/conf.d/mysql.cnf`文件。当前，文件中仅包含以下一行：
- en: '[PRE40]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Right underneath that, add a blank line and then the following code:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这行下面，添加一个空行，然后输入以下代码：
- en: '[PRE41]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: With this configuration, we’re first enabling binary logging, which is required
    for a primary/secondary server to function properly. Binary logs contain records
    of all database changes, which enables a secondary database instance to reproduce
    changes made to the primary server. These binary logs record changes made to a
    database, which will then be transferred to a secondary server.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配置中，我们首先启用了二进制日志，这是主/从服务器正常运行所必需的。二进制日志记录了所有数据库变更的记录，这使得次级数据库实例能够重现对主服务器所做的更改。这些二进制日志记录了对数据库所做的更改，然后将其传输到次级服务器。
- en: 'Another configuration file that we’ll need to edit is `/etc/mysql/mariadb.conf.d/50-server.cnf`.
    In this file, we have the following line:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要编辑的另一个配置文件是`/etc/mysql/mariadb.conf.d/50-server.cnf`。在这个文件中，我们有以下一行：
- en: '[PRE42]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'With this default setting, the `mysql` daemon is only listening for connections
    on `localhost` (`127.0.0.1`), which is a problem since we’ll need to connect to
    it from another machine (the secondary server). Change this line to the following:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在此默认设置下，`mysql`守护进程仅监听`localhost`（`127.0.0.1`）的连接，这会有问题，因为我们需要从另一台机器（即从服务器）进行连接。将这一行更改为以下内容：
- en: '[PRE43]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Next, we’ll need to access the MariaDB shell on the primary server and execute
    the following commands:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要访问主服务器上的MariaDB shell并执行以下命令：
- en: '[PRE44]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Here, we’re creating a replication user named `replicate` and allowing it to
    connect to our primary server from the IP address `192.168.1.204`. Be sure to
    change that IP to match the IP of your secondary server, but you can also use
    a hostname identifier such as `%.mydomain` if you have a domain configured, which
    is equivalent to allowing any hostname that ends with `.mydomain`. Also, we’re
    setting the password for this user to `password`, so feel free to customize that
    as well to fit your password requirements (be sure to make a note of the password).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建一个名为`replicate`的复制用户，并允许其从IP地址`192.168.1.204`连接到我们的主服务器。确保将该IP地址更改为与你的从服务器相匹配的IP地址，但如果你已经配置了域名，也可以使用类似`%.mydomain`的主机名标识符，这等同于允许任何以`.mydomain`结尾的主机名。此外，我们为该用户设置密码为`password`，所以你可以根据自己的密码要求自定义密码（确保记下密码）。
- en: 'We should now restart the `mariadb` daemon so that the changes we’ve made to
    the `mysql.cnf` file take effect:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该重启`mariadb`守护进程，以便我们对`mysql.cnf`文件所做的更改生效：
- en: '[PRE45]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Next, we’ll set up the secondary server. But before we do that, there’s a consideration
    to make now that will possibly make the process easier on us. In a production
    environment, it’s very possible that data is still being written to the primary
    server. The process of setting up a secondary server is much easier if we don’t
    have to worry about the primary database changing while we set up the secondary.
    The following command, when executed within the MariaDB shell, will lock the database
    and prevent additional changes:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将设置从服务器。但在此之前，我们需要考虑一个可能会使过程更加简单的因素。在生产环境中，很可能主服务器仍然在写入数据。如果在设置从服务器时不必担心主数据库的变化，设置从服务器的过程会更加简单。以下命令，在MariaDB
    shell中执行时，将锁定数据库并防止额外的更改：
- en: '[PRE46]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: If you’re absolutely sure that no data is going to be written to the primary
    server, you can disregard that step.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你完全确定不会向主服务器写入任何数据，可以跳过这一步。
- en: Next, we should utilize `mysqldump` to make sure that both the primary and the
    secondary servers contain the same data before we start synchronizing them. The
    process is smoother if we begin with them already synchronized, rather than trying
    to mirror the databases later. Using `mysqldump` as we did in the previous section,
    create a dump of the primary server’s database and then import that dump into
    the secondary. The easiest way to transfer the dump file is to use `rsync` or
    `scp`. Then, on the secondary instance, use `mariadb` to import the file.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们应该使用`mysqldump`来确保在开始同步之前，主服务器和从服务器包含相同的数据。如果它们已经同步，开始时的过程会更加顺利，而不是在稍后尝试镜像数据库。使用我们在前一节中使用的`mysqldump`，创建主服务器数据库的转储文件，然后将该转储文件导入到从服务器。传输转储文件最简单的方法是使用`rsync`或`scp`。然后，在从服务器实例上，使用`mariadb`导入该文件。
- en: 'The command to back up the database on the primary server becomes the following:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在主服务器上备份数据库的命令如下：
- en: '[PRE47]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'After transferring the `mysampledb.sql` file to the secondary server, you can
    import the backup into the secondary server:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 将`mysampledb.sql`文件传输到从服务器后，你可以将备份导入到从服务器：
- en: '[PRE48]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Also on the secondary server, we’ll need to edit `/etc/mysql/conf.d/mysql.cnf`
    and then place the following code at the end (make sure to add a blank line after
    `[mysql]`:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 同样在从服务器上，我们需要编辑`/etc/mysql/conf.d/mysql.cnf`，然后将以下代码添加到文件末尾（确保在`[mysql]`后添加一个空行）：
- en: '[PRE49]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Although it’s outside the scope of this book, you can set up more than just
    one secondary database server. If you do, each will need a unique `server-id`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本书的范围不包括此内容，但你可以设置多个从数据库服务器。如果你这么做，每个服务器都需要一个独特的`server-id`。
- en: 'Make sure you restart the `mariadb` unit on the secondary server before continuing:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请确保你已经重启了从服务器上的`mariadb`服务：
- en: '[PRE50]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'From the `root` MariaDB shell on your secondary server, enter the following
    command. Change the IP address in the command accordingly:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 从从服务器的`root` MariaDB shell中，输入以下命令。根据需要相应地更改命令中的IP地址：
- en: '[PRE51]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Now that we’re finished configuring the synchronization, we can unlock the
    primary server’s tables. On the primary server, execute the following command
    within the MariaDB shell:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了同步配置，可以解锁主服务器的表。在主服务器上，在MariaDB shell中执行以下命令：
- en: '[PRE52]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Now, we can check the status of the secondary server to see whether or not it
    is running.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以检查从服务器的状态，看看它是否在运行。
- en: 'Within the secondary server’s MariaDB shell, execute the following command:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在从服务器的MariaDB shell中，执行以下命令：
- en: '[PRE53]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Here, we’re adding `\G`, which changes the output to be displayed vertically
    instead of horizontally.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们添加了`\G`，它会将输出格式改为垂直显示，而不是横向显示。
- en: 'Assuming all went well, we should see the following line in the output:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们应该在输出中看到以下行：
- en: '[PRE54]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'If the secondary server isn’t running (`Slave_IO_State` is blank), execute
    the following command:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从服务器没有运行（`Slave_IO_State`为空），请执行以下命令：
- en: '[PRE55]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Next, check the status of the secondary server process again to verify:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，再次检查从服务器进程的状态以进行验证：
- en: '[PRE56]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'From this point forward, any data you add to your database on the primary server
    should be replicated to the secondary. To test, add a new record to the `Employees`
    table on the `mysampledb` database on the primary server:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在起，你在主服务器上添加的任何数据都应该会被同步到从服务器。为了测试，在主服务器上的`mysampledb`数据库的`Employees`表中添加一条新记录：
- en: '[PRE57]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'On the secondary server, check the same database and table for the new value
    to appear. It may take a second or two:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在从服务器上，检查相同的数据库和表，查看新值是否出现。可能需要一两秒：
- en: '[PRE58]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: If you see any errors in the `Slave_IO_State` line when you run `SHOW SLAVE
    STATUS \G`, or your databases aren’t synchronizing properly, here are a few things
    you can try. First, make sure that the primary database server is listening for
    connections on `0.0.0.0` port `3306`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在运行`SHOW SLAVE STATUS \G`时看到`Slave_IO_State`行中有任何错误，或者数据库没有正确同步，以下是一些你可以尝试的方法。首先，确保主数据库服务器在`0.0.0.0`端口`3306`上监听连接。
- en: 'To test this, run this variation of the `ss` command to see which port the
    `mariadb` process is listening on (it’s listed as `mysqld`):'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这一点，运行这个`ss`命令的变体，看看`mariadb`进程在哪个端口上监听（它列出为`mysqld`）：
- en: '[PRE59]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The output should be similar to the following:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应类似于以下内容：
- en: '[PRE60]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: If you see that the service is listening on `127.0.0.1:3306` instead, that means
    it’s only accepting connections from localhost. Earlier in this section, I mentioned
    changing the `bind` address in the `/etc/mysql/mariadb.conf.d/50-server.cnf` file.
    Make sure you’ve already done that and restart `mariadb`. During my tests, I’ve
    actually had one situation where the `mariadb` service became locked after I made
    this change, and attempting to restart the process did nothing (I ended up having
    to reboot the entire server, which is not typically something you’d have to do).
    Once the server came back up, it was listening for connections from the network.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到服务正在`127.0.0.1:3306`上监听，这意味着它只接受来自本地主机的连接。在本节早些时候，我提到过更改`/etc/mysql/mariadb.conf.d/50-server.cnf`文件中的`bind`地址。确保你已经完成了这一操作并重启了`mariadb`。在我的测试中，曾经发生过一个情况，在我做出这个更改后，`mariadb`服务被锁定了，尝试重启进程没有任何反应（我最终不得不重启整个服务器，这通常不是必需的）。一旦服务器重新启动，它就会开始监听来自网络的连接。
- en: 'If you receive errors on the secondary server when you run `SHOW SLAVE STATUS
    \G`, with regards to authentication, make sure you’ve run `FLUSH PRIVILEGES` on
    the primary server. Even if you have, run it again to be sure. Also, double-check
    that you’re synchronizing with the correct username, IP address, and password.
    For your convenience, here’s the command we ran on the primary server to grant
    replication permissions:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在从服务器上运行`SHOW SLAVE STATUS \G`时收到关于认证的错误，确保你已经在主服务器上运行了`FLUSH PRIVILEGES`。即使你已经运行过，也请再次执行以确保。同时，仔细检查你是否在使用正确的用户名、IP地址和密码进行同步。为了方便起见，这里是我们在主服务器上运行的授予复制权限的命令：
- en: '[PRE61]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Here’s the command that we ran on the secondary server:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在从服务器上运行的命令：
- en: '[PRE62]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Finally, make sure that your primary database and the secondary database both
    contain the same databases and tables. The primary server won’t be able to update
    a database on the secondary server if it doesn’t exist there. Flip back to my
    example usage on `mysqldump` if you need a refresher. You should only need to
    use `mysqldump` and import the database onto the secondary server once, since
    after you get the replication going, any changes made to the database on the primary
    server should follow over to the secondary. If you have any difficulties with
    the `mysqldump` command, you can manually create `mysampledb` and the `Employees`
    table on the secondary server, which is really all it needs for synchronization
    to start.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，确保你的主数据库和从数据库包含相同的数据库和表格。如果从服务器上没有该数据库，主服务器将无法更新从服务器上的数据库。如果需要复习，可以回到我关于`mysqldump`的示例。你只需要使用一次`mysqldump`并将数据库导入到从服务器中，因为一旦你启用了复制，主服务器上的任何更改都应当会同步到从服务器。如果你在使用`mysqldump`命令时遇到困难，你可以手动在从服务器上创建`mysampledb`和`Employees`表格，这就是同步开始所需的所有内容。
- en: Synchronization should then begin within a minute, but you can execute `STOP
    SLAVE`, followed by `START SLAVE`, on the secondary server to force it to try
    to synchronize again without waiting.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 同步应该会在一分钟内开始，但你可以在从服务器上执行`STOP SLAVE`，然后执行`START SLAVE`，强制它重新同步，而不需要等待。
- en: And that should be all there is to it. At this point, you should have fully
    functional primary and secondary database servers at your disposal. To get additional
    practice, try adding additional databases, tables, and users, and insert new rows
    into your databases.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，一切应该都已经完成了。此时，你应该拥有完全可用的主数据库和从数据库服务器。为了进一步练习，尝试添加额外的数据库、表格和用户，并向你的数据库中插入新行。
- en: It’s worth mentioning that the users we’ve created here will not be synced to
    the secondary server, so you can use the commands we used earlier in this chapter
    to create users on the secondary server if you wish for them to be present there.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，我们在这里创建的用户不会同步到从服务器，因此如果你希望这些用户也出现在从服务器上，可以使用我们在本章前面提到的命令在从服务器上创建用户。
- en: Summary
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Depending on your skill set, you’re either an administrator who is learning
    about SQL databases for the first time, or you’re a seasoned veteran who is curious
    about how to implement a database server with Ubuntu Server. In this chapter,
    we dove into Ubuntu’s implementation of this technology and worked through setting
    up our own database server. We also worked through some examples of the MariaDB
    syntax, such as creating databases, as well as setting up users and their grants.
    We also worked through setting up primary and secondary servers for replication.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的技能水平，你要么是第一次学习SQL数据库的管理员，要么是一个经验丰富的老手，想了解如何在Ubuntu服务器上实现数据库服务器。在本章中，我们深入探讨了Ubuntu如何实现这项技术，并完成了自己的数据库服务器的设置。我们还练习了一些MariaDB的语法示例，如创建数据库，以及设置用户及其权限。我们还设置了主从服务器以实现数据复制。
- en: Database administration is a vast topic, and we’ve only scratched the surface
    here. Being able to manage MySQL and MariaDB databases is a very sought-after
    skill for sure. If you haven’t worked with these databases before, this chapter
    will serve as a good foundation for you to start your research.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库管理是一个广泛的主题，我们这里只是触及了表面。能够管理MySQL和MariaDB数据库无疑是一项非常受欢迎的技能。如果你以前没有使用过这些数据库，本章将为你提供一个良好的基础，帮助你开始研究。
- en: In the next chapter, we’ll use our database server to act as a foundation for
    Nextcloud, which we will set up as part of our look into setting up a web server.
    When you’ve finished practicing these database concepts, head on over to *Chapter
    14*, *Serving Web Content*, where we’ll journey into the world of web hosting.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用我们的数据库服务器作为Nextcloud的基础，并在我们设置Web服务器的过程中进行配置。完成这些数据库概念的练习后，前往*第14章*，*提供Web内容*，在那里我们将进入Web托管的世界。
- en: Further reading
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Configuring MariaDB with Option Files: [https://mariadb.com/kb/en/configuring-mariadb-with-option-files/](https://mariadb.com/kb/en/configuring-mariadb-with-option-files/)'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置MariaDB选项文件：[https://mariadb.com/kb/en/configuring-mariadb-with-option-files/](https://mariadb.com/kb/en/configuring-mariadb-with-option-files/)
- en: Join our community on Discord
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的Discord社区
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的Discord空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/LWaZ0](https://packt.link/LWaZ0)'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/LWaZ0](https://packt.link/LWaZ0)'
- en: '![](img/QR_Code50046724-1955875156.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code50046724-1955875156.png)'
