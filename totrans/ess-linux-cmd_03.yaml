- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: File Compression and Archival Commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: File compression and archival commands have become an essential part of modern
    computing. With the ever-increasing amount of data being generated and shared,
    it has become necessary to use compression techniques to reduce the size of files,
    making them easier to store, transfer, and share. This process involves using
    software tools that compress files by removing any unnecessary data from them.
    The compressed file can then be stored in a smaller amount of space or transmitted
    over the internet more quickly.
  prefs: []
  type: TYPE_NORMAL
- en: There are several file compression and archival commands available in Linux,
    including `gunzip` and `gzip`, `tar`, `rar` and `unrar`, `zip` and `unzip`, `bunzip2`
    and `bzip2`, and many more. Each command has its own unique features, benefits,
    and limitations, making them suitable for specific use cases. For instance, the
    `gzip` command is a simple and easy-to-use compression utility that can compress
    files quickly. On the other hand, `tar` is a popular utility for creating and
    managing tarballs, which can be used to bundle multiple files into a single archive
    file. In this chapter, we will explore these commands and more, giving readers
    an overview of the different compression and archival options available in Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: gunzip and gzip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tar, rar, and unrar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zip and unzip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bunzip2, bzip2, and more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gunzip and gzip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `gunzip` (`gzip` (`gzip` command is used to compress files and create a
    compressed file with a `.gz` extension, while the `gunzip` command is used to
    decompress these `.gz` files. These commands are particularly important for system
    administrators who need to save disk space by compressing files and folders, as
    well as transfer files over a network using less bandwidth.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to their practical benefits, the `gunzip` and `gzip` commands are
    also important for maintaining system security. Compressed files can be used to
    hide malicious code, so system administrators must be able to quickly and easily
    scan compressed files for security threats. The `gzip` command also includes options
    for setting file permissions and modifying the timestamp of files, allowing system
    administrators to maintain granular control over file access and modification.
  prefs: []
  type: TYPE_NORMAL
- en: '`gunzip` is a command-line tool used to decompress files that have been compressed
    using the `gzip` utility. The tool is used to extract the compressed data from
    a `.gz` file and restore it to its original state. The command is vital for system
    administrators because it helps to reduce file sizes and save disk space. Additionally,
    the command can be used to compress and decompress files while transferring them
    over a network, which reduces the amount of bandwidth used. A scenario-based example
    should help us understand the basic use of `gunzip`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose a system administrator receives a compressed file called `largefile.txt.gz`
    from another team member. The file contains important data that they need to access.
    However, the file is too large to be transferred over email or other messaging
    platforms in its uncompressed form. To access the data in the file, the administrator
    will need to decompress it using the `gunzip` command. Here’s how it is done:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, navigate to the directory where the compressed file is located. For
    example, if the file is located in the `/home/instructor/Desktop/administrator/data`
    directory, you can navigate to that directory by running the following command
    in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Navigating to the file location](img/B18212_03_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – Navigating to the file location
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, use the `gunzip` command to decompress the file. We’ll do this by running
    the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Decompressing the large file using gunzip](img/B18212_03_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – Decompressing the large file using gunzip
  prefs: []
  type: TYPE_NORMAL
- en: This will decompress the file and restore it to its original state, then we
    can access the data in the file using our preferred text editor or other tool.
  prefs: []
  type: TYPE_NORMAL
- en: '`gzip` is a command-line utility that is used to compress and decompress files.
    It is commonly used in Linux and Unix systems to reduce the size of files for
    storage or transfer. The `gzip` command works by compressing a file into a smaller
    size using a compression algorithm. This makes it easier to store or transfer
    the file, as it takes up less space.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `gzip` command is an important tool for system administrators, as it allows
    them to manage large files more efficiently. For example, if a system administrator
    needs to transfer a large file over the internet, they can use the `gzip` command
    to compress the file before sending it. This will reduce the amount of time it
    takes to transfer the file and reduce the amount of bandwidth required. Let’s
    take a look at the following two examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A system administrator wants to compress a log file named `app.log` that is
    located in the `/var/log` directory. The administrator can use the following command
    to compress the file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Compressing a log file using gzip](img/B18212_03_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – Compressing a log file using gzip
  prefs: []
  type: TYPE_NORMAL
- en: 'This will create a compressed file named `app.log.gz` in the same `/``var/log/`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Compressed app.log.gz file from 1 GB to 1.0 MB](img/B18212_03_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – Compressed app.log.gz file from 1 GB to 1.0 MB
  prefs: []
  type: TYPE_NORMAL
- en: 'A system administrator wants to compress a directory named `backup` located
    in the `/home/instructor` directory. This directory compression process is often
    referred to as creating a “tarball,” which is a common method for bundling and
    compressing multiple files or directories into a single archive file. The administrator
    can use the following command to compress the `backup` directory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.5 – Compressing a directory called backup.tar.gz](img/B18212_03_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – Compressing a directory called backup.tar.gz
  prefs: []
  type: TYPE_NORMAL
- en: This will create a compressed file named `backup.tar.gz` in the same directory.
    The `tar` command will also be introduced for our next topic. The `czvf` option
    supplied in the preceding command is used to create a compressed archive in `gzip`
    format.
  prefs: []
  type: TYPE_NORMAL
- en: 'The options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an archive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compress the archive using `gzip`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display progress information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specify the name of the archive file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tar, rar, and unrar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `tar`, `rar`, and `unrar` commands are essential tools for system administrators,
    providing them with the ability to compress and archive files for more efficient
    storage and transfer. With these commands, administrators can bundle up multiple
    files and directories into a single archive file, which can then be compressed
    to save even more space. These archive files can then be transferred between systems,
    backed up to remote storage, or stored for future use.
  prefs: []
  type: TYPE_NORMAL
- en: The `tar` command is particularly useful for creating archive files, as it allows
    administrators to specify a range of options for compression and file organization.
    The `rar` and `unrar` commands, on the other hand, are proprietary tools developed
    by RARLAB for creating and extracting RAR archive files. These commands are widely
    used in the Windows environment but can also be used on Linux systems with the
    proper installation.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, the `tar`, `rar`, and `unrar` commands have greatly simplified the
    process of managing and organizing files for system administrators. With their
    ability to bundle up files into archive files and compress them for efficient
    storage and transfer, these commands have made it much easier to manage large
    amounts of data across multiple systems.
  prefs: []
  type: TYPE_NORMAL
- en: '`tar`, short for `tar` command allows users to bundle multiple files and directories
    into a single file using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This archive file can then be easily compressed, transferred, and backed up.
  prefs: []
  type: TYPE_NORMAL
- en: This tool is important because it simplifies the process of creating and managing
    backups, as well as allowing users to easily share files with others.
  prefs: []
  type: TYPE_NORMAL
- en: One common use case for `tar` is for creating backups of important files and
    directories on a system. For example, a system administrator may use the `tar`
    command to create a backup of critical configuration files and directories before
    making any major changes to the system. In this scenario, the `tar` command can
    be used to bundle all of the necessary files and directories into a single archive
    file, which can then be stored on a separate backup device or transferred to a
    remote location for safekeeping. Another use case for `tar` is for distributing
    software packages. Developers can use `tar` to bundle all of the necessary files
    and directories for a software package into a single archive file, which can then
    be easily distributed to end users.
  prefs: []
  type: TYPE_NORMAL
- en: 'A system administrator may need to transfer a large file or directory to another
    server over the network. In this case, the `tar` command can be used to bundle
    the necessary files and directories into a single archive file, which can then
    be compressed and transferred over the network using tools such as `webBackups`
    and compress it using the `gzip` compression algorithm:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Creating a TAR archive of a directory](img/B18212_03_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – Creating a TAR archive of a directory
  prefs: []
  type: TYPE_NORMAL
- en: '`rar` is a proprietary file-archiving utility used to compress and decompress
    files on Linux systems. The tool was developed by Eugene Roshal and is used to
    create compressed files with the `.rar` extension. It’s a popular file compression
    format that allows users to compress large files into smaller archives for easier
    storage, transfer, and distribution. `rar` supports features such as password
    protection, error recovery, and archive spanning, making it a versatile and efficient
    tool for managing large sets of files.'
  prefs: []
  type: TYPE_NORMAL
- en: System administrators can use `rar` to compress large files or sets of files,
    reducing their size and freeing up disk space. This can help improve system performance
    and reduce the amount of storage required for backups and file transfers. Additionally,
    RAR archives can be protected with a password to provide an extra layer of security
    to sensitive files. System administrators can also use `rar` to split large files
    into multiple smaller files, which can be useful for transferring files over the
    internet or storing them on portable media such as USB drives.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario 1**'
  prefs: []
  type: TYPE_NORMAL
- en: 'A system administrator needs to transfer a large backup file to another server
    over the internet. The file is too large to transfer in its current format, so
    the administrator decides to compress it using `rar`. The administrator uses the
    `rar a backup.rar backup_folder` command to create an archive of the `backup`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Creating an archive of the backup folder](img/B18212_03_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – Creating an archive of the backup folder
  prefs: []
  type: TYPE_NORMAL
- en: The resulting RAR archive is smaller than the original backup folder and can
    be easily transferred over the internet.
  prefs: []
  type: TYPE_NORMAL
- en: zip and unzip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`zip` and `unzip` are file compression and archiving commands widely used by
    system administrators. `zip` is used to compress and archive files, while `unzip`
    is used to extract and uncompress files from ZIP archives. `zip` and `unzip` are
    important commands because they allow system administrators to efficiently manage
    large files and directories, reduce storage space usage, and speed up file transfers.
    The commands are easy to use and support various compression and archive formats,
    making them versatile tools for system administration tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: '`zip` is used to compress and archive files into a single file for easier backup,
    storage, and transfer. The compressed `.zip` file takes up less storage space,
    reducing the need for additional storage devices. System administrators can use
    the `zip` command to compress and archive files, directories, and even entire
    filesystems. Let’s look at some scenario-based examples next.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A system administrator needs to create a backup of a web server directory on
    a Linux machine. The directory contains several files and subdirectories, and
    the administrator decides to use `zip` to compress and archive the directory into
    a single file for easier backup and storage. The administrator uses the `zip -r
    backup.zip web_server` command to create a ZIP archive of the web server directory,
    including all subdirectories and files. The resulting ZIP archive can be stored
    on a portable hard drive or transferred over the network to another server for
    safekeeping:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Creating a backup of a web server directory](img/B18212_03_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – Creating a backup of a web server directory
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the administrator compresses the `web_server` directory into
    a ZIP archive called `backup.zip` using the `-r` flag to include all subdirectories
    and files recursively. Later, when the administrator needs to restore the directory,
    they use the `unzip` command with the `-d` flag to extract the archive to a new
    directory called `restored_web_server`.
  prefs: []
  type: TYPE_NORMAL
- en: '`unzip` can also be used to list the contents of a ZIP archive, test the integrity
    of the archive, and extract specific files from the archive. It is also used to
    extract and uncompress files from ZIP archives, allowing system administrators
    to retrieve and use files contained in the archive. Here is an example of using
    `unzip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – Using the unzip “-d” flag to extract the archive to a new directory](img/B18212_03_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – Using the unzip “-d” flag to extract the archive to a new directory
  prefs: []
  type: TYPE_NORMAL
- en: The `unzip backup.zip -d restored_web_server` command is used to extract the
    contents of a ZIP archive named `backup.zip` into a directory named `restored_web_server`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To determine the directory size, you can use the `du -H restored_web_server/`
    command, which calculates the disk usage of files and directories, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – The restored_web_server command](img/B18212_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.10 – The restored_web_server command
  prefs: []
  type: TYPE_NORMAL
- en: The `-d` flag specifies the destination directory for the extracted files. In
    this case, the destination directory is `restored_web_server`. The contents of
    the ZIP archive will be extracted into this directory, preserving the directory
    structure of the original archive. In our next topic, we will explore how to use
    the `tar` command to compress files using the `bzip2` and `bunzip` formats. We
    will also touch on other archiving commands that system administrators commonly
    use in their daily tasks.
  prefs: []
  type: TYPE_NORMAL
- en: bunzip2, bzip2, and more
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`bzip2` and `bunzip2` are two commands that are used for file compression and
    decompression on Unix-based systems. The `bzip2` command is used to compress a
    file, while the `bunzip2` command is used to decompress a file that has been compressed
    using `bzip2`. These commands are commonly used by system administrators to save
    disk space and to transfer large files between systems.'
  prefs: []
  type: TYPE_NORMAL
- en: '`bzip2` is a powerful compression tool that compresses files using the Burrows-Wheeler
    block sorting text compression algorithm, followed by Huffman coding. This algorithm
    allows `bzip2` to achieve a high level of compression while maintaining a relatively
    fast decompression time. This makes `bzip2` ideal for compressing large files,
    such as backups, databases, and software distributions. When a file is compressed
    using `bzip2`, it is typically given a `.bz2` extension. Here are a couple of
    examples to demonstrate this.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario 1**'
  prefs: []
  type: TYPE_NORMAL
- en: 'A system administrator wants to compress a large log file and save disk space
    on the server. The administrator decides to use `bzip2` to compress the file.
    The administrator navigates to the directory where the log file is located and
    enters the `bzip2 -k -v syslog.log` command to compress the log file using `bzip2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11 – Using bzip2 to compress a large log file](img/B18212_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.11 – Using bzip2 to compress a large log file
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we verify the compressed `syslog.log` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12 – Verifying the compressed log file](img/B18212_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.12 – Verifying the compressed log file
  prefs: []
  type: TYPE_NORMAL
- en: The `-k` option keeps the original file and creates a compressed version, while
    the `-v` option displays the progress of the compression process. The compressed
    file is now much smaller than the original and can be safely deleted to free up
    disk space.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario 2**'
  prefs: []
  type: TYPE_NORMAL
- en: 'A system administrator needs to back up a large directory containing multiple
    files and subdirectories. The administrator decides to use `bzip2` to compress
    the directory and its contents into a single file. The administrator enters the
    `tar -cvf - directory_to_backup | bzip2 -9 -c > backup.tar.bz2` command to create
    a TAR archive of the directory, compress it using `bzip2` with the highest compression
    level (`-9`), and redirect the output to a backup file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13 – Compressing a directory with a subdirectory](img/B18212_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.13 – Compressing a directory with a subdirectory
  prefs: []
  type: TYPE_NORMAL
- en: Let’s dive into the chained commands.
  prefs: []
  type: TYPE_NORMAL
- en: The `tar -cvf - /home/instructor/Desktop/administrator` command is used to create
    a TAR archive of the `/home/instructor/Desktop/administrator` directory; this
    was the first command we introduced in this chapter. The `-c` option specifies
    that a new archive is being created, the `-v` option enables verbose mode to display
    the progress of the archiving process, and the `-f` option specifies the output
    file. The hyphen after the `-f` option indicates that the output should be sent
    to **standard output** (**stdout**) instead of a file on disk.
  prefs: []
  type: TYPE_NORMAL
- en: The `|` (pipe) symbol is used to redirect the output of the `tar` command to
    the input of the `bzip2` command; then, we have the `bzip2 -9 -c` command, which
    is used to compress the TAR archive created by the `tar` command using the `bzip2`
    algorithm. The `-9` option specifies the highest compression level, while the
    `-c` option sends the output to stdout. Finally, `> backup.tar.bz2` redirects
    the compressed output to a file named `backup.tar.bz2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a brief explanation of the common compression levels in `bzip2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-1` (fastest): This level provides the fastest compression but generates larger
    compressed files. It’s suitable for situations where speed is more critical than
    file size reduction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-9` (maximum compression—our choice in *Figure 3**.13*): This level offers
    the highest compression, resulting in smaller compressed files. However, it is
    slower than lower levels. It’s useful when saving disk space is a top priority
    and you don’t mind waiting for the compression process to finish.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-2` to `-8` (intermediate levels): These levels offer a trade-off between
    compression speed and resulting file size. As you move from `-2` to `-8`, the
    compression becomes better (smaller file size) but slower compared to lower levels.
    Choose an intermediate level based on your specific requirements for speed and
    file size reduction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The resulting backup file is much smaller than the original directory and can
    be easily transferred or stored for safekeeping.
  prefs: []
  type: TYPE_NORMAL
- en: The `bunzip2` command is used to decompress files that have been compressed
    using `bzip2`. When a compressed file is decompressed using `bunzip2`, the original
    file is restored with the same name and directory path as the compressed file,
    but without the `.bz2` extension. The `bunzip2` command is also able to decompress
    files that have been compressed using the `gzip` command.
  prefs: []
  type: TYPE_NORMAL
- en: System administrators can make use of `bzip2` and `bunzip2` in a variety of
    ways. One common use case is to compress and decompress large log files on a web
    server. By compressing log files using `bzip2`, system administrators can save
    disk space and transfer the logs to another system for analysis. Another use case
    is to compress and transfer database backups between servers. By compressing backups
    using `bzip2`, system administrators can reduce transfer times and conserve network
    bandwidth. Let’s delve into an example to further clarify this.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario 1**'
  prefs: []
  type: TYPE_NORMAL
- en: 'A system administrator needs to extract and decompress a large compressed file
    that has been split into multiple parts. The compressed file has a `.bz2` extension
    and was created using the `bzip2` command. To extract and decompress the file,
    the administrator can use the `bunzip2` command followed by the filename. If the
    compressed file has been split into multiple parts, the administrator can use
    the `cat` command to concatenate the files and then pipe the output to the `bunzip2`
    command. The following is an example command that the administrator can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.14 – Using bunzip2 to decompress a compressed file](img/B18212_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.14 – Using bunzip2 to decompress a compressed file
  prefs: []
  type: TYPE_NORMAL
- en: The `cat syslog.log.bz2` command reads the contents of the `syslog.log.bz2`
    compressed file and passes it as input to the `bunzip2 -c` command. The `-c` option
    specifies that the output of the command should be sent to stdout (that is, the
    terminal) instead of a file.
  prefs: []
  type: TYPE_NORMAL
- en: The `bunzip2 -c` command decompresses the input file using the `bzip2` compression
    algorithm and sends the uncompressed data to stdout. Finally, the output is redirected
    to a file named `decompressed_file` using the `>` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Let us explore additional archiving commands that can be utilized, such as `7zip`
    and `xz`.
  prefs: []
  type: TYPE_NORMAL
- en: 7-Zip is a popular open source file archiver that can handle various compression
    formats such as ZIP, GZIP, TAR, and its own 7z format. It is widely used by system
    administrators for compressing and extracting files and directories. The tool
    features a high compression ratio that helps in reducing the file size significantly.
    The compression format used by 7-Zip is also known to be secure, making it a suitable
    option for archiving confidential data. It can also create self-extracting archives
    that allow users to extract compressed files without having to install any additional
    software. We’ll delve into a scenario and explain.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario 1**'
  prefs: []
  type: TYPE_NORMAL
- en: 'A system administrator needs to create a compressed archive of a large directory
    containing confidential information. The administrator uses the `7z a -t7z -p
    -mhe=on archive.7z directory_to_compress` command to create a password-protected
    and encrypted 7z archive of the directory. The `-mhe=on` option enables encryption
    of filenames to ensure the confidentiality of the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.15 – 7-Zip prompting the user to enter a password](img/B18212_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.15 – 7-Zip prompting the user to enter a password
  prefs: []
  type: TYPE_NORMAL
- en: The `-p` option is used to specify a password for the compressed archive. Since
    no password is provided after the `-p` option, `7z` will prompt the user to enter
    a password. The resulting `7z` archive can be easily transferred and stored on
    another server or external drive, and only authorized personnel with the password
    can extract the data.
  prefs: []
  type: TYPE_NORMAL
- en: XZ is a command-line tool used for data compression and decompression. It is
    based on the **Lempel-Ziv-Markov-chain algorithm** (**LZMA**), which is known
    for its high compression ratio and low memory usage. XZ is used for creating compressed
    archives of large files and directories, particularly in Linux systems. It is
    also used for compressing the Linux kernel during installation. XZ provides a
    significant reduction in file size while maintaining the integrity of the original
    file. Additionally, XZ can be used for compressing and decompressing files on
    the fly, which is useful in some scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario 2**'
  prefs: []
  type: TYPE_NORMAL
- en: A system administrator needs to compress and archive a large log file generated
    by a web server. The administrator uses the `xz -z -k -9 logfile.log` command
    to compress the file with a maximum compression level (`-9`) and keep the original
    file (`-k`). The resulting compressed file is significantly smaller than the original
    file, making it easier to store and transfer. The administrator can use the `xz
    -d logfile.log.xz` command to decompress the file for analysis or further processing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command is used for compressing the log file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.16 – Compressing the syslog file](img/B18212_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.16 – Compressing the syslog file
  prefs: []
  type: TYPE_NORMAL
- en: Here, the `xz` command is used to compress the `syslog.log` file with the maximum
    compression level of 9 (`-9`) and keep the original file (`-k`). The resulting
    compressed file will have a `.``xz` extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command is used for decompressing the compressed log file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.17 – Decompressing the syslog file](img/B18212_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.17 – Decompressing the syslog file
  prefs: []
  type: TYPE_NORMAL
- en: To decompress the syslog file, we use the same `xz` command to decompress the
    `syslog.log.xz` compressed file. The resulting file will have the original name,
    `logfile.log`.
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, Linux systems have several powerful tools for compressing and
    decompressing files, including `bunzip2`, `bzip2`, `7z`, and `xz`. These tools
    are especially useful for archiving large files and directories, as well as for
    transferring files between systems or over networks. With the ability to password-protect
    and encrypt data in some of these commands, administrators can ensure the security
    and confidentiality of their files. By using these commands, system administrators
    can more efficiently manage their files and storage, and optimize their computing
    resources. For example, `7z` can compress large databases, `bzip2` can archive
    files, and `xz` can compress log files. Whether the administrator needs to compress,
    transfer, or decompress files, these tools provide reliable and efficient solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered file compression and archival commands, which are important
    for efficient file management and transferring files over networks. It also covered
    several powerful tools, including `gunzip`, `gzip`, `tar`, `rar`, `unrar`, `zip`,
    `unzip`, `bunzip2`, `bzip2`, `7z`, and `xz`, which enable system administrators
    to compress and decompress files efficiently, archive large files and directories,
    and transfer files over networks or between systems. These commands offer various
    compression levels and encryption options to ensure the security and confidentiality
    of data. They are particularly useful for managing large databases, backing up
    important files, and transferring files over the internet. By using these commands,
    system administrators can efficiently manage their files and storage, making the
    most of their computing resources.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, this chapter provided a comprehensive guide to file compression and
    archiving commands in Linux, which are essential for effective file management
    and storage optimization. By mastering these commands, system administrators can
    efficiently manage their files and storage, ensuring the security and confidentiality
    of their data.
  prefs: []
  type: TYPE_NORMAL
- en: As we move to *Part 2*, the next chapter will focus on format and disk space
    commands, which are essential for system administrators to manage disk space and
    filesystems. Through this chapter, readers will learn various commands such as
    `mkfs`, `fdisk`, `du`, `df`, and more to format disks, partition hard drives,
    check disk usage, and manage filesystems. By learning these commands, system administrators
    can effectively manage disk space and optimize storage performance.
  prefs: []
  type: TYPE_NORMAL
- en: Part 2:Frequently Used Commands – Part 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, we explore the essential commands frequently used by system administrators
    in the **command line interface** (**CLI**). We cover their practicality and execution
    and provide hands-on experience to ensure a proper understanding.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section contains the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B18212_04.xhtml#_idTextAnchor047), *Format and Disk Space Commands*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18212_05.xhtml#_idTextAnchor061), *Linux Permissions Commands*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B18212_06.xhtml#_idTextAnchor074), *Filesystem Mount and Manipulation
    Commands*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
