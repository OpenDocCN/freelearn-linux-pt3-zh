- en: 26\. Working with Containers on CentOS 8
  prefs: []
  type: TYPE_NORMAL
- en: Now that the basics of Linux Containers have been covered in the previous chapter,
    the goal of this chapter is to demonstrate how to create and manage containers
    using the Podman, Skopeo and Buildah tools included with CentOS 8\. It is intended
    that by the end of this chapter you will have a clearer understanding of how to
    create and manage containers on CentOS 8 and will have gained a knowledge foundation
    on which to continue exploring the power of Linux Containers.
  prefs: []
  type: TYPE_NORMAL
- en: 26.1 Pulling a Container Image
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, the CentOS 8 Base image will be pulled from the registry.
    Before pulling an image, however, information about the image repository can be
    obtained using the skopeo tool, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: skopeo inspect docker://docker.io/library/centos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"Name": "docker.io/library/centos",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Digest": "sha256:f94c1d992c193b3dc09e297ffd54d8a4f1dc946c37cbeceb26d35ce1647f88d9",'
  prefs: []
  type: TYPE_NORMAL
- en: '"RepoTags": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"5.11",'
  prefs: []
  type: TYPE_NORMAL
- en: '"5",'
  prefs: []
  type: TYPE_NORMAL
- en: '"6.10",'
  prefs: []
  type: TYPE_NORMAL
- en: '"6.6",'
  prefs: []
  type: TYPE_NORMAL
- en: '"6.7",'
  prefs: []
  type: TYPE_NORMAL
- en: '"6.8",'
  prefs: []
  type: TYPE_NORMAL
- en: '"6.9",'
  prefs: []
  type: TYPE_NORMAL
- en: '"6",'
  prefs: []
  type: TYPE_NORMAL
- en: '"7.0.1406",'
  prefs: []
  type: TYPE_NORMAL
- en: '"7.1.1503",'
  prefs: []
  type: TYPE_NORMAL
- en: '"7.2.1511",'
  prefs: []
  type: TYPE_NORMAL
- en: '"7.3.1611",'
  prefs: []
  type: TYPE_NORMAL
- en: '"7.4.1708",'
  prefs: []
  type: TYPE_NORMAL
- en: '"7.5.1804",'
  prefs: []
  type: TYPE_NORMAL
- en: '"7.6.1810",'
  prefs: []
  type: TYPE_NORMAL
- en: '"7.7.1908",'
  prefs: []
  type: TYPE_NORMAL
- en: '"7",'
  prefs: []
  type: TYPE_NORMAL
- en: '"8",'
  prefs: []
  type: TYPE_NORMAL
- en: '"centos5.11",'
  prefs: []
  type: TYPE_NORMAL
- en: '"centos5",'
  prefs: []
  type: TYPE_NORMAL
- en: '"centos6.10",'
  prefs: []
  type: TYPE_NORMAL
- en: '"centos6.6",'
  prefs: []
  type: TYPE_NORMAL
- en: '"centos6.7",'
  prefs: []
  type: TYPE_NORMAL
- en: '"centos6.8",'
  prefs: []
  type: TYPE_NORMAL
- en: '"centos6.9",'
  prefs: []
  type: TYPE_NORMAL
- en: '"centos6",'
  prefs: []
  type: TYPE_NORMAL
- en: '"centos7.0.1406",'
  prefs: []
  type: TYPE_NORMAL
- en: '"centos7.1.1503",'
  prefs: []
  type: TYPE_NORMAL
- en: '"centos7.2.1511",'
  prefs: []
  type: TYPE_NORMAL
- en: '"centos7.3.1611",'
  prefs: []
  type: TYPE_NORMAL
- en: '"centos7.4.1708",'
  prefs: []
  type: TYPE_NORMAL
- en: '"centos7.5.1804",'
  prefs: []
  type: TYPE_NORMAL
- en: '"centos7.6.1810",'
  prefs: []
  type: TYPE_NORMAL
- en: '"centos7.7.1908",'
  prefs: []
  type: TYPE_NORMAL
- en: '"centos7",'
  prefs: []
  type: TYPE_NORMAL
- en: '"centos8",'
  prefs: []
  type: TYPE_NORMAL
- en: '"latest"'
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"Created": "2019-10-01T23:19:57.105928163Z",'
  prefs: []
  type: TYPE_NORMAL
- en: '"DockerVersion": "18.06.1-ce",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Labels": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"org.label-schema.build-date": "20190927",'
  prefs: []
  type: TYPE_NORMAL
- en: '"org.label-schema.license": "GPLv2",'
  prefs: []
  type: TYPE_NORMAL
- en: '"org.label-schema.name": "CentOS Base Image",'
  prefs: []
  type: TYPE_NORMAL
- en: '"org.label-schema.schema-version": "1.0",'
  prefs: []
  type: TYPE_NORMAL
- en: '"org.label-schema.vendor": "CentOS"'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '"Architecture": "amd64",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Os": "linux",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Layers": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"sha256:729ec3a6ada3a6d26faca9b4779a037231f1762f759ef34c08bdd61bf52cd704"'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'Having verified that the repository has the images we need, the podman command
    can be used to download an image for the required CentOS version using the following
    syntax where <RepoTag> is replaced by the tag for the CentOS version as shown
    in the skopeo output:'
  prefs: []
  type: TYPE_NORMAL
- en: podman pull docker://docker.io/library/centos:<RepoTag>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For example, to pull the CentOS 7 image:'
  prefs: []
  type: TYPE_NORMAL
- en: podman pull docker://docker.io/library/centos:centos7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Alternatively, to default to the latest release of CentOS:'
  prefs: []
  type: TYPE_NORMAL
- en: podman pull docker://docker.io/library/centos:latest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Trying to pull docker://docker.io/library/centos:latest...Getting image source
    signatures
  prefs: []
  type: TYPE_NORMAL
- en: 'Skipping blob 729ec3a6ada3 (already present): 68.21 MiB / 68.21 MiB [=======]
    0s'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copying config 0f3e07c0138f: 2.13 KiB / 2.13 KiB [==========================]
    0s'
  prefs: []
  type: TYPE_NORMAL
- en: Writing manifest to image destination
  prefs: []
  type: TYPE_NORMAL
- en: Storing signatures
  prefs: []
  type: TYPE_NORMAL
- en: 0f3e07c0138fbe05abcb7a9cc7d63d9bd4c980c3f61fea5efa32e7c4217ef4da
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the image has been stored by asking podman to list all local images:'
  prefs: []
  type: TYPE_NORMAL
- en: podman images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: REPOSITORY TAG IMAGE ID CREATED SIZE
  prefs: []
  type: TYPE_NORMAL
- en: docker.io/library/centos latest 0f3e07c0138f 8 weeks ago 227 MB
  prefs: []
  type: TYPE_NORMAL
- en: 'Details about a local image may be obtained by running the podman inspect command:'
  prefs: []
  type: TYPE_NORMAL
- en: podman inspect centos:latest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 26.2 Running the Image in a Container
  prefs: []
  type: TYPE_NORMAL
- en: 'The image pulled from the registry is a fully operational image that is ready
    to run in a container without modification. To run the image, use the podman run
    command. In this case the –rm option will be specified to indicate that we want
    to run the image in a container, execute one command and then have the container
    exit. In this case, the cat tool will be used to output the content of the /etc/passwd
    file located on the container root filesystem:'
  prefs: []
  type: TYPE_NORMAL
- en: podman run --rm centos:latest cat /etc/passwd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: root:x:0:0:root:/root:/bin/bash
  prefs: []
  type: TYPE_NORMAL
- en: bin:x:1:1:bin:/bin:/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: daemon:x:2:2:daemon:/sbin:/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: adm:x:3:4:adm:/var/adm:/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: sync:x:5:0:sync:/sbin:/bin/sync
  prefs: []
  type: TYPE_NORMAL
- en: shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
  prefs: []
  type: TYPE_NORMAL
- en: halt:x:7:0:halt:/sbin:/sbin/halt
  prefs: []
  type: TYPE_NORMAL
- en: mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: operator:x:11:0:operator:/root:/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: games:x:12:100:games:/usr/games:/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: nobody:x:65534:65534:Kernel Overflow User:/:/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: dbus:x:81:81:System message bus:/:/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: systemd-coredump:x:999:997:systemd Core Dumper:/:/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: systemd-resolve:x:193:193:systemd Resolver:/:/sbin/nologin
  prefs: []
  type: TYPE_NORMAL
- en: Compare the content of the /etc/passwd file within the container with the /etc/passwd
    file on the host system and note that it lacks all of the additional users that
    are present on the host confirming that the cat command was executed within the
    container environment. Also note that the container started, ran the command and
    exited all within a matter of seconds. Compare this to the amount of time it takes
    to start a full operating, perform a task and shutdown a virtual machine and you
    begin to appreciate the speed and efficiency of containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch a container, keep it running and access the shell, the following
    command can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: $ podman run --name=mycontainer -it centos:latest /bin/bash
  prefs: []
  type: TYPE_NORMAL
- en: '[root@965acf617e6e /]#'
  prefs: []
  type: TYPE_NORMAL
- en: Note that an additional command-line option is used to assign the name “mycontainer”
    to the container. Though optional, this makes the container easier to recognize
    and reference as an alternative to using the automatically generated container
    ID.
  prefs: []
  type: TYPE_NORMAL
- en: While the container is running, run podman in a different terminal window to
    see the status of all containers on the system
  prefs: []
  type: TYPE_NORMAL
- en: podman ps -a
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
  prefs: []
  type: TYPE_NORMAL
- en: 965acf617e6e docker.io/library/centos:latest /bin/bash About a minute ago Up
    About a minute ago mycontainer
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute a command in a running container from the host, simply use the podman
    exec command, referencing the name of the running container and the command to
    be executed. The following command, for example, starts up a second bash session
    in the container named mycontainer:'
  prefs: []
  type: TYPE_NORMAL
- en: podman exec -it mycontainer /bin/bash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: bash-4.4#
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that though the above example referenced the container name the same result
    can be achieved using the container ID as listed by the podman ps -a command:'
  prefs: []
  type: TYPE_NORMAL
- en: podman exec -it 965acf617e6e /bin/bash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: bash-4.4#
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, the podman attach command will also attach to a running container
    and access the shell prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: podman attach mycontainer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: bash-4.4#
  prefs: []
  type: TYPE_NORMAL
- en: Once the container is up and running, any additional configuration changes can
    be made and packages installed just like any other CentOS 8 system.
  prefs: []
  type: TYPE_NORMAL
- en: 26.3 Managing a Container
  prefs: []
  type: TYPE_NORMAL
- en: 'Once launched, a container will continue to run until it is stopped via podman,
    or the command that was launched when the container was run exits. Running the
    following command on the host, for example, will cause the container to exit:'
  prefs: []
  type: TYPE_NORMAL
- en: podman stop mycontainer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Alternatively, pressing the Ctrl-D keyboard sequence within the last remaining
    bash shell of the container would cause both the shell and container to exit.
    Once it has exited, the status of the container will change accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: podman ps -a
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
  prefs: []
  type: TYPE_NORMAL
- en: 965acf617e6e docker.io/library/centos:latest /bin/bash 10 minutes ago Exited
    (0) 21 seconds ago mycontainer
  prefs: []
  type: TYPE_NORMAL
- en: 'Although the container is no longer running, it still exists and contains all
    of the changes that were made to the configuration and file system. If you installed
    packages, made configuration changes or added files, these changes will persist
    within “mycontainer”. To verify this, simply restart the container as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: podman start mycontainer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After starting the container, use the podman exec command once again to execute
    commands within the container as outlined previously. For example, to once again
    gain access to a shell prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: podman exec -it mycontainer /bin/bash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A running container may also be paused and resumed using the podman pause and
    unpause commands as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: podman pause my container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: podman unpause my container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 26.4 Saving a Container to an Image
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the container guest system is configured to your requirements there is
    a good chance that you will want to create and run more than one container of
    this particular type. To do this, the container needs to be saved as an image
    to local storage so that it can be used as the basis for additional container
    instances. This is achieved using the podman commit command combined with the
    name or ID of the container and the name by which the image will be stored, for
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: $ podman commit mycontainer mycentos_image
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the image has been saved, check that it now appears in the list of images
    in the local repository:'
  prefs: []
  type: TYPE_NORMAL
- en: $ podman images
  prefs: []
  type: TYPE_NORMAL
- en: REPOSITORY TAG IMAGE ID CREATED SIZE
  prefs: []
  type: TYPE_NORMAL
- en: localhost/mycentos_image latest c32c45218143 5 seconds ago 227 MB
  prefs: []
  type: TYPE_NORMAL
- en: docker.io/library/centos latest 0f3e07c0138f 8 weeks ago 227 MB
  prefs: []
  type: TYPE_NORMAL
- en: 'The saved image can now be used to create additional containers identical to
    the original:'
  prefs: []
  type: TYPE_NORMAL
- en: $ podman run --name=mycontainer2 -it localhost/mycentos_image /bin/bash
  prefs: []
  type: TYPE_NORMAL
- en: 26.5 Removing an Image from Local Storage
  prefs: []
  type: TYPE_NORMAL
- en: 'To remove an image from local storage once it is no longer needed, simply run
    the podman rmi command, referencing either the image name or ID as output by the
    podman images command. For example, to remove the image named mycentos_image created
    in the previous section, run podman as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: $ podman rmi localhost/mycentos_image
  prefs: []
  type: TYPE_NORMAL
- en: Note before an image can be removed, any containers based on that image must
    first be removed.
  prefs: []
  type: TYPE_NORMAL
- en: 26.6 Removing Containers
  prefs: []
  type: TYPE_NORMAL
- en: 'Even when a container has exited or been stopped, it still exists and can be
    restarted at any time. If a container is no longer needed, it can be deleted using
    the podman rm command as follows after the container has been stopped:'
  prefs: []
  type: TYPE_NORMAL
- en: podman rm mycontainer2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 26.7 Building a Container with Buildah
  prefs: []
  type: TYPE_NORMAL
- en: Buildah allows new containers to be built either from existing containers, an
    image or entirely from scratch. Buildah also includes the ability to mount the
    file system of a container so that it can be accessed and modified from the host.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following buildah command, for example, will build a container from the
    CentOS 8 Base image (if the image has not already been pulled from the registry,
    buildah will download it before creating the container):'
  prefs: []
  type: TYPE_NORMAL
- en: $ buildah from docker://docker.io/library/centos:centos8
  prefs: []
  type: TYPE_NORMAL
- en: 'The result of running this command will be a container named centos-working-container
    that is ready to run:'
  prefs: []
  type: TYPE_NORMAL
- en: $ buildah run centos-working-container cat /etc/passwd
  prefs: []
  type: TYPE_NORMAL
- en: 26.8 Building a Container from Scratch
  prefs: []
  type: TYPE_NORMAL
- en: Building a container from scratch essentially creates an empty container. Once
    created, packages may be installed to meet the requirements of the container.
    This approach is useful when creating a container that will only need the minimum
    of packages installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step in building from scratch is to run the following command to
    build the empty container:'
  prefs: []
  type: TYPE_NORMAL
- en: buildah from scratch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: working-container
  prefs: []
  type: TYPE_NORMAL
- en: 'After the build is complete, a new container will have been created named working-container:'
  prefs: []
  type: TYPE_NORMAL
- en: $ buildah containers
  prefs: []
  type: TYPE_NORMAL
- en: CONTAINER ID BUILDER IMAGE ID IMAGE NAME CONTAINER NAME
  prefs: []
  type: TYPE_NORMAL
- en: 00f81b68f03f * 0f3e07c0138f docker.io/library/centos:centos8 centos-working-container
  prefs: []
  type: TYPE_NORMAL
- en: d7dd4b652379 * scratch working-container
  prefs: []
  type: TYPE_NORMAL
- en: 'The empty container is now ready to have some packages installed. Unfortunately
    this cannot be performed from within the container because not even the bash or
    dnf tools exist at this point. Instead the container filesystem needs to be mounted
    on the host system and the installation of the packages performed using dnf with
    the system root set to the mounted container filesystem. Begin this process by
    mounting the container’s filesystem as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: buildah mount working-container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: /var/lib/containers/storage/overlay/20b46cf0e2994d1ecdc4487b89f93f6ccf41f72788da63866b6bf80984081d9a/merge
  prefs: []
  type: TYPE_NORMAL
- en: 'If the file system was successfully mounted, buildah will output the mount
    point for the container file system. Now that we have access to the container
    filesystem, the dnf command can be used to install packages into the container
    using the –installroot option to point to the mounted container file system. The
    following command, for example, installs the bash, CoreUtils and dnf packages
    on the container filesystem (where <container_fs_mount> is the mount path output
    previously by the buildah mount command) :'
  prefs: []
  type: TYPE_NORMAL
- en: dnf install --releasever=8 --installroot <container_fs_mount> bash coreutils
    dnf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note that the --releasever option is used to indicate to dnf that the packages
    for CentOS version 8 are to be installed within the container.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the installation completes, unmount the scratch filesystem as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: buildah umount working-container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once dnf has performed the package installation, the container can be run and
    the bash command prompt accessed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: buildah run working-container bash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: bash-4.4#
  prefs: []
  type: TYPE_NORMAL
- en: 26.9 Container Bridge Networking
  prefs: []
  type: TYPE_NORMAL
- en: 'As outlined in the previous chapter, container networking is implemented using
    the Container Networking Interface (CNI) bridged network stack. The following
    command shows the typical network configuration on a host system on which containers
    are running:'
  prefs: []
  type: TYPE_NORMAL
- en: ip a
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default
    qlen 1000'
  prefs: []
  type: TYPE_NORMAL
- en: link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
  prefs: []
  type: TYPE_NORMAL
- en: inet 127.0.0.1/8 scope host lo
  prefs: []
  type: TYPE_NORMAL
- en: valid_lft forever preferred_lft forever
  prefs: []
  type: TYPE_NORMAL
- en: inet6 ::1/128 scope host
  prefs: []
  type: TYPE_NORMAL
- en: valid_lft forever preferred_lft forever
  prefs: []
  type: TYPE_NORMAL
- en: '2: enp0s3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state
    UP group default qlen 1000'
  prefs: []
  type: TYPE_NORMAL
- en: link/ether 08:00:27:20:dc:2f brd ff:ff:ff:ff:ff:ff
  prefs: []
  type: TYPE_NORMAL
- en: inet 192.168.0.33/24 brd 192.168.0.255 scope global dynamic noprefixroute enp0s3
  prefs: []
  type: TYPE_NORMAL
- en: valid_lft 3453sec preferred_lft 3453sec
  prefs: []
  type: TYPE_NORMAL
- en: inet6 2606:a000:4307:f000:aa6:6da1:f8a9:5f95/64 scope global dynamic noprefixroute
  prefs: []
  type: TYPE_NORMAL
- en: valid_lft 3599sec preferred_lft 3599sec
  prefs: []
  type: TYPE_NORMAL
- en: inet6 fe80::4275:e186:85e2:d81f/64 scope link noprefixroute
  prefs: []
  type: TYPE_NORMAL
- en: valid_lft forever preferred_lft forever
  prefs: []
  type: TYPE_NORMAL
- en: '3: cni0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP
    group default qlen 1000'
  prefs: []
  type: TYPE_NORMAL
- en: link/ether 7e:b6:04:22:4f:22 brd ff:ff:ff:ff:ff:ff
  prefs: []
  type: TYPE_NORMAL
- en: inet 10.88.0.1/16 scope global cni0
  prefs: []
  type: TYPE_NORMAL
- en: valid_lft forever preferred_lft forever
  prefs: []
  type: TYPE_NORMAL
- en: inet6 fe80::7cb6:4ff:fe22:4f22/64 scope link
  prefs: []
  type: TYPE_NORMAL
- en: valid_lft forever preferred_lft forever
  prefs: []
  type: TYPE_NORMAL
- en: '12: veth2a07dc55@if3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue
    master cni0 state UP group default'
  prefs: []
  type: TYPE_NORMAL
- en: link/ether 42:0d:69:13:89:af brd ff:ff:ff:ff:ff:ff link-netns cni-61ba825e-e596-b2ef-a59f-b0743025e448
  prefs: []
  type: TYPE_NORMAL
- en: inet6 fe80::400d:69ff:fe13:89af/64 scope link
  prefs: []
  type: TYPE_NORMAL
- en: valid_lft forever preferred_lft forever
  prefs: []
  type: TYPE_NORMAL
- en: 'In the above example, the host has an interface named enp0s3 which is connected
    to the external network with an IP address of 192.168.0.33\. In addition, a virtual
    interface has been created named cni0 and assigned the IP address of 10.88.0.1\.
    Running the same ip command on a container running on the host might result in
    the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: ip a
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default
    qlen 1000'
  prefs: []
  type: TYPE_NORMAL
- en: link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
  prefs: []
  type: TYPE_NORMAL
- en: inet 127.0.0.1/8 scope host lo
  prefs: []
  type: TYPE_NORMAL
- en: valid_lft forever preferred_lft forever
  prefs: []
  type: TYPE_NORMAL
- en: inet6 ::1/128 scope host
  prefs: []
  type: TYPE_NORMAL
- en: valid_lft forever preferred_lft forever
  prefs: []
  type: TYPE_NORMAL
- en: '3: eth0@if12: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state
    UP group default'
  prefs: []
  type: TYPE_NORMAL
- en: link/ether 3e:52:22:4b:e0:d8 brd ff:ff:ff:ff:ff:ff link-netnsid 0
  prefs: []
  type: TYPE_NORMAL
- en: inet 10.88.0.28/16 scope global eth0
  prefs: []
  type: TYPE_NORMAL
- en: valid_lft forever preferred_lft forever
  prefs: []
  type: TYPE_NORMAL
- en: inet6 fe80::3c52:22ff:fe4b:e0d8/64 scope link
  prefs: []
  type: TYPE_NORMAL
- en: valid_lft forever preferred_lft forever
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, the container has an IP address of 10.88.0.28\. Running the ping
    command on the host will verify that the host and containers are indeed on the
    same subnet:'
  prefs: []
  type: TYPE_NORMAL
- en: ping 10.88.0.28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PING 10.88.0.28 (10.88.0.28) 56(84) bytes of data.
  prefs: []
  type: TYPE_NORMAL
- en: '64 bytes from 10.88.0.28: icmp_seq=1 ttl=64 time=0.056 ms'
  prefs: []
  type: TYPE_NORMAL
- en: '64 bytes from 10.88.0.28: icmp_seq=2 ttl=64 time=0.039 ms'
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: 'The CNI configuration settings can be found in the /etc/cni/net.d/87-podman-bridge.conflist
    file on the host system which, by default, will read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"cniVersion": "0.3.0",'
  prefs: []
  type: TYPE_NORMAL
- en: '"name": "podman",'
  prefs: []
  type: TYPE_NORMAL
- en: '"plugins": ['
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"type": "bridge",'
  prefs: []
  type: TYPE_NORMAL
- en: '"bridge": "cni0",'
  prefs: []
  type: TYPE_NORMAL
- en: '"isGateway": true,'
  prefs: []
  type: TYPE_NORMAL
- en: '"ipMasq": true,'
  prefs: []
  type: TYPE_NORMAL
- en: '"ipam": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"type": "host-local",'
  prefs: []
  type: TYPE_NORMAL
- en: '"subnet": "10.88.0.0/16",'
  prefs: []
  type: TYPE_NORMAL
- en: '"routes": ['
  prefs: []
  type: TYPE_NORMAL
- en: '{ "dst": "0.0.0.0/0" }'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"type": "portmap",'
  prefs: []
  type: TYPE_NORMAL
- en: '"capabilities": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"portMappings": true'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: Changes can be made to this file to change the subnet address range, and also
    to change the plugin type (set to bridge for this example) for implementing different
    network configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 26.10 Summary
  prefs: []
  type: TYPE_NORMAL
- en: This chapter has worked through the creation and management of Linux Containers
    on CentOS 8 using the skopeo and buildah tools, including the use of container
    images obtained from a repository and the creation of a new image built entirely
    from scratch.
  prefs: []
  type: TYPE_NORMAL
