- en: '17'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '17'
- en: Using Shell Script Options with getops
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Shell 脚本选项与`getopts`
- en: Often, an administrator will need to pass both arguments and options to a shell
    script. That’s easily done by passing positional parameters to the script, as
    we’ve seen in previous chapters. But, if you need to use normal Linux/Unix-style
    option switches, and you need to use arguments for certain options, then you’ll
    need a helper program. In this chapter, I’ll show you how to use `getops` to pass
    options, arguments, and options with arguments to a script.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，管理员需要同时向 shell 脚本传递参数和选项。通过向脚本传递位置参数，这一点在前几章中已经讲解过。 但是，如果你需要使用正常的 Linux/Unix
    风格的选项开关，并且需要为某些选项使用参数，那么你就需要一个辅助程序。在本章中，我将向你展示如何使用`getopts`将选项、参数以及带参数的选项传递给脚本。
- en: 'Topics in this chapter include:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主题包括：
- en: Understanding the need for `getopts`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解使用`getopts`的必要性
- en: Understanding `getopt` versus `getopts`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解`getopt`与`getopts`的区别
- en: Using `getopts`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`getopts`
- en: Looking at real-world examples
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看实际的例子
- en: So, if you’re ready, let’s dig in.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你准备好了，我们就开始吧。
- en: Technical Requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You can use either your Fedora or your Debian virtual machine for this chapter.
    And, as always, you can grab the scripts by running:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用你的 Fedora 或 Debian 虚拟机来完成本章内容。而且，像往常一样，你可以通过运行以下命令来获取脚本：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Understanding the Need for getopts
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解`getopts`的必要性
- en: Before we do anything else, let’s review the difference between **options**
    and **arguments**.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们做任何事情之前，先复习一下**选项**和**参数**之间的区别。
- en: Options modify the behavior of a program or script.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选项修改程序或脚本的行为。
- en: Arguments are the objects upon which a program or script will act.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数是程序或脚本将作用于的对象。
- en: 'The simplest way to demonstrate the difference is with the humble `ls` command.
    If you want to see if a particular file is present, just use `ls` and the filename
    as an argument, like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方式是使用简单的`ls`命令。如果你想查看某个特定文件是否存在，只需像这样使用`ls`和文件名作为参数：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you want to see the details about the file, you’ll need to add an option,
    like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看文件的详细信息，你需要添加一个选项，像这样：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You see how the `-l` option modifies the behavior of the `ls` command.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到`-l`选项如何修改`ls`命令的行为。
- en: You’ve already seen how to use normal positional parameters to pass options
    and arguments into a script. A lot of the time, this will work sufficiently well,
    and you won’t need anything more. However, without some sort of helper utility,
    creating scripts that can properly parse a set of single-letter options that are
    combined with a single dash, or that have options with their arguments is very
    unwieldy. This is where `getopts` comes in. You can use it in a script to simplify
    the process. Before we talk about that though, I want to quickly cover something
    that might be a point of confusion for you.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经见过如何使用普通的位置参数将选项和参数传递给脚本。很多时候，这种方式足够好了，你不需要其他更多的东西。然而，如果没有某种辅助工具，创建能够正确解析由单个短横线组合的单字母选项，或具有带参数选项的脚本将变得非常笨重。这就是`getopts`的作用。你可以在脚本中使用它来简化这一过程。不过，在我们讨论这个之前，我想快速介绍一些可能会让你感到困惑的内容。
- en: Understanding getopt versus getopts
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解`getopt`与`getopts`的区别
- en: The `getopt` utility, which has its own executable file, has been around forever,
    since the early days of Unix. Its big advantage is that it can handle long options.
    In other words, in addition to feeding it single-letter options, such as `-a`
    or `-b`, you can also feed it whole-word options such as `--alpha` or `--beta`.
    And, that’s it. That’s really its only advantage.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`getopt`工具已经存在很久了，从 Unix 的早期就有了。它的一个大优点是可以处理长选项。换句话说，除了可以向它传递单字母选项，例如`-a`或`-b`，你还可以向它传递完整的单词选项，例如`--alpha`或`--beta`。就这些，这就是它的唯一优点。'
- en: It also has some disadvantages. The original implementation of `getopt` can’t
    handle arguments that have blank spaces in their text strings. So, for example,
    if you need to work with a file that has a blank space in its filename, you can’t
    specify that filename as an argument for a shell script that uses the original
    `getopt`. Also, the `getopt` syntax is a bit trickier than that of `getopts`,
    which makes `getopts` somewhat easier to use.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 它也有一些缺点。`getopt`的原始实现无法处理包含空格的参数文本。例如，如果你需要处理一个文件名中包含空格的文件，你无法将该文件名作为参数传递给使用原始`getopt`的
    shell 脚本。另外，`getopt`的语法比`getopts`稍微复杂，这使得`getopts`的使用相对更简单。
- en: At some point in time, I’m not sure when, some random Linux developers decided
    to create a new implementation of `getopt` that would fix some of these deficiencies.
    (This is known as the **util-linux** implementation.) That would be great, except
    that it’s still *only* in Linux. All of the Unix and Unix-like operating systems
    still have the original, unenhanced `getopt`. So, if you were to create a script
    on a Linux machine that uses the cool features of the enhanced `getopt`, you won’t
    be able to run it on any Unix or Unix-like operating system, such as FreeBSD or
    OpenIndiana.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时间点，我不确定是何时，一些随机的Linux开发者决定创建一个新的`getopt`实现，以修复其中一些缺陷。（这被称为**util-linux**实现。）这听起来很棒，但它仍然*只有*在Linux上。所有的Unix和类Unix操作系统仍然拥有原始的、未增强的`getopt`。因此，如果您在Linux机器上创建一个使用增强`getopt`的脚本，您将无法在任何Unix或类Unix操作系统上运行它，比如FreeBSD或OpenIndiana。
- en: The newer `getopts` command, which is a shell builtin command that doesn’t have
    its own executable, can work with arguments that contain blank spaces. The trade-off
    is that it can only work with single-letter options, and can’t work with long
    options. The biggest advantage is that it’s portable across Linux, Unix, and Unix-like
    operating systems, regardless of which shell you’re using. So, if portability
    is one of your goals, your best bet is to just say *No* to `getopt`, and *Yes*
    to `getopts`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 较新的`getopts`命令是一个内置的Shell命令，没有自己的可执行文件，可以处理包含空格的参数。但是，它只能处理单字母选项，不能处理长选项。最大的优势是它在Linux、Unix和类Unix操作系统上具有可移植性，无论使用哪种Shell。因此，如果可移植性是您的目标之一，最好拒绝`getopt`，选择`getopts`。
- en: For that reason, I’ll only cover `getopts` in this chapter, and won’t say anything
    more about the creaky old `getopt`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我在本章节只讨论`getopts`，不再提及老旧的`getopt`。
- en: With that out of the way, let’s get down to the meat of the matter.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 说到这里，让我们深入探讨问题的核心。
- en: Using getopts
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用getopts
- en: 'We’ll begin with the `getopts-demo1.sh` script, which is the world’s simplest
    `getopts` script. Here’s how it looks:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从`getopts-demo1.sh`脚本开始，这是世界上最简单的`getopts`脚本。它的样子如下：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We’re using a `while` loop to pass the chosen option or options into a `case`
    statement. The `ab` after the `getopts` command means that we’re defining `a`
    and `b` as options that we can choose. (This list of allowable options is referred
    to as the **optstring**.) You can use any alpha-numeric character as an option.
    It’s possible to use certain other characters as well, but it’s not recommended.
    For reasons that will become clear later, you definitely *cannot* use either a
    `?` or a `:` as an option. After the `ab`, you see `options`, which is just the
    name of the variable that we’ll use in the `case` construct. (You can name the
    variable whatever you want.) Anyway, running the script looks like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用`while`循环将所选选项或选项传递给`case`语句。在`getopts`命令后面的`ab`意味着我们正在定义`a`和`b`作为可选项。
    （这个可选项列表称为**optstring**。）您可以将任何字母数字字符用作选项。也可以使用某些其他字符，但不建议这样做。由于稍后将变得清晰，绝对*不能*将`?`或`:`用作选项。在`ab`之后，您会看到`options`，这只是我们将在`case`结构中使用的变量名称。
    （您可以随意命名变量。）无论如何，运行脚本看起来像这样：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Okay, *big deal*, you’re saying. We can do this sort of thing with just normal
    positional parameters. Ah, but here’s something that you can’t do with normal
    positional parameters:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，*大不了*，你可能会说。我们可以用普通的位置参数做这种事情。啊，但这是普通位置参数做不到的一件事：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'So, you see how `getopts` allows you to combine options with a single dash,
    just as you’re used to doing with normal Linux and Unix utilities. Something else
    that you can’t do with normal positional parameters, at least not easily, is to
    have options that require their own arguments. Here’s the `getopts-demo2.sh` script
    that shows how that’s done:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您看到`getopts`如何允许您将选项与单破折号组合，就像您习惯于在普通Linux和Unix实用程序中做的那样。另一件普通位置参数做不到的事情，至少不容易做到的事情，是有需要自己参数的选项。这里是展示如何做到这一点的`getopts-demo2.sh`脚本：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When you place a colon after an allowable option in the optstring, you’ll need
    to supply an argument for that option when you run the script. The argument for
    each option is stored in `OPTARG`, which is a variable that’s built into the shell
    and that works with `getopts`. (Note that this variable name must consist of nothing
    but upper-case letters.) The `while` loop runs once for each option that is used,
    which means that the same `OPTARG` variable can be used for multiple option arguments.
    Just for fun, let’s try this with my first name as the argument for the `-a` option,
    and my last name as the argument for the `-b` option. Here’s how it looks:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 optstring 中为允许的选项后加上冒号时，运行脚本时需要为该选项提供一个参数。每个选项的参数存储在 `OPTARG` 中，这是一个内建变量，和
    `getopts` 一起使用。（请注意，该变量名只能由大写字母组成。）`while` 循环会针对每个使用的选项执行一次，这意味着同一个 `OPTARG` 变量可以用于多个选项参数。为了好玩，我们试着将我的名字作为
    `-a` 选项的参数，将我的姓氏作为 `-b` 选项的参数。以下是结果：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As it is now, the shell will return its own error message if you run the script
    with an invalid option, which looks like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，如果你在运行脚本时使用了无效的选项，shell 会返回自己的错误信息，类似这样：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In this case, the `./getopts-demo2.sh: illegal option -- x` line is the error
    message that was generated by `bash`. You can suppress that error message by placing
    another colon at the beginning of the optstring. Optionally, you can add a `\?`
    choice to the `case` structure that will display your own custom error message
    for invalid choices, and a `:` choice to alert you if you try to run the script
    without supplying the required option arguments. Another problem is that if I
    don’t supply the required option arguments, the final `echo` command still runs,
    when it really shouldn’t. Anyway, here’s how all of the fixes look in the `getopts-demo3.sh`
    script:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '在这种情况下，`./getopts-demo2.sh: illegal option -- x` 这一行是由 `bash` 生成的错误信息。你可以通过在
    optstring 开头再加一个冒号来抑制该错误信息。可选地，你可以在 `case` 结构中添加一个 `\?` 选项，用来自定义显示无效选择的错误信息，并使用
    `:` 选项来提醒你如果尝试在没有提供所需选项参数的情况下运行脚本。另一个问题是，如果我没有提供所需的选项参数，最终的 `echo` 命令仍然会执行，而它实际上不应该执行。无论如何，以下是所有修复后的
    `getopts-demo3.sh` 脚本：'
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here’s what happens when I run it with all of the necessary arguments:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当我使用所有必要的参数运行脚本时，结果是这样的：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And here’s how it looks if I either don’t use all of the options or if I use
    an option without providing an argument:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我没有使用所有选项，或者在使用选项时没有提供参数，情况是这样的：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'What we’ve done so far works perfectly with options that require arguments.
    In the `getopts-demo4.sh` script, I’ll introduce two new concepts. You’ll see
    how to require arguments for some options but not for others, and how to use non-option
    arguments. Here’s how that looks:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们做的工作对需要参数的选项来说非常完美。在 `getopts-demo4.sh` 脚本中，我将介绍两个新概念。你将看到如何为某些选项要求参数而不为其他选项要求参数，以及如何使用非选项参数。以下是示例：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `:a:b:c` optstring, without a colon after the `c`, says that an argument
    is required for the `-a` and `-b` options, but not for the `-c` option. If any
    filenames are provided as non-option arguments, the last line at the bottom will
    perform an `ls -l` command on those files. (Note that the `[[ -z $@ ]]` structure
    will return an exit code of 0 if there are no non-option arguments. If there is
    a non-option argument, it will return an exit code of 1, which will trigger the
    `ls -l` command.) But, here’s the trick.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`:a:b:c` 的 optstring，在 `c` 后没有冒号，表示 `-a` 和 `-b` 选项需要参数，但 `-c` 选项不需要。如果提供了作为非选项参数的文件名，底部的最后一行将对这些文件执行
    `ls -l` 命令。（请注意，`[[ -z $@ ]]` 结构如果没有非选项参数时将返回退出码 0。如果有非选项参数，则返回退出码 1，这将触发 `ls
    -l` 命令。）不过，诀窍在于：'
- en: When you run this script, you’ll need to specify the options and option arguments
    first. Then, at the end of the command, specify the filenames that will be the
    non-option arguments. Or, if you desire, just specify a non-option argument without
    using any of the options. The `shift $((OPTIND-1))` line is necessary to make
    the script recognize non-option arguments.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这个脚本时，首先需要指定选项和选项参数。然后，在命令的最后指定将作为非选项参数的文件名。或者，如果你愿意，也可以只指定一个非选项参数，而不使用任何选项。`shift
    $((OPTIND-1))` 这一行是必须的，以便脚本能识别非选项参数。
- en: '`OPTIND` is another variable that’s built into the shell and that is meant
    to hold the number of `getopts` options that have been processed. The simplest
    way to understand what the `shift $((OPTIND-1))` command does is to think of it
    as a clearing mechanism. In other words, it clears away all of the `getopts` options
    that have been used and makes way for the non-option arguments. Another way to
    think of it is that it resets the positional parameter count back to `$1`. That
    way, you can access your non-option arguments the way you normally would, as you
    see on the final line. Also, note the `ls -l "$1"` command in the final line.
    This is a case where you absolutely *must* surround the positional parameter (`$1`,
    in this case) with a pair of double quotes. Otherwise, you’ll get an error message
    if you try to access a file that has a blank space in its filename. Finally, note
    that you can list multiple positional parameters so that you can have multiple
    arguments, just as you’ve done before. Or, you can replace the `"$1"` parameter
    with `"$@"` so that you can use an unlimited number of non-option arguments.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`OPTIND`是另一个内置的变量，用来存储已处理的`getopts`选项的数量。理解`shift $((OPTIND-1))`命令的最简单方式是把它看作一个清理机制。换句话说，它会清除已经使用的所有`getopts`选项，为非选项参数腾出空间。另一种理解方式是它会将位置参数计数重置回`$1`。这样，你就可以像平常一样访问非选项参数，如最后一行所示。此外，注意最后一行中的`ls
    -l "$1"`命令。这是一个必须*用双引号*括住位置参数（在此情况下是`$1`）的场景。否则，如果你试图访问文件名中有空格的文件时，会收到错误消息。最后，注意你可以列出多个位置参数，这样你就可以有多个参数，就像你以前做的那样。或者，你也可以用`"$@"`替代`"$1"`，这样你就可以使用无限数量的非选项参数。'
- en: 'So, running this script with no options, and with just a non-option argument,
    looks like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在没有选项，只有一个非选项参数的情况下运行这个脚本，效果如下：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If I were to remove the double quotes from around the positional parameter
    in the `ls -l` command, I would receive an error whenever I try to access a file
    with blank spaces in the filename. Here’s how that looks:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我去掉`ls -l`命令中位置参数周围的双引号，当我尝试访问文件名中包含空格的文件时，就会收到错误。下面是这样做的效果：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: So, remember to use those double quotes.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，记得使用双引号。
- en: When I told you about the disadvantages of using `getopt`, I mentioned that
    the `getopt` syntax is trickier to use than that of `getopts`. If I were using
    `getopt` for these scripts, I would need to place one or more `shift` commands
    after each item in the `case` construct, so that the script would properly recognize
    the options. With `getopts`, this shifting is done automatically. The only place
    where I’ve had to use `shift` is in the `shift $((OPTIND-1))` command at the end.
    So you can see where `getopts` is much simpler.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当我告诉你使用`getopt`的缺点时，我提到过`getopt`的语法比`getopts`更复杂。如果我使用`getopt`编写这些脚本，我需要在`case`结构中的每个项后面添加一个或多个`shift`命令，以便脚本能够正确识别选项。而使用`getopts`时，这个移动操作是自动完成的。我唯一需要使用`shift`的地方就是在最后的`shift
    $((OPTIND-1))`命令中。所以你可以看到，`getopts`要简单得多。
- en: Also, if you want to learn more about how to use `OPTIND` with `getops`, I’ve
    placed some references in the *Further Reading* section.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你想了解更多关于如何在`getopts`中使用`OPTIND`的内容，我已经在*进一步阅读*部分中放置了一些参考资料。
- en: And really, this is pretty much it for the basic usage of `getopts`. So, let’s
    move on.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，这就是`getopts`的基本用法。所以，让我们继续往下看。
- en: Looking at Real-world Examples
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看真实世界的例子
- en: Now that I’ve demonstrated the theory of using `getopts`, it’s time to get down
    to business with a couple of real-world examples. Enjoy!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我已经展示了如何使用`getopts`的理论，是时候通过一些真实世界的例子开始实际操作了。享受吧！
- en: The Modified Coingecko Script
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改版 Coingecko 脚本
- en: In *Chapter 10, Understanding Functions*, I showed you a pair of cool scripts
    that I created for my own use. To review, these scripts use the Coingecko API
    to automatically fetch information about cryptocurrencies.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第10章，理解函数*中，我展示了一对我为自己编写的很酷的脚本。回顾一下，这些脚本使用 Coingecko API 来自动获取有关加密货币的信息。
- en: The `coingecko.sh` script uses an `if. .elif. .else` construct to allow me to
    choose the function that I want to perform. In the `coingecko-case.sh` script,
    I use a `case. .esac` construct to achieve the same thing. Now, I present the
    third incarnation of the script, which uses `getopts`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`coingecko.sh`脚本使用了一个`if. .elif. .else`结构，允许我选择要执行的功能。在`coingecko-case.sh`脚本中，我使用了`case.
    .esac`结构来实现相同的功能。现在，我展示了这个脚本的第三个版本，它使用了`getopts`。'
- en: The `coingecko-getopts.sh` script is too large to reproduce here, so you’ll
    need to grab it from GitHub. I do need to point out a few things about it, so
    I’ll just show the relevant snippets here.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`coingecko-getopts.sh`脚本太大，无法在此处完整展示，所以你需要从GitHub获取它。我确实需要指出其中的一些要点，所以在这里我只展示相关的代码片段。'
- en: 'At the beginning of the script, I added the `gecko_usage()` function, which
    looks like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本的开头，我添加了`gecko_usage()`函数，它看起来是这样的：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Next, I deleted the `coin=$1` and `currency=$2` variable definitions from within
    the `gecko_api()` function, because we no longer need them.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我删除了`gecko_api()`函数内的`coin=$1`和`currency=$2`变量定义，因为我们不再需要它们。
- en: 'Then, I added an error-checking option to the existing case structure, modified
    the **Usage** option to call the `gecko_usage()` function, and then surrounded
    it with a `while` loop, which looks like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我在现有的`case`结构中添加了一个错误检查选项，修改了**Usage**选项以调用`gecko_usage()`函数，然后用一个`while`循环将其包裹起来，像这样：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Remember to install the `jq` package, as I showed you in *Chapter 10*.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 记得安装`jq`包，就像我在*第10章*中展示的那样。
- en: 'At first, I also had a `p:` option to obtain the current coin prices. That
    didn’t work though, because this command requires two arguments, which are the
    comma-separated list of coins and the reference currency. But, `getopts` only
    allows you to use one argument per option. To fix that, I moved the coin price
    command out of the `gecko_api()` function, and placed it at the end of the file,
    like this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，我也有一个`p:`选项来获取当前的币种价格。但它没有工作，因为这个命令需要两个参数，即以逗号分隔的币种列表和参考货币。然而，`getopts`只允许每个选项使用一个参数。为了解决这个问题，我将币种价格命令移出了`gecko_api()`函数，并将其放在文件的末尾，如下所示：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The call to the `gecko_api()` function now only requires one positional parameter,
    which will be the selected `-h`, `-l`, or `-c` option, or the combined `-hlc`
    set of options. If you want to use each option separately, rather than combining
    them, you’ll need to change `gecko_api $1` to either `gecko_api $1 $2 $3` or `gecko_api
    $@`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`gecko_api()`函数现在只需要一个位置参数，该参数将是所选的`-h`、`-l`或`-c`选项，或者是组合的`-hlc`选项集。如果你想分别使用每个选项，而不是将它们合并，你需要将`gecko_api
    $1`改为`gecko_api $1 $2 $3`或`gecko_api $@`。
- en: So, adapting the original Coingecko scripts to use `getopts` was really quite
    easy. But, what’s the advantage? Well, in this case, there’s really only one.
    That is, by using `getopts` option switches, you can now perform more than one
    task by running this script just a single time. That’s something that you can’t
    do with the original scripts. Regardless, you can use this as a template for your
    own scripts in which using `getopts` might be more advantageous.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，改编原始的Coingecko脚本以使用`getopts`其实非常简单。但，这样做的优势是什么呢？嗯，在这个情况下，实际上只有一个优势。也就是说，通过使用`getopts`选项切换，你现在可以通过仅运行一次脚本来执行多个任务。这是原始脚本做不到的。无论如何，你可以将这个作为模板，适用于你自己在使用`getopts`时可能更具优势的脚本。
- en: Now, let’s check out a cool system monitoring script.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一个很酷的系统监控脚本。
- en: The Tecmint Monitor Script
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Tecmint监控脚本
- en: I borrowed this handy Linux-only `tecmint_monitor.sh` script from the Tecmint
    website, and tweaked it a bit to make it work better on newer Linux systems. The
    author released it under the Apache 2.0 free software license, so I was able to
    upload the tweaked version to GitHub for your convenience. (I’ve also provided
    a link to the original Tecmint article in the *Further Reading* section.)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我从Tecmint网站借用了这个实用的仅限Linux的`tecmint_monitor.sh`脚本，并稍微调整了一下，使其在较新的Linux系统上运行得更好。作者将其发布在Apache
    2.0自由软件许可下，所以我能够将修改版上传到GitHub，方便你使用。（我还在*进一步阅读*部分提供了原始Tecmint文章的链接。）
- en: I’m not going to explain the whole script here, because the author has done
    a stellar job of explaining it by inserting comments everywhere. But, I will point
    out a few things about it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会在这里解释整个脚本，因为作者已经通过在各处插入注释做得非常出色。但是，我会指出其中的一些要点。
- en: 'The first thing to note is that the author has done things a bit differently
    with the `case` construct. Instead of placing all of the code that he wants to
    execute into the `case` options, he instead just uses the `case` options to set
    either the `iopt` or `vopt` variable, depending upon whether the `-i` or the `-v`
    option was chosen. Here’s how it looks:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 首先需要注意的是，作者在使用`case`结构时做了一些不同的处理。与将他想要执行的所有代码放入`case`选项中不同，他只是使用`case`选项来设置`iopt`或`vopt`变量，具体取决于选择了`-i`还是`-v`选项。下面是它的实现方式：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The executable code is placed within a pair of `if. .then` constructs. Here’s
    the first one:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 可执行代码被放置在一对`if...then`结构中。下面是第一个结构：
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: So, if the value of the `iopt` variable is not of zero length, meaning that
    the `-i` option was chosen, then this script installation routine will run. It’s
    not a very complex command. All it does is prompt you to enter the root user’s
    password, copy the `techmint-monitor.sh` script to the `/usr/bin/` directory,
    and change its name to `monitor`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果`iopt`变量的值不是零长度，意味着选择了`-i`选项，那么此脚本安装例程将会执行。它并不是一个非常复杂的命令。它所做的只是提示你输入根用户的密码，将`techmint-monitor.sh`脚本复制到`/usr/bin/`目录，并将其重命名为`monitor`。
- en: Now, there is a slight problem here that I haven’t fixed. It’s just since the
    author created this script in 2016, it’s become more common for Linux users to
    not assign a password to the root user account. In fact, that’s the default behavior
    for the Ubuntu distros, and it’s optional for many other distros. (In fact, I’ve
    never assigned a root user password here on this Fedora workstation.) So, the
    `su -c` command here won’t work, because it expects you to enter the root user
    password when it prompts you to. So, if you haven’t assigned a password to the
    root account, you’ll always get an authentication failure if you run the script
    without using `sudo`. But, the script works fine when I do run it with `sudo`,
    so I didn’t bother to change this.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这里有一个我还没有解决的小问题。因为自从作者在2016年创建这个脚本以来，Linux用户不为根用户账户设置密码已经变得越来越常见。事实上，这是Ubuntu发行版的默认行为，很多其他发行版也是可选的。（事实上，我在这台Fedora工作站上从未为根用户设置过密码。）因此，`su
    -c`命令在这里不起作用，因为它会在提示时要求你输入根用户的密码。所以，如果你没有为根账户设置密码，在没有使用`sudo`的情况下运行脚本时，你将总是遇到身份验证失败的问题。但是，当我使用`sudo`运行脚本时，它工作得很好，因此我没有急于更改这一点。
- en: 'Next, we have the `if. .then` construct for the `vopt` variable, which looks
    like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有针对`vopt`变量的`if...then`结构，它看起来是这样的：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: All this option does is show version information about the script. At the bottom,
    I added the `Tweaked by Donnie` line to show that I modified the original script.
    (You might say that I made a tweak here to show that I made some tweaks.)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选项的作用仅仅是显示关于脚本的版本信息。在底部，我添加了`Tweaked by Donnie`这一行，以显示我对原脚本进行了修改。（你可以说我在这里做了一些调整，以表明我做了一些修改。）
- en: Next, we see a long `if. .then` construct that does the real work. It begins
    with `if [[ $# -eq 0 ]]`, which means that if no options were chosen, the code
    in this `if. .then` construct will execute.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们看到一个长的`if...then`结构，它执行实际的工作。它从`if [[ $# -eq 0 ]]`开始，这意味着如果没有选择任何选项，那么`if...then`结构中的代码将会执行。
- en: 'Within this big, long `if. .then` block are the commands that obtain various
    types of system information. I had to tweak the command for checking DNS server
    information because the author made it look for the IP address of the DNS server
    on a specific line of the `resolv.conf` file. I changed it so that it will look
    for any lines that begin with the text string `nameserver`, which looks like this:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个长长的`if...then`块中包含了获取各种系统信息的命令。我不得不调整检查DNS服务器信息的命令，因为原作者让它去寻找`resolv.conf`文件中某一特定行的DNS服务器IP地址。我修改了它，让它去查找任何以`nameserver`开头的行，效果如下：
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'I also tweaked the Check Disk Usages command, in order to make it more portable.
    Here’s how it looks:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我还对检查磁盘使用情况的命令进行了调整，以使其更加便携。以下是调整后的效果：
- en: '[PRE22]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: All I did here was to add the `-P` option to the `df` command, so that the `df`
    output will always be POSIX-compliant. Of course, you can also add more drives
    to this if you need to.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里所做的只是为`df`命令添加了`-P`选项，这样`df`的输出将始终符合POSIX规范。当然，如果需要，你也可以添加更多的驱动器。
- en: Finally, at the very end, we have the `shift $(($OPTIND -1))` command. The script
    will actually run just fine if you comment this line out, because we don’t have
    to deal with any non-option arguments. Still though, a lot of people believe that
    it’s good form to always add this line to the end of a script that uses `getopts`,
    just to ensure that all option information is cleared out when the script exits.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在最底部，我们有`shift $(($OPTIND -1))`命令。如果你注释掉这一行，脚本实际上也能正常运行，因为我们不需要处理任何非选项参数。不过，许多人认为，为了确保所有选项信息在脚本退出时被清除，最好在使用`getopts`的脚本末尾始终加上这一行。
- en: In all of these examples, you’ve seen me use `while` loops to implement `getopts`,
    because that’s my own personal preference. However, if you prefer to use a `for`
    loop instead, that’s also perfectly fine. The choice is yours.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些示例中，你看到我使用`while`循环来实现`getopts`，因为这是我个人的偏好。然而，如果你更喜欢使用`for`循环，完全可以。选择权在你。
- en: All right, I think that just about does it for our discussion of `getopts`.
    Let’s summarize and move on.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我想我们已经差不多完成了关于`getopts`的讨论。让我们总结一下并继续。
- en: Summary
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we’ve looked at `getopts`, which gives us a cool and easy way
    to create scripts that recognize Linux and Unix-style option switches that might
    have their own arguments. We began with a review of what command options and arguments
    are, and then cleared up a possible point of confusion about `getopt` and `getopts`.
    After a presentation about how to use `getopts`, we wrapped up with a review of
    a couple of real-world scripts that use it.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了`getopts`，它为我们提供了一种非常酷且简单的方法，来创建识别Linux和Unix风格选项开关的脚本，这些开关可能会有自己的参数。我们首先回顾了命令选项和参数的概念，然后澄清了关于`getopt`和`getopts`的一个可能的混淆点。在介绍了如何使用`getopts`之后，我们总结了一些实际使用它的脚本示例。
- en: In the next chapter, we’ll look at how shell scripting can be a big help to
    security professionals. I’ll see you there.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨Shell脚本如何帮助安全专业人员。我在那里等你。
- en: Questions
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which of the following statements is true?
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个陈述是正确的？
- en: You should always use `getopt`, because it’s easier to use than `getopts`.
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该始终使用`getopt`，因为它比`getopts`更容易使用。
- en: '`getopt` can handle arguments that contain blank spaces, but `getopts` can’t.'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`getopt`可以处理包含空格的参数，而`getopts`则不能。'
- en: '`getopt` requires you to use one or more shift commands with every option,
    but `getopts` doesn’t.'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`getopt`要求你在每个选项后使用一个或多个shift命令，但`getopts`则不需要。'
- en: '`getopts` can handle long options, but `getopt` can’t.'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`getopts`可以处理长选项，而`getopt`则不能。'
- en: In this `while getopts :a:b:c options; do` line, what does the first colon do?
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这行`while getopts :a:b:c options; do`中，第一个冒号有什么作用？
- en: It suppresses error messages from the shell.
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它抑制了来自Shell的错误信息。
- en: It causes the `-a` option to require an argument.
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它使得`-a`选项需要一个参数。
- en: It doesn’t do anything.
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它什么也不做。
- en: The colons cause the options to be separated from each other.
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 冒号使得选项之间被分开。
- en: You need to create a script that accepts options, options with arguments, and
    non-option arguments. Which of the following commands must you insert into the
    script to make non-option arguments work?
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要创建一个接受选项、带有参数的选项和非选项参数的脚本。你必须在脚本中插入以下哪个命令，才能使非选项参数生效？
- en: '`shift $(($OPTARG -1))`'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`shift $(($OPTARG -1))`'
- en: '`shift $(($OPTIND +1))`'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`shift $(($OPTIND +1))`'
- en: '`shift $(($OPTIND -1))`'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`shift $(($OPTIND -1))`'
- en: '`shift $(($OPTARG +1))`'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`shift $(($OPTARG +1))`'
- en: Further Reading
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Small getopts Tutorial: [http://web.archive.org/web/20190509023321/https://wiki.bash-hackers.org/howto/getopts_tutorial](http://web.archive.org/web/20190509023321/https://wiki.bash-hackers.org/howto/getopts_tutorial)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小型getopts教程：[http://web.archive.org/web/20190509023321/https://wiki.bash-hackers.org/howto/getopts_tutorial](http://web.archive.org/web/20190509023321/https://wiki.bash-hackers.org/howto/getopts_tutorial)
- en: 'How can I handle command-line options and arguments in my script easily?: [http://mywiki.wooledge.org/BashFAQ/035](http://mywiki.wooledge.org/BashFAQ/035)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何轻松处理脚本中的命令行选项和参数？：[http://mywiki.wooledge.org/BashFAQ/035](http://mywiki.wooledge.org/BashFAQ/035)
- en: 'How to Use OPTARG in Bash: [https://linuxsimply.com/bash-scripting-tutorial/functions/script-argument/bash-optarg/](https://linuxsimply.com/bash-scripting-tutorial/functions/script-argument/bash-optarg/)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在Bash中使用OPTARG：[https://linuxsimply.com/bash-scripting-tutorial/functions/script-argument/bash-optarg/](https://linuxsimply.com/bash-scripting-tutorial/functions/script-argument/bash-optarg/)
- en: 'A Shell Script to Monitor Network, Disk Usage, Uptime, Load Average and RAM
    Usage in Linux: [https://www.tecmint.com/linux-server-health-monitoring-script/](https://www.tecmint.com/linux-server-health-monitoring-script/)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于监控Linux网络、磁盘使用、系统运行时间、负载平均值和内存使用情况的Shell脚本：[https://www.tecmint.com/linux-server-health-monitoring-script/](https://www.tecmint.com/linux-server-health-monitoring-script/)
- en: 'Note: The following links contain extra information about `OPTIND`.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：以下链接包含有关`OPTIND`的额外信息。
- en: 'How to Use getopts to Parse Linux Shellscript Otions: [https://www.howtogeek.com/778410/how-to-use-getopts-to-parse-linux-shell-script-options/](https://www.howtogeek.com/778410/how-to-use-getopts-to-parse-linux-shell-script-options/)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用getopts解析Linux Shell脚本选项：[https://www.howtogeek.com/778410/how-to-use-getopts-to-parse-linux-shell-script-options/](https://www.howtogeek.com/778410/how-to-use-getopts-to-parse-linux-shell-script-options/)
- en: 'How does the OPTIND variable work in the shell builtin getopts: [https://stackoverflow.com/questions/14249931/how-does-the-optind-variable-work-in-the-shell-builtin-getopts](https://stackoverflow.com/questions/14249931/how-does-the-optind-variable-work-in-the-shell-builtin-getopts)'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在 shell 内建命令 getopts 中，OPTIND 变量如何工作: [https://stackoverflow.com/questions/14249931/how-does-the-optind-variable-work-in-the-shell-builtin-getopts](https://stackoverflow.com/questions/14249931/how-does-the-optind-variable-work-in-the-shell-builtin-getopts)'
- en: 'How to Use “getopts” in Bash: [https://linuxsimply.com/bash-scripting-tutorial/functions/script-argument/bash-getopts/](https://linuxsimply.com/bash-scripting-tutorial/functions/script-argument/bash-getopts/)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 Bash 中使用 “getopts”：[https://linuxsimply.com/bash-scripting-tutorial/functions/script-argument/bash-getopts/](https://linuxsimply.com/bash-scripting-tutorial/functions/script-argument/bash-getopts/)
- en: Answers
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: c
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: c
- en: a.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: a.
- en: c
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: c
- en: Join our community on Discord!
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们在 Discord 上的社区！
- en: Read this book alongside other users, Linux experts, and the author himself.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他用户、Linux 专家以及作者本人一起阅读这本书。
- en: Ask questions, provide solutions to other readers, chat with the author via
    Ask Me Anything sessions, and much more. Scan the QR code or visit the link to
    join the community.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 提问、为其他读者提供解决方案、通过“问我任何问题”环节与作者互动等等。扫描二维码或访问链接加入社区。
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/SecNet](https://packt.link/SecNet)'
- en: '![](img/QR_Code10596186092701843.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code10596186092701843.png)'
