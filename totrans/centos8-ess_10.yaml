- en: 12\. CentOS 8 Network Management
  prefs: []
  type: TYPE_NORMAL
- en: It is difficult to envisage a CentOS 8 system that does not have at least one
    network connection, and harder still to imagine how such an isolated system could
    be of much practical use. The simple fact is that CentOS 8 is designed to provide
    enterprise level services over network and internet connections. A key part of
    learning how to administer a CentOS 8 system involves learning how to configure
    and manage the network interfaces installed on the system.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is intended to provide an overview of network management on CentOS
    8 including the NetworkManager service and tools together with some other useful
    utilities.
  prefs: []
  type: TYPE_NORMAL
- en: 12.1 An Introduction to NetworkManager
  prefs: []
  type: TYPE_NORMAL
- en: NetworkManager is a service and set of tools designed specifically to make it
    easier to manage the networking configuration on Linux systems and is the default
    network management service on CentOS 8.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to a service that runs in the background, NetworkManager also includes
    the following tools:'
  prefs: []
  type: TYPE_NORMAL
- en: •nmcli - A tool for working with NetworkManager via the command-line. This tool
    is useful when access to a graphical environment is not available and can also
    be used within scripts to make network configuration changes.
  prefs: []
  type: TYPE_NORMAL
- en: •nmtui - A basic text-based user interface for managing NetworkManager. This
    tool can be run within any terminal window and allows changes to be made by making
    menu selections and entering data. While useful for performing basic tasks, nmtui
    lacks many of the features provided by the nmcli tool.
  prefs: []
  type: TYPE_NORMAL
- en: •nm-connection-editor - A full graphical management tool providing access to
    most of the NetworkManager configuration options.
  prefs: []
  type: TYPE_NORMAL
- en: •GNOME Settings - The Network screen of the GNOME desktop Settings application
    allows basic network management tasks to be performed.
  prefs: []
  type: TYPE_NORMAL
- en: •Cockpit Network Settings - The Network screen of the Cockpit web interface
    allows a range of network management tasks to be performed.
  prefs: []
  type: TYPE_NORMAL
- en: Although there a number of different ways to manage the network environment
    on a CentOS 8 system, for the purposes of this chapter we will focus on the nmcli
    command. While the graphical tools are certainly useful when you have access to
    a desktop environment or Cockpit has been enabled, understanding the command-line
    interface is essential for situations where a command prompt is all that is available.
    Also, the graphical tools (Cockpit included) do not include all of the capabilities
    of the nmcli tool. Finally, once you have gained some familiarity with NetworkManager
    and nmcli, those skills will translate easily when using the more intuitive tool
    options. The same cannot be said of the graphical tool options. It is harder to
    use nmcli if, for example, you have only ever used nm-connection-editor.
  prefs: []
  type: TYPE_NORMAL
- en: 12.2 Installing and Enabling NetworkManager
  prefs: []
  type: TYPE_NORMAL
- en: 'NetworkManager should be installed by default for most CentOS 8 installations.
    Use the rpm command to find out if it needs to be installed:'
  prefs: []
  type: TYPE_NORMAL
- en: rpm -q NetworkManager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NetworkManager-1.14.0-14.el8.x86_64
  prefs: []
  type: TYPE_NORMAL
- en: 'If necessary, install the package as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: dnf install NetworkManager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the package is installed, the NetworkManager daemon will need to be enabled
    so that it starts each time the system boots:'
  prefs: []
  type: TYPE_NORMAL
- en: systemctl enable NetworkManager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, start the service running and check the status to verify that the
    launch was successful:'
  prefs: []
  type: TYPE_NORMAL
- en: systemctl start NetworkManager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: systemctl status NetworkManager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ● NetworkManager.service - Network Manager
  prefs: []
  type: TYPE_NORMAL
- en: 'Loaded: loaded (/usr/lib/systemd/system/NetworkManager.service; enabled; vendor
    >'
  prefs: []
  type: TYPE_NORMAL
- en: 'Drop-In: /usr/lib/systemd/system/NetworkManager.service.d'
  prefs: []
  type: TYPE_NORMAL
- en: └─NetworkManager-ovs.conf
  prefs: []
  type: TYPE_NORMAL
- en: 'Active: active (running) since Tue 2019-04-09 10:07:22 EDT; 2h 48min ago'
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: 12.3 Basic nmcli Commands
  prefs: []
  type: TYPE_NORMAL
- en: 'The nmcli command will have been installed as part of the Networkmanager package
    and can be executed from the command-line using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli [Options] Object {Command | help}
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the above syntax, Object will be one of general, networking, radio, connection,
    monitor, device or agent, all of which can be abbreviated to a few letters of
    the word (for example con, or even just the letter c, for connection). For example,
    all of the following commands will output help information relating to the device
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli device help
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: nmcli dev help
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: nmcli d help
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To check the overall status of NetworkManager on the system, use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli general status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: STATE CONNECTIVITY WIFI-HW WIFI WWAN-HW WWAN
  prefs: []
  type: TYPE_NORMAL
- en: connected full enabled enabled enabled enabled
  prefs: []
  type: TYPE_NORMAL
- en: 'To check the status of the devices installed on a system, the following command
    can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli dev status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DEVICE TYPE STATE CONNECTION
  prefs: []
  type: TYPE_NORMAL
- en: eno1 ethernet connected eno1
  prefs: []
  type: TYPE_NORMAL
- en: wlp0s26u1u2 wifi connected zoneone
  prefs: []
  type: TYPE_NORMAL
- en: virbr0 bridge connected virbr0
  prefs: []
  type: TYPE_NORMAL
- en: lo loopback unmanaged --
  prefs: []
  type: TYPE_NORMAL
- en: virbr0-nic tun unmanaged --
  prefs: []
  type: TYPE_NORMAL
- en: 'The output may also be modified by using the -p (pretty) option to make the
    output more human friendly:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli -p dev status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: =====================
  prefs: []
  type: TYPE_NORMAL
- en: Status of devices
  prefs: []
  type: TYPE_NORMAL
- en: =====================
  prefs: []
  type: TYPE_NORMAL
- en: DEVICE TYPE STATE CONNECTION
  prefs: []
  type: TYPE_NORMAL
- en: '-------------------------------------------------------------------'
  prefs: []
  type: TYPE_NORMAL
- en: eno1 ethernet connected eno1
  prefs: []
  type: TYPE_NORMAL
- en: wlp0s26u1u2 wifi connected zoneone
  prefs: []
  type: TYPE_NORMAL
- en: virbr0 bridge connected virbr0
  prefs: []
  type: TYPE_NORMAL
- en: lo loopback unmanaged --
  prefs: []
  type: TYPE_NORMAL
- en: virbr0-nic tun unmanaged --
  prefs: []
  type: TYPE_NORMAL
- en: 'Conversely, the -t option may be used to make the output more terse and suitable
    for automated processing:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli -t dev status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: eno1:ethernet:connected:eno1
  prefs: []
  type: TYPE_NORMAL
- en: wlp0s26u1u2:wifi:connected:emilyzone
  prefs: []
  type: TYPE_NORMAL
- en: virbr0:bridge:connected:virbr0
  prefs: []
  type: TYPE_NORMAL
- en: 'lo:loopback:unmanaged:'
  prefs: []
  type: TYPE_NORMAL
- en: 'virbr0-nic:tun:unmanaged:'
  prefs: []
  type: TYPE_NORMAL
- en: From the status output, we can see that the system has two physical devices
    installed, one Ethernet and the other a Wi-Fi device.
  prefs: []
  type: TYPE_NORMAL
- en: The bridge (virbr) entries are virtual devices used to provide networking for
    virtual machines (the topic of virtualization will be covered starting with the
    chapter entitled [“An Overview of Virtualization Techniques”](../Text/Virtualization_Overview.xhtml#_idTextAnchor248)).
    The loopback interface is a special virtual device that allows the system to communicate
    with itself and is typically used to perform network diagnostics.
  prefs: []
  type: TYPE_NORMAL
- en: When working with NetworkManager, it is important to understand the difference
    between a device and a connection. As described above, a device is either a physical
    or virtual network device while a connection is a network configuration that the
    device connects to.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command displays information about the connections configured
    on the system:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con show
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NAME UUID TYPE DEVICE
  prefs: []
  type: TYPE_NORMAL
- en: zoneone 2abecafa-4ea2-47f6-b20f-4fb0c0fd5e94 wifi wlp0s26u1u2
  prefs: []
  type: TYPE_NORMAL
- en: eno1 99d40009-6bb1-4182-baad-a103941c90ff ethernet eno1
  prefs: []
  type: TYPE_NORMAL
- en: virbr0 e13e9552-1765-42d1-b739-ff981668fbee bridge virbr0
  prefs: []
  type: TYPE_NORMAL
- en: zonetwo f940a2d1-8c18-4a9e-bf29-817702429b8a wifi --
  prefs: []
  type: TYPE_NORMAL
- en: zonethree fd65c5e5-3e92-4e9e-b924-1b0b07b70032 wifi --
  prefs: []
  type: TYPE_NORMAL
- en: From the above output, we can see that the Wi-Fi device (wlp0s26u1u2) is connected
    to a wireless network named zoneone while the Ethernet device (eno1) is connected
    to a connection named eno1\. In addition to zoneone, NetworkManager has also listed
    two other Wi-Fi connections named zonetwo and zonethree, neither of which currently
    have a device connected.
  prefs: []
  type: TYPE_NORMAL
- en: 'To find out the IP address allocated to a connection, the ip tool can be used
    with the address option:'
  prefs: []
  type: TYPE_NORMAL
- en: ip address
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This can also be abbreviated:'
  prefs: []
  type: TYPE_NORMAL
- en: ip a
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: '3: wlp0s26u1u2: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP
    group default qlen 1000'
  prefs: []
  type: TYPE_NORMAL
- en: link/ether 74:da:38:ee:be:50 brd ff:ff:ff:ff:ff:ff
  prefs: []
  type: TYPE_NORMAL
- en: inet 192.168.1.121/24 brd 192.168.1.255 scope global dynamic noprefixroute wlp0s26u1u2
  prefs: []
  type: TYPE_NORMAL
- en: valid_lft 57584sec preferred_lft 57584sec
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: The ip command will output information for all of the devices detected on the
    system. The above output shows that the Wi-Fi device has been assigned an IP address
    of 192.168.1.121.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we only wanted to list active connections, the nmcli command could have
    been used with the -a option:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con show -a
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NAME UUID TYPE DEVICE
  prefs: []
  type: TYPE_NORMAL
- en: emilyzone 2abecafa-4ea2-47f6-b20f-4fb0c0fd5e94 wifi wlp0s26u1u2
  prefs: []
  type: TYPE_NORMAL
- en: eno1 99d40009-6bb1-4182-baad-a103941c90ff ethernet eno1
  prefs: []
  type: TYPE_NORMAL
- en: virbr0 e13e9552-1765-42d1-b739-ff981668fbee bridge virbr0
  prefs: []
  type: TYPE_NORMAL
- en: 'To switch the Wi-Fi device connection from zoneone to zonetwo, we can run the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli device wifi connect zonetwo -ask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Password:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The -ask flag causes nmcli to prompt the user to enter the password for the
    Wi-Fi network. To include the Wi-Fi password on the command-line (particularly
    useful if the command is being executed in a script), use the password option:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli device wifi connect zonetwo password <password here>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The nmcli tool may also be used to scan for available Wi-Fi networks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli device wifi list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IN-USE SSID MODE CHAN RATE SIGNAL BARS SECURITY
  prefs: []
  type: TYPE_NORMAL
- en: zoneone Infra 6 195 Mbit/s 80 WPA2
  prefs: []
  type: TYPE_NORMAL
- en: '* zonetwo Infra 11 130 Mbit/s 74 WPA1 WPA2'
  prefs: []
  type: TYPE_NORMAL
- en: 'A currently active connection can be deactivated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con down <connection name>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similarly, an inactive connection can be brought back up at any time:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con up <connection name>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When a connection is brought down, NetworkManager automatically searches for
    another connection, activates it and assigns it to the device to which the previous
    connection was established. To prevent a connection from being used in this situation,
    disable the autoconnect option as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con mod <connection name> connection.autoconnect no
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following command may be used to obtain additional information about a
    specific connection. This includes the current values for all the connection properties:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con show eno1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'connection.id: eno1'
  prefs: []
  type: TYPE_NORMAL
- en: 'connection.uuid: 99d40009-6bb1-4182-baad-a103941c90ff'
  prefs: []
  type: TYPE_NORMAL
- en: 'connection.stable-id: --'
  prefs: []
  type: TYPE_NORMAL
- en: 'connection.type: 802-3-ethernet'
  prefs: []
  type: TYPE_NORMAL
- en: 'connection.interface-name: eno1'
  prefs: []
  type: TYPE_NORMAL
- en: 'connection.autoconnect: yes'
  prefs: []
  type: TYPE_NORMAL
- en: 'connection.autoconnect-priority: 0'
  prefs: []
  type: TYPE_NORMAL
- en: 'connection.autoconnect-retries: -1 (default)'
  prefs: []
  type: TYPE_NORMAL
- en: 'connection.multi-connect: 0 (default)'
  prefs: []
  type: TYPE_NORMAL
- en: 'connection.auth-retries: -1'
  prefs: []
  type: TYPE_NORMAL
- en: 'connection.timestamp: 1554833695'
  prefs: []
  type: TYPE_NORMAL
- en: 'connection.read-only: no'
  prefs: []
  type: TYPE_NORMAL
- en: 'connection.permissions: --'
  prefs: []
  type: TYPE_NORMAL
- en: 'connection.zone: --'
  prefs: []
  type: TYPE_NORMAL
- en: 'connection.master: --'
  prefs: []
  type: TYPE_NORMAL
- en: 'connection.slave-type: --'
  prefs: []
  type: TYPE_NORMAL
- en: 'connection.autoconnect-slaves: -1 (default)'
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: 'All of these properties can be modified using nmcli with the modify option
    using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con mod <connection name> connection.<property name> <setting>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 12.4 Working with Connection Profiles
  prefs: []
  type: TYPE_NORMAL
- en: 'So far we have explored the use of connections without explaining how a connection
    is configured. The configuration of a connection is referred to as a connection
    profile and is stored in a file located in the /etc/sysconfig/network-scripts
    directory, the contents of which might read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: ls /etc/sysconfig/network-scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ifcfg-zoneone ifcfg-eno1 ifdown-ppp
  prefs: []
  type: TYPE_NORMAL
- en: ifcfg-zonethree ifcfg-zonetwo ifup-ppp keys-zonethree
  prefs: []
  type: TYPE_NORMAL
- en: keys-zoneone keys-zonetwo
  prefs: []
  type: TYPE_NORMAL
- en: Each of the files prefixed with ifcg- is an interface configuration file containing
    the connection profile for the corresponding connection while the key- files contain
    the passwords for the Wi-Fi connections.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider, for example, the contents of the ifcfg-eno1 file:'
  prefs: []
  type: TYPE_NORMAL
- en: TYPE=Ethernet
  prefs: []
  type: TYPE_NORMAL
- en: PROXY_METHOD=none
  prefs: []
  type: TYPE_NORMAL
- en: BROWSER_ONLY=no
  prefs: []
  type: TYPE_NORMAL
- en: DEFROUTE=yes
  prefs: []
  type: TYPE_NORMAL
- en: IPV4_FAILURE_FATAL=no
  prefs: []
  type: TYPE_NORMAL
- en: NAME=eno1
  prefs: []
  type: TYPE_NORMAL
- en: UUID=99d40009-6bb1-4182-baad-a103941c90ff
  prefs: []
  type: TYPE_NORMAL
- en: DEVICE=eno1
  prefs: []
  type: TYPE_NORMAL
- en: ONBOOT=yes
  prefs: []
  type: TYPE_NORMAL
- en: BOOTPROTO=dhcp
  prefs: []
  type: TYPE_NORMAL
- en: IPV6INIT=yes
  prefs: []
  type: TYPE_NORMAL
- en: IPV6_AUTOCONF=yes
  prefs: []
  type: TYPE_NORMAL
- en: IPV6_DEFROUTE=yes
  prefs: []
  type: TYPE_NORMAL
- en: IPV6_FAILURE_FATAL=no
  prefs: []
  type: TYPE_NORMAL
- en: IPV6_ADDR_GEN_MODE=stable-privacy
  prefs: []
  type: TYPE_NORMAL
- en: 'The file contains basic information about the connection, including the type
    (Ethernet) of the device to which it is currently assigned (eno1) and the fact
    that the connection is to be automatically activated on system boot with an IP
    address obtained using DHCP. Changes to the connection profile can be implemented
    by modifying this file and instructing nmcli to reload the connection configuration
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con reload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'New connection profiles can also be created manually or generated automatically
    by nmcli. As an example, assume that a new network device has been installed on
    the system. When this happens, the NetworkManager service will detect the new
    hardware and create a device for it. In the example below, the new device has
    been assigned the name eno2:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli dev status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DEVICE TYPE STATE CONNECTION
  prefs: []
  type: TYPE_NORMAL
- en: en01 ethernet connected eno1
  prefs: []
  type: TYPE_NORMAL
- en: eno2 ethernet connected Wired connection 1
  prefs: []
  type: TYPE_NORMAL
- en: 'NetworkManager automatically detected the device, activated it and assigned
    it to a connection named “Wired connection 1”. This is a default connection over
    which we have no configuration control because there is no interface configuration
    file for it in /etc/sysconfig/network-scripts. The next steps are to delete the
    “Wired connection 1” connection and use nmcli to create a new connection and assign
    it to the device. The command to delete a connection is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con delete "Wired connection 1"
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, nmcli can be used to create a new connection profile configured either
    with a static IP address, or a dynamic IP address obtained from a DHCP server.
    To create a dynamic connection profile named dyn_ip, the following command would
    be used:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli connection add type ethernet con-name dyn_ip ifname eno2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Connection 'dyn_ip' (160d9e10-bbc8-439a-9c47-a2ec52990472) successfully added.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new connection profile without locking it to a specific device,
    simply omit the ifname option in the command:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli connection add type ethernet con-name dyn_ip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the connection has been created, a file named ifcg-dyn_ip will have been
    added to the /etc/sysconfig/network-scripts directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, to create a connection named static_ip assigned a static IP
    address (in this case 192.168.1.200) the following command would be used:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con add type ethernet con-name static_ip ifname eno0 ip4 192.168.1.200/24
    gw4 192.168.1.1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Connection ‘static_ip’ (3fccafb3-e761-4271-b310-ad0f28ee8606) successfully added.
  prefs: []
  type: TYPE_NORMAL
- en: 'The corresponding ifcg-static_ip file will read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: TYPE=Ethernet
  prefs: []
  type: TYPE_NORMAL
- en: PROXY_METHOD=none
  prefs: []
  type: TYPE_NORMAL
- en: BROWSER_ONLY=no
  prefs: []
  type: TYPE_NORMAL
- en: BOOTPROTO=none
  prefs: []
  type: TYPE_NORMAL
- en: IPADDR=192.168.1.200
  prefs: []
  type: TYPE_NORMAL
- en: PREFIX=24
  prefs: []
  type: TYPE_NORMAL
- en: GATEWAY=192.168.1.1
  prefs: []
  type: TYPE_NORMAL
- en: DEFROUTE=yes
  prefs: []
  type: TYPE_NORMAL
- en: IPV4_FAILURE_FATAL=no
  prefs: []
  type: TYPE_NORMAL
- en: IPV6INIT=yes
  prefs: []
  type: TYPE_NORMAL
- en: IPV6_AUTOCONF=yes
  prefs: []
  type: TYPE_NORMAL
- en: IPV6_DEFROUTE=yes
  prefs: []
  type: TYPE_NORMAL
- en: IPV6_FAILURE_FATAL=no
  prefs: []
  type: TYPE_NORMAL
- en: IPV6_ADDR_GEN_MODE=stable-privacy
  prefs: []
  type: TYPE_NORMAL
- en: NAME=static_ip
  prefs: []
  type: TYPE_NORMAL
- en: UUID=3fccafb3-e761-4271-b310-ad0f28ee8606
  prefs: []
  type: TYPE_NORMAL
- en: DEVICE=eno2
  prefs: []
  type: TYPE_NORMAL
- en: ONBOOT=yes
  prefs: []
  type: TYPE_NORMAL
- en: 'The command to add a new connection may be altered slightly to also assign
    both IPv4 and IPv6 static addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con add type ethernet con-name static_ip ifname eno0 ip4 192.168.1.200/24
    gw4 192.168.1.1 gw4 192.168.1.1 ip6 cabf::4532 gw6 2010:dfa::1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 12.5 Interactive Editing
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to using nmcli with command-line options, the tool also includes
    an interactive mode that can be used to create and modify connection profiles.
    The following transcript, for example, shows interactive mode being used to create
    a new Ethernet connection named demo_con:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con edit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Valid connection types: 6lowpan, 802-11-olpc-mesh (olpc-mesh), 802-11-wireless
    (wifi), 802-3-ethernet (ethernet), adsl, bluetooth, bond, bridge, cdma, dummy,
    generic, gsm, infiniband, ip-tunnel, macsec, macvlan, ovs-bridge, ovs-interface,
    ovs-port, pppoe, team, tun, vlan, vpn, vxlan, wimax, wpan, bond-slave, bridge-slave,
    team-slave'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter connection type: ethernet'
  prefs: []
  type: TYPE_NORMAL
- en: ===| nmcli interactive connection editor |===
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new ‘802-3-ethernet’ connection
  prefs: []
  type: TYPE_NORMAL
- en: Type ‘help’ or ‘?’ for available commands.
  prefs: []
  type: TYPE_NORMAL
- en: Type ‘print’ to show all the connection properties.
  prefs: []
  type: TYPE_NORMAL
- en: Type ‘describe [<setting>.<prop>]’ for detailed property description.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may edit the following settings: connection, 802-3-ethernet (ethernet),
    802-1x, dcb, sriov, ethtool, match, ipv4, ipv6, tc, proxy'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli> set connection.id demo_con
  prefs: []
  type: TYPE_NORMAL
- en: nmcli> set connection.interface eno1
  prefs: []
  type: TYPE_NORMAL
- en: nmcli> set connection.autoconnect yes
  prefs: []
  type: TYPE_NORMAL
- en: nmcli> set ipv4.method auto
  prefs: []
  type: TYPE_NORMAL
- en: nmcli> set 802-3-ethernet.mtu auto
  prefs: []
  type: TYPE_NORMAL
- en: nmcli> set ipv6.method auto
  prefs: []
  type: TYPE_NORMAL
- en: nmcli> save
  prefs: []
  type: TYPE_NORMAL
- en: Saving the connection with ‘autoconnect=yes’. That might result in an immediate
    activation of the connection.
  prefs: []
  type: TYPE_NORMAL
- en: Do you still want to save? (yes/no) [yes] yes
  prefs: []
  type: TYPE_NORMAL
- en: Connection ‘demo_con’ (cb837408-6c6f-4572-9548-4932f88b9275) successfully saved.
  prefs: []
  type: TYPE_NORMAL
- en: nmcli> quit
  prefs: []
  type: TYPE_NORMAL
- en: 'The following transcript, on the other hand, modifies the previously created
    static_ip connection profile to use a different static IP address to the one originally
    specified:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con edit static_ip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ===| nmcli interactive connection editor |===
  prefs: []
  type: TYPE_NORMAL
- en: 'Editing existing ''802-3-ethernet'' connection: ''static_ip'''
  prefs: []
  type: TYPE_NORMAL
- en: Type 'help' or '?' for available commands.
  prefs: []
  type: TYPE_NORMAL
- en: Type 'print' to show all the connection properties.
  prefs: []
  type: TYPE_NORMAL
- en: Type 'describe [<setting>.<prop>]' for detailed property description.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may edit the following settings: connection, 802-3-ethernet (ethernet),
    802-1x, dcb, sriov, ethtool, match, ipv4, ipv6, tc, proxy'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli> print ipv4.addresses
  prefs: []
  type: TYPE_NORMAL
- en: 'ipv4.addresses: 192.168.1.200/24'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli> set ipv4.addresses 192.168.1.201/24
  prefs: []
  type: TYPE_NORMAL
- en: nmcli> save
  prefs: []
  type: TYPE_NORMAL
- en: Connection 'static_ip' (3fccafb3-e761-4271-b310-ad0f28ee8606) successfully updated.
  prefs: []
  type: TYPE_NORMAL
- en: nmcli> quit
  prefs: []
  type: TYPE_NORMAL
- en: 'After modifying an existing connection, remember to instruct NetworkManager
    to reload the configuration profiles:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con reload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When using interactive mode, it is useful to know that there is an extensive
    built-in help system available to learn how to use the tool. The help topics can
    be accessed by typing help or ? at the nmcli > prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli> ?
  prefs: []
  type: TYPE_NORMAL
- en: '------------------------------------------------------------------------------'
  prefs: []
  type: TYPE_NORMAL
- en: '---[ Main menu ]---'
  prefs: []
  type: TYPE_NORMAL
- en: 'goto [<setting> | <prop>] :: go to a setting or property'
  prefs: []
  type: TYPE_NORMAL
- en: 'remove <setting>[.<prop>] | <prop> :: remove setting or reset property value'
  prefs: []
  type: TYPE_NORMAL
- en: 'set [<setting>.<prop> <value>] :: set property value'
  prefs: []
  type: TYPE_NORMAL
- en: 'describe [<setting>.<prop>] :: describe property'
  prefs: []
  type: TYPE_NORMAL
- en: 'print [all | <setting>[.<prop>]] :: print the connection'
  prefs: []
  type: TYPE_NORMAL
- en: 'verify [all | fix] :: verify the connection'
  prefs: []
  type: TYPE_NORMAL
- en: 'save [persistent|temporary] :: save the connection'
  prefs: []
  type: TYPE_NORMAL
- en: 'activate [<ifname>] [/<ap>|<nsp>] :: activate the connection'
  prefs: []
  type: TYPE_NORMAL
- en: 'back :: go one level up (back)'
  prefs: []
  type: TYPE_NORMAL
- en: 'help/? [<command>] :: print this help'
  prefs: []
  type: TYPE_NORMAL
- en: 'nmcli <conf-option> <value> :: nmcli configuration'
  prefs: []
  type: TYPE_NORMAL
- en: 'quit :: exit nmcli'
  prefs: []
  type: TYPE_NORMAL
- en: '------------------------------------------------------------------------------'
  prefs: []
  type: TYPE_NORMAL
- en: 12.6 Configuring NetworkManager Permissions
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to making it easier to manage networks on CentOS 8, NetworkManager
    also allows permissions to be specified for connections. The following command,
    for example, restricts a connection profile to root and user accounts named john
    and caitlyn:'
  prefs: []
  type: TYPE_NORMAL
- en: nmcli con mod static_ip connection.permissions user:root,john,caitlyn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the connection profiles have been reloaded by NetworkManager, the static_ip
    connection will only be active and accessible to other users when at least one
    of the designated users is logged in to an active session on the system. As soon
    as the last of these users logs out, the connection will go down and remain inactive
    until one of the users signs back in.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, only users with permission are able to make changes to the connection
    status or configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 12.7 Summary
  prefs: []
  type: TYPE_NORMAL
- en: Network management on CentOS 8 is handled by the NetworkManager service. NetworkManager
    views a network as consisting of network interface devices and connections. A
    network device can be a physical Ethernet or Wi-Fi device or a virtual device
    used by a virtual machine guest. Connections represent the network to which the
    devices connect and are configured by connection profiles. A configuration profile
    will, among other settings, define whether the connection has a static or dynamic
    IP address, the IP address of any gateway used by the network and whether or not
    the connection should be established automatically each time the system starts
    up.
  prefs: []
  type: TYPE_NORMAL
- en: NetworkManager can be administered using a number of different tools including
    the nmcli and nmtui command-line tools, the nm-connection-editor graphical tool
    and the network settings section of the Cockpit web interface. In general, the
    nmcli command-line tool provides the most features and flexibility.
  prefs: []
  type: TYPE_NORMAL
