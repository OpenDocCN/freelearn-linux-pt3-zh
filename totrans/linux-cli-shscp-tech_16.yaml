- en: '*Chapter 16*: Shell Script Examples for Server Management, Network Configuration,
    and Backups'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've covered everything that we wanted to cover in terms of various
    concepts and structures in Bash shell scripting, let's dig into some examples.
    This will allow us to put these last few chapters to good use as shell scripts
    are the most commonly used tools in system engineers' daily jobs. Due to this,
    we are going to go through some shell scripts to emphasize the point of scripting
    – to make our lives a lot easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a file and folder inventory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking if you're running as root
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying server stats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding files by name, ownership, or content type and copying them to a specified
    directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsing date and time data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the most common firewall settings interactively (`firewalld` and
    `ufw`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring network settings interactively (`nmcli`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backing up the current directory with shell script arguments and variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a current backup based on the user input for the backup source and
    destination
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's continue using our Ubuntu machine, specifically the `cli1` machine. If
    you've not started it up yet, please start it now so that we can go through our
    examples. We will use the `cli2` CentOS machine for a few recipes as well, so
    make sure that you start that one when the time comes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a file and folder inventory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with something basic – a script that reports in terms of folder
    and file inventory. As simple as this is, this type of script can use a variety
    of different tools, including commands, built-in CLI applications, loops – there
    are a lot of choices to be made. We're going to do this in the simplest way possible
    – by taking advantage of our knowledge of commands and CLI applications. We're
    going to create a couple of different versions of this script as it can be used
    in a variety of different ways – for example, as input into future shell scripts
    or as plain text reporting tools.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start by creating a script that''s just going to tell us the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The number of folders in the current folder and their sizes, sorted by size
    in descending order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of files in the current folder and their size, sorted by size in
    descending order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s the first version of our script – we saved it as a file called `sscript1.sh`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, we only used basic commands here, without going into a lot of
    looping, actual programming, and so on. Let's treat this as a reporting script
    and go from there.
  prefs: []
  type: TYPE_NORMAL
- en: 'On our `cli1` machine, this was the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.1 – First version of our folder and file inventory script'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.1_B16269.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.1 – First version of our folder and file inventory script
  prefs: []
  type: TYPE_NORMAL
- en: This is working and can be used for reports – yep, that's all good. But what
    happens if we want some more functionality? What if we were to use the first version
    of this script to generate a .`txt` file that contains lists of files in the current
    directory, modify it a little bit, and then use this file for something else,
    such as to copy those files to a pre-configured location?
  prefs: []
  type: TYPE_NORMAL
- en: 'We would need to make some adjustments, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The next script we'll look at is simple but very, very useful – it's about checking
    if we're running the script as root. The reasoning is simple – there will be scripts
    that we don't want to run as root for fear of messing something up, in which case
    we'd use some accessible resources. Let's see how that would work.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you need more information about `sort`, `find`, `wc`, `cut` or `sed`, we
    suggest that you visit these links:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sort` command man page: [https://man7.org/linux/man-pages/man1/sort.1.html](https://man7.org/linux/man-pages/man1/sort.1.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`find` command man page: [https://man7.org/linux/man-pages/man1/find.1.html](https://man7.org/linux/man-pages/man1/find.1.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wc` command man page: [https://man7.org/linux/man-pages/man1/wc.1.html](https://man7.org/linux/man-pages/man1/wc.1.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cut` command man page: [https://man7.org/linux/man-pages/man1/cut.1.html](https://man7.org/linux/man-pages/man1/cut.1.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sed` command man page: [https://man7.org/linux/man-pages/man1/sed.1.html](https://man7.org/linux/man-pages/man1/sed.1.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking if you're running as root
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are different ways of checking if we're running a script as root. We can
    use environment variables, just as we can use the `whoami` or `id` commands to
    check if it equals root/number `0` or not.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll continue using the `cli1` machine for this recipe, so make sure that it's
    powered on.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create a short snippet of Bash shell script code that''s going to help
    us find out whether we''re running a script as root or not. It''s a rather simple
    thing to do in Linux, considering that we have easy access to an environment variable
    called `EUID`, and reading its value is enough to determine whether we''re running
    as root (EUID=0) or not (EUID value > 1):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The next example that we're going to cover is about displaying server stats.
    We're going to use the `sar` command to do so. Let's go!
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you need more information about internal variables, we suggest that you go
    to [https://tldp.org/LDP/abs/html/internalvariables.html](https://tldp.org/LDP/abs/html/internalvariables.html).
  prefs: []
  type: TYPE_NORMAL
- en: Displaying server stats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that we have to write a shell script that''s going to display the
    following pieces of information:'
  prefs: []
  type: TYPE_NORMAL
- en: Current hostname
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Current date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Current kernel version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Current CPU usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Current memory usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Current swap space usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Current disk I/O
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Current network bandwidth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is more of an exercise in filtering data and using commands, but there
    are some interesting concepts in terms of how to format data to look *nice* and
    *readable*. This is something we consider to be very important.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to leave the `cli1` machine running. Also, for this script to work,
    we need to deploy the `sysstat` package, and then enable the necessary service.
    We can do this by using the following command for Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use the following command for CentOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we need to start the `sysstat` service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can start working on our script.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to use the `sar` command to get a lot of information about our
    Linux machine. We are also going to filter out some of the unnecessary details.
    Our script should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We used `echo ""` multiple times here so that our output looks clean and readable.
    The output should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.2 – Displaying the server stats from our script'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.2_B16269.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.2 – Displaying the server stats from our script
  prefs: []
  type: TYPE_NORMAL
- en: The next recipe is about finding content – by name, ownership, or extension
    – so that we can copy the content we find to a specific location. Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you need to learn more about the `sar` command, take a look at the `sar`
    command's man page at [https://man7.org/linux/man-pages/man1/sar.1.html](https://man7.org/linux/man-pages/man1/sar.1.html).
  prefs: []
  type: TYPE_NORMAL
- en: Finding files by name, ownership, or content type and copying them to a specified
    directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing files can be a bit of a burden. Usually, we have thousands of them,
    and if it's an enterprise-level company that we're discussing, there might be
    millions. What happens if we need to find files that follow specific criteria?
  prefs: []
  type: TYPE_NORMAL
- en: We'll start with something simpler – finding by name. Then, we'll move on to
    ownership-based searches, and then, the most involved – content type-based searches.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you start this recipe, you need to make sure that our `cli1` virtual
    machine is up and running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a perfect script to do a bit more interaction, so case loops are in
    store for us. We're making a conscious effort to use case a lot, with a lot of
    status/debugging code that can guide us through script usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to slice this script into three parts as it''s going to do three different
    things. Here''s what the script will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that when we''re asked about the extension, we have to type something
    like `*.txt` for this script to work. Here''s what the script execution looks
    like with that extension in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.3 – Script execution with a file extension as the criteria'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.3_B16269.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.3 – Script execution with a file extension as the criteria
  prefs: []
  type: TYPE_NORMAL
- en: In the next recipe, we'll learn how to work with date and time-based data, a
    concept that's often used in shell scripting for indexing purposes. While easy
    to use and understand, we need to learn how to use this concept programmatically,
    via variables. So, let's do that next!
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you need more information about the `sar` command, we recommend that you
    check out the following link to learn more: `https://www.howtogeek.com/662422/how-to-use-linuxs-screen-command/`.'
  prefs: []
  type: TYPE_NORMAL
- en: Parsing date and time data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with time-based data is often less than fun, especially when you're
    working with a lot of time-based content. But for our use cases, we often use
    date/time information for indexing; that is, to name our backup files and similar
    purposes. So, learning how to get information from the `date` command and putting
    that information into variables so that our code can be as modular as possible
    is very important. Let's create a shell script that we are going to be able to
    use in future scripts as a snippet of code for a lot of our shell scripts – at
    least bits and pieces of it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We don't need any special utilities to be installed, just our Linux machine
    to be alive and ready for action.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to go back to the basics and use the `date` command to extract
    all of the date and time pieces that we''ll ever need:'
  prefs: []
  type: TYPE_NORMAL
- en: Information about the current time in terms of hours, minutes, and seconds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information about today's date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information about what day it is today
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s type the following in our text editor and execute our script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s an example of the sample output. We called this script `sscript2.sh`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.4 – Sample output from our date and time script'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.4_B16269.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.4 – Sample output from our date and time script
  prefs: []
  type: TYPE_NORMAL
- en: This can be very useful for backup scripts – for example, when we're indexing
    backup files (`.tar.gz` or something else) by dates. This is a concept that we're
    going to use later in this chapter. For now, let's learn how to configure firewall
    settings via shell scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the most common firewall settings interactively
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firewall configuration is just one of those things – we often need to do it,
    but we don't necessarily know all of the commands off the top of our heads. Let's
    do this via shell scripts, for both CentOS (`firewalld`) and Ubuntu (`ufw`).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you start this recipe, you need to make sure that you have `firewalld`
    on your CentOS machine and `ufw` on your Ubuntu machine up. So, first, you need
    to use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the following command for CentOS and Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If they''re disabled, we need to turn them on, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'On CentOS and Ubuntu, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now, we're ready to get started. Of course, you need to be logged in as an administrator
    to be able to change your firewall configuration, so make sure that you're either
    logged in as root (or a user with similar capabilities) or use the sudo configuration
    to change your firewall configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, with `firewalld`, a lot of people have trouble remembering the
    service names that it uses. That''s not a problem – we just need to use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: For `ufw`, we just need to go and look at `/etc/service`, since all of the service
    names are listed there, and `ufw` uses them for configuration purposes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s make a CentOS-based script for `firewalld`. We''ll include eight
    standard operations – manipulating service configuration, TCP and UDP ports and
    rich rules, both adding and removing them, as well as the capability to list current
    configuration. Here''s what the script should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This is a lot of code, but it makes it so much more readable (since we're using
    a case loop). We could've done this in a couple of different ways, but this is
    the easiest code to debug, and, most importantly, it works well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at Ubuntu''s `ufw` script, which is going to be very similar
    – we just need to get the `ufw` commands correct. We''re also going to look at
    two different ways of deleting rules (by an index number and by rule), just so
    that we know how to get on with both:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: There we go – that's another long script done. This should help us when we're
    using Ubuntu a lot. Next, we will be going in a different direction – using `nmcli`
    in interactive, scripted mode to configure network settings on CentOS.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For additional information about the `firewall-cmd` and `ufw` command-line
    options, we suggest that you visit the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '`firewall-cmd` man page: `https://firewalld.org/documentation/man-pages/firewall-cmd.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Configuring complex firewall rules with the *rich language* syntax: `https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/configuring_complex_firewall_rules_with_the_rich-language_syntax`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ufw cheatsheet: `https://blog.rtsp.us/ufw-uncomplicated-firewall-cheat-sheet-a9fe61933330`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring network settings interactively
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, we don't have access to GUIs and GUI-based configuration tools. If we
    need to configure network settings, this can lead to a bunch of problems. Either
    we need to learn the syntax of `/etc/sysconfig/network-script` files (not user-friendly),
    or we need to use the tools that are at our disposal to configure network settings
    from the CLI. Let's learn how to use `nmcli` for that purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you start this recipe, you need to make sure that you are using our `cli2`
    CentOS machine as Ubuntu doesn't use `nmcli` by default. Once you've done that,
    you're all set!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Configuring network settings via `nmcli` isn''t difficult, but at the same
    time, it''s far from super user-friendly. There''s quite a bit of syntax involved
    and sometimes, that can get a bit overwhelming. So, let''s create a script that''s
    going to do three things for us:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure network settings via `nmcli` so that we use static IP network configuration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure network settings via `nmcli` so that we use DHCP network configuration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check/output the current network settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Our script should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the output will look if we use this script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.5 – Configuring a network interface from a shell script to make
    it a static IP configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.5_B16269.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.5 – Configuring a network interface from a shell script to make it
    a static IP configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see, all of the network settings get applied. Also, for the second
    use case – which is to revert to using DHCP from an existing configuration – the
    output will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.6 – Reverting to our DHCP configuration with the BOOTPROTO parameter
    set up correctly'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.6_B16269.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.6 – Reverting to our DHCP configuration with the BOOTPROTO parameter
    set up correctly
  prefs: []
  type: TYPE_NORMAL
- en: This file also looks good, so we're good to go with this script as well.
  prefs: []
  type: TYPE_NORMAL
- en: The next set of scripts we'll be looking at is about backups – one will use
    shell script arguments and variables, while the other will use one very handy
    `tar` characteristic. Let's work on some backup scripts!
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Screen` requires a bit of trial and error and getting used to. We recommend
    that you check out the following links to learn more:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nmcli` man page: `https://linux.die.net/man/1/nmcli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nmcli` examples: `https://people.freedesktop.org/~lkundrak/nm-docs/nmcli-examples.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backing up the current directory with shell script arguments and variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most common reasons why system engineers use Bash shell scripting
    is for backup purposes. There are various tools available, but for shell scripting
    purposes, we are going to make a couple of `tar`-based shell scripts, work with
    arguments and variables, and learn how to make our jobs easier by using shell
    scripting for backup purposes. Let's take a look!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you start this recipe, you need to make sure that you have `tar` installed
    on your Linux machine. For this, you need to use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If you''re using a CentOS-based machine, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now, you're ready to get started.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our premise for this first backup script, which is based on `tar`, is simple:'
  prefs: []
  type: TYPE_NORMAL
- en: We want to be able to create a backup while using an argument to set the backup's
    filename.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We want to be able to easily change our shell script so that it can back up
    whatever number of directories we want (this is easy to do by listing the source
    directories in the `backup_source` variable).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s see how this would work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The process should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.7 – Simple backup script with argument'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.7_B16269.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.7 – Simple backup script with argument
  prefs: []
  type: TYPE_NORMAL
- en: The `backup` word that we typed as part of the script is our `$1` argument in
    the script – the first argument that we start the script with. As we can see,
    the script did its job properly.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you need any more information about the `tar` command, we suggest that you
    look at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '`tar` command man page: [https://man7.org/linux/man-pages/man1/tar.1.html](https://man7.org/linux/man-pages/man1/tar.1.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '18 useful `tar` examples: [https://www.tecmint.com/18-tar-command-examples-in-linux/](https://www.tecmint.com/18-tar-command-examples-in-linux/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a current backup based on the user input for the backup source and
    destination
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After making backup scripts via `tar`, we need to make a completely interactive
    script that asks for all of the details from us to be inputted with the keyboard.
    Let's learn how to make this happen!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you followed the previous recipe, then you won't need anything new – the
    same requirements apply.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our premise has changed somewhat this time around. We want a fully functional
    backup script, but one that doesn''t use any static variables (like the previous
    one). Also, we want to be able to call this script at will, which is why we''re
    using multiple questions to set up the necessary variables. Here''s what the script
    should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This is simple, yet effective. Note that we used one very, very cool capability
    of the `tar` command, which is to use a list of directories for backup purposes,
    but specifically, as the list that's at *the end* of the `tar` command's syntax,
    which makes things a bit easier.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, things are going to get progressively more complicated.
    Make sure that you check out the second part of our shell scripting examples there.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you need any more information about the `tar` command, we suggest that you
    visit the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '`tar` command man page: [https://man7.org/linux/man-pages/man1/tar.1.html](https://man7.org/linux/man-pages/man1/tar.1.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '18 useful `tar` examples: [https://www.tecmint.com/18-tar-command-examples-in-linux/](https://www.tecmint.com/18-tar-command-examples-in-linux/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
