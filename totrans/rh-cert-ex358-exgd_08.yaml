- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Web Servers and Web Traffic – Learning How to Create and Control Traffic
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web 服务器和 Web 流量 – 学习如何创建和控制流量
- en: In this chapter, we are going to overview what a web server is and install it.
    We will dive into securing the web server in order to ensure that the data is
    safe when you access it as a customer. We will also talk about how to automate
    this process using Ansible Automation. Without a good web server setup, you could
    possibly stunt your company’s growth. The ability to provide access to your products
    is vital, and being able to safeguard your customer’s information is equally as
    important. Let’s go ahead and step into the world of web servers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将概述什么是 web 服务器并安装它。我们将深入讨论如何保护 web 服务器，以确保在客户访问时数据的安全。我们还将讨论如何使用 Ansible
    自动化来实现这一过程。如果没有良好的 web 服务器设置，可能会限制公司增长。提供访问您产品的能力至关重要，保护客户信息同样重要。让我们一起进入 web 服务器的世界吧。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将讨论以下主要内容：
- en: Getting started with web servers and traffic control
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始了解 web 服务器和流量控制
- en: Learning to set up web servers manually and control traffic
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习手动设置 web 服务器并控制流量
- en: Learning to use Ansible Automation to automate web servers and control traffic
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习使用 Ansible 自动化来自动化 web 服务器和流量控制
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The technical requirements in this chapter are covered in the following sections.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的技术要求在以下章节中进行介绍。
- en: Setting up GitHub access
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 GitHub 访问
- en: 'Please refer to the instructions found in [*Chapter 1*](B18607_01.xhtml#_idTextAnchor016),
    *Block Storage – Learning How to Provision Block Storage on Red Hat Enterprise
    Linux*, to gain access to GitHub, and you will find the Ansible automation playbooks
    for this chapter at the following link: [https://github.com/PacktPublishing/Red-Hat-Certified-Specialist-in-Services-Management-and-Automation-EX358-Exam-Guide/tree/main/Chapter08](https://github.com/PacktPublishing/Red-Hat-Certified-Specialist-in-Services-Management-and-Automation-EX358-Exam-Guide/tree/main/Chapter08).
    Remember these are suggested playbooks and are not the only way you can write
    them to make the playbooks work for you.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考[*第1章*](B18607_01.xhtml#_idTextAnchor016)中的说明，*块存储 – 学习如何在 Red Hat Enterprise
    Linux 上配置块存储*，以获得 GitHub 访问权限，您还可以通过以下链接找到本章的 Ansible 自动化剧本：[https://github.com/PacktPublishing/Red-Hat-Certified-Specialist-in-Services-Management-and-Automation-EX358-Exam-Guide/tree/main/Chapter08](https://github.com/PacktPublishing/Red-Hat-Certified-Specialist-in-Services-Management-and-Automation-EX358-Exam-Guide/tree/main/Chapter08)。请记住，这些是建议的剧本，并不是唯一的写法，您可以根据需要编写剧本使其适合您。
- en: You can always change them using raw, shell, or cmd to achieve the same results,
    but we are demonstrating the best way to accomplish our goals. Also, keep in mind
    that we are not using the FCQN needed in the future version of Ansible, as that
    will not be supported in the exam since it is testing against Ansible 2.9.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你始终可以使用原始的 shell 或 cmd 来更改它们，达到相同的结果，但我们展示的是实现目标的最佳方式。此外，请记住，我们没有使用未来版本 Ansible
    中所需的 FCQN，因为该版本在考试中不会被支持，因为它是基于 Ansible 2.9 测试的。
- en: Getting started with web servers and traffic control
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始了解 web 服务器和流量控制
- en: The ability to set up and run your own web server is important to most companies.
    In this digital age, you must be able to keep up with the demands of the fast-paced
    world. Without a strong website to offer your customers access to your product
    or services you will greatly hinder your sales potential. The ability to grow
    your business, especially internationally, is the dream of most people that start
    a new business. Setting up a web server on RHEL 8 is pretty straightforward using
    Apache httpd or NGINX but can become complex when implementing rules to protect
    yourself.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 设置和运行自己 web 服务器的能力对大多数公司来说都很重要。在这个数字时代，你必须跟上快速发展的世界需求。如果没有一个强大的网站向客户提供你的产品或服务，你将大大阻碍销售潜力。尤其是要在国际市场上发展业务，这是大多数创业者的梦想。在
    RHEL 8 上设置 web 服务器非常简单，使用 Apache httpd 或 NGINX 可以轻松完成，但在实施规则保护自己的时候可能会变得复杂。
- en: The ability to keep these same resources safe is a must for any business. The
    need to be able to block malicious traffic or spoofing is vital to keep your company
    in good standing with your customers. Being able to respond to threats from **distributed
    denial-of-service** (**DDoS**) attacks, for instance, is one of the things you
    need to be prepared for as a web server admin. We will go further, in future sections,
    into keeping your web server safe from unwanted access from third parties trying
    to gain your information for nefarious purposes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 保持这些资源的安全对于任何企业来说都是必须的。能够阻止恶意流量或欺骗攻击对于确保公司与客户之间的良好关系至关重要。例如，作为 web 服务器管理员，您需要做好应对**分布式拒绝服务攻击**（**DDoS**）等威胁的准备。在未来的章节中，我们将深入探讨如何防止来自第三方的不必要访问，这些第三方可能试图为恶意目的获取您的信息。
- en: We will showcase how to install a web server using Apache httpd and NGINX and
    how to configure it so that the system is secure. We will showcase how to house
    more than one web server endpoint on a physical server. Next, we will demonstrate
    how to access the web server once you have it up and running. We will do this
    using config files that will allow us to customize what is shown from the web
    server. Finally, we will automate all of this using Ansible Automation to take
    the headache out of deployments that need to be done over and over again.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将展示如何使用 Apache httpd 和 NGINX 安装 web 服务器，并配置它以确保系统的安全性。我们还将展示如何在一台物理服务器上托管多个
    web 服务器端点。接下来，我们将演示如何在服务器启动并运行后访问它。我们将使用配置文件来定制从 web 服务器显示的内容。最后，我们将使用 Ansible
    自动化来自动执行所有这些操作，从而消除需要反复进行的部署工作带来的困扰。
- en: Learning to set up web servers manually and control traffic
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习手动设置 web 服务器并控制流量
- en: 'We are going to start with Apache httpd. We will commence by installing the
    service and configuring the files. We can see in the following screenshot the
    installation of Apache httpd:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从 Apache httpd 开始。我们将首先安装服务并配置文件。在以下截图中，我们可以看到 Apache httpd 的安装过程：
- en: '![Figure 8.1 – Installing Apache httpd web service](img/Figure_8.01_B18607.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – 安装 Apache httpd web 服务](img/Figure_8.01_B18607.jpg)'
- en: Figure 8.1 – Installing Apache httpd web service
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – 安装 Apache httpd web 服务
- en: 'We are going to look at the default `httpd.conf` file in order to showcase
    the out-of-the-box setup for Apache httpd. We can see in the following screenshot
    the layout of the `/``etc/httpd/conf/httpd.conf` file:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查看默认的 `httpd.conf` 文件，以展示 Apache httpd 的开箱即用设置。我们可以在以下截图中看到 `/etc/httpd/conf/httpd.conf`
    文件的布局：
- en: '![Figure 8.2 – The /etc/httpd/conf/httpd.conf truncated file](img/Figure_8.02_B18607.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2 – 截断的 /etc/httpd/conf/httpd.conf 文件](img/Figure_8.02_B18607.jpg)'
- en: Figure 8.2 – The /etc/httpd/conf/httpd.conf truncated file
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – 截断的 /etc/httpd/conf/httpd.conf 文件
- en: As seen in the previous screenshot, information on how to set up a web server
    can be found in the Apache httpd `/etc/httpd/conf/httpd.conf` file is also a good
    place to look for help and reminders, but do not rely on it alone.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面截图所示，关于如何设置 web 服务器的信息可以在 Apache httpd 的 `/etc/httpd/conf/httpd.conf` 文件中找到，该文件也是查找帮助和提醒的好地方，但不要仅仅依赖它。
- en: 'Next, will use what we can learn from the man pages and the `httpd.conf` file
    to create a `.conf` file within the `/etc/httpd/conf.d/` directory. This will
    allow us to create a web server to meet our needs. We are going to set up virtual
    hosts within Apache httpd and use the `/etc/httpd/conf.d/` directory to store
    our websites. Before we do that, we have to ensure that the web server is set
    up within the default `httpd.conf` file, where we need to check the following
    code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将利用从 man 页面和 `httpd.conf` 文件中学到的知识，在 `/etc/httpd/conf.d/` 目录中创建一个 `.conf`
    文件。这将允许我们创建一个满足我们需求的 web 服务器。我们将设置 Apache httpd 中的虚拟主机，并使用 `/etc/httpd/conf.d/`
    目录来存储我们的网站。在此之前，我们必须确保在默认的 `httpd.conf` 文件中设置了 web 服务器，我们需要检查以下代码：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding code states that `ServerRoot` is `/etc/httpd/`, the web server
    `Listen` port is `80`, and `User` for the web server is set to `apache`. These
    ensure that the ownership of the files is correct when serving the web server
    to the public and tell the server what port to listen on, which in this case would
    be port `80` or HTTP , which most of us are used to, or HTTPS which is more secure.
    For now, we will stick to this basic configuration.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码指出 `ServerRoot` 为 `/etc/httpd/`，web 服务器的 `Listen` 端口为 `80`，并且 web 服务器的
    `User` 设置为 `apache`。这些设置确保了当将 web 服务器提供给公众时，文件的所有权是正确的，并告诉服务器监听哪个端口，在此情况下为 `80`
    端口，或者我们通常使用的 HTTP，或更安全的 HTTPS。目前，我们将保持这个基本配置。
- en: 'Next, we will build the configuration for the virtual servers using the `website.conf`
    file, which we will save to `/etc/httpd/conf.d/website.conf`. We can see the contents
    of the `website.conf` file in the following screenshot, which displays the minimum
    required arguments to set up a web server:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用 `website.conf` 文件来构建虚拟服务器的配置，文件将保存到 `/etc/httpd/conf.d/website.conf`。我们可以在下图中看到
    `website.conf` 文件的内容，它展示了设置 Web 服务器所需的最小参数：
- en: '![Figure 8.3 – The website.conf file used to configure the virtual web server](img/Figure_8.03_B18607.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3 – 用于配置虚拟 Web 服务器的 website.conf 文件](img/Figure_8.03_B18607.jpg)'
- en: Figure 8.3 – The website.conf file used to configure the virtual web server
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – 用于配置虚拟 Web 服务器的 website.conf 文件
- en: 'In the preceding screenshot, we can see that we are defining a directory for
    files, the IP of the server with a listen port of `80`, and the website name.
    This will allow us to create files such as `index.html` in `/srv/website/www`
    in order to control the content of our web server. We need to create an `index.html`
    file and then start and enable the service. In the following screenshot, you can
    see that I have created a simple `index.html` file within `/srv/website/www/`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以看到我们正在为文件定义一个目录，服务器的 IP 地址以及监听端口 `80`，并指定了网站名称。这将允许我们在 `/srv/website/www`
    中创建诸如 `index.html` 之类的文件，以便控制 Web 服务器的内容。我们需要创建一个 `index.html` 文件，然后启动并启用该服务。在下图中，你可以看到我已经在
    `/srv/website/www/` 中创建了一个简单的 `index.html` 文件：
- en: '![Figure 8.4 – The index.hmtl file for Apache httpd web server](img/Figure_8.04_B18607.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4 – Apache httpd Web 服务器的 index.html 文件](img/Figure_8.04_B18607.jpg)'
- en: Figure 8.4 – The index.hmtl file for Apache httpd web server
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4 – Apache httpd Web 服务器的 index.html 文件
- en: 'Next, we will start and enable httpd, as shown in the following screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将启动并启用 httpd，如下图所示：
- en: '![Figure 8.5 – Start, enable and status of Apache httpd](img/Figure_8.05_B18607.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5 – 启动、启用和 Apache httpd 的状态](img/Figure_8.05_B18607.jpg)'
- en: Figure 8.5 – Start, enable and status of Apache httpd
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5 – 启动、启用和 Apache httpd 的状态
- en: 'We now have to open the firewall rules. As a habit I suggest you adopt, we
    will open this for HTTP and HTTPS so that we can utilize both `80` and `443` if
    necessary to access our web server. In the following screenshot, we can see that
    we are opening the firewall rules, making them permanent, and then reloading the
    firewall:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要打开防火墙规则。作为一个建议，我建议你养成这个习惯，我们将为 HTTP 和 HTTPS 开放端口，这样如果需要访问我们的 Web 服务器，可以使用
    `80` 和 `443` 端口。在下图中，我们可以看到我们正在打开防火墙规则，并将其设为永久生效，然后重新加载防火墙：
- en: '![Figure 8.6 – Opening the firewall rules for Apache httpd](img/Figure_8.06_B18607.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.6 – 为 Apache httpd 开放防火墙规则](img/Figure_8.06_B18607.jpg)'
- en: Figure 8.6 – Opening the firewall rules for Apache httpd
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6 – 为 Apache httpd 开放防火墙规则
- en: 'Next, we will restore the SELinux policy so that the web server showcases the
    correct information, which can be seen in the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将恢复 SELinux 策略，以便 Web 服务器能够展示正确的信息，具体内容可以在下图中看到：
- en: '![Figure 8.7 – The SELinux command to restore the directory permissions](img/Figure_8.07_B18607.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.7 – 恢复目录权限的 SELinux 命令](img/Figure_8.07_B18607.jpg)'
- en: Figure 8.7 – The SELinux command to restore the directory permissions
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7 – 恢复目录权限的 SELinux 命令
- en: 'Finally, we are going to browse to the website, as shown in the following screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将浏览该网站，如下图所示：
- en: '![Figure 8.8 – Successful web server browsing of the index.html file](img/Figure_8.08_B18607.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.8 – 成功浏览 Web 服务器的 index.html 文件](img/Figure_8.08_B18607.jpg)'
- en: Figure 8.8 – Successful web server browsing of the index.html file
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8 – 成功浏览 Web 服务器的 index.html 文件
- en: Up until this point, we have successfully opened up our web server to the world.
    By having many servers behind a load balancer, you can alter where the traffic
    goes by the way the load balancer is configured.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经成功地将 Web 服务器对外开放。通过在负载均衡器后面部署多个服务器，你可以通过负载均衡器的配置来改变流量的去向。
- en: 'Next, we will troubleshoot virtual hosts within Apache httpd. We will show
    you how to narrow down common problems when setting up virtual hosts and how to
    identify and fix them easily. First, let’s create a virtual host with Apache httpd.
    One of the key things to note is the SELinux construct and how to restore it.
    The key takeaway from knowing this understanding what has caused the problem is
    if you receive the normal Apache httpd resource page, as seen in the following
    screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将故障排除 Apache httpd 中的虚拟主机。我们将向您展示如何缩小设置虚拟主机时的常见问题，并如何轻松识别和解决它们。首先，让我们创建一个
    Apache httpd 虚拟主机。需要注意的一点是 SELinux 结构以及如何恢复它。了解这一点的关键在于，如果您看到正常的 Apache httpd
    资源页面，如下截图所示，那么您就能明确问题的根源：
- en: '![Figure 8.9 – The default Apache httpd page](img/Figure_8.09_B18607.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.9 – 默认的 Apache httpd 页面](img/Figure_8.09_B18607.jpg)'
- en: Figure 8.9 – The default Apache httpd page
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9 – 默认的 Apache httpd 页面
- en: 'After using the following command on the directory that you are using as the
    root directory for your server, you should see the **Testing for** **EX358book!!!**
    message:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用以下命令操作您作为服务器根目录的目录后，您应该会看到**Testing for** **EX358book!!!** 消息：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The next thing you will want to do is look at the VirtualHost information found
    in `/etc/httpd/conf.d/<name of the server>.conf` for where the default files are
    held for the virtual host in case they are not in the default of `/var/www/html`.
    This way, you know where to restore the SELinux context in order to resolve the
    issue.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要查看 `/etc/httpd/conf.d/<服务器名称>.conf` 中的 VirtualHost 信息，了解虚拟主机的默认文件所在位置，以防它们不在默认的
    `/var/www/html` 中。这样，您就知道在哪里恢复 SELinux 上下文以解决问题。
- en: 'Next, make sure that you include the `Required all granted` command line for
    the directories; otherwise, you will not be able to see any as, by default, they
    are hidden from the world. This can be observed in the following virtual host
    screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，确保在目录中包含 `Required all granted` 命令行；否则，您将无法看到任何内容，因为默认情况下它们对外界隐藏。可以在以下虚拟主机截图中观察到这一点：
- en: '![Figure 8.10 – Example of an httpd virtual host](img/Figure_8.10_B18607.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.10 – httpd 虚拟主机示例](img/Figure_8.10_B18607.jpg)'
- en: Figure 8.10 – Example of an httpd virtual host
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.10 – httpd 虚拟主机示例
- en: We can use this information to know where to restore the SELinux context.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用这些信息来了解恢复 SELinux 上下文的位置。
- en: 'Finally, check the firewall rules to make sure they are allowing `443` in this
    instance, as shown in the following screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，检查防火墙规则，确保此实例中的 `443` 已被允许，如下截图所示：
- en: '![Figure 8.11 – Firewall rules show HTTP (80) and HTTPS (443) are both open](img/Figure_8.11_B18607.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.11 – 防火墙规则显示 HTTP (80) 和 HTTPS (443) 都已打开](img/Figure_8.11_B18607.jpg)'
- en: Figure 8.11 – Firewall rules show HTTP (80) and HTT`PS` (443) are both open
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.11 – 防火墙规则显示 HTTP (80) 和 HTT`PS` (443) 都已打开
- en: 'After we ensure the firewall rules are in place, the web server should function
    correctly. You can ensure that httpd is running through a status check, as shown
    in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在确保防火墙规则到位后，Web 服务器应该能够正常工作。您可以通过状态检查确保 httpd 正在运行，如下截图所示：
- en: '![Figure 8.12 – Apache httpd status showing it is enabled and running](img/Figure_8.12_B18607.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.12 – Apache httpd 状态显示它已启用并正在运行](img/Figure_8.12_B18607.jpg)'
- en: Figure 8.12 – Apache httpd status showing it is enabled and running
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.12 – Apache httpd 状态显示它已启用并正在运行
- en: After the system status, firewall rules, and SELinux have been checked and corrected
    if needed, your web server should perform correctly.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查并根据需要修正系统状态、防火墙规则和 SELinux 后，您的 Web 服务器应该能够正常工作。
- en: 'Next, we will set up an Apache web server with TLS certificates. For this,
    we will use `mod_ssl`. We will start by installing `mod_ssl` using the following
    command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将设置一个带有 TLS 证书的 Apache Web 服务器。为此，我们将使用 `mod_ssl`。我们将首先通过以下命令安装 `mod_ssl`：
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After you have installed it, you will need to modify the location of the certificates
    to match where you have them saved. This can be set in the `/etc/httpd/conf.d/ssl.conf`
    config file. The areas that need modification can be seen in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完 `mod_ssl` 后，您需要修改证书的存储位置，以使其与您保存证书的位置匹配。这可以在 `/etc/httpd/conf.d/ssl.conf`
    配置文件中设置。需要修改的部分可以在以下截图中看到：
- en: '![Figure 8.13 – Key location for the mod_ssl HTTP web server](img/Figure_8.13_B18607.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.13 – mod_ssl HTTP Web 服务器的关键位置](img/Figure_8.13_B18607.jpg)'
- en: Figure 8.13 – Key location for the mod_ssl HTTP web server
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.13 – mod_ssl HTTP Web 服务器的关键位置
- en: This will default the web server to TLS HTTPS.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使 Web 服务器默认使用 TLS HTTPS。
- en: We will now set up a web server using NGINX. This is a slightly different way
    of configuring web servers, and we will go into detail on how this is accomplished.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将使用NGINX来搭建Web服务器。这是配置Web服务器的一种略有不同的方法，我们将详细讲解如何完成此操作。
- en: 'First, let’s remove httpd and the firewall rules so that we have a fresh server
    to work on, which can be seen in the following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们移除httpd和防火墙规则，以便我们可以使用一个全新的服务器进行操作，以下截图展示了这一过程：
- en: '![Figure 8.14 – Removed Apache httpd and firewall rules](img/Figure_8.14_B18607.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.14 – 移除Apache httpd和防火墙规则](img/Figure_8.14_B18607.jpg)'
- en: Figure 8.14 – Removed Apache httpd and firewall rules
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.14 – 移除Apache httpd和防火墙规则
- en: 'Now that Apache httpd has been removed, we can start with a fresh NGINX install.
    We will install NGINX using the commands in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Apache httpd已经被移除，我们可以从全新的NGINX安装开始。我们将使用以下截图中的命令来安装NGINX：
- en: '![Figure 8.15 – Installing the NGINX web server](img/Figure_8.15_B18607.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.15 – 安装NGINX Web服务器](img/Figure_8.15_B18607.jpg)'
- en: Figure 8.15 – Installing the NGINX web server
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.15 – 安装NGINX Web服务器
- en: 'Next, we are going to configure the NGINX web server using the following files,
    which follow a similar pattern to that of Apache httpd. We will be looking at
    the main configuration file and server files separately. The main configuration
    file can be found at `/etc/nginx/nginx.conf`, and the server configuration files
    are found in the `/etc/nginx/conf.d` directory and have a `.conf` naming convention.
    The configuration of these files is slightly different from that of Apache httpd,
    as you can see in the following screenshot of the server configuration:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用以下文件来配置NGINX Web服务器，这些文件的配置方式与Apache httpd类似。我们将分别查看主配置文件和服务器配置文件。主配置文件位于`/etc/nginx/nginx.conf`，服务器配置文件位于`/etc/nginx/conf.d`目录中，并且使用`.conf`命名约定。这些文件的配置与Apache
    httpd的配置略有不同，正如下面截图所示：
- en: '![Figure 8.16 – Configuration example of an NGINX web server](img/Figure_8.16_B18607.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.16 – NGINX Web服务器配置示例](img/Figure_8.16_B18607.jpg)'
- en: Figure 8.16 – Configuration example of an NGINX web server
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.16 – NGINX Web服务器的配置示例
- en: 'As you can see, the layout is different, and we will need to adjust it accordingly.
    We will now create a `website.conf` file and save it in the `/etc/nginx/conf.d`
    directory. An example of a web server setup for NGINX is shown in the following
    screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，布局有所不同，我们需要相应地进行调整。接下来，我们将创建一个`website.conf`文件并将其保存在`/etc/nginx/conf.d`目录中。以下截图展示了NGINX的Web服务器设置示例：
- en: '![Figure 8.17 – Example of the configuration file for NGINX web server for
    rhel1](img/Figure_8.17_B18607.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.17 – NGINX Web服务器配置文件示例（适用于rhel1）](img/Figure_8.17_B18607.jpg)'
- en: Figure 8.17 – Example of the configuration file for NGINX web server for rhel1
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.17 – NGINX Web服务器配置文件示例（适用于rhel1）
- en: 'After we have saved the `website.conf` file, we will create `index.html` in
    the `/var/www/html` directory previously specified, as shown in the following
    screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在保存了`website.conf`文件之后，我们将按之前指定的路径，在`/var/www/html`目录中创建`index.html`文件，如下图所示：
- en: '![Figure 8.18 – The index.html file for the NGINX web server](img/Figure_8.18_B18607.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.18 – NGINX Web服务器的index.html文件](img/Figure_8.18_B18607.jpg)'
- en: Figure 8.18 – The index.html file for the NGINX web server
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.18 – NGINX Web服务器的index.html文件
- en: 'Following that, we will run the following command on the `/var/` directory
    in order to fix any SELinux issues:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在`/var/`目录下运行以下命令，以修复任何SELinux问题：
- en: '[PRE3]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we will start, enable, and open the firewall rules as needed as if this
    was a fresh server, as shown in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将启动、启用并根据需要打开防火墙规则，就像这是一个全新服务器一样，以下截图展示了相关步骤：
- en: '![Figure 8.19 – Start, enable, and open firewall rules for the NGINX web server](img/Figure_8.19_B18607.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.19 – 启动、启用并打开NGINX Web服务器的防火墙规则](img/Figure_8.19_B18607.jpg)'
- en: Figure 8.19 – Start, enable, and open firewall rules for the NGINX web server
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.19 – 启动、启用并打开NGINX Web服务器的防火墙规则
- en: 'Now, we can successfully browse to the new web server, as shown in the following
    screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以成功地访问新的Web服务器，如下图所示：
- en: '![Figure 8.20 – Successful browsing to the NGINX web server](img/Figure_8.20_B18607.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.20 – 成功浏览到NGINX Web服务器](img/Figure_8.20_B18607.jpg)'
- en: Figure 8.20 – Successful browsing to the NGINX web server
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.20 – 成功浏览到NGINX Web服务器
- en: After we have our web servers set up, we are going to use HAProxy to control
    traffic to our servers. HAProxy provides load balancer abilities that enable us
    to determine what servers are currently in rotation for `roundrobin`, which allows
    connections to be dispersed on each new connection to a different web host for
    instance. By using HAProxy, we can lower our downtime during maintenance and ensure
    that we have high availability if a server fails.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们设置好 Web 服务器后，我们将使用 HAProxy 来控制流量。HAProxy 提供了负载均衡功能，使我们能够确定当前轮换中的服务器，用于 `roundrobin`，这使得每个新连接会随机分配给不同的
    Web 主机。例如，使用 HAProxy 可以减少维护期间的停机时间，并确保在服务器故障时仍然具有高可用性。
- en: 'We will start by installing HAProxy, as shown in the following screenshot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先安装 HAProxy，如下图所示：
- en: '![Figure 8.21 – Installing HAProxy](img/Figure_8.21_B18607.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.21 – 安装 HAProxy](img/Figure_8.21_B18607.jpg)'
- en: Figure 8.21 – Installing HAProxy
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.21 – 安装 HAProxy
- en: 'Once it is installed, we will enable and start the service, as shown in the
    following screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们将启用并启动服务，如下图所示：
- en: '![Figure 8.22 – Starting and enabling HAProxy](img/Figure_8.22_B18607.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.22 – 启动并启用 HAProxy](img/Figure_8.22_B18607.jpg)'
- en: Figure 8.22 – Starting and enabling HAProxy
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.22 – 启动并启用 HAProxy
- en: 'Once we have the service up and running, we will configure the main file that
    controls HAProxy, which is the `/etc/haproxy/haproxy.cfg` file, as shown in the
    following screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务启动并运行后，我们将配置控制 HAProxy 的主文件，即 `/etc/haproxy/haproxy.cfg` 文件，如下图所示：
- en: '![Figure 8.23 – The /etc/haproxy/haproxy.cfg file](img/Figure_8.23_B18607.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.23 – /etc/haproxy/haproxy.cfg 文件](img/Figure_8.23_B18607.jpg)'
- en: Figure 8.23 – The /etc/haproxy/haproxy.cfg file
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.23 – /etc/haproxy/haproxy.cfg 文件
- en: A takeaway from this review of the config file is that the listening port of
    the frontend has been changed to `80` as normal for HTTP traffic. The backend
    servers are where we should put the web servers we want to control access to.
    Finally, the round robin balancing is set to `roundrobin`, which will rotate whichever
    backend server the user hits when attempting to browse to the web server.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对配置文件的回顾，可以得出一个结论：前端的监听端口已经更改为 `80`，这是 HTTP 流量的正常端口。后端服务器是我们应该放置我们想要控制访问的
    Web 服务器的位置。最后，轮询负载均衡设置为 `roundrobin`，这将轮流选择每次用户尝试访问 Web 服务器时所连接的后端服务器。
- en: 'One thing to take away from HAProxy is that by default, SELinux allows many
    ports to be utilized out of the box, such as `80` and `443`. However, if you wanted
    to change to something that was not a well-known HTTP or HTTPS port, you would
    need to make sure that the following command was set to allow other ports for
    HAProxy through SELinux:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 从 HAProxy 中可以学到的一点是，默认情况下，SELinux 允许许多端口直接使用，例如 `80` 和 `443`。但是，如果你想更改为不是常见的
    HTTP 或 HTTPS 端口，你需要确保运行以下命令，以通过 SELinux 允许 HAProxy 使用其他端口：
- en: '[PRE4]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this section, we learned how to set up Apache httpd, NGINX, and how to use
    HAProxy as a load balancer. Next, we will work on automating these sections to
    make life easier regardless of what you choose to deploy, whether Apache or NGINX,
    with HAProxy able to utilize both as backend servers.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何设置 Apache httpd、NGINX 以及如何使用 HAProxy 作为负载均衡器。接下来，我们将致力于自动化这些部分，无论你选择部署
    Apache 还是 NGINX，HAProxy 都能够将它们作为后端服务器。
- en: Learning how to use Ansible Automation to automate web servers and control traffic
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习如何使用 Ansible 自动化来自动化 Web 服务器并控制流量
- en: We will set up a multi-task playbook that allows Apache httpd to be installed
    on the server rhel1 and NGINX to be installed on rhel2\. After that, we will install
    HAProxy and set the two servers to `roundrobin` load balance, all through the
    use of Ansible Automation.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将设置一个多任务的 playbook，允许在服务器 rhel1 上安装 Apache httpd，并在 rhel2 上安装 NGINX。之后，我们将安装
    HAProxy，并将这两台服务器设置为 `roundrobin` 负载均衡，所有这些都通过 Ansible 自动化完成。
- en: 'Let’s start with the inventory, which will include the httpd web server, NGINX
    web server, and the HAProxy server, as shown in the following screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从库存文件开始，其中将包括 httpd Web 服务器、NGINX Web 服务器和 HAProxy 服务器，如下图所示：
- en: '![Figure 8.24 – Ansible Automation inventory file](img/Figure_8.24_B18607.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.24 – Ansible 自动化库存文件](img/Figure_8.24_B18607.jpg)'
- en: Figure 8.24 – Ansible Automation inventory file
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.24 – Ansible 自动化库存文件
- en: 'Next, we will write out the playbook and files needed to make this work successfully.
    To do that, first, we will write out the beginning part of the playbook for the
    first server shown as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将编写实现这一目标所需的剧本和文件。为此，首先我们将编写如下所示的第一个服务器的剧本的开始部分：
- en: '[PRE5]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The files mentioned for copying are displayed in the following screenshot:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 用于复制的文件在以下截图中显示：
- en: '![Figure 8.25 – httpd.j2](img/Figure_8.25_B18607.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.25 – httpd.j2](img/Figure_8.25_B18607.jpg)'
- en: Figure 8.25 – httpd.j2
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.25 – httpd.j2
- en: 'In the following screenshot, we can see the template `.j2` file for the `httpd_html`
    conversion when we configure the web host:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，我们可以看到用于配置 Web 主机时进行 `httpd_html` 转换的 `.j2` 模板文件：
- en: '![Figure 8.26 – httpd_html.j2](img/Figure_8.26_B18607.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.26 – httpd_html.j2](img/Figure_8.26_B18607.jpg)'
- en: Figure 8.26 – httpd_html.j2
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.26 – httpd_html.j2
- en: 'Next, we will configure the NGINX web server within the same playbook, as seen
    in the following code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在同一个剧本中配置 NGINX Web 服务器，具体见以下代码：
- en: '[PRE6]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The files used within this portion of the playbook can be found in the following
    screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分剧本中使用的文件可以在以下截图中找到：
- en: '![Figure 8.27 – nginx.j2](img/Figure_8.27_B18607.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.27 – nginx.j2](img/Figure_8.27_B18607.jpg)'
- en: Figure 8.27 – nginx.j2
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.27 – nginx.j2
- en: 'In the following screenshot, we can see the `.j2` file that allows us to copy
    over the configuration of the NGINX web server:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，我们可以看到 `.j2` 文件，它允许我们复制 NGINX Web 服务器的配置：
- en: '![Figure 8.28 – nginx_html.j2](img/Figure_8.28_B18607.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.28 – nginx_html.j2](img/Figure_8.28_B18607.jpg)'
- en: Figure 8.28 – nginx_html.j2
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.28 – nginx_html.j2
- en: 'After those web servers are configured, we will need to set up HAProxy, as
    shown in the remainder of the playbook:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些 Web 服务器配置完成后，我们还需要设置 HAProxy，正如剧本剩余部分所示：
- en: '[PRE7]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The file used to configure the HAProxy can be found in the following screenshot:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 用于配置 HAProxy 的文件可以在以下截图中找到：
- en: '![Figure 8.29 – haproxy.j2](img/Figure_8.29_B18607.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.29 – haproxy.j2](img/Figure_8.29_B18607.jpg)'
- en: Figure 8.29 – haproxy.j2
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.29 – haproxy.j2
- en: 'After we have created the playbook and the supporting files, we run the playbook
    as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建好剧本和支持文件后，我们按如下方式运行剧本：
- en: '[PRE8]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you can see in the following screenshot, we have a successful playbook run:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下截图所示，我们已成功运行剧本：
- en: '![Figure 8.30 – Successful Ansible Automation playbook run](img/Figure_8.30_B18607.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.30 – Ansible 自动化剧本成功运行](img/Figure_8.30_B18607.jpg)'
- en: Figure 8.30 – Successful Ansible Automation playbook run
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.30 – Ansible 自动化剧本成功运行
- en: After the playbook runs successfully, we can now browse to `rhel3.example.com`,
    and it will round robin through the two backend servers.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在剧本成功运行后，我们可以浏览到 `rhel3.example.com`，它将通过两个后端服务器进行轮询。
- en: In this section, we learned how to create both Apache httpd web servers and
    NGINX web servers. We also learned how to set up HAProxy to load balance and provide
    high availability to our web servers. This enables us to take servers out of rotation
    without our customers knowing what is happening, all through Ansible Automation
    playbooks.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何创建 Apache httpd Web 服务器和 NGINX Web 服务器。我们还学习了如何配置 HAProxy 以实现负载均衡和为
    Web 服务器提供高可用性。这使得我们能够在不让客户察觉的情况下将服务器从轮询中移除，所有这些都是通过 Ansible 自动化剧本实现的。
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about web servers and how we can create different
    flavors from Apache to NGINX. We learned how to control server access and to resolve
    issues setting them up. Through HAProxy, we learned how to stir traffic through
    load balancing in order to ensure that we have servers up and running for the
    end users at all times. In the next chapter, we will wrap up what we have learned
    throughout this book with an overview followed by practice exam questions. This
    will help prepare you and drive home the information you have learned while studying
    this book. In the next chapter, we will work with mock exam questions to prepare
    you for test day. I look forward to seeing you all there and helping you succeed
    in passing the EX358 certification exam.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 Web 服务器以及如何创建不同版本的 Apache 和 NGINX。我们学习了如何控制服务器访问，并解决了在配置过程中遇到的问题。通过
    HAProxy，我们学习了如何通过负载均衡引导流量，确保我们始终有服务器为最终用户提供服务。在下一章中，我们将总结本书所学的内容，并进行概览，之后是实践考试题。这将帮助你为考试做好准备，并巩固你在学习本书过程中所学的信息。在下一章中，我们将通过模拟考试题为考试日做准备。我期待着在那儿见到你们，并帮助你们成功通过
    EX358 认证考试。
