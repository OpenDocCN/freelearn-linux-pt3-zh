- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Toaster to Bake an Image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know how to build an image using BitBake within Poky, we will learn
    how to do the same using Toaster. We are going to focus on the most straightforward
    usage of Toaster and also cover what else it can do so that you know about its
    capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: What is Toaster?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Toaster** is a web interface to configure and run builds. It communicates
    with the BitBake and Poky build system to manage and gather information about
    the builds, packages, and images.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to use Toaster:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Locally**: We can run Toaster as a local instance, suitable for single-user
    development, providing a graphical interface to the BitBake command lines and
    some build information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hosted**: This is suitable for multiple users. The Toaster servers build
    and store the users’ artifacts. Its components can be spread across several machines
    when using a hosted instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will use Toaster as a local instance. However, if you want
    to use it as a hosted instance, please visit the following website for instructions
    – *Toaster* *Manual* ([https://docs.yoctoproject.org/4.0.4/toaster-manual/index.html](https://docs.yoctoproject.org/4.0.4/toaster-manual/index.html)).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Bear in mind that every hosted service requires attention to its security. Think
    about this before using a hosted instance.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Toaster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Toaster uses the Python Django framework. The easiest way to install it is
    by using Python’s `pip` utility. We already installed this when configuring our
    host machine in [*Chapter 2*](B19361_02.xhtml#_idTextAnchor031), *Baking Our Poky-Based
    System*. We can now install the rest of Toaster’s requirements inside the Poky
    source directory by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Starting Toaster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once we have installed Toaster’s requirements, we are ready to start its server.
    To do this, we should go to Poky’s directory and run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The commands take some time to finish. When everything is set up, the web server
    is started. The result is shown in the following figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – The result of the source toaster startup](img/Figure_3.01_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – The result of the source toaster startup
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the Toaster web interface, open your favorite browser and enter the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://127.0.0.1:8000`'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: By default, Toaster starts on port `8000`. The `webport` parameter lets you
    use a different port – for example, `$ source toaster` `start webport=8400`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can see the starting page of Toaster:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 3.2 – The Toaster welcome p\uFEFF\uFEFFage](img/Figure_3.02_B19361.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – The Toaster welcome page
  prefs: []
  type: TYPE_NORMAL
- en: Building an image for QEMU
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Following the same steps used in [*Chapter 2*](B19361_02.xhtml#_idTextAnchor031),
    *Baking Our Poky-Based System*, we will build an image of the QEMU x86-64 emulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we currently don’t have a project, a collection of configurations and
    builds, we need to start one. Create a project name and choose the target release,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Creating a new project with Toaster](img/Figure_3.03_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – Creating a new project with Toaster
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating **my-first-project**, we can see the main project screen, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – The first page of the project](img/Figure_3.04_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – The first page of the project
  prefs: []
  type: TYPE_NORMAL
- en: 'While on the `qemux86-64`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – How to choose the target machine](img/Figure_3.05_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – How to choose the target machine
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, click the `core-image-full-cmdline`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – How to find an image using Search](img/Figure_3.06_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – How to find an image using Search
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the build process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Toaster during the image build](img/Figure_3.07_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – Toaster during the image build
  prefs: []
  type: TYPE_NORMAL
- en: 'The build process takes some time, but after that, we can see the built image
    along with some statistics, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – The image build artifact report](img/Figure_3.08_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – The image build artifact report
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also verify the generated set of files, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – The core-image-full-cmdline directory structure as shown in
    Toaster](img/Figure_3.09_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – The core-image-full-cmdline directory structure as shown in Toaster
  prefs: []
  type: TYPE_NORMAL
- en: 'Toaster is a powerful tool. You can use it on a local development machine or
    a shared server to get a graphic representation of the build. You can return to
    the terminal where you started Toaster to run `runqemu qemux86-64 core-image-full-cmdline`.
    You will see what is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – The QEMU screen during the Linux kernel boot](img/Figure_3.10_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.10 – The QEMU screen during the Linux kernel boot
  prefs: []
  type: TYPE_NORMAL
- en: After finishing the Linux booting, you will see a login prompt, as shown in
    *Figure 3**.11*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11 – The QEMU screen during user login](img/Figure_3.11_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.11 – The QEMU screen during user login
  prefs: []
  type: TYPE_NORMAL
- en: We can log in to the `root` account using an empty password.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced Toaster and its essential features. Then, we
    went through installing and configuring Toaster and built and inspected an image.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will go through some critical BitBake concepts. We believe
    these concepts are essential to understanding the Yocto Project. We will use BitBake
    and the command line for the rest of the book, as they provide a view of all the
    concepts.
  prefs: []
  type: TYPE_NORMAL
