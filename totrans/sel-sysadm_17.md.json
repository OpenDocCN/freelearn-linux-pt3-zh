["```\n$ seinfo -a | grep unconfined\n$ seinfo -a unconfined_domain_type -x\n```", "```\n$ sesearch -A -s unconfined_service_t -c process -p transition\nallow unconfined_service_t chronyc_t:process transition;\nallow unconfined_service_t rpm_script_t:process transition;\nallow unconfined_service_t unconfined_service_t:process { transition ...};\nallow unconfined_service_t virt_domain:process { transition ...};\n```", "```\n$ sesearch -A -s unconfined_domain_type -ds\n```", "```\n    # semanage user -l\n    ```", "```\n    ROLE and TYPE transition, but we also allow the command to be executed as the root user, as that is a requirement for the jk_init command. Of course, this can be adjusted as needed.\n    ```", "```\n    $ sudo /usr/sbin/jk_init -v -j /srv/chroot \\\n      extshellplusnet\n    ```", "```\n# chcon -t bin_t /usr/bin/postgres\n```", "```\n# semanage fcontext -a -t bin_t /usr/bin/postgres\n```", "```\n(typeattributeset cil_gen_require postgresql_t)\n(typeattributeset cil_gen_require unconfined_domain_type)\n(typeattributeset unconfined_domain_type (postgresql_t))\n```", "```\n# seinfo --constrain | grep can_change_object_identity\n```", "```\n# semanage permissive -a postgresql_t\n```", "```\n# semanage login -l\n# semanage login -m -r \"s0-s0:c0.c100\" lisa\n```", "```\n    $ mkdir sandbox\n    $ cp 2019/adamovsky/* sandbox\n    ```", "```\n    $ sandbox -H sandbox/ prog advent.unl\n    Welcome to Adventure!! Would you like instructions?\n    **\n    ```", "```\n    prog command itself, which will be running in the sandbox_t SELinux domain and with a certain category pair set, you will notice that a seunshare command will run alongside it. This command provides the isolation for the process, not only by triggering the SELinux context change, but also removing unnecessary mount and filesystem views from the process's viewpoint.\n    ```", "```\n    $ ls -Z sandbox/\n    staff_u:object_r:sandbox_file_t:s0:c29,c94 advent.unl\n    staff_u:object_r:sandbox_file_t:s0:c29,c94 prog\n    ```", "```\n(typeattributeset cil_gen_require sandbox_t)\n(allow sandbox_t user_home_t (file (execute map)))\n```", "```\n$ cat prog.c | sandbox ./prog\n      1      1   127\n```", "```\n    # chcon -t postgresql_exec_t /usr/bin/pgpool\n    ```", "```\n    # systemctl start pgpool\n    # systemctl status pgpool\n    ...\n    WARNING: Failed to open status file at: \"/var/log/pgpool/pgpool_status\"\n    FATAL: could not read pid file\n    ```", "```\n    # chcon -R -t postgresql_log_t /var/log/pgpool\n    # chcon -R -t postgresql_var_run_t /var/run/pgpool\n    ```", "```\n    pgpool wants to listen on port 9999, but SELinux is refusing this.\n    ```", "```\n    (typeattributeset cil_gen_require jboss_management_port_t)\n    (typeattributeset cil_gen_require postgresql_t)\n    (allow postgresql_t jboss_management_port_t (tcp_socket (name_bind)))\n    ```", "```\n    # sepolicy generate -n pgpool --init /usr/bin/pgpool\n    ```", "```\n    # make -f /usr/share/selinux/devel/Makefile pgpool.pp\n    ```", "```\n    # semodule -i pgpool.pp\n    ```", "```\n    # restorecon -RvF /usr/bin/pgpool /var/log/pgpool \\\n      /var/run/pgpool\n    ```", "```\n    pgpool is running flawlessly.\n    ```", "```\npermissive pgpool_t;\n```", "```\n# cat /var/log/audit/audit.log | audit2allow -R\n```"]