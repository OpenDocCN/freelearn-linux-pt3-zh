- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Customizing Existing Recipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the course of our work with Yocto Project’s tools, it is expected that we
    will need to customize existing recipes. In this chapter, we will explore some
    examples, such as changing compilation options, enabling or disabling features
    of a recipe, applying an extra patch, and using configuration fragments to customize
    some recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding common use cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays, projects usually have a set of layers to provide the required features.
    We certainly need to make changes on top of them to adapt them to our specific
    needs. They may be cosmetic or substantive changes, but the way to make them is
    the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'We must create a `.bbappend` file to change a preexisting recipe in our project
    layer. For example, suppose the original recipe was named `<original-layer>/recipes-core/app/app_1.2.3.bb`.
    When you create a `.bbappend` file, you can use the `%` wildcard character to
    allow for matching recipe names. So, the `.bbappend` file could have the following
    different forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '`App_1.2.3.bbappend`: This applies the change only for the `1.2.3` version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app_1.2.%.bbappend`: This applies the change only for the `1.2.y` version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app_1.%.bbappend`: This applies the change only for the `1.x` and `1.x.y`
    versions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app_%.bbappend`: This applies the change for any version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can have multiple `.bbappend` files, depending on the intended changes we
    want to apply to the app recipe. Sometimes we can restrict the changes to one
    version, but sometimes, we want to change all available recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When there is more than one `.bbappend` file for a recipe, all of them are joined
    following the layer’s priority order.
  prefs: []
  type: TYPE_NORMAL
- en: The `.bbappend` file can be seen as a text appended at the end of the original
    recipe. It empowers us with a highly flexible mechanism to avoid duplicating source
    code to apply the required changes to our project’s layers.
  prefs: []
  type: TYPE_NORMAL
- en: Extending a task
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the task content does not satisfy our requirements, we replace it (providing
    our implementation) or append it. As we will learn more extensively about the
    BitBake metadata syntax in [*Chapter 8*](B19361_08.xhtml#_idTextAnchor110), *Diving
    into BitBake Metadata*, the `:append` and `:prepend` operators can extend a task
    with extra content. For example, to extend a `do_install` task, we can use the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1 – Example on how to extend the do_install task](img/Figure_13.01_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.1 – Example on how to extend the do_install task
  prefs: []
  type: TYPE_NORMAL
- en: This way, the new content is concatenated in the original task.
  prefs: []
  type: TYPE_NORMAL
- en: Adding extra options to recipes based on Autotools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s assume we have Autotools-based application, along with a preexisting
    recipe for it, and we want to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Enable `my-feature`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disable `another-feature`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The content of the `.bbappend` file to make the changes will be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.2 – Adding extra configuration to the Autoconf flags](img/Figure_13.02_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.2 – Adding extra configuration to the Autoconf flags
  prefs: []
  type: TYPE_NORMAL
- en: 'The same strategy can be used if we need to enable it conditionally based on
    the hardware we are building for, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.3 – Conditionally adding extra configuration to the Autoconf flags](img/Figure_13.03_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.3 – Conditionally adding extra configuration to the Autoconf flags
  prefs: []
  type: TYPE_NORMAL
- en: 'The Yocto Project supports many different build systems, and the variables
    to configure them are shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Build System** | **Variable** |'
  prefs: []
  type: TYPE_TB
- en: '| Autotools | `EXTRA_OECONF` |'
  prefs: []
  type: TYPE_TB
- en: '| Cargo | `EXTRA_OECARGO` |'
  prefs: []
  type: TYPE_TB
- en: '| CMake | `EXTRA_OECMAKE` |'
  prefs: []
  type: TYPE_TB
- en: '| Make | `EXTRA_OEMAKE` |'
  prefs: []
  type: TYPE_TB
- en: '| Meson | `EXTRA_OEMESON` |'
  prefs: []
  type: TYPE_TB
- en: '| NPM | `EXTRA_OENPM` |'
  prefs: []
  type: TYPE_TB
- en: '| SCons | `EXTRA_OESCONS` |'
  prefs: []
  type: TYPE_TB
- en: '| WAF | `EXTRA_OEWAF` |'
  prefs: []
  type: TYPE_TB
- en: Table 13.1 – The list of variables to configure each build system
  prefs: []
  type: TYPE_NORMAL
- en: The variables from *Table 13.1* are given as arguments for the respective build
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Applying a patch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For cases where we need to apply a patch to an existing package, we should
    use `FILESEXTRAPATHS`, which includes new directories in the searching algorithm,
    making the additional file visible to BitBake, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.4 – The content of .bbappend is used only to apply mypatch.patch](img/Figure_13.04_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.4 – The content of .bbappend is used only to apply mypatch.patch
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, `THISDIR` expands to the current directory, and `PN`
    and `PV` expand to the package name and version, respectively. This new path is
    then included in the directories list used for file searching. The prepend operator
    is crucial as it guarantees that the file is picked from this directory, even
    if a file with the same name is added in the lower priority layers in the future.
  prefs: []
  type: TYPE_NORMAL
- en: BitBake assumes that every file with a `.patch` or `.diff` extension is a patch
    and applies them accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Adding extra files to the existing packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we need to include an additional configuration file, we should use `FILESEXTRAPATHS`,
    as explained in the previous example and shown in the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.5 – The content of the .bbappend file to install a new configuration
    file](img/Figure_13.05_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.5 – The content of the .bbappend file to install a new configuration
    file
  prefs: []
  type: TYPE_NORMAL
- en: The `do_install:append` function appends the provided block below the metadata
    already available in the original `do_install` function. It includes the command
    to copy our new configuration file into the package’s filesystem. The file is
    copied from `${WORKDIR}` to `${D}` as these are the directories used by Poky to
    build the package and the destination directory used by Poky to create the package.
  prefs: []
  type: TYPE_NORMAL
- en: There are many variables to define paths in our recipes, such as `bindir`, `datadir`,
    and `sysconfdir`. The `poky/meta/conf/bitbake.conf` file defines all those commonly
    used variables. The variables exist, so the installation paths of binaries can
    be customized depending on the use case. For example, the native SDK binaries
    require a specific installation path, so the binaries don’t conflict with the
    target ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows the most common variables and their default expanded
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Variable** | **Default** **Expanded Value** |'
  prefs: []
  type: TYPE_TB
- en: '| `base_bindir` | `/``bin` |'
  prefs: []
  type: TYPE_TB
- en: '| `base_sbindir` | `/``sbin` |'
  prefs: []
  type: TYPE_TB
- en: '| `sysconfdir` | `/``etc` |'
  prefs: []
  type: TYPE_TB
- en: '| `localstatedir` | `/``var` |'
  prefs: []
  type: TYPE_TB
- en: '| `datadir` | `/``usr/share` |'
  prefs: []
  type: TYPE_TB
- en: '| `bindir` | `/``usr/bin` |'
  prefs: []
  type: TYPE_TB
- en: '| `sbindir` | `/``usr/sbin` |'
  prefs: []
  type: TYPE_TB
- en: '| `libdir` | `/usr/lib` or `/usr/lib64` |'
  prefs: []
  type: TYPE_TB
- en: '| `libexecdir` | `/``usr/libexec` |'
  prefs: []
  type: TYPE_TB
- en: '| `includedir` | `/``usr/include` |'
  prefs: []
  type: TYPE_TB
- en: Table 13.2 – The list of commonly used variables and their default expanded
    value
  prefs: []
  type: TYPE_NORMAL
- en: The use of hard coded paths in recipes should be avoided, so we reduce the risk
    of misconfiguration. For example, when using the `usrmerge` `DISTRO_FEATURE`,
    behind the scenes, all recipes set `base_bindir` as `bindir`, so if a recipe uses
    `/bin` as a hard coded path, the installation won’t happen as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding file searching paths
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When a file (a patch or a generic file) is included in `SRC_URI`, BitBake searches
    for the `FILESPATH` and `FILESEXTRAPATH` variables. The default setting is to
    look in the following locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<``recipe>-<version>/`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<``recipe>/`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`files/`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In addition to this, it also checks for `OVERRIDES` for a specific file to
    be overridden in each folder. To illustrate this, consider the `foo_1.0.bb` recipe.
    The `OVERRIDES = "<board>:<arch>"` variable for the file will be searched in the
    following directories, respecting the exact order shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '`foo-1.0/<board>/`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`foo-1.0/<arch>/`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`foo-1.0/`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`foo/<board>/`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`foo/<arch>/`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`foo/`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`files/<board>/`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`files/<arch>/`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`files/`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is just illustrative as the list of `OVERRIDES` is huge and machine-specific.
    When we work with our recipe, we can use `bitbake-getvar OVERRIDES` to find the
    complete list of available overrides for a specific machine and use them accordingly.
    See the Poky output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.6 – Using bitbake-getvar to get the value of the OVERRIDES variable](img/Figure_13.06_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.6 – Using bitbake-getvar to get the value of the OVERRIDES variable
  prefs: []
  type: TYPE_NORMAL
- en: This command is quite useful for debugging the metadata during the debugging
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Changing recipe feature configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`PACKAGECONFIG` is a mechanism to simplify feature set customization for recipes.
    It provides a way to enable and disable the recipe features. For example, the
    recipe has the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.7 – Example of PACKAGECONFIG](img/Figure_13.07_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.7 – Example of PACKAGECONFIG
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 13**.7* has two features: `feature1` and `feature2`. The behavior of
    each feature is defined by six arguments, separated by commas. You can omit any
    argument but must retain the separating commas. The order is essential and specifies
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Extra arguments if the feature is enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extra arguments if the feature is disabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Additional build dependencies (`DEPENDS`) if the feature is enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Additional runtime dependencies (`RDEPENDS`) if the feature is enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Additional runtime recommendations (`RRECOMMENDS`) if the feature is enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Any conflicting (mutually exclusive) `PACKAGECONFIG` settings for this feature.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can create a `.bbappend` file that expands the `PACKAGECONFIG` variable’s
    default value to enable `feature2` as well, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.8 – The content of a .bbappend file to expand the PACKAGECONFIG
    variable](img/Figure_13.08_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.8 – The content of a .bbappend file to expand the PACKAGECONFIG variable
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To add the same feature to the `build/conf/local.conf` file, we can use `PACKAGECONFIG:pn-<recipename>:append
    = '` `feature2'`.
  prefs: []
  type: TYPE_NORMAL
- en: The list of available `PACKAGECONFIG` features for a specific package must be
    checked inside the recipe file, as there is no tool to list them all.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration fragments for Kconfig-based projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Kconfig configuration infrastructure has become popular due to its flexibility
    and expressiveness. Although it started with Linux kernel, some other projects
    use the same infrastructure, such as U-Boot and BusyBox.
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration is based on select-based features where you can enable or
    disable a feature and save the result of this choice in a file for later use.
    So please consider the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.9 – Enable or disable TFTPD on BusyBox KConfig](img/Figure_13.09_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.9 – Enable or disable TFTPD on BusyBox KConfig
  prefs: []
  type: TYPE_NORMAL
- en: We have control whether the TFTPD support in BusyBox is enabled **(a)** or not
    **(b)**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Yocto Project provides a specialized class to handle the configuration
    of the Kconfig-based project, allowing minor modifications called configuration
    fragments. We can use this to enable or disable features for your machine, for
    example, when configuring `linux-yocto`, we can use `<layer>/recipes-kernel/linux/linux-yocto_%.bbappend`
    as in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.10 – The .bbappend content for applying a fragment](img/Figure_13.10_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.10 – The .bbappend content for applying a fragment
  prefs: []
  type: TYPE_NORMAL
- en: 'Every configuration fragment must use the `.cfg` file extension. So, the content
    of the `<layer>/recipes-kernel/linux/linux-yocto/linux-yocto/enable-can.cfg` file
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.11 – The content of enable-can.cfg](img/Figure_13.11_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.11 – The content of enable-can.cfg
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use BitBake to configure or generate the Linux kernel configuration
    file. The `bitbake virtual/kernel -c menuconfig` command that allows us to configure
    the Linux kernel can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.12 – Enabling CAN bus subsystem support using bitbake virtual/kernel
    -c menuconfig](img/Figure_13.12_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.12 – Enabling CAN bus subsystem support using bitbake virtual/kernel
    -c menuconfig
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 13**.12* shows how to enable CAN bus support using Linux kernel’s `menuconfig`.
    The kernel configuration is changed when exiting and saving from `menuconfig`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to create the fragment using `bitbake virtual/kernel -c diffconfig`,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.13 – The diffconfig option generates the configuration fragment](img/Figure_13.13_B19361.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.13 – The diffconfig option generates the configuration fragment
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 13**.13* displays the log after the command. It is important to note
    that the fragment file is created under the `<build>/tmp/work/` directory, and
    the absolute path is shown in the log. We must copy this fragment file to the
    layer and use it in a `.bbappend` file in order to get it applied.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: To save a complete configuration, we can use `bitbake virtual/kernel -c savedefconfig`.
    This command generates a `defconfig` file to replicate the same configuration.
    This is a complete configuration, not a fragment file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The support for the configuration fragments works for the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Linux kernel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: U-Boot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BusyBox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Those recipes also offer the `menuconfig` and `diffconfig` tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to customize existing recipes using the `.bbappend`
    files and benefited from this by avoiding the duplication of source code. We saw
    how to enable or disable a feature, how to apply a patch, and how to use the configuration
    fragment support.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss how the Yocto Project can help us with
    some legal aspects of producing a Linux-based system using packages under different
    licenses. We will understand which artifacts we need and how Poky can be configured
    to generate the artifacts that should be shared as part of the copyleft compliance
    accomplishment process.
  prefs: []
  type: TYPE_NORMAL
