- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Text Editors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 1*](B19121_01_split_000.xhtml#_idTextAnchor014), we recommended
    that you always use the command line to edit files. Since practice is the only
    way to develop our console skills, we should take every opportunity to do so.
    File editing is the most basic and most common skill used during the configuration
    of a system.
  prefs: []
  type: TYPE_NORMAL
- en: Some text editors even allow us to execute commands on the operating system.
    This gives us an advantage of being able to practice them. We can also extend
    their capabilities by installing plugins or customizing their configuration. These
    modifications allow us to format files, verify syntax, and execute tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Besides their use, we will discuss basic configuration tips and customizations
    of the most popular text editors.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Text editors and the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emacs overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nano basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mighty Vim
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To perform the configurations, customizations, and examples mentioned in this
    chapter, the installed `vim` and `nano` packages in their *basic form*. `emacs`
    and some other packages may need to be installed. Most of them are included in
    Fedora’s official repositories.
  prefs: []
  type: TYPE_NORMAL
- en: In each section, you will see the required packages and how to install each
    of them.
  prefs: []
  type: TYPE_NORMAL
- en: When using a package or code not included in the official Fedora repositories,
    we will provide a link to get it and instructions to install it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The examples created in this chapter are available for download in the book’s
    GitHub repository: [https://github.com/PacktPublishing/Fedora-Linux-System-Administration/tree/main/chapter7](https://github.com/PacktPublishing/Fedora-Linux-System-Administration/tree/main/chapter7).'
  prefs: []
  type: TYPE_NORMAL
- en: Text editors and the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **UNIX** operating system has some unique of ideas and concepts that shape
    its design. UNIX was the first operating system to abstract all I/O operations
    under a unified concept. The fathers of UNIX called this concept a **file**. Each
    *file* exposes itself through the same **Application Programming Interface** (**API**).
    This abstraction provides many advantages, such as preventing duplicate code and
    increasing reusability.
  prefs: []
  type: TYPE_NORMAL
- en: To read/write to a disk, keyboard, document, or network device, it is possible
    to use the same basic set of commands (such as the `cat`, `more`, `grep`, `sed`,
    and `echo` commands).
  prefs: []
  type: TYPE_NORMAL
- en: 'This principle is encapsulated in the phrase: *everything is* *a file*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This fundamental concept has two sides:'
  prefs: []
  type: TYPE_NORMAL
- en: In UNIX, everything is a *stream* *of bytes*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With reference to a file, called a *file descriptor*, the I/O access uses the
    same set of operations and the same API (whatever the device type and the underlying
    hardware is). As a byte stream, it allows the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**read**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**write**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**search**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**close**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In UNIX, the filesystem serves as a universal *namespace*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Files are not only a stream of bytes with a consistent API, but they can also
    reference each other in a uniform way. UNIX filesystem *paths* provide a consistent,
    global scheme for labeling resources, regardless of their nature. This global
    namespace is often viewed as a *hierarchy of files and directories*. This is a
    convenient abstraction; a file path could refer to *almost anything*: a filesystem,
    a device, a network share, or a communication channel.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This means that in UNIX, and so in Linux, anything is accessible as a *file*
    in the filesystem space. The point of all this is to make it possible to use common
    tools for different things.
  prefs: []
  type: TYPE_NORMAL
- en: The tool used to change the content of the text files is the text editor. The
    files contain *plain text* or *source code* either for a program or for text formatters,
    which reads the typed input and produces a printable output.
  prefs: []
  type: TYPE_NORMAL
- en: The main advantage of text editors on UNIX/Linux systems is the ability to use
    them without a graphical environment, in the terminal. This advantage allows their
    use on *remote machines*. Since there’s no need to transfer the entire graphical
    environment, working with text editors improves the speed of the network. As a
    system administrator, you need to know how to edit files from the terminal like
    an expert.
  prefs: []
  type: TYPE_NORMAL
- en: '`nano` or `vim` come as a base package with any Linux distribution. In some
    cases, either package is available out of the box, and some distributions also
    include `emacs`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These packages achieve the same thing (edit text files) but they do it in very
    different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**nano**: Easiest to use, but with the fewest features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**vim**: Steepest learning curve, but powerful once it’s mastered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**emacs**: Midway between **nano** and **vim** in difficulty of use. Powerful
    and customizable. Does not always come as a base package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s take a deep dive into each of them. We’ll start with the one that has
    the most historical weight, **GNU Emacs**, created by Richard Stallman. In Fedora
    Workstation, it needs to be installed to use it. Let’s start by getting an overview
    of it.
  prefs: []
  type: TYPE_NORMAL
- en: Emacs overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Early text editors were very rudimentary, so much so that they could not open
    an entire text document. To solve that, a text editor turned out to be more of
    a command that could generate words and dump them into a file, find and replace
    words in a file, delete lines in a file, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Editing large documents in this way could become quite boring. So, people started
    to develop **macros** to perform common related tasks.
  prefs: []
  type: TYPE_NORMAL
- en: In 1983, Richard Stallman released a package of his macros under the name **Editing
    Macros**, or **Emacs** for short. When Dr. Stallman started the GNU project, GNU
    Emacs became his most successful application.
  prefs: []
  type: TYPE_NORMAL
- en: GNU Emacs is a text editor designed for POSIX operating systems. It is often
    considered complex since it was developed long before modern computer conventions
    and terminology existed.
  prefs: []
  type: TYPE_NORMAL
- en: However, GNU Emacs offers efficient commands for common but complex actions,
    plus plugins and configuration *hacks* developed around it over 40 years. Once
    you learn the basic use of GNU Emacs, it is a powerful, efficient, and hackable
    editor for life.
  prefs: []
  type: TYPE_NORMAL
- en: The most common version of emacs is GNU Emacs.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install it on our Fedora Workstation, using the software application from
    main menu, choose between **RPM** or **FLATPAK** for its installation source,
    as we covered in [*Chapter 6*](B19121_06.xhtml#_idTextAnchor155):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Installing emacs](img/B19121_07_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – Installing emacs
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the console allows you to list the available plugins too. Switch to the
    `root` user and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 7.2 – emacs and plugins](img/B19121_07_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – emacs and plugins
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing and counting the plugins, there are under 100 of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Install GNU Emacs by your preferred method and let’s start with the basics.
  prefs: []
  type: TYPE_NORMAL
- en: The basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the beginning, the usability of the program seems complicated. But it’s only
    a little different because it was created in another era. Follow these instructions
    to start getting used to the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Emacs` in the search box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Open emacs from menu](img/B19121_07_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – Open emacs from menu
  prefs: []
  type: TYPE_NORMAL
- en: 'It can also be opened using the `emacs` command as a *non-root* user from the
    terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In both cases, the **GNU Emacs** window opens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – GNU Emacs](img/B19121_07_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – GNU Emacs
  prefs: []
  type: TYPE_NORMAL
- en: 'On the welcome screen, the first link, **Emacs Tutorial**, takes you to the
    help tutorial of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – Emacs tutorial](img/B19121_07_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – Emacs tutorial
  prefs: []
  type: TYPE_NORMAL
- en: You can return to it as many times as you need with its key combination.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the key combinations use the *Ctrl* key, along with the required combination.
    For example, to open the tutorial, the combination is *C-h* + *C-t*, which means
    pressing the *Ctrl* key plus the *h* key, followed by the *Ctrl* key plus the
    *t* key; that is, you could hold down the *Ctrl* key and press the *h* key followed
    by the *t* key.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, the *Alt* key is also used for key combinations. But the notation
    is different, noted by an *M*. For example, to use the *Alt-x* combination, the
    notation is *M-x*.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the *Alt* key was known as *Meta* in the past. Remember, when
    GNU Emacs was developed, some of the current terms were not in use back then.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The letter *M* refers to the *Meta* key, which on x86 PCs is the *Alt* key.
    There are also ports of emacs on other platforms, such as macOS where *Meta* refers
    to the *![](img/01.png)* *Cmd* key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the graphical interface helps when getting started with GNU Emacs. The
    menus include the key combinations used for each task:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 – GNU Emacs menus](img/B19121_07_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6 – GNU Emacs menus
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows the most common tasks with their corresponding key
    combination:'
  prefs: []
  type: TYPE_NORMAL
- en: '| File Operations |'
  prefs: []
  type: TYPE_TB
- en: '| Open a file | `C-x C-f` |'
  prefs: []
  type: TYPE_TB
- en: '| Save file | `C-x C-s` |'
  prefs: []
  type: TYPE_TB
- en: '| Save as | `C-x C-w` |'
  prefs: []
  type: TYPE_TB
- en: '| Close file | `C-x C-k` |'
  prefs: []
  type: TYPE_TB
- en: '| Quit | `C-x C-c` |'
  prefs: []
  type: TYPE_TB
- en: '| Copy & Paste |'
  prefs: []
  type: TYPE_TB
- en: '| Cut | `C-w` |'
  prefs: []
  type: TYPE_TB
- en: '| Copy | `M-w` |'
  prefs: []
  type: TYPE_TB
- en: '| Help |'
  prefs: []
  type: TYPE_TB
- en: '| Display all key bindings | `C-h b` |'
  prefs: []
  type: TYPE_TB
- en: '| Tutorial | `C-h C-t` |'
  prefs: []
  type: TYPE_TB
- en: Table 7.1 – GNU Emacs common key combinations
  prefs: []
  type: TYPE_NORMAL
- en: GNU Emacs is very flexible and runs without a graphical interface, in the terminal.
    This is where it becomes an essential tool in system administration.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now take a look at an overview of the advanced usage of GNU Emacs.
  prefs: []
  type: TYPE_NORMAL
- en: Mastering GNU Emacs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At first glance, GNU Emacs looks like a very complex way to edit files because
    it uses different keyboard combinations than those used by other text editors.
    But for the day-to-day tasks of the system administrator, running from the terminal,
    GNU Emacs is a powerful solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s give an overview of this using a small example. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open **GNU Emacs** in the terminal by running the **emacs** command with the
    **--****no-window-system** parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 7.7 – GNU Emacs on the terminal](img/B19121_07_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – GNU Emacs on the terminal
  prefs: []
  type: TYPE_NORMAL
- en: From the start screen, browse to the test file to be modified.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Press the *Ctrl* key plus the *x* key (*C-x*) to enter command mode, followed
    by the *Ctrl* and *f* keys (*C-f*) to find the file to edit. Press the *Tab* key
    to display the contents of the directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.8 – Find the file to edit](img/B19121_07_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8 – Find the file to edit
  prefs: []
  type: TYPE_NORMAL
- en: The file to edit is the **test** file. Type **test** in **Find file** at the
    bottom to open the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.9 – Opening the test file](img/B19121_07_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.9 – Opening the test file
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The file mentioned previously is available in the book’s GitHub repository at
    [https://github.com/PacktPublishing/Fedora-Linux-System-Administration/tree/main/chapter7](https://github.com/PacktPublishing/Fedora-Linux-System-Administration/tree/main/chapter7).
  prefs: []
  type: TYPE_NORMAL
- en: This `test` file is a combination of the `/etc/group` and `/``etc/passwd` files.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.10 – test file](img/B19121_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.10 – test file
  prefs: []
  type: TYPE_NORMAL
- en: Suppose that you need to see the contents of both files within the **test**
    file. On the line where one of them ends, split the screen and move between the
    contents of each of them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To split the screen, press *Ctrl* plus the *x* and *2* keys (*C-x-2*):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.11 – Split screen](img/B19121_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.11 – Split screen
  prefs: []
  type: TYPE_NORMAL
- en: In Emacs, a **buffer** contains a process or a file. A **window** is the view
    of a buffer. The **frame** is the desktop window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following figure shows these concepts:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.12 – Buffers, windows, and frame](img/B19121_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.12 – Buffers, windows, and frame
  prefs: []
  type: TYPE_NORMAL
- en: This means that we split the frame into two windows. Each buffer edits the same
    `test` file.
  prefs: []
  type: TYPE_NORMAL
- en: If needed, each buffer could open different files, split the frame into more
    horizontal and vertical windows, or open other frames.
  prefs: []
  type: TYPE_NORMAL
- en: To change the buffer, press the *Ctrl* key with the *x* key plus the *o* key
    (*C-x-o*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This adds a line of plus signs (**+**) to separate the contents of the files.
    Save the file by pressing the *Ctrl* key with the *x* key (*C-x*) plus the *Ctrl*
    key with the *s* key (*C-s*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.13 – Saving changes](img/B19121_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.13 – Saving changes
  prefs: []
  type: TYPE_NORMAL
- en: Quit the saved file by pressing the *Ctrl* key with the *x* key (*C-x*) plus
    the *Ctrl* key with the *c* key (*C-c*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following table shows advanced tasks with their corresponding key combinations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Text Selection |'
  prefs: []
  type: TYPE_TB
- en: '| Start selection | `C-`*<space>* or `C-@` |'
  prefs: []
  type: TYPE_TB
- en: '| Deselect | `C-g` |'
  prefs: []
  type: TYPE_TB
- en: '| Undo |'
  prefs: []
  type: TYPE_TB
- en: '| Undo | `C-/` or `C-x-u` |'
  prefs: []
  type: TYPE_TB
- en: '| Panic! |'
  prefs: []
  type: TYPE_TB
- en: '| Cancel a command or operation in progress | `C-g` |'
  prefs: []
  type: TYPE_TB
- en: '| Copy & Paste |'
  prefs: []
  type: TYPE_TB
- en: '| Yank | `C-y` |'
  prefs: []
  type: TYPE_TB
- en: '| Cut line after cursor | `C-k` |'
  prefs: []
  type: TYPE_TB
- en: '| Cut word after cursor | `M-d` |'
  prefs: []
  type: TYPE_TB
- en: '| Navigation |'
  prefs: []
  type: TYPE_TB
- en: '| Previous line | `C-p` |'
  prefs: []
  type: TYPE_TB
- en: '| Next line | `C-n` |'
  prefs: []
  type: TYPE_TB
- en: '| Back a character | `C-b` |'
  prefs: []
  type: TYPE_TB
- en: '| Back a word | `M-b` |'
  prefs: []
  type: TYPE_TB
- en: '| Forward a character | `C-f` |'
  prefs: []
  type: TYPE_TB
- en: '| Forward a word | `M-f` |'
  prefs: []
  type: TYPE_TB
- en: '| Go to start of line | `C-a` |'
  prefs: []
  type: TYPE_TB
- en: '| Go to end of line | `C-e` |'
  prefs: []
  type: TYPE_TB
- en: '| Frames, windows, and buffers |'
  prefs: []
  type: TYPE_TB
- en: '| Vertical split | `C-x-3` |'
  prefs: []
  type: TYPE_TB
- en: '| Horizontal split | `C-x-2` |'
  prefs: []
  type: TYPE_TB
- en: '| No splits | `C-x-1` |'
  prefs: []
  type: TYPE_TB
- en: '| Remove window | `C-x-0` |'
  prefs: []
  type: TYPE_TB
- en: '| Visit other window | `C-x-o` |'
  prefs: []
  type: TYPE_TB
- en: '| Open a new frame | `C-x-5-2` |'
  prefs: []
  type: TYPE_TB
- en: Table 7.2 – GNU Emacs advanced key combinations
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s see how to add enhancements to the text editor.
  prefs: []
  type: TYPE_NORMAL
- en: Powering GNU Emacs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'GNU Emacs has some essential features. Not all implemented, but conceptualized:'
  prefs: []
  type: TYPE_NORMAL
- en: '*It has lots of plugins*. Not all text editors have plugins, and not all need
    them. Sometimes the only feature needed is simplicity. For a text editor used
    for hours a day, plugins add valuable enhancements and improvements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*It is a customizable environment that could become a complete desktop environment*,
    for example, keeping track of projects, tasks, and events, organizing emails and
    chats, and managing remote servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Provides powerful and flexible key combinations and keymaps configurable for*
    *specific modes*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Every aspect of the environment is customizable*. It allows modifying the
    user interface of all applications: the help system, the file and workspace tabs,
    and the fonts and colors of the user interface elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Install these enhancements through GNU Emacs. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'List the available packages, inside GNU Emacs, by pressing the *Meta* (*Alt*)
    key and the *x* key. Enter the package command mode, distinguished at the bottom
    of the window by the *M-x* combination:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.14 – Package command mode](img/B19121_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.14 – Package command mode
  prefs: []
  type: TYPE_NORMAL
- en: 'Type **list-packages** and hit *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.15 – List packages](img/B19121_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.15 – List packages
  prefs: []
  type: TYPE_NORMAL
- en: 'The window shows the packages available for installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.16 – List of available packages](img/B19121_07_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.16 – List of available packages
  prefs: []
  type: TYPE_NORMAL
- en: 'To find a package, for example, **yaml-mode**, to help us with YAML syntax.
    In the list, press the *Ctrl* key and the *s* key (*C-s*). Type **yaml-mode**
    at the bottom to find the selected package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.17 – Searching for the package to install](img/B19121_07_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.17 – Searching for the package to install
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This requires the **emacs-yaml-mode.noarch** package installed to work.
  prefs: []
  type: TYPE_NORMAL
- en: To view the package description, press the *Meta* (*Alt*) key plus the *x* key
    (*M-x*) and type **describe-package**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.18 – Describing package](img/B19121_07_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.18 – Describing package
  prefs: []
  type: TYPE_NORMAL
- en: 'This splits the window horizontally. To switch to the *description window*,
    press the *Ctrl* key and the *x* key, followed by the *o* key (*C-x-o*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.19 – Description window](img/B19121_07_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.19 – Description window
  prefs: []
  type: TYPE_NORMAL
- en: Close the window by pressing the *Ctrl* key and the *x* key, followed by the
    *0* key (*C-x-0*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mark the **yaml-mode** package for installation by pressing the *Meta* (*Alt*)
    key and the *x* key (*M-x*) and type **package-menu-mark-install**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.20 – Marking the package to install](img/B19121_07_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.20 – Marking the package to install
  prefs: []
  type: TYPE_NORMAL
- en: 'This adds an `I` to the left side of the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.21 – Package marked for installation](img/B19121_07_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.21 – Package marked for installation
  prefs: []
  type: TYPE_NORMAL
- en: To install the package, press the *Meta* (*Alt*) key and the *x* key, and type
    **package-install-selected-packages**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.22 – Installing marked packages](img/B19121_07_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.22 – Installing marked packages
  prefs: []
  type: TYPE_NORMAL
- en: Exit Emacs using *C-x* + *C-c* .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The installation is very fast. Open a YAML file to see the *help* menu with
    the syntax of the package:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.23 – YAML file](img/B19121_07_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.23 – YAML file
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the previous figure, a lot of packages and plugins could be installed
    to help us with a particular feature.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'On the internet, you will find many examples of packages and plugins. As a
    personal recommendation, check out this Reddit thread, with the must-have packages
    according to the community: [https://www.reddit.com/r/emacs/comments/w4gxoa/what_are_some_musthave_packages_for_emacs/](https://www.reddit.com/r/emacs/comments/w4gxoa/what_are_some_musthave_packages_for_emacs/).'
  prefs: []
  type: TYPE_NORMAL
- en: GNU Emacs, especially for a novice user, seems very complex to use. This led
    to the popularization of simpler text editors. One of the most popular ones, which
    became the default text editor in Fedora Linux, is **Nano**.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now review the basic principles of its use.
  prefs: []
  type: TYPE_NORMAL
- en: Nano basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GNU nano was designed as a free replacement for the Pico text editor, which
    was part of the University of Washington’s Pine email suite.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of 1999, **Chris Allegretta** left **Slackware** for **Debian**.
    He missed having a package that included **Pine** and **Pico**. So, he decided
    to make a Pico clone, at that time called **Tip Isn’t** **Pico** (**TIP**).
  prefs: []
  type: TYPE_NORMAL
- en: In January 2000, TIP was renamed **nano** due to a conflict with another program
    called **tip**, included with many older Unix systems.
  prefs: []
  type: TYPE_NORMAL
- en: In February 2001, nano received an official GNU declaration from Richard Stallman.
    `nano` also reached its first production release on March 22, 2001.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new file, as a *non-root* user, run the `nano` command from the
    terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 7.24 – Nano text editor](img/B19121_07_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.24 – Nano text editor
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom taskbar of the window, there are help commands for the editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.25 – Help commands for nano](img/B19121_07_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.25 – Help commands for nano
  prefs: []
  type: TYPE_NORMAL
- en: Unlike `emacs`, `nano` denotes the *Ctrl* key with the circumflex accent symbol
    (`^`), so the help menu is displayed by pressing the *Ctrl* key with the *G* key.
    To exit, press the *Ctrl* and *X* keys.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more information about why the circumflex accent symbol (**^**) is used
    for *Ctrl*, please refer to [https://retrocomputing.stackexchange.com/questions/10925/why-do-we-use-caret-as-the-symbol-for-ctrl-control](https://retrocomputing.stackexchange.com/questions/10925/why-do-we-use-caret-as-the-symbol-for-ctrl-control).
  prefs: []
  type: TYPE_NORMAL
- en: Besides the *Ctrl* key, `nano` also uses the *Alt* key and some symbols as part
    of its commands for specific tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows the most common tasks with their corresponding key
    combination:'
  prefs: []
  type: TYPE_NORMAL
- en: '| File Management |'
  prefs: []
  type: TYPE_TB
- en: '| Display help | `^G` |'
  prefs: []
  type: TYPE_TB
- en: '| Exit | `^X` |'
  prefs: []
  type: TYPE_TB
- en: '| Write the current file | `^O` |'
  prefs: []
  type: TYPE_TB
- en: '| Insert another file into the current one | `^R` |'
  prefs: []
  type: TYPE_TB
- en: '| Editing |'
  prefs: []
  type: TYPE_TB
- en: '| Insert a new line at the cursor position | `^M` |'
  prefs: []
  type: TYPE_TB
- en: '| Delete the character under the cursor | `^D` |'
  prefs: []
  type: TYPE_TB
- en: '| Delete the character to the left of the cursor | `^H` |'
  prefs: []
  type: TYPE_TB
- en: '| Insert a tab at the cursor position | `^I` |'
  prefs: []
  type: TYPE_TB
- en: '| Justify the current paragraph | `^J` |'
  prefs: []
  type: TYPE_TB
- en: '| Justify the entire file | `Alt+J` |'
  prefs: []
  type: TYPE_TB
- en: '| Count the number of words, lines, and characters | `Alt+D` |'
  prefs: []
  type: TYPE_TB
- en: '| Search and Replace |'
  prefs: []
  type: TYPE_TB
- en: '| Search for a string or a regular expression | `^W` |'
  prefs: []
  type: TYPE_TB
- en: '| Replace a string or a regular expression | `^\` |'
  prefs: []
  type: TYPE_TB
- en: '| Repeat the last search | `Alt+W` |'
  prefs: []
  type: TYPE_TB
- en: Table 7.3 – GNU nano common key combinations
  prefs: []
  type: TYPE_NORMAL
- en: GNU nano stands out for its *simplicity*, in terms of its interface and use.
  prefs: []
  type: TYPE_NORMAL
- en: Another text editor, not as simple as `nano`, nor as complex as `emacs`, is
    the vim editor.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s step through the Vim editor and its customization possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: The mighty vim
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Vim** (an acronym for **Vi IMproved**) is an *enhanced* version of the **Vi**
    text editor, present in all UNIX systems. Bram Moolenaar introduced the first
    version in 1991.'
  prefs: []
  type: TYPE_NORMAL
- en: Vim is a powerful editor that offers many out-of-the-box features. The use of
    plugins adds new features, making it easier to adapt Vim to specific workflows.
    Many plugins focus on general functionality, such as locating files, providing
    information, and dealing with different file syntaxes or Git versioning.
  prefs: []
  type: TYPE_NORMAL
- en: Vim comes included in the Fedora Linux base installation, although not as the
    default text editor. To change it to the default text editor, add it to the shell
    configuration file. In Bash, this file is `~/.bashrc` or `~/.bash_profile`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following global variables to set the vim editor as the default editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: set ts=2 ← [1]
  prefs: []
  type: TYPE_NORMAL
- en: set et   ← [2]
  prefs: []
  type: TYPE_NORMAL
- en: set ai   ← [3]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: :command! TellDate echo call("strftime", [<args>])
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: :TellDate "%F"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: :TellDate "%H:%M"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '{functionName}() function.'
  prefs: []
  type: TYPE_NORMAL
- en: '{some_tasks}'
  prefs: []
  type: TYPE_NORMAL
- en: endfunction
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: nmap x dd
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: :help map.txt
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[acallejas@workstation ~]$ mkdir -p .vim'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ cd .vim
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $ wget https://github.com/vim-airline/vim-airline/archive/refs/tags/v0.11.tar.gz
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ tar xzf v0.11.tar.gz
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ mv vim-airline-0.11 vim-airline
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ mkdir -p pack/dist/start
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $ mv vim-airline pack/dist/start/
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ sudo dnf install powerline-fonts
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ cd
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $ vim .vimrc
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ vim test
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
