- en: '*Chapter 16*: Shell Script Examples for Server Management, Network Configuration,
    and Backups'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've covered everything that we wanted to cover in terms of various
    concepts and structures in Bash shell scripting, let's dig into some examples.
    This will allow us to put these last few chapters to good use as shell scripts
    are the most commonly used tools in system engineers' daily jobs. Due to this,
    we are going to go through some shell scripts to emphasize the point of scripting
    – to make our lives a lot easier.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Creating a file and folder inventory
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking if you're running as root
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying server stats
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding files by name, ownership, or content type and copying them to a specified
    directory
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsing date and time data
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the most common firewall settings interactively (`firewalld` and
    `ufw`)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring network settings interactively (`nmcli`)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backing up the current directory with shell script arguments and variables
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a current backup based on the user input for the backup source and
    destination
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's continue using our Ubuntu machine, specifically the `cli1` machine. If
    you've not started it up yet, please start it now so that we can go through our
    examples. We will use the `cli2` CentOS machine for a few recipes as well, so
    make sure that you start that one when the time comes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Creating a file and folder inventory
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with something basic – a script that reports in terms of folder
    and file inventory. As simple as this is, this type of script can use a variety
    of different tools, including commands, built-in CLI applications, loops – there
    are a lot of choices to be made. We're going to do this in the simplest way possible
    – by taking advantage of our knowledge of commands and CLI applications. We're
    going to create a couple of different versions of this script as it can be used
    in a variety of different ways – for example, as input into future shell scripts
    or as plain text reporting tools.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start by creating a script that''s just going to tell us the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: The number of folders in the current folder and their sizes, sorted by size
    in descending order
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of files in the current folder and their size, sorted by size in
    descending order
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s the first version of our script – we saved it as a file called `sscript1.sh`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As we can see, we only used basic commands here, without going into a lot of
    looping, actual programming, and so on. Let's treat this as a reporting script
    and go from there.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'On our `cli1` machine, this was the result:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.1 – First version of our folder and file inventory script'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.1_B16269.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.1 – First version of our folder and file inventory script
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: This is working and can be used for reports – yep, that's all good. But what
    happens if we want some more functionality? What if we were to use the first version
    of this script to generate a .`txt` file that contains lists of files in the current
    directory, modify it a little bit, and then use this file for something else,
    such as to copy those files to a pre-configured location?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这已经可以工作，并且可以用于报告——是的，一切正常。但是如果我们想要更多功能怎么办？假设我们使用这个脚本的第一个版本生成一个 `.txt` 文件，里面包含当前目录中文件的列表，稍作修改后，再利用这个文件做其他事情，比如将这些文件复制到预设位置。
- en: 'We would need to make some adjustments, as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做一些调整，具体如下：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The next script we'll look at is simple but very, very useful – it's about checking
    if we're running the script as root. The reasoning is simple – there will be scripts
    that we don't want to run as root for fear of messing something up, in which case
    we'd use some accessible resources. Let's see how that would work.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的脚本虽然简单，但非常非常有用——它是用来检查我们是否以 root 身份运行脚本。这个逻辑很简单——有些脚本我们不希望以 root 身份运行，因为怕不小心破坏系统配置，这时我们就会利用一些可访问的资源。我们来看看怎么做。
- en: See also
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'If you need more information about `sort`, `find`, `wc`, `cut` or `sed`, we
    suggest that you visit these links:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要更多关于 `sort`、`find`、`wc`、`cut` 或 `sed` 的信息，建议访问以下链接：
- en: '`sort` command man page: [https://man7.org/linux/man-pages/man1/sort.1.html](https://man7.org/linux/man-pages/man1/sort.1.html)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort` 命令手册页: [https://man7.org/linux/man-pages/man1/sort.1.html](https://man7.org/linux/man-pages/man1/sort.1.html)'
- en: '`find` command man page: [https://man7.org/linux/man-pages/man1/find.1.html](https://man7.org/linux/man-pages/man1/find.1.html)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`find` 命令手册页: [https://man7.org/linux/man-pages/man1/find.1.html](https://man7.org/linux/man-pages/man1/find.1.html)'
- en: '`wc` command man page: [https://man7.org/linux/man-pages/man1/wc.1.html](https://man7.org/linux/man-pages/man1/wc.1.html)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wc` 命令手册页: [https://man7.org/linux/man-pages/man1/wc.1.html](https://man7.org/linux/man-pages/man1/wc.1.html)'
- en: '`cut` command man page: [https://man7.org/linux/man-pages/man1/cut.1.html](https://man7.org/linux/man-pages/man1/cut.1.html)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cut` 命令手册页: [https://man7.org/linux/man-pages/man1/cut.1.html](https://man7.org/linux/man-pages/man1/cut.1.html)'
- en: '`sed` command man page: [https://man7.org/linux/man-pages/man1/sed.1.html](https://man7.org/linux/man-pages/man1/sed.1.html)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sed` 命令手册页: [https://man7.org/linux/man-pages/man1/sed.1.html](https://man7.org/linux/man-pages/man1/sed.1.html)'
- en: Checking if you're running as root
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查你是否以 root 身份运行
- en: There are different ways of checking if we're running a script as root. We can
    use environment variables, just as we can use the `whoami` or `id` commands to
    check if it equals root/number `0` or not.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的方法可以检查我们是否以 root 身份运行脚本。我们可以使用环境变量，也可以使用 `whoami` 或 `id` 命令，检查返回的是否是 root
    或数字 `0`。
- en: Getting ready
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We'll continue using the `cli1` machine for this recipe, so make sure that it's
    powered on.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用 `cli1` 机器来进行本教程，所以确保它已开启。
- en: How to do it…
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'Let''s create a short snippet of Bash shell script code that''s going to help
    us find out whether we''re running a script as root or not. It''s a rather simple
    thing to do in Linux, considering that we have easy access to an environment variable
    called `EUID`, and reading its value is enough to determine whether we''re running
    as root (EUID=0) or not (EUID value > 1):'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的 Bash 脚本片段，帮助我们判断当前脚本是否以 root 身份运行。在 Linux 中，这其实是一个很简单的操作，因为我们可以轻松访问一个叫做
    `EUID` 的环境变量，读取它的值即可判断我们是否以 root 身份运行（EUID=0）还是以其他身份运行（EUID 大于 1）：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The next example that we're going to cover is about displaying server stats.
    We're going to use the `sar` command to do so. Let's go!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的例子我们将讨论如何显示服务器统计信息。我们将使用 `sar` 命令来实现，开始吧！
- en: See also
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: If you need more information about internal variables, we suggest that you go
    to [https://tldp.org/LDP/abs/html/internalvariables.html](https://tldp.org/LDP/abs/html/internalvariables.html).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要更多关于内部变量的信息，建议访问 [https://tldp.org/LDP/abs/html/internalvariables.html](https://tldp.org/LDP/abs/html/internalvariables.html)。
- en: Displaying server stats
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示服务器统计信息
- en: 'Let''s say that we have to write a shell script that''s going to display the
    following pieces of information:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们需要编写一个 shell 脚本，显示以下信息：
- en: Current hostname
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前主机名
- en: Current date
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前日期
- en: Current kernel version
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前内核版本
- en: Current CPU usage
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前 CPU 使用情况
- en: Current memory usage
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前内存使用情况
- en: Current swap space usage
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前交换空间使用情况
- en: Current disk I/O
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前磁盘 I/O
- en: Current network bandwidth
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前网络带宽
- en: This is more of an exercise in filtering data and using commands, but there
    are some interesting concepts in terms of how to format data to look *nice* and
    *readable*. This is something we consider to be very important.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to leave the `cli1` machine running. Also, for this script to work,
    we need to deploy the `sysstat` package, and then enable the necessary service.
    We can do this by using the following command for Ubuntu:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can use the following command for CentOS:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After that, we need to start the `sysstat` service:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, we can start working on our script.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to use the `sar` command to get a lot of information about our
    Linux machine. We are also going to filter out some of the unnecessary details.
    Our script should look like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We used `echo ""` multiple times here so that our output looks clean and readable.
    The output should look like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.2 – Displaying the server stats from our script'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.2_B16269.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.2 – Displaying the server stats from our script
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: The next recipe is about finding content – by name, ownership, or extension
    – so that we can copy the content we find to a specific location. Let's get started!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you need to learn more about the `sar` command, take a look at the `sar`
    command's man page at [https://man7.org/linux/man-pages/man1/sar.1.html](https://man7.org/linux/man-pages/man1/sar.1.html).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Finding files by name, ownership, or content type and copying them to a specified
    directory
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing files can be a bit of a burden. Usually, we have thousands of them,
    and if it's an enterprise-level company that we're discussing, there might be
    millions. What happens if we need to find files that follow specific criteria?
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: We'll start with something simpler – finding by name. Then, we'll move on to
    ownership-based searches, and then, the most involved – content type-based searches.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you start this recipe, you need to make sure that our `cli1` virtual
    machine is up and running.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a perfect script to do a bit more interaction, so case loops are in
    store for us. We're making a conscious effort to use case a lot, with a lot of
    status/debugging code that can guide us through script usage.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to slice this script into three parts as it''s going to do three different
    things. Here''s what the script will look like:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Note that when we''re asked about the extension, we have to type something
    like `*.txt` for this script to work. Here''s what the script execution looks
    like with that extension in mind:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.3 – Script execution with a file extension as the criteria'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.3_B16269.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.3 – Script execution with a file extension as the criteria
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: In the next recipe, we'll learn how to work with date and time-based data, a
    concept that's often used in shell scripting for indexing purposes. While easy
    to use and understand, we need to learn how to use this concept programmatically,
    via variables. So, let's do that next!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个食谱中，我们将学习如何处理基于日期和时间的数据，这是在shell脚本中常用于索引的概念。虽然它易于使用和理解，但我们需要学习如何通过编程、通过变量来使用这个概念。那么，接下来我们就来做这件事！
- en: There's more…
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'If you need more information about the `sar` command, we recommend that you
    check out the following link to learn more: `https://www.howtogeek.com/662422/how-to-use-linuxs-screen-command/`.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要更多关于`sar`命令的信息，建议您查看以下链接以了解更多：`https://www.howtogeek.com/662422/how-to-use-linuxs-screen-command/`。
- en: Parsing date and time data
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析日期和时间数据
- en: Working with time-based data is often less than fun, especially when you're
    working with a lot of time-based content. But for our use cases, we often use
    date/time information for indexing; that is, to name our backup files and similar
    purposes. So, learning how to get information from the `date` command and putting
    that information into variables so that our code can be as modular as possible
    is very important. Let's create a shell script that we are going to be able to
    use in future scripts as a snippet of code for a lot of our shell scripts – at
    least bits and pieces of it.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 处理基于时间的数据通常不太有趣，尤其是当你处理大量时间相关内容时。但在我们的使用场景中，我们通常使用日期/时间信息进行索引；也就是说，用它来命名我们的备份文件及类似用途。因此，学习如何从`date`命令获取信息，并将这些信息存储到变量中，以便让我们的代码尽可能模块化，是非常重要的。让我们创建一个shell脚本，作为将来脚本中可复用的代码片段——至少是其中的部分。
- en: Getting ready
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We don't need any special utilities to be installed, just our Linux machine
    to be alive and ready for action.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要安装任何特殊的工具，只需要我们的Linux机器处于活动状态并准备就绪。
- en: How to do it…
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做……
- en: 'We are going to go back to the basics and use the `date` command to extract
    all of the date and time pieces that we''ll ever need:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将回归基础，使用`date`命令提取我们未来可能需要的所有日期和时间信息：
- en: Information about the current time in terms of hours, minutes, and seconds
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前时间（以小时、分钟和秒表示）的信息
- en: Information about today's date
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 今天日期的信息
- en: Information about what day it is today
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 今天是星期几的信息
- en: 'Let''s type the following in our text editor and execute our script:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在文本编辑器中输入以下内容并执行脚本：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here''s an example of the sample output. We called this script `sscript2.sh`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这是示例输出的一个例子。我们将此脚本命名为`sscript2.sh`：
- en: '![Figure 16.4 – Sample output from our date and time script'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.4 – 我们的日期和时间脚本的示例输出'
- en: '](img/Figure_16.4_B16269.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_16.4_B16269.jpg)'
- en: Figure 16.4 – Sample output from our date and time script
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.4 – 我们的日期和时间脚本的示例输出
- en: This can be very useful for backup scripts – for example, when we're indexing
    backup files (`.tar.gz` or something else) by dates. This is a concept that we're
    going to use later in this chapter. For now, let's learn how to configure firewall
    settings via shell scripts.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这对备份脚本非常有用——例如，当我们按日期为备份文件（`.tar.gz`或其他格式）进行索引时。这是我们将在本章后续使用的一个概念。现在，让我们学习如何通过shell脚本配置防火墙设置。
- en: Configuring the most common firewall settings interactively
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互式配置最常见的防火墙设置
- en: Firewall configuration is just one of those things – we often need to do it,
    but we don't necessarily know all of the commands off the top of our heads. Let's
    do this via shell scripts, for both CentOS (`firewalld`) and Ubuntu (`ufw`).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 防火墙配置就是这样的事情——我们经常需要做这件事，但我们不一定能马上记得所有命令。让我们通过shell脚本来完成它，适用于CentOS（`firewalld`）和Ubuntu（`ufw`）。
- en: Getting ready
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Before you start this recipe, you need to make sure that you have `firewalld`
    on your CentOS machine and `ufw` on your Ubuntu machine up. So, first, you need
    to use the following command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始本食谱之前，您需要确保您的CentOS机器上已经启动了`firewalld`，Ubuntu机器上启动了`ufw`。因此，首先，您需要使用以下命令：
- en: '[PRE9]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Use the following command for CentOS and Ubuntu:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在CentOS和Ubuntu上使用以下命令：
- en: '[PRE10]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If they''re disabled, we need to turn them on, like so:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它们被禁用，我们需要像这样启用它们：
- en: '[PRE11]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'On CentOS and Ubuntu, you can use the following command:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在CentOS和Ubuntu上，您可以使用以下命令：
- en: '[PRE12]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, we're ready to get started. Of course, you need to be logged in as an administrator
    to be able to change your firewall configuration, so make sure that you're either
    logged in as root (or a user with similar capabilities) or use the sudo configuration
    to change your firewall configuration.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好开始了。当然，你需要以管理员身份登录才能更改防火墙配置，所以确保你已经以 root 用户（或具有类似权限的用户）登录，或者使用 sudo
    配置来更改防火墙配置。
- en: 'Furthermore, with `firewalld`, a lot of people have trouble remembering the
    service names that it uses. That''s not a problem – we just need to use the following
    command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用 `firewalld` 时，很多人很难记住它使用的服务名称。其实这不是什么问题——我们只需要使用以下命令：
- en: '[PRE13]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: For `ufw`, we just need to go and look at `/etc/service`, since all of the service
    names are listed there, and `ufw` uses them for configuration purposes.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `ufw`，我们只需查看 `/etc/service`，因为所有服务名称都列在那里，并且 `ufw` 使用这些名称进行配置。
- en: How to do it…
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'First, let''s make a CentOS-based script for `firewalld`. We''ll include eight
    standard operations – manipulating service configuration, TCP and UDP ports and
    rich rules, both adding and removing them, as well as the capability to list current
    configuration. Here''s what the script should look like:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们为 `firewalld` 创建一个基于 CentOS 的脚本。我们将包括八个标准操作——操作服务配置、TCP 和 UDP 端口及丰富规则，既能添加也能删除，同时具备列出当前配置的功能。脚本应该是这样的：
- en: '[PRE14]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This is a lot of code, but it makes it so much more readable (since we're using
    a case loop). We could've done this in a couple of different ways, but this is
    the easiest code to debug, and, most importantly, it works well.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这是很多代码，但它让代码变得更加可读（因为我们使用了 case 循环）。我们本可以用几种不同的方式做到这一点，但这是最容易调试的代码，最重要的是，它能很好地工作。
- en: 'Now, let''s look at Ubuntu''s `ufw` script, which is going to be very similar
    – we just need to get the `ufw` commands correct. We''re also going to look at
    two different ways of deleting rules (by an index number and by rule), just so
    that we know how to get on with both:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下 Ubuntu 的 `ufw` 脚本，它将非常相似——我们只需要确保 `ufw` 命令正确即可。我们还将查看两种删除规则的方法（通过索引号和通过规则），这样我们就知道如何同时进行操作：
- en: '[PRE15]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: There we go – that's another long script done. This should help us when we're
    using Ubuntu a lot. Next, we will be going in a different direction – using `nmcli`
    in interactive, scripted mode to configure network settings on CentOS.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 好了——这是另一个长脚本完成了。这应该能帮助我们在频繁使用 Ubuntu 时。接下来，我们将进入一个不同的方向——使用 `nmcli` 在交互式脚本模式下配置
    CentOS 上的网络设置。
- en: There's more…
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'For additional information about the `firewall-cmd` and `ufw` command-line
    options, we suggest that you visit the following links:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 `firewall-cmd` 和 `ufw` 命令行选项的更多信息，我们建议你访问以下链接：
- en: '`firewall-cmd` man page: `https://firewalld.org/documentation/man-pages/firewall-cmd.html`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`firewall-cmd` 手册页: `https://firewalld.org/documentation/man-pages/firewall-cmd.html`'
- en: 'Configuring complex firewall rules with the *rich language* syntax: `https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/configuring_complex_firewall_rules_with_the_rich-language_syntax`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 *rich language* 语法配置复杂的防火墙规则：`https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/configuring_complex_firewall_rules_with_the_rich-language_syntax`
- en: 'ufw cheatsheet: `https://blog.rtsp.us/ufw-uncomplicated-firewall-cheat-sheet-a9fe61933330`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ufw 快捷手册：`https://blog.rtsp.us/ufw-uncomplicated-firewall-cheat-sheet-a9fe61933330`
- en: Configuring network settings interactively
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互式配置网络设置
- en: Often, we don't have access to GUIs and GUI-based configuration tools. If we
    need to configure network settings, this can lead to a bunch of problems. Either
    we need to learn the syntax of `/etc/sysconfig/network-script` files (not user-friendly),
    or we need to use the tools that are at our disposal to configure network settings
    from the CLI. Let's learn how to use `nmcli` for that purpose.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们没有访问图形界面（GUI）和基于 GUI 的配置工具。如果我们需要配置网络设置，这可能会导致一系列问题。要么我们需要学习 `/etc/sysconfig/network-script`
    文件的语法（这并不友好），要么我们需要使用可用工具从命令行界面（CLI）配置网络设置。让我们学习如何使用 `nmcli` 来实现这个目的。
- en: Getting ready
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Before you start this recipe, you need to make sure that you are using our `cli2`
    CentOS machine as Ubuntu doesn't use `nmcli` by default. Once you've done that,
    you're all set!
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始此配方之前，你需要确保你正在使用我们的 `cli2` CentOS 机器，因为 Ubuntu 默认不使用 `nmcli`。完成后，你就可以开始了！
- en: How to do it…
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Configuring network settings via `nmcli` isn''t difficult, but at the same
    time, it''s far from super user-friendly. There''s quite a bit of syntax involved
    and sometimes, that can get a bit overwhelming. So, let''s create a script that''s
    going to do three things for us:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Configure network settings via `nmcli` so that we use static IP network configuration.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure network settings via `nmcli` so that we use DHCP network configuration.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check/output the current network settings
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Our script should look like this:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here''s what the output will look if we use this script:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.5 – Configuring a network interface from a shell script to make
    it a static IP configuration'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.5_B16269.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.5 – Configuring a network interface from a shell script to make it
    a static IP configuration
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see, all of the network settings get applied. Also, for the second
    use case – which is to revert to using DHCP from an existing configuration – the
    output will look like this:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.6 – Reverting to our DHCP configuration with the BOOTPROTO parameter
    set up correctly'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.6_B16269.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.6 – Reverting to our DHCP configuration with the BOOTPROTO parameter
    set up correctly
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: This file also looks good, so we're good to go with this script as well.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: The next set of scripts we'll be looking at is about backups – one will use
    shell script arguments and variables, while the other will use one very handy
    `tar` characteristic. Let's work on some backup scripts!
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Screen` requires a bit of trial and error and getting used to. We recommend
    that you check out the following links to learn more:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '`nmcli` man page: `https://linux.die.net/man/1/nmcli`'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nmcli` examples: `https://people.freedesktop.org/~lkundrak/nm-docs/nmcli-examples.html`'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backing up the current directory with shell script arguments and variables
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most common reasons why system engineers use Bash shell scripting
    is for backup purposes. There are various tools available, but for shell scripting
    purposes, we are going to make a couple of `tar`-based shell scripts, work with
    arguments and variables, and learn how to make our jobs easier by using shell
    scripting for backup purposes. Let's take a look!
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you start this recipe, you need to make sure that you have `tar` installed
    on your Linux machine. For this, you need to use the following command:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If you''re using a CentOS-based machine, use the following command:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now, you're ready to get started.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our premise for this first backup script, which is based on `tar`, is simple:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: We want to be able to create a backup while using an argument to set the backup's
    filename.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We want to be able to easily change our shell script so that it can back up
    whatever number of directories we want (this is easy to do by listing the source
    directories in the `backup_source` variable).
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s see how this would work:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The process should look like this:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.7 – Simple backup script with argument'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.7 – 带参数的简单备份脚本](img/Figure_16.7_B16269.jpg)'
- en: '](img/Figure_16.7_B16269.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_16.7_B16269.jpg)'
- en: Figure 16.7 – Simple backup script with argument
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.7 – 带参数的简单备份脚本
- en: The `backup` word that we typed as part of the script is our `$1` argument in
    the script – the first argument that we start the script with. As we can see,
    the script did its job properly.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在脚本中输入的`backup`单词是脚本中的`$1`参数——即我们开始脚本时的第一个参数。正如我们所看到的，脚本正常执行了它的任务。
- en: There's more…
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'If you need any more information about the `tar` command, we suggest that you
    look at the following links:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要更多关于`tar`命令的信息，我们建议你查看以下链接：
- en: '`tar` command man page: [https://man7.org/linux/man-pages/man1/tar.1.html](https://man7.org/linux/man-pages/man1/tar.1.html)'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tar`命令手册页：[https://man7.org/linux/man-pages/man1/tar.1.html](https://man7.org/linux/man-pages/man1/tar.1.html)'
- en: '18 useful `tar` examples: [https://www.tecmint.com/18-tar-command-examples-in-linux/](https://www.tecmint.com/18-tar-command-examples-in-linux/)'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18个实用的`tar`命令示例：[https://www.tecmint.com/18-tar-command-examples-in-linux/](https://www.tecmint.com/18-tar-command-examples-in-linux/)
- en: Creating a current backup based on the user input for the backup source and
    destination
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于用户输入的备份源和目标创建当前备份
- en: After making backup scripts via `tar`, we need to make a completely interactive
    script that asks for all of the details from us to be inputted with the keyboard.
    Let's learn how to make this happen!
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`tar`制作备份脚本之后，我们需要制作一个完全互动的脚本，要求用户输入所有详细信息。让我们学习如何实现这一点！
- en: Getting ready
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备开始
- en: If you followed the previous recipe, then you won't need anything new – the
    same requirements apply.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你按照之前的步骤操作，那么你不需要任何新的东西——相同的要求适用。
- en: How to do it…
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Our premise has changed somewhat this time around. We want a fully functional
    backup script, but one that doesn''t use any static variables (like the previous
    one). Also, we want to be able to call this script at will, which is why we''re
    using multiple questions to set up the necessary variables. Here''s what the script
    should look like:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们的前提有所改变。我们希望有一个完全功能的备份脚本，但不使用任何静态变量（像之前那样）。此外，我们希望能够随时调用这个脚本，这就是为什么我们使用多个问题来设置必要的变量。脚本应该是这样的：
- en: '[PRE20]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This is simple, yet effective. Note that we used one very, very cool capability
    of the `tar` command, which is to use a list of directories for backup purposes,
    but specifically, as the list that's at *the end* of the `tar` command's syntax,
    which makes things a bit easier.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单，但也非常有效。请注意，我们使用了`tar`命令的一个非常酷的功能，那就是使用一个目录列表进行备份，特别是作为`tar`命令语法中*末尾*的列表，这使得操作变得稍微简单一些。
- en: In the next chapter, things are going to get progressively more complicated.
    Make sure that you check out the second part of our shell scripting examples there.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，事情将变得越来越复杂。确保查看我们那里的第二部分Shell脚本示例。
- en: There's more…
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'If you need any more information about the `tar` command, we suggest that you
    visit the following links:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要更多关于`tar`命令的信息，我们建议你访问以下链接：
- en: '`tar` command man page: [https://man7.org/linux/man-pages/man1/tar.1.html](https://man7.org/linux/man-pages/man1/tar.1.html)'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tar`命令手册页：[https://man7.org/linux/man-pages/man1/tar.1.html](https://man7.org/linux/man-pages/man1/tar.1.html)'
- en: '18 useful `tar` examples: [https://www.tecmint.com/18-tar-command-examples-in-linux/](https://www.tecmint.com/18-tar-command-examples-in-linux/)'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18个实用的`tar`命令示例：[https://www.tecmint.com/18-tar-command-examples-in-linux/](https://www.tecmint.com/18-tar-command-examples-in-linux/)
