["```\n$ git clone git://git.buildroot.net/buildroot -b 2024.02.6 \n```", "```\n$ cd buildroot\n$ make qemu_aarch64_virt_defconfig\n$ make \n```", "```\n$ qemu-system-aarch64 -M virt -cpu cortex-a53 -nographic -smp 1 -kernel output/images/Image -append \"rootwait root=/dev/vda console=ttyAMA0\" -netdev user,id=eth0 -device virtio-net-device,netdev=eth0 -drive file=output/images/rootfs.ext4,if=none,format=raw,id=hd0 -device virtio-blk-device,drive=hd0 \n```", "```\nBooting Linux on physical CPU 0x0000000000 [0x410fd034]\nLinux version 6.1.44 (frank@frank-nuc) (aarch64-buildroot-linux-gnu-gcc.br_real (Buildroot 2024.02.6) 12.4.0, GNU ld (GNU Binutils) 2.40) #1 SMP Wed Oct  9 21:24:21 PDT 2024\nrandom: crng init done\nMachine model: linux,dummy-virt\nefi: UEFI not found.\n<…>\nVFS: Mounted root (ext4 filesystem) readonly on device 254:0.\ndevtmpfs: mounted\nFreeing unused kernel memory: 1280K\nRun /sbin/init as init process\nEXT4-fs (vda): re-mounted. Quota mode: disabled.\nSaving 256 bits of creditable seed for next boot\nStarting syslogd: OK\nStarting klogd: OK\nRunning sysctl: OK\nStarting network: udhcpc: started, v1.36.1\nudhcpc: broadcasting discover\nudhcpc: broadcasting select for 10.0.2.15, server 10.0.2.2\nudhcpc: lease of 10.0.2.15 obtained from 10.0.2.2, lease time 86400\ndeleting routers\nadding dns 10.0.2.3\nOK\nWelcome to Buildroot\nbuildroot login: \n```", "```\n$ cd buildroot\n$ make clean\n$ make raspberrypi4_64_defconfig\n$ make \n```", "```\n$ mkdir -p board/meld/nova \n```", "```\n$ cp ../MELD/Chapter06/buildroot/configs/nova_defconfig configs/. \n```", "```\n$ cp ../MELD/Chapter06/buildroot/board/meld/nova/* board/meld/nova/. \n```", "```\n$ make clean \n```", "```\n$ make nova_defconfig \n```", "```\n$ cp ../MELD/Chapter03/0001-BSP-for-Nova.patch board/meld/nova/. \n```", "```\nimage boot.vfat {\n                vfat {\n                                files = {\n                                                \"tiboot3.bin\",\n                                                \"tispl.bin\",\n                                                \"u-boot.img\",\n                                                \"Image.gz\",\n                                                \"nova.dtb\",  // HERE\n                                }\n                }\n                size = 16M\n}\nimage sdcard.img {\n                hdimage {\n                }\n                partition u-boot {\n                                partition-type = 0xC\n                                bootable = \"true\"\n                                image = \"boot.vfat\"\n                }\n                partition rootfs {\n                                partition-type = 0x83\n                                image = \"rootfs.ext4\"\n                }\n} \n```", "```\n#!/bin/sh\nBOARD_DIR=\"$(dirname $0)\"\ncp ${BUILD_DIR}/ti-k3-r5-loader-2022.10/tiboot3.bin $BINARIES_DIR/tiboot3.bin\nGENIMAGE_CFG=\"${BOARD_DIR}/genimage.cfg\" GENIMAGE_TMP=\"${BUILD_DIR}/genimage.tmp\"\nrm -rf \"${GENIMAGE_TMP}\"\ngenimage \\\n    --rootpath \"${TARGET_DIR}\" \\\n    --tmppath \"${GENIMAGE_TMP}\" \\\n    --inputpath \"${BINARIES_DIR}\" \\\n    --outputpath \"${BINARIES_DIR}\" \\\n    --config \"${GENIMAGE_CFG}\" \n```", "```\n$ chmod +x board/meld/nova/post-image.sh \n```", "```\nbl31.bin                 rootfs.ext2  tee-header_v2.bin    tispl.bin\nboot.vfat                rootfs.ext4  tee-pageable_v2.bin  u-boot.img\nImage.gz                 rootfs.tar   tee-pager_v2.bin    \nnova.dtb                 sdcard.img   tiboot3.bin\nr5-u-boot-spl.bin        tee.bin      ti-connectivity \n```", "```\n$ make savedefconfig BR2_DEFCONFIG=configs/nova_defconfig \n```", "```\n$ make nova_defconfig \n```", "```\n$ PATH=<path_to_buildroot>/output/host/usr/bin:$PATH \n```", "```\n$ PATH=/home/frank/buildroot/output/host/usr/bin:$PATH\n$ aarch64-linux-gcc helloworld.c -o helloworld \n```", "```\n$ mkdir -p board/meld/nova/overlay/usr/bin\n$ cp helloworld board/meld/nova/overlay/usr/bin \n```", "```\n<package_name>.mk.\n```", "```\nconfig BR2_PACKAGE_HELLOWORLD\n    bool \"helloworld\"\n    help\n      A friendly program that prints Hello World! every 10s \n```", "```\nmenu \"My programs\"\n  source \"package/helloworld/Config.in\"\nendmenu \n```", "```\nHELLOWORLD_VERSION = 1.0.0\nHELLOWORLD_SITE = /home/frank/MELD/Chapter06/helloworld\nHELLOWORLD_SITE_METHOD = local\ndefine HELLOWORLD_BUILD_CMDS\n    $(MAKE) CC=\"$(TARGET_CC)\" LD=\"$(TARGET_LD)\" -C $(@D) all\nendef\ndefine HELLOWORLD_INSTALL_TARGET_CMDS\n    $(INSTALL) -D -m 0755 $(@D)/helloworld $(TARGET_DIR)/usr/bin/helloworld\nendef\n$(eval $(generic-package)) \n```", "```\n$ make legal-info \n```", "```\n$ git clone -b scarthgap git://git.yoctoproject.org/poky.git \n```", "```\n$ git clone -b scarthgap https://github.com/TexasInstruments-Sandbox/meta-ti \n```", "```\n$ git clone -b scarthgap git://git.yoctoproject.org/meta-arm \n```", "```\n$ source poky/oe-init-build-env \n```", "```\n$ source poky/oe-init-build-env build-qemu-arm64 \n```", "```\nMACHINE ?= \"qemuarm64\" \n```", "```\n$ bitbake core-image-minimal \n```", "```\n$ runqemu qemuarm64 \n```", "```\n$ runqemu qemuarm64 nographic \n```", "```\n$ source poky/oe-init-build-env build-nova\n$ bitbake-layers create-layer nova\n$ mv nova ../meta-nova \n```", "```\n# We have a conf and classes directory, add to BBPATH\nBBPATH .= \":${LAYERDIR}\"\n# We have recipes-* directories, add to BBFILES\nBBFILES += \"${LAYERDIR}/recipes-*/*/*.bb \\\n            ${LAYERDIR}/recipes-*/*/*.bbappend\"\nBBFILE_COLLECTIONS += \"nova\"\nBBFILE_PATTERN_nova = \"^${LAYERDIR}/\"\nBBFILE_PRIORITY_nova = \"6\"\nLAYERDEPENDS_nova = \"core\"\nLAYERSERIES_COMPAT_nova = \"scarthgap\" \n```", "```\n$ bitbake-layers add-layer ../meta-arm/meta-arm-toolchain\n$ bitbake-layers add-layer ../meta-arm/meta-arm\n$ bitbake-layers add-layer ../meta-ti/meta-ti-bsp \n```", "```\n$ bitbake-layers add-layer ../meta-nova \n```", "```\n$ bitbake-layers show-layers\nNOTE: Starting bitbake server...\nlayer                 path                                      priority\n==========================================================================\ncore                  /home/frank/poky/meta                     5\nyocto                 /home/frank/poky/meta-poky                5\nyoctobsp              /home/frank/poky/meta-yocto-bsp           5\narm-toolchain         /home/frank/meta-arm/meta-arm-toolchain   5\nmeta-arm              /home/frank/meta-arm/meta-arm             5\nmeta-ti-bsp           /home/frank/meta-ti/meta-ti-bsp           6\nnova                  /home/frank/meta-nova                     6 \n```", "```\n$ bitbake -c listtasks core-image-minimal \n```", "```\n$ bitbake -c fetch busybox \n```", "```\n$ bitbake core-image-minimal --runall=fetch \n```", "```\nmeta-nova/recipes-local/helloworld\n├── files\n│   └── helloworld.c\n└── helloworld_1.0.bb \n```", "```\nDESCRIPTION = \"A friendly program that prints Hello World!\"\nSECTION = \"examples\"\nLICENSE = \"GPL-2.0-only\"\nLIC_FILES_CHKSUM = \"file://${COMMON_LICENSE_DIR}/GPL-2.0-only;md5=801f80980d171dd6425610833a22dbe6\"\nSRC_URI = \"file://helloworld.c\"\nS = \"${WORKDIR}\"\ndo_compile() {\n    ${CC} ${CFLAGS} ${LDFLAGS} helloworld.c -o helloworld\n}\ndo_install() {\n    install -d ${D}${bindir}\n    install -m 0755 helloworld ${D}${bindir}\n} \n```", "```\nLICENSE_FLAGS = \"commercial\" \n```", "```\nLICENSE_FLAGS_ACCEPTED = \"commercial\" \n```", "```\n$ bitbake helloworld \n```", "```\nIMAGE_INSTALL:append = \" helloworld\" \n```", "```\n$ bitbake core-image-minimal \n```", "```\nIMAGE_INSTALL:append = \" helloworld\" \n```", "```\n$ cd ~\n$ ls poky/meta*/recipes*/images/*.bb\n$ ls meta*/recipes*/images/*.bb \n```", "```\nrequire recipes-core/images/core-image-minimal.bb\nIMAGE_INSTALL:append = \" helloworld strace\" \n```", "```\n$ bitbake nova-image \n```", "```\n$ bitbake -c populate_sdk nova-image \n```", "```\npoky-<c_library>-<host_machine>-<target_image>-<target_machine>-toolchain-<version>.sh \n```", "```\npoky-glibc-x86_64-nova-image-aarch64-beagleplay-toolchain-<version>.sh \n```", "```\n$ bitbake meta-toolchain \n```", "```\n$ deploy-ti/sdk/poky-glibc-x86_64-nova-image-aarch64-beagleplay-toolchain-5.0.3.sh\nPoky (Yocto Project Reference Distro) SDK installer version 5.0.3\n=================================================================\nEnter target directory for SDK (default: /opt/poky/5.0.3):\nYou are about to install the SDK to \"/opt/poky/5.0.3\". Proceed [Y/n]? Y\n[sudo] password for frank:\nExtracting SDK................................................................................................................done\nSetting it up...done\nSDK has been successfully set up and is ready to be used.\nEach time you wish to use the SDK in a new shell session, you need to source the environment setup script e.g.\n $ . /opt/poky/5.0.3/environment-setup-aarch64-poky-linux \n```", "```\n$ source /opt/poky/<version>/environment-setup-aarch64-poky-linux \n```", "```\n$ aarch64-poky-linux-gcc -print-sysroot\n/not/exist \n```", "```\n$ aarch64-poky-linux-gcc helloworld.c -o helloworld\nhelloworld.c:1:10: fatal error: stdio.h: No such file or directory\n    1 | #include <stdio.h>\n      |          ^~~~~~~~~\ncompilation terminated. \n```", "```\n$ echo $CC\naarch64-poky-linux-gcc -mbranch-protection=standard -fstack-protector-strong -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/opt/poky/5.0.3/sysroots/aarch64-poky-linux \n```", "```\n$ $CC -O helloworld.c -o helloworld \n```", "```\ntmp/deploy/licenses/beagleplay/nova-image-beagleplay.rootfs-20241012221506 \n```"]