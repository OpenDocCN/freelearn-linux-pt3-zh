- en: Auditing Security Policy with OpenSCAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout the two chapters that preceded this one, we established the value
    of applying a security policy such as the CIS Benchmark to your Enterprise Linux
    infrastructure. We have discussed a variety of methods for both applying it and
    ensuring it remains enforced; the latter point is especially important in an infrastructure
    where a wide array of people have superuser access to your Linux servers. Although
    we have established ways that both shell scripting and Ansible can assist with
    auditing the compliance of your infrastructure with your chosen security policy,
    we have also established that neither of these are particularly suited to providing
    readable and actionable reports of a large infrastructure. For example, it is
    entirely reasonable that an infrastructure security team might want a readable
    report showing the compliance of the infrastructure with the security policy,
    and neither shell scripting nor Ansible immediately lend themselves to this task.
  prefs: []
  type: TYPE_NORMAL
- en: Although there are a wide variety of infrastructure scanning tools available
    on the market, most of these are commercial and the focus of this book is on open
    source solutions that are accessible to any enterprise, regardless of their budget.
    Hence, in this chapter, we will consider the freely available OpenSCAP tool. **SCAP**
    stands for **Security Content Automation Protocol**, and it is a standardized
    solution for checking a Linux infrastructure for compliance against a given security
    policy (in our case, CIS). OpenSCAP is hence an open source implementation of
    SCAP that has been widely adopted by Enterprise Linux vendors including Red Hat.
    We will hence explore the process for setting up your own OpenSCAP infrastructure
    for compliance scanning and reporting. This, in turn, will enable all teams with
    a vested interest in infrastructure security to get oversight of the levels of
    compliance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing your OpenSCAP server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluating and selecting policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning the enterprise with OpenSCAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interpreting results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter includes examples based on the following technologies:'
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu Server 18.04 LTS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CentOS 7.6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible 2.8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To run through these examples, you will need access to two servers or virtual
    machines running one each of the operating systems listed previously and Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: All example code discussed in this book is available from GitHub at: [https://github.com/PacktPublishing/Hands-On-Enterprise-Automation-on-Linux](https://github.com/PacktPublishing/Hands-On-Enterprise-Automation-on-Linux).
  prefs: []
  type: TYPE_NORMAL
- en: Installing your OpenSCAP server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to scanning your infrastructure, we have a few decisions to make,
    as the OpenSCAP project provides a few tools that have overlapping functions.
    The reason for this is that they are targeted at different audiences—some are
    purely command line-driven and so lend themselves extremely well to scheduled,
    scripted tasks such as a monthly compliance report. At the time of writing, there
    are a total of five OpenSCAP tools available, and we will look at each of these
    in more detail in the following sections to enable you to make an educated decision
    as to which tool (or tools) are right for your enterprise.
  prefs: []
  type: TYPE_NORMAL
- en: In the following subsection, we will start by looking at the most fundamental
    tool, OpenSCAP Base.
  prefs: []
  type: TYPE_NORMAL
- en: Running OpenSCAP Base
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OpenSCAP Base tool provides the very fundamentals required to scan a single
    Linux machine and report on its compliance against a given policy. It actually
    consists of two components and so is a requirement for some of the other tools
    we will look at in the following subsections.
  prefs: []
  type: TYPE_NORMAL
- en: The first component of this tool is a command-line utility called `oscap`. This
    tool can be run on the local machine using an appropriate security policy and
    profile to produce a report of compliance. The report is generated in HTML and
    so although the process of report creation is very much manual, the final report
    is very easy to read and so is well suited for sending to a security or compliance
    team for audit or evaluation.
  prefs: []
  type: TYPE_NORMAL
- en: The second component of OpenSCAP Base includes a library that is used as a building
    block for other OpenSCAP services such as SCAP Workbench and the OpenSCAP Daemon—we
    will cover these in greater detail later in this section.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will only make use of the library when we use other OpenSCAP
    tools. We will see these tools in action later in this chapter in the section
    entitled* Scanning the enterprise with OpenSCAP*. For now, though, we will concern
    ourselves with the installation of OpenSCAP Base.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing OpenSCAP Base by hand on a single machine is incredibly easy—it
    already comes pre-packaged for the two key Linux distributions we have explored
    in this book—Ubuntu Server and CentOS (and hence, by extension, Red Hat Enterprise
    Linux). To install it on CentOS 7 or RHEL 7, you would simply run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, on Ubuntu Server 18.04 LTS, you would run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: It is important to remember that these packages include both the `oscap` command-line
    tool and the library as stated earlier in this section. Hence, even if you never
    intend to run OpenSCAP using the `oscap` CLI tool, the libraries that these packages
    contain could still be required for your given use case (for example, performing
    remote scans using SCAP Workbench).
  prefs: []
  type: TYPE_NORMAL
- en: As a result, it is important to consider deploying these packages using Ansible,
    and it may even be desirable to include them in your standard build image so that
    you know that you can remotely scan any given Linux server for compliance without
    needing to perform any prerequisite steps. We will look at how to run scans with
    the `oscap` tool in a subsequent section, entitled *Scanning the enterprise with
    OpenSCAP*—however, for now, it is sufficient to understand what this package is
    and why it might be required.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at installing the OpenSCAP Daemon, another
    part of the OpenSCAP toolset.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the OpenSCAP Daemon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security auditing is not a one-time task—given administrator-level (that is,
    root) access in a Linux environment, someone could make a Linux server non-compliant
    at any given time, either deliberately or through a well-meaning change. Hence,
    the results of a security scan really only guarantee that the server being scanned
    was compliant (or not) at the time of the scan itself.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, regular scanning of the environment is extremely important. There is
    a myriad of ways to achieve this, and you could even run the `oscap` command-line
    tool using a scheduler such as `cron` or via a scheduled Ansible playbook in AWX
    or Ansible Tower. However, the OpenSCAP Daemon is a native tool provided as part
    of the suite of OpenSCAP tools. Its purpose is to run in the background and perform
    scheduled scans against a given target or set of targets. This might be the local
    machine running the daemon, or it might be a set of remote machines, all accessed
    over SSH.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process of installation is again extremely simple—if you were to do this
    manually, you would, on an EL7 system (for example, RHEL7 or CentOS 7), run the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'On Ubuntu systems, the package name is identical, so you would run the following
    to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Although you could set up every machine in your Linux environment with this
    daemon and configure a job for each to scan itself regularly, this is prone to
    abuse as it would be easy for someone with root access to disable or otherwise
    tamper with the scan. As a result, we recommend that you consider setting up a
    centralized scanning architecture, with one central secure server performing remote
    scans across your network.
  prefs: []
  type: TYPE_NORMAL
- en: It is upon such a server that you would install the OpenSCAP Daemon and, once
    completed, you can use the `oscapd-cli` utility to configure your regular scans.
    We will take a more detailed look at this later in this chapter, in the section
    entitled *Scanning the enterprise with OpenSCAP*.
  prefs: []
  type: TYPE_NORMAL
- en: Although both of the tools we have considered so far are extremely powerful
    and can perform all of your auditing needs, they are entirely command-line-based
    and so might not be suited to users who are not comfortable in a shell environment
    or who are responsible for auditing scan results but not necessarily running them.
    This requirement is fulfilled by another tool in the OpenSCAP armory—**SCAP Workbench**.
    We shall look at installing this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Running SCAP Workbench
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SCAP Workbench is a graphical user interface to the SCAP toolset that is designed
    to provide users with an easy, intuitive way of performing common scanning tasks.
    Hence, it is well suited to less technical users or those who are more comfortable
    in a graphical environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'One thing of consideration is that SCAP Workbench is a graphical tool, and
    in many environments, Linux servers are run headless and without the graphical
    X environment installed. Hence, if you install it on an ordinary Linux server
    without a graphical environment, you will see an error such as the one shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/659c0283-2e74-4022-a35d-6153a717b584.png)'
  prefs: []
  type: TYPE_IMG
- en: Thankfully there are several ways to run SCAP Workbench. First of all, it is
    worth noting that it is a true cross-platform application, with downloads available
    for Windows, macOS, and most common Linux platforms, and as a result, the easiest
    path for most users will be to run it in their native operating system.
  prefs: []
  type: TYPE_NORMAL
- en: If, for consistency, you wish to run SCAP Workbench on Linux, you would either
    need to set up a remote X11 session or set up a dedicated scanning host that includes
    the graphical desktop environment. There is no right or wrong approach here—it
    really is up to you to decide which path suits your environment and working patterns
    best.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you choose to run from Linux, the installation of SCAP Workbench is no more
    difficult than for any of the other OpenSCAP tools we have considered:'
  prefs: []
  type: TYPE_NORMAL
- en: '1\. To install it on RHEL7/CentOS 7, you would run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'On Ubuntu Server, you would run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this is complete, you can then open SCAP Workbench using the appropriate
    method for your chosen operating system. If you are running it on a Linux server
    using a remote X session, it is as simple as running this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We will explore how to set up and run a scan from this graphical environment
    later in this chapter, in the section entitled *Scanning the enterprise with OpenSCAP*.
    Before we complete this part of this chapter, though, we will discuss two of the
    other tools on offer from the OpenSCAP project—SCAPTimony and the Anaconda Addon.
  prefs: []
  type: TYPE_NORMAL
- en: Considering other OpenSCAP tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this chapter, we have considered a variety of OpenSCAP tools for scanning
    and auditing your infrastructure. There are, however, two further tools available
    to you that we have not yet considered, though neither are truly interactive tools
    in the way that the ones we have considered so far are, and so they are not within
    the scope of this book. Nonetheless, they deserve a mention as you may choose
    to integrate them into your environment in the future.
  prefs: []
  type: TYPE_NORMAL
- en: One of these tools is called **SCAPTimony**. Rather than being an end user application
    such as SCAP Workbench or `oscap`, this is a middleware, Ruby-on-Rails engine
    that is designed for you to integrate into your own Rails-based application. The
    benefit that SCAPTimony brings is that it provides both a database and storage
    platform for your SCAP scan results. Hence, if you do decide to write your own
    Rails application to handle your OpenSCAP scanning, this can be written to provide
    centralized reporting on OpenSCAP scans. It also enables your Rails application
    to manipulate and aggregate the data gathered and so is an incredibly powerful
    tool in managing your scan data.
  prefs: []
  type: TYPE_NORMAL
- en: Although developing a Rails application to make use of SCAPTimony is beyond
    the scope of this book, it is worth considering that the Katello project (and
    hence Red Hat Satellite 6) already makes use of SCAPTimony and so would form a
    good basis for you to make use of this tool without the need to create your own
    application.
  prefs: []
  type: TYPE_NORMAL
- en: The final tool available at the time of writing is the OSCAP Anaconda Addon.
    For those who are not familiar, Anaconda is the installation environment used
    by Linux distributions such as CentOS and Red Hat Enterprise Linux. Although this
    add-on cannot help us with our Ubuntu-based servers, it does provide a way to
    build Red Hat-based servers that are compliant from the point of installation.
  prefs: []
  type: TYPE_NORMAL
- en: As we have already considered ways to apply security policy using Ansible (see
    [Chapter 14](faae70c3-4f5a-4177-b6ae-011df0cc54f8.xhtml), *CIS Hardening with
    Ansible*) and have heavily advocated the use of standard images for your Linux
    environment, which we created in [Chapter 5](3802fb48-9f14-4a52-98c5-280d381260a4.xhtml),
    *Using Ansible to Build Virtual Machine Templates for Deployment*, and [Chapter
    6](0c3b40ef-5f31-4fd1-b05f-d549444db163.xhtml), *Custom Builds with PXE Booting*,
    we will not be exploring this add-on as it duplicates functionality we have already
    provided cross-platform solutions for elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: By now, you should hopefully have a good feel for the OpenSCAP tools, and which
    might be the best fit for your environment. Before we can proceed with our first
    scan, however, we need an OpenSCAP security policy to utilize. In the next section,
    we will look at where to download these policies and how to select the right one
    for your environment.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating and selecting policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenSCAP and its related tools are by themselves engines—they cannot actually
    help you to audit your environment without a security policy against which to
    scan. As we explored in [Chapter 13](3d4a9c0a-452f-4fbb-85c8-372149303613.xhtml),
    *Using CIS Benchmarks*, there are numerous security standards for Linux, and in
    this book, we have considered in depth the CIS Benchmarks. Sadly, this standard
    is not currently available for audit through OpenSCAP, though many other security
    policies are that would be well suited to securing your infrastructure. Also,
    as OpenSCAP and its policies are entirely open source, there is nothing to stop
    you from creating your own policy for whatever requirements you have.
  prefs: []
  type: TYPE_NORMAL
- en: There are plenty of security standards available for you to freely download
    and audit your infrastructure against, and in the next section, we will look at
    the primary one that you will most likely wish to consider—SCAP Security Guide.
  prefs: []
  type: TYPE_NORMAL
- en: Installing SCAP Security Guide
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some of the most comprehensive, ready-made security policies can be found as
    part of the **SCAP Security Guide** (**SSG**) project, and you will often find
    reference to the `ssg` acronym in the directory and sometimes even package names.
    These policies, just like the CIS Benchmark we explored previously, cover many
    facets of Linux security and offer remediation steps. Hence, OpenSCAP can be used
    not just for auditing, but also for enforcing a security policy. However, it must
    be stated that given its nature, it is my opinion that Ansible is best suited
    for this task, and it is notable that, in recent upstream releases of SCAP Security
    Guide, Ansible playbooks are now being provided alongside the XML formatted SCAP
    policies themselves.
  prefs: []
  type: TYPE_NORMAL
- en: OpenSCAP policies, like any security definition, will evolve and change over
    time as new vulnerabilities and attacks are discovered. Hence, when considering
    which version of SSG you wish to work with, you will need to take into account
    how up to date the copy you are using is and whether this meets your needs. It
    might seem obvious to state that you should always use the latest version, but
    there are exceptions as we shall see shortly.
  prefs: []
  type: TYPE_NORMAL
- en: This decision requires careful consideration, and it is not as obvious as it
    might at first seem to state, *just go and download the latest copy*. Although
    the versions that are included with most major Linux distributions tend to lag
    behind the versions available from the SSG project's GitHub page (see [https://github.com/ComplianceAsCode/content/releases](https://github.com/ComplianceAsCode/content/releases)),
    in some cases (especially on Red Hat Enterprise Linux), they have been tested
    and are known to work on the Linux distribution they are provided with.
  prefs: []
  type: TYPE_NORMAL
- en: On other distributions, however, your mileage may vary. For example, at the
    time of writing, the latest publicly available version of the SSG policies is 0.1.47,
    while the version included with Ubuntu Server 18.04.3 is 0.1.31\. This version
    of SSG does not even support Ubuntu 18.04, and if you attempt to run a scan against
    Ubuntu Server 18.04 using the Ubuntu 16.04 policy, all of the scan results will
    be `notapplicable`. All scans validate the host on which they are run and ensure
    it matches the one they were intended to be run against, and so if they detect
    a mismatch, they will report `notapplicable` rather than applying the tests.
  prefs: []
  type: TYPE_NORMAL
- en: There is also a bug in the `libopenscap8` package on Ubuntu 18.04, which results
    in errors regarding the `/usr/share/openscap/cpe/openscap-cpe-dict.xml` file as
    missing. It is hoped that, in due course, the Ubuntu OpenSCAP packages are updated
    and fixed so that they can be used reliably.
  prefs: []
  type: TYPE_NORMAL
- en: Users of Red Hat Enterprise Linux will need to find that Red Hat will only support
    users with their OpenSCAP scanning if they are using the SSG policies that ship
    with RHEL, and so in this scenario, it is even more important to make use of the
    vendor-provided policy files.
  prefs: []
  type: TYPE_NORMAL
- en: As with any open source environment, the beauty is that the choice is up to
    you—if you wish to evaluate the newer policies available, then you are free to
    do so, and for Ubuntu 18.04, you must do this or the scans will not work! However,
    if you wish to take advantage of a commercially-supported environment, then that
    is available too, especially if you use RHEL.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the vendor-provided SSG packages on CentOS 7 or RHEL 7, you would
    run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This package contains the SSG policies for all operating systems and applications
    that Red Hat directly supports (bearing in mind that CentOS is based on RHEL).
    Hence, you will only find policies for RHEL 6 and 7, CentOS 6 and 7, the **Java
    Runtime Environment** (**JRE**), and Firefox when you install this package. At
    the time of writing, this installs version 0.1.43 of the SSG.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Ubuntu Server, SSG is split across multiple packages but offers cross-platform
    support. To install the complete set of SSG packages on Ubuntu Server 18.04, you
    would run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'These packages provide policies for the following systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `ssg-base` | SSG Base content and documentation files |'
  prefs: []
  type: TYPE_TB
- en: '| `ssg-debderived` | SSG policies for Debian-derived operating systems such
    as Ubuntu Server |'
  prefs: []
  type: TYPE_TB
- en: '| `ssg-debian` | SSG policies for Debian operating systems |'
  prefs: []
  type: TYPE_TB
- en: '| `ssg-nondebian` | SSG policies for other Linux operating systems such as
    RHEL and SuSE Enterprise Linux |'
  prefs: []
  type: TYPE_TB
- en: '| `ssg-applications` | SSG policies for securing applications such as the **Java
    Runtime Environment** (**JRE**), Firefox, and Webmin |'
  prefs: []
  type: TYPE_TB
- en: Hence, it is fair to say that, at the time of writing, although Ubuntu Server
    ships a much older package version (0.1.13), it offers support for a wider range
    of platforms.
  prefs: []
  type: TYPE_NORMAL
- en: The choice of which SSG you wish to install is up to you, or if you are feeling
    bold, you may even choose to write your own! The most important thing is that
    you make an informed choice and retain support from your operating system vendor
    if that is a requirement for you. Before we proceed to explore other policies
    you might also download, it is worth looking in greater detail at two of the security
    policy file formats you may come across when you are searching for and implementing
    your OpenSCAP auditing architecture. We shall proceed with this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the purpose of XCCDF and OVAL policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you download policies, you will often find that you see the terms **Open
    Vulnerability and Assessment Language** (**OVAL**) and **eXtensible Configuration
    Checklist Description Format** (**XCCDF**). Some security policies you will come
    across are only available in OVAL format. Hence, we must take a moment to consider
    these different file types.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, it is important to state that they are not interchangeable—instead,
    they should be thought of as hierarchical in nature. At the lower level in the
    hierarchy is the OVAL file, which in essence describes all of the system-level
    checks that the OpenSCAP scanning engine should perform. This might, for example,
    consist of checking whether a given package is newer than a given version as a
    known vulnerability might exist in the older one. Or it might be a check to ensure
    that an important system file such as `/etc/passwd` is owned by root.
  prefs: []
  type: TYPE_NORMAL
- en: These checks are all incredibly valuable when it comes to auditing a system's
    compliance against your security policy, but they might not be very readable for
    managers or security teams. They would be more interested in a high-level security
    policy, such as *Verify Permissions on Important Files and Directories*. Indeed,
    this check would almost certainly encompass the check on the ownership of `/etc/passwd`,
    along with a whole set of other vital system files such as `/etc/group` and `/etc/shadow`.
  prefs: []
  type: TYPE_NORMAL
- en: This is where the XCCDF format becomes relevant—this can be thought of as the
    next level in the hierarchy as it provides a set of human-readable security policies
    (along with valuable documentation and references) that would be useful to an
    audience such as a manager or information security team. These describe the state
    of a system in reference to the checks performed by the OVAL definition. The XCCDF
    files do not contain any check definitions for the scanning engine (for example, `oscap`)—instead,
    they reference the checks that have been written in the OVAL file and hence can
    be thought of as sitting on top of the OVAL files in the hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, an OVAL file can be used for auditing purposes in isolation, but
    an XCCDF file cannot be used unless its corresponding OVAL file is present.
  prefs: []
  type: TYPE_NORMAL
- en: XCCDF files also contain a selection of scanning profiles that tell the scanning
    engine what your policy looks like, and hence what it should scan for. This will
    almost certainly mean only scanning for a subset of the checks that are present
    in the OVAL file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The profiles available can easily be listed using the graphical SCAP Workbench
    tool or on the command line by using the `oscap info` command. An example of this
    command run against SSG for CentOS 7 is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e8b0efd-b9a5-4716-a92b-f821185b4cce.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Although the output has been truncated in the interests of space, you can clearly
    see the wide array of security profiles available for CentOS 7\. You will notice
    in the screenshot that (for example) there are different profiles for CentOS 7
    servers that run graphical user interfaces and for those that don't. This is because
    additional security measures are required on a graphical system to ensure that
    the X Windows subsystem is properly secured. There is a profile suitable for **Payment
    Card Industry** (**PCI**) environments and at the top, the most basic profile,
    which should be the minimum viable security policy suitable for just about any
    CentOS 7 server.
  prefs: []
  type: TYPE_NORMAL
- en: Once you know which profile you wish to use from your XCCDF policy file, you
    will specify it when you run the scan, and we shall explore this in greater detail
    in a later section, entitled *Scanning the enterprise with OpenSCAP*.
  prefs: []
  type: TYPE_NORMAL
- en: Before we conclude this section, it is important to state that OVAL files do
    not have profiles, and if you run an OVAL scan, you will automatically run all
    tests defined in the OVAL file on your system regardless of its purpose. This
    may be problematic because, taking the CentOS 7 SSG OVAL file as an example, this
    contains tests for the security of the X Windows graphical subsystem. These tests
    will fail on a system that does not have a GUI installed, and so might present
    false positives in your scan results.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that SCAP Workbench only supports scanning with XCCDF
    policies, and so if you are using a profile that only includes an OVAL file, you
    will need to use a different scanning tool.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand more about the file formats of the various security policies
    you might download, let's take a look at some of the other security profiles you
    may wish to download.
  prefs: []
  type: TYPE_NORMAL
- en: Installing other OpenSCAP policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is highly possible that the SSG security policies will form the core of your
    auditing framework with OpenSCAP—however, given the open source nature of OpenSCAP,
    it is entirely possible for anyone, including you, to write a policy file.
  prefs: []
  type: TYPE_NORMAL
- en: The most likely policies you would wish to supplement your SSG ones with are
    ones that can check the patch level of your servers. Given the frequent nature
    at which patches are released for Linux operating systems, integrating such policies
    with SSG would create a headache for the maintainers, and so they are generally
    kept separate.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, on your CentOS 7 server, you can download the following security
    policy (note that it is available in OVAL format only):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This contains checks for all CentOS 7 (and RHEL 7) package vulnerabilities that
    have been found to date and checks the installed versions to ensure that they
    are newer than the versions where known vulnerabilities existed. Hence, this can
    very easily generate a report that can show you whether you need to patch your
    CentOS 7 or RHEL 7 systems urgently.
  prefs: []
  type: TYPE_NORMAL
- en: 'A similar list is available from Canonical for Ubuntu Server 18.04, which can
    be downloaded as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Once again, this contains a list of all packages vulnerabilities that have been
    found on Ubuntu Server 18.04 and again checks to ensure that the package versions
    installed on your system are newer than the vulnerable versions. For both of these
    security policies, all checks are run every time as they are in OVAL format—however,
    tests only report a failure if a package is installed and is older than the version
    containing the fix for the given vulnerability. Hence, you should not receive
    any false positives resulting from running these scans.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the SSG policies, these policies are updated regularly—at the time of
    writing, the Ubuntu package vulnerability scanning profile we downloaded using
    the preceding commands was only one hour old! As a result, part of your auditing
    process must involve downloading the latest package vulnerability OVAL policies
    and scanning against these—possibly a good job for Ansible (though this is left
    as an exercise for you).
  prefs: []
  type: TYPE_NORMAL
- en: By now, you should have a good understanding of the types of policies you can
    download, the formats you may come across them in, and what their intended purposes
    are. Hence, in the next section, we will proceed to demonstrate how they can be
    used to scan your Linux hosts and audit your compliance against your chosen security
    policies.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning the enterprise with OpenSCAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this chapter, we have covered the various tools available from the
    OpenSCAP project and the security policies you might wish to employ to scan your
    Enterprise Linux environment. Now that we have completed that groundwork, it's
    time to take a look at how to make use of these to actually scan your infrastructure.
    As we have discussed, there are three key tools that you might use to scan your
    infrastructure. We will start off this process by exploring the `oscap` command-line
    tool in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning the Linux infrastructure with OSCAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discussed earlier in this chapter, the `oscap` tool is a command-line
    utility designed for scanning the local machine that it is installed on. The security
    policies that you wish to audit the host against must also be on the filesystem
    of the host that it runs on. If you have completed the steps in the section entitled
    *Evaluating and selecting policies*, then you should already have everything you
    need.
  prefs: []
  type: TYPE_NORMAL
- en: With that said, if using the `oscap` tool to scan your infrastructure is going
    to be your way forward, you may wish to consider Ansible as a tool to both install
    it and gather the results when the scan is complete.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we come to this, let''s look at how we might scan a single host:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming that we are working on our Ubuntu 18.04 server and that we have unpacked
    the latest upstream SSG into our current working directory so that we have the
    required Ubuntu 18.04 support, we would use the `oscap info` command to query
    the XCCDF policy file to see which policies are available to us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the `info` command will yield something like that shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1754f8e8-3150-4791-baf8-e11d722c64c5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From here, we will choose the profile (or profiles—after all, you could always
    run more than one scan) that you wish to audit against. In our case, we are running
    a g*eneral-purpose* server, so we will choose the profile with `Id: xccdf_org.ssgproject.content_profile_standard`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To run this scan, and save the output in a human-readable HTML report, you
    would then run a command such as the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We must run this command using `sudo`, as it requires access to some core system
    files that would not otherwise be accessible. The scan runs and produces a nice
    human-readable output on the screen, an example of which is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3bef98e0-dfaa-42f0-b4e0-e91412f11b37.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the XCCDF policy produces a highly readable output, with a clear
    pass/fail result for each test. Hence, even within these first few lines of the
    output, you can see that our test system is not compliant in several areas.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the `oscap` command has also generated a nice HTML report that
    we have put into the web root of this server. Of course, you wouldn't do this
    in a production environment—the last thing you'd want to do is publicize any security
    issues with your server! However, you could send this report to your IT Security
    team, and if you were running OSCAP using an Ansible playbook, Ansible could copy
    the report from the remote server to a known place where the reports can be collated.
  prefs: []
  type: TYPE_NORMAL
- en: 'A portion of this HTML report is shown in the following screenshot—you can
    see how readable it is. Further, even at a quick glance, someone non-technical
    can see that this system fails compliance tests and needs remedial steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/075d3e95-b566-4abf-99a9-16abc5066392.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Suddenly, it becomes apparent how powerful this tool is, and why you would
    wish to use it to scan your infrastructure! In addition to this report, we can
    also check the patch status of our test system using the `com.ubuntu.bionic.cve.oval.xml`
    policy that we downloaded in the section entitled *Installing other OpenSCAP policies*.
    As we discussed, OVAL policies do not produce reports that are as readable as
    XCCDF reports, but nonetheless they are still incredibly valuable. To scan our
    Ubuntu system to see whether it is missing any critical security patches, you
    would run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'As shown in the following screenshot, the output is not as readable as the
    XCCDF output and needs a little more interpretation. In short, the `false` result
    means that the machine being scanned does not fail the compliance test, and so
    infers that the requisite patch has already been applied, whereas `true` means
    that a patch is missing from the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e73ec3a7-6ada-415f-b50a-3f576430c6a6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once again, however, the HTML report comes to our rescue—to start with, it
    has a summary section at the top, which shows that our system has a total of 432
    detected package vulnerabilities, but also 8,468 test passes. Hence, we urgently
    need to apply patches to fix known security vulnerabilities, as we understood
    by the policy file we ran the audit against:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/583449b4-3286-409b-ba3a-6014defc532c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Of course, it is highly important to download an updated copy of this policy
    regularly to ensure that it is up to date. If you drill down into the report,
    you will see that, for each check, there is a cross-reference CVE vulnerability
    report so you can find out which vulnerabilities your system exhibits:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/74fe0aab-a944-4b8c-b9fa-59b50069d735.png)'
  prefs: []
  type: TYPE_IMG
- en: Just through these few examples, I'm sure you can see how valuable these reports
    are and how they could be easily reviewed by an IT Security team without any specific
    Linux command-line knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process for running OSCAP-based scans on CentOS or RHEL is broadly similar:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming that you are using the SSG policy packaged by your operating system
    vendor and included with the OS, you would query the XCCDF profiles so that you
    know which to run against:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then run an XCCDF-based scan in exactly the same way as we did on Ubuntu—here,
    we are choosing the standard profile to scan our system with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You will observe the presence of the `--fetch-remote-resources` flag here too—this
    is used because the CentOS 7 policy requires some additional content that it downloads
    directly from Red Hat so that it is always working with the most up-to-date copy.
    The scan runs in much the same way as before, producing the same human-readable
    report. One thing you will see as the scan runs is that many of the tests return
    `notapplicable`—unfortunately, the CentOS 7 security policy is very much a work
    in progress and the version included with CentOS 7 at the time of writing does
    not include complete support for this operating system. This demonstrates how
    pedantic OpenSCAP policies can be—most CentOS 7 security requirements will apply
    equally to RHEL 7 and vice versa, yet the policies are coded to work very specifically
    with certain operating systems. The following screenshot shows the scan in progress
    and the aforementioned `notapplicable` test results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34e54a51-56b9-4eb4-8421-205293844cea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In spite of this, the audit still reveals some valuable insights—for example,
    as we can see from the following screenshot of the HTML report, we have accidentally
    allowed accounts with empty passwords to log in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d72d3741-90ff-477e-945a-a0b0afd2e5c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you are running CentOS 7 specifically, you will not receive vendor support
    from Red Hat, and so it is worth trying the upstream SSG policy as the support
    for operating systems such as CentOS and Ubuntu is improving all the time (as
    we saw earlier in this section when we audited our Ubuntu Server 18.04 host).
    Rerunning the exact same scan but using SSG 0.1.47, our scan results look quite
    different:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb95f90c-e187-4435-b0fe-4d08f4e3267d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This just highlights the importance of understanding the policy you are using
    and making sure that you download the right version for your situation. If you
    are using RHEL 7, you would be advised to make use of the packages supplied by
    Red Hat, whereas with CentOS 7 and Ubuntu Server 18.04, you would be better off
    trying the latest version from the upstream GitHub repository. Indeed, the following
    screenshot shows the results of the exact same scan on our CentOS 7 test system
    using the version 0.1.47 SSG, and we can see that this time, we have run a total
    of 958 tests and have a much clearer understanding of the security of our server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cdf6cc0e-2c47-4361-811b-00504f18f487.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On CentOS 7, you can also run the OVAL scan for package vulnerabilities in
    the same manner that we did with Ubuntu Server, but using the `com.redhat.rhsa-RHEL7.xml`
    file that we downloaded previously. Just as we did on Ubuntu Server, we would
    run this scan with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The report is interpreted in exactly the same way as on Ubuntu, and if we refer
    directly to the HTML report, we can see that this system is fully patched against
    known package vulnerabilities at this time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7fb6d19-36ad-4a5c-acc4-07e3e83acbae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This wraps up our look at the `oscap` command-line tool, but by now you should
    have all of the information you need to run your own scans regularly. Automating
    this process is left as an exercise for you, but here are some tips on what I
    would consider a good Ansible solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `yum` or `apt` modules to install the required OpenSCAP packages on
    the server before performing any other tasks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `get_url` module to download SSG and/or the package vulnerability OVAL
    definition file to ensure you have the most up-to-date copy (except on RHEL 7,
    where you would use the version supplied by Red Hat). Use the `unarchive` module
    to unzip the file you downloaded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the OSCAP scan using the `shell` module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `fetch` module to grab a copy of the HTML report(s) for distribution
    and analysis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will look at running scheduled regular scans using the
    OpenSCAP Daemon.
  prefs: []
  type: TYPE_NORMAL
- en: Running regular scans with the OpenSCAP Daemon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have now understood the basis of scanning with the `oscap` command-line
    tool, it will be easy to set up regular scanning with the OpenSCAP Daemon as the
    techniques involved are the same. Assuming that you have already installed the
    daemon, as we discussed earlier, it is fairly easy to create automated scans,
    although, at the time of writing, the OpenSCAP Daemon does not run on Ubuntu Server
    18.04\. This is a result of a missing CPE file, which, to date, has not been rectified,
    and although this did not impact our use of the `oscap` command-line tool (though
    those of who are eagle-eyed will have noticed an error relating to this file at
    the end of the scan), it does prevent the OpenSCAP Daemon from starting.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, the examples in this section will be based on CentOS 7 only—however,
    the procedure would be broadly similar on Ubuntu Server 18.04 when the OpenSCAP
    packages are fixed. In fact, this issue, which was first reported in October 2017
    according to the `ComplianceAsCode` GitHub project, seems to be relatively long-standing
    and so is an excellent reason to make use of Ansible in conjunction with the `oscap`
    tool for your scanning needs.
  prefs: []
  type: TYPE_NORMAL
- en: When this Ubuntu related issue is fixed, you will be able to schedule scans
    for both CentOS and Ubuntu hosts from one central scanning host using the process
    outlined in this chapter. Note that the SSG files for all of your hosts (be they
    CentOS, RHEL, or Ubuntu) must live on the same host as the OpenSCAP Daemon – they
    are copied across to each host to be scanned whenever a scan is run by the OpenSCAP
    Daemon, and so do not need to be deployed on every host.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nonetheless, if you want to set up a scheduled scan using the OpenSCAP Daemon,
    the easiest way to do this is by using the `oscapd-cli` tool in interactive mode:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is achieved by invoking `oscapd-cli` with the following parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This launches a text-based guided configuration that you can easily complete—the
    following screenshot shows an example of how I set up the daemon to run a daily
    scan on my CentOS 7 test system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/52ddaa69-f83c-442e-88d2-2b4ee1795fe7.png)'
  prefs: []
  type: TYPE_IMG
- en: Most of the steps in that interactive setup should be self-explanatory—however,
    you will note a step that asks about `Online remediation`. The OpenSCAP profiles
    include the capability to automatically rectify any compliance issues they find
    as they go through the scan. It is up to you whether you wish to enable this or
    not, as this will depend on whether you feel happy with an automated process making
    changes to your systems, even for security purposes. You may want to separate
    your audit tasks from your policy enforcement tasks, in which case you would use
    Ansible for the remediation steps.
  prefs: []
  type: TYPE_NORMAL
- en: If you do enable remediation, be sure that you have tested this in an isolated
    environment first to ensure that the remediation steps do not break any of your
    existing applications. This testing must be performed not only when your application
    code changes, but also when new versions of SSG are downloaded as each new version
    might contain new remediation steps. This is the same as the guidance we explored
    in [Chapter 13](3d4a9c0a-452f-4fbb-85c8-372149303613.xhtml), *Using CIS Benchmarks*,
    only now applied to OpenSCAP SSG.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have enabled the scan, you will find that, at the scheduled time, it
    deposits the scan results in `/var/lib/oscapd/results`. Under this, you will find
    a numbered subdirectory that corresponds to the task ID you were given when you
    created the task (`1`, in the preceding screenshot), and then under another numbered
    directory, which is the scan number. Hence, the results for the first scan for
    task ID `1` will be found in `/var/lib/oscapd/results/1/1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you examine the contents of this directory, you will notice that the results
    are only stored in an XML file, which, while suited for further processing, is
    not very readable. Fortunately, the `oscap` tool that we looked at previously
    can easily convert scan results into human-readable HTML—for this result, we would
    run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Once this command has run, you can view the HTML report in your web browser
    just as we did earlier in this chapter. Of course, if you aren't running a web
    server on this machine, you can simply copy the HTML report to a host that has
    one (or even open it locally on your computer).
  prefs: []
  type: TYPE_NORMAL
- en: The beauty of setting up the OpenSCAP Daemon is that, unlike the `oscap` tool,
    it can scan remote hosts as well as the local one. This scanning is performed
    over SSH, and you must ensure that you have set up passwordless SSH access from
    the server running the OpenSCAP Daemon to the remote host. If you are using an
    unprivileged account to log in, you should also ensure that the account has sudo
    access, again without requiring a password. This should be quite easy for any
    experienced system administrator to set up.
  prefs: []
  type: TYPE_NORMAL
- en: On CentOS 7, the default SELinux policy prevented the remote scan from running
    on my test system. I had to disable SELinux temporarily for the remote scan to
    run. Obviously, this is not an ideal solution—if you encounter this issue, it
    would be better to build an SELinux policy that enables the remote scan to run.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have set up the remote access, configuring the OpenSCAP Daemon through
    the interactive task creation process is no more complex than for the local machine—the
    only difference this time around is that you need to specify the remote connection
    in this format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are logging in directly as `root` (not recommended), you can leave out
    the `+sudo` part of the preceding string. Hence, to set up add another remote
    scan from my test server, I ran through the commands shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/96e924b9-fcab-4c4a-ab1d-8e2ad16d483a.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, this creates task number `2` for this purpose. The advantage
    of this setup is that, once you have set up the SSH and sudo access, you can have
    one designated host that is responsible for scanning your entire estate of Linux
    servers. Also, the hosts being scanned only need the OpenSCAP libraries present—they
    do not need the OpenSCAP Daemon or the security policy files—these are automatically
    transferred to the hosts as part of the remote scanning process.
  prefs: []
  type: TYPE_NORMAL
- en: The results of the scheduled scan are stored in XML format in the `/var/lib/oscapd/results`
    directory exactly as before and can be analyzed or converted into HTML as required.
  prefs: []
  type: TYPE_NORMAL
- en: The OpenSCAP Daemon is almost certainly your quickest and easiest route to scanning
    your infrastructure, and the fact that it collects and stores all of the results
    locally as well as uses security policies stored on its own filesystem means it
    is fairly resistant to tampering. For automated, ongoing SCAP-based scanning of
    your environment, the OpenSCAP Daemon is almost certainly your best choice, and
    you could always create a `cron` job to automatically convert the XML results
    into HTML and put them into your web server root directory so that they can be
    viewed.
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, in the next section, we will look at the SCAP Workbench
    tool and see how that can help you with your security auditing.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning with SCAP Workbench
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SCAP Workbench tool is an interactive, GUI-based tool for running SCAP scans.
    It has almost the same capabilities as the `oscap` command-line tool, except that
    it can scan both remote hosts over SSH (similarly to the OpenSCAP Daemon). The
    high-level process for using SCAP Workbench is the same as for `oscap`—you select
    your policy file from the policy you downloaded, select the profile from within
    it, and then run the scan.
  prefs: []
  type: TYPE_NORMAL
- en: 'This time, however, the results are displayed in the GUI and are easily interpretable
    without the need to generate an HTML report and load it in a browser. The following
    screenshot shows the equivalent of running the following on the command line with
    `oscap`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'It is important to state that no report file is generated by the scan, but
    you can generate either an HTML- or XML-based one by clicking on the Save Results
    button at the bottom of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa3b0d5e-9dcb-41b2-b277-dd613882e0b0.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can clearly see, if you need to run an interactive and immediate scan
    of a system, SCAP Workbench is the easiest way to do it. The only limitation is
    that it can only process XCCDF files, so the OVAL files used to establish whether
    you have package vulnerabilities cannot be used here.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this section, we have explored ways that you can use the various
    OpenSCAP tools to scan your infrastructure. We have also shown a variety of scans,
    and their output is generally quite easy to interpret. However, in the next section,
    we will explore these in a little more depth before we complete our work on OpenSCAP.
  prefs: []
  type: TYPE_NORMAL
- en: Interpreting results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have seen that the OpenSCAP scans, especially the XCCDF-based ones,
    produce nice, easy-to-read reports that you can easily take action on. However,
    if the reports are not clear to you, then you would not know what needs fixing
    to rectify the lack of compliance.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, both the OVAL policies we used earlier to check for vulnerable
    packages and the XCCDF-based reports contain enough information for you to do
    both things.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take an example from our earlier scan of our CentOS 7 server using the
    SSG version 0.1.47\. In this, we failed, among other things, a check called `Disable
    ntpdate Service (ntpdate)`. Suppose that this result was not obvious to you, and
    you were unsure what the underlying problem was or why it was an issue. Fortunately,
    in the HTML report generated from this scan, you can click on the check title.
    A screen should pop up that looks like the one in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/629d2232-a270-4784-9f8c-5ce79729481d.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, you can see all the detail you could ever need—from the details of the
    scan through to the references and identifiers from the various security standards
    that make this recommendation, and even the manual commands that could be used
    to rectify the issue so that the system becomes compliant for the next scan.
  prefs: []
  type: TYPE_NORMAL
- en: 'Even better, if you scroll down this screen, you will find that many of the
    latest versions of the SSG (version 0.1.47 included) actually include a great
    deal of Ansible code that can be applied to remedy this situation, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89ead6bd-8594-48ba-a853-4ce935fce09b.png)'
  prefs: []
  type: TYPE_IMG
- en: Hence, through a little exploration, you really can use these scan results not
    only to find out why your infrastructure is not compliant but to also produce
    the exact set of fixes you require.
  prefs: []
  type: TYPE_NORMAL
- en: OpenSCAP can also remediate (that is, fix) problems that it finds while scanning
    to help you to both audit and maintain compliance. However, we have not explored
    this here because it is vital that you understand the scans and what they will
    do before attempting automatic remediation. Hence, this is left as an exercise
    for you—however, you will see that in both the OpenSCAP Daemon and SCAP Workbench,
    there is a simple option you can enable that will not just perform the scan but
    attempt remediation.
  prefs: []
  type: TYPE_NORMAL
- en: 'While we have established how powerful and user-friendly the XCCDF profiles
    are, we have seen that reports generated by OVAL profiles are a little less readable.
    Fortunately, if you refer to the following screenshot, you will notice that the
    CVE numbers for the identified vulnerabilities are, in fact, hyperlinks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90b92cdc-3997-49a5-8fc6-46166f4fcad5.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on these will take you to the operating system vendor's website, directly
    to a page that details the vulnerability, the affected package(s), and when the
    fix was implemented. As a result, you can find out exactly which packages you
    need to update to remedy the situation.
  prefs: []
  type: TYPE_NORMAL
- en: That concludes our look at auditing your Linux environment with OpenSCAP—it
    is hoped that you have found this useful and that you will be able to apply this
    to your environment for the benefit of your security and auditing processes.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Keeping an eye on the security compliance of your Linux infrastructure is ever
    more important, and given the large number of security recommendations, coupled
    with the large number of Linux servers that might exist in a modern enterprise,
    it is clear that a tool that can audit for compliance is needed. OpenSCAP provides
    exactly such a framework and with a little care and attention (and application
    of the right security profiles) can easily audit your entire Linux estate and
    provide you with valuable, easy to read and interpret reports of your compliance
    levels.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you gained hands-on experience of installing OpenSCAP tools
    for server audit and understood the available policies and how to make effective
    use of them in OpenSCAP. You then learned how to audit your Linux servers with
    the various OpenSCAP tools, and finally explored how to interpret the scan reports
    to take appropriate action.
  prefs: []
  type: TYPE_NORMAL
- en: In the next and final chapter of this book, we will look at some tips and tricks
    to make your automation tasks easier.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What does SCAP stand for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why are SCAP policies a valuable tool in auditing your Linux infrastructure?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which OpenSCAP tool would you use to centrally perform scanning of several Linux
    hosts regularly?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between an XCCDF file and an OVAL file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When would you use the vendor-supplied SSG policies, even if they are older
    than the currently available ones?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why might the scan results for a CentOS 7 host show `notapplicable` when using
    a RHEL 7 policy file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you generate an HTML report from the XML results generated by the OpenSCAP
    Daemon?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the requirements for a remote SSH scan to be performed by SCAP Workbench
    or the OpenSCAP Daemon?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Learn Ansible* by *Russ McKendrick*: [https://www.packtpub.com/gb/virtualization-and-cloud/learn-ansible](https://www.packtpub.com/gb/virtualization-and-cloud/learn-ansible)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenSCAP website: [https://www.open-scap.org/](https://www.open-scap.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
