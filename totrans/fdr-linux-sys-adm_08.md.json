["```\n    [user@workstation ~]$ sudo -i\n    [sudo] password for user: [password]\n    [user@workstation ~]$ mkdir /btrfs\n    ```", "```\npvs -a\n```", "```\nmkfs.btrfs -L testbtrfs /dev/vdb\n```", "```\n    [root@workstation ~]# mount /dev/vdb /btrfs\n    ```", "```\n    [root@workstation ~]# btrfs filesystem show /btrfs\n    Label: 'testbtrfs'  uuid: def9423d-8684-487f-bd11-4829937752b6\n    Total devices 1 FS bytes used 144.00KiB\n    devid    1 size 50.00GiB used 1.56GiB path /dev/vdb\n    ```", "```\n    [root@workstation ~]# btrfs filesystem df /btrfs\n    Data, single: total=1.00GiB, used=0.00B\n    System, DUP: total=32.00MiB, used=16.00KiB\n    Metadata, DUP: total=256.00MiB, used=128.00KiB\n    GlobalReserve, single: total=3.50MiB, used=0.00B\n    ```", "```\n    [root@workstation ~]# btrfs subvolume create /btrfs/test\n    Create subvolume '/btrfs/test'\n    ```", "```\n    [root@workstation ~]# btrfs subvolume show /btrfs/test\n    ```", "```\n    [root@workstation ~]# mkdir /test\n    [root@workstation ~]# mount -o bind /btrfs/test /test\n    ```", "```\n    [root@workstation ~]# btrfs filesystem du /btrfs\n         Total   Exclusive  Set shared  Filename\n         0.00B       0.00B           -  /btrfs/test\n         0.00B       0.00B       0.00B  /btrfs\n    ```", "```\nbtrfs filesystem usage /btrfs\n```", "```\n    [root@workstation ~]# dd if=/dev/zero of=/test/example \\\n    > bs=1M count=1024\n    ```", "```\n    [root@workstation ~]# btrfs filesystem du /btrfs\n    [root@workstation ~]# btrfs filesystem usage /btrfs\n    ```", "```\n[root@workstation ~]# btrfs filesystem df /btrfs\nData, single: total=1.00GiB, used=1.00GiB\nSystem, DUP: total=8.00MiB, used=16.00KiB\nMetadata, DUP: total=256.00MiB, used=1.17MiB\nGlobalReserve, single: total=3.50MiB, used=16.00KiB\n```", "```\n    mkfs.btrfs /dev/vdc /dev/vdd...\n    ```", "```\n    btrfs device add /dev/vdc /dev/vdd...\n    Performing full device TRIM /dev/vdc (10.00GiB) ...\n    Performing full device TRIM /dev/vdd (20.00GiB) ...\n    ```", "```\n[root@workstation ~]# btrfs filesystem df /btrfs\nData, single: total=1.00GiB, used=1.00GiB\nSystem, DUP: total=8.00MiB, used=16.00KiB\nMetadata, DUP: total=256.00MiB, used=1.17MiB\nGlobalReserve, single: total=3.50MiB, used=0.00B\n```", "```\n[root@workstation ~]# btrfs filesystem show /btrfs\nLabel: 'testbtrfs'  uuid: 6c8ccaad-f9a0-4957-919e-8d87e02078e3\nTotal devices 3 FS bytes used 1.00GiB\ndevid    1 size 50.00GiB used 1.52GiB path /dev/vdb\ndevid    2 size 10.00GiB used 0.00B path /dev/vdc\ndevid    3 size 20.00GiB used 0.00B path /dev/vdd\n```", "```\n[root@workstation ~]# df -h /btrfs\nFilesystem      Size  Used Avail Use% Mounted on\n/dev/vdb         80G  1.1G   79G   2% /btrfs\n```", "```\n[root@workstation ~]# btrfs filesystem balance /btrfs\nDone, had to relocate 3 out of 3 chunks\n```", "```\n[root@workstation ~]# btrfs filesystem df /btrfs\nData, single: total=1.00GiB, used=1.00GiB\nSystem, DUP: total=32.00MiB, used=16.00KiB\nMetadata, DUP: total=256.00MiB, used=1.16MiB\nGlobalReserve, single: total=3.50MiB, used=0.00B\n```", "```\n[root@workstation ~]# dd if=/dev/zero \\\n> of=/btrfs/test/example2 bs=1M count=49152\n49152+0 records in\n49152+0 records out\n51539607552 bytes (52 GB, 48 GiB) copied, 70.17 s, 734 MB/s\n```", "```\n[root@workstation ~]# btrfs filesystem df /btrfs\nData, single: total=50.00GiB, used=48.45GiB\nSystem, DUP: total=32.00MiB, used=16.00KiB\nMetadata, DUP: total=256.00MiB, used=54.98MiB\nGlobalReserve, single: total=53.69MiB, used=16.00KiB\n[root@workstation ~]# btrfs filesystem show /btrfs\nLabel: 'testbtrfs'  uuid: 6c8ccaad-f9a0-4957-919e-8d87e02078e3\nTotal devices 3 FS bytes used 48.51GiB\ndevid    1 size 50.00GiB used 34.56GiB path /dev/vdb\ndevid    2 size 10.00GiB used 3.00GiB path /dev/vdc\ndevid    3 size 20.00GiB used 13.00GiB path /dev/vdd\n```", "```\n[root@workstation ~]# btrfs filesystem usage -b /btrfs\nOverall:\n    Device size:          85899345920\n    Device allocated:          54291070976\n    Device unallocated:     31608274944\n    Device missing:          0\n... output omitted...\nData,single: Size:53687091200, Used:52613349376 (98.00%)\n... output omitted...\n```", "```\n    85899345920 * 0.80 = 68719476736\n    ```", "```\n    85899345920 - 2147483648 = 83751862272\n    ```", "```\n    54291070976 < 83751862272\n    ```", "```\n    53687091200 - 52613349376 = 1073741824\n    ```", "```\n    85899345920*0.10 = 8589934592\n    ```", "```\n    8589934592 > 1073741824\n    ```", "```\n[root@workstation ~]# btrfs-usage-report command to get the report of the filesystem mounted on /btrfs. The report is complete, as shown in *Figure 4**.9*.\nAt the beginning, it shows the following:\n\n*   The filesystem ID\n*   The physical space used\n*   The profiles\n\nIt also shows an estimate of the virtual space available and how much raw disk is allocated per chunk type:\n![Figure 4.9 – The Btrfs-usage-report output](img/B19121_04_09.jpg)\n\nFigure 4.9 – The Btrfs-usage-report output\nThe last part of the report adds detailed information about storage space allocation:\n![Figure 4.10 – The Btrfs-usage-report output](img/B19121_04_10.jpg)\n\nFigure 4.10 – The Btrfs-usage-report output\nBesides checking the allocated space and the efficiency of the data storage check, this tool helps optimize the storage space used on our workstation.\nNote\nGet the complete output of the **btrfs-usage-report** command from the **/btrfs** filesystem of our GitHub repository at [https://github.com/PacktPublishing/Fedora-Linux-System-Administration/blob/main/chapter4/btrfs-usage-report_btrfs.txt](https://github.com/PacktPublishing/Fedora-Linux-System-Administration/blob/main/chapter4/btrfs-usage-report_btrfs.txt).\nDespite all these advanced features, the use of Brtfs as a filesystem is not the default in distributions other than Fedora Linux or OpenSUSE. Generally, most distributions prefer to use LVM with `ext4` or `xfs` as the filesystem format.\nLet’s see how different the Brtfs filesystem is from LVM.\nDeep diving into Logical Volume Manager\nDespite basic differences between Btrfs and LVM, they have a lot in common:\n\n*   They focus on protecting against filesystem corruption\n*   They support single - or multiple-device setup\n*   They can create quick snapshots\n*   Several tools exist to help manage them in graphic or command - line form\n\nLVM sits on a layer before the filesystem, so it supports any filesystem. LVM converts *any* device or partition into a physical device (`pv`) that is dynamically manageable. Physical devices get placed in volume groups (`vg`), enabling the creation of logical volumes (`lv`).\nThis is how an LVM structure gets created sequentially:\n\n1.  It creates physical devices with the available devices, using the **pvcreate [device1] [device2] ...** command.\n2.  It joins the physical devices, creating the volume group, using the **vgcreate [vg_name] [pv1] [pv2] ...** command.\n3.  It creates the logical volume with the **lvcreate** command.\n\nTo remove each layer from the LVM structure, run similar commands in reverse order:\n\n1.  To delete the logical volume, use the **lvremove** command.\n2.  Remove the volume group with the **vgremove** command.\n3.  Remove the physical devices with the **pvremove** command.\n\nThe following figure shows the LVM creation and removal sequence:\n![Figure 4.11 – LVM creation and removal sequence and commands](img/B19121_04_11.jpg)\n\nFigure 4.11 – LVM creation and removal sequence and commands\nPhysical devices could be added or removed to grow or reduce a volume group. In the same way, a logical volume could be extended or reduced but requires data verification before running it. In the case of `xfs` filesystems on LVM, there is no logical volume reduction.\nLVM takes a set of block devices and presents the system with a new block device (`lv`) with a fixed mapping to physical blocks.\nA Btrfs subvolume is different from an LVM logical volume, in the structure and behavior. A `Btrfs` volume is a mountable filesystem tree, not a block device.\nThe following figure shows the basic structures:\n![Figure 4.12 – Btrfs subvolumes layouts](img/B19121_04_12.jpg)\n\nFigure 4.12 – Btrfs subvolumes layouts\nThe typical Btrfs snapshot structure uses the flat scheme.\nLet’s compare the snapshots of the Brtfs filesystem and LVM.\nDifferences between snapshots\nLVM supports read-only and read-write snapshots. This eases the creation of consistent backups of active filesystems, with a defined size on the source volume group of the logical volume or an external source. This allows snapshots to belong to a thin provisioned pool when the target LV is a thin LV, which doesn’t consume fixed-size chunks of the source volume.\nCreating snapshots on LVM is similar to creating a logical volume. Specify the snapshot name and the targeted LV, adding the following parameters to the `lvcreate` command:\n\n```", "```\n\n After taking the snapshot, all modifications made on the target LV will be stored in the new snapshot LV, but the old data remains in the source LV.\nAs needed, use the snapshot LV to roll back some changes in the source LV, mounting it in the affected directory instead of the original LV. Use the usual `mount` and `unmount` commands.\nRemove the snapshot as an LV with the `lvremove` command:\n\n```", "```\n\n Note\nIt is possible to deactivate the logical volume before deleting it. Use the **lvchange -an** command. It will *not* show the prompt verifying whether you want to delete an active logical volume.\nSnapshots in Btrfs are **COW clones** of a complete subvolume. They look similar to a new subvolume that contains the data of the cloned subvolume, but any changes in one do not affect the other. The space consumed increases as the original subvolume and the snapshot grow apart.\nCreate a snapshot using the `btrfs subvolume` command stating that it is a snapshot. Observe the following steps to create a snapshot on our `/btrfs` filesystem from the *Creating a Btrfs* *filesystem* section:\n\n1.  List the subvolumes of the filesystem mounted on **/btrfs**:\n\n    ```", "```\n\nNote\nThe top-level subvolume with **Btrfs** ID **5** is the root of the volume. All subvolumes mount below it.\n\n1.  Create a snapshot of the **test** subvolume:\n\n    ```", "```\n\n     2.  Listing the subvolumes again displays the snapshot:\n\n    ```", "```\n\n     3.  Inspect the directories to verify that they contain the same data:\n\n    ```", "```\n\nWith COW, each subvolume could change without changes in one affecting the other.\nThe differences between Btrfs and LVM are remarkable:\n\n*   A Btrfs subvolume holds the capacity of the filesystem to which it belongs. A logical volume in LVM contains a capacity, which is a space reservation of the volume group it belongs to.\n*   A Btrfs snapshot is a full-fledged subvolume, and once created there is no \"original\" and \"snapshot.\" On LVM, a snapshot depends on the logical volume from the one that it came from.\n\nFor example, it is not possible to resize a logical volume or move its data with the `pvmove` command (from one physical volume to another) while having active snapshots of that logical volume.\nNote\nFor more information about the LVM commands and their Btrfs equivalents, refer to the Fedora wiki article at [https://fedoraproject.org/wiki/User:Chrismurphy/lvm2btrfs](https://fedoraproject.org/wiki/User:Chrismurphy/lvm2btrfs).\nLet’s now learn about Fedora’s latest approach to storage management, Stratis storage.\nDiscovering Stratis storage\n`device mapper`, and existing filesystems such as `XFS`.\nHere’s what you can do with Stratis:\n\n*   Create, modify, and destroy storage pools\n*   Allocate and detach filesystems from storage pools\n*   Encrypt and decrypt filesystem data\n\nStratis storage brings together common storage management tools and automates them for ease of use. Here are some things it uses:\n\n*   **device-mapper** – A framework for logical to physical mapping of data blocks\n*   **LUKS** – An on-disk format for encryption that can securely manage multiple passwords\n*   **XFS** – A scalable, journaling, and performant filesystem\n*   **Clevis** – A framework for automated decryption\n\nHere are the Stratis components:\n\n*   **Blockdev** – Block devices, either a disk or a partition.\n*   **Pool** – Consists of one or more block devices. A pool has a fixed total size, which represents the sum of all the block devices present in it.\n*   **Filesystem** – Filesystems don’t have a fixed total size, thinly provisioned. The real size of the filesystem grows with the data stored in it. The thin volume and the filesystem increase automatically. Each pool could contain one or more filesystems, formatted with XFS.\n\nThe following diagram shows the layout of the components in the Stratis pool:\n![Figure 4.13 – Stratis storage components](img/B19121_04_13.jpg)\n\nFigure 4.13 – Stratis storage components\nLet’s create a Stratis test pool to show its capabilities.\nCreating a Stratis pool\nFor this practice example, reuse the disks used in the *Btrfs* section in this chapter.\nFollow these steps:\n\n1.  Unmount the **Btrfs** and **/test** filesystem and remove the **/****btrfs** directory:\n\n    ```", "```\n\n     2.  Removes the **Btrfs** filesystem from the storage devices using the **wipefs** command:\n\n    ```", "```\n\nThe `--all` parameter deletes all available signatures.\nThe `-f` parameter forces erasure even if the filesystem is mounted.\n\n1.  Install Stratis using the **dnf** command:\n\n    ```", "```\n\n     2.  Use the **systemctl** command to enable the **stratisd** service:\n\n    ```", "```\n\n     3.  With the **fdisk** command, verify the size of the disk:\n\n![Figure 4.14 – Checking the disk size](img/B19121_04_14.jpg)\n\nFigure 4.14 – Checking the disk size\n\n1.  Use the **stratis pool create** command to create the pool test on the **/****dev/vdb** device:\n\n    ```", "```\n\n     2.  List the Stratis pool using the **stratis pool** **list** command:\n\n![Figure 4.15 – Stratis pool list](img/B19121_04_15.jpg)\n\nFigure 4.15 – Stratis pool list\nThe following table lists the fields of the `stratis pool` `list` output:\n\n  **Field**\n |\n  **Description**\n |\n\n  Name\n |\n  The name of the pool\n |\n\n  Total/Used/Free\n |\n  The physical usage statistics for the pool\n |\n\n  Properties\n |\n  Boolean-valued properties that the pool may have. Each property has a two-letter code in camel case. If the pool does not have the property, add a `~` symbol, which stands for *negation*, to the property code.\nIf the engine has experienced an error in obtaining the property, add a `?` symbol, which stands for *unknown*, to the property code.\nThe property codes are as follows:\n\n*   **Ca** - Indicates that the pool has a cache\n\n*   **Cr** - Indicates encrypted pool\n\n*   **Op** - indicates that the pool allows over-provisioning\n\n |\n\n  UUID\n |\n  Universally Unique IDentifier of the pool\n |\n\n  Alerts\n |\n  Anything unusual or urgent information about the pool that the user needs information on.\n |\n\nLet’s now add another device to the pool to see how the available space in the pool increases:\n\n1.  Use the **stratis pool add-data** command to add the **/dev/vdc** device to the Stratis pool and list the pool again to observe the change:\n\n![Figure 4.16 – Stratis pool list](img/B19121_04_16.jpg)\n\nFigure 4.16 – Stratis pool list\nNow let’s create a filesystem to show the differences from a common filesystem.\n\n1.  Create the filesystem data using the **stratis filesystem** **create** command:\n\n    ```", "```\n\n     2.  List the filesystems in the **test** pool to observe their properties. Use the **stratis filesystem** **list** command:\n\n![Figure 4.17 – Stratis filesystem list](img/B19121_04_17.jpg)\n\nFigure 4.17 – Stratis filesystem list\nNote that the total size of the filesystem is 1 TiB, even though the sum of the actual available disk space is 60 GiB:\n\n```", "```\n\n As mentioned, the filesystem gets created on a thinly provisioned 1 TiB block device by design. Stratis handles the allocation of blocks from the pool and resizes the `XFS` filesystem on demand during its lifetime.\nStratis also facilitates the creation of snapshots of filesystems. A Stratis snapshot is a thinly provisioned real-time read/write copy of the source filesystem.\nLet’s see how to create snapshots.\n\n1.  Use the **stratis filesystem snapshot** command to create the snapshot, and then list the filesystems of the pool:\n\n![Figure 4.18 – Stratis filesystem list](img/B19121_04_18.jpg)\n\nFigure 4.18 – Stratis filesystem list\nThe filesystems and their snapshots could mount in the traditional way in the operating system. Use the `mount` command and, to keep them mounted permanently, configure an entry in the `/``etc/fstab` file.\nNote\nFor more information about Stratis, refer to the Stratis documentation at [https://stratis-storage.github.io/howto/](https://stratis-storage.github.io/howto/).\nThis concludes our review of storage basics. In the following chapters, we will review some other fundamental concepts, such as networking and the use of applications, along with applying system administration of Linux systems.\nSummary\nThis chapter consisted of reviewing the basic concepts of storage management and focused on the Btrfs filesystem, performing practical examples to understand its use and main features, identifying storage devices, formatting storage devices, creating pools, and mounting filesystems.\nWe clarified some items that assist in optimizing the allocation of storage space and learned the main differences between Btrfs subvolumes and LVM.\nAs a bonus, we discussed the Fedora Project’s new approach to storage management with Stratis, the intention of which is to ease storage management.\nIn the next chapter, we will cover the fundamental concepts and configurations of network connections and how to optimize them.\nFurther reading\nTo learn more about the topics that were covered in the chapter, please visit the following links:\n\n*   *Fedora Wiki –* *Btrfs*: [https://fedoraproject.org/wiki/Btrfs](https://fedoraproject.org/wiki/Btrfs)\n*   *Btrfs* *documentation*: [https://btrfs.readthedocs.io/en/latest/](https://btrfs.readthedocs.io/en/latest/)\n*   *Choose between Btrfs and* *LVM-ext4*: [https://fedoramagazine.org/choose-between-btrfs-and-lvm-ext4/](https://fedoramagazine.org/choose-between-btrfs-and-lvm-ext4/)\n*   *Getting started with Stratis – up and* *running*: [https://fedoramagazine.org/getting-started-with-stratis-up-and-running/](https://fedoramagazine.org/getting-started-with-stratis-up-and-running/)\n*   *Stratis* *storage*: [https://stratis-storage.github.io/](https://stratis-storage.github.io/)\n\n```"]