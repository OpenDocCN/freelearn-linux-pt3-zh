- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Getting to Know Linux
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Linux
- en: 'Linux is a family of operating systems based on the same kernel. Since it’s
    a family of independently developed systems that have different design principles,
    goals, and implementation details, it’s important to understand what makes that
    very situation possible and how those systems are structured. In this chapter,
    we will discuss the concept of Linux distributions and open source software licensing
    and see how Linux-based systems are used. We will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Linux是一系列基于相同内核的操作系统。由于它是一个由独立开发的系统组成的家族，具有不同的设计原则、目标和实现细节，因此了解是什么使这种情况成为可能以及这些系统是如何构建的非常重要。在本章中，我们将讨论Linux发行版的概念、开源软件许可，并了解Linux系统的使用情况。我们将涵盖以下主题：
- en: The structure of a Linux system
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux系统结构
- en: Open source software licenses
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开源软件许可证
- en: Linux usage in the modern world
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux在现代世界的应用
- en: The structure of a Linux system
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux系统结构
- en: Linux and its multiple distributions often seem complicated for beginners. To
    clarify this, let’s examine the structure and evolution of operating systems in
    general.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Linux及其多个发行版对于初学者来说通常显得复杂。为了澄清这一点，让我们来看看操作系统的结构和发展。
- en: The Linux kernel and Linux-based operating systems
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux内核和基于Linux的操作系统
- en: When people say *Linux*, they may mean different things. In the narrow sense,
    Linux is an operating system kernel that was created in the early 90s by Linus
    Torvalds and is now developed and maintained by a large international community.
    However, when people say they are using Linux, they usually mean a family of operating
    systems that use that kernel and usually (but not always) a set of system libraries
    and utilities created by the GNU project, which is why some insist that such systems
    should be referred to as GNU/Linux instead.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们说*Linux*时，他们可能指的是不同的事物。从狭义上讲，Linux是一个操作系统内核，它由Linus Torvalds在90年代初期创建，现在由一个庞大的国际社区开发和维护。然而，当人们说他们正在使用Linux时，通常指的是一系列使用该内核的操作系统，并通常（但并不总是）包含由GNU项目创建的一组系统库和工具，这也是为什么有些人坚持认为这类系统应当称为GNU/Linux的原因。
- en: Note
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The GNU project is a free software project that was launched in 1983 by Richard
    Stallman. His goal was to create a complete Unix-like operating system composed
    entirely of free software. **GNU** stands for **GNU’s Not Unix**, which reflects
    the project’s goal of creating a free software alternative to the proprietary
    Unix operating system.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: GNU项目是一个自由软件项目，由理查德·斯托曼于1983年发起。其目标是创建一个完全由自由软件组成的类Unix操作系统。**GNU**代表**GNU不是Unix**，这反映了该项目旨在为专有Unix操作系统提供自由软件替代品的目标。
- en: To fully understand how that unusual situation became possible, let’s briefly
    discuss the history of operating systems.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要完全理解这种不寻常的情况是如何可能的，让我们简要讨论一下操作系统的历史。
- en: Kernel versus user space
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内核与用户空间
- en: The earliest computers had very low computational power, so they would only
    have one program in their memory at a time, and that program had complete control
    over the hardware. As computing power increased, it became feasible to have multiple
    users use the same computer at the same time and run multiple programs – an idea
    known as time-sharing or multitasking. Shared computers would run a program known
    as a supervisor that would allocate resources to end user programs. A set of supervisor
    programs and system utilities became known as an operating system. The earliest
    time-sharing systems used cooperative multitasking, where programs were expected
    to transfer control back to the supervisor on their own. However, if a programming
    mistake made a program run into an endless loop or write data to a wrong memory
    address, such a program could cause the entire computer to hang or corrupt the
    memory of another program, including the supervisor.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最早的计算机计算能力非常低，因此它们一次只能在内存中运行一个程序，并且该程序对硬件拥有完全的控制权。随着计算能力的提高，多个用户可以同时使用同一台计算机并运行多个程序——这种思想被称为时间共享或多任务处理。共享计算机会运行一个称为“监控程序”的程序，该程序负责将资源分配给终端用户程序。一系列的监控程序和系统工具被称为操作系统。最早的时间共享系统采用了合作式多任务处理，程序预计会自行将控制权转交给监控程序。然而，如果程序中出现编程错误，导致程序进入死循环或将数据写入错误的内存地址，那么该程序可能会导致整个计算机崩溃，或破坏另一个程序（包括监控程序）的内存。
- en: To make multitasking more reliable, newer generations of hardware introduced
    protection mechanisms that allowed a supervisor program to take control of the
    CPU back from end user programs and forcibly terminate programs that tried to
    write something to memory that belonged to other programs or the supervisor itself.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使多任务处理更加可靠，新一代硬件引入了保护机制，允许监控程序重新控制CPU，强制终止那些试图向属于其他程序或监控程序自身的内存写入内容的程序。
- en: That brought a separation between the operating system kernel and user space
    programs. End user programs physically couldn’t control the hardware directly
    anymore, and neither could they access memory that wasn’t explicitly allocated
    to them. Those privileges were reserved for the kernel – the code that includes
    a process scheduler (serving the same purpose as old supervisor programs) and
    device drivers.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得操作系统内核与用户空间程序之间实现了分离。最终用户程序在物理上不再能够直接控制硬件，也不能访问未明确分配给它们的内存。这些特权保留给内核——它包括进程调度器（其作用与旧版监控程序相同）和设备驱动程序。
- en: 'Inside a single program, programmers are free to organize their code as they
    see fit. However, when multiple independently developed components need to work
    together, there needs to be a well-defined interface between them. Since no one
    writes directly in machine code anymore, for modern systems, this means two interfaces:
    the **Application Programming Interface** (**API**) and the **Application Binary
    Interface** (**ABI**). The API is for programmers who write source code and define
    function names they can call and parameter lists for those functions. After compilation,
    such function calls are translated into executable code that loads parameters
    into the correct places in memory and transfers control to the code to be called
    – where to load those parameters and how to transfer control is defined by the
    ABI.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在单个程序内部，程序员可以自由地组织他们的代码。然而，当多个独立开发的组件需要协同工作时，它们之间需要有一个明确定义的接口。由于现在没有人直接编写机器代码，因此对于现代系统，这意味着两个接口：**应用程序编程接口**（**API**）和**应用程序二进制接口**（**ABI**）。API是为编写源代码并定义可以调用的函数名和这些函数的参数列表的程序员准备的。经过编译后，这些函数调用被转换为可执行代码，将参数加载到内存中的正确位置，并将控制权转交给被调用的代码——如何加载这些参数以及如何转交控制权由ABI定义。
- en: Interfaces between user space programs and libraries are heavily influenced
    by the programming language they are written in.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 用户空间程序与库之间的接口受其编写所用编程语言的深刻影响。
- en: On the contrary, interfaces between kernels and user space programs look more
    similar to hardware interfaces. They are completely independent of the programming
    language and use software interrupts or dedicated *system call* CPU instructions
    rather than the function calls familiar to application programmers.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，内核与用户空间程序之间的接口更类似于硬件接口。它们完全独立于编程语言，使用软件中断或专用的*系统调用* CPU指令，而不是应用程序开发者熟悉的函数调用。
- en: Note
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: A system call in Linux is a mechanism that allows user-level processes to request
    services from the kernel, which is the core of the operating system. These services
    can access hardware devices, manage processes and threads, allocate memory, and
    perform other low-level tasks that require privileged access.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中，系统调用是一种机制，允许用户级进程请求内核提供服务，内核是操作系统的核心。这些服务可以访问硬件设备、管理进程和线程、分配内存，并执行其他需要特权访问的低级任务。
- en: 'Those interfaces are also very low-level: for example, if you want to use the
    `write()` system call to print a string to standard output, you must always specify
    how many bytes to write – it has no concept of a *string variable* or a convention
    for determining its length.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些接口也非常低级：例如，如果你想使用`write()`系统调用将字符串打印到标准输出，你必须始终指定写入多少字节——它没有*字符串变量*的概念，也没有确定其长度的约定。
- en: For this reason, operating systems include standard libraries for one or more
    programming languages, which provide an abstraction layer and a stable API for
    end user programs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，操作系统包含了一个或多个编程语言的标准库，这些库为最终用户程序提供了一个抽象层和稳定的API。
- en: Most operating systems have the kernel, the standard libraries for programming
    languages, and often the basic system utilities developed by a single group of
    people in close collaboration, and all those components are versioned and distributed
    together. In that case, the kernel interface is usually treated as purely internal
    and isn’t guaranteed to remain stable.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数操作系统将内核、编程语言的标准库和通常由一个小组人员紧密协作开发的基本系统工具一起版本化并分发。在这种情况下，内核接口通常被视为纯粹的内部内容，且不保证保持稳定。
- en: The Linux kernel and the GNU project
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux 内核与 GNU 项目
- en: Linux is unique in that it was developed to provide a replacement kernel for
    an existing user space part of an operating system. Linus Torvalds, the founder
    of the project, originally developed it to improve the functionality of MINIX
    – an intentionally simplified Unix-like operating system meant for instruction
    rather than production use. He’s since been using the GNU C compiler and user
    space programs from the GNU project – the project that Richard Stallman started
    with the goal to create a complete Unix-like operating system that would be free
    (as in freedom) and open source, and thus available for everyone to use, improve,
    and redistribute.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 的独特之处在于，它是为了提供一个现有操作系统用户空间部分的替代内核而开发的。该项目的创始人 Linus Torvalds 最初是为了改进 MINIX
    的功能而开发它——MINIX 是一个简化版的类 Unix 操作系统，旨在用于教学而非生产环境。此后，Linus 一直在使用来自 GNU 项目的 GNU C
    编译器和用户空间程序——这是 Richard Stallman 启动的项目，目标是创建一个完整的类 Unix 操作系统，既自由（如自由）又开源，从而让每个人都能使用、改进和重新分发。
- en: At the time, the GNU project had all the user space parts of an operating system,
    but not a usable kernel. There were other open source Unix projects, but they
    were derived from the BSD Unix code base, and in the early 90s, they were targets
    of lawsuits for alleged copyright infringement. The Linux kernel came at a perfect
    time since Linus Torvalds and various contributors developed it completely independently
    and published it under the same license as the GNU project software – the GNU
    **General Public License** (**GPL**). Due to this, a set of GNU software packages,
    plus the Linux kernel, became a possible basis for a completely open source operating
    system.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当时，GNU 项目已经拥有了操作系统的所有用户空间部分，但没有一个可用的内核。还有其他开源 Unix 项目，但它们源自 BSD Unix 代码库，在90年代初，它们成为了版权侵权诉讼的目标。Linux
    内核恰好在这个时候应运而生，因为 Linus Torvalds 和各个贡献者完全独立地开发了它，并以与 GNU 项目软件相同的许可证发布——即 GNU **通用公共许可证**（**GPL**）。因此，一套
    GNU 软件包加上 Linux 内核，成为了完全开源操作系统的潜在基础。
- en: However, Linus Torvalds wasn’t a GNU project member, and the Linux kernel remained
    independent from the **Free Software Foundation** (**FSF**) – it just used a license
    that the FSF developed for the GNU project, but that any other person could also
    use, and many did.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Linus Torvalds 并不是 GNU 项目的成员，Linux 内核依然独立于 **自由软件基金会**（**FSF**）——它仅使用了 FSF
    为 GNU 项目开发的许可证，但任何其他人也可以使用，许多人确实使用了。
- en: Thus, to keep new Linux kernel versions useful together with the GNU C library
    and software that relied on that library, developers had to keep the kernel interface
    stable.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了使新的 Linux 内核版本能够与 GNU C 库及其依赖的相关软件一起使用，开发者必须保持内核接口的稳定性。
- en: The GNU C library wasn’t developed to work with a specific kernel either – when
    that project started, there wasn’t a working GNU kernel, and GNU software was
    usually run on other Unix-like operating systems.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: GNU C 库并不是为了与特定内核配合工作而开发的——当这个项目启动时，并没有一个可用的 GNU 内核，GNU 软件通常运行在其他类 Unix 操作系统上。
- en: As a result, both Linux and the GNU software can be and still are used together
    and in different combinations. The GNU user space software set can also be used
    with the still-experimental GNU hard kernel, and other operating systems use it
    as system or add-on software. For example, Apple macOS used GNU Bash as its system
    shell for a long time, until it was replaced by zsh.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Linux 和 GNU 软件可以并且仍然可以一起使用，并以不同的组合方式使用。GNU 用户空间软件集也可以与仍处于实验阶段的 GNU 硬内核一起使用，其他操作系统也将其作为系统或附加软件。例如，Apple
    macOS 长时间使用 GNU Bash 作为其系统 shell，直到它被 zsh 替代。
- en: The stability guarantees of the Linux kernel interface make it attractive to
    use as a basis for custom operating systems that may be nothing like Unix – some
    of them just have a single program run on top of the kernel. People have also
    created alternative standard libraries for different programming languages to
    use with Linux, such as Musl and Bionic for the C programming language, which
    use more permissive licenses and facilitate static linking. But to understand
    those licensing differences, we need to discuss the concept of software licenses.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Linux内核接口的稳定性保证使其成为定制操作系统的有吸引力基础，这些操作系统可能与Unix完全不同——其中一些操作系统仅在内核之上运行单个程序。人们还为不同的编程语言创建了可与Linux一起使用的替代标准库，如C语言的Musl和Bionic，它们使用更宽松的许可证并促进静态链接。但要理解这些许可证的差异，我们需要讨论软件许可证的概念。
- en: Open source software licenses
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开源软件许可证
- en: A software license is an agreement between a copyright holder and a recipient
    of the software. Modern copyright laws are designed to give authors complete control
    over the use and distribution of their work – copyright automatically exists from
    the moment a piece of work is fixed on any medium and no one can use or copy that
    work without explicit permission from the author. Thus, a license agreement is
    required to grant a user some of the permissions that are reserved for the author
    by default. Authors are free to specify any conditions, and many individuals and
    companies use that to restrict what users can do – for example, only permit non-commercial
    use. A license agreement is also normally made between an author or a copyright
    holder and a specific person.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 软件许可证是版权持有者与软件接收者之间的协议。现代版权法旨在赋予作者对其作品的使用和分发的完全控制权——版权自作品固定在任何媒介上之时自动产生，且未经作者明确许可，任何人不得使用或复制该作品。因此，许可协议是必需的，它授权用户一些默认情况下仅作者拥有的权限。作者可以自由指定任何条件，许多个人和公司利用这一点来限制用户的行为——例如，仅允许非商业使用。许可协议通常也是在作者或版权持有者与特定个人之间达成的。
- en: However, in the late 1980s, programmers and lawyers came up with the idea to
    use authors’ unlimited control over their works to ensure that anyone can use,
    distribute, and modify them rather than prevent that. They introduced *public
    licenses*, which grant permissions to everyone rather than just people who signed
    or otherwise accepted the agreement, and wrote several reusable license agreements
    that anyone could apply to their software. That concept became known as **copyleft**
    – a reversal of copyright. Those licenses became known as open source licenses
    because they explicitly permit the distribution and modification of software source
    code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在1980年代后期，程序员和律师提出了利用作者对作品的无限控制来确保任何人都能使用、分发和修改它们，而不是加以限制的想法。他们引入了*公共许可证*，授予每个人权限，而不仅仅是那些签署或以其他方式接受协议的人，并写了若干可供任何人应用于其软件的可重用许可证。这一概念被称为**版权反转**（copyleft）——即与版权相反的做法。这些许可证被称为开源许可证，因为它们明确允许软件源代码的分发与修改。
- en: 'All the *classic* licenses were born in that period: the MIT license, the BSD
    license, the GNU GPL, and the GNU **Lesser/Library General Public License** (**LGPL**).
    None of those licenses limit users’ rights to use software distributed under them.
    Conditions, if any, apply only to the distribution and modification of executables
    and source code.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的*经典*许可证都诞生于那个时期：MIT许可证、BSD许可证、GNU GPL和GNU **较小/库通用公共许可证**（**LGPL**）。这些许可证没有限制用户在其下分发的软件的使用权。若有条件，亦仅适用于可执行文件和源代码的分发与修改。
- en: Permissive and copyleft licenses
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 允许性许可证和版权反转许可证
- en: When it comes to distribution, two schools of thought differ in their approach
    to distribution conditions.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在分发方面，两种不同的思想流派在分发条件上有所不同。
- en: Proponents of permissive licenses believe that recipients of software must have
    absolute freedom to do anything with it, even to incorporate it into other software
    that isn’t open source or to create closed source derivatives. The MIT and BSD
    licenses are typical examples of permissive open source licenses.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 允许性许可证的支持者认为，软件的接收者必须拥有对软件的绝对自由，包括将其纳入其他非开源软件中，或创建闭源衍生物。MIT许可证和BSD许可证是典型的允许性开源许可证例子。
- en: Proponents of copyleft believe that it’s important to protect open source software
    from attempts to appropriate the work of its authors and create a closed source
    derivative. The GNU GPL is the purest example of this – if anyone distributes
    executables of programs under the GPL or programs that link with libraries under
    the GPL, they must also distribute the source code of that program under that
    license. This is the most radical approach and is known as *strong copyleft*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 反对专有软件的支持者认为，保护开源软件免受试图挪用其作者作品并创建闭源衍生品的行为非常重要。GNU GPL 就是最纯粹的例子——如果有人分发GPL下的程序可执行文件或与GPL库链接的程序，他们必须也在该许可证下分发程序的源代码。这是最激进的做法，称为*强制性反版权*。
- en: Licenses that allow you to link libraries to programs under any other license
    but require library code modifications to be under the same license are known
    as *weak copyleft* licenses. The most widely used example is the GNU LGPL.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 允许将库链接到其他许可证下的程序，但要求库代码的修改也必须遵守相同许可证的许可证被称为*弱反版权*许可证。最常用的例子是 GNU LGPL。
- en: Patent grant, tivoization, and SaaS concerns
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 专利授权、TiVo化和SaaS问题
- en: The GNU GPL was created as a response to the rise of proprietary software distributed
    without source code, which prevented end users from improving it and sharing their
    improvements. However, the software industry is evolving, and new trends are appearing
    that some see as threats to the existence or financial sustainability of open
    source software.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: GNU GPL 是为了应对没有源代码分发的专有软件的兴起而创建的，这种软件阻止了最终用户对其进行改进并分享他们的改进。然而，软件行业正在发展，新的趋势正在出现，一些人认为这些趋势威胁到了开源软件的存在或财务可持续性。
- en: One such threat is *patent trolling* – the use of software patents (in jurisdictions
    where they exist) in bad faith. As a response to it, some newer licenses and new
    versions of old licenses, such as the Apache license and the GNU GPLv3, introduced
    a patent grant clause. Such a clause prevents contributors to the source code
    of software from making patent claims against its users. If they make such legal
    threats, their licenses are revoked.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个威胁是*专利恶意诉讼*——在存在软件专利的司法管辖区内，恶意使用软件专利。对此，一些较新的许可证和旧许可证的新版本（如 Apache 许可证和
    GNU GPLv3）引入了专利授权条款。该条款禁止软件源代码的贡献者对其用户提出专利诉讼。如果他们提出这样的法律威胁，他们的许可证将被撤销。
- en: A more controversial point of the GPLv3 is its attempts to protect users’ rights
    to run modified versions on their hardware. The practice of preventing hardware
    from running custom software through digital signatures and similar mechanisms
    is sometimes called *tivoization*, after a Linux-based digital video recorder
    named TiVo that was an early example of such lock-in. While some projects supported
    the idea to prevent it, for others, the GPLv3 clause was a reason not to switch
    from GPLv2 – the Linux kernel is among those projects that stayed at the old GPL
    version.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: GPLv3 的一个更具争议的点是它试图保护用户在其硬件上运行修改版本的权利。通过数字签名和类似机制防止硬件运行自定义软件的做法有时被称为*TiVo化*，这个术语源自一个基于
    Linux 的数字视频录像机 TiVo，它是早期此类锁定机制的例子。尽管有些项目支持通过这一条款来加以防范，但对其他项目而言，GPLv3 条款成为不从 GPLv2
    转换的理由——Linux 内核便是那些保持使用旧版 GPL 的项目之一。
- en: Finally, all classic licenses were written in a time when all software was deployed
    on-premises, while in the modern world, a lot of software is delivered over a
    network and its executables aren’t accessible to end users – an approach known
    as **Software-as-a-Service** (**SaaS**). Since the GPL says that every recipient
    of a binary executable is entitled to receive its source code, it does not apply
    to SaaS since the user never receives any executables. This allows vendors to
    create modified versions of the software under the GPL without sharing their improvements
    with the community. Several licenses were developed in response to that trend,
    such as the Affero GPL.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，所有经典许可证都是在所有软件都部署在本地的时代编写的，而在现代，许多软件通过网络交付，其可执行文件对最终用户不可访问——这种方法被称为**软件即服务**（**SaaS**）。由于GPL规定每个二进制可执行文件的接收者有权接收其源代码，它并不适用于SaaS，因为用户从未收到任何可执行文件。这使得供应商能够在GPL下创建软件的修改版本，而无需与社区分享他们的改进。为了应对这一趋势，开发了几个许可证，例如
    Affero GPL。
- en: In the last few years, big technology companies that provide hosted versions
    of open source software started to be seen as undermining project maintainers’
    ability to earn money from services since it’s very difficult to compete on price
    with effective monopolies. In response, some projects started switching to licenses
    that have restrictions on usage, which many argue are no longer open source licenses,
    even though the source code is still available. The future of such licenses is
    an open question.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几年里，提供开源软件托管版本的大型科技公司开始被视为削弱项目维护者通过服务赚钱的能力，因为与有效的垄断竞争价格非常困难。对此，一些项目开始转向有使用限制的许可证，许多人认为这些许可证不再是开源许可证，尽管源代码仍然可以获取。此类许可证的未来仍是一个悬而未决的问题。
- en: Linux distributions
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux发行版
- en: The fact that software under open source licenses is free to modify and distribute
    made it possible to assemble complete operating systems with kernels, system libraries,
    and utilities, as well as a selection of application software. Since open source
    licenses have no restrictions on usage, there is no need to make the user accept
    a license agreement for each component.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于开源许可证下的软件可以自由修改和分发，这使得组合包含内核、系统库和实用程序以及应用软件的完整操作系统成为可能。由于开源许可证对使用没有限制，用户不需要为每个组件接受许可协议。
- en: In the early days of Linux, setting up a usable Linux environment was a complicated
    and tedious endeavor. To make that process simpler, Linux enthusiasts started
    preparing the first *distributions* – sets of packages and scripts to automate
    their installation. Many of those early distributions, such as Softlanding Linux
    System and Yggdrasil, are now defunct, but some are still maintained – Slackware
    Linux is a prominent example.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux的早期，设置一个可用的Linux环境是一个复杂而繁琐的过程。为了简化这个过程，Linux爱好者开始准备第一个*发行版*—一组包和脚本，用于自动化安装。许多早期的发行版，如Softlanding
    Linux System和Yggdrasil，现在已经停止维护，但一些仍在维护中——Slackware Linux就是一个显著的例子。
- en: Package managers and package repositories
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包管理器和软件包仓库
- en: Early distributions had a relatively humble goal, which was to provide users
    with a working barebones system that they could then install their application
    software on. However, later distributions set out to rethink the process of software
    installations. The number of open source software projects was growing, and CD
    drives and internet connections were also becoming more affordable, so it was
    feasible to include much more software in a distribution than ever before.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的发行版目标相对简单，即提供一个可以安装应用软件的基本系统。然而，后来的发行版开始重新思考软件安装的过程。随着开源软件项目数量的增加，以及光驱和互联网连接变得更加经济实惠，包含更多软件的发行版变得比以往更加可行。
- en: However, many applications depend on shared libraries or other applications.
    Traditionally, installation packages would either include all dependencies or
    leave that dependency management to the user. Since distribution is managed by
    a single group of maintainers, developers came up with the idea of sharing dependencies
    between all packages that need them and automatically installing all dependencies
    when a user requested the installation of a package. That gave rise to package
    managers and package repositories – collections of files in a special format,
    including compiled binaries and metadata such as the package version and its dependencies.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，许多应用程序依赖于共享库或其他应用程序。传统上，安装包会包含所有依赖项，或者将依赖项管理交给用户。由于发行版由一个维护小组管理，开发人员提出了一个想法：在所有需要依赖的包之间共享依赖项，并在用户请求安装包时自动安装所有依赖项。这催生了包管理器和软件包仓库——一组以特殊格式存储的文件，包括编译后的二进制文件和元数据，如软件包版本及其依赖关系。
- en: The two most popular package formats and package managers that work with them
    were developed in the mid-90s and are still in use today. One is the DEB format,
    which is used with the dpkg utility, developed by Debian. The other is **Red Hat
    Package Manager** (**RPM**), which is used with the rpm utility and is developed
    by Red Hat.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 两种最流行的软件包格式及其相应的包管理器是在90年代中期开发的，并且至今仍在使用。其中一种是DEB格式，配合dpkg工具使用，由Debian开发。另一种是**Red
    Hat包管理器**（**RPM**），与rpm工具一起使用，由Red Hat开发。
- en: 'The dpkg and rpm tools are responsible for installing package files on local
    machines. To install a package, the user needs to retrieve the package itself
    and all packages it depends on. To automate that process, distributions developed
    high-level package managers that can automatically download packages from online
    repositories, check for updates, search metadata, and more. Those high-level package
    managers usually rely on low-level ones to manage the installation. Debian’s **Advanced
    Packaging Tool** (**APT**) usually works with DEB packages, although it’s technically
    possible to use it with RPM. High-level package managers that primarily use the
    RPM format are more numerous: YUM and DNF, which are maintained by Red Hat, zypper
    from openSUSE, and urpmi, which is developed for the now-defunct Mandrake Linux
    and still used by its forks.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: dpkg和rpm工具负责在本地机器上安装包文件。要安装一个包，用户需要获取该包本身以及它所依赖的所有包。为了自动化这个过程，发行版开发了高级包管理器，可以自动从在线仓库下载包，检查更新，搜索元数据等。这些高级包管理器通常依赖低级包管理器来管理安装。Debian的**高级包装工具**（**APT**）通常与DEB包一起使用，尽管技术上它也可以与RPM一起使用。主要使用RPM格式的高级包管理器更多：由Red
    Hat维护的YUM和DNF，来自openSUSE的zypper，以及为现已停用的Mandrake Linux开发的urpmi，仍然被它的分支使用。
- en: Many of the currently existing distributions have either been actively maintained
    since the 90s or are forks that split off at different points in time. For example,
    Ubuntu Linux was forked from Debian GNU/Linux in the early 2000s, while Rocky
    Linux is a Red Hat Enterprise Linux derivative that started in 2021.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 目前存在的许多发行版自90年代以来一直在积极维护，或者是从不同时间点分叉出来的。例如，Ubuntu Linux在2000年代初期从Debian GNU/Linux分叉出来，而Rocky
    Linux是一个从2021年开始的Red Hat Enterprise Linux衍生版。
- en: However, completely independent distributions also appear once in a while. Some
    of them are special-purpose systems that have requirements that classic general-purpose
    distributions cannot fulfill. For example, OpenWrt is a Linux-based system for
    consumer routers, originally developed for the Linksys WRT-54G device, hence the
    name. Such devices often have just a few megabytes of flash drive space, so operating
    systems for them have to be very compact, and they also have to use special filesystems
    such as JFFS that are designed for NAND flash drives.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，完全独立的发行版偶尔也会出现。它们中的一些是特定用途的系统，具有经典通用发行版无法满足的需求。例如，OpenWrt是一个基于Linux的系统，用于消费者路由器，最初是为Linksys
    WRT-54G设备开发的，因此得名。这类设备通常只有几兆字节的闪存空间，因此为它们设计的操作系统必须非常紧凑，而且还必须使用诸如JFFS等专门为NAND闪存驱动器设计的文件系统。
- en: Other independent distributions experiment with different package management
    and installation principles. For example, NixOS and GNU Guix use an approach that
    allows the user to revert system updates if anything goes wrong with new package
    versions.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 其他独立的发行版尝试不同的包管理和安装原则。例如，NixOS和GNU Guix采用一种方法，允许用户在新包版本出现问题时恢复系统更新。
- en: In this book, we will focus on Debian/Ubuntu and Red Hat-based systems because
    they have been the most popular distributions for a long time and remain popular.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将重点介绍基于Debian/Ubuntu和Red Hat的系统，因为它们长时间以来一直是最受欢迎的发行版，并且仍然保持受欢迎。
- en: Differences between distributions
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发行版之间的差异
- en: The differences between distributions do not stop at package managers. Configuration
    file locations may differ, and default configurations for the same packages may
    also differ dramatically. For example, the configuration file directory for the
    Apache HTTP server is `/etc/httpd` on Red Hat Linux derivatives, but `/etc/apache2`
    on Debian derivatives.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 发行版之间的差异不仅仅体现在包管理器上。配置文件的位置可能不同，相同包的默认配置也可能有很大差异。例如，Apache HTTP服务器的配置文件目录在Red
    Hat Linux衍生版上是`/etc/httpd`，而在Debian衍生版上是`/etc/apache2`。
- en: Some distributions also use high-level configuration tools and you may take
    them into account.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一些发行版也使用高级配置工具，你可能需要考虑它们。
- en: The choice of software and its ease of installation may also differ. Debian,
    Fedora, and many other distributions leave the choice of a desktop environment
    to the user and make it easy to install multiple different desktop environments
    on the same system so that you can switch between GNOME3, KDE, MATE, or anything
    else for different login sessions. In contrast, the Ubuntu family of distributions
    includes multiple flavors for different desktop environments and expects that
    if you don’t like its default choice (the Unity desktop environment), you should
    use Kubuntu for KDE, for example, rather than the default Ubuntu. Finally, some
    distributions come with a custom desktop environment and don’t support anything
    else, such as elementary OS.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 软件的选择及其安装的便捷性也可能有所不同。Debian、Fedora 和许多其他发行版将桌面环境的选择交给用户，并且可以轻松地在同一系统上安装多个不同的桌面环境，这样你就可以在不同的登录会话中切换
    GNOME3、KDE、MATE 或其他任何环境。相比之下，Ubuntu 系列发行版包括多个不同桌面环境的版本，并且期望如果你不喜欢其默认的选择（Unity
    桌面环境），你应该使用 Kubuntu（KDE 桌面环境），而不是默认的 Ubuntu。最后，一些发行版带有自定义桌面环境，并且不支持其他桌面环境，例如 elementary
    OS。
- en: However, experienced Linux users can usually find their way around any distribution.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，经验丰富的 Linux 用户通常可以找到任何发行版的使用方法。
- en: Linux usage in the modern world
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux 在现代世界的使用
- en: The open source nature of the Linux kernel and its support for multiple hardware
    architectures made it a very popular choice for custom operating systems, while
    general-purpose Linux distributions also found wide use in every niche where proprietary
    Unix systems were used before.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 内核的开源特性及其对多种硬件架构的支持，使其成为定制操作系统的热门选择，而通用 Linux 发行版也在以往使用专有 Unix 系统的每个领域中找到了广泛的应用。
- en: The most popular Linux-based operating system in the world is Android. While
    most Android applications are written for a custom runtime and never use any functionality
    of the Linux kernel directly, it’s still a Linux distribution.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 世界上最流行的基于 Linux 的操作系统是 Android。虽然大多数 Android 应用程序是为定制的运行时编写的，并且从未直接使用 Linux
    内核的任何功能，但它仍然是一个 Linux 发行版。
- en: Network devices are usually managed through a web GUI or a custom command-line
    interface, but they still often have Linux under the hood. This applies to consumer-grade
    Wi-Fi routers, as well as high-performance enterprise and data center routers
    and switches alike.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 网络设备通常通过 Web 图形用户界面或自定义命令行接口进行管理，但它们仍然经常在背后运行 Linux。这适用于消费者级的 Wi-Fi 路由器，也适用于高性能的企业和数据中心路由器及交换机。
- en: General-purpose Linux distributions are also everywhere. Thanks to built-in
    support for running virtual machines (through Xen or KVM hypervisors), Linux powers
    the largest cloud computing platforms, including Amazon EC2, Google Cloud Platform,
    and DigitalOcean. A lot of guest systems are also Linux machines running web servers,
    database systems, and many other applications.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通用 Linux 发行版也随处可见。得益于内建的虚拟机支持（通过 Xen 或 KVM 虚拟机监控器），Linux 驱动着最大的云计算平台，包括 Amazon
    EC2、Google Cloud Platform 和 DigitalOcean。许多来宾系统也是运行 Web 服务器、数据库系统以及其他许多应用程序的 Linux
    机器。
- en: 'Linux is also widely used in high-performance computing: all of the most powerful
    supercomputers in the world are now running Linux on their control and I/O nodes.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 还广泛应用于高性能计算：目前世界上最强大的超级计算机都在其控制节点和 I/O 节点上运行 Linux。
- en: Last but not least, the author of this chapter typed these words on a Linux
    desktop.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，本章的作者在 Linux 桌面上敲下了这些文字。
- en: Summary
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: A Linux distribution is a complete operating system that includes the Linux
    kernel and a set of libraries and programs developed by various people and companies.
    The Linux kernel and core system libraries are not developed by the same group.
    Instead, the Linux kernel provides a stable ABI that allows anyone to develop
    a standard library for a programming language to run on top of it.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 发行版是一个完整的操作系统，包括 Linux 内核以及由各种个人和公司开发的一组库和程序。Linux 内核和核心系统库并非由同一组开发人员开发，而是
    Linux 内核提供了一个稳定的 ABI，允许任何人开发标准库，使编程语言能够在其之上运行。
- en: Open source licenses come with different conditions, but they all allow anyone
    to use the software for any purpose and distribute its copies, and that’s what
    makes the existence of Linux distributions possible.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 开源许可证有不同的条件，但它们都允许任何人出于任何目的使用软件并分发其副本，这也是 Linux 发行版存在的前提。
- en: Different distributions use different approaches to package management and configuration,
    but experienced users can learn how to use a new distribution fairly quickly if
    they know the fundamentals. These days, Linux can be found everywhere, from mobile
    phones to the most powerful supercomputers.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的发行版使用不同的包管理和配置方法，但有经验的用户如果掌握了基础知识，可以很快学会如何使用新的发行版。如今，Linux无处不在，从手机到最强大的超级计算机都有它的身影。
- en: In the next chapter, we will learn about the various shells available on Linux
    systems, as well as basic commands.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将学习Linux系统上可用的各种shell，以及基本命令。
