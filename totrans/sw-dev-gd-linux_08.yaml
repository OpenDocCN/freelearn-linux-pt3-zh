- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Ownership and Permissions
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所有权和权限
- en: In this chapter, you’ll learn how users and groups are combined with ownership
    and permissions to create the basic Linux security model. This combination of
    primitives is used to control access to just about everything on a Linux system
    – processes, files, network sockets, devices, and more.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何将用户和组与所有权和权限结合起来，从而构建基本的Linux安全模型。这个基本的组合用于控制对Linux系统上几乎所有内容的访问——进程、文件、网络套接字、设备等。
- en: 'First, you’ll get a tour of all the important file information you get from
    a long listing (with an emphasis on permissions, naturally). Then we’ll cover
    the common permissions that you’ll encounter on production Linux systems, and
    finally, we’ll show you all the Linux commands you’ll use to set and modify permissions
    on files. Together, we’ll do the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将了解从长格式列表中获得的所有重要文件信息（自然地，重点是权限）。接着，我们将讲解你在生产Linux系统上可能遇到的常见权限，最后，我们将展示所有用于设置和修改文件权限的Linux命令。我们将共同完成以下内容：
- en: Decipher the output of a long listing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解读长格式列表的输出
- en: Learn about file attributes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习文件属性
- en: Understand how ownership and permissions work
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解所有权和权限的工作原理
- en: Understand a common sticking point, the “octal” permission format
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解常见的难点，“八进制”权限格式
- en: Learn practical commands for changing ownership and permissions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习更改所有权和权限的实用命令
- en: Deciphering a long listing
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解读长格式列表
- en: Let’s dive into this topic by way of a long listing.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过长格式列出这个话题。
- en: 'Sometimes, when you’re navigating around a system, seeing only file and directory
    names isn’t enough. When you want more information about the files you’re seeing,
    use `ls` with its “long” option: `ls -l`.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，当你在系统中导航时，仅看到文件和目录名称并不足够。如果你想要更多关于你看到的文件的信息，可以使用`ls`命令，并加上它的“长格式”选项：`ls
    -l`。
- en: 'Here is an example of its output when run on the `/lib` directory of a system.
    Open a terminal and type `ls -l /lib/`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在系统的`/lib`目录中运行时的输出示例。打开终端并键入`ls -l /lib/`：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We see a lot of interesting information here – let’s step through it, field
    by field.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里看到了很多有趣的信息——让我们逐字段地查看一下。
- en: File attributes
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件属性
- en: 'The first field displays a file’s attributes: file type and permissions. In
    other words, this field shows us which type of file we’re looking at, and what
    its file permissions are. The default lists this information in symbolic mode,
    in contrast to numeric mode, which you can view with `-n`.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个字段显示文件的属性：文件类型和权限。换句话说，这个字段告诉我们我们正在查看哪种类型的文件，以及它的文件权限是什么。默认情况下，这些信息以符号模式列出，与此相对的是数字模式，你可以通过`-n`选项查看该模式。
- en: File type
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件类型
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first character here indicates the file type. In the listing above, the
    `-` character indicates a regular file. Lines starting with `l` indicate a *symbolic
    link*, which is simply a special file that has no content of its own, and just
    points to another location on the filesystem. You can think of it as a Windows
    shortcut or a macOS file alias.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的第一个字符表示文件类型。在上面的列表中，`-`字符表示普通文件。以`l`开头的行表示*符号链接*，这只是一个特殊文件，没有自己的内容，仅指向文件系统上的另一个位置。你可以将其理解为Windows快捷方式或macOS文件别名。
- en: Other common file types are `d`, indicating a directory, or `c`, which indicates
    that you’re looking at a character file – you’ll mainly find the latter in `/dev`,
    representing hardware input devices such as keyboards. For more on file types,
    see the *Filesystem* section of *Chapter 5*, *Introducing Files*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 其他常见的文件类型有`d`，表示目录，或者`c`，表示你正在查看一个字符文件——你主要会在`/dev`目录下找到后者，它代表硬件输入设备，比如键盘。有关文件类型的更多信息，请参见*第5章*的*文件系统*部分。
- en: Permissions
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 权限
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: These are the “permission bits,” which determine which users and groups on the
    system are allowed to read, write, and execute this file. We’ll dive deeper into
    this in the *Permissions* section of this chapter.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是“权限位”，它决定了系统中哪些用户和组可以读取、写入和执行此文件。我们将在本章的*权限*部分深入探讨这个问题。
- en: Number of hardlinks
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬链接数
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The next field indicates the number of hard links. Hard links are special pointers
    linking file names to an actual file. So in most situations, this will be 1 for
    files. In contrast to a symbolic link (“symlink”), which points to a filepath,
    a hardlink points to an actual file. If you move the file that a symlink points
    to, this makes the symlink invalid; a hardlink will keep pointing to a file even
    if that file is moved around, renamed, or otherwise modified.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个字段显示硬链接的数量。硬链接是将文件名与实际文件链接的特殊指针。因此，在大多数情况下，文件的硬链接数量为1。与指向文件路径的符号链接（“symlink”）不同，硬链接指向实际文件。如果你移动了符号链接所指向的文件，符号链接会失效；而硬链接即使文件被移动、重命名或其他方式修改，仍然会指向该文件。
- en: You may have noticed that while most files have only one link pointing to them,
    directories have wildly varying numbers of links in this column. This is because
    each file and directory inside of that directory creates another link reference
    to it. Even an empty directory starts with two links, “.” (the shortcut for “this
    directory”) and “..” (the shortcut for “the directory above this one”).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到，虽然大多数文件只有一个指向它们的链接，但目录在这一列中显示的链接数却差异巨大。这是因为该目录中的每个文件和子目录都会创建另一个链接引用它。即使是一个空目录，起初也有两个链接：“.”（表示“当前目录”）和“..”（表示“上级目录”）。
- en: User ownership
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户所有权
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The third field shows which user owns the file; all files in our example are
    owned by `root`. While you see a username in this example, running `ls` in numeric
    mode – `ls -ln` – will also show a numeric user ID instead of the friendly username
    you see here.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个字段显示了哪个用户拥有该文件；在我们的示例中，所有文件都属于`root`。虽然你在示例中看到了用户名，但如果你以数字模式运行`ls`命令——`ls
    -ln`——则会看到一个数字的用户ID，而不是这里显示的友好的用户名。
- en: Group ownership
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组所有权
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The following field shows the owning group, which also happens to be `root`
    in the example listing above.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的字段显示文件的所属组，在上面的示例中，这个值也是`root`。
- en: File size
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件大小
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you might have guessed, the next field displays the file size. When no additional
    flags are specified, it is displayed in bytes. To make it more readable the `-h`
    (“human-readable”) flag can be used.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能猜到的，接下来的字段显示了文件大小。如果没有指定额外的标志，它会以字节为单位显示。为了让其更易读，可以使用`-h`（“人类可读”）标志。
- en: 'If you’re paying attention, you’ll have noticed that directories all seem to
    have the same file size, 4096:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你留意过，你会发现所有目录似乎都有相同的文件大小，4096：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Files can take up as much or as little space as they need, but directory storage
    is allocated in discrete filesystem blocks. Because the smallest blocksize on
    most filesystems is 4096, directories will report their size as 4096.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 文件可以占用任意大小的空间，但目录的存储是按文件系统块分配的。由于大多数文件系统的最小块大小为4096，因此目录的大小通常会报告为4096。
- en: This rabbit hole goes deeper, but we don’t think the information will be useful
    enough in your day-to-day work as a software engineer to warrant including it
    here. If you’re still curious and want to go deeper, start reading about “Linux
    inodes.”
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这方面的内容其实还有更深的细节，但我们认为这些信息在你作为软件工程师的日常工作中并不够有用，因此不需要在这里包含。如果你仍然好奇并想深入了解，可以开始阅读关于“Linux
    inode”的相关内容。
- en: Modification time
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改时间
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Next, we see the modification timestamp of the file – the last time this file
    was changed.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们看到的是文件的修改时间戳——即文件最后一次修改的时间。
- en: Filename
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件名
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Finally, we come to the filename, which is the only thing you’d see if you were
    doing a regular listing instead of a long listing (`ls` instead of `ls -l`). This
    will usually just be a plain file or directory name, except in the case of a symbolic
    link, or symlink – in that case, you’ll see the symlink name, and the file path
    that it links to.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看到的是文件名，这也是你在做常规列出时唯一能看到的内容，而不是长格式列出（`ls`而非`ls -l`）。通常这只是一个普通的文件或目录名称，除非是符号链接（symlink），在这种情况下，你会看到符号链接的名称和它所指向的文件路径。
- en: Ownership
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所有权
- en: To change the owner of files or directories, use the `chown` (change owner)
    command. The syntax is `chown user:group path` where `user` is the name of the
    owning user and `group` is the name of the group, while `path` is the full or
    relative part to the file or directory.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件或目录的所有者，可以使用`chown`（更改所有者）命令。语法为`chown user:group path`，其中`user`是所有者的用户名，`group`是组名，`path`是文件或目录的完整路径或相对路径。
- en: You can omit the colon and the group to just change the owning user and leave
    group ownership alone. Of course, the user attempting to change permissions on
    a file needs to have permission to do so, so in most situations this command will
    be run as the `root` user.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以省略冒号和组，只更改拥有者用户的权限，而保持组权限不变。当然，试图更改文件权限的用户需要具有相应的权限，因此在大多数情况下，这条命令会以`root`用户身份运行。
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Permissions
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 权限
- en: 'Here’s a single file from our `ls -l` file listing earlier. I’ve tweaked the
    permissions to make this example more illustrative:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们之前`ls -l`命令列出的一个文件。我已调整权限，使这个例子更加具有说明性：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Specifically, look at the permission bits:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，看看权限位：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'They are displayed in three groups of three here. Imagine them separated into
    three groups, to make it easier:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 它们这里被显示为三组三位。想象它们被分成三组，这样会更容易理解：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Each of these triplets represents read (`r`), write (`w`), and execute (`x`)
    permissions for a specific set of users, based on the user and group ownership
    information for that file. If you see a `-` character in place of a letter, that
    action (for the set of users it applies to) is not permitted. Let’s look at them
    in more detail:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这些三位组中的每一组表示对特定用户集的读取（`r`），写入（`w`）和执行（`x`）权限，这取决于该文件的用户和组所有权信息。如果看到`-`字符代替字母，表示该操作（对于适用的用户集）是不被允许的。让我们更详细地看一下：
- en: The first three bits represent the permissions of the file owner. In this case,
    the file’s owner (`root`) can read, write, and execute the file – `rwx`.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前三个位代表文件所有者的权限。在这个例子中，文件所有者（`root`）可以读取、写入和执行该文件——`rwx`。
- en: The second three bits represent permissions for the group owner of the file,
    which in this case is also `root`. The permissions here are `r-x`, or read and
    execute (no writing!). But because `root` is also the user-owner of the file,
    those (more permissive) permissions take precedence; `root` can write to this
    file. The reason you often see permissions like this is because a group owner
    is *required* to be set on files, and if you don’t want to share a file with other
    groups, you can just use the owner’s group here. The group permissions on a file
    are usually less permissive than the owner permissions.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二组三个位代表文件的组所有者权限，在这个例子中，组所有者也是`root`。这里的权限是`r-x`，即读取和执行（不允许写入！）。但是因为`root`也是文件的拥有者，所以这些（更宽松的）权限优先；`root`可以对该文件进行写操作。你常看到类似这样的权限，是因为文件必须设置组所有者，如果你不希望文件与其他组共享，可以使用文件拥有者的组。在文件上，组权限通常比拥有者权限更为严格。
- en: The last three bits represent the permissions that all other system users have
    for this file (“the world”). This is almost always the most restrictive set of
    permissions, because most files don’t need to be shared with anyone outside of
    the owner (and sometimes a separate group owner). In this case, we’re looking
    at a shared library file that needs to be accessible by all system users, so the
    permissions are `r-x` (read and execute, no writing allowed).
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后三个位代表所有其他系统用户对该文件的权限（“世界”）。这通常是最严格的权限设置，因为大多数文件不需要与所有者以外的任何人共享（有时也包括单独的组所有者）。在这个例子中，我们看到的是一个共享库文件，需要让所有系统用户都能访问，因此权限是`r-x`（读取和执行，不允许写入）。
- en: Numeric/octal
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数字/八进制
- en: '“Read,” “write,” and “execute” are terms that make permissions easy to understand,
    but there is another important way that permissions are represented in Linux and
    Unix: octal.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: “读取”，“写入”和“执行”是使权限易于理解的术语，但在Linux和Unix中，权限还有另一种重要的表示方式：八进制。
- en: As a developer, you’re probably familiar with non-decimal number systems – octal
    is simply a base-8 system (instead of the base-10 system – decimal – that we usually
    use as humans, and in contrast to the base-2 system – binary – that computers
    use).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，你可能对非十进制数制比较熟悉——八进制仅仅是一个基于8的系统（与我们通常使用的基于10的十进制系统相对，也不同于计算机使用的基于2的二进制系统）。
- en: Because there are only eight possible states for each three-bit permission combination,
    octal is a perfectly efficient system for representing them.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个三位权限组合只有八种可能的状态，八进制是一个非常高效的表示它们的系统。
- en: Think of our 9 bits, again divided into 3-bit chunks. Each 3-bit permissions-chunk
    can represent an octal number, which requires three bits to represent. These 9
    bits give us exactly the amount of room that we need to represent three octal
    numbers – one for user permissions, one for group permissions, and one for other/world
    permissions.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 想象我们的 9 位，依然分为 3 位一组。每一组 3 位权限块可以表示一个八进制数字，而表示一个八进制数字需要三个位。这样，我们的 9 位刚好能表示三个八进制数字——一个用于用户权限，一个用于组权限，一个用于其他/世界权限。
- en: '| **Octal** | **Binary** | **Meaning** |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| **八进制** | **二进制** | **含义** |'
- en: '| 0 | 0 | **No** permissions (`—`) |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 0 | **无** 权限（`—`） |'
- en: '| 1 | 1 | **Execute** permission (`–x`) |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1 | **执行** 权限（`–x`） |'
- en: '| 2 | 10 | **Write** permission (`-w-`) |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 10 | **写** 权限（`-w-`） |'
- en: '| 3 | 11 | **Write and execute** permissions (`-wx`) |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 11 | **写和执行** 权限（`-wx`） |'
- en: '| 4 | 100 | **Read** permission (`r–`) |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 100 | **读** 权限（`r–`） |'
- en: '| 5 | 101 | **Read and execute** permissions (`r-x`) |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 101 | **读和执行** 权限（`r-x`） |'
- en: '| 6 | 110 | **Read and write** permissions (`rw-`) |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 110 | **读写** 权限（`rw-`） |'
- en: '| 7 | 111 | **Read, write, and execute** permissions (`rwx`) |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 111 | **读、写和执行** 权限（`rwx`） |'
- en: 'Table 8.1: Octal permissions'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 表 8.1：八进制权限
- en: You’ll notice that this is laid out so that octal addition works – adding “read”
    (4) and “execute” (1) together gives you “read and execute” (5).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，这样布局是为了让八进制加法能够工作——将“读”（4）和“执行”（1）加在一起得到“读和执行”（5）。
- en: This may seem strange and arbitrary (and it is!), but you’ll get the hang of
    it quickly. You’ll mostly be using 7 (all), 6 (read/write), 5 (read/execute),
    4 (read), and 0 (no permissions) while working.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来很奇怪且随意（而且确实是！），但你很快就能掌握它。你在工作中大多数情况下会使用 7（所有）、6（读/写）、5（读/执行）、4（读）和 0（无权限）。
- en: Common permissions
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见权限
- en: 'The most common permissions you’ll see are:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到的最常见权限是：
- en: '`-rw-r--r--` (644): Owner can read and write; all others can only read.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-rw-r--r--`（644）：所有者可以读写；其他人只能读取。'
- en: '`-rwxr-xr-x` (755): Owner can do everything; all others can read/execute the
    file. This is a common one for executable files like scripts and binaries, and
    the default permission for directories.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-rwxr-xr-x`（755）：所有者可以做任何事情；其他人可以读取/执行文件。这是可执行文件（如脚本和二进制文件）和目录的默认权限。'
- en: '`-rw------` (600): Only the owner can read and write, no one else can do anything
    with it. This is common for secret keys, files that contain passwords, and other
    sensitive information. SSH, for example, won’t use keys that are group- or world-readable
    until you change their permissions to make them secret.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-rw------`（600）：只有所有者可以读写，其他人无法对其进行任何操作。这个权限通常用于密钥、包含密码的文件和其他敏感信息。例如，SSH 不会使用对组或世界可读的密钥，直到你更改其权限以使其变为私密。'
- en: Changing ownership (chown) and permissions (chmod)
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改所有权（chown）和权限（chmod）
- en: 'You’ll use two commands to change ownership and permissions on files: `chown`
    and `chmod`.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用两个命令来更改文件的所有权和权限：`chown` 和 `chmod`。
- en: Chown
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Chown
- en: '`chown` (change owner) is used to change the owner and group of a file. It’s
    used in the following way:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`chown`（更改所有者）用于更改文件的所有者和组。使用方式如下：'
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'For example, imagine we have this file:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有这个文件：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Change owner
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改所有者
- en: 'Let’s change the owner to `chris` (presuming there’s a `chris` user on the
    system):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将所有者更改为 `chris`（假设系统中有一个 `chris` 用户）：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Change owner and group
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改所有者和组
- en: 'We’ve changed the owner, but if we wanted to change the group, too, we could
    have run:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经更改了所有者，但如果我们还想更改组，也可以运行：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Recursively change owner and group
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 递归地更改所有者和组
- en: 'One common task is changing the owner and group for all files in a given directory.
    You can do this with the `-R` or `--recursive` option:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的任务是更改某个目录下所有文件的所有者和组。你可以使用 `-R` 或 `--recursive` 选项来做到这一点：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This will recursively set ownership for `/home/dave/` and every file and directory
    inside it.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这将递归地设置 `/home/dave/` 及其内部每个文件和目录的所有权。
- en: Chmod
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Chmod
- en: '`chmod` (change mode) is used to change the permissions of a file. You can
    use regular or octal permissions here:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`chmod`（更改模式）用于更改文件的权限。你可以在这里使用常规权限或八进制权限：'
- en: '`chmod [OPTION]... MODE[,MODE]... FILE...`'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`chmod [OPTION]... MODE[,MODE]... FILE...`'
- en: '`chmod [OPTION]... OCTAL-MODE FILE...`'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`chmod [OPTION]... OCTAL-MODE FILE...`'
- en: 'Your options can be given in the form: `ugo{+,-}rwx`'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你的选项可以用以下格式给出：`ugo{+,-}rwx`
- en: '`ugo` (user, group, other – assumed to be all three if you don’t specify).'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ugo`（用户、组、其他——如果没有指定，假设是所有三个）。'
- en: '`+` to add permissions, `-` to remove them.'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`+` 用于添加权限，`-` 用于移除权限。'
- en: '`rwx` (read, write, execute – any or all of these letters).'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`rwx`（读、写、执行——这些字母的任何或所有组合）。'
- en: 'For example, to add execute permissions for the user who owns the file:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要为拥有文件的用户添加执行权限：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To add write and execute permissions for the group and all other users:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要为组和所有其他用户添加写入和执行权限：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Oops, we actually wanted to remove all permissions for others:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀，我们其实是想移除其他用户的所有权限：
- en: '[PRE22]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Octal format for permissions can be set just like you’d expect:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 权限的八进制格式可以像你预期的那样设置：
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Actually, let’s make that file read-only:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，让我们将这个文件设置为只读：
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Using a reference
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用引用
- en: Both `chown` and `chmod` allow us to use a `--reference` argument, with which
    we can pass a file from which ownership or permissions will be copied.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`chown` 和 `chmod` 都允许我们使用 `--reference` 参数，通过该参数我们可以传递一个文件，从该文件复制所有权或权限。'
- en: Conclusion
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: 'In this chapter, we covered everything you need to know to solve the most common
    Linux permissions problems: you learned how to view permissions on files and how
    to modify them. More importantly, we showed you how to reason about permissions
    and how they tie in with Linux users and groups, which is where many people stumble.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了你需要知道的解决最常见 Linux 权限问题的所有内容：你学习了如何查看文件的权限，以及如何修改它们。更重要的是，我们向你展示了如何推理权限问题，以及它们如何与
    Linux 用户和组相关联，这也是许多人容易犯错的地方。
- en: Make sure you have a strong grasp of the material in this chapter; a huge percentage
    of the troubleshooting you’ll have to do during your career will revolve around
    file ownership and permission problems. Thankfully, most of these problems arise
    from a simple lack of understanding, which you no longer have. Go forth and troubleshoot!
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经牢牢掌握本章的内容；在你的职业生涯中，解决问题的大部分时间都将围绕文件所有权和权限问题展开。幸运的是，大多数这类问题源于对基本概念的误解，而你现在已经不再困惑。去吧，去解决问题吧！
- en: Learn more on Discord
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入本书的 Discord 社区——你可以在这里分享反馈、向作者提问并了解新版本——请扫描下面的二维码：
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/SecNet](https://packt.link/SecNet)'
- en: '![](img/QR_Code1768422420210094187.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code1768422420210094187.png)'
