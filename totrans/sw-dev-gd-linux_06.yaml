- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Editing Files on the Command Line
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在命令行上编辑文件
- en: Editing text on the command line is often a hard requirement due to the constraints
    of production systems, which tend to lack a graphical user interface. However,
    becoming fluent at editing text on the command line has many benefits even outside
    of those systems – indeed, even when you have graphical text editors or **integrated
    development environments** (**IDEs**) available.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行上编辑文本常常是生产系统的硬性要求，因为这些系统通常缺乏图形用户界面。然而，即使在没有这些系统的情况下，熟练掌握命令行文本编辑也有很多好处——实际上，即使你有图形化文本编辑器或**集成开发环境**（**IDEs**）可用。
- en: For example, many full-featured text editors and IDEs support the patterns you’ll
    learn about in this chapter, which means the speed and efficiency you gain is
    transferrable to other tools. In fact, you can use the shortcuts you’ll learn
    in this chapter for all kinds of things, from quickly finding and replacing text
    to correcting a misspelled word in the middle of a long shell command.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，许多功能齐全的文本编辑器和 IDE 都支持本章中你将学到的模式，这意味着你获得的速度和效率是可以转移到其他工具上的。事实上，你可以在所有种类的工作中使用本章中学到的快捷键，从快速查找和替换文本到在长长的
    shell 命令中更正拼写错误。
- en: You might even find similar shortcuts built into your favorite tools (sometimes
    via plugins); for example, you’re only a few Google searches away from discovering
    email clients, browser plugins, and web applications that support the vim keyboard
    shortcuts that you’ll learn later in this chapter.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可能会发现你最喜欢的工具（有时通过插件）内置了类似的快捷键；例如，通过几次 Google 搜索，你就能发现支持 vim 键盘快捷键的电子邮件客户端、浏览器插件和
    Web 应用程序，而这些快捷键你将在本章后面学到。
- en: Learning how to think in the efficient patterns that these minimal, text-only
    interfaces require can help you find more efficient ways of doing things you’ll
    have to do every day, preventing you from wasting time tediously clicking through
    graphical menus or wizards when you can accomplish the same task with just a few
    keystrokes.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 学会以这些简约、纯文本界面所要求的高效模式进行思考，可以帮助你找到更高效的方式完成你每天必须做的事情，避免你在可以通过几次按键就完成任务时，浪费时间一遍又一遍地点击图形菜单或向导。
- en: '**Note**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: Many extremely minimal (or highly secure) environments also tend to strip text
    editors out of production images, although that doesn’t improve security (cat,
    echo, mv, and input/output redirection are more than enough to improvise a workable
    text editor in a pinch). You — like hackers everywhere — will likely end up installing
    nano or vim in quite a few Docker containers over the course of your life.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 许多极其简约（或高度安全）的环境也倾向于将文本编辑器从生产镜像中移除，尽管这并不能提高安全性（`cat`、`echo`、`mv` 和输入/输出重定向足以在紧急情况下临时充当一个可用的文本编辑器）。你——就像世界各地的黑客一样——很可能会在你的一生中在许多
    Docker 容器中安装 nano 或 vim。
- en: 'In this chapter, you’ll learn the basics of two text editors: one that we think
    is the easiest to get started with (nano) and another that we think is the best
    long-term learning investment for your career (vim). You’ll get the basic context
    for how command-line text editing is done on Linux, dive into nano and vim, and
    finally, learn how to avoid the most common editing mistakes. We’ll also show
    you how to tweak your shell to automatically use your preferred editor when possible.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习两款文本编辑器的基础知识：我们认为最容易入门的一款（nano），以及我们认为对你职业生涯最有长期投资价值的一款（vim）。你将了解 Linux
    中命令行文本编辑的基本背景，深入学习 nano 和 vim，最后，学习如何避免最常见的编辑错误。我们还将展示如何调整你的 shell 以便在可能的情况下自动使用你首选的编辑器。
- en: Nano
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nano
- en: Nano is a small and easy-to-use CLI text editor. One of the features of nano
    — you might even call it the main feature — is that it prominently has a keyboard-shortcut
    cheat sheet bolted to the bottom of your screen while you happily edit text in
    your terminal. This is particularly useful if you’re under stress and not used
    to editing text on the command line.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Nano 是一个小巧且易于使用的命令行文本编辑器。Nano 的一个特点——你甚至可以称它为主要特点——是它会在你愉快地在终端中编辑文本时，在屏幕底部突出显示键盘快捷键备忘单。这在你感到压力山大且不习惯在命令行中编辑文本时尤其有用。
- en: Nano is good in a pinch, but you won’t find it installed in more minimal environments
    (such as Docker containers or production VMs). Be aware that nano also tends to
    automatically make backup files (`~yourfile.txt`), thereby potentially polluting
    the filesystem.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Nano 在紧急情况下很好用，但你不会在更多的简约环境中找到它（例如 Docker 容器或生产虚拟机）。需要注意的是，nano 还倾向于自动创建备份文件（`~yourfile.txt`），从而可能污染文件系统。
- en: Installing nano
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 nano
- en: 'On all the popular Linux distributions you’re likely to use, the package name
    for nano is `nano` – use your preferred OS’s package manager to install it (in
    this case, we’re installing it on Ubuntu):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在你可能使用的所有流行Linux发行版中，nano的包名是`nano`——使用你偏好的操作系统的包管理器来安装它（在这里，我们是在Ubuntu上安装它）：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Nano cheat sheet
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Nano备忘单
- en: 'You can find an official, up-to-date nano cheat sheet here: [https://www.nano-editor.org/dist/latest/cheatsheet.html](https://www.nano-editor.org/dist/latest/cheatsheet.html)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到一个官方的、最新的nano备忘单：[https://www.nano-editor.org/dist/latest/cheatsheet.html](https://www.nano-editor.org/dist/latest/cheatsheet.html)
- en: Some of the most useful commands are called out in the following sections.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下章节中列出了最有用的命令。
- en: File handling
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件处理
- en: '*Ctrl*+*S*: Save current file'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl*+*S*：保存当前文件'
- en: '*Ctrl*+*O*: Offer to write file (“Save as”)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl*+*O*：提供写入文件的选项（“另存为”）'
- en: '*Ctrl*+*R*: Insert a file into the current one'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl*+*R*：将文件插入到当前文件中'
- en: '*Ctrl*+*X*: Close buffer, exit from nano'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl*+*X*：关闭缓冲区，退出nano'
- en: Editing
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑
- en: '*Ctrl*+*K*: Cut the current line into a cutbuffer'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl*+*K*：将当前行剪切到剪切缓冲区'
- en: '*Ctrl*+*U*: Paste contents of the cutbuffer'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl*+*U*：粘贴剪切缓冲区中的内容'
- en: '*Alt*+*3*: Comment/uncomment a line/region'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Alt*+*3*：注释/取消注释一行/区域'
- en: '*Alt*+*U*: Undo last action'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Alt*+*U*：撤销上一步操作'
- en: '*Alt*+*E*: Redo last undone action'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Alt*+*E*：重做上一步撤销的操作'
- en: Search and replace
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找与替换
- en: '*Ctrl*+*Q*: Start backward search'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl*+*Q*：开始向后查找'
- en: '*Ctrl*+*W*: Start forward search'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl*+*W*：开始向前查找'
- en: '*Alt*+*Q*: Find next occurrence backward'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Alt*+*Q*：查找上一个出现的位置'
- en: '*Alt*+*W*: Find next occurrence forward'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Alt*+*W*：查找下一个出现的位置'
- en: '*Alt*+*R*: Start a replacing session'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Alt*+*R*：开始替换操作'
- en: Vi(m)
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vi(m)
- en: Vi (often referred to as ex-vi or nvi) is a command-line text editor. Vim (vi
    iMproved) is an extended version, that many people use as an entire IDE. vi and
    vim share the same basic commands and keyboard bindings, so if you just learn
    the basics, you’ll be fine no matter what kind of ancient or modern system you
    log in to.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Vi（通常被称为ex-vi或nvi）是一个命令行文本编辑器。Vim（vi iMproved）是一个扩展版本，很多人将它作为整个IDE使用。vi和vim共享相同的基本命令和键盘绑定，所以只要你学会了基础，无论登录什么样的古老或现代系统，你都能应对自如。
- en: 'Fair warning: vim is complicated and has a relatively steep learning curve.
    It’ll probably take a few weeks of spare time studying and experimenting to get
    comfortable with it – comparable to setting up your first Linux web server or
    writing your first 500-line program.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 温馨提示：vim很复杂，学习曲线较陡。可能需要几周的业余时间来学习和实验，才能感到熟练——这就像是设置第一个Linux网页服务器或编写第一个500行的程序一样。
- en: The wonderful thing about learning vim is that you can use it locally on your
    laptop or remotely on a server that has no GUI, and the editing experience is
    the same – beautifully efficient – in both places. To use it effectively, both
    a shift in mindset and an understanding of its vocabulary (the *commands* and
    *modes* we’ll get into) are important.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 学习vim的一个奇妙之处在于，你可以在笔记本电脑上本地使用它，或者在没有图形界面的远程服务器上使用，它们的编辑体验是相同的——都非常高效美观。为了有效使用它，心态的转变和对其词汇（我们将要介绍的*命令*和*模式*）的理解非常重要。
- en: As with learning any other skill, some dedicated practice followed by consistent
    use of the editor is essential to really build up an understanding and feel comfortable.
    Some initial struggle and confusion will likely be part of that. Please don’t
    let this deter you!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 像学习其他任何技能一样，一些专注的练习和持续使用编辑器是建立理解并感到舒适的关键。刚开始可能会遇到一些困难和困惑，这很正常。请不要让这些影响你的学习进程！
- en: Vim is a modal editor, meaning that the same keys do different things depending
    on which “mode” you’re in. For example, when you’re in insert mode, your keypresses
    will simply be written into the file (or buffer) you’re editing – much like your
    IDE or Microsoft Word. However, in normal mode, pressing those same letter keys
    will execute whatever keybinding they are tied to. Once you’ve adjusted to that
    idea – **modal editing** – the rest of vi/vim is just practice.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Vim是一个模式编辑器，这意味着相同的按键在不同的“模式”下执行不同的操作。例如，当你处于插入模式时，你按下的键将直接写入你正在编辑的文件（或缓冲区）——就像你在使用IDE或Microsoft
    Word一样。然而，在普通模式下，按下相同的字母键会执行与之绑定的命令。一旦你适应了这一点——**模式编辑**——剩下的vi/vim内容就是不断的练习。
- en: For example, if you start vim and type a lowercase *i* twice, the first *i*
    will enter insert mode, while the second will actually write an *i* character
    in the editing window (buffer) that you’re editing a file with. If this sounds
    confusing right now, it’s okay. Even if you never choose to use vim as your regular
    IDE, you’ll feel a lot more comfortable with its basics by the end of this chapter.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你启动vim并连续输入两个小写的*i*，第一个*i*将进入插入模式，而第二个*i*将实际在编辑窗口（缓冲区）中写入*i*字符。如果现在听起来很混乱，没关系。即使你从不打算将vim作为常规IDE使用，到本章结束时，你对其基础知识也会感到更加熟悉。
- en: '**Note**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: It is also worth mentioning that another vim-like editor, nvim (neovim), has
    started gaining traction at the time of writing this book. Most of what applies
    to vim also applies to nvim, so there is no need to worry about which one to get
    started with. The major differences are around plugin development, so you won’t
    lose anything if you decide to switch from vim to neovim down the road, as we
    have.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，在撰写本书时，另一个类似vim的编辑器nvim（neovim）开始逐渐流行起来。大部分适用于vim的内容也同样适用于nvim，所以不必担心从vim转到neovim。它们主要的区别在于插件开发，因此如果你决定以后从vim转到neovim，你不会失去任何东西。
- en: Vi/vim commands
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Vi/vim命令
- en: Here are some basic vi(m) commands – hit *Escape* before using any of these,
    to make sure you’re in Normal mode.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些基本的vi(m)命令 – 在使用这些命令前，请先按下*Escape*键确保你处于普通模式。
- en: Modes
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模式
- en: '*v* – enter visual mode. This feature only exists in vim (not vi) and can easily
    be overused in the beginning because it’s familiar to people coming from other
    editors.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*v* – 进入可视模式。这个功能只存在于vim（而不是vi），初学者可能会过度使用，因为它对从其他编辑器过来的人来说更加熟悉。'
- en: '*ESC* — exit whichever mode you’re in and go to Normal mode, where you can
    give commands.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*ESC* — 退出当前模式并进入普通模式，可以执行命令。'
- en: Command mode
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命令模式
- en: Command mode can be reached from normal mode (hit *Escape*) by typing a colon
    (`:`). We’ve included the colon in the commands below for clarity.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在普通模式中按下*Escape*键，然后键入冒号（`:`）进入命令模式。为了清晰起见，下面的命令中包含了冒号。
- en: Helpers
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 助手
- en: '`:set number` – show line numbers.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:set number` – 显示行号。'
- en: '`:set paste` – this is helpful if you want to paste things into vim and don’t
    want it to interact with indentation. You can disable it again with `:set nopaste`.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:set paste` – 如果你想粘贴内容到vim中且不希望其影响缩进，这很有帮助。你可以用`:set nopaste`再次禁用它。'
- en: Exiting
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 退出
- en: '`:q` – quit'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:q` – 退出'
- en: '`:q!` – quit without saving (force quit)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:q!` – 不保存退出（强制退出）'
- en: '`:w` – write (“save”) the file'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:w` – 写入（保存）文件'
- en: '`:wq` – write and quit'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:wq` – 写入并退出'
- en: '`:wqa` – only vim; helps when multiple panes are open, such as a plugin opening
    a file browser on the side'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:wqa` – 仅适用于vim；在多个窗格打开时有帮助，比如插件在侧边打开文件浏览器时'
- en: Normal mode
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 普通模式
- en: Normal mode is the mode you’re in when you start vim, before typing anything.
    You can always get back to normal mode by hitting the *Escape* key.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 普通模式是你启动vim时的模式，在输入任何内容之前都是如此。你可以随时通过按下*Escape*键返回普通模式。
- en: Navigation
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 导航
- en: '*k* – move up'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*k* – 向上移动'
- en: '*j* – move down'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*j* – 向下移动'
- en: '*l* – move right'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*l* – 向右移动'
- en: '*h* – move left'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*h* – 向左移动'
- en: Alternatively, it is possible to use the arrow keys, but it can be helpful to
    think in terms of vi shortcuts, instead of trying to drive vi(m) like an ordinary
    editor. We’ve found that it helps to stick to vi’s movement keys when you’re practicing
    with it.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，也可以使用箭头键，但考虑使用vi快捷键会更有帮助，而不是像普通编辑器一样操作vi(m)。我们发现在练习时坚持使用vi的移动键会更有效。
- en: '*w* – next word'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*w* – 移动到下一个单词'
- en: '*b* – beginning of the current word or previous word'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*b* – 移动到当前单词或前一个单词的开头'
- en: '*^* or *0* – go to the beginning of the line'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*^* 或 *0* – 移动到行首'
- en: '*$* – go to the end of the line'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*$* – 移动到行尾'
- en: '*gg* – go to the beginning of the file'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*gg* – 移动到文件开头'
- en: '*G* – go to the end of the file'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*G* – 移动到文件末尾'
- en: Editing
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编辑
- en: '*i* – enter insert mode (write actual text). *I* inserts at the beginning of
    the line.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*i* – 进入插入模式（写入实际文本）。*I* 在行首插入。'
- en: '*a* – insert text, appending after the cursor. *A* appends on the end of the
    current line.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*a* – 插入文本，在光标后添加。*A* 在当前行的末尾添加。'
- en: '*o* – open a new line (*O* opens a new line before the current one).'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*o* – 打开新行（*O* 在当前行之前打开新行）'
- en: '*/* – search for pattern (regexes work here; use *ENTER* to search and *n*
    and *SHIFT*+*n* to cycle forward or backward through search results).'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*/* – 搜索模式（支持正则表达式；使用*ENTER*进行搜索，*n*和*SHIFT*+*n*循环前进或后退搜索结果）。'
- en: '*dd* – delete (and cut) the current line.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*dd* – 删除（并剪切）当前行。'
- en: '*y* – yank (copy) selected text.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*y* – 复制选中的文本（yank）'
- en: '*yy* – yank (copy) the current line.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*yy* – 复制当前行。'
- en: '*p* – put/paste text after the cursor.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*p* – 将文本粘贴到光标后。'
- en: '*u* – undo the last change.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*u* – 撤销上一次更改。'
- en: '*CTRL*+*R* – redo.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*CTRL*+*R* – 重做。'
- en: '*nX* – where *n* is a number and *X* is a command, will execute *X n* times.
    For example, *3dd* will delete three lines.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*nX* – 其中*n*是数字，*X*是命令，将执行*X n*次。例如，*3dd*将删除三行。'
- en: Tips for learning vi(m)
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习vi(m)的技巧
- en: Over a few weeks of normal editing tasks, you can become quite comfortable with
    vim. That said, it’s not always easy to get started. Here are our tips for making
    the journey smoother.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在几周的正常编辑任务中，你可以变得相当熟悉vim。尽管如此，刚开始时并不容易。以下是我们使旅程更顺畅的建议。
- en: Use vimtutor
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用vimtutor
- en: Vim comes with a built-in tutorial. If you want to get started with vim, this
    is probably the very first thing you want to do. Just run `vimtutor` on your command
    line to open vim and the tutorial.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Vim自带了一个内置教程。如果你想开始使用vim，这可能是你首先要做的事情。只需在命令行中运行`vimtutor`来打开vim和教程。
- en: Think in terms of mnemonics
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过助记符来思考
- en: When using vi(m) to edit files, it’s common to “build sentences” using the commands
    you saw above. For example, `d2w` means “delete two words.” While we tried to
    mention fitting words in the command list above, different people prefer different
    mental concepts, so don’t feel scared to build up your own vocabulary.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用vi(m)编辑文件时，通常会用你上面看到的命令来“构建句子”。例如，`d2w`表示“删除两个单词”。虽然我们尽力在上面的命令列表中提到合适的单词，但不同的人有不同的思维方式，所以不要害怕建立你自己的词汇。
- en: Avoid using arrow keys
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 避免使用箭头键
- en: Avoid using arrow keys and consider disabling this feature. It prevents you
    from thinking of vim as another editor and reduces the time it takes until you’re
    comfortable with its standard keybindings. Don’t worry; although this may feel
    strange at the beginning, you will get used to the basic vim keybindings after
    a few sessions.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 避免使用箭头键，并考虑禁用此功能。这可以避免你把vim当作另一个编辑器来使用，并减少你适应其标准键绑定所需的时间。别担心；虽然刚开始时可能会觉得奇怪，但你会在几次使用后习惯基本的vim键绑定。
- en: Avoid using the mouse
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 避免使用鼠标
- en: While vim can be used with a mouse for visual selection, it makes sense to resist
    this temptation and keep training your working memory of the keyboard shortcuts.
    Otherwise, you’ll switch back and forth and not be comfortable when it counts,
    like when you’re troubleshooting on a remote server that has no mouse input at
    three in the morning.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管vim可以用鼠标进行可视化选择，但最好抵制这个诱惑，并继续训练你的键盘快捷键的工作记忆。否则，你会在两者之间反复切换，在关键时刻（比如凌晨三点在没有鼠标输入的远程服务器上排除故障时）会感到不适应。
- en: Don’t use gvim
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不要使用gvim
- en: While gvim (graphical/GUI vim) can be useful, it is not a good idea to use its
    graphical shortcuts when no proper terminal is available. The benefit of vi(m)
    is that it allows for effective text manipulation via the keyboard when you don’t
    have a graphical environment available – like the many Linux servers you’ll be
    troubleshooting after reading this book!
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管gvim（图形化/GUI vim）在某些情况下很有用，但在没有合适终端的情况下，使用其图形快捷键并不是一个好主意。vi(m)的好处在于，当没有图形环境时，它可以通过键盘高效地进行文本操作——就像你在读完这本书后将要排查的许多Linux服务器一样！
- en: Avoid starting with extensive configuration or plugins
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 避免从大量配置或插件开始
- en: A typical beginner’s mistake is starting with someone else’s vim configuration.
    Although they seem useful at first, heavily customized vim setups can hinder you
    when you’re just trying to learn the basic concepts. Extensive configurations
    will not magically make you more productive, especially not in the beginning.
    Once you become more confident, you will find yourself writing your own configuration.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的初学者错误是从别人的vim配置开始。虽然它们一开始看起来很有用，但高度自定义的vim设置会在你刚开始学习基本概念时阻碍你。大量的配置并不会神奇地让你变得更高效，尤其是在刚开始的时候。一旦你变得更自信，你会发现自己开始编写自己的配置。
- en: 'Another thing to avoid is excessive plugin usage, especially early on. Occasionally,
    plugins break things, which can become a burden and lead to more issues. Vim plugin
    troubleshooting is not something you want to deal with when you are just getting
    started. Third-party configuration files and plugins can be amazingly useful,
    but they can also become a crutch: when you are suddenly thrown into an environment
    outside of your development machine, you won’t be able to rely on all of that
    fancy stuff. If you’ve come to depend heavily on a custom workflow, even basic
    edits can become difficult and frustrating, especially under stress.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要避免的事情是过度使用插件，尤其是在刚开始时。插件偶尔会导致一些问题，这可能会成为负担并引发更多问题。刚开始使用 vim 时，解决插件相关问题不是你想要处理的事情。第三方配置文件和插件确实非常有用，但它们也可能成为一种依赖：当你突然进入一个不同于开发环境的环境时，你将无法依赖那些炫酷的东西。如果你已经过于依赖定制化的工作流程，即使是基本的编辑也可能变得困难且令人沮丧，尤其是在压力下。
- en: A more sensible approach is to start out with a minimal configuration and only
    add bits that you fully understand (and that you’re sure you will need). Your
    time is much better spent actually using the editor on real projects, because
    it trains you to retain the most important vim shortcuts in your working memory.
    It takes some time, but eventually you will use them without really thinking about
    the actual commands, rather just thinking in terms of the mnemonics you’ve made
    up for yourself.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 更为明智的做法是从一个简洁的配置开始，只添加你完全理解的部分（并且确保你确实需要）。你将更多的时间用于实际在项目中使用编辑器，因为这能帮助你记住最重要的
    vim 快捷键并保持在工作记忆中。虽然需要一些时间，但最终你会不假思索地使用它们，而是通过你为自己编制的助记符来思考。
- en: Here is an example of a minimal vim configuration that might be helpful in the
    beginning. Feel free to change it, or just pick out parts that seem useful.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简洁的 vim 配置示例，适合初学者使用。你可以随意修改，或者挑选看起来有用的部分。
- en: 'Put this into your `$HOME/.vimrc`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容添加到你的 `$HOME/.vimrc` 中：
- en: '[PRE1]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Vim bindings in other software
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在其他软件中的 Vim 绑定
- en: Should you start enjoying and preferring the way vim works, it is worth mentioning
    that many text editors and IDEs have options and plugins to switch to a vim input
    mode. There are even web browsers with vim-style inputs!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你开始喜欢并习惯 vim 的使用方式，值得一提的是，许多文本编辑器和 IDE 都有选项和插件可以切换到 vim 输入模式。甚至有些网页浏览器也提供了
    vim 风格的输入！
- en: 'If you’re curious or would like a review of the vim material in this chapter,
    you can find a video tutorial that covers some of the most important parts of
    this chapter (and even some extra vim features!) here: [https://www.youtube.com/watch?v=ggSyF1SVFr4](https://www.youtube.com/watch?v=ggSyF1SVFr4)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对 vim 章节中的内容感兴趣或想要复习，可以在这里找到一个视频教程，涵盖了本章中一些最重要的内容（甚至包括一些额外的 vim 功能！）：[https://www.youtube.com/watch?v=ggSyF1SVFr4](https://www.youtube.com/watch?v=ggSyF1SVFr4)
- en: Editing a file you don’t have permissions for
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑一个你没有权限修改的文件
- en: Regardless of which editor you use, sometimes you’ll want to edit a file that
    your user doesn’t have write permissions for. For example, if you’re a regular
    user and you want to edit `/etc/hosts` – a file owned by root, and writable only
    by root – you’ll need to either become root or use the `sudo` command. See *Chapter
    7*, *Users and Groups*, for more details.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你使用哪个编辑器，有时你需要编辑一个当前用户没有写权限的文件。例如，如果你是普通用户，想编辑 `/etc/hosts` —— 这是一个由 root
    拥有且仅 root 可写的文件 —— 你需要成为 root 或使用 `sudo` 命令。更多详情请参见*第7章*，*用户和组*。
- en: 'While a command like `sudo $EDITOR /etc/hosts` can be used to edit files as
    root, a better approach is to use `sudoedit` to execute your editing command as
    root:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然像 `sudo $EDITOR /etc/hosts` 这样的命令可以用来以 root 用户编辑文件，但更好的方法是使用 `sudoedit` 以
    root 身份执行编辑命令：
- en: '`sudoedit /etc/hosts`'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sudoedit /etc/hosts`'
- en: '`EDITOR=nano sudoedit /etc/hosts`'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EDITOR=nano sudoedit /etc/hosts`'
- en: '`EDITOR=vi sudoedit /etc/hosts`'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EDITOR=vi sudoedit /etc/hosts`'
- en: The first example will use whatever editor you’ve got set in your `EDITOR` environment
    variable, while the other two commands pass in (or override) the `EDITOR` environment
    variable as part of the command.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个示例将使用你在 `EDITOR` 环境变量中设置的编辑器，而其他两个命令则会将 `EDITOR` 环境变量作为命令的一部分传递（或覆盖）。
- en: Setting your preferred editor
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置你偏好的编辑器
- en: 'Linux and in fact all Unix-like systems allow you to set your preferred editor
    via the `EDITOR` environment variable. Most command-line software that launches
    an editor for certain tasks, like `git` when you make a commit or `visudo` editing
    your sudoers file, will use this variable to know which editor to open. You can
    set this `EDITOR` variable to a path to any editor you like, even graphical ones
    (provided your system has a graphical user interface installed):'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 以及所有类 Unix 系统都允许你通过`EDITOR`环境变量设置首选编辑器。大多数命令行软件在执行某些任务时（例如`git`提交时或`visudo`编辑
    sudoers 文件时），会使用此变量来确定打开哪个编辑器。你可以将此`EDITOR`变量设置为任何你喜欢的编辑器的路径，甚至是图形界面的（前提是你的系统安装了图形用户界面）：
- en: '[PRE2]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that the interactive shell command above will only work until the current
    shell session is closed; to persist this setting in the Bash shell, I’d add it
    to my `~/.bashrc` file. See *Chapter 4*, *Using Shell History* for more details.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上述交互式 shell 命令仅在当前 shell 会话关闭之前有效；要将此设置持久化到 Bash shell 中，我会将其添加到我的`~/.bashrc`文件中。有关更多详细信息，请参阅*第四章*，*使用
    Shell 历史*。
- en: Conclusion
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'In this chapter, you learned how to edit text files on the command line. First,
    we introduced the easiest way to get started (nano), and then we showed you how
    to start graduating to a skillset that will pay dividends for the duration of
    your career: vi/vim and their keybindings, which you’ll find supported in an incredibly
    wide variety of software.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何在命令行上编辑文本文件。首先，我们介绍了最简单的入门方式（nano），然后我们展示了如何逐步转向一种技能集，这种技能集将在你整个职业生涯中产生回报：vi/vim
    及其键绑定，在各种软件中都有广泛支持。
- en: Use the cheat sheets in this chapter to get started with command-line editing,
    but know that after a day or two of practice, you’ll be ready to learn additional
    shortcuts and commands in vim. That’s best done through a combination of vimtutor,
    online cheat sheets, and YouTube videos. We also really like the book *Practical
    Vim*, 2^(nd) Edition, by Drew Neil.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用本章的速查表开始命令行编辑，但要知道，在练习一两天后，你将准备好学习 vim 中的其他快捷方式和命令。最好通过 vimtutor、在线速查表和YouTube
    视频结合学习。我们也非常喜欢 Drew Neil 的书籍《实用 Vim》，第二版。
- en: Becoming comfortable with command-line text editing is one of the surest ways
    to look and feel like a professional when you’re working. Don’t neglect this skillset!
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在工作时，熟练掌握命令行文本编辑是看起来和感觉像专业人士的最可靠方法之一。不要忽视这一技能集！
- en: Learn more on Discord
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多信息
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入本书的 Discord 社区 – 在这里你可以分享反馈，向作者提问，了解新版本发布信息 – 请扫描下面的 QR 码：
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/SecNet](https://packt.link/SecNet)'
- en: '![](img/QR_Code1768422420210094187.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code1768422420210094187.png)'
